
H10R4x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017074  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003698  08017130  08017130  00027130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a7c8  0801a7c8  000302b0  2**0
                  CONTENTS
  4 .ARM          00000000  0801a7c8  0801a7c8  000302b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a7c8  0801a7c8  000302b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a7c8  0801a7c8  0002a7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a7cc  0801a7cc  0002a7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0801a7d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063bc  200002b0  0801aa80  000302b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000666c  0801aa80  0003666c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00055f62  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007f91  00000000  00000000  0008623a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a27a  00000000  00000000  0008e1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001dc0  00000000  00000000  000a8448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001fa0  00000000  00000000  000aa208  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001c658  00000000  00000000  000ac1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00026dc8  00000000  00000000  000c8800  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00084988  00000000  00000000  000ef5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00173f50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061a0  00000000  00000000  00173fcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200002b0 	.word	0x200002b0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017118 	.word	0x08017118

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200002b4 	.word	0x200002b4
 8000100:	08017118 	.word	0x08017118

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f883 	bl	8001544 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffdb 	bl	8001404 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f875 	bl	8001544 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f86b 	bl	8001544 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fffd 	bl	800147c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fff3 	bl	800147c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 f8fb 	bl	80006a8 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f87d 	bl	80005bc <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f8ed 	bl	80006a8 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f8e3 	bl	80006a8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f88b 	bl	800060c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f881 	bl	800060c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_ulcmp>:
 8000518:	4299      	cmp	r1, r3
 800051a:	d101      	bne.n	8000520 <__aeabi_ulcmp+0x8>
 800051c:	1a80      	subs	r0, r0, r2
 800051e:	d004      	beq.n	800052a <__aeabi_ulcmp+0x12>
 8000520:	d202      	bcs.n	8000528 <__aeabi_ulcmp+0x10>
 8000522:	2001      	movs	r0, #1
 8000524:	4240      	negs	r0, r0
 8000526:	4770      	bx	lr
 8000528:	2001      	movs	r0, #1
 800052a:	4770      	bx	lr

0800052c <__aeabi_lmul>:
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	46ce      	mov	lr, r9
 8000530:	4647      	mov	r7, r8
 8000532:	0415      	lsls	r5, r2, #16
 8000534:	0c2d      	lsrs	r5, r5, #16
 8000536:	002e      	movs	r6, r5
 8000538:	b580      	push	{r7, lr}
 800053a:	0407      	lsls	r7, r0, #16
 800053c:	0c14      	lsrs	r4, r2, #16
 800053e:	0c3f      	lsrs	r7, r7, #16
 8000540:	4699      	mov	r9, r3
 8000542:	0c03      	lsrs	r3, r0, #16
 8000544:	437e      	muls	r6, r7
 8000546:	435d      	muls	r5, r3
 8000548:	4367      	muls	r7, r4
 800054a:	4363      	muls	r3, r4
 800054c:	197f      	adds	r7, r7, r5
 800054e:	0c34      	lsrs	r4, r6, #16
 8000550:	19e4      	adds	r4, r4, r7
 8000552:	469c      	mov	ip, r3
 8000554:	42a5      	cmp	r5, r4
 8000556:	d903      	bls.n	8000560 <__aeabi_lmul+0x34>
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	025b      	lsls	r3, r3, #9
 800055c:	4698      	mov	r8, r3
 800055e:	44c4      	add	ip, r8
 8000560:	464b      	mov	r3, r9
 8000562:	4343      	muls	r3, r0
 8000564:	4351      	muls	r1, r2
 8000566:	0c25      	lsrs	r5, r4, #16
 8000568:	0436      	lsls	r6, r6, #16
 800056a:	4465      	add	r5, ip
 800056c:	0c36      	lsrs	r6, r6, #16
 800056e:	0424      	lsls	r4, r4, #16
 8000570:	19a4      	adds	r4, r4, r6
 8000572:	195b      	adds	r3, r3, r5
 8000574:	1859      	adds	r1, r3, r1
 8000576:	0020      	movs	r0, r4
 8000578:	bc0c      	pop	{r2, r3}
 800057a:	4690      	mov	r8, r2
 800057c:	4699      	mov	r9, r3
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000580 <__aeabi_d2uiz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	2200      	movs	r2, #0
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <__aeabi_d2uiz+0x38>)
 8000586:	0004      	movs	r4, r0
 8000588:	000d      	movs	r5, r1
 800058a:	f7ff ff81 	bl	8000490 <__aeabi_dcmpge>
 800058e:	2800      	cmp	r0, #0
 8000590:	d104      	bne.n	800059c <__aeabi_d2uiz+0x1c>
 8000592:	0020      	movs	r0, r4
 8000594:	0029      	movs	r1, r5
 8000596:	f001 fe13 	bl	80021c0 <__aeabi_d2iz>
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <__aeabi_d2uiz+0x38>)
 800059e:	2200      	movs	r2, #0
 80005a0:	0020      	movs	r0, r4
 80005a2:	0029      	movs	r1, r5
 80005a4:	f001 faa8 	bl	8001af8 <__aeabi_dsub>
 80005a8:	f001 fe0a 	bl	80021c0 <__aeabi_d2iz>
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	061b      	lsls	r3, r3, #24
 80005b0:	469c      	mov	ip, r3
 80005b2:	4460      	add	r0, ip
 80005b4:	e7f1      	b.n	800059a <__aeabi_d2uiz+0x1a>
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	41e00000 	.word	0x41e00000

080005bc <__eqsf2>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	0042      	lsls	r2, r0, #1
 80005c0:	024e      	lsls	r6, r1, #9
 80005c2:	004c      	lsls	r4, r1, #1
 80005c4:	0245      	lsls	r5, r0, #9
 80005c6:	0a6d      	lsrs	r5, r5, #9
 80005c8:	0e12      	lsrs	r2, r2, #24
 80005ca:	0fc3      	lsrs	r3, r0, #31
 80005cc:	0a76      	lsrs	r6, r6, #9
 80005ce:	0e24      	lsrs	r4, r4, #24
 80005d0:	0fc9      	lsrs	r1, r1, #31
 80005d2:	2aff      	cmp	r2, #255	; 0xff
 80005d4:	d00f      	beq.n	80005f6 <__eqsf2+0x3a>
 80005d6:	2cff      	cmp	r4, #255	; 0xff
 80005d8:	d011      	beq.n	80005fe <__eqsf2+0x42>
 80005da:	2001      	movs	r0, #1
 80005dc:	42a2      	cmp	r2, r4
 80005de:	d000      	beq.n	80005e2 <__eqsf2+0x26>
 80005e0:	bd70      	pop	{r4, r5, r6, pc}
 80005e2:	42b5      	cmp	r5, r6
 80005e4:	d1fc      	bne.n	80005e0 <__eqsf2+0x24>
 80005e6:	428b      	cmp	r3, r1
 80005e8:	d00d      	beq.n	8000606 <__eqsf2+0x4a>
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	d1f8      	bne.n	80005e0 <__eqsf2+0x24>
 80005ee:	0028      	movs	r0, r5
 80005f0:	1e45      	subs	r5, r0, #1
 80005f2:	41a8      	sbcs	r0, r5
 80005f4:	e7f4      	b.n	80005e0 <__eqsf2+0x24>
 80005f6:	2001      	movs	r0, #1
 80005f8:	2d00      	cmp	r5, #0
 80005fa:	d1f1      	bne.n	80005e0 <__eqsf2+0x24>
 80005fc:	e7eb      	b.n	80005d6 <__eqsf2+0x1a>
 80005fe:	2001      	movs	r0, #1
 8000600:	2e00      	cmp	r6, #0
 8000602:	d1ed      	bne.n	80005e0 <__eqsf2+0x24>
 8000604:	e7e9      	b.n	80005da <__eqsf2+0x1e>
 8000606:	2000      	movs	r0, #0
 8000608:	e7ea      	b.n	80005e0 <__eqsf2+0x24>
 800060a:	46c0      	nop			; (mov r8, r8)

0800060c <__gesf2>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	004a      	lsls	r2, r1, #1
 8000610:	024e      	lsls	r6, r1, #9
 8000612:	0245      	lsls	r5, r0, #9
 8000614:	0044      	lsls	r4, r0, #1
 8000616:	0a6d      	lsrs	r5, r5, #9
 8000618:	0e24      	lsrs	r4, r4, #24
 800061a:	0fc3      	lsrs	r3, r0, #31
 800061c:	0a76      	lsrs	r6, r6, #9
 800061e:	0e12      	lsrs	r2, r2, #24
 8000620:	0fc9      	lsrs	r1, r1, #31
 8000622:	2cff      	cmp	r4, #255	; 0xff
 8000624:	d015      	beq.n	8000652 <__gesf2+0x46>
 8000626:	2aff      	cmp	r2, #255	; 0xff
 8000628:	d00e      	beq.n	8000648 <__gesf2+0x3c>
 800062a:	2c00      	cmp	r4, #0
 800062c:	d115      	bne.n	800065a <__gesf2+0x4e>
 800062e:	2a00      	cmp	r2, #0
 8000630:	d101      	bne.n	8000636 <__gesf2+0x2a>
 8000632:	2e00      	cmp	r6, #0
 8000634:	d01c      	beq.n	8000670 <__gesf2+0x64>
 8000636:	2d00      	cmp	r5, #0
 8000638:	d014      	beq.n	8000664 <__gesf2+0x58>
 800063a:	428b      	cmp	r3, r1
 800063c:	d027      	beq.n	800068e <__gesf2+0x82>
 800063e:	2002      	movs	r0, #2
 8000640:	3b01      	subs	r3, #1
 8000642:	4018      	ands	r0, r3
 8000644:	3801      	subs	r0, #1
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	2e00      	cmp	r6, #0
 800064a:	d0ee      	beq.n	800062a <__gesf2+0x1e>
 800064c:	2002      	movs	r0, #2
 800064e:	4240      	negs	r0, r0
 8000650:	e7f9      	b.n	8000646 <__gesf2+0x3a>
 8000652:	2d00      	cmp	r5, #0
 8000654:	d1fa      	bne.n	800064c <__gesf2+0x40>
 8000656:	2aff      	cmp	r2, #255	; 0xff
 8000658:	d00e      	beq.n	8000678 <__gesf2+0x6c>
 800065a:	2a00      	cmp	r2, #0
 800065c:	d10e      	bne.n	800067c <__gesf2+0x70>
 800065e:	2e00      	cmp	r6, #0
 8000660:	d0ed      	beq.n	800063e <__gesf2+0x32>
 8000662:	e00b      	b.n	800067c <__gesf2+0x70>
 8000664:	2301      	movs	r3, #1
 8000666:	3901      	subs	r1, #1
 8000668:	4399      	bics	r1, r3
 800066a:	0008      	movs	r0, r1
 800066c:	3001      	adds	r0, #1
 800066e:	e7ea      	b.n	8000646 <__gesf2+0x3a>
 8000670:	2000      	movs	r0, #0
 8000672:	2d00      	cmp	r5, #0
 8000674:	d0e7      	beq.n	8000646 <__gesf2+0x3a>
 8000676:	e7e2      	b.n	800063e <__gesf2+0x32>
 8000678:	2e00      	cmp	r6, #0
 800067a:	d1e7      	bne.n	800064c <__gesf2+0x40>
 800067c:	428b      	cmp	r3, r1
 800067e:	d1de      	bne.n	800063e <__gesf2+0x32>
 8000680:	4294      	cmp	r4, r2
 8000682:	dd05      	ble.n	8000690 <__gesf2+0x84>
 8000684:	2102      	movs	r1, #2
 8000686:	1e58      	subs	r0, r3, #1
 8000688:	4008      	ands	r0, r1
 800068a:	3801      	subs	r0, #1
 800068c:	e7db      	b.n	8000646 <__gesf2+0x3a>
 800068e:	2400      	movs	r4, #0
 8000690:	42a2      	cmp	r2, r4
 8000692:	dc04      	bgt.n	800069e <__gesf2+0x92>
 8000694:	42b5      	cmp	r5, r6
 8000696:	d8d2      	bhi.n	800063e <__gesf2+0x32>
 8000698:	2000      	movs	r0, #0
 800069a:	42b5      	cmp	r5, r6
 800069c:	d2d3      	bcs.n	8000646 <__gesf2+0x3a>
 800069e:	1e58      	subs	r0, r3, #1
 80006a0:	2301      	movs	r3, #1
 80006a2:	4398      	bics	r0, r3
 80006a4:	3001      	adds	r0, #1
 80006a6:	e7ce      	b.n	8000646 <__gesf2+0x3a>

080006a8 <__lesf2>:
 80006a8:	b530      	push	{r4, r5, lr}
 80006aa:	0042      	lsls	r2, r0, #1
 80006ac:	0244      	lsls	r4, r0, #9
 80006ae:	024d      	lsls	r5, r1, #9
 80006b0:	0fc3      	lsrs	r3, r0, #31
 80006b2:	0048      	lsls	r0, r1, #1
 80006b4:	0a64      	lsrs	r4, r4, #9
 80006b6:	0e12      	lsrs	r2, r2, #24
 80006b8:	0a6d      	lsrs	r5, r5, #9
 80006ba:	0e00      	lsrs	r0, r0, #24
 80006bc:	0fc9      	lsrs	r1, r1, #31
 80006be:	2aff      	cmp	r2, #255	; 0xff
 80006c0:	d012      	beq.n	80006e8 <__lesf2+0x40>
 80006c2:	28ff      	cmp	r0, #255	; 0xff
 80006c4:	d00c      	beq.n	80006e0 <__lesf2+0x38>
 80006c6:	2a00      	cmp	r2, #0
 80006c8:	d112      	bne.n	80006f0 <__lesf2+0x48>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d119      	bne.n	8000702 <__lesf2+0x5a>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d117      	bne.n	8000702 <__lesf2+0x5a>
 80006d2:	2c00      	cmp	r4, #0
 80006d4:	d02b      	beq.n	800072e <__lesf2+0x86>
 80006d6:	2002      	movs	r0, #2
 80006d8:	3b01      	subs	r3, #1
 80006da:	4018      	ands	r0, r3
 80006dc:	3801      	subs	r0, #1
 80006de:	e026      	b.n	800072e <__lesf2+0x86>
 80006e0:	2d00      	cmp	r5, #0
 80006e2:	d0f0      	beq.n	80006c6 <__lesf2+0x1e>
 80006e4:	2002      	movs	r0, #2
 80006e6:	e022      	b.n	800072e <__lesf2+0x86>
 80006e8:	2c00      	cmp	r4, #0
 80006ea:	d1fb      	bne.n	80006e4 <__lesf2+0x3c>
 80006ec:	28ff      	cmp	r0, #255	; 0xff
 80006ee:	d01f      	beq.n	8000730 <__lesf2+0x88>
 80006f0:	2800      	cmp	r0, #0
 80006f2:	d11f      	bne.n	8000734 <__lesf2+0x8c>
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d11d      	bne.n	8000734 <__lesf2+0x8c>
 80006f8:	2002      	movs	r0, #2
 80006fa:	3b01      	subs	r3, #1
 80006fc:	4018      	ands	r0, r3
 80006fe:	3801      	subs	r0, #1
 8000700:	e015      	b.n	800072e <__lesf2+0x86>
 8000702:	2c00      	cmp	r4, #0
 8000704:	d00e      	beq.n	8000724 <__lesf2+0x7c>
 8000706:	428b      	cmp	r3, r1
 8000708:	d1e5      	bne.n	80006d6 <__lesf2+0x2e>
 800070a:	2200      	movs	r2, #0
 800070c:	4290      	cmp	r0, r2
 800070e:	dc04      	bgt.n	800071a <__lesf2+0x72>
 8000710:	42ac      	cmp	r4, r5
 8000712:	d8e0      	bhi.n	80006d6 <__lesf2+0x2e>
 8000714:	2000      	movs	r0, #0
 8000716:	42ac      	cmp	r4, r5
 8000718:	d209      	bcs.n	800072e <__lesf2+0x86>
 800071a:	1e58      	subs	r0, r3, #1
 800071c:	2301      	movs	r3, #1
 800071e:	4398      	bics	r0, r3
 8000720:	3001      	adds	r0, #1
 8000722:	e004      	b.n	800072e <__lesf2+0x86>
 8000724:	2301      	movs	r3, #1
 8000726:	3901      	subs	r1, #1
 8000728:	4399      	bics	r1, r3
 800072a:	0008      	movs	r0, r1
 800072c:	3001      	adds	r0, #1
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	2d00      	cmp	r5, #0
 8000732:	d1d7      	bne.n	80006e4 <__lesf2+0x3c>
 8000734:	428b      	cmp	r3, r1
 8000736:	d1ce      	bne.n	80006d6 <__lesf2+0x2e>
 8000738:	4282      	cmp	r2, r0
 800073a:	dde7      	ble.n	800070c <__lesf2+0x64>
 800073c:	2102      	movs	r1, #2
 800073e:	1e58      	subs	r0, r3, #1
 8000740:	4008      	ands	r0, r1
 8000742:	3801      	subs	r0, #1
 8000744:	e7f3      	b.n	800072e <__lesf2+0x86>
 8000746:	46c0      	nop			; (mov r8, r8)

08000748 <__aeabi_ui2f>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	1e04      	subs	r4, r0, #0
 800074c:	d034      	beq.n	80007b8 <__aeabi_ui2f+0x70>
 800074e:	f001 feaf 	bl	80024b0 <__clzsi2>
 8000752:	229e      	movs	r2, #158	; 0x9e
 8000754:	1a12      	subs	r2, r2, r0
 8000756:	2a96      	cmp	r2, #150	; 0x96
 8000758:	dc07      	bgt.n	800076a <__aeabi_ui2f+0x22>
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	2808      	cmp	r0, #8
 800075e:	dd2e      	ble.n	80007be <__aeabi_ui2f+0x76>
 8000760:	3808      	subs	r0, #8
 8000762:	4084      	lsls	r4, r0
 8000764:	0260      	lsls	r0, r4, #9
 8000766:	0a40      	lsrs	r0, r0, #9
 8000768:	e021      	b.n	80007ae <__aeabi_ui2f+0x66>
 800076a:	2a99      	cmp	r2, #153	; 0x99
 800076c:	dd09      	ble.n	8000782 <__aeabi_ui2f+0x3a>
 800076e:	0003      	movs	r3, r0
 8000770:	0021      	movs	r1, r4
 8000772:	331b      	adds	r3, #27
 8000774:	4099      	lsls	r1, r3
 8000776:	1e4b      	subs	r3, r1, #1
 8000778:	4199      	sbcs	r1, r3
 800077a:	2305      	movs	r3, #5
 800077c:	1a1b      	subs	r3, r3, r0
 800077e:	40dc      	lsrs	r4, r3
 8000780:	430c      	orrs	r4, r1
 8000782:	2805      	cmp	r0, #5
 8000784:	dd01      	ble.n	800078a <__aeabi_ui2f+0x42>
 8000786:	1f43      	subs	r3, r0, #5
 8000788:	409c      	lsls	r4, r3
 800078a:	0023      	movs	r3, r4
 800078c:	490d      	ldr	r1, [pc, #52]	; (80007c4 <__aeabi_ui2f+0x7c>)
 800078e:	400b      	ands	r3, r1
 8000790:	0765      	lsls	r5, r4, #29
 8000792:	d009      	beq.n	80007a8 <__aeabi_ui2f+0x60>
 8000794:	250f      	movs	r5, #15
 8000796:	402c      	ands	r4, r5
 8000798:	2c04      	cmp	r4, #4
 800079a:	d005      	beq.n	80007a8 <__aeabi_ui2f+0x60>
 800079c:	3304      	adds	r3, #4
 800079e:	015c      	lsls	r4, r3, #5
 80007a0:	d502      	bpl.n	80007a8 <__aeabi_ui2f+0x60>
 80007a2:	229f      	movs	r2, #159	; 0x9f
 80007a4:	400b      	ands	r3, r1
 80007a6:	1a12      	subs	r2, r2, r0
 80007a8:	019b      	lsls	r3, r3, #6
 80007aa:	0a58      	lsrs	r0, r3, #9
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	0240      	lsls	r0, r0, #9
 80007b0:	05d2      	lsls	r2, r2, #23
 80007b2:	0a40      	lsrs	r0, r0, #9
 80007b4:	4310      	orrs	r0, r2
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	2200      	movs	r2, #0
 80007ba:	2000      	movs	r0, #0
 80007bc:	e7f7      	b.n	80007ae <__aeabi_ui2f+0x66>
 80007be:	0260      	lsls	r0, r4, #9
 80007c0:	0a40      	lsrs	r0, r0, #9
 80007c2:	e7f4      	b.n	80007ae <__aeabi_ui2f+0x66>
 80007c4:	fbffffff 	.word	0xfbffffff

080007c8 <__aeabi_dadd>:
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	464f      	mov	r7, r9
 80007cc:	4646      	mov	r6, r8
 80007ce:	46d6      	mov	lr, sl
 80007d0:	000c      	movs	r4, r1
 80007d2:	0309      	lsls	r1, r1, #12
 80007d4:	b5c0      	push	{r6, r7, lr}
 80007d6:	0a49      	lsrs	r1, r1, #9
 80007d8:	0f47      	lsrs	r7, r0, #29
 80007da:	005e      	lsls	r6, r3, #1
 80007dc:	4339      	orrs	r1, r7
 80007de:	031f      	lsls	r7, r3, #12
 80007e0:	0fdb      	lsrs	r3, r3, #31
 80007e2:	469c      	mov	ip, r3
 80007e4:	0065      	lsls	r5, r4, #1
 80007e6:	0a7b      	lsrs	r3, r7, #9
 80007e8:	0f57      	lsrs	r7, r2, #29
 80007ea:	431f      	orrs	r7, r3
 80007ec:	0d6d      	lsrs	r5, r5, #21
 80007ee:	0fe4      	lsrs	r4, r4, #31
 80007f0:	0d76      	lsrs	r6, r6, #21
 80007f2:	46a1      	mov	r9, r4
 80007f4:	00c0      	lsls	r0, r0, #3
 80007f6:	46b8      	mov	r8, r7
 80007f8:	00d2      	lsls	r2, r2, #3
 80007fa:	1bab      	subs	r3, r5, r6
 80007fc:	4564      	cmp	r4, ip
 80007fe:	d07b      	beq.n	80008f8 <__aeabi_dadd+0x130>
 8000800:	2b00      	cmp	r3, #0
 8000802:	dd5f      	ble.n	80008c4 <__aeabi_dadd+0xfc>
 8000804:	2e00      	cmp	r6, #0
 8000806:	d000      	beq.n	800080a <__aeabi_dadd+0x42>
 8000808:	e0a4      	b.n	8000954 <__aeabi_dadd+0x18c>
 800080a:	003e      	movs	r6, r7
 800080c:	4316      	orrs	r6, r2
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x4a>
 8000810:	e112      	b.n	8000a38 <__aeabi_dadd+0x270>
 8000812:	1e5e      	subs	r6, r3, #1
 8000814:	2e00      	cmp	r6, #0
 8000816:	d000      	beq.n	800081a <__aeabi_dadd+0x52>
 8000818:	e19e      	b.n	8000b58 <__aeabi_dadd+0x390>
 800081a:	1a87      	subs	r7, r0, r2
 800081c:	4643      	mov	r3, r8
 800081e:	42b8      	cmp	r0, r7
 8000820:	4180      	sbcs	r0, r0
 8000822:	2501      	movs	r5, #1
 8000824:	1ac9      	subs	r1, r1, r3
 8000826:	4240      	negs	r0, r0
 8000828:	1a09      	subs	r1, r1, r0
 800082a:	020b      	lsls	r3, r1, #8
 800082c:	d400      	bmi.n	8000830 <__aeabi_dadd+0x68>
 800082e:	e131      	b.n	8000a94 <__aeabi_dadd+0x2cc>
 8000830:	0249      	lsls	r1, r1, #9
 8000832:	0a4e      	lsrs	r6, r1, #9
 8000834:	2e00      	cmp	r6, #0
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x72>
 8000838:	e16e      	b.n	8000b18 <__aeabi_dadd+0x350>
 800083a:	0030      	movs	r0, r6
 800083c:	f001 fe38 	bl	80024b0 <__clzsi2>
 8000840:	0003      	movs	r3, r0
 8000842:	3b08      	subs	r3, #8
 8000844:	2b1f      	cmp	r3, #31
 8000846:	dd00      	ble.n	800084a <__aeabi_dadd+0x82>
 8000848:	e161      	b.n	8000b0e <__aeabi_dadd+0x346>
 800084a:	2220      	movs	r2, #32
 800084c:	0039      	movs	r1, r7
 800084e:	1ad2      	subs	r2, r2, r3
 8000850:	409e      	lsls	r6, r3
 8000852:	40d1      	lsrs	r1, r2
 8000854:	409f      	lsls	r7, r3
 8000856:	430e      	orrs	r6, r1
 8000858:	429d      	cmp	r5, r3
 800085a:	dd00      	ble.n	800085e <__aeabi_dadd+0x96>
 800085c:	e151      	b.n	8000b02 <__aeabi_dadd+0x33a>
 800085e:	1b5d      	subs	r5, r3, r5
 8000860:	1c6b      	adds	r3, r5, #1
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0xa0>
 8000866:	e17c      	b.n	8000b62 <__aeabi_dadd+0x39a>
 8000868:	2120      	movs	r1, #32
 800086a:	1ac9      	subs	r1, r1, r3
 800086c:	003d      	movs	r5, r7
 800086e:	0030      	movs	r0, r6
 8000870:	408f      	lsls	r7, r1
 8000872:	4088      	lsls	r0, r1
 8000874:	40dd      	lsrs	r5, r3
 8000876:	1e79      	subs	r1, r7, #1
 8000878:	418f      	sbcs	r7, r1
 800087a:	0031      	movs	r1, r6
 800087c:	2207      	movs	r2, #7
 800087e:	4328      	orrs	r0, r5
 8000880:	40d9      	lsrs	r1, r3
 8000882:	2500      	movs	r5, #0
 8000884:	4307      	orrs	r7, r0
 8000886:	403a      	ands	r2, r7
 8000888:	2a00      	cmp	r2, #0
 800088a:	d009      	beq.n	80008a0 <__aeabi_dadd+0xd8>
 800088c:	230f      	movs	r3, #15
 800088e:	403b      	ands	r3, r7
 8000890:	2b04      	cmp	r3, #4
 8000892:	d005      	beq.n	80008a0 <__aeabi_dadd+0xd8>
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	42bb      	cmp	r3, r7
 8000898:	41bf      	sbcs	r7, r7
 800089a:	427f      	negs	r7, r7
 800089c:	19c9      	adds	r1, r1, r7
 800089e:	001f      	movs	r7, r3
 80008a0:	020b      	lsls	r3, r1, #8
 80008a2:	d400      	bmi.n	80008a6 <__aeabi_dadd+0xde>
 80008a4:	e226      	b.n	8000cf4 <__aeabi_dadd+0x52c>
 80008a6:	1c6a      	adds	r2, r5, #1
 80008a8:	4bc6      	ldr	r3, [pc, #792]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 80008aa:	0555      	lsls	r5, r2, #21
 80008ac:	0d6d      	lsrs	r5, r5, #21
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dadd+0xec>
 80008b2:	e106      	b.n	8000ac2 <__aeabi_dadd+0x2fa>
 80008b4:	4ac4      	ldr	r2, [pc, #784]	; (8000bc8 <__aeabi_dadd+0x400>)
 80008b6:	08ff      	lsrs	r7, r7, #3
 80008b8:	400a      	ands	r2, r1
 80008ba:	0753      	lsls	r3, r2, #29
 80008bc:	0252      	lsls	r2, r2, #9
 80008be:	433b      	orrs	r3, r7
 80008c0:	0b12      	lsrs	r2, r2, #12
 80008c2:	e08e      	b.n	80009e2 <__aeabi_dadd+0x21a>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d000      	beq.n	80008ca <__aeabi_dadd+0x102>
 80008c8:	e0b8      	b.n	8000a3c <__aeabi_dadd+0x274>
 80008ca:	1c6b      	adds	r3, r5, #1
 80008cc:	055b      	lsls	r3, r3, #21
 80008ce:	0d5b      	lsrs	r3, r3, #21
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	dc00      	bgt.n	80008d6 <__aeabi_dadd+0x10e>
 80008d4:	e130      	b.n	8000b38 <__aeabi_dadd+0x370>
 80008d6:	1a87      	subs	r7, r0, r2
 80008d8:	4643      	mov	r3, r8
 80008da:	42b8      	cmp	r0, r7
 80008dc:	41b6      	sbcs	r6, r6
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	4276      	negs	r6, r6
 80008e2:	1b9e      	subs	r6, r3, r6
 80008e4:	0233      	lsls	r3, r6, #8
 80008e6:	d500      	bpl.n	80008ea <__aeabi_dadd+0x122>
 80008e8:	e14c      	b.n	8000b84 <__aeabi_dadd+0x3bc>
 80008ea:	003b      	movs	r3, r7
 80008ec:	4333      	orrs	r3, r6
 80008ee:	d1a1      	bne.n	8000834 <__aeabi_dadd+0x6c>
 80008f0:	2200      	movs	r2, #0
 80008f2:	2400      	movs	r4, #0
 80008f4:	2500      	movs	r5, #0
 80008f6:	e070      	b.n	80009da <__aeabi_dadd+0x212>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	dc00      	bgt.n	80008fe <__aeabi_dadd+0x136>
 80008fc:	e0e5      	b.n	8000aca <__aeabi_dadd+0x302>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x13c>
 8000902:	e083      	b.n	8000a0c <__aeabi_dadd+0x244>
 8000904:	4eaf      	ldr	r6, [pc, #700]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 8000906:	42b5      	cmp	r5, r6
 8000908:	d060      	beq.n	80009cc <__aeabi_dadd+0x204>
 800090a:	2680      	movs	r6, #128	; 0x80
 800090c:	0436      	lsls	r6, r6, #16
 800090e:	4337      	orrs	r7, r6
 8000910:	46b8      	mov	r8, r7
 8000912:	2b38      	cmp	r3, #56	; 0x38
 8000914:	dc00      	bgt.n	8000918 <__aeabi_dadd+0x150>
 8000916:	e13e      	b.n	8000b96 <__aeabi_dadd+0x3ce>
 8000918:	4643      	mov	r3, r8
 800091a:	4313      	orrs	r3, r2
 800091c:	001f      	movs	r7, r3
 800091e:	1e7a      	subs	r2, r7, #1
 8000920:	4197      	sbcs	r7, r2
 8000922:	183f      	adds	r7, r7, r0
 8000924:	4287      	cmp	r7, r0
 8000926:	4180      	sbcs	r0, r0
 8000928:	4240      	negs	r0, r0
 800092a:	1809      	adds	r1, r1, r0
 800092c:	020b      	lsls	r3, r1, #8
 800092e:	d400      	bmi.n	8000932 <__aeabi_dadd+0x16a>
 8000930:	e0b0      	b.n	8000a94 <__aeabi_dadd+0x2cc>
 8000932:	4ba4      	ldr	r3, [pc, #656]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 8000934:	3501      	adds	r5, #1
 8000936:	429d      	cmp	r5, r3
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x174>
 800093a:	e0c3      	b.n	8000ac4 <__aeabi_dadd+0x2fc>
 800093c:	4aa2      	ldr	r2, [pc, #648]	; (8000bc8 <__aeabi_dadd+0x400>)
 800093e:	087b      	lsrs	r3, r7, #1
 8000940:	400a      	ands	r2, r1
 8000942:	2101      	movs	r1, #1
 8000944:	400f      	ands	r7, r1
 8000946:	431f      	orrs	r7, r3
 8000948:	0851      	lsrs	r1, r2, #1
 800094a:	07d3      	lsls	r3, r2, #31
 800094c:	2207      	movs	r2, #7
 800094e:	431f      	orrs	r7, r3
 8000950:	403a      	ands	r2, r7
 8000952:	e799      	b.n	8000888 <__aeabi_dadd+0xc0>
 8000954:	4e9b      	ldr	r6, [pc, #620]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 8000956:	42b5      	cmp	r5, r6
 8000958:	d038      	beq.n	80009cc <__aeabi_dadd+0x204>
 800095a:	2680      	movs	r6, #128	; 0x80
 800095c:	0436      	lsls	r6, r6, #16
 800095e:	4337      	orrs	r7, r6
 8000960:	46b8      	mov	r8, r7
 8000962:	2b38      	cmp	r3, #56	; 0x38
 8000964:	dd00      	ble.n	8000968 <__aeabi_dadd+0x1a0>
 8000966:	e0dc      	b.n	8000b22 <__aeabi_dadd+0x35a>
 8000968:	2b1f      	cmp	r3, #31
 800096a:	dc00      	bgt.n	800096e <__aeabi_dadd+0x1a6>
 800096c:	e130      	b.n	8000bd0 <__aeabi_dadd+0x408>
 800096e:	001e      	movs	r6, r3
 8000970:	4647      	mov	r7, r8
 8000972:	3e20      	subs	r6, #32
 8000974:	40f7      	lsrs	r7, r6
 8000976:	46bc      	mov	ip, r7
 8000978:	2b20      	cmp	r3, #32
 800097a:	d004      	beq.n	8000986 <__aeabi_dadd+0x1be>
 800097c:	2640      	movs	r6, #64	; 0x40
 800097e:	1af3      	subs	r3, r6, r3
 8000980:	4646      	mov	r6, r8
 8000982:	409e      	lsls	r6, r3
 8000984:	4332      	orrs	r2, r6
 8000986:	0017      	movs	r7, r2
 8000988:	4663      	mov	r3, ip
 800098a:	1e7a      	subs	r2, r7, #1
 800098c:	4197      	sbcs	r7, r2
 800098e:	431f      	orrs	r7, r3
 8000990:	e0cc      	b.n	8000b2c <__aeabi_dadd+0x364>
 8000992:	2b00      	cmp	r3, #0
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1d0>
 8000996:	e204      	b.n	8000da2 <__aeabi_dadd+0x5da>
 8000998:	4643      	mov	r3, r8
 800099a:	4313      	orrs	r3, r2
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x1d8>
 800099e:	e159      	b.n	8000c54 <__aeabi_dadd+0x48c>
 80009a0:	074b      	lsls	r3, r1, #29
 80009a2:	08c0      	lsrs	r0, r0, #3
 80009a4:	4318      	orrs	r0, r3
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	08c9      	lsrs	r1, r1, #3
 80009aa:	031b      	lsls	r3, r3, #12
 80009ac:	4219      	tst	r1, r3
 80009ae:	d008      	beq.n	80009c2 <__aeabi_dadd+0x1fa>
 80009b0:	4645      	mov	r5, r8
 80009b2:	08ed      	lsrs	r5, r5, #3
 80009b4:	421d      	tst	r5, r3
 80009b6:	d104      	bne.n	80009c2 <__aeabi_dadd+0x1fa>
 80009b8:	4643      	mov	r3, r8
 80009ba:	08d0      	lsrs	r0, r2, #3
 80009bc:	0759      	lsls	r1, r3, #29
 80009be:	4308      	orrs	r0, r1
 80009c0:	0029      	movs	r1, r5
 80009c2:	0f42      	lsrs	r2, r0, #29
 80009c4:	00c9      	lsls	r1, r1, #3
 80009c6:	4d7f      	ldr	r5, [pc, #508]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 80009c8:	4311      	orrs	r1, r2
 80009ca:	00c0      	lsls	r0, r0, #3
 80009cc:	074b      	lsls	r3, r1, #29
 80009ce:	08ca      	lsrs	r2, r1, #3
 80009d0:	497c      	ldr	r1, [pc, #496]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 80009d2:	08c0      	lsrs	r0, r0, #3
 80009d4:	4303      	orrs	r3, r0
 80009d6:	428d      	cmp	r5, r1
 80009d8:	d068      	beq.n	8000aac <__aeabi_dadd+0x2e4>
 80009da:	0312      	lsls	r2, r2, #12
 80009dc:	056d      	lsls	r5, r5, #21
 80009de:	0b12      	lsrs	r2, r2, #12
 80009e0:	0d6d      	lsrs	r5, r5, #21
 80009e2:	2100      	movs	r1, #0
 80009e4:	0312      	lsls	r2, r2, #12
 80009e6:	0018      	movs	r0, r3
 80009e8:	0b13      	lsrs	r3, r2, #12
 80009ea:	0d0a      	lsrs	r2, r1, #20
 80009ec:	0512      	lsls	r2, r2, #20
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4b76      	ldr	r3, [pc, #472]	; (8000bcc <__aeabi_dadd+0x404>)
 80009f2:	052d      	lsls	r5, r5, #20
 80009f4:	4013      	ands	r3, r2
 80009f6:	432b      	orrs	r3, r5
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	07e4      	lsls	r4, r4, #31
 80009fc:	085b      	lsrs	r3, r3, #1
 80009fe:	4323      	orrs	r3, r4
 8000a00:	0019      	movs	r1, r3
 8000a02:	bc1c      	pop	{r2, r3, r4}
 8000a04:	4690      	mov	r8, r2
 8000a06:	4699      	mov	r9, r3
 8000a08:	46a2      	mov	sl, r4
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	003e      	movs	r6, r7
 8000a0e:	4316      	orrs	r6, r2
 8000a10:	d012      	beq.n	8000a38 <__aeabi_dadd+0x270>
 8000a12:	1e5e      	subs	r6, r3, #1
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d000      	beq.n	8000a1a <__aeabi_dadd+0x252>
 8000a18:	e100      	b.n	8000c1c <__aeabi_dadd+0x454>
 8000a1a:	1887      	adds	r7, r0, r2
 8000a1c:	4287      	cmp	r7, r0
 8000a1e:	4180      	sbcs	r0, r0
 8000a20:	4441      	add	r1, r8
 8000a22:	4240      	negs	r0, r0
 8000a24:	1809      	adds	r1, r1, r0
 8000a26:	2501      	movs	r5, #1
 8000a28:	020b      	lsls	r3, r1, #8
 8000a2a:	d533      	bpl.n	8000a94 <__aeabi_dadd+0x2cc>
 8000a2c:	2502      	movs	r5, #2
 8000a2e:	e785      	b.n	800093c <__aeabi_dadd+0x174>
 8000a30:	4664      	mov	r4, ip
 8000a32:	0033      	movs	r3, r6
 8000a34:	4641      	mov	r1, r8
 8000a36:	0010      	movs	r0, r2
 8000a38:	001d      	movs	r5, r3
 8000a3a:	e7c7      	b.n	80009cc <__aeabi_dadd+0x204>
 8000a3c:	2d00      	cmp	r5, #0
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_dadd+0x27a>
 8000a40:	e0da      	b.n	8000bf8 <__aeabi_dadd+0x430>
 8000a42:	000c      	movs	r4, r1
 8000a44:	4304      	orrs	r4, r0
 8000a46:	d0f3      	beq.n	8000a30 <__aeabi_dadd+0x268>
 8000a48:	1c5c      	adds	r4, r3, #1
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_dadd+0x286>
 8000a4c:	e19f      	b.n	8000d8e <__aeabi_dadd+0x5c6>
 8000a4e:	4c5d      	ldr	r4, [pc, #372]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 8000a50:	42a6      	cmp	r6, r4
 8000a52:	d100      	bne.n	8000a56 <__aeabi_dadd+0x28e>
 8000a54:	e12f      	b.n	8000cb6 <__aeabi_dadd+0x4ee>
 8000a56:	43db      	mvns	r3, r3
 8000a58:	2b38      	cmp	r3, #56	; 0x38
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dadd+0x296>
 8000a5c:	e166      	b.n	8000d2c <__aeabi_dadd+0x564>
 8000a5e:	2b1f      	cmp	r3, #31
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_dadd+0x29c>
 8000a62:	e183      	b.n	8000d6c <__aeabi_dadd+0x5a4>
 8000a64:	2420      	movs	r4, #32
 8000a66:	0005      	movs	r5, r0
 8000a68:	1ae4      	subs	r4, r4, r3
 8000a6a:	000f      	movs	r7, r1
 8000a6c:	40dd      	lsrs	r5, r3
 8000a6e:	40d9      	lsrs	r1, r3
 8000a70:	40a0      	lsls	r0, r4
 8000a72:	4643      	mov	r3, r8
 8000a74:	40a7      	lsls	r7, r4
 8000a76:	1a5b      	subs	r3, r3, r1
 8000a78:	1e44      	subs	r4, r0, #1
 8000a7a:	41a0      	sbcs	r0, r4
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	432f      	orrs	r7, r5
 8000a80:	4338      	orrs	r0, r7
 8000a82:	1a17      	subs	r7, r2, r0
 8000a84:	42ba      	cmp	r2, r7
 8000a86:	4192      	sbcs	r2, r2
 8000a88:	4643      	mov	r3, r8
 8000a8a:	4252      	negs	r2, r2
 8000a8c:	1a99      	subs	r1, r3, r2
 8000a8e:	4664      	mov	r4, ip
 8000a90:	0035      	movs	r5, r6
 8000a92:	e6ca      	b.n	800082a <__aeabi_dadd+0x62>
 8000a94:	2207      	movs	r2, #7
 8000a96:	403a      	ands	r2, r7
 8000a98:	2a00      	cmp	r2, #0
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_dadd+0x2d6>
 8000a9c:	e6f6      	b.n	800088c <__aeabi_dadd+0xc4>
 8000a9e:	074b      	lsls	r3, r1, #29
 8000aa0:	08ca      	lsrs	r2, r1, #3
 8000aa2:	4948      	ldr	r1, [pc, #288]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 8000aa4:	08ff      	lsrs	r7, r7, #3
 8000aa6:	433b      	orrs	r3, r7
 8000aa8:	428d      	cmp	r5, r1
 8000aaa:	d196      	bne.n	80009da <__aeabi_dadd+0x212>
 8000aac:	0019      	movs	r1, r3
 8000aae:	4311      	orrs	r1, r2
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x2ec>
 8000ab2:	e19e      	b.n	8000df2 <__aeabi_dadd+0x62a>
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0309      	lsls	r1, r1, #12
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	0312      	lsls	r2, r2, #12
 8000abc:	0b12      	lsrs	r2, r2, #12
 8000abe:	4d41      	ldr	r5, [pc, #260]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 8000ac0:	e78f      	b.n	80009e2 <__aeabi_dadd+0x21a>
 8000ac2:	0015      	movs	r5, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e78b      	b.n	80009e2 <__aeabi_dadd+0x21a>
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dadd+0x308>
 8000ace:	e0c7      	b.n	8000c60 <__aeabi_dadd+0x498>
 8000ad0:	1c6b      	adds	r3, r5, #1
 8000ad2:	055f      	lsls	r7, r3, #21
 8000ad4:	0d7f      	lsrs	r7, r7, #21
 8000ad6:	2f01      	cmp	r7, #1
 8000ad8:	dc00      	bgt.n	8000adc <__aeabi_dadd+0x314>
 8000ada:	e0f1      	b.n	8000cc0 <__aeabi_dadd+0x4f8>
 8000adc:	4d39      	ldr	r5, [pc, #228]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 8000ade:	42ab      	cmp	r3, r5
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x31c>
 8000ae2:	e0b9      	b.n	8000c58 <__aeabi_dadd+0x490>
 8000ae4:	1885      	adds	r5, r0, r2
 8000ae6:	000a      	movs	r2, r1
 8000ae8:	4285      	cmp	r5, r0
 8000aea:	4189      	sbcs	r1, r1
 8000aec:	4442      	add	r2, r8
 8000aee:	4249      	negs	r1, r1
 8000af0:	1851      	adds	r1, r2, r1
 8000af2:	2207      	movs	r2, #7
 8000af4:	07cf      	lsls	r7, r1, #31
 8000af6:	086d      	lsrs	r5, r5, #1
 8000af8:	432f      	orrs	r7, r5
 8000afa:	0849      	lsrs	r1, r1, #1
 8000afc:	403a      	ands	r2, r7
 8000afe:	001d      	movs	r5, r3
 8000b00:	e6c2      	b.n	8000888 <__aeabi_dadd+0xc0>
 8000b02:	2207      	movs	r2, #7
 8000b04:	4930      	ldr	r1, [pc, #192]	; (8000bc8 <__aeabi_dadd+0x400>)
 8000b06:	1aed      	subs	r5, r5, r3
 8000b08:	4031      	ands	r1, r6
 8000b0a:	403a      	ands	r2, r7
 8000b0c:	e6bc      	b.n	8000888 <__aeabi_dadd+0xc0>
 8000b0e:	003e      	movs	r6, r7
 8000b10:	3828      	subs	r0, #40	; 0x28
 8000b12:	4086      	lsls	r6, r0
 8000b14:	2700      	movs	r7, #0
 8000b16:	e69f      	b.n	8000858 <__aeabi_dadd+0x90>
 8000b18:	0038      	movs	r0, r7
 8000b1a:	f001 fcc9 	bl	80024b0 <__clzsi2>
 8000b1e:	3020      	adds	r0, #32
 8000b20:	e68e      	b.n	8000840 <__aeabi_dadd+0x78>
 8000b22:	4643      	mov	r3, r8
 8000b24:	4313      	orrs	r3, r2
 8000b26:	001f      	movs	r7, r3
 8000b28:	1e7a      	subs	r2, r7, #1
 8000b2a:	4197      	sbcs	r7, r2
 8000b2c:	1bc7      	subs	r7, r0, r7
 8000b2e:	42b8      	cmp	r0, r7
 8000b30:	4180      	sbcs	r0, r0
 8000b32:	4240      	negs	r0, r0
 8000b34:	1a09      	subs	r1, r1, r0
 8000b36:	e678      	b.n	800082a <__aeabi_dadd+0x62>
 8000b38:	000e      	movs	r6, r1
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	4306      	orrs	r6, r0
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d161      	bne.n	8000c08 <__aeabi_dadd+0x440>
 8000b44:	2e00      	cmp	r6, #0
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x382>
 8000b48:	e0f4      	b.n	8000d34 <__aeabi_dadd+0x56c>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x388>
 8000b4e:	e11b      	b.n	8000d88 <__aeabi_dadd+0x5c0>
 8000b50:	4664      	mov	r4, ip
 8000b52:	0039      	movs	r1, r7
 8000b54:	0010      	movs	r0, r2
 8000b56:	e739      	b.n	80009cc <__aeabi_dadd+0x204>
 8000b58:	4f1a      	ldr	r7, [pc, #104]	; (8000bc4 <__aeabi_dadd+0x3fc>)
 8000b5a:	42bb      	cmp	r3, r7
 8000b5c:	d07a      	beq.n	8000c54 <__aeabi_dadd+0x48c>
 8000b5e:	0033      	movs	r3, r6
 8000b60:	e6ff      	b.n	8000962 <__aeabi_dadd+0x19a>
 8000b62:	0030      	movs	r0, r6
 8000b64:	3d1f      	subs	r5, #31
 8000b66:	40e8      	lsrs	r0, r5
 8000b68:	2b20      	cmp	r3, #32
 8000b6a:	d003      	beq.n	8000b74 <__aeabi_dadd+0x3ac>
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	1acb      	subs	r3, r1, r3
 8000b70:	409e      	lsls	r6, r3
 8000b72:	4337      	orrs	r7, r6
 8000b74:	1e7b      	subs	r3, r7, #1
 8000b76:	419f      	sbcs	r7, r3
 8000b78:	2207      	movs	r2, #7
 8000b7a:	4307      	orrs	r7, r0
 8000b7c:	403a      	ands	r2, r7
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2500      	movs	r5, #0
 8000b82:	e789      	b.n	8000a98 <__aeabi_dadd+0x2d0>
 8000b84:	1a17      	subs	r7, r2, r0
 8000b86:	4643      	mov	r3, r8
 8000b88:	42ba      	cmp	r2, r7
 8000b8a:	41b6      	sbcs	r6, r6
 8000b8c:	1a59      	subs	r1, r3, r1
 8000b8e:	4276      	negs	r6, r6
 8000b90:	1b8e      	subs	r6, r1, r6
 8000b92:	4664      	mov	r4, ip
 8000b94:	e64e      	b.n	8000834 <__aeabi_dadd+0x6c>
 8000b96:	2b1f      	cmp	r3, #31
 8000b98:	dd00      	ble.n	8000b9c <__aeabi_dadd+0x3d4>
 8000b9a:	e0ad      	b.n	8000cf8 <__aeabi_dadd+0x530>
 8000b9c:	2620      	movs	r6, #32
 8000b9e:	4647      	mov	r7, r8
 8000ba0:	1af6      	subs	r6, r6, r3
 8000ba2:	40b7      	lsls	r7, r6
 8000ba4:	46b9      	mov	r9, r7
 8000ba6:	0017      	movs	r7, r2
 8000ba8:	46b2      	mov	sl, r6
 8000baa:	40df      	lsrs	r7, r3
 8000bac:	464e      	mov	r6, r9
 8000bae:	433e      	orrs	r6, r7
 8000bb0:	0037      	movs	r7, r6
 8000bb2:	4656      	mov	r6, sl
 8000bb4:	40b2      	lsls	r2, r6
 8000bb6:	1e56      	subs	r6, r2, #1
 8000bb8:	41b2      	sbcs	r2, r6
 8000bba:	4317      	orrs	r7, r2
 8000bbc:	4642      	mov	r2, r8
 8000bbe:	40da      	lsrs	r2, r3
 8000bc0:	1889      	adds	r1, r1, r2
 8000bc2:	e6ae      	b.n	8000922 <__aeabi_dadd+0x15a>
 8000bc4:	000007ff 	.word	0x000007ff
 8000bc8:	ff7fffff 	.word	0xff7fffff
 8000bcc:	800fffff 	.word	0x800fffff
 8000bd0:	2620      	movs	r6, #32
 8000bd2:	4647      	mov	r7, r8
 8000bd4:	1af6      	subs	r6, r6, r3
 8000bd6:	40b7      	lsls	r7, r6
 8000bd8:	46b9      	mov	r9, r7
 8000bda:	0017      	movs	r7, r2
 8000bdc:	46b2      	mov	sl, r6
 8000bde:	40df      	lsrs	r7, r3
 8000be0:	464e      	mov	r6, r9
 8000be2:	433e      	orrs	r6, r7
 8000be4:	0037      	movs	r7, r6
 8000be6:	4656      	mov	r6, sl
 8000be8:	40b2      	lsls	r2, r6
 8000bea:	1e56      	subs	r6, r2, #1
 8000bec:	41b2      	sbcs	r2, r6
 8000bee:	4317      	orrs	r7, r2
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	40da      	lsrs	r2, r3
 8000bf4:	1a89      	subs	r1, r1, r2
 8000bf6:	e799      	b.n	8000b2c <__aeabi_dadd+0x364>
 8000bf8:	4c7f      	ldr	r4, [pc, #508]	; (8000df8 <__aeabi_dadd+0x630>)
 8000bfa:	42a6      	cmp	r6, r4
 8000bfc:	d05b      	beq.n	8000cb6 <__aeabi_dadd+0x4ee>
 8000bfe:	2480      	movs	r4, #128	; 0x80
 8000c00:	0424      	lsls	r4, r4, #16
 8000c02:	425b      	negs	r3, r3
 8000c04:	4321      	orrs	r1, r4
 8000c06:	e727      	b.n	8000a58 <__aeabi_dadd+0x290>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d10c      	bne.n	8000c26 <__aeabi_dadd+0x45e>
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_dadd+0x44a>
 8000c10:	e0cb      	b.n	8000daa <__aeabi_dadd+0x5e2>
 8000c12:	4664      	mov	r4, ip
 8000c14:	0039      	movs	r1, r7
 8000c16:	0010      	movs	r0, r2
 8000c18:	4d77      	ldr	r5, [pc, #476]	; (8000df8 <__aeabi_dadd+0x630>)
 8000c1a:	e6d7      	b.n	80009cc <__aeabi_dadd+0x204>
 8000c1c:	4f76      	ldr	r7, [pc, #472]	; (8000df8 <__aeabi_dadd+0x630>)
 8000c1e:	42bb      	cmp	r3, r7
 8000c20:	d018      	beq.n	8000c54 <__aeabi_dadd+0x48c>
 8000c22:	0033      	movs	r3, r6
 8000c24:	e675      	b.n	8000912 <__aeabi_dadd+0x14a>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d014      	beq.n	8000c54 <__aeabi_dadd+0x48c>
 8000c2a:	074b      	lsls	r3, r1, #29
 8000c2c:	08c0      	lsrs	r0, r0, #3
 8000c2e:	4318      	orrs	r0, r3
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	08c9      	lsrs	r1, r1, #3
 8000c34:	031b      	lsls	r3, r3, #12
 8000c36:	4219      	tst	r1, r3
 8000c38:	d007      	beq.n	8000c4a <__aeabi_dadd+0x482>
 8000c3a:	08fc      	lsrs	r4, r7, #3
 8000c3c:	421c      	tst	r4, r3
 8000c3e:	d104      	bne.n	8000c4a <__aeabi_dadd+0x482>
 8000c40:	0779      	lsls	r1, r7, #29
 8000c42:	08d0      	lsrs	r0, r2, #3
 8000c44:	4308      	orrs	r0, r1
 8000c46:	46e1      	mov	r9, ip
 8000c48:	0021      	movs	r1, r4
 8000c4a:	464c      	mov	r4, r9
 8000c4c:	0f42      	lsrs	r2, r0, #29
 8000c4e:	00c9      	lsls	r1, r1, #3
 8000c50:	4311      	orrs	r1, r2
 8000c52:	00c0      	lsls	r0, r0, #3
 8000c54:	4d68      	ldr	r5, [pc, #416]	; (8000df8 <__aeabi_dadd+0x630>)
 8000c56:	e6b9      	b.n	80009cc <__aeabi_dadd+0x204>
 8000c58:	001d      	movs	r5, r3
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e6c0      	b.n	80009e2 <__aeabi_dadd+0x21a>
 8000c60:	2d00      	cmp	r5, #0
 8000c62:	d15b      	bne.n	8000d1c <__aeabi_dadd+0x554>
 8000c64:	000d      	movs	r5, r1
 8000c66:	4305      	orrs	r5, r0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dadd+0x4a4>
 8000c6a:	e6e2      	b.n	8000a32 <__aeabi_dadd+0x26a>
 8000c6c:	1c5d      	adds	r5, r3, #1
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0x4aa>
 8000c70:	e0b0      	b.n	8000dd4 <__aeabi_dadd+0x60c>
 8000c72:	4d61      	ldr	r5, [pc, #388]	; (8000df8 <__aeabi_dadd+0x630>)
 8000c74:	42ae      	cmp	r6, r5
 8000c76:	d01f      	beq.n	8000cb8 <__aeabi_dadd+0x4f0>
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	2b38      	cmp	r3, #56	; 0x38
 8000c7c:	dc71      	bgt.n	8000d62 <__aeabi_dadd+0x59a>
 8000c7e:	2b1f      	cmp	r3, #31
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_dadd+0x4bc>
 8000c82:	e096      	b.n	8000db2 <__aeabi_dadd+0x5ea>
 8000c84:	2520      	movs	r5, #32
 8000c86:	000f      	movs	r7, r1
 8000c88:	1aed      	subs	r5, r5, r3
 8000c8a:	40af      	lsls	r7, r5
 8000c8c:	46b9      	mov	r9, r7
 8000c8e:	0007      	movs	r7, r0
 8000c90:	46aa      	mov	sl, r5
 8000c92:	40df      	lsrs	r7, r3
 8000c94:	464d      	mov	r5, r9
 8000c96:	433d      	orrs	r5, r7
 8000c98:	002f      	movs	r7, r5
 8000c9a:	4655      	mov	r5, sl
 8000c9c:	40a8      	lsls	r0, r5
 8000c9e:	40d9      	lsrs	r1, r3
 8000ca0:	1e45      	subs	r5, r0, #1
 8000ca2:	41a8      	sbcs	r0, r5
 8000ca4:	4488      	add	r8, r1
 8000ca6:	4307      	orrs	r7, r0
 8000ca8:	18bf      	adds	r7, r7, r2
 8000caa:	4297      	cmp	r7, r2
 8000cac:	4192      	sbcs	r2, r2
 8000cae:	4251      	negs	r1, r2
 8000cb0:	4441      	add	r1, r8
 8000cb2:	0035      	movs	r5, r6
 8000cb4:	e63a      	b.n	800092c <__aeabi_dadd+0x164>
 8000cb6:	4664      	mov	r4, ip
 8000cb8:	0035      	movs	r5, r6
 8000cba:	4641      	mov	r1, r8
 8000cbc:	0010      	movs	r0, r2
 8000cbe:	e685      	b.n	80009cc <__aeabi_dadd+0x204>
 8000cc0:	000b      	movs	r3, r1
 8000cc2:	4303      	orrs	r3, r0
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d000      	beq.n	8000cca <__aeabi_dadd+0x502>
 8000cc8:	e663      	b.n	8000992 <__aeabi_dadd+0x1ca>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f5      	beq.n	8000cba <__aeabi_dadd+0x4f2>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dadd+0x50e>
 8000cd4:	e67a      	b.n	80009cc <__aeabi_dadd+0x204>
 8000cd6:	1887      	adds	r7, r0, r2
 8000cd8:	4287      	cmp	r7, r0
 8000cda:	4180      	sbcs	r0, r0
 8000cdc:	2207      	movs	r2, #7
 8000cde:	4441      	add	r1, r8
 8000ce0:	4240      	negs	r0, r0
 8000ce2:	1809      	adds	r1, r1, r0
 8000ce4:	403a      	ands	r2, r7
 8000ce6:	020b      	lsls	r3, r1, #8
 8000ce8:	d400      	bmi.n	8000cec <__aeabi_dadd+0x524>
 8000cea:	e6d5      	b.n	8000a98 <__aeabi_dadd+0x2d0>
 8000cec:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <__aeabi_dadd+0x634>)
 8000cee:	3501      	adds	r5, #1
 8000cf0:	4019      	ands	r1, r3
 8000cf2:	e5c9      	b.n	8000888 <__aeabi_dadd+0xc0>
 8000cf4:	0038      	movs	r0, r7
 8000cf6:	e669      	b.n	80009cc <__aeabi_dadd+0x204>
 8000cf8:	001e      	movs	r6, r3
 8000cfa:	4647      	mov	r7, r8
 8000cfc:	3e20      	subs	r6, #32
 8000cfe:	40f7      	lsrs	r7, r6
 8000d00:	46bc      	mov	ip, r7
 8000d02:	2b20      	cmp	r3, #32
 8000d04:	d004      	beq.n	8000d10 <__aeabi_dadd+0x548>
 8000d06:	2640      	movs	r6, #64	; 0x40
 8000d08:	1af3      	subs	r3, r6, r3
 8000d0a:	4646      	mov	r6, r8
 8000d0c:	409e      	lsls	r6, r3
 8000d0e:	4332      	orrs	r2, r6
 8000d10:	0017      	movs	r7, r2
 8000d12:	4663      	mov	r3, ip
 8000d14:	1e7a      	subs	r2, r7, #1
 8000d16:	4197      	sbcs	r7, r2
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	e602      	b.n	8000922 <__aeabi_dadd+0x15a>
 8000d1c:	4d36      	ldr	r5, [pc, #216]	; (8000df8 <__aeabi_dadd+0x630>)
 8000d1e:	42ae      	cmp	r6, r5
 8000d20:	d0ca      	beq.n	8000cb8 <__aeabi_dadd+0x4f0>
 8000d22:	2580      	movs	r5, #128	; 0x80
 8000d24:	042d      	lsls	r5, r5, #16
 8000d26:	425b      	negs	r3, r3
 8000d28:	4329      	orrs	r1, r5
 8000d2a:	e7a6      	b.n	8000c7a <__aeabi_dadd+0x4b2>
 8000d2c:	4308      	orrs	r0, r1
 8000d2e:	1e41      	subs	r1, r0, #1
 8000d30:	4188      	sbcs	r0, r1
 8000d32:	e6a6      	b.n	8000a82 <__aeabi_dadd+0x2ba>
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dadd+0x572>
 8000d38:	e648      	b.n	80009cc <__aeabi_dadd+0x204>
 8000d3a:	1a87      	subs	r7, r0, r2
 8000d3c:	4643      	mov	r3, r8
 8000d3e:	42b8      	cmp	r0, r7
 8000d40:	41b6      	sbcs	r6, r6
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	4276      	negs	r6, r6
 8000d46:	1b9e      	subs	r6, r3, r6
 8000d48:	0233      	lsls	r3, r6, #8
 8000d4a:	d54b      	bpl.n	8000de4 <__aeabi_dadd+0x61c>
 8000d4c:	1a17      	subs	r7, r2, r0
 8000d4e:	4643      	mov	r3, r8
 8000d50:	42ba      	cmp	r2, r7
 8000d52:	4192      	sbcs	r2, r2
 8000d54:	1a59      	subs	r1, r3, r1
 8000d56:	4252      	negs	r2, r2
 8000d58:	1a89      	subs	r1, r1, r2
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	4664      	mov	r4, ip
 8000d5e:	403a      	ands	r2, r7
 8000d60:	e592      	b.n	8000888 <__aeabi_dadd+0xc0>
 8000d62:	4301      	orrs	r1, r0
 8000d64:	000f      	movs	r7, r1
 8000d66:	1e79      	subs	r1, r7, #1
 8000d68:	418f      	sbcs	r7, r1
 8000d6a:	e79d      	b.n	8000ca8 <__aeabi_dadd+0x4e0>
 8000d6c:	001c      	movs	r4, r3
 8000d6e:	000f      	movs	r7, r1
 8000d70:	3c20      	subs	r4, #32
 8000d72:	40e7      	lsrs	r7, r4
 8000d74:	2b20      	cmp	r3, #32
 8000d76:	d003      	beq.n	8000d80 <__aeabi_dadd+0x5b8>
 8000d78:	2440      	movs	r4, #64	; 0x40
 8000d7a:	1ae3      	subs	r3, r4, r3
 8000d7c:	4099      	lsls	r1, r3
 8000d7e:	4308      	orrs	r0, r1
 8000d80:	1e41      	subs	r1, r0, #1
 8000d82:	4188      	sbcs	r0, r1
 8000d84:	4338      	orrs	r0, r7
 8000d86:	e67c      	b.n	8000a82 <__aeabi_dadd+0x2ba>
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2400      	movs	r4, #0
 8000d8c:	e625      	b.n	80009da <__aeabi_dadd+0x212>
 8000d8e:	1a17      	subs	r7, r2, r0
 8000d90:	4643      	mov	r3, r8
 8000d92:	42ba      	cmp	r2, r7
 8000d94:	4192      	sbcs	r2, r2
 8000d96:	1a59      	subs	r1, r3, r1
 8000d98:	4252      	negs	r2, r2
 8000d9a:	1a89      	subs	r1, r1, r2
 8000d9c:	4664      	mov	r4, ip
 8000d9e:	0035      	movs	r5, r6
 8000da0:	e543      	b.n	800082a <__aeabi_dadd+0x62>
 8000da2:	4641      	mov	r1, r8
 8000da4:	0010      	movs	r0, r2
 8000da6:	4d14      	ldr	r5, [pc, #80]	; (8000df8 <__aeabi_dadd+0x630>)
 8000da8:	e610      	b.n	80009cc <__aeabi_dadd+0x204>
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	2400      	movs	r4, #0
 8000dae:	0312      	lsls	r2, r2, #12
 8000db0:	e680      	b.n	8000ab4 <__aeabi_dadd+0x2ec>
 8000db2:	001d      	movs	r5, r3
 8000db4:	000f      	movs	r7, r1
 8000db6:	3d20      	subs	r5, #32
 8000db8:	40ef      	lsrs	r7, r5
 8000dba:	46bc      	mov	ip, r7
 8000dbc:	2b20      	cmp	r3, #32
 8000dbe:	d003      	beq.n	8000dc8 <__aeabi_dadd+0x600>
 8000dc0:	2540      	movs	r5, #64	; 0x40
 8000dc2:	1aeb      	subs	r3, r5, r3
 8000dc4:	4099      	lsls	r1, r3
 8000dc6:	4308      	orrs	r0, r1
 8000dc8:	0007      	movs	r7, r0
 8000dca:	4663      	mov	r3, ip
 8000dcc:	1e78      	subs	r0, r7, #1
 8000dce:	4187      	sbcs	r7, r0
 8000dd0:	431f      	orrs	r7, r3
 8000dd2:	e769      	b.n	8000ca8 <__aeabi_dadd+0x4e0>
 8000dd4:	1887      	adds	r7, r0, r2
 8000dd6:	4297      	cmp	r7, r2
 8000dd8:	419b      	sbcs	r3, r3
 8000dda:	4441      	add	r1, r8
 8000ddc:	425b      	negs	r3, r3
 8000dde:	18c9      	adds	r1, r1, r3
 8000de0:	0035      	movs	r5, r6
 8000de2:	e5a3      	b.n	800092c <__aeabi_dadd+0x164>
 8000de4:	003b      	movs	r3, r7
 8000de6:	4333      	orrs	r3, r6
 8000de8:	d0ce      	beq.n	8000d88 <__aeabi_dadd+0x5c0>
 8000dea:	2207      	movs	r2, #7
 8000dec:	0031      	movs	r1, r6
 8000dee:	403a      	ands	r2, r7
 8000df0:	e652      	b.n	8000a98 <__aeabi_dadd+0x2d0>
 8000df2:	2300      	movs	r3, #0
 8000df4:	001a      	movs	r2, r3
 8000df6:	e5f4      	b.n	80009e2 <__aeabi_dadd+0x21a>
 8000df8:	000007ff 	.word	0x000007ff
 8000dfc:	ff7fffff 	.word	0xff7fffff

08000e00 <__aeabi_ddiv>:
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	4657      	mov	r7, sl
 8000e04:	46de      	mov	lr, fp
 8000e06:	464e      	mov	r6, r9
 8000e08:	4645      	mov	r5, r8
 8000e0a:	b5e0      	push	{r5, r6, r7, lr}
 8000e0c:	4683      	mov	fp, r0
 8000e0e:	0007      	movs	r7, r0
 8000e10:	030e      	lsls	r6, r1, #12
 8000e12:	0048      	lsls	r0, r1, #1
 8000e14:	b085      	sub	sp, #20
 8000e16:	4692      	mov	sl, r2
 8000e18:	001c      	movs	r4, r3
 8000e1a:	0b36      	lsrs	r6, r6, #12
 8000e1c:	0d40      	lsrs	r0, r0, #21
 8000e1e:	0fcd      	lsrs	r5, r1, #31
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_ddiv+0x26>
 8000e24:	e09d      	b.n	8000f62 <__aeabi_ddiv+0x162>
 8000e26:	4b95      	ldr	r3, [pc, #596]	; (800107c <__aeabi_ddiv+0x27c>)
 8000e28:	4298      	cmp	r0, r3
 8000e2a:	d039      	beq.n	8000ea0 <__aeabi_ddiv+0xa0>
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	00f6      	lsls	r6, r6, #3
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	431e      	orrs	r6, r3
 8000e34:	4a92      	ldr	r2, [pc, #584]	; (8001080 <__aeabi_ddiv+0x280>)
 8000e36:	0f7b      	lsrs	r3, r7, #29
 8000e38:	4333      	orrs	r3, r6
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	4694      	mov	ip, r2
 8000e3e:	0003      	movs	r3, r0
 8000e40:	4463      	add	r3, ip
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2300      	movs	r3, #0
 8000e46:	2600      	movs	r6, #0
 8000e48:	00ff      	lsls	r7, r7, #3
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	0323      	lsls	r3, r4, #12
 8000e4e:	0b1b      	lsrs	r3, r3, #12
 8000e50:	4698      	mov	r8, r3
 8000e52:	0063      	lsls	r3, r4, #1
 8000e54:	0fe4      	lsrs	r4, r4, #31
 8000e56:	4652      	mov	r2, sl
 8000e58:	0d5b      	lsrs	r3, r3, #21
 8000e5a:	9401      	str	r4, [sp, #4]
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_ddiv+0x60>
 8000e5e:	e0b3      	b.n	8000fc8 <__aeabi_ddiv+0x1c8>
 8000e60:	4986      	ldr	r1, [pc, #536]	; (800107c <__aeabi_ddiv+0x27c>)
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d100      	bne.n	8000e68 <__aeabi_ddiv+0x68>
 8000e66:	e09e      	b.n	8000fa6 <__aeabi_ddiv+0x1a6>
 8000e68:	4642      	mov	r2, r8
 8000e6a:	00d1      	lsls	r1, r2, #3
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	0412      	lsls	r2, r2, #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	4651      	mov	r1, sl
 8000e74:	0f49      	lsrs	r1, r1, #29
 8000e76:	4311      	orrs	r1, r2
 8000e78:	468b      	mov	fp, r1
 8000e7a:	4981      	ldr	r1, [pc, #516]	; (8001080 <__aeabi_ddiv+0x280>)
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	468c      	mov	ip, r1
 8000e80:	9900      	ldr	r1, [sp, #0]
 8000e82:	4463      	add	r3, ip
 8000e84:	1acb      	subs	r3, r1, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	00d2      	lsls	r2, r2, #3
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	002b      	movs	r3, r5
 8000e8e:	4063      	eors	r3, r4
 8000e90:	469a      	mov	sl, r3
 8000e92:	2e0f      	cmp	r6, #15
 8000e94:	d900      	bls.n	8000e98 <__aeabi_ddiv+0x98>
 8000e96:	e105      	b.n	80010a4 <__aeabi_ddiv+0x2a4>
 8000e98:	4b7a      	ldr	r3, [pc, #488]	; (8001084 <__aeabi_ddiv+0x284>)
 8000e9a:	00b6      	lsls	r6, r6, #2
 8000e9c:	599b      	ldr	r3, [r3, r6]
 8000e9e:	469f      	mov	pc, r3
 8000ea0:	465b      	mov	r3, fp
 8000ea2:	4333      	orrs	r3, r6
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_ddiv+0xaa>
 8000ea8:	e0b8      	b.n	800101c <__aeabi_ddiv+0x21c>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	2608      	movs	r6, #8
 8000eae:	2700      	movs	r7, #0
 8000eb0:	9000      	str	r0, [sp, #0]
 8000eb2:	9302      	str	r3, [sp, #8]
 8000eb4:	e7ca      	b.n	8000e4c <__aeabi_ddiv+0x4c>
 8000eb6:	46cb      	mov	fp, r9
 8000eb8:	003a      	movs	r2, r7
 8000eba:	9902      	ldr	r1, [sp, #8]
 8000ebc:	9501      	str	r5, [sp, #4]
 8000ebe:	9b01      	ldr	r3, [sp, #4]
 8000ec0:	469a      	mov	sl, r3
 8000ec2:	2902      	cmp	r1, #2
 8000ec4:	d027      	beq.n	8000f16 <__aeabi_ddiv+0x116>
 8000ec6:	2903      	cmp	r1, #3
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_ddiv+0xcc>
 8000eca:	e280      	b.n	80013ce <__aeabi_ddiv+0x5ce>
 8000ecc:	2901      	cmp	r1, #1
 8000ece:	d044      	beq.n	8000f5a <__aeabi_ddiv+0x15a>
 8000ed0:	496d      	ldr	r1, [pc, #436]	; (8001088 <__aeabi_ddiv+0x288>)
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	468c      	mov	ip, r1
 8000ed6:	4463      	add	r3, ip
 8000ed8:	001c      	movs	r4, r3
 8000eda:	2c00      	cmp	r4, #0
 8000edc:	dd38      	ble.n	8000f50 <__aeabi_ddiv+0x150>
 8000ede:	0753      	lsls	r3, r2, #29
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_ddiv+0xe4>
 8000ee2:	e213      	b.n	800130c <__aeabi_ddiv+0x50c>
 8000ee4:	08d2      	lsrs	r2, r2, #3
 8000ee6:	465b      	mov	r3, fp
 8000ee8:	01db      	lsls	r3, r3, #7
 8000eea:	d509      	bpl.n	8000f00 <__aeabi_ddiv+0x100>
 8000eec:	4659      	mov	r1, fp
 8000eee:	4b67      	ldr	r3, [pc, #412]	; (800108c <__aeabi_ddiv+0x28c>)
 8000ef0:	4019      	ands	r1, r3
 8000ef2:	468b      	mov	fp, r1
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	00c9      	lsls	r1, r1, #3
 8000ef8:	468c      	mov	ip, r1
 8000efa:	9b00      	ldr	r3, [sp, #0]
 8000efc:	4463      	add	r3, ip
 8000efe:	001c      	movs	r4, r3
 8000f00:	4b63      	ldr	r3, [pc, #396]	; (8001090 <__aeabi_ddiv+0x290>)
 8000f02:	429c      	cmp	r4, r3
 8000f04:	dc07      	bgt.n	8000f16 <__aeabi_ddiv+0x116>
 8000f06:	465b      	mov	r3, fp
 8000f08:	0564      	lsls	r4, r4, #21
 8000f0a:	075f      	lsls	r7, r3, #29
 8000f0c:	025b      	lsls	r3, r3, #9
 8000f0e:	4317      	orrs	r7, r2
 8000f10:	0b1b      	lsrs	r3, r3, #12
 8000f12:	0d62      	lsrs	r2, r4, #21
 8000f14:	e002      	b.n	8000f1c <__aeabi_ddiv+0x11c>
 8000f16:	2300      	movs	r3, #0
 8000f18:	2700      	movs	r7, #0
 8000f1a:	4a58      	ldr	r2, [pc, #352]	; (800107c <__aeabi_ddiv+0x27c>)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	031b      	lsls	r3, r3, #12
 8000f20:	0b1c      	lsrs	r4, r3, #12
 8000f22:	0d0b      	lsrs	r3, r1, #20
 8000f24:	051b      	lsls	r3, r3, #20
 8000f26:	4323      	orrs	r3, r4
 8000f28:	0514      	lsls	r4, r2, #20
 8000f2a:	4a5a      	ldr	r2, [pc, #360]	; (8001094 <__aeabi_ddiv+0x294>)
 8000f2c:	0038      	movs	r0, r7
 8000f2e:	4013      	ands	r3, r2
 8000f30:	431c      	orrs	r4, r3
 8000f32:	4653      	mov	r3, sl
 8000f34:	0064      	lsls	r4, r4, #1
 8000f36:	07db      	lsls	r3, r3, #31
 8000f38:	0864      	lsrs	r4, r4, #1
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	0021      	movs	r1, r4
 8000f3e:	b005      	add	sp, #20
 8000f40:	bc3c      	pop	{r2, r3, r4, r5}
 8000f42:	4690      	mov	r8, r2
 8000f44:	4699      	mov	r9, r3
 8000f46:	46a2      	mov	sl, r4
 8000f48:	46ab      	mov	fp, r5
 8000f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2301      	movs	r3, #1
 8000f52:	1b1b      	subs	r3, r3, r4
 8000f54:	2b38      	cmp	r3, #56	; 0x38
 8000f56:	dc00      	bgt.n	8000f5a <__aeabi_ddiv+0x15a>
 8000f58:	e1ad      	b.n	80012b6 <__aeabi_ddiv+0x4b6>
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	2700      	movs	r7, #0
 8000f60:	e7dc      	b.n	8000f1c <__aeabi_ddiv+0x11c>
 8000f62:	465b      	mov	r3, fp
 8000f64:	4333      	orrs	r3, r6
 8000f66:	4699      	mov	r9, r3
 8000f68:	d05e      	beq.n	8001028 <__aeabi_ddiv+0x228>
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_ddiv+0x170>
 8000f6e:	e18a      	b.n	8001286 <__aeabi_ddiv+0x486>
 8000f70:	0030      	movs	r0, r6
 8000f72:	f001 fa9d 	bl	80024b0 <__clzsi2>
 8000f76:	0003      	movs	r3, r0
 8000f78:	3b0b      	subs	r3, #11
 8000f7a:	2b1c      	cmp	r3, #28
 8000f7c:	dd00      	ble.n	8000f80 <__aeabi_ddiv+0x180>
 8000f7e:	e17b      	b.n	8001278 <__aeabi_ddiv+0x478>
 8000f80:	221d      	movs	r2, #29
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	465a      	mov	r2, fp
 8000f86:	0001      	movs	r1, r0
 8000f88:	40da      	lsrs	r2, r3
 8000f8a:	3908      	subs	r1, #8
 8000f8c:	408e      	lsls	r6, r1
 8000f8e:	0013      	movs	r3, r2
 8000f90:	465f      	mov	r7, fp
 8000f92:	4333      	orrs	r3, r6
 8000f94:	4699      	mov	r9, r3
 8000f96:	408f      	lsls	r7, r1
 8000f98:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <__aeabi_ddiv+0x298>)
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	e752      	b.n	8000e4c <__aeabi_ddiv+0x4c>
 8000fa6:	4641      	mov	r1, r8
 8000fa8:	4653      	mov	r3, sl
 8000faa:	430b      	orrs	r3, r1
 8000fac:	493b      	ldr	r1, [pc, #236]	; (800109c <__aeabi_ddiv+0x29c>)
 8000fae:	469b      	mov	fp, r3
 8000fb0:	468c      	mov	ip, r1
 8000fb2:	9b00      	ldr	r3, [sp, #0]
 8000fb4:	4463      	add	r3, ip
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	465b      	mov	r3, fp
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d13b      	bne.n	8001036 <__aeabi_ddiv+0x236>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	431e      	orrs	r6, r3
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	e761      	b.n	8000e8c <__aeabi_ddiv+0x8c>
 8000fc8:	4643      	mov	r3, r8
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	469b      	mov	fp, r3
 8000fce:	d037      	beq.n	8001040 <__aeabi_ddiv+0x240>
 8000fd0:	4643      	mov	r3, r8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_ddiv+0x1d8>
 8000fd6:	e162      	b.n	800129e <__aeabi_ddiv+0x49e>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	f001 fa69 	bl	80024b0 <__clzsi2>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	3b0b      	subs	r3, #11
 8000fe2:	2b1c      	cmp	r3, #28
 8000fe4:	dd00      	ble.n	8000fe8 <__aeabi_ddiv+0x1e8>
 8000fe6:	e153      	b.n	8001290 <__aeabi_ddiv+0x490>
 8000fe8:	0002      	movs	r2, r0
 8000fea:	4641      	mov	r1, r8
 8000fec:	3a08      	subs	r2, #8
 8000fee:	4091      	lsls	r1, r2
 8000ff0:	4688      	mov	r8, r1
 8000ff2:	211d      	movs	r1, #29
 8000ff4:	1acb      	subs	r3, r1, r3
 8000ff6:	4651      	mov	r1, sl
 8000ff8:	40d9      	lsrs	r1, r3
 8000ffa:	000b      	movs	r3, r1
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	430b      	orrs	r3, r1
 8001000:	469b      	mov	fp, r3
 8001002:	4653      	mov	r3, sl
 8001004:	4093      	lsls	r3, r2
 8001006:	001a      	movs	r2, r3
 8001008:	9b00      	ldr	r3, [sp, #0]
 800100a:	4925      	ldr	r1, [pc, #148]	; (80010a0 <__aeabi_ddiv+0x2a0>)
 800100c:	469c      	mov	ip, r3
 800100e:	4460      	add	r0, ip
 8001010:	0003      	movs	r3, r0
 8001012:	468c      	mov	ip, r1
 8001014:	4463      	add	r3, ip
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2100      	movs	r1, #0
 800101a:	e737      	b.n	8000e8c <__aeabi_ddiv+0x8c>
 800101c:	2303      	movs	r3, #3
 800101e:	46b1      	mov	r9, r6
 8001020:	9000      	str	r0, [sp, #0]
 8001022:	260c      	movs	r6, #12
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	e711      	b.n	8000e4c <__aeabi_ddiv+0x4c>
 8001028:	2300      	movs	r3, #0
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	2604      	movs	r6, #4
 8001030:	2700      	movs	r7, #0
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	e70a      	b.n	8000e4c <__aeabi_ddiv+0x4c>
 8001036:	2303      	movs	r3, #3
 8001038:	46c3      	mov	fp, r8
 800103a:	431e      	orrs	r6, r3
 800103c:	2103      	movs	r1, #3
 800103e:	e725      	b.n	8000e8c <__aeabi_ddiv+0x8c>
 8001040:	3301      	adds	r3, #1
 8001042:	431e      	orrs	r6, r3
 8001044:	2200      	movs	r2, #0
 8001046:	2101      	movs	r1, #1
 8001048:	e720      	b.n	8000e8c <__aeabi_ddiv+0x8c>
 800104a:	2300      	movs	r3, #0
 800104c:	469a      	mov	sl, r3
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	2700      	movs	r7, #0
 8001052:	031b      	lsls	r3, r3, #12
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <__aeabi_ddiv+0x27c>)
 8001056:	e761      	b.n	8000f1c <__aeabi_ddiv+0x11c>
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	4649      	mov	r1, r9
 800105c:	031b      	lsls	r3, r3, #12
 800105e:	4219      	tst	r1, r3
 8001060:	d100      	bne.n	8001064 <__aeabi_ddiv+0x264>
 8001062:	e0e2      	b.n	800122a <__aeabi_ddiv+0x42a>
 8001064:	4659      	mov	r1, fp
 8001066:	4219      	tst	r1, r3
 8001068:	d000      	beq.n	800106c <__aeabi_ddiv+0x26c>
 800106a:	e0de      	b.n	800122a <__aeabi_ddiv+0x42a>
 800106c:	430b      	orrs	r3, r1
 800106e:	031b      	lsls	r3, r3, #12
 8001070:	0017      	movs	r7, r2
 8001072:	0b1b      	lsrs	r3, r3, #12
 8001074:	46a2      	mov	sl, r4
 8001076:	4a01      	ldr	r2, [pc, #4]	; (800107c <__aeabi_ddiv+0x27c>)
 8001078:	e750      	b.n	8000f1c <__aeabi_ddiv+0x11c>
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	000007ff 	.word	0x000007ff
 8001080:	fffffc01 	.word	0xfffffc01
 8001084:	08017164 	.word	0x08017164
 8001088:	000003ff 	.word	0x000003ff
 800108c:	feffffff 	.word	0xfeffffff
 8001090:	000007fe 	.word	0x000007fe
 8001094:	800fffff 	.word	0x800fffff
 8001098:	fffffc0d 	.word	0xfffffc0d
 800109c:	fffff801 	.word	0xfffff801
 80010a0:	000003f3 	.word	0x000003f3
 80010a4:	45d9      	cmp	r9, fp
 80010a6:	d900      	bls.n	80010aa <__aeabi_ddiv+0x2aa>
 80010a8:	e0cb      	b.n	8001242 <__aeabi_ddiv+0x442>
 80010aa:	d100      	bne.n	80010ae <__aeabi_ddiv+0x2ae>
 80010ac:	e0c6      	b.n	800123c <__aeabi_ddiv+0x43c>
 80010ae:	003c      	movs	r4, r7
 80010b0:	4648      	mov	r0, r9
 80010b2:	2700      	movs	r7, #0
 80010b4:	9b00      	ldr	r3, [sp, #0]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	465b      	mov	r3, fp
 80010bc:	0e16      	lsrs	r6, r2, #24
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	431e      	orrs	r6, r3
 80010c2:	0213      	lsls	r3, r2, #8
 80010c4:	4698      	mov	r8, r3
 80010c6:	0433      	lsls	r3, r6, #16
 80010c8:	0c1b      	lsrs	r3, r3, #16
 80010ca:	4699      	mov	r9, r3
 80010cc:	0c31      	lsrs	r1, r6, #16
 80010ce:	9101      	str	r1, [sp, #4]
 80010d0:	f7ff f8ba 	bl	8000248 <__aeabi_uidivmod>
 80010d4:	464a      	mov	r2, r9
 80010d6:	4342      	muls	r2, r0
 80010d8:	040b      	lsls	r3, r1, #16
 80010da:	0c21      	lsrs	r1, r4, #16
 80010dc:	0005      	movs	r5, r0
 80010de:	4319      	orrs	r1, r3
 80010e0:	428a      	cmp	r2, r1
 80010e2:	d907      	bls.n	80010f4 <__aeabi_ddiv+0x2f4>
 80010e4:	1989      	adds	r1, r1, r6
 80010e6:	3d01      	subs	r5, #1
 80010e8:	428e      	cmp	r6, r1
 80010ea:	d803      	bhi.n	80010f4 <__aeabi_ddiv+0x2f4>
 80010ec:	428a      	cmp	r2, r1
 80010ee:	d901      	bls.n	80010f4 <__aeabi_ddiv+0x2f4>
 80010f0:	1e85      	subs	r5, r0, #2
 80010f2:	1989      	adds	r1, r1, r6
 80010f4:	1a88      	subs	r0, r1, r2
 80010f6:	9901      	ldr	r1, [sp, #4]
 80010f8:	f7ff f8a6 	bl	8000248 <__aeabi_uidivmod>
 80010fc:	0409      	lsls	r1, r1, #16
 80010fe:	468c      	mov	ip, r1
 8001100:	464a      	mov	r2, r9
 8001102:	0421      	lsls	r1, r4, #16
 8001104:	4664      	mov	r4, ip
 8001106:	4342      	muls	r2, r0
 8001108:	0c09      	lsrs	r1, r1, #16
 800110a:	0003      	movs	r3, r0
 800110c:	4321      	orrs	r1, r4
 800110e:	428a      	cmp	r2, r1
 8001110:	d904      	bls.n	800111c <__aeabi_ddiv+0x31c>
 8001112:	1989      	adds	r1, r1, r6
 8001114:	3b01      	subs	r3, #1
 8001116:	428e      	cmp	r6, r1
 8001118:	d800      	bhi.n	800111c <__aeabi_ddiv+0x31c>
 800111a:	e0f1      	b.n	8001300 <__aeabi_ddiv+0x500>
 800111c:	042d      	lsls	r5, r5, #16
 800111e:	431d      	orrs	r5, r3
 8001120:	46ab      	mov	fp, r5
 8001122:	4643      	mov	r3, r8
 8001124:	1a89      	subs	r1, r1, r2
 8001126:	4642      	mov	r2, r8
 8001128:	0c28      	lsrs	r0, r5, #16
 800112a:	0412      	lsls	r2, r2, #16
 800112c:	0c1d      	lsrs	r5, r3, #16
 800112e:	465b      	mov	r3, fp
 8001130:	0c14      	lsrs	r4, r2, #16
 8001132:	0022      	movs	r2, r4
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	0c1b      	lsrs	r3, r3, #16
 8001138:	435a      	muls	r2, r3
 800113a:	9403      	str	r4, [sp, #12]
 800113c:	436b      	muls	r3, r5
 800113e:	4344      	muls	r4, r0
 8001140:	9502      	str	r5, [sp, #8]
 8001142:	4368      	muls	r0, r5
 8001144:	191b      	adds	r3, r3, r4
 8001146:	0c15      	lsrs	r5, r2, #16
 8001148:	18eb      	adds	r3, r5, r3
 800114a:	429c      	cmp	r4, r3
 800114c:	d903      	bls.n	8001156 <__aeabi_ddiv+0x356>
 800114e:	2480      	movs	r4, #128	; 0x80
 8001150:	0264      	lsls	r4, r4, #9
 8001152:	46a4      	mov	ip, r4
 8001154:	4460      	add	r0, ip
 8001156:	0c1c      	lsrs	r4, r3, #16
 8001158:	0415      	lsls	r5, r2, #16
 800115a:	041b      	lsls	r3, r3, #16
 800115c:	0c2d      	lsrs	r5, r5, #16
 800115e:	1820      	adds	r0, r4, r0
 8001160:	195d      	adds	r5, r3, r5
 8001162:	4281      	cmp	r1, r0
 8001164:	d377      	bcc.n	8001256 <__aeabi_ddiv+0x456>
 8001166:	d073      	beq.n	8001250 <__aeabi_ddiv+0x450>
 8001168:	1a0c      	subs	r4, r1, r0
 800116a:	4aa2      	ldr	r2, [pc, #648]	; (80013f4 <__aeabi_ddiv+0x5f4>)
 800116c:	1b7d      	subs	r5, r7, r5
 800116e:	42af      	cmp	r7, r5
 8001170:	41bf      	sbcs	r7, r7
 8001172:	4694      	mov	ip, r2
 8001174:	9b00      	ldr	r3, [sp, #0]
 8001176:	427f      	negs	r7, r7
 8001178:	4463      	add	r3, ip
 800117a:	1be0      	subs	r0, r4, r7
 800117c:	001c      	movs	r4, r3
 800117e:	4286      	cmp	r6, r0
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x384>
 8001182:	e0db      	b.n	800133c <__aeabi_ddiv+0x53c>
 8001184:	9901      	ldr	r1, [sp, #4]
 8001186:	f7ff f85f 	bl	8000248 <__aeabi_uidivmod>
 800118a:	464a      	mov	r2, r9
 800118c:	4342      	muls	r2, r0
 800118e:	040b      	lsls	r3, r1, #16
 8001190:	0c29      	lsrs	r1, r5, #16
 8001192:	0007      	movs	r7, r0
 8001194:	4319      	orrs	r1, r3
 8001196:	428a      	cmp	r2, r1
 8001198:	d907      	bls.n	80011aa <__aeabi_ddiv+0x3aa>
 800119a:	1989      	adds	r1, r1, r6
 800119c:	3f01      	subs	r7, #1
 800119e:	428e      	cmp	r6, r1
 80011a0:	d803      	bhi.n	80011aa <__aeabi_ddiv+0x3aa>
 80011a2:	428a      	cmp	r2, r1
 80011a4:	d901      	bls.n	80011aa <__aeabi_ddiv+0x3aa>
 80011a6:	1e87      	subs	r7, r0, #2
 80011a8:	1989      	adds	r1, r1, r6
 80011aa:	1a88      	subs	r0, r1, r2
 80011ac:	9901      	ldr	r1, [sp, #4]
 80011ae:	f7ff f84b 	bl	8000248 <__aeabi_uidivmod>
 80011b2:	0409      	lsls	r1, r1, #16
 80011b4:	464a      	mov	r2, r9
 80011b6:	4689      	mov	r9, r1
 80011b8:	0429      	lsls	r1, r5, #16
 80011ba:	464d      	mov	r5, r9
 80011bc:	4342      	muls	r2, r0
 80011be:	0c09      	lsrs	r1, r1, #16
 80011c0:	0003      	movs	r3, r0
 80011c2:	4329      	orrs	r1, r5
 80011c4:	428a      	cmp	r2, r1
 80011c6:	d907      	bls.n	80011d8 <__aeabi_ddiv+0x3d8>
 80011c8:	1989      	adds	r1, r1, r6
 80011ca:	3b01      	subs	r3, #1
 80011cc:	428e      	cmp	r6, r1
 80011ce:	d803      	bhi.n	80011d8 <__aeabi_ddiv+0x3d8>
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d901      	bls.n	80011d8 <__aeabi_ddiv+0x3d8>
 80011d4:	1e83      	subs	r3, r0, #2
 80011d6:	1989      	adds	r1, r1, r6
 80011d8:	043f      	lsls	r7, r7, #16
 80011da:	1a89      	subs	r1, r1, r2
 80011dc:	003a      	movs	r2, r7
 80011de:	9f03      	ldr	r7, [sp, #12]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	0038      	movs	r0, r7
 80011e4:	0413      	lsls	r3, r2, #16
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	4358      	muls	r0, r3
 80011ea:	4681      	mov	r9, r0
 80011ec:	9802      	ldr	r0, [sp, #8]
 80011ee:	0c15      	lsrs	r5, r2, #16
 80011f0:	436f      	muls	r7, r5
 80011f2:	4343      	muls	r3, r0
 80011f4:	4345      	muls	r5, r0
 80011f6:	4648      	mov	r0, r9
 80011f8:	0c00      	lsrs	r0, r0, #16
 80011fa:	4684      	mov	ip, r0
 80011fc:	19db      	adds	r3, r3, r7
 80011fe:	4463      	add	r3, ip
 8001200:	429f      	cmp	r7, r3
 8001202:	d903      	bls.n	800120c <__aeabi_ddiv+0x40c>
 8001204:	2080      	movs	r0, #128	; 0x80
 8001206:	0240      	lsls	r0, r0, #9
 8001208:	4684      	mov	ip, r0
 800120a:	4465      	add	r5, ip
 800120c:	4648      	mov	r0, r9
 800120e:	0c1f      	lsrs	r7, r3, #16
 8001210:	0400      	lsls	r0, r0, #16
 8001212:	041b      	lsls	r3, r3, #16
 8001214:	0c00      	lsrs	r0, r0, #16
 8001216:	197d      	adds	r5, r7, r5
 8001218:	1818      	adds	r0, r3, r0
 800121a:	42a9      	cmp	r1, r5
 800121c:	d200      	bcs.n	8001220 <__aeabi_ddiv+0x420>
 800121e:	e084      	b.n	800132a <__aeabi_ddiv+0x52a>
 8001220:	d100      	bne.n	8001224 <__aeabi_ddiv+0x424>
 8001222:	e07f      	b.n	8001324 <__aeabi_ddiv+0x524>
 8001224:	2301      	movs	r3, #1
 8001226:	431a      	orrs	r2, r3
 8001228:	e657      	b.n	8000eda <__aeabi_ddiv+0xda>
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	464a      	mov	r2, r9
 800122e:	031b      	lsls	r3, r3, #12
 8001230:	4313      	orrs	r3, r2
 8001232:	031b      	lsls	r3, r3, #12
 8001234:	0b1b      	lsrs	r3, r3, #12
 8001236:	46aa      	mov	sl, r5
 8001238:	4a6f      	ldr	r2, [pc, #444]	; (80013f8 <__aeabi_ddiv+0x5f8>)
 800123a:	e66f      	b.n	8000f1c <__aeabi_ddiv+0x11c>
 800123c:	42ba      	cmp	r2, r7
 800123e:	d900      	bls.n	8001242 <__aeabi_ddiv+0x442>
 8001240:	e735      	b.n	80010ae <__aeabi_ddiv+0x2ae>
 8001242:	464b      	mov	r3, r9
 8001244:	07dc      	lsls	r4, r3, #31
 8001246:	0858      	lsrs	r0, r3, #1
 8001248:	087b      	lsrs	r3, r7, #1
 800124a:	431c      	orrs	r4, r3
 800124c:	07ff      	lsls	r7, r7, #31
 800124e:	e734      	b.n	80010ba <__aeabi_ddiv+0x2ba>
 8001250:	2400      	movs	r4, #0
 8001252:	42af      	cmp	r7, r5
 8001254:	d289      	bcs.n	800116a <__aeabi_ddiv+0x36a>
 8001256:	4447      	add	r7, r8
 8001258:	4547      	cmp	r7, r8
 800125a:	41a4      	sbcs	r4, r4
 800125c:	465b      	mov	r3, fp
 800125e:	4264      	negs	r4, r4
 8001260:	19a4      	adds	r4, r4, r6
 8001262:	1864      	adds	r4, r4, r1
 8001264:	3b01      	subs	r3, #1
 8001266:	42a6      	cmp	r6, r4
 8001268:	d21e      	bcs.n	80012a8 <__aeabi_ddiv+0x4a8>
 800126a:	42a0      	cmp	r0, r4
 800126c:	d86d      	bhi.n	800134a <__aeabi_ddiv+0x54a>
 800126e:	d100      	bne.n	8001272 <__aeabi_ddiv+0x472>
 8001270:	e0b6      	b.n	80013e0 <__aeabi_ddiv+0x5e0>
 8001272:	1a24      	subs	r4, r4, r0
 8001274:	469b      	mov	fp, r3
 8001276:	e778      	b.n	800116a <__aeabi_ddiv+0x36a>
 8001278:	0003      	movs	r3, r0
 800127a:	465a      	mov	r2, fp
 800127c:	3b28      	subs	r3, #40	; 0x28
 800127e:	409a      	lsls	r2, r3
 8001280:	2700      	movs	r7, #0
 8001282:	4691      	mov	r9, r2
 8001284:	e688      	b.n	8000f98 <__aeabi_ddiv+0x198>
 8001286:	4658      	mov	r0, fp
 8001288:	f001 f912 	bl	80024b0 <__clzsi2>
 800128c:	3020      	adds	r0, #32
 800128e:	e672      	b.n	8000f76 <__aeabi_ddiv+0x176>
 8001290:	0003      	movs	r3, r0
 8001292:	4652      	mov	r2, sl
 8001294:	3b28      	subs	r3, #40	; 0x28
 8001296:	409a      	lsls	r2, r3
 8001298:	4693      	mov	fp, r2
 800129a:	2200      	movs	r2, #0
 800129c:	e6b4      	b.n	8001008 <__aeabi_ddiv+0x208>
 800129e:	4650      	mov	r0, sl
 80012a0:	f001 f906 	bl	80024b0 <__clzsi2>
 80012a4:	3020      	adds	r0, #32
 80012a6:	e69a      	b.n	8000fde <__aeabi_ddiv+0x1de>
 80012a8:	42a6      	cmp	r6, r4
 80012aa:	d1e2      	bne.n	8001272 <__aeabi_ddiv+0x472>
 80012ac:	45b8      	cmp	r8, r7
 80012ae:	d9dc      	bls.n	800126a <__aeabi_ddiv+0x46a>
 80012b0:	1a34      	subs	r4, r6, r0
 80012b2:	469b      	mov	fp, r3
 80012b4:	e759      	b.n	800116a <__aeabi_ddiv+0x36a>
 80012b6:	2b1f      	cmp	r3, #31
 80012b8:	dc65      	bgt.n	8001386 <__aeabi_ddiv+0x586>
 80012ba:	4c50      	ldr	r4, [pc, #320]	; (80013fc <__aeabi_ddiv+0x5fc>)
 80012bc:	9900      	ldr	r1, [sp, #0]
 80012be:	46a4      	mov	ip, r4
 80012c0:	465c      	mov	r4, fp
 80012c2:	4461      	add	r1, ip
 80012c4:	0008      	movs	r0, r1
 80012c6:	408c      	lsls	r4, r1
 80012c8:	0011      	movs	r1, r2
 80012ca:	4082      	lsls	r2, r0
 80012cc:	40d9      	lsrs	r1, r3
 80012ce:	1e50      	subs	r0, r2, #1
 80012d0:	4182      	sbcs	r2, r0
 80012d2:	430c      	orrs	r4, r1
 80012d4:	4314      	orrs	r4, r2
 80012d6:	465a      	mov	r2, fp
 80012d8:	40da      	lsrs	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	0762      	lsls	r2, r4, #29
 80012de:	d009      	beq.n	80012f4 <__aeabi_ddiv+0x4f4>
 80012e0:	220f      	movs	r2, #15
 80012e2:	4022      	ands	r2, r4
 80012e4:	2a04      	cmp	r2, #4
 80012e6:	d005      	beq.n	80012f4 <__aeabi_ddiv+0x4f4>
 80012e8:	0022      	movs	r2, r4
 80012ea:	1d14      	adds	r4, r2, #4
 80012ec:	4294      	cmp	r4, r2
 80012ee:	4189      	sbcs	r1, r1
 80012f0:	4249      	negs	r1, r1
 80012f2:	185b      	adds	r3, r3, r1
 80012f4:	021a      	lsls	r2, r3, #8
 80012f6:	d562      	bpl.n	80013be <__aeabi_ddiv+0x5be>
 80012f8:	2201      	movs	r2, #1
 80012fa:	2300      	movs	r3, #0
 80012fc:	2700      	movs	r7, #0
 80012fe:	e60d      	b.n	8000f1c <__aeabi_ddiv+0x11c>
 8001300:	428a      	cmp	r2, r1
 8001302:	d800      	bhi.n	8001306 <__aeabi_ddiv+0x506>
 8001304:	e70a      	b.n	800111c <__aeabi_ddiv+0x31c>
 8001306:	1e83      	subs	r3, r0, #2
 8001308:	1989      	adds	r1, r1, r6
 800130a:	e707      	b.n	800111c <__aeabi_ddiv+0x31c>
 800130c:	230f      	movs	r3, #15
 800130e:	4013      	ands	r3, r2
 8001310:	2b04      	cmp	r3, #4
 8001312:	d100      	bne.n	8001316 <__aeabi_ddiv+0x516>
 8001314:	e5e6      	b.n	8000ee4 <__aeabi_ddiv+0xe4>
 8001316:	1d17      	adds	r7, r2, #4
 8001318:	4297      	cmp	r7, r2
 800131a:	4192      	sbcs	r2, r2
 800131c:	4253      	negs	r3, r2
 800131e:	449b      	add	fp, r3
 8001320:	08fa      	lsrs	r2, r7, #3
 8001322:	e5e0      	b.n	8000ee6 <__aeabi_ddiv+0xe6>
 8001324:	2800      	cmp	r0, #0
 8001326:	d100      	bne.n	800132a <__aeabi_ddiv+0x52a>
 8001328:	e5d7      	b.n	8000eda <__aeabi_ddiv+0xda>
 800132a:	1871      	adds	r1, r6, r1
 800132c:	1e53      	subs	r3, r2, #1
 800132e:	42b1      	cmp	r1, r6
 8001330:	d327      	bcc.n	8001382 <__aeabi_ddiv+0x582>
 8001332:	42a9      	cmp	r1, r5
 8001334:	d315      	bcc.n	8001362 <__aeabi_ddiv+0x562>
 8001336:	d058      	beq.n	80013ea <__aeabi_ddiv+0x5ea>
 8001338:	001a      	movs	r2, r3
 800133a:	e773      	b.n	8001224 <__aeabi_ddiv+0x424>
 800133c:	2b00      	cmp	r3, #0
 800133e:	dc00      	bgt.n	8001342 <__aeabi_ddiv+0x542>
 8001340:	e604      	b.n	8000f4c <__aeabi_ddiv+0x14c>
 8001342:	2301      	movs	r3, #1
 8001344:	2200      	movs	r2, #0
 8001346:	449b      	add	fp, r3
 8001348:	e5cd      	b.n	8000ee6 <__aeabi_ddiv+0xe6>
 800134a:	2302      	movs	r3, #2
 800134c:	4447      	add	r7, r8
 800134e:	4547      	cmp	r7, r8
 8001350:	4189      	sbcs	r1, r1
 8001352:	425b      	negs	r3, r3
 8001354:	469c      	mov	ip, r3
 8001356:	4249      	negs	r1, r1
 8001358:	1989      	adds	r1, r1, r6
 800135a:	190c      	adds	r4, r1, r4
 800135c:	44e3      	add	fp, ip
 800135e:	1a24      	subs	r4, r4, r0
 8001360:	e703      	b.n	800116a <__aeabi_ddiv+0x36a>
 8001362:	4643      	mov	r3, r8
 8001364:	005f      	lsls	r7, r3, #1
 8001366:	4547      	cmp	r7, r8
 8001368:	419b      	sbcs	r3, r3
 800136a:	46b8      	mov	r8, r7
 800136c:	425b      	negs	r3, r3
 800136e:	199e      	adds	r6, r3, r6
 8001370:	3a02      	subs	r2, #2
 8001372:	1989      	adds	r1, r1, r6
 8001374:	42a9      	cmp	r1, r5
 8001376:	d000      	beq.n	800137a <__aeabi_ddiv+0x57a>
 8001378:	e754      	b.n	8001224 <__aeabi_ddiv+0x424>
 800137a:	4540      	cmp	r0, r8
 800137c:	d000      	beq.n	8001380 <__aeabi_ddiv+0x580>
 800137e:	e751      	b.n	8001224 <__aeabi_ddiv+0x424>
 8001380:	e5ab      	b.n	8000eda <__aeabi_ddiv+0xda>
 8001382:	001a      	movs	r2, r3
 8001384:	e7f6      	b.n	8001374 <__aeabi_ddiv+0x574>
 8001386:	211f      	movs	r1, #31
 8001388:	465f      	mov	r7, fp
 800138a:	4249      	negs	r1, r1
 800138c:	1b0c      	subs	r4, r1, r4
 800138e:	40e7      	lsrs	r7, r4
 8001390:	2b20      	cmp	r3, #32
 8001392:	d007      	beq.n	80013a4 <__aeabi_ddiv+0x5a4>
 8001394:	491a      	ldr	r1, [pc, #104]	; (8001400 <__aeabi_ddiv+0x600>)
 8001396:	9b00      	ldr	r3, [sp, #0]
 8001398:	468c      	mov	ip, r1
 800139a:	4463      	add	r3, ip
 800139c:	0018      	movs	r0, r3
 800139e:	465b      	mov	r3, fp
 80013a0:	4083      	lsls	r3, r0
 80013a2:	431a      	orrs	r2, r3
 80013a4:	1e50      	subs	r0, r2, #1
 80013a6:	4182      	sbcs	r2, r0
 80013a8:	433a      	orrs	r2, r7
 80013aa:	2707      	movs	r7, #7
 80013ac:	2300      	movs	r3, #0
 80013ae:	4017      	ands	r7, r2
 80013b0:	d009      	beq.n	80013c6 <__aeabi_ddiv+0x5c6>
 80013b2:	210f      	movs	r1, #15
 80013b4:	2300      	movs	r3, #0
 80013b6:	4011      	ands	r1, r2
 80013b8:	0014      	movs	r4, r2
 80013ba:	2904      	cmp	r1, #4
 80013bc:	d195      	bne.n	80012ea <__aeabi_ddiv+0x4ea>
 80013be:	0022      	movs	r2, r4
 80013c0:	075f      	lsls	r7, r3, #29
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	0b1b      	lsrs	r3, r3, #12
 80013c6:	08d2      	lsrs	r2, r2, #3
 80013c8:	4317      	orrs	r7, r2
 80013ca:	2200      	movs	r2, #0
 80013cc:	e5a6      	b.n	8000f1c <__aeabi_ddiv+0x11c>
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	4659      	mov	r1, fp
 80013d2:	031b      	lsls	r3, r3, #12
 80013d4:	430b      	orrs	r3, r1
 80013d6:	031b      	lsls	r3, r3, #12
 80013d8:	0017      	movs	r7, r2
 80013da:	0b1b      	lsrs	r3, r3, #12
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <__aeabi_ddiv+0x5f8>)
 80013de:	e59d      	b.n	8000f1c <__aeabi_ddiv+0x11c>
 80013e0:	42bd      	cmp	r5, r7
 80013e2:	d8b2      	bhi.n	800134a <__aeabi_ddiv+0x54a>
 80013e4:	469b      	mov	fp, r3
 80013e6:	2400      	movs	r4, #0
 80013e8:	e6bf      	b.n	800116a <__aeabi_ddiv+0x36a>
 80013ea:	4580      	cmp	r8, r0
 80013ec:	d3b9      	bcc.n	8001362 <__aeabi_ddiv+0x562>
 80013ee:	001a      	movs	r2, r3
 80013f0:	e7c3      	b.n	800137a <__aeabi_ddiv+0x57a>
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	000003ff 	.word	0x000003ff
 80013f8:	000007ff 	.word	0x000007ff
 80013fc:	0000041e 	.word	0x0000041e
 8001400:	0000043e 	.word	0x0000043e

08001404 <__eqdf2>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	464f      	mov	r7, r9
 8001408:	4646      	mov	r6, r8
 800140a:	46d6      	mov	lr, sl
 800140c:	4684      	mov	ip, r0
 800140e:	b5c0      	push	{r6, r7, lr}
 8001410:	4680      	mov	r8, r0
 8001412:	4e19      	ldr	r6, [pc, #100]	; (8001478 <__eqdf2+0x74>)
 8001414:	0318      	lsls	r0, r3, #12
 8001416:	030f      	lsls	r7, r1, #12
 8001418:	004d      	lsls	r5, r1, #1
 800141a:	0b00      	lsrs	r0, r0, #12
 800141c:	005c      	lsls	r4, r3, #1
 800141e:	4682      	mov	sl, r0
 8001420:	0b3f      	lsrs	r7, r7, #12
 8001422:	0d6d      	lsrs	r5, r5, #21
 8001424:	0fc9      	lsrs	r1, r1, #31
 8001426:	4691      	mov	r9, r2
 8001428:	0d64      	lsrs	r4, r4, #21
 800142a:	0fdb      	lsrs	r3, r3, #31
 800142c:	2001      	movs	r0, #1
 800142e:	42b5      	cmp	r5, r6
 8001430:	d00a      	beq.n	8001448 <__eqdf2+0x44>
 8001432:	42b4      	cmp	r4, r6
 8001434:	d003      	beq.n	800143e <__eqdf2+0x3a>
 8001436:	42a5      	cmp	r5, r4
 8001438:	d101      	bne.n	800143e <__eqdf2+0x3a>
 800143a:	4557      	cmp	r7, sl
 800143c:	d00c      	beq.n	8001458 <__eqdf2+0x54>
 800143e:	bc1c      	pop	{r2, r3, r4}
 8001440:	4690      	mov	r8, r2
 8001442:	4699      	mov	r9, r3
 8001444:	46a2      	mov	sl, r4
 8001446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001448:	4666      	mov	r6, ip
 800144a:	433e      	orrs	r6, r7
 800144c:	d1f7      	bne.n	800143e <__eqdf2+0x3a>
 800144e:	42ac      	cmp	r4, r5
 8001450:	d1f5      	bne.n	800143e <__eqdf2+0x3a>
 8001452:	4654      	mov	r4, sl
 8001454:	4314      	orrs	r4, r2
 8001456:	d1f2      	bne.n	800143e <__eqdf2+0x3a>
 8001458:	2001      	movs	r0, #1
 800145a:	45c8      	cmp	r8, r9
 800145c:	d1ef      	bne.n	800143e <__eqdf2+0x3a>
 800145e:	4299      	cmp	r1, r3
 8001460:	d007      	beq.n	8001472 <__eqdf2+0x6e>
 8001462:	2d00      	cmp	r5, #0
 8001464:	d1eb      	bne.n	800143e <__eqdf2+0x3a>
 8001466:	4663      	mov	r3, ip
 8001468:	431f      	orrs	r7, r3
 800146a:	0038      	movs	r0, r7
 800146c:	1e47      	subs	r7, r0, #1
 800146e:	41b8      	sbcs	r0, r7
 8001470:	e7e5      	b.n	800143e <__eqdf2+0x3a>
 8001472:	2000      	movs	r0, #0
 8001474:	e7e3      	b.n	800143e <__eqdf2+0x3a>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	464f      	mov	r7, r9
 8001480:	4646      	mov	r6, r8
 8001482:	46d6      	mov	lr, sl
 8001484:	004d      	lsls	r5, r1, #1
 8001486:	b5c0      	push	{r6, r7, lr}
 8001488:	030e      	lsls	r6, r1, #12
 800148a:	0fc9      	lsrs	r1, r1, #31
 800148c:	468a      	mov	sl, r1
 800148e:	492c      	ldr	r1, [pc, #176]	; (8001540 <__gedf2+0xc4>)
 8001490:	031f      	lsls	r7, r3, #12
 8001492:	005c      	lsls	r4, r3, #1
 8001494:	4680      	mov	r8, r0
 8001496:	0b36      	lsrs	r6, r6, #12
 8001498:	0d6d      	lsrs	r5, r5, #21
 800149a:	4691      	mov	r9, r2
 800149c:	0b3f      	lsrs	r7, r7, #12
 800149e:	0d64      	lsrs	r4, r4, #21
 80014a0:	0fdb      	lsrs	r3, r3, #31
 80014a2:	428d      	cmp	r5, r1
 80014a4:	d01e      	beq.n	80014e4 <__gedf2+0x68>
 80014a6:	428c      	cmp	r4, r1
 80014a8:	d016      	beq.n	80014d8 <__gedf2+0x5c>
 80014aa:	2d00      	cmp	r5, #0
 80014ac:	d11e      	bne.n	80014ec <__gedf2+0x70>
 80014ae:	4330      	orrs	r0, r6
 80014b0:	4684      	mov	ip, r0
 80014b2:	2c00      	cmp	r4, #0
 80014b4:	d101      	bne.n	80014ba <__gedf2+0x3e>
 80014b6:	433a      	orrs	r2, r7
 80014b8:	d023      	beq.n	8001502 <__gedf2+0x86>
 80014ba:	4662      	mov	r2, ip
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d01a      	beq.n	80014f6 <__gedf2+0x7a>
 80014c0:	459a      	cmp	sl, r3
 80014c2:	d029      	beq.n	8001518 <__gedf2+0x9c>
 80014c4:	4651      	mov	r1, sl
 80014c6:	2002      	movs	r0, #2
 80014c8:	3901      	subs	r1, #1
 80014ca:	4008      	ands	r0, r1
 80014cc:	3801      	subs	r0, #1
 80014ce:	bc1c      	pop	{r2, r3, r4}
 80014d0:	4690      	mov	r8, r2
 80014d2:	4699      	mov	r9, r3
 80014d4:	46a2      	mov	sl, r4
 80014d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d8:	0039      	movs	r1, r7
 80014da:	4311      	orrs	r1, r2
 80014dc:	d0e5      	beq.n	80014aa <__gedf2+0x2e>
 80014de:	2002      	movs	r0, #2
 80014e0:	4240      	negs	r0, r0
 80014e2:	e7f4      	b.n	80014ce <__gedf2+0x52>
 80014e4:	4330      	orrs	r0, r6
 80014e6:	d1fa      	bne.n	80014de <__gedf2+0x62>
 80014e8:	42ac      	cmp	r4, r5
 80014ea:	d00f      	beq.n	800150c <__gedf2+0x90>
 80014ec:	2c00      	cmp	r4, #0
 80014ee:	d10f      	bne.n	8001510 <__gedf2+0x94>
 80014f0:	433a      	orrs	r2, r7
 80014f2:	d0e7      	beq.n	80014c4 <__gedf2+0x48>
 80014f4:	e00c      	b.n	8001510 <__gedf2+0x94>
 80014f6:	2201      	movs	r2, #1
 80014f8:	3b01      	subs	r3, #1
 80014fa:	4393      	bics	r3, r2
 80014fc:	0018      	movs	r0, r3
 80014fe:	3001      	adds	r0, #1
 8001500:	e7e5      	b.n	80014ce <__gedf2+0x52>
 8001502:	4663      	mov	r3, ip
 8001504:	2000      	movs	r0, #0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0e1      	beq.n	80014ce <__gedf2+0x52>
 800150a:	e7db      	b.n	80014c4 <__gedf2+0x48>
 800150c:	433a      	orrs	r2, r7
 800150e:	d1e6      	bne.n	80014de <__gedf2+0x62>
 8001510:	459a      	cmp	sl, r3
 8001512:	d1d7      	bne.n	80014c4 <__gedf2+0x48>
 8001514:	42a5      	cmp	r5, r4
 8001516:	dcd5      	bgt.n	80014c4 <__gedf2+0x48>
 8001518:	42a5      	cmp	r5, r4
 800151a:	db05      	blt.n	8001528 <__gedf2+0xac>
 800151c:	42be      	cmp	r6, r7
 800151e:	d8d1      	bhi.n	80014c4 <__gedf2+0x48>
 8001520:	d008      	beq.n	8001534 <__gedf2+0xb8>
 8001522:	2000      	movs	r0, #0
 8001524:	42be      	cmp	r6, r7
 8001526:	d2d2      	bcs.n	80014ce <__gedf2+0x52>
 8001528:	4650      	mov	r0, sl
 800152a:	2301      	movs	r3, #1
 800152c:	3801      	subs	r0, #1
 800152e:	4398      	bics	r0, r3
 8001530:	3001      	adds	r0, #1
 8001532:	e7cc      	b.n	80014ce <__gedf2+0x52>
 8001534:	45c8      	cmp	r8, r9
 8001536:	d8c5      	bhi.n	80014c4 <__gedf2+0x48>
 8001538:	2000      	movs	r0, #0
 800153a:	45c8      	cmp	r8, r9
 800153c:	d3f4      	bcc.n	8001528 <__gedf2+0xac>
 800153e:	e7c6      	b.n	80014ce <__gedf2+0x52>
 8001540:	000007ff 	.word	0x000007ff

08001544 <__ledf2>:
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	464f      	mov	r7, r9
 8001548:	4646      	mov	r6, r8
 800154a:	46d6      	mov	lr, sl
 800154c:	004d      	lsls	r5, r1, #1
 800154e:	b5c0      	push	{r6, r7, lr}
 8001550:	030e      	lsls	r6, r1, #12
 8001552:	0fc9      	lsrs	r1, r1, #31
 8001554:	468a      	mov	sl, r1
 8001556:	492e      	ldr	r1, [pc, #184]	; (8001610 <__ledf2+0xcc>)
 8001558:	031f      	lsls	r7, r3, #12
 800155a:	005c      	lsls	r4, r3, #1
 800155c:	4680      	mov	r8, r0
 800155e:	0b36      	lsrs	r6, r6, #12
 8001560:	0d6d      	lsrs	r5, r5, #21
 8001562:	4691      	mov	r9, r2
 8001564:	0b3f      	lsrs	r7, r7, #12
 8001566:	0d64      	lsrs	r4, r4, #21
 8001568:	0fdb      	lsrs	r3, r3, #31
 800156a:	428d      	cmp	r5, r1
 800156c:	d018      	beq.n	80015a0 <__ledf2+0x5c>
 800156e:	428c      	cmp	r4, r1
 8001570:	d011      	beq.n	8001596 <__ledf2+0x52>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d118      	bne.n	80015a8 <__ledf2+0x64>
 8001576:	4330      	orrs	r0, r6
 8001578:	4684      	mov	ip, r0
 800157a:	2c00      	cmp	r4, #0
 800157c:	d11e      	bne.n	80015bc <__ledf2+0x78>
 800157e:	433a      	orrs	r2, r7
 8001580:	d11c      	bne.n	80015bc <__ledf2+0x78>
 8001582:	4663      	mov	r3, ip
 8001584:	2000      	movs	r0, #0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d030      	beq.n	80015ec <__ledf2+0xa8>
 800158a:	4651      	mov	r1, sl
 800158c:	2002      	movs	r0, #2
 800158e:	3901      	subs	r1, #1
 8001590:	4008      	ands	r0, r1
 8001592:	3801      	subs	r0, #1
 8001594:	e02a      	b.n	80015ec <__ledf2+0xa8>
 8001596:	0039      	movs	r1, r7
 8001598:	4311      	orrs	r1, r2
 800159a:	d0ea      	beq.n	8001572 <__ledf2+0x2e>
 800159c:	2002      	movs	r0, #2
 800159e:	e025      	b.n	80015ec <__ledf2+0xa8>
 80015a0:	4330      	orrs	r0, r6
 80015a2:	d1fb      	bne.n	800159c <__ledf2+0x58>
 80015a4:	42ac      	cmp	r4, r5
 80015a6:	d026      	beq.n	80015f6 <__ledf2+0xb2>
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d126      	bne.n	80015fa <__ledf2+0xb6>
 80015ac:	433a      	orrs	r2, r7
 80015ae:	d124      	bne.n	80015fa <__ledf2+0xb6>
 80015b0:	4651      	mov	r1, sl
 80015b2:	2002      	movs	r0, #2
 80015b4:	3901      	subs	r1, #1
 80015b6:	4008      	ands	r0, r1
 80015b8:	3801      	subs	r0, #1
 80015ba:	e017      	b.n	80015ec <__ledf2+0xa8>
 80015bc:	4662      	mov	r2, ip
 80015be:	2a00      	cmp	r2, #0
 80015c0:	d00f      	beq.n	80015e2 <__ledf2+0x9e>
 80015c2:	459a      	cmp	sl, r3
 80015c4:	d1e1      	bne.n	800158a <__ledf2+0x46>
 80015c6:	42a5      	cmp	r5, r4
 80015c8:	db05      	blt.n	80015d6 <__ledf2+0x92>
 80015ca:	42be      	cmp	r6, r7
 80015cc:	d8dd      	bhi.n	800158a <__ledf2+0x46>
 80015ce:	d019      	beq.n	8001604 <__ledf2+0xc0>
 80015d0:	2000      	movs	r0, #0
 80015d2:	42be      	cmp	r6, r7
 80015d4:	d20a      	bcs.n	80015ec <__ledf2+0xa8>
 80015d6:	4650      	mov	r0, sl
 80015d8:	2301      	movs	r3, #1
 80015da:	3801      	subs	r0, #1
 80015dc:	4398      	bics	r0, r3
 80015de:	3001      	adds	r0, #1
 80015e0:	e004      	b.n	80015ec <__ledf2+0xa8>
 80015e2:	2201      	movs	r2, #1
 80015e4:	3b01      	subs	r3, #1
 80015e6:	4393      	bics	r3, r2
 80015e8:	0018      	movs	r0, r3
 80015ea:	3001      	adds	r0, #1
 80015ec:	bc1c      	pop	{r2, r3, r4}
 80015ee:	4690      	mov	r8, r2
 80015f0:	4699      	mov	r9, r3
 80015f2:	46a2      	mov	sl, r4
 80015f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f6:	433a      	orrs	r2, r7
 80015f8:	d1d0      	bne.n	800159c <__ledf2+0x58>
 80015fa:	459a      	cmp	sl, r3
 80015fc:	d1c5      	bne.n	800158a <__ledf2+0x46>
 80015fe:	42a5      	cmp	r5, r4
 8001600:	dcc3      	bgt.n	800158a <__ledf2+0x46>
 8001602:	e7e0      	b.n	80015c6 <__ledf2+0x82>
 8001604:	45c8      	cmp	r8, r9
 8001606:	d8c0      	bhi.n	800158a <__ledf2+0x46>
 8001608:	2000      	movs	r0, #0
 800160a:	45c8      	cmp	r8, r9
 800160c:	d3e3      	bcc.n	80015d6 <__ledf2+0x92>
 800160e:	e7ed      	b.n	80015ec <__ledf2+0xa8>
 8001610:	000007ff 	.word	0x000007ff

08001614 <__aeabi_dmul>:
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	4657      	mov	r7, sl
 8001618:	46de      	mov	lr, fp
 800161a:	464e      	mov	r6, r9
 800161c:	4645      	mov	r5, r8
 800161e:	b5e0      	push	{r5, r6, r7, lr}
 8001620:	4683      	mov	fp, r0
 8001622:	0006      	movs	r6, r0
 8001624:	030f      	lsls	r7, r1, #12
 8001626:	0048      	lsls	r0, r1, #1
 8001628:	b087      	sub	sp, #28
 800162a:	4692      	mov	sl, r2
 800162c:	001d      	movs	r5, r3
 800162e:	0b3f      	lsrs	r7, r7, #12
 8001630:	0d40      	lsrs	r0, r0, #21
 8001632:	0fcc      	lsrs	r4, r1, #31
 8001634:	2800      	cmp	r0, #0
 8001636:	d100      	bne.n	800163a <__aeabi_dmul+0x26>
 8001638:	e06f      	b.n	800171a <__aeabi_dmul+0x106>
 800163a:	4bde      	ldr	r3, [pc, #888]	; (80019b4 <__aeabi_dmul+0x3a0>)
 800163c:	4298      	cmp	r0, r3
 800163e:	d038      	beq.n	80016b2 <__aeabi_dmul+0x9e>
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	00ff      	lsls	r7, r7, #3
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431f      	orrs	r7, r3
 8001648:	0f73      	lsrs	r3, r6, #29
 800164a:	433b      	orrs	r3, r7
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	4bda      	ldr	r3, [pc, #872]	; (80019b8 <__aeabi_dmul+0x3a4>)
 8001650:	2700      	movs	r7, #0
 8001652:	4699      	mov	r9, r3
 8001654:	2300      	movs	r3, #0
 8001656:	469b      	mov	fp, r3
 8001658:	00f6      	lsls	r6, r6, #3
 800165a:	4481      	add	r9, r0
 800165c:	032b      	lsls	r3, r5, #12
 800165e:	0069      	lsls	r1, r5, #1
 8001660:	0b1b      	lsrs	r3, r3, #12
 8001662:	4652      	mov	r2, sl
 8001664:	4698      	mov	r8, r3
 8001666:	0d49      	lsrs	r1, r1, #21
 8001668:	0fed      	lsrs	r5, r5, #31
 800166a:	2900      	cmp	r1, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dmul+0x5c>
 800166e:	e085      	b.n	800177c <__aeabi_dmul+0x168>
 8001670:	4bd0      	ldr	r3, [pc, #832]	; (80019b4 <__aeabi_dmul+0x3a0>)
 8001672:	4299      	cmp	r1, r3
 8001674:	d100      	bne.n	8001678 <__aeabi_dmul+0x64>
 8001676:	e073      	b.n	8001760 <__aeabi_dmul+0x14c>
 8001678:	4643      	mov	r3, r8
 800167a:	00da      	lsls	r2, r3, #3
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	041b      	lsls	r3, r3, #16
 8001680:	4313      	orrs	r3, r2
 8001682:	4652      	mov	r2, sl
 8001684:	48cc      	ldr	r0, [pc, #816]	; (80019b8 <__aeabi_dmul+0x3a4>)
 8001686:	0f52      	lsrs	r2, r2, #29
 8001688:	4684      	mov	ip, r0
 800168a:	4313      	orrs	r3, r2
 800168c:	4652      	mov	r2, sl
 800168e:	2000      	movs	r0, #0
 8001690:	4461      	add	r1, ip
 8001692:	00d2      	lsls	r2, r2, #3
 8001694:	4489      	add	r9, r1
 8001696:	0021      	movs	r1, r4
 8001698:	4069      	eors	r1, r5
 800169a:	9100      	str	r1, [sp, #0]
 800169c:	468c      	mov	ip, r1
 800169e:	2101      	movs	r1, #1
 80016a0:	4449      	add	r1, r9
 80016a2:	468a      	mov	sl, r1
 80016a4:	2f0f      	cmp	r7, #15
 80016a6:	d900      	bls.n	80016aa <__aeabi_dmul+0x96>
 80016a8:	e090      	b.n	80017cc <__aeabi_dmul+0x1b8>
 80016aa:	49c4      	ldr	r1, [pc, #784]	; (80019bc <__aeabi_dmul+0x3a8>)
 80016ac:	00bf      	lsls	r7, r7, #2
 80016ae:	59cf      	ldr	r7, [r1, r7]
 80016b0:	46bf      	mov	pc, r7
 80016b2:	465b      	mov	r3, fp
 80016b4:	433b      	orrs	r3, r7
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	d000      	beq.n	80016bc <__aeabi_dmul+0xa8>
 80016ba:	e16a      	b.n	8001992 <__aeabi_dmul+0x37e>
 80016bc:	2302      	movs	r3, #2
 80016be:	2708      	movs	r7, #8
 80016c0:	2600      	movs	r6, #0
 80016c2:	4681      	mov	r9, r0
 80016c4:	469b      	mov	fp, r3
 80016c6:	e7c9      	b.n	800165c <__aeabi_dmul+0x48>
 80016c8:	0032      	movs	r2, r6
 80016ca:	4658      	mov	r0, fp
 80016cc:	9b01      	ldr	r3, [sp, #4]
 80016ce:	4661      	mov	r1, ip
 80016d0:	9100      	str	r1, [sp, #0]
 80016d2:	2802      	cmp	r0, #2
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dmul+0xc4>
 80016d6:	e075      	b.n	80017c4 <__aeabi_dmul+0x1b0>
 80016d8:	2803      	cmp	r0, #3
 80016da:	d100      	bne.n	80016de <__aeabi_dmul+0xca>
 80016dc:	e1fe      	b.n	8001adc <__aeabi_dmul+0x4c8>
 80016de:	2801      	cmp	r0, #1
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dmul+0xd0>
 80016e2:	e12c      	b.n	800193e <__aeabi_dmul+0x32a>
 80016e4:	2300      	movs	r3, #0
 80016e6:	2700      	movs	r7, #0
 80016e8:	2600      	movs	r6, #0
 80016ea:	2500      	movs	r5, #0
 80016ec:	033f      	lsls	r7, r7, #12
 80016ee:	0d2a      	lsrs	r2, r5, #20
 80016f0:	0b3f      	lsrs	r7, r7, #12
 80016f2:	48b3      	ldr	r0, [pc, #716]	; (80019c0 <__aeabi_dmul+0x3ac>)
 80016f4:	0512      	lsls	r2, r2, #20
 80016f6:	433a      	orrs	r2, r7
 80016f8:	4002      	ands	r2, r0
 80016fa:	051b      	lsls	r3, r3, #20
 80016fc:	4313      	orrs	r3, r2
 80016fe:	9a00      	ldr	r2, [sp, #0]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	07d1      	lsls	r1, r2, #31
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	430b      	orrs	r3, r1
 8001708:	0030      	movs	r0, r6
 800170a:	0019      	movs	r1, r3
 800170c:	b007      	add	sp, #28
 800170e:	bc3c      	pop	{r2, r3, r4, r5}
 8001710:	4690      	mov	r8, r2
 8001712:	4699      	mov	r9, r3
 8001714:	46a2      	mov	sl, r4
 8001716:	46ab      	mov	fp, r5
 8001718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171a:	465b      	mov	r3, fp
 800171c:	433b      	orrs	r3, r7
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	d100      	bne.n	8001724 <__aeabi_dmul+0x110>
 8001722:	e12f      	b.n	8001984 <__aeabi_dmul+0x370>
 8001724:	2f00      	cmp	r7, #0
 8001726:	d100      	bne.n	800172a <__aeabi_dmul+0x116>
 8001728:	e1a5      	b.n	8001a76 <__aeabi_dmul+0x462>
 800172a:	0038      	movs	r0, r7
 800172c:	f000 fec0 	bl	80024b0 <__clzsi2>
 8001730:	0003      	movs	r3, r0
 8001732:	3b0b      	subs	r3, #11
 8001734:	2b1c      	cmp	r3, #28
 8001736:	dd00      	ble.n	800173a <__aeabi_dmul+0x126>
 8001738:	e196      	b.n	8001a68 <__aeabi_dmul+0x454>
 800173a:	221d      	movs	r2, #29
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	465a      	mov	r2, fp
 8001740:	0001      	movs	r1, r0
 8001742:	40da      	lsrs	r2, r3
 8001744:	465e      	mov	r6, fp
 8001746:	3908      	subs	r1, #8
 8001748:	408f      	lsls	r7, r1
 800174a:	0013      	movs	r3, r2
 800174c:	408e      	lsls	r6, r1
 800174e:	433b      	orrs	r3, r7
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	4b9c      	ldr	r3, [pc, #624]	; (80019c4 <__aeabi_dmul+0x3b0>)
 8001754:	2700      	movs	r7, #0
 8001756:	1a1b      	subs	r3, r3, r0
 8001758:	4699      	mov	r9, r3
 800175a:	2300      	movs	r3, #0
 800175c:	469b      	mov	fp, r3
 800175e:	e77d      	b.n	800165c <__aeabi_dmul+0x48>
 8001760:	4641      	mov	r1, r8
 8001762:	4653      	mov	r3, sl
 8001764:	430b      	orrs	r3, r1
 8001766:	4993      	ldr	r1, [pc, #588]	; (80019b4 <__aeabi_dmul+0x3a0>)
 8001768:	468c      	mov	ip, r1
 800176a:	44e1      	add	r9, ip
 800176c:	2b00      	cmp	r3, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dmul+0x15e>
 8001770:	e11a      	b.n	80019a8 <__aeabi_dmul+0x394>
 8001772:	2202      	movs	r2, #2
 8001774:	2002      	movs	r0, #2
 8001776:	4317      	orrs	r7, r2
 8001778:	2200      	movs	r2, #0
 800177a:	e78c      	b.n	8001696 <__aeabi_dmul+0x82>
 800177c:	4313      	orrs	r3, r2
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0x16e>
 8001780:	e10d      	b.n	800199e <__aeabi_dmul+0x38a>
 8001782:	4643      	mov	r3, r8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d100      	bne.n	800178a <__aeabi_dmul+0x176>
 8001788:	e181      	b.n	8001a8e <__aeabi_dmul+0x47a>
 800178a:	4640      	mov	r0, r8
 800178c:	f000 fe90 	bl	80024b0 <__clzsi2>
 8001790:	0002      	movs	r2, r0
 8001792:	3a0b      	subs	r2, #11
 8001794:	2a1c      	cmp	r2, #28
 8001796:	dd00      	ble.n	800179a <__aeabi_dmul+0x186>
 8001798:	e172      	b.n	8001a80 <__aeabi_dmul+0x46c>
 800179a:	0001      	movs	r1, r0
 800179c:	4643      	mov	r3, r8
 800179e:	3908      	subs	r1, #8
 80017a0:	408b      	lsls	r3, r1
 80017a2:	4698      	mov	r8, r3
 80017a4:	231d      	movs	r3, #29
 80017a6:	1a9a      	subs	r2, r3, r2
 80017a8:	4653      	mov	r3, sl
 80017aa:	40d3      	lsrs	r3, r2
 80017ac:	001a      	movs	r2, r3
 80017ae:	4643      	mov	r3, r8
 80017b0:	4313      	orrs	r3, r2
 80017b2:	4652      	mov	r2, sl
 80017b4:	408a      	lsls	r2, r1
 80017b6:	4649      	mov	r1, r9
 80017b8:	1a08      	subs	r0, r1, r0
 80017ba:	4982      	ldr	r1, [pc, #520]	; (80019c4 <__aeabi_dmul+0x3b0>)
 80017bc:	4689      	mov	r9, r1
 80017be:	4481      	add	r9, r0
 80017c0:	2000      	movs	r0, #0
 80017c2:	e768      	b.n	8001696 <__aeabi_dmul+0x82>
 80017c4:	4b7b      	ldr	r3, [pc, #492]	; (80019b4 <__aeabi_dmul+0x3a0>)
 80017c6:	2700      	movs	r7, #0
 80017c8:	2600      	movs	r6, #0
 80017ca:	e78e      	b.n	80016ea <__aeabi_dmul+0xd6>
 80017cc:	0c14      	lsrs	r4, r2, #16
 80017ce:	0412      	lsls	r2, r2, #16
 80017d0:	0c12      	lsrs	r2, r2, #16
 80017d2:	0011      	movs	r1, r2
 80017d4:	0c37      	lsrs	r7, r6, #16
 80017d6:	0436      	lsls	r6, r6, #16
 80017d8:	0c35      	lsrs	r5, r6, #16
 80017da:	4379      	muls	r1, r7
 80017dc:	0028      	movs	r0, r5
 80017de:	468c      	mov	ip, r1
 80017e0:	002e      	movs	r6, r5
 80017e2:	4360      	muls	r0, r4
 80017e4:	4460      	add	r0, ip
 80017e6:	4683      	mov	fp, r0
 80017e8:	4356      	muls	r6, r2
 80017ea:	0021      	movs	r1, r4
 80017ec:	0c30      	lsrs	r0, r6, #16
 80017ee:	4680      	mov	r8, r0
 80017f0:	4658      	mov	r0, fp
 80017f2:	4379      	muls	r1, r7
 80017f4:	4440      	add	r0, r8
 80017f6:	9102      	str	r1, [sp, #8]
 80017f8:	4584      	cmp	ip, r0
 80017fa:	d906      	bls.n	800180a <__aeabi_dmul+0x1f6>
 80017fc:	4688      	mov	r8, r1
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	0249      	lsls	r1, r1, #9
 8001802:	468c      	mov	ip, r1
 8001804:	44e0      	add	r8, ip
 8001806:	4641      	mov	r1, r8
 8001808:	9102      	str	r1, [sp, #8]
 800180a:	0436      	lsls	r6, r6, #16
 800180c:	0c01      	lsrs	r1, r0, #16
 800180e:	0c36      	lsrs	r6, r6, #16
 8001810:	0400      	lsls	r0, r0, #16
 8001812:	468b      	mov	fp, r1
 8001814:	1981      	adds	r1, r0, r6
 8001816:	0c1e      	lsrs	r6, r3, #16
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	0c1b      	lsrs	r3, r3, #16
 800181c:	9103      	str	r1, [sp, #12]
 800181e:	0019      	movs	r1, r3
 8001820:	4379      	muls	r1, r7
 8001822:	468c      	mov	ip, r1
 8001824:	0028      	movs	r0, r5
 8001826:	4375      	muls	r5, r6
 8001828:	4465      	add	r5, ip
 800182a:	46a8      	mov	r8, r5
 800182c:	4358      	muls	r0, r3
 800182e:	0c05      	lsrs	r5, r0, #16
 8001830:	4445      	add	r5, r8
 8001832:	4377      	muls	r7, r6
 8001834:	42a9      	cmp	r1, r5
 8001836:	d903      	bls.n	8001840 <__aeabi_dmul+0x22c>
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0249      	lsls	r1, r1, #9
 800183c:	468c      	mov	ip, r1
 800183e:	4467      	add	r7, ip
 8001840:	0c29      	lsrs	r1, r5, #16
 8001842:	468c      	mov	ip, r1
 8001844:	0039      	movs	r1, r7
 8001846:	0400      	lsls	r0, r0, #16
 8001848:	0c00      	lsrs	r0, r0, #16
 800184a:	042d      	lsls	r5, r5, #16
 800184c:	182d      	adds	r5, r5, r0
 800184e:	4461      	add	r1, ip
 8001850:	44ab      	add	fp, r5
 8001852:	9105      	str	r1, [sp, #20]
 8001854:	4659      	mov	r1, fp
 8001856:	9104      	str	r1, [sp, #16]
 8001858:	9901      	ldr	r1, [sp, #4]
 800185a:	040f      	lsls	r7, r1, #16
 800185c:	0c3f      	lsrs	r7, r7, #16
 800185e:	0c08      	lsrs	r0, r1, #16
 8001860:	0039      	movs	r1, r7
 8001862:	4351      	muls	r1, r2
 8001864:	4342      	muls	r2, r0
 8001866:	4690      	mov	r8, r2
 8001868:	0002      	movs	r2, r0
 800186a:	468c      	mov	ip, r1
 800186c:	0c09      	lsrs	r1, r1, #16
 800186e:	468b      	mov	fp, r1
 8001870:	4362      	muls	r2, r4
 8001872:	437c      	muls	r4, r7
 8001874:	4444      	add	r4, r8
 8001876:	445c      	add	r4, fp
 8001878:	45a0      	cmp	r8, r4
 800187a:	d903      	bls.n	8001884 <__aeabi_dmul+0x270>
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0249      	lsls	r1, r1, #9
 8001880:	4688      	mov	r8, r1
 8001882:	4442      	add	r2, r8
 8001884:	0c21      	lsrs	r1, r4, #16
 8001886:	4688      	mov	r8, r1
 8001888:	4661      	mov	r1, ip
 800188a:	0409      	lsls	r1, r1, #16
 800188c:	0c09      	lsrs	r1, r1, #16
 800188e:	468c      	mov	ip, r1
 8001890:	0039      	movs	r1, r7
 8001892:	4359      	muls	r1, r3
 8001894:	4343      	muls	r3, r0
 8001896:	4370      	muls	r0, r6
 8001898:	437e      	muls	r6, r7
 800189a:	0c0f      	lsrs	r7, r1, #16
 800189c:	18f6      	adds	r6, r6, r3
 800189e:	0424      	lsls	r4, r4, #16
 80018a0:	19be      	adds	r6, r7, r6
 80018a2:	4464      	add	r4, ip
 80018a4:	4442      	add	r2, r8
 80018a6:	468c      	mov	ip, r1
 80018a8:	42b3      	cmp	r3, r6
 80018aa:	d903      	bls.n	80018b4 <__aeabi_dmul+0x2a0>
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	025b      	lsls	r3, r3, #9
 80018b0:	4698      	mov	r8, r3
 80018b2:	4440      	add	r0, r8
 80018b4:	9b02      	ldr	r3, [sp, #8]
 80018b6:	4661      	mov	r1, ip
 80018b8:	4698      	mov	r8, r3
 80018ba:	9b04      	ldr	r3, [sp, #16]
 80018bc:	0437      	lsls	r7, r6, #16
 80018be:	4443      	add	r3, r8
 80018c0:	469b      	mov	fp, r3
 80018c2:	45ab      	cmp	fp, r5
 80018c4:	41ad      	sbcs	r5, r5
 80018c6:	426b      	negs	r3, r5
 80018c8:	040d      	lsls	r5, r1, #16
 80018ca:	9905      	ldr	r1, [sp, #20]
 80018cc:	0c2d      	lsrs	r5, r5, #16
 80018ce:	468c      	mov	ip, r1
 80018d0:	197f      	adds	r7, r7, r5
 80018d2:	4467      	add	r7, ip
 80018d4:	18fd      	adds	r5, r7, r3
 80018d6:	46a8      	mov	r8, r5
 80018d8:	465d      	mov	r5, fp
 80018da:	192d      	adds	r5, r5, r4
 80018dc:	42a5      	cmp	r5, r4
 80018de:	41a4      	sbcs	r4, r4
 80018e0:	4693      	mov	fp, r2
 80018e2:	4264      	negs	r4, r4
 80018e4:	46a4      	mov	ip, r4
 80018e6:	44c3      	add	fp, r8
 80018e8:	44dc      	add	ip, fp
 80018ea:	428f      	cmp	r7, r1
 80018ec:	41bf      	sbcs	r7, r7
 80018ee:	4598      	cmp	r8, r3
 80018f0:	419b      	sbcs	r3, r3
 80018f2:	4593      	cmp	fp, r2
 80018f4:	4192      	sbcs	r2, r2
 80018f6:	45a4      	cmp	ip, r4
 80018f8:	41a4      	sbcs	r4, r4
 80018fa:	425b      	negs	r3, r3
 80018fc:	427f      	negs	r7, r7
 80018fe:	431f      	orrs	r7, r3
 8001900:	0c36      	lsrs	r6, r6, #16
 8001902:	4252      	negs	r2, r2
 8001904:	4264      	negs	r4, r4
 8001906:	19bf      	adds	r7, r7, r6
 8001908:	4322      	orrs	r2, r4
 800190a:	18bf      	adds	r7, r7, r2
 800190c:	4662      	mov	r2, ip
 800190e:	1838      	adds	r0, r7, r0
 8001910:	0243      	lsls	r3, r0, #9
 8001912:	0dd2      	lsrs	r2, r2, #23
 8001914:	9903      	ldr	r1, [sp, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	026a      	lsls	r2, r5, #9
 800191a:	430a      	orrs	r2, r1
 800191c:	1e50      	subs	r0, r2, #1
 800191e:	4182      	sbcs	r2, r0
 8001920:	4661      	mov	r1, ip
 8001922:	0ded      	lsrs	r5, r5, #23
 8001924:	432a      	orrs	r2, r5
 8001926:	024e      	lsls	r6, r1, #9
 8001928:	4332      	orrs	r2, r6
 800192a:	01d9      	lsls	r1, r3, #7
 800192c:	d400      	bmi.n	8001930 <__aeabi_dmul+0x31c>
 800192e:	e0b3      	b.n	8001a98 <__aeabi_dmul+0x484>
 8001930:	2601      	movs	r6, #1
 8001932:	0850      	lsrs	r0, r2, #1
 8001934:	4032      	ands	r2, r6
 8001936:	4302      	orrs	r2, r0
 8001938:	07de      	lsls	r6, r3, #31
 800193a:	4332      	orrs	r2, r6
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	4c22      	ldr	r4, [pc, #136]	; (80019c8 <__aeabi_dmul+0x3b4>)
 8001940:	4454      	add	r4, sl
 8001942:	2c00      	cmp	r4, #0
 8001944:	dd62      	ble.n	8001a0c <__aeabi_dmul+0x3f8>
 8001946:	0751      	lsls	r1, r2, #29
 8001948:	d009      	beq.n	800195e <__aeabi_dmul+0x34a>
 800194a:	200f      	movs	r0, #15
 800194c:	4010      	ands	r0, r2
 800194e:	2804      	cmp	r0, #4
 8001950:	d005      	beq.n	800195e <__aeabi_dmul+0x34a>
 8001952:	1d10      	adds	r0, r2, #4
 8001954:	4290      	cmp	r0, r2
 8001956:	4192      	sbcs	r2, r2
 8001958:	4252      	negs	r2, r2
 800195a:	189b      	adds	r3, r3, r2
 800195c:	0002      	movs	r2, r0
 800195e:	01d9      	lsls	r1, r3, #7
 8001960:	d504      	bpl.n	800196c <__aeabi_dmul+0x358>
 8001962:	2480      	movs	r4, #128	; 0x80
 8001964:	4819      	ldr	r0, [pc, #100]	; (80019cc <__aeabi_dmul+0x3b8>)
 8001966:	00e4      	lsls	r4, r4, #3
 8001968:	4003      	ands	r3, r0
 800196a:	4454      	add	r4, sl
 800196c:	4818      	ldr	r0, [pc, #96]	; (80019d0 <__aeabi_dmul+0x3bc>)
 800196e:	4284      	cmp	r4, r0
 8001970:	dd00      	ble.n	8001974 <__aeabi_dmul+0x360>
 8001972:	e727      	b.n	80017c4 <__aeabi_dmul+0x1b0>
 8001974:	075e      	lsls	r6, r3, #29
 8001976:	025b      	lsls	r3, r3, #9
 8001978:	08d2      	lsrs	r2, r2, #3
 800197a:	0b1f      	lsrs	r7, r3, #12
 800197c:	0563      	lsls	r3, r4, #21
 800197e:	4316      	orrs	r6, r2
 8001980:	0d5b      	lsrs	r3, r3, #21
 8001982:	e6b2      	b.n	80016ea <__aeabi_dmul+0xd6>
 8001984:	2300      	movs	r3, #0
 8001986:	4699      	mov	r9, r3
 8001988:	3301      	adds	r3, #1
 800198a:	2704      	movs	r7, #4
 800198c:	2600      	movs	r6, #0
 800198e:	469b      	mov	fp, r3
 8001990:	e664      	b.n	800165c <__aeabi_dmul+0x48>
 8001992:	2303      	movs	r3, #3
 8001994:	9701      	str	r7, [sp, #4]
 8001996:	4681      	mov	r9, r0
 8001998:	270c      	movs	r7, #12
 800199a:	469b      	mov	fp, r3
 800199c:	e65e      	b.n	800165c <__aeabi_dmul+0x48>
 800199e:	2201      	movs	r2, #1
 80019a0:	2001      	movs	r0, #1
 80019a2:	4317      	orrs	r7, r2
 80019a4:	2200      	movs	r2, #0
 80019a6:	e676      	b.n	8001696 <__aeabi_dmul+0x82>
 80019a8:	2303      	movs	r3, #3
 80019aa:	2003      	movs	r0, #3
 80019ac:	431f      	orrs	r7, r3
 80019ae:	4643      	mov	r3, r8
 80019b0:	e671      	b.n	8001696 <__aeabi_dmul+0x82>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	000007ff 	.word	0x000007ff
 80019b8:	fffffc01 	.word	0xfffffc01
 80019bc:	080171a4 	.word	0x080171a4
 80019c0:	800fffff 	.word	0x800fffff
 80019c4:	fffffc0d 	.word	0xfffffc0d
 80019c8:	000003ff 	.word	0x000003ff
 80019cc:	feffffff 	.word	0xfeffffff
 80019d0:	000007fe 	.word	0x000007fe
 80019d4:	2300      	movs	r3, #0
 80019d6:	2780      	movs	r7, #128	; 0x80
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	033f      	lsls	r7, r7, #12
 80019dc:	2600      	movs	r6, #0
 80019de:	4b43      	ldr	r3, [pc, #268]	; (8001aec <__aeabi_dmul+0x4d8>)
 80019e0:	e683      	b.n	80016ea <__aeabi_dmul+0xd6>
 80019e2:	9b01      	ldr	r3, [sp, #4]
 80019e4:	0032      	movs	r2, r6
 80019e6:	46a4      	mov	ip, r4
 80019e8:	4658      	mov	r0, fp
 80019ea:	e670      	b.n	80016ce <__aeabi_dmul+0xba>
 80019ec:	46ac      	mov	ip, r5
 80019ee:	e66e      	b.n	80016ce <__aeabi_dmul+0xba>
 80019f0:	2780      	movs	r7, #128	; 0x80
 80019f2:	9901      	ldr	r1, [sp, #4]
 80019f4:	033f      	lsls	r7, r7, #12
 80019f6:	4239      	tst	r1, r7
 80019f8:	d02d      	beq.n	8001a56 <__aeabi_dmul+0x442>
 80019fa:	423b      	tst	r3, r7
 80019fc:	d12b      	bne.n	8001a56 <__aeabi_dmul+0x442>
 80019fe:	431f      	orrs	r7, r3
 8001a00:	033f      	lsls	r7, r7, #12
 8001a02:	0b3f      	lsrs	r7, r7, #12
 8001a04:	9500      	str	r5, [sp, #0]
 8001a06:	0016      	movs	r6, r2
 8001a08:	4b38      	ldr	r3, [pc, #224]	; (8001aec <__aeabi_dmul+0x4d8>)
 8001a0a:	e66e      	b.n	80016ea <__aeabi_dmul+0xd6>
 8001a0c:	2501      	movs	r5, #1
 8001a0e:	1b2d      	subs	r5, r5, r4
 8001a10:	2d38      	cmp	r5, #56	; 0x38
 8001a12:	dd00      	ble.n	8001a16 <__aeabi_dmul+0x402>
 8001a14:	e666      	b.n	80016e4 <__aeabi_dmul+0xd0>
 8001a16:	2d1f      	cmp	r5, #31
 8001a18:	dc40      	bgt.n	8001a9c <__aeabi_dmul+0x488>
 8001a1a:	4835      	ldr	r0, [pc, #212]	; (8001af0 <__aeabi_dmul+0x4dc>)
 8001a1c:	001c      	movs	r4, r3
 8001a1e:	4450      	add	r0, sl
 8001a20:	0016      	movs	r6, r2
 8001a22:	4082      	lsls	r2, r0
 8001a24:	4084      	lsls	r4, r0
 8001a26:	40ee      	lsrs	r6, r5
 8001a28:	1e50      	subs	r0, r2, #1
 8001a2a:	4182      	sbcs	r2, r0
 8001a2c:	4334      	orrs	r4, r6
 8001a2e:	4314      	orrs	r4, r2
 8001a30:	40eb      	lsrs	r3, r5
 8001a32:	0762      	lsls	r2, r4, #29
 8001a34:	d009      	beq.n	8001a4a <__aeabi_dmul+0x436>
 8001a36:	220f      	movs	r2, #15
 8001a38:	4022      	ands	r2, r4
 8001a3a:	2a04      	cmp	r2, #4
 8001a3c:	d005      	beq.n	8001a4a <__aeabi_dmul+0x436>
 8001a3e:	0022      	movs	r2, r4
 8001a40:	1d14      	adds	r4, r2, #4
 8001a42:	4294      	cmp	r4, r2
 8001a44:	4180      	sbcs	r0, r0
 8001a46:	4240      	negs	r0, r0
 8001a48:	181b      	adds	r3, r3, r0
 8001a4a:	021a      	lsls	r2, r3, #8
 8001a4c:	d53e      	bpl.n	8001acc <__aeabi_dmul+0x4b8>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	2700      	movs	r7, #0
 8001a52:	2600      	movs	r6, #0
 8001a54:	e649      	b.n	80016ea <__aeabi_dmul+0xd6>
 8001a56:	2780      	movs	r7, #128	; 0x80
 8001a58:	9b01      	ldr	r3, [sp, #4]
 8001a5a:	033f      	lsls	r7, r7, #12
 8001a5c:	431f      	orrs	r7, r3
 8001a5e:	033f      	lsls	r7, r7, #12
 8001a60:	0b3f      	lsrs	r7, r7, #12
 8001a62:	9400      	str	r4, [sp, #0]
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <__aeabi_dmul+0x4d8>)
 8001a66:	e640      	b.n	80016ea <__aeabi_dmul+0xd6>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	465a      	mov	r2, fp
 8001a6c:	3b28      	subs	r3, #40	; 0x28
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	2600      	movs	r6, #0
 8001a72:	9201      	str	r2, [sp, #4]
 8001a74:	e66d      	b.n	8001752 <__aeabi_dmul+0x13e>
 8001a76:	4658      	mov	r0, fp
 8001a78:	f000 fd1a 	bl	80024b0 <__clzsi2>
 8001a7c:	3020      	adds	r0, #32
 8001a7e:	e657      	b.n	8001730 <__aeabi_dmul+0x11c>
 8001a80:	0003      	movs	r3, r0
 8001a82:	4652      	mov	r2, sl
 8001a84:	3b28      	subs	r3, #40	; 0x28
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	e693      	b.n	80017b6 <__aeabi_dmul+0x1a2>
 8001a8e:	4650      	mov	r0, sl
 8001a90:	f000 fd0e 	bl	80024b0 <__clzsi2>
 8001a94:	3020      	adds	r0, #32
 8001a96:	e67b      	b.n	8001790 <__aeabi_dmul+0x17c>
 8001a98:	46ca      	mov	sl, r9
 8001a9a:	e750      	b.n	800193e <__aeabi_dmul+0x32a>
 8001a9c:	201f      	movs	r0, #31
 8001a9e:	001e      	movs	r6, r3
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	1b04      	subs	r4, r0, r4
 8001aa4:	40e6      	lsrs	r6, r4
 8001aa6:	2d20      	cmp	r5, #32
 8001aa8:	d003      	beq.n	8001ab2 <__aeabi_dmul+0x49e>
 8001aaa:	4c12      	ldr	r4, [pc, #72]	; (8001af4 <__aeabi_dmul+0x4e0>)
 8001aac:	4454      	add	r4, sl
 8001aae:	40a3      	lsls	r3, r4
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	1e50      	subs	r0, r2, #1
 8001ab4:	4182      	sbcs	r2, r0
 8001ab6:	4332      	orrs	r2, r6
 8001ab8:	2607      	movs	r6, #7
 8001aba:	2700      	movs	r7, #0
 8001abc:	4016      	ands	r6, r2
 8001abe:	d009      	beq.n	8001ad4 <__aeabi_dmul+0x4c0>
 8001ac0:	200f      	movs	r0, #15
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	4010      	ands	r0, r2
 8001ac6:	0014      	movs	r4, r2
 8001ac8:	2804      	cmp	r0, #4
 8001aca:	d1b9      	bne.n	8001a40 <__aeabi_dmul+0x42c>
 8001acc:	0022      	movs	r2, r4
 8001ace:	075e      	lsls	r6, r3, #29
 8001ad0:	025b      	lsls	r3, r3, #9
 8001ad2:	0b1f      	lsrs	r7, r3, #12
 8001ad4:	08d2      	lsrs	r2, r2, #3
 8001ad6:	4316      	orrs	r6, r2
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e606      	b.n	80016ea <__aeabi_dmul+0xd6>
 8001adc:	2780      	movs	r7, #128	; 0x80
 8001ade:	033f      	lsls	r7, r7, #12
 8001ae0:	431f      	orrs	r7, r3
 8001ae2:	033f      	lsls	r7, r7, #12
 8001ae4:	0b3f      	lsrs	r7, r7, #12
 8001ae6:	0016      	movs	r6, r2
 8001ae8:	4b00      	ldr	r3, [pc, #0]	; (8001aec <__aeabi_dmul+0x4d8>)
 8001aea:	e5fe      	b.n	80016ea <__aeabi_dmul+0xd6>
 8001aec:	000007ff 	.word	0x000007ff
 8001af0:	0000041e 	.word	0x0000041e
 8001af4:	0000043e 	.word	0x0000043e

08001af8 <__aeabi_dsub>:
 8001af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afa:	4657      	mov	r7, sl
 8001afc:	464e      	mov	r6, r9
 8001afe:	4645      	mov	r5, r8
 8001b00:	46de      	mov	lr, fp
 8001b02:	000c      	movs	r4, r1
 8001b04:	0309      	lsls	r1, r1, #12
 8001b06:	b5e0      	push	{r5, r6, r7, lr}
 8001b08:	0a49      	lsrs	r1, r1, #9
 8001b0a:	0f46      	lsrs	r6, r0, #29
 8001b0c:	005f      	lsls	r7, r3, #1
 8001b0e:	4331      	orrs	r1, r6
 8001b10:	031e      	lsls	r6, r3, #12
 8001b12:	0fdb      	lsrs	r3, r3, #31
 8001b14:	0a76      	lsrs	r6, r6, #9
 8001b16:	469b      	mov	fp, r3
 8001b18:	0f53      	lsrs	r3, r2, #29
 8001b1a:	4333      	orrs	r3, r6
 8001b1c:	4ec8      	ldr	r6, [pc, #800]	; (8001e40 <__aeabi_dsub+0x348>)
 8001b1e:	0065      	lsls	r5, r4, #1
 8001b20:	00c0      	lsls	r0, r0, #3
 8001b22:	0fe4      	lsrs	r4, r4, #31
 8001b24:	00d2      	lsls	r2, r2, #3
 8001b26:	0d6d      	lsrs	r5, r5, #21
 8001b28:	46a2      	mov	sl, r4
 8001b2a:	4681      	mov	r9, r0
 8001b2c:	0d7f      	lsrs	r7, r7, #21
 8001b2e:	469c      	mov	ip, r3
 8001b30:	4690      	mov	r8, r2
 8001b32:	42b7      	cmp	r7, r6
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x40>
 8001b36:	e0b9      	b.n	8001cac <__aeabi_dsub+0x1b4>
 8001b38:	465b      	mov	r3, fp
 8001b3a:	2601      	movs	r6, #1
 8001b3c:	4073      	eors	r3, r6
 8001b3e:	469b      	mov	fp, r3
 8001b40:	1bee      	subs	r6, r5, r7
 8001b42:	45a3      	cmp	fp, r4
 8001b44:	d100      	bne.n	8001b48 <__aeabi_dsub+0x50>
 8001b46:	e083      	b.n	8001c50 <__aeabi_dsub+0x158>
 8001b48:	2e00      	cmp	r6, #0
 8001b4a:	dd63      	ble.n	8001c14 <__aeabi_dsub+0x11c>
 8001b4c:	2f00      	cmp	r7, #0
 8001b4e:	d000      	beq.n	8001b52 <__aeabi_dsub+0x5a>
 8001b50:	e0b1      	b.n	8001cb6 <__aeabi_dsub+0x1be>
 8001b52:	4663      	mov	r3, ip
 8001b54:	4313      	orrs	r3, r2
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dsub+0x62>
 8001b58:	e123      	b.n	8001da2 <__aeabi_dsub+0x2aa>
 8001b5a:	1e73      	subs	r3, r6, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d000      	beq.n	8001b62 <__aeabi_dsub+0x6a>
 8001b60:	e1ba      	b.n	8001ed8 <__aeabi_dsub+0x3e0>
 8001b62:	1a86      	subs	r6, r0, r2
 8001b64:	4663      	mov	r3, ip
 8001b66:	42b0      	cmp	r0, r6
 8001b68:	4180      	sbcs	r0, r0
 8001b6a:	2501      	movs	r5, #1
 8001b6c:	1ac9      	subs	r1, r1, r3
 8001b6e:	4240      	negs	r0, r0
 8001b70:	1a09      	subs	r1, r1, r0
 8001b72:	020b      	lsls	r3, r1, #8
 8001b74:	d400      	bmi.n	8001b78 <__aeabi_dsub+0x80>
 8001b76:	e147      	b.n	8001e08 <__aeabi_dsub+0x310>
 8001b78:	0249      	lsls	r1, r1, #9
 8001b7a:	0a4b      	lsrs	r3, r1, #9
 8001b7c:	4698      	mov	r8, r3
 8001b7e:	4643      	mov	r3, r8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dsub+0x8e>
 8001b84:	e189      	b.n	8001e9a <__aeabi_dsub+0x3a2>
 8001b86:	4640      	mov	r0, r8
 8001b88:	f000 fc92 	bl	80024b0 <__clzsi2>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	3b08      	subs	r3, #8
 8001b90:	2b1f      	cmp	r3, #31
 8001b92:	dd00      	ble.n	8001b96 <__aeabi_dsub+0x9e>
 8001b94:	e17c      	b.n	8001e90 <__aeabi_dsub+0x398>
 8001b96:	2220      	movs	r2, #32
 8001b98:	0030      	movs	r0, r6
 8001b9a:	1ad2      	subs	r2, r2, r3
 8001b9c:	4641      	mov	r1, r8
 8001b9e:	40d0      	lsrs	r0, r2
 8001ba0:	4099      	lsls	r1, r3
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	409e      	lsls	r6, r3
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	429d      	cmp	r5, r3
 8001baa:	dd00      	ble.n	8001bae <__aeabi_dsub+0xb6>
 8001bac:	e16a      	b.n	8001e84 <__aeabi_dsub+0x38c>
 8001bae:	1b5d      	subs	r5, r3, r5
 8001bb0:	1c6b      	adds	r3, r5, #1
 8001bb2:	2b1f      	cmp	r3, #31
 8001bb4:	dd00      	ble.n	8001bb8 <__aeabi_dsub+0xc0>
 8001bb6:	e194      	b.n	8001ee2 <__aeabi_dsub+0x3ea>
 8001bb8:	2120      	movs	r1, #32
 8001bba:	0010      	movs	r0, r2
 8001bbc:	0035      	movs	r5, r6
 8001bbe:	1ac9      	subs	r1, r1, r3
 8001bc0:	408e      	lsls	r6, r1
 8001bc2:	40da      	lsrs	r2, r3
 8001bc4:	4088      	lsls	r0, r1
 8001bc6:	40dd      	lsrs	r5, r3
 8001bc8:	1e71      	subs	r1, r6, #1
 8001bca:	418e      	sbcs	r6, r1
 8001bcc:	0011      	movs	r1, r2
 8001bce:	2207      	movs	r2, #7
 8001bd0:	4328      	orrs	r0, r5
 8001bd2:	2500      	movs	r5, #0
 8001bd4:	4306      	orrs	r6, r0
 8001bd6:	4032      	ands	r2, r6
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d009      	beq.n	8001bf0 <__aeabi_dsub+0xf8>
 8001bdc:	230f      	movs	r3, #15
 8001bde:	4033      	ands	r3, r6
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d005      	beq.n	8001bf0 <__aeabi_dsub+0xf8>
 8001be4:	1d33      	adds	r3, r6, #4
 8001be6:	42b3      	cmp	r3, r6
 8001be8:	41b6      	sbcs	r6, r6
 8001bea:	4276      	negs	r6, r6
 8001bec:	1989      	adds	r1, r1, r6
 8001bee:	001e      	movs	r6, r3
 8001bf0:	020b      	lsls	r3, r1, #8
 8001bf2:	d400      	bmi.n	8001bf6 <__aeabi_dsub+0xfe>
 8001bf4:	e23d      	b.n	8002072 <__aeabi_dsub+0x57a>
 8001bf6:	1c6a      	adds	r2, r5, #1
 8001bf8:	4b91      	ldr	r3, [pc, #580]	; (8001e40 <__aeabi_dsub+0x348>)
 8001bfa:	0555      	lsls	r5, r2, #21
 8001bfc:	0d6d      	lsrs	r5, r5, #21
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x10c>
 8001c02:	e119      	b.n	8001e38 <__aeabi_dsub+0x340>
 8001c04:	4a8f      	ldr	r2, [pc, #572]	; (8001e44 <__aeabi_dsub+0x34c>)
 8001c06:	08f6      	lsrs	r6, r6, #3
 8001c08:	400a      	ands	r2, r1
 8001c0a:	0757      	lsls	r7, r2, #29
 8001c0c:	0252      	lsls	r2, r2, #9
 8001c0e:	4337      	orrs	r7, r6
 8001c10:	0b12      	lsrs	r2, r2, #12
 8001c12:	e09b      	b.n	8001d4c <__aeabi_dsub+0x254>
 8001c14:	2e00      	cmp	r6, #0
 8001c16:	d000      	beq.n	8001c1a <__aeabi_dsub+0x122>
 8001c18:	e0c5      	b.n	8001da6 <__aeabi_dsub+0x2ae>
 8001c1a:	1c6e      	adds	r6, r5, #1
 8001c1c:	0576      	lsls	r6, r6, #21
 8001c1e:	0d76      	lsrs	r6, r6, #21
 8001c20:	2e01      	cmp	r6, #1
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dsub+0x12e>
 8001c24:	e148      	b.n	8001eb8 <__aeabi_dsub+0x3c0>
 8001c26:	4667      	mov	r7, ip
 8001c28:	1a86      	subs	r6, r0, r2
 8001c2a:	1bcb      	subs	r3, r1, r7
 8001c2c:	42b0      	cmp	r0, r6
 8001c2e:	41bf      	sbcs	r7, r7
 8001c30:	427f      	negs	r7, r7
 8001c32:	46b8      	mov	r8, r7
 8001c34:	001f      	movs	r7, r3
 8001c36:	4643      	mov	r3, r8
 8001c38:	1aff      	subs	r7, r7, r3
 8001c3a:	003b      	movs	r3, r7
 8001c3c:	46b8      	mov	r8, r7
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	d500      	bpl.n	8001c44 <__aeabi_dsub+0x14c>
 8001c42:	e15f      	b.n	8001f04 <__aeabi_dsub+0x40c>
 8001c44:	4337      	orrs	r7, r6
 8001c46:	d19a      	bne.n	8001b7e <__aeabi_dsub+0x86>
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2400      	movs	r4, #0
 8001c4c:	2500      	movs	r5, #0
 8001c4e:	e079      	b.n	8001d44 <__aeabi_dsub+0x24c>
 8001c50:	2e00      	cmp	r6, #0
 8001c52:	dc00      	bgt.n	8001c56 <__aeabi_dsub+0x15e>
 8001c54:	e0fa      	b.n	8001e4c <__aeabi_dsub+0x354>
 8001c56:	2f00      	cmp	r7, #0
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x164>
 8001c5a:	e08d      	b.n	8001d78 <__aeabi_dsub+0x280>
 8001c5c:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <__aeabi_dsub+0x348>)
 8001c5e:	429d      	cmp	r5, r3
 8001c60:	d067      	beq.n	8001d32 <__aeabi_dsub+0x23a>
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	4667      	mov	r7, ip
 8001c66:	041b      	lsls	r3, r3, #16
 8001c68:	431f      	orrs	r7, r3
 8001c6a:	46bc      	mov	ip, r7
 8001c6c:	2e38      	cmp	r6, #56	; 0x38
 8001c6e:	dc00      	bgt.n	8001c72 <__aeabi_dsub+0x17a>
 8001c70:	e152      	b.n	8001f18 <__aeabi_dsub+0x420>
 8001c72:	4663      	mov	r3, ip
 8001c74:	4313      	orrs	r3, r2
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	4193      	sbcs	r3, r2
 8001c7a:	181e      	adds	r6, r3, r0
 8001c7c:	4286      	cmp	r6, r0
 8001c7e:	4180      	sbcs	r0, r0
 8001c80:	4240      	negs	r0, r0
 8001c82:	1809      	adds	r1, r1, r0
 8001c84:	020b      	lsls	r3, r1, #8
 8001c86:	d400      	bmi.n	8001c8a <__aeabi_dsub+0x192>
 8001c88:	e0be      	b.n	8001e08 <__aeabi_dsub+0x310>
 8001c8a:	4b6d      	ldr	r3, [pc, #436]	; (8001e40 <__aeabi_dsub+0x348>)
 8001c8c:	3501      	adds	r5, #1
 8001c8e:	429d      	cmp	r5, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x19c>
 8001c92:	e0d2      	b.n	8001e3a <__aeabi_dsub+0x342>
 8001c94:	4a6b      	ldr	r2, [pc, #428]	; (8001e44 <__aeabi_dsub+0x34c>)
 8001c96:	0873      	lsrs	r3, r6, #1
 8001c98:	400a      	ands	r2, r1
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	400e      	ands	r6, r1
 8001c9e:	431e      	orrs	r6, r3
 8001ca0:	0851      	lsrs	r1, r2, #1
 8001ca2:	07d3      	lsls	r3, r2, #31
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	431e      	orrs	r6, r3
 8001ca8:	4032      	ands	r2, r6
 8001caa:	e795      	b.n	8001bd8 <__aeabi_dsub+0xe0>
 8001cac:	001e      	movs	r6, r3
 8001cae:	4316      	orrs	r6, r2
 8001cb0:	d000      	beq.n	8001cb4 <__aeabi_dsub+0x1bc>
 8001cb2:	e745      	b.n	8001b40 <__aeabi_dsub+0x48>
 8001cb4:	e740      	b.n	8001b38 <__aeabi_dsub+0x40>
 8001cb6:	4b62      	ldr	r3, [pc, #392]	; (8001e40 <__aeabi_dsub+0x348>)
 8001cb8:	429d      	cmp	r5, r3
 8001cba:	d03a      	beq.n	8001d32 <__aeabi_dsub+0x23a>
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	4667      	mov	r7, ip
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	431f      	orrs	r7, r3
 8001cc4:	46bc      	mov	ip, r7
 8001cc6:	2e38      	cmp	r6, #56	; 0x38
 8001cc8:	dd00      	ble.n	8001ccc <__aeabi_dsub+0x1d4>
 8001cca:	e0eb      	b.n	8001ea4 <__aeabi_dsub+0x3ac>
 8001ccc:	2e1f      	cmp	r6, #31
 8001cce:	dc00      	bgt.n	8001cd2 <__aeabi_dsub+0x1da>
 8001cd0:	e13a      	b.n	8001f48 <__aeabi_dsub+0x450>
 8001cd2:	0033      	movs	r3, r6
 8001cd4:	4667      	mov	r7, ip
 8001cd6:	3b20      	subs	r3, #32
 8001cd8:	40df      	lsrs	r7, r3
 8001cda:	003b      	movs	r3, r7
 8001cdc:	2e20      	cmp	r6, #32
 8001cde:	d005      	beq.n	8001cec <__aeabi_dsub+0x1f4>
 8001ce0:	2740      	movs	r7, #64	; 0x40
 8001ce2:	1bbf      	subs	r7, r7, r6
 8001ce4:	4666      	mov	r6, ip
 8001ce6:	40be      	lsls	r6, r7
 8001ce8:	4332      	orrs	r2, r6
 8001cea:	4690      	mov	r8, r2
 8001cec:	4646      	mov	r6, r8
 8001cee:	1e72      	subs	r2, r6, #1
 8001cf0:	4196      	sbcs	r6, r2
 8001cf2:	4333      	orrs	r3, r6
 8001cf4:	e0da      	b.n	8001eac <__aeabi_dsub+0x3b4>
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x204>
 8001cfa:	e214      	b.n	8002126 <__aeabi_dsub+0x62e>
 8001cfc:	4663      	mov	r3, ip
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	d100      	bne.n	8001d04 <__aeabi_dsub+0x20c>
 8001d02:	e168      	b.n	8001fd6 <__aeabi_dsub+0x4de>
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	074e      	lsls	r6, r1, #29
 8001d08:	08c0      	lsrs	r0, r0, #3
 8001d0a:	08c9      	lsrs	r1, r1, #3
 8001d0c:	031b      	lsls	r3, r3, #12
 8001d0e:	4306      	orrs	r6, r0
 8001d10:	4219      	tst	r1, r3
 8001d12:	d008      	beq.n	8001d26 <__aeabi_dsub+0x22e>
 8001d14:	4660      	mov	r0, ip
 8001d16:	08c0      	lsrs	r0, r0, #3
 8001d18:	4218      	tst	r0, r3
 8001d1a:	d104      	bne.n	8001d26 <__aeabi_dsub+0x22e>
 8001d1c:	4663      	mov	r3, ip
 8001d1e:	0001      	movs	r1, r0
 8001d20:	08d2      	lsrs	r2, r2, #3
 8001d22:	075e      	lsls	r6, r3, #29
 8001d24:	4316      	orrs	r6, r2
 8001d26:	00f3      	lsls	r3, r6, #3
 8001d28:	4699      	mov	r9, r3
 8001d2a:	00c9      	lsls	r1, r1, #3
 8001d2c:	0f72      	lsrs	r2, r6, #29
 8001d2e:	4d44      	ldr	r5, [pc, #272]	; (8001e40 <__aeabi_dsub+0x348>)
 8001d30:	4311      	orrs	r1, r2
 8001d32:	464b      	mov	r3, r9
 8001d34:	08de      	lsrs	r6, r3, #3
 8001d36:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <__aeabi_dsub+0x348>)
 8001d38:	074f      	lsls	r7, r1, #29
 8001d3a:	4337      	orrs	r7, r6
 8001d3c:	08ca      	lsrs	r2, r1, #3
 8001d3e:	429d      	cmp	r5, r3
 8001d40:	d100      	bne.n	8001d44 <__aeabi_dsub+0x24c>
 8001d42:	e06e      	b.n	8001e22 <__aeabi_dsub+0x32a>
 8001d44:	0312      	lsls	r2, r2, #12
 8001d46:	056d      	lsls	r5, r5, #21
 8001d48:	0b12      	lsrs	r2, r2, #12
 8001d4a:	0d6d      	lsrs	r5, r5, #21
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	0b13      	lsrs	r3, r2, #12
 8001d52:	0d0a      	lsrs	r2, r1, #20
 8001d54:	0512      	lsls	r2, r2, #20
 8001d56:	431a      	orrs	r2, r3
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <__aeabi_dsub+0x350>)
 8001d5a:	052d      	lsls	r5, r5, #20
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	432b      	orrs	r3, r5
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	07e4      	lsls	r4, r4, #31
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	4323      	orrs	r3, r4
 8001d68:	0038      	movs	r0, r7
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	bc3c      	pop	{r2, r3, r4, r5}
 8001d6e:	4690      	mov	r8, r2
 8001d70:	4699      	mov	r9, r3
 8001d72:	46a2      	mov	sl, r4
 8001d74:	46ab      	mov	fp, r5
 8001d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d78:	4663      	mov	r3, ip
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	d011      	beq.n	8001da2 <__aeabi_dsub+0x2aa>
 8001d7e:	1e73      	subs	r3, r6, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d000      	beq.n	8001d86 <__aeabi_dsub+0x28e>
 8001d84:	e107      	b.n	8001f96 <__aeabi_dsub+0x49e>
 8001d86:	1886      	adds	r6, r0, r2
 8001d88:	4286      	cmp	r6, r0
 8001d8a:	4180      	sbcs	r0, r0
 8001d8c:	4461      	add	r1, ip
 8001d8e:	4240      	negs	r0, r0
 8001d90:	1809      	adds	r1, r1, r0
 8001d92:	2501      	movs	r5, #1
 8001d94:	020b      	lsls	r3, r1, #8
 8001d96:	d537      	bpl.n	8001e08 <__aeabi_dsub+0x310>
 8001d98:	2502      	movs	r5, #2
 8001d9a:	e77b      	b.n	8001c94 <__aeabi_dsub+0x19c>
 8001d9c:	003e      	movs	r6, r7
 8001d9e:	4661      	mov	r1, ip
 8001da0:	4691      	mov	r9, r2
 8001da2:	0035      	movs	r5, r6
 8001da4:	e7c5      	b.n	8001d32 <__aeabi_dsub+0x23a>
 8001da6:	465c      	mov	r4, fp
 8001da8:	2d00      	cmp	r5, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x2b6>
 8001dac:	e0e1      	b.n	8001f72 <__aeabi_dsub+0x47a>
 8001dae:	000b      	movs	r3, r1
 8001db0:	4303      	orrs	r3, r0
 8001db2:	d0f3      	beq.n	8001d9c <__aeabi_dsub+0x2a4>
 8001db4:	1c73      	adds	r3, r6, #1
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x2c2>
 8001db8:	e1ac      	b.n	8002114 <__aeabi_dsub+0x61c>
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <__aeabi_dsub+0x348>)
 8001dbc:	429f      	cmp	r7, r3
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x2ca>
 8001dc0:	e13a      	b.n	8002038 <__aeabi_dsub+0x540>
 8001dc2:	43f3      	mvns	r3, r6
 8001dc4:	2b38      	cmp	r3, #56	; 0x38
 8001dc6:	dd00      	ble.n	8001dca <__aeabi_dsub+0x2d2>
 8001dc8:	e16f      	b.n	80020aa <__aeabi_dsub+0x5b2>
 8001dca:	2b1f      	cmp	r3, #31
 8001dcc:	dd00      	ble.n	8001dd0 <__aeabi_dsub+0x2d8>
 8001dce:	e18c      	b.n	80020ea <__aeabi_dsub+0x5f2>
 8001dd0:	2520      	movs	r5, #32
 8001dd2:	000e      	movs	r6, r1
 8001dd4:	1aed      	subs	r5, r5, r3
 8001dd6:	40ae      	lsls	r6, r5
 8001dd8:	46b0      	mov	r8, r6
 8001dda:	0006      	movs	r6, r0
 8001ddc:	46aa      	mov	sl, r5
 8001dde:	40de      	lsrs	r6, r3
 8001de0:	4645      	mov	r5, r8
 8001de2:	4335      	orrs	r5, r6
 8001de4:	002e      	movs	r6, r5
 8001de6:	4655      	mov	r5, sl
 8001de8:	40d9      	lsrs	r1, r3
 8001dea:	40a8      	lsls	r0, r5
 8001dec:	4663      	mov	r3, ip
 8001dee:	1e45      	subs	r5, r0, #1
 8001df0:	41a8      	sbcs	r0, r5
 8001df2:	1a5b      	subs	r3, r3, r1
 8001df4:	469c      	mov	ip, r3
 8001df6:	4330      	orrs	r0, r6
 8001df8:	1a16      	subs	r6, r2, r0
 8001dfa:	42b2      	cmp	r2, r6
 8001dfc:	4192      	sbcs	r2, r2
 8001dfe:	4663      	mov	r3, ip
 8001e00:	4252      	negs	r2, r2
 8001e02:	1a99      	subs	r1, r3, r2
 8001e04:	003d      	movs	r5, r7
 8001e06:	e6b4      	b.n	8001b72 <__aeabi_dsub+0x7a>
 8001e08:	2207      	movs	r2, #7
 8001e0a:	4032      	ands	r2, r6
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dsub+0x31a>
 8001e10:	e6e4      	b.n	8001bdc <__aeabi_dsub+0xe4>
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <__aeabi_dsub+0x348>)
 8001e14:	08f6      	lsrs	r6, r6, #3
 8001e16:	074f      	lsls	r7, r1, #29
 8001e18:	4337      	orrs	r7, r6
 8001e1a:	08ca      	lsrs	r2, r1, #3
 8001e1c:	429d      	cmp	r5, r3
 8001e1e:	d000      	beq.n	8001e22 <__aeabi_dsub+0x32a>
 8001e20:	e790      	b.n	8001d44 <__aeabi_dsub+0x24c>
 8001e22:	003b      	movs	r3, r7
 8001e24:	4313      	orrs	r3, r2
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x332>
 8001e28:	e1a6      	b.n	8002178 <__aeabi_dsub+0x680>
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	031b      	lsls	r3, r3, #12
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	0312      	lsls	r2, r2, #12
 8001e32:	0b12      	lsrs	r2, r2, #12
 8001e34:	4d02      	ldr	r5, [pc, #8]	; (8001e40 <__aeabi_dsub+0x348>)
 8001e36:	e789      	b.n	8001d4c <__aeabi_dsub+0x254>
 8001e38:	0015      	movs	r5, r2
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2700      	movs	r7, #0
 8001e3e:	e785      	b.n	8001d4c <__aeabi_dsub+0x254>
 8001e40:	000007ff 	.word	0x000007ff
 8001e44:	ff7fffff 	.word	0xff7fffff
 8001e48:	800fffff 	.word	0x800fffff
 8001e4c:	2e00      	cmp	r6, #0
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x35a>
 8001e50:	e0c7      	b.n	8001fe2 <__aeabi_dsub+0x4ea>
 8001e52:	1c6b      	adds	r3, r5, #1
 8001e54:	055e      	lsls	r6, r3, #21
 8001e56:	0d76      	lsrs	r6, r6, #21
 8001e58:	2e01      	cmp	r6, #1
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_dsub+0x366>
 8001e5c:	e0f0      	b.n	8002040 <__aeabi_dsub+0x548>
 8001e5e:	4dc8      	ldr	r5, [pc, #800]	; (8002180 <__aeabi_dsub+0x688>)
 8001e60:	42ab      	cmp	r3, r5
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x36e>
 8001e64:	e0b9      	b.n	8001fda <__aeabi_dsub+0x4e2>
 8001e66:	1885      	adds	r5, r0, r2
 8001e68:	000a      	movs	r2, r1
 8001e6a:	4285      	cmp	r5, r0
 8001e6c:	4189      	sbcs	r1, r1
 8001e6e:	4462      	add	r2, ip
 8001e70:	4249      	negs	r1, r1
 8001e72:	1851      	adds	r1, r2, r1
 8001e74:	2207      	movs	r2, #7
 8001e76:	07ce      	lsls	r6, r1, #31
 8001e78:	086d      	lsrs	r5, r5, #1
 8001e7a:	432e      	orrs	r6, r5
 8001e7c:	0849      	lsrs	r1, r1, #1
 8001e7e:	4032      	ands	r2, r6
 8001e80:	001d      	movs	r5, r3
 8001e82:	e6a9      	b.n	8001bd8 <__aeabi_dsub+0xe0>
 8001e84:	49bf      	ldr	r1, [pc, #764]	; (8002184 <__aeabi_dsub+0x68c>)
 8001e86:	1aed      	subs	r5, r5, r3
 8001e88:	4011      	ands	r1, r2
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	4032      	ands	r2, r6
 8001e8e:	e6a3      	b.n	8001bd8 <__aeabi_dsub+0xe0>
 8001e90:	0032      	movs	r2, r6
 8001e92:	3828      	subs	r0, #40	; 0x28
 8001e94:	4082      	lsls	r2, r0
 8001e96:	2600      	movs	r6, #0
 8001e98:	e686      	b.n	8001ba8 <__aeabi_dsub+0xb0>
 8001e9a:	0030      	movs	r0, r6
 8001e9c:	f000 fb08 	bl	80024b0 <__clzsi2>
 8001ea0:	3020      	adds	r0, #32
 8001ea2:	e673      	b.n	8001b8c <__aeabi_dsub+0x94>
 8001ea4:	4663      	mov	r3, ip
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	1e5a      	subs	r2, r3, #1
 8001eaa:	4193      	sbcs	r3, r2
 8001eac:	1ac6      	subs	r6, r0, r3
 8001eae:	42b0      	cmp	r0, r6
 8001eb0:	4180      	sbcs	r0, r0
 8001eb2:	4240      	negs	r0, r0
 8001eb4:	1a09      	subs	r1, r1, r0
 8001eb6:	e65c      	b.n	8001b72 <__aeabi_dsub+0x7a>
 8001eb8:	000e      	movs	r6, r1
 8001eba:	4667      	mov	r7, ip
 8001ebc:	4306      	orrs	r6, r0
 8001ebe:	4317      	orrs	r7, r2
 8001ec0:	2d00      	cmp	r5, #0
 8001ec2:	d15e      	bne.n	8001f82 <__aeabi_dsub+0x48a>
 8001ec4:	2e00      	cmp	r6, #0
 8001ec6:	d000      	beq.n	8001eca <__aeabi_dsub+0x3d2>
 8001ec8:	e0f3      	b.n	80020b2 <__aeabi_dsub+0x5ba>
 8001eca:	2f00      	cmp	r7, #0
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x3d8>
 8001ece:	e11e      	b.n	800210e <__aeabi_dsub+0x616>
 8001ed0:	465c      	mov	r4, fp
 8001ed2:	4661      	mov	r1, ip
 8001ed4:	4691      	mov	r9, r2
 8001ed6:	e72c      	b.n	8001d32 <__aeabi_dsub+0x23a>
 8001ed8:	4fa9      	ldr	r7, [pc, #676]	; (8002180 <__aeabi_dsub+0x688>)
 8001eda:	42be      	cmp	r6, r7
 8001edc:	d07b      	beq.n	8001fd6 <__aeabi_dsub+0x4de>
 8001ede:	001e      	movs	r6, r3
 8001ee0:	e6f1      	b.n	8001cc6 <__aeabi_dsub+0x1ce>
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	3d1f      	subs	r5, #31
 8001ee6:	40e8      	lsrs	r0, r5
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d003      	beq.n	8001ef4 <__aeabi_dsub+0x3fc>
 8001eec:	2140      	movs	r1, #64	; 0x40
 8001eee:	1acb      	subs	r3, r1, r3
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	4316      	orrs	r6, r2
 8001ef4:	1e73      	subs	r3, r6, #1
 8001ef6:	419e      	sbcs	r6, r3
 8001ef8:	2207      	movs	r2, #7
 8001efa:	4306      	orrs	r6, r0
 8001efc:	4032      	ands	r2, r6
 8001efe:	2100      	movs	r1, #0
 8001f00:	2500      	movs	r5, #0
 8001f02:	e783      	b.n	8001e0c <__aeabi_dsub+0x314>
 8001f04:	1a16      	subs	r6, r2, r0
 8001f06:	4663      	mov	r3, ip
 8001f08:	42b2      	cmp	r2, r6
 8001f0a:	4180      	sbcs	r0, r0
 8001f0c:	1a59      	subs	r1, r3, r1
 8001f0e:	4240      	negs	r0, r0
 8001f10:	1a0b      	subs	r3, r1, r0
 8001f12:	4698      	mov	r8, r3
 8001f14:	465c      	mov	r4, fp
 8001f16:	e632      	b.n	8001b7e <__aeabi_dsub+0x86>
 8001f18:	2e1f      	cmp	r6, #31
 8001f1a:	dd00      	ble.n	8001f1e <__aeabi_dsub+0x426>
 8001f1c:	e0ab      	b.n	8002076 <__aeabi_dsub+0x57e>
 8001f1e:	2720      	movs	r7, #32
 8001f20:	1bbb      	subs	r3, r7, r6
 8001f22:	469a      	mov	sl, r3
 8001f24:	4663      	mov	r3, ip
 8001f26:	4657      	mov	r7, sl
 8001f28:	40bb      	lsls	r3, r7
 8001f2a:	4699      	mov	r9, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	464f      	mov	r7, r9
 8001f30:	40f3      	lsrs	r3, r6
 8001f32:	431f      	orrs	r7, r3
 8001f34:	003b      	movs	r3, r7
 8001f36:	4657      	mov	r7, sl
 8001f38:	40ba      	lsls	r2, r7
 8001f3a:	1e57      	subs	r7, r2, #1
 8001f3c:	41ba      	sbcs	r2, r7
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	4662      	mov	r2, ip
 8001f42:	40f2      	lsrs	r2, r6
 8001f44:	1889      	adds	r1, r1, r2
 8001f46:	e698      	b.n	8001c7a <__aeabi_dsub+0x182>
 8001f48:	2720      	movs	r7, #32
 8001f4a:	1bbb      	subs	r3, r7, r6
 8001f4c:	469a      	mov	sl, r3
 8001f4e:	4663      	mov	r3, ip
 8001f50:	4657      	mov	r7, sl
 8001f52:	40bb      	lsls	r3, r7
 8001f54:	4699      	mov	r9, r3
 8001f56:	0013      	movs	r3, r2
 8001f58:	464f      	mov	r7, r9
 8001f5a:	40f3      	lsrs	r3, r6
 8001f5c:	431f      	orrs	r7, r3
 8001f5e:	003b      	movs	r3, r7
 8001f60:	4657      	mov	r7, sl
 8001f62:	40ba      	lsls	r2, r7
 8001f64:	1e57      	subs	r7, r2, #1
 8001f66:	41ba      	sbcs	r2, r7
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	4662      	mov	r2, ip
 8001f6c:	40f2      	lsrs	r2, r6
 8001f6e:	1a89      	subs	r1, r1, r2
 8001f70:	e79c      	b.n	8001eac <__aeabi_dsub+0x3b4>
 8001f72:	4b83      	ldr	r3, [pc, #524]	; (8002180 <__aeabi_dsub+0x688>)
 8001f74:	429f      	cmp	r7, r3
 8001f76:	d05f      	beq.n	8002038 <__aeabi_dsub+0x540>
 8001f78:	2580      	movs	r5, #128	; 0x80
 8001f7a:	042d      	lsls	r5, r5, #16
 8001f7c:	4273      	negs	r3, r6
 8001f7e:	4329      	orrs	r1, r5
 8001f80:	e720      	b.n	8001dc4 <__aeabi_dsub+0x2cc>
 8001f82:	2e00      	cmp	r6, #0
 8001f84:	d10c      	bne.n	8001fa0 <__aeabi_dsub+0x4a8>
 8001f86:	2f00      	cmp	r7, #0
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x494>
 8001f8a:	e0d0      	b.n	800212e <__aeabi_dsub+0x636>
 8001f8c:	465c      	mov	r4, fp
 8001f8e:	4661      	mov	r1, ip
 8001f90:	4691      	mov	r9, r2
 8001f92:	4d7b      	ldr	r5, [pc, #492]	; (8002180 <__aeabi_dsub+0x688>)
 8001f94:	e6cd      	b.n	8001d32 <__aeabi_dsub+0x23a>
 8001f96:	4f7a      	ldr	r7, [pc, #488]	; (8002180 <__aeabi_dsub+0x688>)
 8001f98:	42be      	cmp	r6, r7
 8001f9a:	d01c      	beq.n	8001fd6 <__aeabi_dsub+0x4de>
 8001f9c:	001e      	movs	r6, r3
 8001f9e:	e665      	b.n	8001c6c <__aeabi_dsub+0x174>
 8001fa0:	2f00      	cmp	r7, #0
 8001fa2:	d018      	beq.n	8001fd6 <__aeabi_dsub+0x4de>
 8001fa4:	08c0      	lsrs	r0, r0, #3
 8001fa6:	074e      	lsls	r6, r1, #29
 8001fa8:	4306      	orrs	r6, r0
 8001faa:	2080      	movs	r0, #128	; 0x80
 8001fac:	08c9      	lsrs	r1, r1, #3
 8001fae:	0300      	lsls	r0, r0, #12
 8001fb0:	4201      	tst	r1, r0
 8001fb2:	d008      	beq.n	8001fc6 <__aeabi_dsub+0x4ce>
 8001fb4:	4663      	mov	r3, ip
 8001fb6:	08dc      	lsrs	r4, r3, #3
 8001fb8:	4204      	tst	r4, r0
 8001fba:	d104      	bne.n	8001fc6 <__aeabi_dsub+0x4ce>
 8001fbc:	0021      	movs	r1, r4
 8001fbe:	46da      	mov	sl, fp
 8001fc0:	08d2      	lsrs	r2, r2, #3
 8001fc2:	075e      	lsls	r6, r3, #29
 8001fc4:	4316      	orrs	r6, r2
 8001fc6:	00f3      	lsls	r3, r6, #3
 8001fc8:	4699      	mov	r9, r3
 8001fca:	2401      	movs	r4, #1
 8001fcc:	4653      	mov	r3, sl
 8001fce:	00c9      	lsls	r1, r1, #3
 8001fd0:	0f72      	lsrs	r2, r6, #29
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	401c      	ands	r4, r3
 8001fd6:	4d6a      	ldr	r5, [pc, #424]	; (8002180 <__aeabi_dsub+0x688>)
 8001fd8:	e6ab      	b.n	8001d32 <__aeabi_dsub+0x23a>
 8001fda:	001d      	movs	r5, r3
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2700      	movs	r7, #0
 8001fe0:	e6b4      	b.n	8001d4c <__aeabi_dsub+0x254>
 8001fe2:	2d00      	cmp	r5, #0
 8001fe4:	d159      	bne.n	800209a <__aeabi_dsub+0x5a2>
 8001fe6:	000b      	movs	r3, r1
 8001fe8:	4303      	orrs	r3, r0
 8001fea:	d100      	bne.n	8001fee <__aeabi_dsub+0x4f6>
 8001fec:	e6d6      	b.n	8001d9c <__aeabi_dsub+0x2a4>
 8001fee:	1c73      	adds	r3, r6, #1
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dsub+0x4fc>
 8001ff2:	e0b2      	b.n	800215a <__aeabi_dsub+0x662>
 8001ff4:	4b62      	ldr	r3, [pc, #392]	; (8002180 <__aeabi_dsub+0x688>)
 8001ff6:	429f      	cmp	r7, r3
 8001ff8:	d01e      	beq.n	8002038 <__aeabi_dsub+0x540>
 8001ffa:	43f3      	mvns	r3, r6
 8001ffc:	2b38      	cmp	r3, #56	; 0x38
 8001ffe:	dc6f      	bgt.n	80020e0 <__aeabi_dsub+0x5e8>
 8002000:	2b1f      	cmp	r3, #31
 8002002:	dd00      	ble.n	8002006 <__aeabi_dsub+0x50e>
 8002004:	e097      	b.n	8002136 <__aeabi_dsub+0x63e>
 8002006:	2520      	movs	r5, #32
 8002008:	000e      	movs	r6, r1
 800200a:	1aed      	subs	r5, r5, r3
 800200c:	40ae      	lsls	r6, r5
 800200e:	46b0      	mov	r8, r6
 8002010:	0006      	movs	r6, r0
 8002012:	46aa      	mov	sl, r5
 8002014:	40de      	lsrs	r6, r3
 8002016:	4645      	mov	r5, r8
 8002018:	4335      	orrs	r5, r6
 800201a:	002e      	movs	r6, r5
 800201c:	4655      	mov	r5, sl
 800201e:	40a8      	lsls	r0, r5
 8002020:	40d9      	lsrs	r1, r3
 8002022:	1e45      	subs	r5, r0, #1
 8002024:	41a8      	sbcs	r0, r5
 8002026:	448c      	add	ip, r1
 8002028:	4306      	orrs	r6, r0
 800202a:	18b6      	adds	r6, r6, r2
 800202c:	4296      	cmp	r6, r2
 800202e:	4192      	sbcs	r2, r2
 8002030:	4251      	negs	r1, r2
 8002032:	4461      	add	r1, ip
 8002034:	003d      	movs	r5, r7
 8002036:	e625      	b.n	8001c84 <__aeabi_dsub+0x18c>
 8002038:	003d      	movs	r5, r7
 800203a:	4661      	mov	r1, ip
 800203c:	4691      	mov	r9, r2
 800203e:	e678      	b.n	8001d32 <__aeabi_dsub+0x23a>
 8002040:	000b      	movs	r3, r1
 8002042:	4303      	orrs	r3, r0
 8002044:	2d00      	cmp	r5, #0
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x552>
 8002048:	e655      	b.n	8001cf6 <__aeabi_dsub+0x1fe>
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f5      	beq.n	800203a <__aeabi_dsub+0x542>
 800204e:	4663      	mov	r3, ip
 8002050:	4313      	orrs	r3, r2
 8002052:	d100      	bne.n	8002056 <__aeabi_dsub+0x55e>
 8002054:	e66d      	b.n	8001d32 <__aeabi_dsub+0x23a>
 8002056:	1886      	adds	r6, r0, r2
 8002058:	4286      	cmp	r6, r0
 800205a:	4180      	sbcs	r0, r0
 800205c:	4461      	add	r1, ip
 800205e:	4240      	negs	r0, r0
 8002060:	1809      	adds	r1, r1, r0
 8002062:	2200      	movs	r2, #0
 8002064:	020b      	lsls	r3, r1, #8
 8002066:	d400      	bmi.n	800206a <__aeabi_dsub+0x572>
 8002068:	e6d0      	b.n	8001e0c <__aeabi_dsub+0x314>
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <__aeabi_dsub+0x68c>)
 800206c:	3501      	adds	r5, #1
 800206e:	4019      	ands	r1, r3
 8002070:	e5b2      	b.n	8001bd8 <__aeabi_dsub+0xe0>
 8002072:	46b1      	mov	r9, r6
 8002074:	e65d      	b.n	8001d32 <__aeabi_dsub+0x23a>
 8002076:	0033      	movs	r3, r6
 8002078:	4667      	mov	r7, ip
 800207a:	3b20      	subs	r3, #32
 800207c:	40df      	lsrs	r7, r3
 800207e:	003b      	movs	r3, r7
 8002080:	2e20      	cmp	r6, #32
 8002082:	d005      	beq.n	8002090 <__aeabi_dsub+0x598>
 8002084:	2740      	movs	r7, #64	; 0x40
 8002086:	1bbf      	subs	r7, r7, r6
 8002088:	4666      	mov	r6, ip
 800208a:	40be      	lsls	r6, r7
 800208c:	4332      	orrs	r2, r6
 800208e:	4690      	mov	r8, r2
 8002090:	4646      	mov	r6, r8
 8002092:	1e72      	subs	r2, r6, #1
 8002094:	4196      	sbcs	r6, r2
 8002096:	4333      	orrs	r3, r6
 8002098:	e5ef      	b.n	8001c7a <__aeabi_dsub+0x182>
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <__aeabi_dsub+0x688>)
 800209c:	429f      	cmp	r7, r3
 800209e:	d0cb      	beq.n	8002038 <__aeabi_dsub+0x540>
 80020a0:	2580      	movs	r5, #128	; 0x80
 80020a2:	042d      	lsls	r5, r5, #16
 80020a4:	4273      	negs	r3, r6
 80020a6:	4329      	orrs	r1, r5
 80020a8:	e7a8      	b.n	8001ffc <__aeabi_dsub+0x504>
 80020aa:	4308      	orrs	r0, r1
 80020ac:	1e41      	subs	r1, r0, #1
 80020ae:	4188      	sbcs	r0, r1
 80020b0:	e6a2      	b.n	8001df8 <__aeabi_dsub+0x300>
 80020b2:	2f00      	cmp	r7, #0
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x5c0>
 80020b6:	e63c      	b.n	8001d32 <__aeabi_dsub+0x23a>
 80020b8:	4663      	mov	r3, ip
 80020ba:	1a86      	subs	r6, r0, r2
 80020bc:	1acf      	subs	r7, r1, r3
 80020be:	42b0      	cmp	r0, r6
 80020c0:	419b      	sbcs	r3, r3
 80020c2:	425b      	negs	r3, r3
 80020c4:	1afb      	subs	r3, r7, r3
 80020c6:	4698      	mov	r8, r3
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	d54e      	bpl.n	800216a <__aeabi_dsub+0x672>
 80020cc:	1a16      	subs	r6, r2, r0
 80020ce:	4663      	mov	r3, ip
 80020d0:	42b2      	cmp	r2, r6
 80020d2:	4192      	sbcs	r2, r2
 80020d4:	1a59      	subs	r1, r3, r1
 80020d6:	4252      	negs	r2, r2
 80020d8:	1a89      	subs	r1, r1, r2
 80020da:	465c      	mov	r4, fp
 80020dc:	2200      	movs	r2, #0
 80020de:	e57b      	b.n	8001bd8 <__aeabi_dsub+0xe0>
 80020e0:	4301      	orrs	r1, r0
 80020e2:	000e      	movs	r6, r1
 80020e4:	1e71      	subs	r1, r6, #1
 80020e6:	418e      	sbcs	r6, r1
 80020e8:	e79f      	b.n	800202a <__aeabi_dsub+0x532>
 80020ea:	001d      	movs	r5, r3
 80020ec:	000e      	movs	r6, r1
 80020ee:	3d20      	subs	r5, #32
 80020f0:	40ee      	lsrs	r6, r5
 80020f2:	46b0      	mov	r8, r6
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d004      	beq.n	8002102 <__aeabi_dsub+0x60a>
 80020f8:	2540      	movs	r5, #64	; 0x40
 80020fa:	1aeb      	subs	r3, r5, r3
 80020fc:	4099      	lsls	r1, r3
 80020fe:	4308      	orrs	r0, r1
 8002100:	4681      	mov	r9, r0
 8002102:	4648      	mov	r0, r9
 8002104:	4643      	mov	r3, r8
 8002106:	1e41      	subs	r1, r0, #1
 8002108:	4188      	sbcs	r0, r1
 800210a:	4318      	orrs	r0, r3
 800210c:	e674      	b.n	8001df8 <__aeabi_dsub+0x300>
 800210e:	2200      	movs	r2, #0
 8002110:	2400      	movs	r4, #0
 8002112:	e617      	b.n	8001d44 <__aeabi_dsub+0x24c>
 8002114:	1a16      	subs	r6, r2, r0
 8002116:	4663      	mov	r3, ip
 8002118:	42b2      	cmp	r2, r6
 800211a:	4192      	sbcs	r2, r2
 800211c:	1a59      	subs	r1, r3, r1
 800211e:	4252      	negs	r2, r2
 8002120:	1a89      	subs	r1, r1, r2
 8002122:	003d      	movs	r5, r7
 8002124:	e525      	b.n	8001b72 <__aeabi_dsub+0x7a>
 8002126:	4661      	mov	r1, ip
 8002128:	4691      	mov	r9, r2
 800212a:	4d15      	ldr	r5, [pc, #84]	; (8002180 <__aeabi_dsub+0x688>)
 800212c:	e601      	b.n	8001d32 <__aeabi_dsub+0x23a>
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	2400      	movs	r4, #0
 8002132:	0312      	lsls	r2, r2, #12
 8002134:	e679      	b.n	8001e2a <__aeabi_dsub+0x332>
 8002136:	001d      	movs	r5, r3
 8002138:	000e      	movs	r6, r1
 800213a:	3d20      	subs	r5, #32
 800213c:	40ee      	lsrs	r6, r5
 800213e:	46b0      	mov	r8, r6
 8002140:	2b20      	cmp	r3, #32
 8002142:	d004      	beq.n	800214e <__aeabi_dsub+0x656>
 8002144:	2540      	movs	r5, #64	; 0x40
 8002146:	1aeb      	subs	r3, r5, r3
 8002148:	4099      	lsls	r1, r3
 800214a:	4308      	orrs	r0, r1
 800214c:	4681      	mov	r9, r0
 800214e:	464e      	mov	r6, r9
 8002150:	4643      	mov	r3, r8
 8002152:	1e71      	subs	r1, r6, #1
 8002154:	418e      	sbcs	r6, r1
 8002156:	431e      	orrs	r6, r3
 8002158:	e767      	b.n	800202a <__aeabi_dsub+0x532>
 800215a:	1886      	adds	r6, r0, r2
 800215c:	4296      	cmp	r6, r2
 800215e:	419b      	sbcs	r3, r3
 8002160:	4461      	add	r1, ip
 8002162:	425b      	negs	r3, r3
 8002164:	18c9      	adds	r1, r1, r3
 8002166:	003d      	movs	r5, r7
 8002168:	e58c      	b.n	8001c84 <__aeabi_dsub+0x18c>
 800216a:	4647      	mov	r7, r8
 800216c:	4337      	orrs	r7, r6
 800216e:	d0ce      	beq.n	800210e <__aeabi_dsub+0x616>
 8002170:	2207      	movs	r2, #7
 8002172:	4641      	mov	r1, r8
 8002174:	4032      	ands	r2, r6
 8002176:	e649      	b.n	8001e0c <__aeabi_dsub+0x314>
 8002178:	2700      	movs	r7, #0
 800217a:	003a      	movs	r2, r7
 800217c:	e5e6      	b.n	8001d4c <__aeabi_dsub+0x254>
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	000007ff 	.word	0x000007ff
 8002184:	ff7fffff 	.word	0xff7fffff

08002188 <__aeabi_dcmpun>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	4e0c      	ldr	r6, [pc, #48]	; (80021bc <__aeabi_dcmpun+0x34>)
 800218c:	030d      	lsls	r5, r1, #12
 800218e:	031c      	lsls	r4, r3, #12
 8002190:	0049      	lsls	r1, r1, #1
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	0b2d      	lsrs	r5, r5, #12
 8002196:	0d49      	lsrs	r1, r1, #21
 8002198:	0b24      	lsrs	r4, r4, #12
 800219a:	0d5b      	lsrs	r3, r3, #21
 800219c:	42b1      	cmp	r1, r6
 800219e:	d008      	beq.n	80021b2 <__aeabi_dcmpun+0x2a>
 80021a0:	4906      	ldr	r1, [pc, #24]	; (80021bc <__aeabi_dcmpun+0x34>)
 80021a2:	2000      	movs	r0, #0
 80021a4:	428b      	cmp	r3, r1
 80021a6:	d103      	bne.n	80021b0 <__aeabi_dcmpun+0x28>
 80021a8:	4314      	orrs	r4, r2
 80021aa:	0020      	movs	r0, r4
 80021ac:	1e44      	subs	r4, r0, #1
 80021ae:	41a0      	sbcs	r0, r4
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	4305      	orrs	r5, r0
 80021b4:	2001      	movs	r0, #1
 80021b6:	2d00      	cmp	r5, #0
 80021b8:	d1fa      	bne.n	80021b0 <__aeabi_dcmpun+0x28>
 80021ba:	e7f1      	b.n	80021a0 <__aeabi_dcmpun+0x18>
 80021bc:	000007ff 	.word	0x000007ff

080021c0 <__aeabi_d2iz>:
 80021c0:	b530      	push	{r4, r5, lr}
 80021c2:	4d14      	ldr	r5, [pc, #80]	; (8002214 <__aeabi_d2iz+0x54>)
 80021c4:	030a      	lsls	r2, r1, #12
 80021c6:	004b      	lsls	r3, r1, #1
 80021c8:	0b12      	lsrs	r2, r2, #12
 80021ca:	0d5b      	lsrs	r3, r3, #21
 80021cc:	0fc9      	lsrs	r1, r1, #31
 80021ce:	2400      	movs	r4, #0
 80021d0:	42ab      	cmp	r3, r5
 80021d2:	dd11      	ble.n	80021f8 <__aeabi_d2iz+0x38>
 80021d4:	4c10      	ldr	r4, [pc, #64]	; (8002218 <__aeabi_d2iz+0x58>)
 80021d6:	42a3      	cmp	r3, r4
 80021d8:	dc10      	bgt.n	80021fc <__aeabi_d2iz+0x3c>
 80021da:	2480      	movs	r4, #128	; 0x80
 80021dc:	0364      	lsls	r4, r4, #13
 80021de:	4322      	orrs	r2, r4
 80021e0:	4c0e      	ldr	r4, [pc, #56]	; (800221c <__aeabi_d2iz+0x5c>)
 80021e2:	1ae4      	subs	r4, r4, r3
 80021e4:	2c1f      	cmp	r4, #31
 80021e6:	dd0c      	ble.n	8002202 <__aeabi_d2iz+0x42>
 80021e8:	480d      	ldr	r0, [pc, #52]	; (8002220 <__aeabi_d2iz+0x60>)
 80021ea:	1ac3      	subs	r3, r0, r3
 80021ec:	40da      	lsrs	r2, r3
 80021ee:	0013      	movs	r3, r2
 80021f0:	425c      	negs	r4, r3
 80021f2:	2900      	cmp	r1, #0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_d2iz+0x38>
 80021f6:	001c      	movs	r4, r3
 80021f8:	0020      	movs	r0, r4
 80021fa:	bd30      	pop	{r4, r5, pc}
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <__aeabi_d2iz+0x64>)
 80021fe:	18cc      	adds	r4, r1, r3
 8002200:	e7fa      	b.n	80021f8 <__aeabi_d2iz+0x38>
 8002202:	4d09      	ldr	r5, [pc, #36]	; (8002228 <__aeabi_d2iz+0x68>)
 8002204:	40e0      	lsrs	r0, r4
 8002206:	46ac      	mov	ip, r5
 8002208:	4463      	add	r3, ip
 800220a:	409a      	lsls	r2, r3
 800220c:	0013      	movs	r3, r2
 800220e:	4303      	orrs	r3, r0
 8002210:	e7ee      	b.n	80021f0 <__aeabi_d2iz+0x30>
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	000003fe 	.word	0x000003fe
 8002218:	0000041d 	.word	0x0000041d
 800221c:	00000433 	.word	0x00000433
 8002220:	00000413 	.word	0x00000413
 8002224:	7fffffff 	.word	0x7fffffff
 8002228:	fffffbed 	.word	0xfffffbed

0800222c <__aeabi_i2d>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	2800      	cmp	r0, #0
 8002230:	d02d      	beq.n	800228e <__aeabi_i2d+0x62>
 8002232:	17c3      	asrs	r3, r0, #31
 8002234:	18c5      	adds	r5, r0, r3
 8002236:	405d      	eors	r5, r3
 8002238:	0fc4      	lsrs	r4, r0, #31
 800223a:	0028      	movs	r0, r5
 800223c:	f000 f938 	bl	80024b0 <__clzsi2>
 8002240:	4b15      	ldr	r3, [pc, #84]	; (8002298 <__aeabi_i2d+0x6c>)
 8002242:	1a1b      	subs	r3, r3, r0
 8002244:	055b      	lsls	r3, r3, #21
 8002246:	0d5b      	lsrs	r3, r3, #21
 8002248:	280a      	cmp	r0, #10
 800224a:	dd15      	ble.n	8002278 <__aeabi_i2d+0x4c>
 800224c:	380b      	subs	r0, #11
 800224e:	4085      	lsls	r5, r0
 8002250:	2200      	movs	r2, #0
 8002252:	032d      	lsls	r5, r5, #12
 8002254:	0b2d      	lsrs	r5, r5, #12
 8002256:	2100      	movs	r1, #0
 8002258:	0010      	movs	r0, r2
 800225a:	032d      	lsls	r5, r5, #12
 800225c:	0d0a      	lsrs	r2, r1, #20
 800225e:	0b2d      	lsrs	r5, r5, #12
 8002260:	0512      	lsls	r2, r2, #20
 8002262:	432a      	orrs	r2, r5
 8002264:	4d0d      	ldr	r5, [pc, #52]	; (800229c <__aeabi_i2d+0x70>)
 8002266:	051b      	lsls	r3, r3, #20
 8002268:	402a      	ands	r2, r5
 800226a:	4313      	orrs	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	07e4      	lsls	r4, r4, #31
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	4323      	orrs	r3, r4
 8002274:	0019      	movs	r1, r3
 8002276:	bd70      	pop	{r4, r5, r6, pc}
 8002278:	0002      	movs	r2, r0
 800227a:	0029      	movs	r1, r5
 800227c:	3215      	adds	r2, #21
 800227e:	4091      	lsls	r1, r2
 8002280:	000a      	movs	r2, r1
 8002282:	210b      	movs	r1, #11
 8002284:	1a08      	subs	r0, r1, r0
 8002286:	40c5      	lsrs	r5, r0
 8002288:	032d      	lsls	r5, r5, #12
 800228a:	0b2d      	lsrs	r5, r5, #12
 800228c:	e7e3      	b.n	8002256 <__aeabi_i2d+0x2a>
 800228e:	2400      	movs	r4, #0
 8002290:	2300      	movs	r3, #0
 8002292:	2500      	movs	r5, #0
 8002294:	2200      	movs	r2, #0
 8002296:	e7de      	b.n	8002256 <__aeabi_i2d+0x2a>
 8002298:	0000041e 	.word	0x0000041e
 800229c:	800fffff 	.word	0x800fffff

080022a0 <__aeabi_ui2d>:
 80022a0:	b510      	push	{r4, lr}
 80022a2:	1e04      	subs	r4, r0, #0
 80022a4:	d025      	beq.n	80022f2 <__aeabi_ui2d+0x52>
 80022a6:	f000 f903 	bl	80024b0 <__clzsi2>
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <__aeabi_ui2d+0x5c>)
 80022ac:	1a1b      	subs	r3, r3, r0
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	0d5b      	lsrs	r3, r3, #21
 80022b2:	280a      	cmp	r0, #10
 80022b4:	dd12      	ble.n	80022dc <__aeabi_ui2d+0x3c>
 80022b6:	380b      	subs	r0, #11
 80022b8:	4084      	lsls	r4, r0
 80022ba:	2200      	movs	r2, #0
 80022bc:	0324      	lsls	r4, r4, #12
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	2100      	movs	r1, #0
 80022c2:	0010      	movs	r0, r2
 80022c4:	0324      	lsls	r4, r4, #12
 80022c6:	0d0a      	lsrs	r2, r1, #20
 80022c8:	0b24      	lsrs	r4, r4, #12
 80022ca:	0512      	lsls	r2, r2, #20
 80022cc:	4322      	orrs	r2, r4
 80022ce:	4c0c      	ldr	r4, [pc, #48]	; (8002300 <__aeabi_ui2d+0x60>)
 80022d0:	051b      	lsls	r3, r3, #20
 80022d2:	4022      	ands	r2, r4
 80022d4:	4313      	orrs	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	0859      	lsrs	r1, r3, #1
 80022da:	bd10      	pop	{r4, pc}
 80022dc:	0002      	movs	r2, r0
 80022de:	0021      	movs	r1, r4
 80022e0:	3215      	adds	r2, #21
 80022e2:	4091      	lsls	r1, r2
 80022e4:	000a      	movs	r2, r1
 80022e6:	210b      	movs	r1, #11
 80022e8:	1a08      	subs	r0, r1, r0
 80022ea:	40c4      	lsrs	r4, r0
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	0b24      	lsrs	r4, r4, #12
 80022f0:	e7e6      	b.n	80022c0 <__aeabi_ui2d+0x20>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2400      	movs	r4, #0
 80022f6:	2200      	movs	r2, #0
 80022f8:	e7e2      	b.n	80022c0 <__aeabi_ui2d+0x20>
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	0000041e 	.word	0x0000041e
 8002300:	800fffff 	.word	0x800fffff

08002304 <__aeabi_f2d>:
 8002304:	0041      	lsls	r1, r0, #1
 8002306:	0e09      	lsrs	r1, r1, #24
 8002308:	1c4b      	adds	r3, r1, #1
 800230a:	b570      	push	{r4, r5, r6, lr}
 800230c:	b2db      	uxtb	r3, r3
 800230e:	0246      	lsls	r6, r0, #9
 8002310:	0a75      	lsrs	r5, r6, #9
 8002312:	0fc4      	lsrs	r4, r0, #31
 8002314:	2b01      	cmp	r3, #1
 8002316:	dd14      	ble.n	8002342 <__aeabi_f2d+0x3e>
 8002318:	23e0      	movs	r3, #224	; 0xe0
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	076d      	lsls	r5, r5, #29
 800231e:	0b36      	lsrs	r6, r6, #12
 8002320:	18cb      	adds	r3, r1, r3
 8002322:	2100      	movs	r1, #0
 8002324:	0d0a      	lsrs	r2, r1, #20
 8002326:	0028      	movs	r0, r5
 8002328:	0512      	lsls	r2, r2, #20
 800232a:	4d1c      	ldr	r5, [pc, #112]	; (800239c <__aeabi_f2d+0x98>)
 800232c:	4332      	orrs	r2, r6
 800232e:	055b      	lsls	r3, r3, #21
 8002330:	402a      	ands	r2, r5
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	4313      	orrs	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	07e4      	lsls	r4, r4, #31
 800233a:	085b      	lsrs	r3, r3, #1
 800233c:	4323      	orrs	r3, r4
 800233e:	0019      	movs	r1, r3
 8002340:	bd70      	pop	{r4, r5, r6, pc}
 8002342:	2900      	cmp	r1, #0
 8002344:	d114      	bne.n	8002370 <__aeabi_f2d+0x6c>
 8002346:	2d00      	cmp	r5, #0
 8002348:	d01e      	beq.n	8002388 <__aeabi_f2d+0x84>
 800234a:	0028      	movs	r0, r5
 800234c:	f000 f8b0 	bl	80024b0 <__clzsi2>
 8002350:	280a      	cmp	r0, #10
 8002352:	dc1c      	bgt.n	800238e <__aeabi_f2d+0x8a>
 8002354:	230b      	movs	r3, #11
 8002356:	002a      	movs	r2, r5
 8002358:	1a1b      	subs	r3, r3, r0
 800235a:	40da      	lsrs	r2, r3
 800235c:	0003      	movs	r3, r0
 800235e:	3315      	adds	r3, #21
 8002360:	409d      	lsls	r5, r3
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <__aeabi_f2d+0x9c>)
 8002364:	0312      	lsls	r2, r2, #12
 8002366:	1a1b      	subs	r3, r3, r0
 8002368:	055b      	lsls	r3, r3, #21
 800236a:	0b16      	lsrs	r6, r2, #12
 800236c:	0d5b      	lsrs	r3, r3, #21
 800236e:	e7d8      	b.n	8002322 <__aeabi_f2d+0x1e>
 8002370:	2d00      	cmp	r5, #0
 8002372:	d006      	beq.n	8002382 <__aeabi_f2d+0x7e>
 8002374:	0b32      	lsrs	r2, r6, #12
 8002376:	2680      	movs	r6, #128	; 0x80
 8002378:	0336      	lsls	r6, r6, #12
 800237a:	076d      	lsls	r5, r5, #29
 800237c:	4316      	orrs	r6, r2
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <__aeabi_f2d+0xa0>)
 8002380:	e7cf      	b.n	8002322 <__aeabi_f2d+0x1e>
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <__aeabi_f2d+0xa0>)
 8002384:	2600      	movs	r6, #0
 8002386:	e7cc      	b.n	8002322 <__aeabi_f2d+0x1e>
 8002388:	2300      	movs	r3, #0
 800238a:	2600      	movs	r6, #0
 800238c:	e7c9      	b.n	8002322 <__aeabi_f2d+0x1e>
 800238e:	0003      	movs	r3, r0
 8002390:	002a      	movs	r2, r5
 8002392:	3b0b      	subs	r3, #11
 8002394:	409a      	lsls	r2, r3
 8002396:	2500      	movs	r5, #0
 8002398:	e7e3      	b.n	8002362 <__aeabi_f2d+0x5e>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	800fffff 	.word	0x800fffff
 80023a0:	00000389 	.word	0x00000389
 80023a4:	000007ff 	.word	0x000007ff

080023a8 <__aeabi_d2f>:
 80023a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023aa:	004c      	lsls	r4, r1, #1
 80023ac:	0d64      	lsrs	r4, r4, #21
 80023ae:	030b      	lsls	r3, r1, #12
 80023b0:	1c62      	adds	r2, r4, #1
 80023b2:	0a5b      	lsrs	r3, r3, #9
 80023b4:	0f46      	lsrs	r6, r0, #29
 80023b6:	0552      	lsls	r2, r2, #21
 80023b8:	0fc9      	lsrs	r1, r1, #31
 80023ba:	431e      	orrs	r6, r3
 80023bc:	00c5      	lsls	r5, r0, #3
 80023be:	0d52      	lsrs	r2, r2, #21
 80023c0:	2a01      	cmp	r2, #1
 80023c2:	dd29      	ble.n	8002418 <__aeabi_d2f+0x70>
 80023c4:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <__aeabi_d2f+0xfc>)
 80023c6:	18e7      	adds	r7, r4, r3
 80023c8:	2ffe      	cmp	r7, #254	; 0xfe
 80023ca:	dc1c      	bgt.n	8002406 <__aeabi_d2f+0x5e>
 80023cc:	2f00      	cmp	r7, #0
 80023ce:	dd3b      	ble.n	8002448 <__aeabi_d2f+0xa0>
 80023d0:	0180      	lsls	r0, r0, #6
 80023d2:	1e43      	subs	r3, r0, #1
 80023d4:	4198      	sbcs	r0, r3
 80023d6:	2207      	movs	r2, #7
 80023d8:	00f3      	lsls	r3, r6, #3
 80023da:	0f6d      	lsrs	r5, r5, #29
 80023dc:	4303      	orrs	r3, r0
 80023de:	432b      	orrs	r3, r5
 80023e0:	401a      	ands	r2, r3
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d004      	beq.n	80023f0 <__aeabi_d2f+0x48>
 80023e6:	220f      	movs	r2, #15
 80023e8:	401a      	ands	r2, r3
 80023ea:	2a04      	cmp	r2, #4
 80023ec:	d000      	beq.n	80023f0 <__aeabi_d2f+0x48>
 80023ee:	3304      	adds	r3, #4
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	04d2      	lsls	r2, r2, #19
 80023f4:	401a      	ands	r2, r3
 80023f6:	d024      	beq.n	8002442 <__aeabi_d2f+0x9a>
 80023f8:	3701      	adds	r7, #1
 80023fa:	b2fa      	uxtb	r2, r7
 80023fc:	2fff      	cmp	r7, #255	; 0xff
 80023fe:	d002      	beq.n	8002406 <__aeabi_d2f+0x5e>
 8002400:	019b      	lsls	r3, r3, #6
 8002402:	0a58      	lsrs	r0, r3, #9
 8002404:	e001      	b.n	800240a <__aeabi_d2f+0x62>
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	2000      	movs	r0, #0
 800240a:	0240      	lsls	r0, r0, #9
 800240c:	05d2      	lsls	r2, r2, #23
 800240e:	0a40      	lsrs	r0, r0, #9
 8002410:	07c9      	lsls	r1, r1, #31
 8002412:	4310      	orrs	r0, r2
 8002414:	4308      	orrs	r0, r1
 8002416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002418:	4335      	orrs	r5, r6
 800241a:	2c00      	cmp	r4, #0
 800241c:	d104      	bne.n	8002428 <__aeabi_d2f+0x80>
 800241e:	2d00      	cmp	r5, #0
 8002420:	d10a      	bne.n	8002438 <__aeabi_d2f+0x90>
 8002422:	2200      	movs	r2, #0
 8002424:	2000      	movs	r0, #0
 8002426:	e7f0      	b.n	800240a <__aeabi_d2f+0x62>
 8002428:	2d00      	cmp	r5, #0
 800242a:	d0ec      	beq.n	8002406 <__aeabi_d2f+0x5e>
 800242c:	2080      	movs	r0, #128	; 0x80
 800242e:	03c0      	lsls	r0, r0, #15
 8002430:	4330      	orrs	r0, r6
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	e7e9      	b.n	800240a <__aeabi_d2f+0x62>
 8002436:	2400      	movs	r4, #0
 8002438:	2300      	movs	r3, #0
 800243a:	025b      	lsls	r3, r3, #9
 800243c:	0a58      	lsrs	r0, r3, #9
 800243e:	b2e2      	uxtb	r2, r4
 8002440:	e7e3      	b.n	800240a <__aeabi_d2f+0x62>
 8002442:	08db      	lsrs	r3, r3, #3
 8002444:	003c      	movs	r4, r7
 8002446:	e7f8      	b.n	800243a <__aeabi_d2f+0x92>
 8002448:	003b      	movs	r3, r7
 800244a:	3317      	adds	r3, #23
 800244c:	dbf3      	blt.n	8002436 <__aeabi_d2f+0x8e>
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	4333      	orrs	r3, r6
 8002454:	261e      	movs	r6, #30
 8002456:	1bf6      	subs	r6, r6, r7
 8002458:	2e1f      	cmp	r6, #31
 800245a:	dd14      	ble.n	8002486 <__aeabi_d2f+0xde>
 800245c:	2202      	movs	r2, #2
 800245e:	4252      	negs	r2, r2
 8002460:	1bd7      	subs	r7, r2, r7
 8002462:	001a      	movs	r2, r3
 8002464:	40fa      	lsrs	r2, r7
 8002466:	0017      	movs	r7, r2
 8002468:	2e20      	cmp	r6, #32
 800246a:	d004      	beq.n	8002476 <__aeabi_d2f+0xce>
 800246c:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <__aeabi_d2f+0x100>)
 800246e:	4694      	mov	ip, r2
 8002470:	4464      	add	r4, ip
 8002472:	40a3      	lsls	r3, r4
 8002474:	431d      	orrs	r5, r3
 8002476:	002b      	movs	r3, r5
 8002478:	1e5d      	subs	r5, r3, #1
 800247a:	41ab      	sbcs	r3, r5
 800247c:	2207      	movs	r2, #7
 800247e:	433b      	orrs	r3, r7
 8002480:	401a      	ands	r2, r3
 8002482:	2700      	movs	r7, #0
 8002484:	e7ad      	b.n	80023e2 <__aeabi_d2f+0x3a>
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <__aeabi_d2f+0x104>)
 8002488:	0028      	movs	r0, r5
 800248a:	18a2      	adds	r2, r4, r2
 800248c:	4095      	lsls	r5, r2
 800248e:	4093      	lsls	r3, r2
 8002490:	1e6c      	subs	r4, r5, #1
 8002492:	41a5      	sbcs	r5, r4
 8002494:	40f0      	lsrs	r0, r6
 8002496:	2207      	movs	r2, #7
 8002498:	432b      	orrs	r3, r5
 800249a:	4303      	orrs	r3, r0
 800249c:	401a      	ands	r2, r3
 800249e:	2700      	movs	r7, #0
 80024a0:	e79f      	b.n	80023e2 <__aeabi_d2f+0x3a>
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	fffffc80 	.word	0xfffffc80
 80024a8:	fffffca2 	.word	0xfffffca2
 80024ac:	fffffc82 	.word	0xfffffc82

080024b0 <__clzsi2>:
 80024b0:	211c      	movs	r1, #28
 80024b2:	2301      	movs	r3, #1
 80024b4:	041b      	lsls	r3, r3, #16
 80024b6:	4298      	cmp	r0, r3
 80024b8:	d301      	bcc.n	80024be <__clzsi2+0xe>
 80024ba:	0c00      	lsrs	r0, r0, #16
 80024bc:	3910      	subs	r1, #16
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	4298      	cmp	r0, r3
 80024c2:	d301      	bcc.n	80024c8 <__clzsi2+0x18>
 80024c4:	0a00      	lsrs	r0, r0, #8
 80024c6:	3908      	subs	r1, #8
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	4298      	cmp	r0, r3
 80024cc:	d301      	bcc.n	80024d2 <__clzsi2+0x22>
 80024ce:	0900      	lsrs	r0, r0, #4
 80024d0:	3904      	subs	r1, #4
 80024d2:	a202      	add	r2, pc, #8	; (adr r2, 80024dc <__clzsi2+0x2c>)
 80024d4:	5c10      	ldrb	r0, [r2, r0]
 80024d6:	1840      	adds	r0, r0, r1
 80024d8:	4770      	bx	lr
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	02020304 	.word	0x02020304
 80024e0:	01010101 	.word	0x01010101
	...

080024ec <minArr>:
 -----------------------------------------------------------------------
 */

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
 */
uint8_t minArr(uint8_t *arr, uint8_t *Q) {
 80024ec:	b570      	push	{r4, r5, r6, lr}
	uint8_t smallest = 0xFF;
	uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 80024ee:	780b      	ldrb	r3, [r1, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <minArr+0x10>
		smallest = arr[0];
 80024f4:	7804      	ldrb	r4, [r0, #0]

	for (int i = 0; i < N; i++) {
		if ((arr[i] < smallest) && !Q[i]) {
			smallest = arr[i];
 80024f6:	2300      	movs	r3, #0
 80024f8:	2600      	movs	r6, #0
 80024fa:	e002      	b.n	8002502 <minArr+0x16>
	uint8_t smallest = 0xFF;
 80024fc:	24ff      	movs	r4, #255	; 0xff
 80024fe:	e7fa      	b.n	80024f6 <minArr+0xa>
	for (int i = 0; i < N; i++) {
 8002500:	3301      	adds	r3, #1
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <minArr+0x34>)
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	dd08      	ble.n	800251c <minArr+0x30>
		if ((arr[i] < smallest) && !Q[i]) {
 800250a:	5cc2      	ldrb	r2, [r0, r3]
 800250c:	42a2      	cmp	r2, r4
 800250e:	d2f7      	bcs.n	8002500 <minArr+0x14>
 8002510:	5ccd      	ldrb	r5, [r1, r3]
 8002512:	2d00      	cmp	r5, #0
 8002514:	d1f4      	bne.n	8002500 <minArr+0x14>
			index = i;
 8002516:	b2de      	uxtb	r6, r3
			smallest = arr[i];
 8002518:	0014      	movs	r4, r2
 800251a:	e7f1      	b.n	8002500 <minArr+0x14>
		}
	}

	return index;
}
 800251c:	0030      	movs	r0, r6
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	2000001c 	.word	0x2000001c

08002524 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
 */
uint8_t QnotEmpty(uint8_t *Q) {
	char temp = 1;

	for (int i = 0; i < N; i++) {
 8002524:	2300      	movs	r3, #0
	char temp = 1;
 8002526:	2201      	movs	r2, #1
	for (int i = 0; i < N; i++) {
 8002528:	e002      	b.n	8002530 <QnotEmpty+0xc>
		temp &= Q[i];
 800252a:	5cc1      	ldrb	r1, [r0, r3]
 800252c:	400a      	ands	r2, r1
	for (int i = 0; i < N; i++) {
 800252e:	3301      	adds	r3, #1
 8002530:	4902      	ldr	r1, [pc, #8]	; (800253c <QnotEmpty+0x18>)
 8002532:	7809      	ldrb	r1, [r1, #0]
 8002534:	4299      	cmp	r1, r3
 8002536:	dcf8      	bgt.n	800252a <QnotEmpty+0x6>
	}

	return temp;
}
 8002538:	0010      	movs	r0, r2
 800253a:	4770      	bx	lr
 800253c:	2000001c 	.word	0x2000001c

08002540 <LoadROsnippets>:

/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
 */
uint8_t LoadROsnippets(void) {
 8002540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002542:	46d6      	mov	lr, sl
 8002544:	464f      	mov	r7, r9
 8002546:	b580      	push	{r7, lr}
 8002548:	b083      	sub	sp, #12
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char*) malloc(cmdMAX_INPUT_SIZE);
 800254a:	2032      	movs	r0, #50	; 0x32
 800254c:	f010 ff0c 	bl	8013368 <malloc>
 8002550:	1e07      	subs	r7, r0, #0
	if (snipBuffer == NULL)
 8002552:	d065      	beq.n	8002620 <LoadROsnippets+0xe0>
		return BOS_MEM_FULL;

	// Exit if no recorded Snippets
	if (*(uint8_t*) currentAdd != 0xFE)
 8002554:	4b36      	ldr	r3, [pc, #216]	; (8002630 <LoadROsnippets+0xf0>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2bfe      	cmp	r3, #254	; 0xfe
 800255a:	d163      	bne.n	8002624 <LoadROsnippets+0xe4>
		return BOS_ERROR;

	/* Load Snippets */
	for (uint8_t s = 0; s < MAX_SNIPPETS; s++) {
 800255c:	2600      	movs	r6, #0
	int currentAdd = RO_MID_ADDRESS;
 800255e:	4c34      	ldr	r4, [pc, #208]	; (8002630 <LoadROsnippets+0xf0>)
 8002560:	e04b      	b.n	80025fa <LoadROsnippets+0xba>
		// Load conditions starting at RO_MID_ADDRESS
		for (i = 0; i < sizeof(snippet_t); i++)
			snipBuffer[i] = (*(__IO uint8_t*) (currentAdd++));
 8002562:	7822      	ldrb	r2, [r4, #0]
 8002564:	54fa      	strb	r2, [r7, r3]
		for (i = 0; i < sizeof(snippet_t); i++)
 8002566:	3301      	adds	r3, #1
 8002568:	b2db      	uxtb	r3, r3
			snipBuffer[i] = (*(__IO uint8_t*) (currentAdd++));
 800256a:	3401      	adds	r4, #1
		for (i = 0; i < sizeof(snippet_t); i++)
 800256c:	2b13      	cmp	r3, #19
 800256e:	d9f8      	bls.n	8002562 <LoadROsnippets+0x22>
		memcpy((uint8_t*) &snippets[s], (uint8_t*) &snipBuffer[1],
 8002570:	46b2      	mov	sl, r6
 8002572:	00b3      	lsls	r3, r6, #2
 8002574:	199b      	adds	r3, r3, r6
 8002576:	009a      	lsls	r2, r3, #2
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <LoadROsnippets+0xf4>)
 800257a:	4691      	mov	r9, r2
 800257c:	4499      	add	r9, r3
 800257e:	1c79      	adds	r1, r7, #1
 8002580:	2214      	movs	r2, #20
 8002582:	4648      	mov	r0, r9
 8002584:	f010 ff25 	bl	80133d2 <memcpy>
				sizeof(snippet_t));
		memset(snipBuffer, 0, sizeof(snippet_t));
 8002588:	2214      	movs	r2, #20
 800258a:	2100      	movs	r1, #0
 800258c:	0038      	movs	r0, r7
 800258e:	f010 ff29 	bl	80133e4 <memset>
		i = 0;
 8002592:	2500      	movs	r5, #0
		// Load commands until you get next 0xFE
		while (*(uint8_t*) currentAdd != 0xFE && *(uint8_t*) currentAdd != 0xFF
 8002594:	e003      	b.n	800259e <LoadROsnippets+0x5e>
				&& i < cmdMAX_INPUT_SIZE) {
			snipBuffer[i] = *(uint8_t*) currentAdd;
 8002596:	557a      	strb	r2, [r7, r5]
			++currentAdd;
 8002598:	3401      	adds	r4, #1
			++i;
 800259a:	3501      	adds	r5, #1
 800259c:	b2ed      	uxtb	r5, r5
		while (*(uint8_t*) currentAdd != 0xFE && *(uint8_t*) currentAdd != 0xFF
 800259e:	9401      	str	r4, [sp, #4]
 80025a0:	7822      	ldrb	r2, [r4, #0]
 80025a2:	1c93      	adds	r3, r2, #2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d901      	bls.n	80025ae <LoadROsnippets+0x6e>
				&& i < cmdMAX_INPUT_SIZE) {
 80025aa:	2d31      	cmp	r5, #49	; 0x31
 80025ac:	d9f3      	bls.n	8002596 <LoadROsnippets+0x56>
		}
		if (snipBuffer[i - 1] != 0)
 80025ae:	197b      	adds	r3, r7, r5
 80025b0:	3b01      	subs	r3, #1
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <LoadROsnippets+0x7c>
			++i;	// String termination char was not recorded, then add one
 80025b8:	3501      	adds	r5, #1
 80025ba:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd = (char*) malloc(i);
 80025bc:	0028      	movs	r0, r5
 80025be:	f010 fed3 	bl	8013368 <malloc>
 80025c2:	4653      	mov	r3, sl
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4453      	add	r3, sl
 80025c8:	009a      	lsls	r2, r3, #2
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <LoadROsnippets+0xf4>)
 80025cc:	189b      	adds	r3, r3, r2
 80025ce:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d016      	beq.n	8002602 <LoadROsnippets+0xc2>
			memset(&snippets[s], 0, sizeof(snippet_t));
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		} else {
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
 80025d4:	002a      	movs	r2, r5
 80025d6:	0039      	movs	r1, r7
 80025d8:	f010 fefb 	bl	80133d2 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80025dc:	4a16      	ldr	r2, [pc, #88]	; (8002638 <LoadROsnippets+0xf8>)
 80025de:	7813      	ldrb	r3, [r2, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);
 80025e4:	002a      	movs	r2, r5
 80025e6:	2100      	movs	r1, #0
 80025e8:	0038      	movs	r0, r7
 80025ea:	f010 fefb 	bl	80133e4 <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t*) currentAdd != 0xFE)
 80025ee:	9b01      	ldr	r3, [sp, #4]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2bfe      	cmp	r3, #254	; 0xfe
 80025f4:	d10f      	bne.n	8002616 <LoadROsnippets+0xd6>
	for (uint8_t s = 0; s < MAX_SNIPPETS; s++) {
 80025f6:	3601      	adds	r6, #1
 80025f8:	b2f6      	uxtb	r6, r6
 80025fa:	2e04      	cmp	r6, #4
 80025fc:	d80b      	bhi.n	8002616 <LoadROsnippets+0xd6>
		for (i = 0; i < sizeof(snippet_t); i++)
 80025fe:	2300      	movs	r3, #0
 8002600:	e7b4      	b.n	800256c <LoadROsnippets+0x2c>
			memset(&snippets[s], 0, sizeof(snippet_t));
 8002602:	2214      	movs	r2, #20
 8002604:	2100      	movs	r1, #0
 8002606:	4648      	mov	r0, r9
 8002608:	f010 feec 	bl	80133e4 <memset>
			free(snipBuffer);
 800260c:	0038      	movs	r0, r7
 800260e:	f010 feb5 	bl	801337c <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8002612:	200e      	movs	r0, #14
 8002614:	e007      	b.n	8002626 <LoadROsnippets+0xe6>
			break;
	}

	free(snipBuffer);
 8002616:	0038      	movs	r0, r7
 8002618:	f010 feb0 	bl	801337c <free>
	return BOS_OK;
 800261c:	2000      	movs	r0, #0
 800261e:	e002      	b.n	8002626 <LoadROsnippets+0xe6>
		return BOS_MEM_FULL;
 8002620:	20fb      	movs	r0, #251	; 0xfb
 8002622:	e000      	b.n	8002626 <LoadROsnippets+0xe6>
		return BOS_ERROR;
 8002624:	20ff      	movs	r0, #255	; 0xff
}
 8002626:	b003      	add	sp, #12
 8002628:	bc0c      	pop	{r2, r3}
 800262a:	4691      	mov	r9, r2
 800262c:	469a      	mov	sl, r3
 800262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002630:	0801dc00 	.word	0x0801dc00
 8002634:	20006164 	.word	0x20006164
 8002638:	20000a37 	.word	0x20000a37

0800263c <LoadROtopology>:

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- 
 */
uint8_t LoadROtopology(void) {
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK;
	uint16_t add = 2, temp = 0;

	/* Load number of modules */
	temp = (*(__IO uint16_t*) (RO_START_ADDRESS));
 8002640:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <LoadROtopology+0x88>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3

	if (temp == 0xFFFF)				// Memory has been erased
 8002646:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <LoadROtopology+0x8c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00b      	beq.n	8002664 <LoadROtopology+0x28>
			{
		N = 1;
		myID = 0;
		return BOS_MEM_ERASED;
	} else {
		N = (uint8_t) (temp >> 8);
 800264c:	0a1a      	lsrs	r2, r3, #8
 800264e:	491f      	ldr	r1, [pc, #124]	; (80026cc <LoadROtopology+0x90>)
 8002650:	700a      	strb	r2, [r1, #0]
		if (N == 0)
 8002652:	d102      	bne.n	800265a <LoadROtopology+0x1e>
			N = 1;
 8002654:	000a      	movs	r2, r1
 8002656:	2101      	movs	r1, #1
 8002658:	7011      	strb	r1, [r2, #0]
		myID = (uint8_t) temp;
 800265a:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <LoadROtopology+0x94>)
 800265c:	7013      	strb	r3, [r2, #0]

		/* Load topology */
		for (uint8_t i = 1; i <= N; i++) {
 800265e:	2401      	movs	r4, #1
	uint16_t add = 2, temp = 0;
 8002660:	2002      	movs	r0, #2
		for (uint8_t i = 1; i <= N; i++) {
 8002662:	e023      	b.n	80026ac <LoadROtopology+0x70>
		N = 1;
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <LoadROtopology+0x90>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
		myID = 0;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <LoadROtopology+0x94>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002670:	20fa      	movs	r0, #250	; 0xfa
 8002672:	e024      	b.n	80026be <LoadROtopology+0x82>
			for (volatile uint8_t j = 0; j <= MaxNumOfPorts; j++) {
				array[i - 1][j] = (*(__IO uint16_t*) (RO_START_ADDRESS + add));
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <LoadROtopology+0x88>)
 8002676:	18c3      	adds	r3, r0, r3
 8002678:	1e65      	subs	r5, r4, #1
 800267a:	466a      	mov	r2, sp
 800267c:	79d1      	ldrb	r1, [r2, #7]
 800267e:	881e      	ldrh	r6, [r3, #0]
 8002680:	00ab      	lsls	r3, r5, #2
 8002682:	195b      	adds	r3, r3, r5
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	195b      	adds	r3, r3, r5
 8002688:	18cb      	adds	r3, r1, r3
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4911      	ldr	r1, [pc, #68]	; (80026d4 <LoadROtopology+0x98>)
 800268e:	52ce      	strh	r6, [r1, r3]
				add += 2;
 8002690:	3002      	adds	r0, #2
 8002692:	b280      	uxth	r0, r0
			for (volatile uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8002694:	79d3      	ldrb	r3, [r2, #7]
 8002696:	3301      	adds	r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	71d3      	strb	r3, [r2, #7]
 800269c:	466b      	mov	r3, sp
 800269e:	3307      	adds	r3, #7
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b0a      	cmp	r3, #10
 80026a6:	d9e5      	bls.n	8002674 <LoadROtopology+0x38>
		for (uint8_t i = 1; i <= N; i++) {
 80026a8:	3401      	adds	r4, #1
 80026aa:	b2e4      	uxtb	r4, r4
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <LoadROtopology+0x90>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	42a3      	cmp	r3, r4
 80026b2:	d303      	bcc.n	80026bc <LoadROtopology+0x80>
			for (volatile uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 80026b4:	466b      	mov	r3, sp
 80026b6:	2200      	movs	r2, #0
 80026b8:	71da      	strb	r2, [r3, #7]
 80026ba:	e7ef      	b.n	800269c <LoadROtopology+0x60>
			}
		}
	}

	return result;
 80026bc:	2000      	movs	r0, #0
}
 80026be:	b002      	add	sp, #8
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	0801d800 	.word	0x0801d800
 80026c8:	0000ffff 	.word	0x0000ffff
 80026cc:	2000001c 	.word	0x2000001c
 80026d0:	20000896 	.word	0x20000896
 80026d4:	200002d0 	.word	0x200002d0

080026d8 <SaveEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Save array ports directions in EEPROM ---
 */
BOS_Status SaveEEportsDir(void) {
 80026d8:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;

	for (uint8_t i = 1; i <= N; i++) {
 80026da:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 80026dc:	2600      	movs	r6, #0
	for (uint8_t i = 1; i <= N; i++) {
 80026de:	e005      	b.n	80026ec <SaveEEportsDir+0x14>
		if (arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1, arrayPortsDir[i - 1]);
 80026e0:	1c60      	adds	r0, r4, #1
 80026e2:	f004 fb51 	bl	8006d88 <EE_WriteVariable>
 80026e6:	e00c      	b.n	8002702 <SaveEEportsDir+0x2a>
	for (uint8_t i = 1; i <= N; i++) {
 80026e8:	3401      	adds	r4, #1
 80026ea:	b2e4      	uxtb	r4, r4
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <SaveEEportsDir+0x38>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	42a3      	cmp	r3, r4
 80026f2:	d30b      	bcc.n	800270c <SaveEEportsDir+0x34>
		if (arrayPortsDir[i - 1])
 80026f4:	0025      	movs	r5, r4
 80026f6:	1e63      	subs	r3, r4, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4a06      	ldr	r2, [pc, #24]	; (8002714 <SaveEEportsDir+0x3c>)
 80026fc:	5a99      	ldrh	r1, [r3, r2]
 80026fe:	2900      	cmp	r1, #0
 8002700:	d1ee      	bne.n	80026e0 <SaveEEportsDir+0x8>

		if ((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002702:	3502      	adds	r5, #2
 8002704:	2d1b      	cmp	r5, #27
 8002706:	ddef      	ble.n	80026e8 <SaveEEportsDir+0x10>
			result = BOS_ERR_EEPROM;
 8002708:	260a      	movs	r6, #10
 800270a:	e7ed      	b.n	80026e8 <SaveEEportsDir+0x10>
	}

	return result;
}
 800270c:	0030      	movs	r0, r6
 800270e:	bd70      	pop	{r4, r5, r6, pc}
 8002710:	2000001c 	.word	0x2000001c
 8002714:	200065d0 	.word	0x200065d0

08002718 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
 */
BOS_Status ClearEEportsDir(void) {
 8002718:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;

	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 800271a:	2234      	movs	r2, #52	; 0x34
 800271c:	2100      	movs	r1, #0
 800271e:	480f      	ldr	r0, [pc, #60]	; (800275c <ClearEEportsDir+0x44>)
 8002720:	f010 fe60 	bl	80133e4 <memset>

	for (uint8_t i = 1; i <= N; i++) {
 8002724:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 8002726:	2600      	movs	r6, #0
	for (uint8_t i = 1; i <= N; i++) {
 8002728:	e005      	b.n	8002736 <ClearEEportsDir+0x1e>
		if (arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1, arrayPortsDir[i - 1]);
 800272a:	1c60      	adds	r0, r4, #1
 800272c:	f004 fb2c 	bl	8006d88 <EE_WriteVariable>
 8002730:	e00c      	b.n	800274c <ClearEEportsDir+0x34>
	for (uint8_t i = 1; i <= N; i++) {
 8002732:	3401      	adds	r4, #1
 8002734:	b2e4      	uxtb	r4, r4
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <ClearEEportsDir+0x48>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	42a3      	cmp	r3, r4
 800273c:	d30b      	bcc.n	8002756 <ClearEEportsDir+0x3e>
		if (arrayPortsDir[i - 1])
 800273e:	0025      	movs	r5, r4
 8002740:	1e63      	subs	r3, r4, #1
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4a05      	ldr	r2, [pc, #20]	; (800275c <ClearEEportsDir+0x44>)
 8002746:	5a99      	ldrh	r1, [r3, r2]
 8002748:	2900      	cmp	r1, #0
 800274a:	d1ee      	bne.n	800272a <ClearEEportsDir+0x12>

		if ((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800274c:	3502      	adds	r5, #2
 800274e:	2d1b      	cmp	r5, #27
 8002750:	ddef      	ble.n	8002732 <ClearEEportsDir+0x1a>
			result = BOS_ERR_EEPROM;
 8002752:	260a      	movs	r6, #10
 8002754:	e7ed      	b.n	8002732 <ClearEEportsDir+0x1a>
	}

	return result;
}
 8002756:	0030      	movs	r0, r6
 8002758:	bd70      	pop	{r4, r5, r6, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	200065d0 	.word	0x200065d0
 8002760:	2000001c 	.word	0x2000001c

08002764 <LoadEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
 */
BOS_Status LoadEEportsDir(void) {
 8002764:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;

	for (uint8_t i = 1; i <= N; i++) {
 8002766:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 8002768:	2500      	movs	r5, #0
	for (uint8_t i = 1; i <= N; i++) {
 800276a:	e001      	b.n	8002770 <LoadEEportsDir+0xc>
 800276c:	3401      	adds	r4, #1
 800276e:	b2e4      	uxtb	r4, r4
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <LoadEEportsDir+0x30>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	42a3      	cmp	r3, r4
 8002776:	d30b      	bcc.n	8002790 <LoadEEportsDir+0x2c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1, &arrayPortsDir[i - 1]);
 8002778:	1e61      	subs	r1, r4, #1
 800277a:	0049      	lsls	r1, r1, #1
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <LoadEEportsDir+0x34>)
 800277e:	18c9      	adds	r1, r1, r3
 8002780:	1c60      	adds	r0, r4, #1
 8002782:	f004 fa4f 	bl	8006c24 <EE_ReadVariable>

		if ((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002786:	1ca3      	adds	r3, r4, #2
 8002788:	2b1b      	cmp	r3, #27
 800278a:	ddef      	ble.n	800276c <LoadEEportsDir+0x8>
			result = BOS_ERR_EEPROM;
 800278c:	250a      	movs	r5, #10
 800278e:	e7ed      	b.n	800276c <LoadEEportsDir+0x8>
	}

	return result;
}
 8002790:	0028      	movs	r0, r5
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	2000001c 	.word	0x2000001c
 8002798:	200065d0 	.word	0x200065d0

0800279c <SaveEEalias>:

/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
 */
BOS_Status SaveEEalias(void) {
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint16_t add = 0, temp = 0;

	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 800279e:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 80027a0:	2500      	movs	r5, #0
	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 80027a2:	e017      	b.n	80027d4 <SaveEEalias+0x38>
			{
		if (moduleAlias[i][0]) {
			for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
				temp = (uint16_t) (moduleAlias[i][j - 1] << 8)
 80027a4:	1e60      	subs	r0, r4, #1
 80027a6:	00ba      	lsls	r2, r7, #2
 80027a8:	19d2      	adds	r2, r2, r7
 80027aa:	0051      	lsls	r1, r2, #1
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <SaveEEalias+0x58>)
 80027ae:	185b      	adds	r3, r3, r1
 80027b0:	5c19      	ldrb	r1, [r3, r0]
 80027b2:	0209      	lsls	r1, r1, #8
						+ moduleAlias[i][j];
 80027b4:	5d1b      	ldrb	r3, [r3, r4]
				temp = (uint16_t) (moduleAlias[i][j - 1] << 8)
 80027b6:	18c9      	adds	r1, r1, r3
 80027b8:	b289      	uxth	r1, r1
				EE_WriteVariable(_EE_ALIAS_BASE + add, temp);
 80027ba:	0028      	movs	r0, r5
 80027bc:	301c      	adds	r0, #28
 80027be:	b280      	uxth	r0, r0
 80027c0:	f004 fae2 	bl	8006d88 <EE_WriteVariable>
				add++;
 80027c4:	3501      	adds	r5, #1
 80027c6:	b2ad      	uxth	r5, r5
			for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 80027c8:	3402      	adds	r4, #2
 80027ca:	b2e4      	uxtb	r4, r4
 80027cc:	2c09      	cmp	r4, #9
 80027ce:	d9e9      	bls.n	80027a4 <SaveEEalias+0x8>
	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 80027d0:	3601      	adds	r6, #1
 80027d2:	b2f6      	uxtb	r6, r6
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <SaveEEalias+0x5c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	42b3      	cmp	r3, r6
 80027da:	d309      	bcc.n	80027f0 <SaveEEalias+0x54>
		if (moduleAlias[i][0]) {
 80027dc:	0037      	movs	r7, r6
 80027de:	00b3      	lsls	r3, r6, #2
 80027e0:	199b      	adds	r3, r3, r6
 80027e2:	005a      	lsls	r2, r3, #1
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <SaveEEalias+0x58>)
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f1      	beq.n	80027d0 <SaveEEalias+0x34>
			for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 80027ec:	2401      	movs	r4, #1
 80027ee:	e7ed      	b.n	80027cc <SaveEEalias+0x30>
			}
		}
	}

	return result;
}
 80027f0:	2000      	movs	r0, #0
 80027f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f4:	20000788 	.word	0x20000788
 80027f8:	2000001c 	.word	0x2000001c

080027fc <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
 */
BOS_Status LoadEEalias(void) {
 80027fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fe:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;
	uint16_t add = 0, temp = 0;
 8002800:	466b      	mov	r3, sp
 8002802:	2200      	movs	r2, #0
 8002804:	80da      	strh	r2, [r3, #6]

	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 8002806:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 8002808:	2500      	movs	r5, #0
	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 800280a:	e023      	b.n	8002854 <LoadEEalias+0x58>
			{
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
			EE_ReadVariable(_EE_ALIAS_BASE + add, &temp);
 800280c:	466b      	mov	r3, sp
 800280e:	1d9f      	adds	r7, r3, #6
 8002810:	0028      	movs	r0, r5
 8002812:	301c      	adds	r0, #28
 8002814:	b280      	uxth	r0, r0
 8002816:	0039      	movs	r1, r7
 8002818:	f004 fa04 	bl	8006c24 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 800281c:	8839      	ldrh	r1, [r7, #0]
 800281e:	4a12      	ldr	r2, [pc, #72]	; (8002868 <LoadEEalias+0x6c>)
 8002820:	00b3      	lsls	r3, r6, #2
 8002822:	199f      	adds	r7, r3, r6
 8002824:	0078      	lsls	r0, r7, #1
 8002826:	1810      	adds	r0, r2, r0
 8002828:	5501      	strb	r1, [r0, r4]
			moduleAlias[i][j - 1] = (uint8_t) (temp >> 8);
 800282a:	1e67      	subs	r7, r4, #1
 800282c:	0a09      	lsrs	r1, r1, #8
 800282e:	199b      	adds	r3, r3, r6
 8002830:	0058      	lsls	r0, r3, #1
 8002832:	1812      	adds	r2, r2, r0
 8002834:	55d1      	strb	r1, [r2, r7]
			add++;
 8002836:	3501      	adds	r5, #1
 8002838:	b2ad      	uxth	r5, r5
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 800283a:	3402      	adds	r4, #2
 800283c:	b2e4      	uxtb	r4, r4
 800283e:	2c09      	cmp	r4, #9
 8002840:	d9e4      	bls.n	800280c <LoadEEalias+0x10>
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8002842:	00b3      	lsls	r3, r6, #2
 8002844:	199b      	adds	r3, r3, r6
 8002846:	005a      	lsls	r2, r3, #1
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <LoadEEalias+0x6c>)
 800284a:	189b      	adds	r3, r3, r2
 800284c:	2200      	movs	r2, #0
 800284e:	725a      	strb	r2, [r3, #9]
	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 8002850:	3601      	adds	r6, #1
 8002852:	b2f6      	uxtb	r6, r6
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <LoadEEalias+0x70>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	42b3      	cmp	r3, r6
 800285a:	d301      	bcc.n	8002860 <LoadEEalias+0x64>
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 800285c:	2401      	movs	r4, #1
 800285e:	e7ee      	b.n	800283e <LoadEEalias+0x42>
	}

	return result;
}
 8002860:	2000      	movs	r0, #0
 8002862:	b003      	add	sp, #12
 8002864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	20000788 	.word	0x20000788
 800286c:	2000001c 	.word	0x2000001c

08002870 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
 */
BOS_Status LoadEEgroup(void) {
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;
	uint16_t add = 0, temp = 0;
 8002874:	466b      	mov	r3, sp
 8002876:	2200      	movs	r2, #0
 8002878:	80da      	strh	r2, [r3, #6]
	uint8_t i = 0;

	/* Load group members */
	for (i = 0; i < N; i++)			// N modules
 800287a:	2400      	movs	r4, #0
	uint16_t add = 0, temp = 0;
 800287c:	2500      	movs	r5, #0
	for (i = 0; i < N; i++)			// N modules
 800287e:	e00b      	b.n	8002898 <LoadEEgroup+0x28>
			{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add, &groupModules[i]);
 8002880:	0063      	lsls	r3, r4, #1
 8002882:	491e      	ldr	r1, [pc, #120]	; (80028fc <LoadEEgroup+0x8c>)
 8002884:	18c9      	adds	r1, r1, r3
 8002886:	0028      	movs	r0, r5
 8002888:	30cb      	adds	r0, #203	; 0xcb
 800288a:	b280      	uxth	r0, r0
 800288c:	f004 f9ca 	bl	8006c24 <EE_ReadVariable>
		add++;
 8002890:	3501      	adds	r5, #1
 8002892:	b2ad      	uxth	r5, r5
	for (i = 0; i < N; i++)			// N modules
 8002894:	3401      	adds	r4, #1
 8002896:	b2e4      	uxtb	r4, r4
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <LoadEEgroup+0x90>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	42a3      	cmp	r3, r4
 800289e:	d8ef      	bhi.n	8002880 <LoadEEgroup+0x10>
	}

	/* Load group alias */
	for (i = 0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 80028a0:	2600      	movs	r6, #0
 80028a2:	e023      	b.n	80028ec <LoadEEgroup+0x7c>
			{
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add, &temp);
 80028a4:	466b      	mov	r3, sp
 80028a6:	1d9f      	adds	r7, r3, #6
 80028a8:	0028      	movs	r0, r5
 80028aa:	3099      	adds	r0, #153	; 0x99
 80028ac:	b280      	uxth	r0, r0
 80028ae:	0039      	movs	r1, r7
 80028b0:	f004 f9b8 	bl	8006c24 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 80028b4:	8839      	ldrh	r1, [r7, #0]
 80028b6:	4a13      	ldr	r2, [pc, #76]	; (8002904 <LoadEEgroup+0x94>)
 80028b8:	00b3      	lsls	r3, r6, #2
 80028ba:	199f      	adds	r7, r3, r6
 80028bc:	0078      	lsls	r0, r7, #1
 80028be:	1810      	adds	r0, r2, r0
 80028c0:	5501      	strb	r1, [r0, r4]
			groupAlias[i][j - 1] = (uint8_t) (temp >> 8);
 80028c2:	1e67      	subs	r7, r4, #1
 80028c4:	0a09      	lsrs	r1, r1, #8
 80028c6:	199b      	adds	r3, r3, r6
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	1812      	adds	r2, r2, r0
 80028cc:	55d1      	strb	r1, [r2, r7]
			add++;
 80028ce:	3501      	adds	r5, #1
 80028d0:	b2ad      	uxth	r5, r5
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 80028d2:	3402      	adds	r4, #2
 80028d4:	b2e4      	uxtb	r4, r4
 80028d6:	2c09      	cmp	r4, #9
 80028d8:	d9e4      	bls.n	80028a4 <LoadEEgroup+0x34>
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 80028da:	00b3      	lsls	r3, r6, #2
 80028dc:	199b      	adds	r3, r3, r6
 80028de:	005a      	lsls	r2, r3, #1
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <LoadEEgroup+0x94>)
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	2200      	movs	r2, #0
 80028e6:	725a      	strb	r2, [r3, #9]
	for (i = 0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 80028e8:	3601      	adds	r6, #1
 80028ea:	b2f6      	uxtb	r6, r6
 80028ec:	2e09      	cmp	r6, #9
 80028ee:	d801      	bhi.n	80028f4 <LoadEEgroup+0x84>
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 80028f0:	2401      	movs	r4, #1
 80028f2:	e7f0      	b.n	80028d6 <LoadEEgroup+0x66>
	}

	return result;
}
 80028f4:	2000      	movs	r0, #0
 80028f6:	b003      	add	sp, #12
 80028f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	200006e0 	.word	0x200006e0
 8002900:	2000001c 	.word	0x2000001c
 8002904:	2000067c 	.word	0x2000067c

08002908 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
 */
BOS_Status LoadEEstreams(void) {
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK;
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0;
 800290c:	210e      	movs	r1, #14
 800290e:	4469      	add	r1, sp
 8002910:	2300      	movs	r3, #0
 8002912:	800b      	strh	r3, [r1, #0]
 8002914:	aa03      	add	r2, sp, #12
 8002916:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0;
	uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;

	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8002918:	20e4      	movs	r0, #228	; 0xe4
 800291a:	f004 f983 	bl	8006c24 <EE_ReadVariable>
	if (!status1) {
 800291e:	2800      	cmp	r0, #0
 8002920:	d000      	beq.n	8002924 <LoadEEstreams+0x1c>
 8002922:	e075      	b.n	8002a10 <LoadEEstreams+0x108>
		direction = (uint8_t) temp1;
 8002924:	230e      	movs	r3, #14
 8002926:	446b      	add	r3, sp
 8002928:	781e      	ldrb	r6, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 1, &temp1);
 800292a:	210e      	movs	r1, #14
 800292c:	4469      	add	r1, sp
 800292e:	20e5      	movs	r0, #229	; 0xe5
 8002930:	f004 f978 	bl	8006c24 <EE_ReadVariable>
 8002934:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 2, &temp2);
 8002936:	a903      	add	r1, sp, #12
 8002938:	20e6      	movs	r0, #230	; 0xe6
 800293a:	f004 f973 	bl	8006c24 <EE_ReadVariable>
	if (!status1 && !status2) {
 800293e:	4304      	orrs	r4, r0
 8002940:	b2a4      	uxth	r4, r4
 8002942:	2c00      	cmp	r4, #0
 8002944:	d000      	beq.n	8002948 <LoadEEstreams+0x40>
 8002946:	e065      	b.n	8002a14 <LoadEEstreams+0x10c>
		count = ((uint32_t) temp1 << 16) + temp2;
 8002948:	230e      	movs	r3, #14
 800294a:	446b      	add	r3, sp
 800294c:	881d      	ldrh	r5, [r3, #0]
 800294e:	042d      	lsls	r5, r5, #16
 8002950:	ab03      	add	r3, sp, #12
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	18ed      	adds	r5, r5, r3
	}

	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 3, &temp1);
 8002956:	210e      	movs	r1, #14
 8002958:	4469      	add	r1, sp
 800295a:	20e7      	movs	r0, #231	; 0xe7
 800295c:	f004 f962 	bl	8006c24 <EE_ReadVariable>
 8002960:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 4, &temp2);
 8002962:	a903      	add	r1, sp, #12
 8002964:	20e8      	movs	r0, #232	; 0xe8
 8002966:	f004 f95d 	bl	8006c24 <EE_ReadVariable>
	if (!status1 && !status2) {
 800296a:	4304      	orrs	r4, r0
 800296c:	b2a4      	uxth	r4, r4
 800296e:	2c00      	cmp	r4, #0
 8002970:	d152      	bne.n	8002a18 <LoadEEstreams+0x110>
		timeout = ((uint32_t) temp1 << 16) + temp2;
 8002972:	230e      	movs	r3, #14
 8002974:	446b      	add	r3, sp
 8002976:	881c      	ldrh	r4, [r3, #0]
 8002978:	0424      	lsls	r4, r4, #16
 800297a:	ab03      	add	r3, sp, #12
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	18e4      	adds	r4, r4, r3
	}

	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 5, &temp1);
 8002980:	210e      	movs	r1, #14
 8002982:	4469      	add	r1, sp
 8002984:	20e9      	movs	r0, #233	; 0xe9
 8002986:	f004 f94d 	bl	8006c24 <EE_ReadVariable>
	if (!status1) {
 800298a:	2800      	cmp	r0, #0
 800298c:	d107      	bne.n	800299e <LoadEEstreams+0x96>
		src1 = (uint8_t) (temp1 >> 8);
 800298e:	230e      	movs	r3, #14
 8002990:	446b      	add	r3, sp
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	0a19      	lsrs	r1, r3, #8
 8002996:	4a2c      	ldr	r2, [pc, #176]	; (8002a48 <LoadEEstreams+0x140>)
 8002998:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 800299a:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <LoadEEstreams+0x144>)
 800299c:	7013      	strb	r3, [r2, #0]
	}

	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 6, &temp1);
 800299e:	210e      	movs	r1, #14
 80029a0:	4469      	add	r1, sp
 80029a2:	20ea      	movs	r0, #234	; 0xea
 80029a4:	f004 f93e 	bl	8006c24 <EE_ReadVariable>
	if (!status1) {
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d107      	bne.n	80029bc <LoadEEstreams+0xb4>
		src2 = (uint8_t) (temp1 >> 8);
 80029ac:	230e      	movs	r3, #14
 80029ae:	446b      	add	r3, sp
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	0a19      	lsrs	r1, r3, #8
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <LoadEEstreams+0x148>)
 80029b6:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;
 80029b8:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <LoadEEstreams+0x14c>)
 80029ba:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 7, &temp1);
 80029bc:	210e      	movs	r1, #14
 80029be:	4469      	add	r1, sp
 80029c0:	20eb      	movs	r0, #235	; 0xeb
 80029c2:	f004 f92f 	bl	8006c24 <EE_ReadVariable>
	if (!status1) {
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d107      	bne.n	80029da <LoadEEstreams+0xd2>
		src3 = (uint8_t) (temp1 >> 8);
 80029ca:	230e      	movs	r3, #14
 80029cc:	446b      	add	r3, sp
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	0a19      	lsrs	r1, r3, #8
 80029d2:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <LoadEEstreams+0x150>)
 80029d4:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 80029d6:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <LoadEEstreams+0x154>)
 80029d8:	7013      	strb	r3, [r2, #0]
	}

	/* Activate the DMA streams */
	if (src1 && dst1)
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <LoadEEstreams+0x140>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <LoadEEstreams+0xe2>
 80029e2:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <LoadEEstreams+0x144>)
 80029e4:	7812      	ldrb	r2, [r2, #0]
 80029e6:	2a00      	cmp	r2, #0
 80029e8:	d118      	bne.n	8002a1c <LoadEEstreams+0x114>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 80029ea:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <LoadEEstreams+0x148>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <LoadEEstreams+0xf2>
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <LoadEEstreams+0x14c>)
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	d117      	bne.n	8002a2a <LoadEEstreams+0x122>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <LoadEEstreams+0x150>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <LoadEEstreams+0x102>
 8002a02:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <LoadEEstreams+0x154>)
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	2a00      	cmp	r2, #0
 8002a08:	d116      	bne.n	8002a38 <LoadEEstreams+0x130>
		SetupDMAStreams(direction, count, timeout, src3, dst3);

	return result;
}
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t direction = 0;
 8002a10:	2600      	movs	r6, #0
 8002a12:	e78a      	b.n	800292a <LoadEEstreams+0x22>
	uint32_t count = 0, timeout = 0;
 8002a14:	2500      	movs	r5, #0
 8002a16:	e79e      	b.n	8002956 <LoadEEstreams+0x4e>
 8002a18:	2400      	movs	r4, #0
 8002a1a:	e7b1      	b.n	8002980 <LoadEEstreams+0x78>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 8002a1c:	9200      	str	r2, [sp, #0]
 8002a1e:	0022      	movs	r2, r4
 8002a20:	0029      	movs	r1, r5
 8002a22:	0030      	movs	r0, r6
 8002a24:	f005 fabe 	bl	8007fa4 <SetupDMAStreams>
 8002a28:	e7df      	b.n	80029ea <LoadEEstreams+0xe2>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 8002a2a:	9200      	str	r2, [sp, #0]
 8002a2c:	0022      	movs	r2, r4
 8002a2e:	0029      	movs	r1, r5
 8002a30:	0030      	movs	r0, r6
 8002a32:	f005 fab7 	bl	8007fa4 <SetupDMAStreams>
 8002a36:	e7e0      	b.n	80029fa <LoadEEstreams+0xf2>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 8002a38:	9200      	str	r2, [sp, #0]
 8002a3a:	0022      	movs	r2, r4
 8002a3c:	0029      	movs	r1, r5
 8002a3e:	0030      	movs	r0, r6
 8002a40:	f005 fab0 	bl	8007fa4 <SetupDMAStreams>
 8002a44:	e7e1      	b.n	8002a0a <LoadEEstreams+0x102>
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	20000962 	.word	0x20000962
 8002a4c:	20000679 	.word	0x20000679
 8002a50:	20000963 	.word	0x20000963
 8002a54:	2000067a 	.word	0x2000067a
 8002a58:	20000964 	.word	0x20000964
 8002a5c:	2000067b 	.word	0x2000067b

08002a60 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
 */
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout,
		uint8_t src1, uint8_t dst1, uint8_t src2, uint8_t dst2, uint8_t src3,
		uint8_t dst3) {
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	46de      	mov	lr, fp
 8002a64:	4657      	mov	r7, sl
 8002a66:	464e      	mov	r6, r9
 8002a68:	4645      	mov	r5, r8
 8002a6a:	b5e0      	push	{r5, r6, r7, lr}
 8002a6c:	000f      	movs	r7, r1
 8002a6e:	0016      	movs	r6, r2
 8002a70:	4699      	mov	r9, r3
 8002a72:	ab0a      	add	r3, sp, #40	; 0x28
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	469b      	mov	fp, r3
 8002a78:	ab0b      	add	r3, sp, #44	; 0x2c
 8002a7a:	781d      	ldrb	r5, [r3, #0]
 8002a7c:	ab0c      	add	r3, sp, #48	; 0x30
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	469a      	mov	sl, r3
 8002a82:	ab0d      	add	r3, sp, #52	; 0x34
 8002a84:	781c      	ldrb	r4, [r3, #0]
 8002a86:	ab0e      	add	r3, sp, #56	; 0x38
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK;

	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction); /* Direction */
 8002a8c:	b281      	uxth	r1, r0
 8002a8e:	20e4      	movs	r0, #228	; 0xe4
 8002a90:	f004 f97a 	bl	8006d88 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1, ((uint16_t) (count >> 8))); /* Count high half-word */
 8002a94:	0a39      	lsrs	r1, r7, #8
 8002a96:	b289      	uxth	r1, r1
 8002a98:	20e5      	movs	r0, #229	; 0xe5
 8002a9a:	f004 f975 	bl	8006d88 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2, ((uint16_t) count)); /* Count low half-word */
 8002a9e:	b2b9      	uxth	r1, r7
 8002aa0:	20e6      	movs	r0, #230	; 0xe6
 8002aa2:	f004 f971 	bl	8006d88 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3, ((uint16_t) (timeout >> 8))); /* Timeout high half-word */
 8002aa6:	0a31      	lsrs	r1, r6, #8
 8002aa8:	b289      	uxth	r1, r1
 8002aaa:	20e7      	movs	r0, #231	; 0xe7
 8002aac:	f004 f96c 	bl	8006d88 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4, ((uint16_t) timeout)); /* Timeout low half-word */
 8002ab0:	b2b1      	uxth	r1, r6
 8002ab2:	20e8      	movs	r0, #232	; 0xe8
 8002ab4:	f004 f968 	bl	8006d88 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
			((uint16_t) (src1 << 8)) + (uint16_t) dst1); /* src1 | dst1 */
 8002ab8:	464b      	mov	r3, r9
 8002aba:	0219      	lsls	r1, r3, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
 8002abc:	4459      	add	r1, fp
 8002abe:	b289      	uxth	r1, r1
 8002ac0:	20e9      	movs	r0, #233	; 0xe9
 8002ac2:	f004 f961 	bl	8006d88 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
			((uint16_t) (src2 << 8)) + (uint16_t) dst2); /* src1 | dst1 */
 8002ac6:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
 8002ac8:	4455      	add	r5, sl
 8002aca:	b2a9      	uxth	r1, r5
 8002acc:	20ea      	movs	r0, #234	; 0xea
 8002ace:	f004 f95b 	bl	8006d88 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
			((uint16_t) (src3 << 8)) + (uint16_t) dst3); /* src1 | dst1 */
 8002ad2:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
 8002ad4:	4444      	add	r4, r8
 8002ad6:	b2a1      	uxth	r1, r4
 8002ad8:	20eb      	movs	r0, #235	; 0xeb
 8002ada:	f004 f955 	bl	8006d88 <EE_WriteVariable>

	return result;
}
 8002ade:	2000      	movs	r0, #0
 8002ae0:	bc3c      	pop	{r2, r3, r4, r5}
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4699      	mov	r9, r3
 8002ae6:	46a2      	mov	sl, r4
 8002ae8:	46ab      	mov	fp, r5
 8002aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002aec <LoadEEparams>:

/*-----------------------------------------------------------*/

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
 */
BOS_Status LoadEEparams(void) {
 8002aec:	b510      	push	{r4, lr}
 8002aee:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK;
	uint16_t temp1, temp2, status1, status2;

	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8002af0:	208a      	movs	r0, #138	; 0x8a
 8002af2:	466b      	mov	r3, sp
 8002af4:	1d99      	adds	r1, r3, #6
 8002af6:	0040      	lsls	r0, r0, #1
 8002af8:	f004 f894 	bl	8006c24 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d000      	beq.n	8002b02 <LoadEEparams+0x16>
 8002b00:	e064      	b.n	8002bcc <LoadEEparams+0xe0>
		BOS.response = (uint8_t) temp1;
 8002b02:	466b      	mov	r3, sp
 8002b04:	3306      	adds	r3, #6
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	4a49      	ldr	r2, [pc, #292]	; (8002c30 <LoadEEparams+0x144>)
 8002b0a:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t) (temp1 >> 8);
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}

	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 8002b10:	2016      	movs	r0, #22
 8002b12:	466b      	mov	r3, sp
 8002b14:	1d99      	adds	r1, r3, #6
 8002b16:	30ff      	adds	r0, #255	; 0xff
 8002b18:	f004 f884 	bl	8006c24 <EE_ReadVariable>
	if (!status1)
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d15c      	bne.n	8002bda <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 8002b20:	466b      	mov	r3, sp
 8002b22:	88da      	ldrh	r2, [r3, #6]
 8002b24:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <LoadEEparams+0x144>)
 8002b26:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 8002b28:	208b      	movs	r0, #139	; 0x8b
 8002b2a:	466b      	mov	r3, sp
 8002b2c:	1d99      	adds	r1, r3, #6
 8002b2e:	0040      	lsls	r0, r0, #1
 8002b30:	f004 f878 	bl	8006c24 <EE_ReadVariable>
	if (!status1)
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d155      	bne.n	8002be4 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime = temp1;
 8002b38:	466b      	mov	r3, sp
 8002b3a:	88da      	ldrh	r2, [r3, #6]
 8002b3c:	4b3c      	ldr	r3, [pc, #240]	; (8002c30 <LoadEEparams+0x144>)
 8002b3e:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 8002b40:	2018      	movs	r0, #24
 8002b42:	466b      	mov	r3, sp
 8002b44:	1d99      	adds	r1, r3, #6
 8002b46:	30ff      	adds	r0, #255	; 0xff
 8002b48:	f004 f86c 	bl	8006c24 <EE_ReadVariable>
	if (!status1) {
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d14e      	bne.n	8002bee <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime = (uint8_t) temp1;
 8002b50:	466b      	mov	r3, sp
 8002b52:	3306      	adds	r3, #6
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	4a36      	ldr	r2, [pc, #216]	; (8002c30 <LoadEEparams+0x144>)
 8002b58:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t) (temp1 >> 8);
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;
	}

	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 8002b5e:	208c      	movs	r0, #140	; 0x8c
 8002b60:	466b      	mov	r3, sp
 8002b62:	1d99      	adds	r1, r3, #6
 8002b64:	0040      	lsls	r0, r0, #1
 8002b66:	f004 f85d 	bl	8006c24 <EE_ReadVariable>
 8002b6a:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD + 1, &temp2);
 8002b6c:	201a      	movs	r0, #26
 8002b6e:	a901      	add	r1, sp, #4
 8002b70:	30ff      	adds	r0, #255	; 0xff
 8002b72:	f004 f857 	bl	8006c24 <EE_ReadVariable>
	if (!status1 && !status2) {
 8002b76:	4304      	orrs	r4, r0
 8002b78:	b2a4      	uxth	r4, r4
 8002b7a:	2c00      	cmp	r4, #0
 8002b7c:	d13e      	bne.n	8002bfc <LoadEEparams+0x110>
		BOS.clibaudrate = (uint32_t) temp1 | (((uint32_t) temp2) << 16);
 8002b7e:	466b      	mov	r3, sp
 8002b80:	3306      	adds	r3, #6
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	aa01      	add	r2, sp, #4
 8002b86:	8812      	ldrh	r2, [r2, #0]
 8002b88:	0412      	lsls	r2, r2, #16
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <LoadEEparams+0x144>)
 8002b8e:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;

	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8002b90:	208d      	movs	r0, #141	; 0x8d
 8002b92:	466b      	mov	r3, sp
 8002b94:	1d99      	adds	r1, r3, #6
 8002b96:	0040      	lsls	r0, r0, #1
 8002b98:	f004 f844 	bl	8006c24 <EE_ReadVariable>
	if (!status1) {
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d13b      	bne.n	8002c18 <LoadEEparams+0x12c>
		BOS.daylightsaving = (int8_t) temp1;
 8002ba0:	466b      	mov	r3, sp
 8002ba2:	3306      	adds	r3, #6
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	4a22      	ldr	r2, [pc, #136]	; (8002c30 <LoadEEparams+0x144>)
 8002ba8:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t) (temp1 >> 8);
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}

	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8002bae:	201c      	movs	r0, #28
 8002bb0:	466b      	mov	r3, sp
 8002bb2:	1d99      	adds	r1, r3, #6
 8002bb4:	30ff      	adds	r0, #255	; 0xff
 8002bb6:	f004 f835 	bl	8006c24 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d032      	beq.n	8002c24 <LoadEEparams+0x138>
		BOS.disableCLI = (uint8_t) temp1;
		/* Couldn't find the variable, load default config */
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <LoadEEparams+0x148>)
 8002bc0:	7eda      	ldrb	r2, [r3, #27]
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <LoadEEparams+0x144>)
 8002bc4:	76da      	strb	r2, [r3, #27]
	}

	return result;
}
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <LoadEEparams+0x148>)
 8002bce:	7991      	ldrb	r1, [r2, #6]
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <LoadEEparams+0x144>)
 8002bd2:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 8002bd4:	79d2      	ldrb	r2, [r2, #7]
 8002bd6:	71da      	strb	r2, [r3, #7]
 8002bd8:	e79a      	b.n	8002b10 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <LoadEEparams+0x148>)
 8002bdc:	881a      	ldrh	r2, [r3, #0]
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <LoadEEparams+0x144>)
 8002be0:	801a      	strh	r2, [r3, #0]
 8002be2:	e7a1      	b.n	8002b28 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <LoadEEparams+0x148>)
 8002be6:	885a      	ldrh	r2, [r3, #2]
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <LoadEEparams+0x144>)
 8002bea:	805a      	strh	r2, [r3, #2]
 8002bec:	e7a8      	b.n	8002b40 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;
 8002bee:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <LoadEEparams+0x148>)
 8002bf0:	7911      	ldrb	r1, [r2, #4]
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <LoadEEparams+0x144>)
 8002bf4:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;
 8002bf6:	7952      	ldrb	r2, [r2, #5]
 8002bf8:	715a      	strb	r2, [r3, #5]
 8002bfa:	e7b0      	b.n	8002b5e <LoadEEparams+0x72>
	} else if (CLI_LOW_Baudrate_Flag)
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <LoadEEparams+0x14c>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d004      	beq.n	8002c0e <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <LoadEEparams+0x144>)
 8002c06:	22e1      	movs	r2, #225	; 0xe1
 8002c08:	0252      	lsls	r2, r2, #9
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e7c0      	b.n	8002b90 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <LoadEEparams+0x148>)
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <LoadEEparams+0x144>)
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	e7bb      	b.n	8002b90 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <LoadEEparams+0x144>)
 8002c1a:	2218      	movs	r2, #24
 8002c1c:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 8002c1e:	2200      	movs	r2, #0
 8002c20:	731a      	strb	r2, [r3, #12]
 8002c22:	e7c4      	b.n	8002bae <LoadEEparams+0xc2>
		BOS.disableCLI = (uint8_t) temp1;
 8002c24:	466b      	mov	r3, sp
 8002c26:	799a      	ldrb	r2, [r3, #6]
 8002c28:	4b01      	ldr	r3, [pc, #4]	; (8002c30 <LoadEEparams+0x144>)
 8002c2a:	76da      	strb	r2, [r3, #27]
 8002c2c:	e7cb      	b.n	8002bc6 <LoadEEparams+0xda>
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	20006148 	.word	0x20006148
 8002c34:	20000000 	.word	0x20000000
 8002c38:	200002ce 	.word	0x200002ce

08002c3c <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. --- 
 */
BOS_Status SaveEEparams(void) {
 8002c3c:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;

	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,
			((uint16_t) BOS.trace << 5) | (uint16_t) BOS.response);
 8002c3e:	4c1a      	ldr	r4, [pc, #104]	; (8002ca8 <SaveEEparams+0x6c>)
 8002c40:	79e3      	ldrb	r3, [r4, #7]
 8002c42:	015b      	lsls	r3, r3, #5
 8002c44:	79a1      	ldrb	r1, [r4, #6]
	EE_WriteVariable(_EE_PARAMS_BASE,
 8002c46:	4319      	orrs	r1, r3
 8002c48:	208a      	movs	r0, #138	; 0x8a
 8002c4a:	0040      	lsls	r0, r0, #1
 8002c4c:	f004 f89c 	bl	8006d88 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 8002c50:	8821      	ldrh	r1, [r4, #0]
 8002c52:	2016      	movs	r0, #22
 8002c54:	30ff      	adds	r0, #255	; 0xff
 8002c56:	f004 f897 	bl	8006d88 <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 8002c5a:	8861      	ldrh	r1, [r4, #2]
 8002c5c:	208b      	movs	r0, #139	; 0x8b
 8002c5e:	0040      	lsls	r0, r0, #1
 8002c60:	f004 f892 	bl	8006d88 <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
			((uint16_t) BOS.buttons.maxInterClickTime << 8)
 8002c64:	7963      	ldrb	r3, [r4, #5]
 8002c66:	021b      	lsls	r3, r3, #8
					| (uint16_t) BOS.daylightsaving);
 8002c68:	7b21      	ldrb	r1, [r4, #12]
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
 8002c6a:	4319      	orrs	r1, r3
 8002c6c:	2018      	movs	r0, #24
 8002c6e:	30ff      	adds	r0, #255	; 0xff
 8002c70:	f004 f88a 	bl	8006d88 <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t) BOS.clibaudrate);
 8002c74:	8921      	ldrh	r1, [r4, #8]
 8002c76:	208c      	movs	r0, #140	; 0x8c
 8002c78:	0040      	lsls	r0, r0, #1
 8002c7a:	f004 f885 	bl	8006d88 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1, (uint16_t) (BOS.clibaudrate >> 16));
 8002c7e:	8961      	ldrh	r1, [r4, #10]
 8002c80:	201a      	movs	r0, #26
 8002c82:	30ff      	adds	r0, #255	; 0xff
 8002c84:	f004 f880 	bl	8006d88 <EE_WriteVariable>

	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC,
			((uint16_t) BOS.hourformat << 8)
 8002c88:	7b63      	ldrb	r3, [r4, #13]
 8002c8a:	021b      	lsls	r3, r3, #8
					| (uint16_t) BOS.buttons.minInterClickTime);
 8002c8c:	7921      	ldrb	r1, [r4, #4]
	EE_WriteVariable(_EE_PARAMS_RTC,
 8002c8e:	4319      	orrs	r1, r3
 8002c90:	208d      	movs	r0, #141	; 0x8d
 8002c92:	0040      	lsls	r0, r0, #1
 8002c94:	f004 f878 	bl	8006d88 <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t) BOS.disableCLI);
 8002c98:	7ee1      	ldrb	r1, [r4, #27]
 8002c9a:	201c      	movs	r0, #28
 8002c9c:	30ff      	adds	r0, #255	; 0xff
 8002c9e:	f004 f873 	bl	8006d88 <EE_WriteVariable>

	return result;
}
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	bd10      	pop	{r4, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	20006148 	.word	0x20006148

08002cac <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- 
 */
BOS_Status LoadEEbuttons(void) {
 8002cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cae:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK;
	uint16_t temp16 = 0, status1 = 0;
 8002cb0:	231e      	movs	r3, #30
 8002cb2:	446b      	add	r3, sp
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 = 0;

	for (uint8_t i = 0; i <= NumOfPorts; i++) {
 8002cb8:	2400      	movs	r4, #0
 8002cba:	e001      	b.n	8002cc0 <LoadEEbuttons+0x14>
 8002cbc:	3401      	adds	r4, #1
 8002cbe:	b2e4      	uxtb	r4, r4
 8002cc0:	2c05      	cmp	r4, #5
 8002cc2:	d854      	bhi.n	8002d6e <LoadEEbuttons+0xc2>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i), &temp16);
 8002cc4:	0025      	movs	r5, r4
 8002cc6:	353b      	adds	r5, #59	; 0x3b
 8002cc8:	00ad      	lsls	r5, r5, #2
 8002cca:	b2ad      	uxth	r5, r5
 8002ccc:	211e      	movs	r1, #30
 8002cce:	4469      	add	r1, sp
 8002cd0:	0028      	movs	r0, r5
 8002cd2:	f003 ffa7 	bl	8006c24 <EE_ReadVariable>

		if (!status1)									// This variable exists
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d1f0      	bne.n	8002cbc <LoadEEbuttons+0x10>
		{
			temp8 = (uint8_t) (temp16 >> 8);
 8002cda:	231e      	movs	r3, #30
 8002cdc:	446b      	add	r3, sp
 8002cde:	8819      	ldrh	r1, [r3, #0]
 8002ce0:	0a0b      	lsrs	r3, r1, #8
			if (((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))// This is same port and button type is not none
 8002ce2:	0918      	lsrs	r0, r3, #4
 8002ce4:	1c62      	adds	r2, r4, #1
 8002ce6:	4290      	cmp	r0, r2
 8002ce8:	d1e8      	bne.n	8002cbc <LoadEEbuttons+0x10>
 8002cea:	200f      	movs	r0, #15
 8002cec:	4003      	ands	r3, r0
 8002cee:	d0e5      	beq.n	8002cbc <LoadEEbuttons+0x10>
					{
				button[i + 1].type = temp8 & 0x0F;
 8002cf0:	00d7      	lsls	r7, r2, #3
 8002cf2:	18ba      	adds	r2, r7, r2
 8002cf4:	4f1f      	ldr	r7, [pc, #124]	; (8002d74 <LoadEEbuttons+0xc8>)
 8002cf6:	18bf      	adds	r7, r7, r2
 8002cf8:	707b      	strb	r3, [r7, #1]
				button[i + 1].events = (uint8_t) temp16;
 8002cfa:	7239      	strb	r1, [r7, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1, &temp16);
 8002cfc:	261e      	movs	r6, #30
 8002cfe:	446e      	add	r6, sp
 8002d00:	1c68      	adds	r0, r5, #1
 8002d02:	b280      	uxth	r0, r0
 8002d04:	0031      	movs	r1, r6
 8002d06:	f003 ff8d 	bl	8006c24 <EE_ReadVariable>
				button[i + 1].pressedX1Sec = (uint8_t) (temp16 >> 8);
 8002d0a:	8833      	ldrh	r3, [r6, #0]
 8002d0c:	0a1a      	lsrs	r2, r3, #8
 8002d0e:	70ba      	strb	r2, [r7, #2]
				button[i + 1].releasedY1Sec = (uint8_t) temp16;
 8002d10:	717b      	strb	r3, [r7, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2, &temp16);
 8002d12:	1ca8      	adds	r0, r5, #2
 8002d14:	b280      	uxth	r0, r0
 8002d16:	0031      	movs	r1, r6
 8002d18:	f003 ff84 	bl	8006c24 <EE_ReadVariable>
				button[i + 1].pressedX2Sec = (uint8_t) (temp16 >> 8);
 8002d1c:	8833      	ldrh	r3, [r6, #0]
 8002d1e:	0a1a      	lsrs	r2, r3, #8
 8002d20:	70fa      	strb	r2, [r7, #3]
				button[i + 1].releasedY2Sec = (uint8_t) temp16;
 8002d22:	71bb      	strb	r3, [r7, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3, &temp16);
 8002d24:	3503      	adds	r5, #3
 8002d26:	b2a8      	uxth	r0, r5
 8002d28:	0031      	movs	r1, r6
 8002d2a:	f003 ff7b 	bl	8006c24 <EE_ReadVariable>
				button[i + 1].pressedX3Sec = (uint8_t) (temp16 >> 8);
 8002d2e:	8833      	ldrh	r3, [r6, #0]
 8002d30:	0a1a      	lsrs	r2, r3, #8
 8002d32:	713a      	strb	r2, [r7, #4]
				button[i + 1].releasedY3Sec = (uint8_t) temp16;
 8002d34:	71fb      	strb	r3, [r7, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type, i + 1);
 8002d36:	1c65      	adds	r5, r4, #1
 8002d38:	b2ed      	uxtb	r5, r5
 8002d3a:	7878      	ldrb	r0, [r7, #1]
 8002d3c:	0029      	movs	r1, r5
 8002d3e:	f004 fe89 	bl	8007a54 <AddPortButton>
				SetButtonEvents(i + 1,
						(button[i + 1].events & BUTTON_EVENT_CLICKED),
 8002d42:	7a39      	ldrb	r1, [r7, #8]
						((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),
 8002d44:	084a      	lsrs	r2, r1, #1
				SetButtonEvents(i + 1,
 8002d46:	78bb      	ldrb	r3, [r7, #2]
 8002d48:	2001      	movs	r0, #1
 8002d4a:	4002      	ands	r2, r0
 8002d4c:	4001      	ands	r1, r0
 8002d4e:	2000      	movs	r0, #0
 8002d50:	9005      	str	r0, [sp, #20]
 8002d52:	79f8      	ldrb	r0, [r7, #7]
 8002d54:	9004      	str	r0, [sp, #16]
 8002d56:	79b8      	ldrb	r0, [r7, #6]
 8002d58:	9003      	str	r0, [sp, #12]
 8002d5a:	7978      	ldrb	r0, [r7, #5]
 8002d5c:	9002      	str	r0, [sp, #8]
 8002d5e:	7938      	ldrb	r0, [r7, #4]
 8002d60:	9001      	str	r0, [sp, #4]
 8002d62:	78f8      	ldrb	r0, [r7, #3]
 8002d64:	9000      	str	r0, [sp, #0]
 8002d66:	0028      	movs	r0, r5
 8002d68:	f004 ff8c 	bl	8007c84 <SetButtonEvents>
 8002d6c:	e7a6      	b.n	8002cbc <LoadEEbuttons+0x10>
			}
		}
	}

	return result;
}
 8002d6e:	2000      	movs	r0, #0
 8002d70:	b009      	add	sp, #36	; 0x24
 8002d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d74:	20000cd0 	.word	0x20000cd0

08002d78 <LoadEEvars>:
void LoadEEvars(void) {
 8002d78:	b510      	push	{r4, lr}
	LoadROtopology();
 8002d7a:	f7ff fc5f 	bl	800263c <LoadROtopology>
	LoadEEportsDir();
 8002d7e:	f7ff fcf1 	bl	8002764 <LoadEEportsDir>
	LoadEEalias();
 8002d82:	f7ff fd3b 	bl	80027fc <LoadEEalias>
	LoadEEgroup();
 8002d86:	f7ff fd73 	bl	8002870 <LoadEEgroup>
	LoadEEstreams();
 8002d8a:	f7ff fdbd 	bl	8002908 <LoadEEstreams>
	LoadEEparams();
 8002d8e:	f7ff fead 	bl	8002aec <LoadEEparams>
	LoadEEbuttons();
 8002d92:	f7ff ff8b 	bl	8002cac <LoadEEbuttons>
	LoadROsnippets();
 8002d96:	f7ff fbd3 	bl	8002540 <LoadROsnippets>
}
 8002d9a:	bd10      	pop	{r4, pc}

08002d9c <IsLowerCLIbaud>:
/*-----------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void) {
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;

	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8002da0:	2512      	movs	r5, #18
 8002da2:	446d      	add	r5, sp
 8002da4:	ab04      	add	r3, sp, #16
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	ab07      	add	r3, sp, #28
 8002daa:	002a      	movs	r2, r5
 8002dac:	a908      	add	r1, sp, #32
 8002dae:	2001      	movs	r0, #1
 8002db0:	f00a fb30 	bl	800d414 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 8002db4:	ac03      	add	r4, sp, #12
 8002db6:	9400      	str	r4, [sp, #0]
 8002db8:	ab05      	add	r3, sp, #20
 8002dba:	220e      	movs	r2, #14
 8002dbc:	446a      	add	r2, sp
 8002dbe:	a906      	add	r1, sp, #24
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f00a fb27 	bl	800d414 <GetPortGPIOs>

	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2600      	movs	r6, #0
 8002dcc:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8002dce:	882b      	ldrh	r3, [r5, #0]
 8002dd0:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) P1_TX_Port, &GPIO_InitStruct);
 8002dd2:	a909      	add	r1, sp, #36	; 0x24
 8002dd4:	9808      	ldr	r0, [sp, #32]
 8002dd6:	f00e fc7d 	bl	80116d4 <HAL_GPIO_Init>

	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dda:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8002de0:	8823      	ldrh	r3, [r4, #0]
 8002de2:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) P2_RX_Port, &GPIO_InitStruct);
 8002de4:	a909      	add	r1, sp, #36	; 0x24
 8002de6:	9805      	ldr	r0, [sp, #20]
 8002de8:	f00e fc74 	bl	80116d4 <HAL_GPIO_Init>

	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef*) P1_TX_Port, P1_TX_Pin, GPIO_PIN_RESET);
 8002dec:	8829      	ldrh	r1, [r5, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	9808      	ldr	r0, [sp, #32]
 8002df2:	f00e fd3e 	bl	8011872 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8002df6:	2005      	movs	r0, #5
 8002df8:	f00a fea0 	bl	800db3c <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == RESET) {
 8002dfc:	8821      	ldrh	r1, [r4, #0]
 8002dfe:	9805      	ldr	r0, [sp, #20]
 8002e00:	f00e fd30 	bl	8011864 <HAL_GPIO_ReadPin>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	d002      	beq.n	8002e0e <IsLowerCLIbaud+0x72>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == SET) {
			return 1;
		}
	}

	return 0;
 8002e08:	2000      	movs	r0, #0
}
 8002e0a:	b00e      	add	sp, #56	; 0x38
 8002e0c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef*) P1_TX_Port, P1_TX_Pin, GPIO_PIN_SET);
 8002e0e:	2312      	movs	r3, #18
 8002e10:	446b      	add	r3, sp
 8002e12:	8819      	ldrh	r1, [r3, #0]
 8002e14:	2201      	movs	r2, #1
 8002e16:	9808      	ldr	r0, [sp, #32]
 8002e18:	f00e fd2b 	bl	8011872 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8002e1c:	2005      	movs	r0, #5
 8002e1e:	f00a fe8d 	bl	800db3c <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == SET) {
 8002e22:	ab03      	add	r3, sp, #12
 8002e24:	8819      	ldrh	r1, [r3, #0]
 8002e26:	9805      	ldr	r0, [sp, #20]
 8002e28:	f00e fd1c 	bl	8011864 <HAL_GPIO_ReadPin>
 8002e2c:	2801      	cmp	r0, #1
 8002e2e:	d0ec      	beq.n	8002e0a <IsLowerCLIbaud+0x6e>
	return 0;
 8002e30:	2000      	movs	r0, #0
 8002e32:	e7ea      	b.n	8002e0a <IsLowerCLIbaud+0x6e>

08002e34 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

/* --- Format emulated EEPROM for a factory reset
 */
void EE_FormatForFactoryReset(void) {
 8002e34:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long*) 0x20007FF0) == 0xBEEFDEAD) {
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <EE_FormatForFactoryReset+0x1c>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <EE_FormatForFactoryReset+0x20>)
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d006      	beq.n	8002e4e <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	} else {
		if (EE_Format() == HAL_OK) {
 8002e40:	f003 ffb8 	bl	8006db4 <EE_Format>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d102      	bne.n	8002e4e <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long*) 0x20007FF0) = 0xBEEFDEAD;
 8002e48:	4b01      	ldr	r3, [pc, #4]	; (8002e50 <EE_FormatForFactoryReset+0x1c>)
 8002e4a:	4a02      	ldr	r2, [pc, #8]	; (8002e54 <EE_FormatForFactoryReset+0x20>)
 8002e4c:	601a      	str	r2, [r3, #0]
		}
	}

}
 8002e4e:	bd10      	pop	{r4, pc}
 8002e50:	20007ff0 	.word	0x20007ff0
 8002e54:	beefdead 	.word	0xbeefdead

08002e58 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port) {
 8002e58:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8002e5a:	f00b f805 	bl	800de68 <GetUart>
 8002e5e:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 8002e60:	23e1      	movs	r3, #225	; 0xe1
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	015b      	lsls	r3, r3, #5
 8002e70:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8002e72:	f010 f8cd 	bl	8013010 <HAL_UART_Init>

	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	6813      	ldr	r3, [r2, #0]
 8002e7a:	2120      	movs	r1, #32
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bd10      	pop	{r4, pc}
	...

08002e84 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name) {
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	0005      	movs	r5, r0
	for (uint8_t i = 0; i < NUM_MODULE_PARAMS; i++) {
 8002e88:	2400      	movs	r4, #0
 8002e8a:	2c03      	cmp	r4, #3
 8002e8c:	d810      	bhi.n	8002eb0 <IsModuleParameter+0x2c>
		if (!strcmp(name, (const char*) (modParam[i].paramName)))
 8002e8e:	0063      	lsls	r3, r4, #1
 8002e90:	191b      	adds	r3, r3, r4
 8002e92:	009a      	lsls	r2, r3, #2
 8002e94:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <IsModuleParameter+0x30>)
 8002e96:	189b      	adds	r3, r3, r2
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	0028      	movs	r0, r5
 8002e9c:	f7fd f932 	bl	8000104 <strcmp>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d002      	beq.n	8002eaa <IsModuleParameter+0x26>
	for (uint8_t i = 0; i < NUM_MODULE_PARAMS; i++) {
 8002ea4:	3401      	adds	r4, #1
 8002ea6:	b2e4      	uxtb	r4, r4
 8002ea8:	e7ef      	b.n	8002e8a <IsModuleParameter+0x6>
			return i + 1;
 8002eaa:	3401      	adds	r4, #1
 8002eac:	b2e0      	uxtb	r0, r4
 8002eae:	e000      	b.n	8002eb2 <IsModuleParameter+0x2e>
	}
	return 0;
 8002eb0:	2000      	movs	r0, #0
}
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	20000084 	.word	0x20000084

08002eb8 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string) {
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	0004      	movs	r4, r0
	for (uint8_t i = 0; i < NUM_MATH_OPERATORS; i++) {
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	e001      	b.n	8002ec4 <IsMathOperator+0xc>
 8002ec0:	3501      	adds	r5, #1
 8002ec2:	b2ed      	uxtb	r5, r5
 8002ec4:	2d05      	cmp	r5, #5
 8002ec6:	d825      	bhi.n	8002f14 <IsMathOperator+0x5c>
		if (!strcmp(string, "="))
 8002ec8:	4918      	ldr	r1, [pc, #96]	; (8002f2c <IsMathOperator+0x74>)
 8002eca:	0020      	movs	r0, r4
 8002ecc:	f7fd f91a 	bl	8000104 <strcmp>
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d021      	beq.n	8002f18 <IsMathOperator+0x60>
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 8002ed4:	4916      	ldr	r1, [pc, #88]	; (8002f30 <IsMathOperator+0x78>)
 8002ed6:	0020      	movs	r0, r4
 8002ed8:	f7fd f914 	bl	8000104 <strcmp>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d01d      	beq.n	8002f1c <IsMathOperator+0x64>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 8002ee0:	4914      	ldr	r1, [pc, #80]	; (8002f34 <IsMathOperator+0x7c>)
 8002ee2:	0020      	movs	r0, r4
 8002ee4:	f7fd f90e 	bl	8000104 <strcmp>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d019      	beq.n	8002f20 <IsMathOperator+0x68>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 8002eec:	4912      	ldr	r1, [pc, #72]	; (8002f38 <IsMathOperator+0x80>)
 8002eee:	0020      	movs	r0, r4
 8002ef0:	f7fd f908 	bl	8000104 <strcmp>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	d015      	beq.n	8002f24 <IsMathOperator+0x6c>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 8002ef8:	4910      	ldr	r1, [pc, #64]	; (8002f3c <IsMathOperator+0x84>)
 8002efa:	0020      	movs	r0, r4
 8002efc:	f7fd f902 	bl	8000104 <strcmp>
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d011      	beq.n	8002f28 <IsMathOperator+0x70>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 8002f04:	490e      	ldr	r1, [pc, #56]	; (8002f40 <IsMathOperator+0x88>)
 8002f06:	0020      	movs	r0, r4
 8002f08:	f7fd f8fc 	bl	8000104 <strcmp>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	d1d7      	bne.n	8002ec0 <IsMathOperator+0x8>
			return MATH_NOT_EQUAL;
 8002f10:	2006      	movs	r0, #6
 8002f12:	e000      	b.n	8002f16 <IsMathOperator+0x5e>
	}
	return 0;
 8002f14:	2000      	movs	r0, #0
}
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8002f18:	2001      	movs	r0, #1
 8002f1a:	e7fc      	b.n	8002f16 <IsMathOperator+0x5e>
			return MATH_GREATER;
 8002f1c:	2002      	movs	r0, #2
 8002f1e:	e7fa      	b.n	8002f16 <IsMathOperator+0x5e>
			return MATH_SMALLER;
 8002f20:	2003      	movs	r0, #3
 8002f22:	e7f8      	b.n	8002f16 <IsMathOperator+0x5e>
			return MATH_GREATER_EQUAL;
 8002f24:	2004      	movs	r0, #4
 8002f26:	e7f6      	b.n	8002f16 <IsMathOperator+0x5e>
			return MATH_SMALLER_EQUAL;
 8002f28:	2005      	movs	r0, #5
 8002f2a:	e7f4      	b.n	8002f16 <IsMathOperator+0x5e>
 8002f2c:	08017450 	.word	0x08017450
 8002f30:	08017454 	.word	0x08017454
 8002f34:	08017458 	.word	0x08017458
 8002f38:	0801745c 	.word	0x0801745c
 8002f3c:	08017460 	.word	0x08017460
 8002f40:	08017464 	.word	0x08017464

08002f44 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore) {
 8002f44:	b530      	push	{r4, r5, lr}
 8002f46:	b083      	sub	sp, #12
 8002f48:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port = 1; port <= NumOfPorts; port++) {
 8002f4a:	2401      	movs	r4, #1
 8002f4c:	e001      	b.n	8002f52 <ExploreNeighbors+0xe>
 8002f4e:	3401      	adds	r4, #1
 8002f50:	b2e4      	uxtb	r4, r4
 8002f52:	2c05      	cmp	r4, #5
 8002f54:	d814      	bhi.n	8002f80 <ExploreNeighbors+0x3c>
		if (port != ignore) {
 8002f56:	42ac      	cmp	r4, r5
 8002f58:	d0f9      	beq.n	8002f4e <ExploreNeighbors+0xa>
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <ExploreNeighbors+0x44>)
 8002f5c:	881a      	ldrh	r2, [r3, #0]
 8002f5e:	0a11      	lsrs	r1, r2, #8
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <ExploreNeighbors+0x48>)
 8002f62:	7019      	strb	r1, [r3, #0]
			messageParams[1] = (uint8_t) myPN;
 8002f64:	705a      	strb	r2, [r3, #1]
			messageParams[2] = port;
 8002f66:	709c      	strb	r4, [r3, #2]
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8002f68:	2303      	movs	r3, #3
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	3307      	adds	r3, #7
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	0020      	movs	r0, r4
 8002f74:	f005 f92a 	bl	80081cc <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8002f78:	200a      	movs	r0, #10
 8002f7a:	f00b f8c7 	bl	800e10c <osDelay>
 8002f7e:	e7e6      	b.n	8002f4e <ExploreNeighbors+0xa>
		}
	}

	return result;
}
 8002f80:	2000      	movs	r0, #0
 8002f82:	b003      	add	sp, #12
 8002f84:	bd30      	pop	{r4, r5, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	20000050 	.word	0x20000050
 8002f8c:	20000758 	.word	0x20000758

08002f90 <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src) {
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f92:	46de      	mov	lr, fp
 8002f94:	4657      	mov	r7, sl
 8002f96:	464e      	mov	r6, r9
 8002f98:	4645      	mov	r5, r8
 8002f9a:	b5e0      	push	{r5, r6, r7, lr}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK;
	uint8_t p = 0, m = 0, level = 0, untaged = 0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8002fa0:	4b44      	ldr	r3, [pc, #272]	; (80030b4 <FindBroadcastRoutes+0x124>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	3307      	adds	r3, #7
 8002fa6:	08db      	lsrs	r3, r3, #3
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	466a      	mov	r2, sp
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	469d      	mov	sp, r3
 8002fb0:	466d      	mov	r5, sp

	/* 1. Initialize modules list and broadcast routes */

	for (m = 0; m < N; m++) {
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e006      	b.n	8002fc4 <FindBroadcastRoutes+0x34>
		modules[m] = 0;
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	54ea      	strb	r2, [r5, r3]
		bcastRoutes[m] = 0;
 8002fba:	005c      	lsls	r4, r3, #1
 8002fbc:	493e      	ldr	r1, [pc, #248]	; (80030b8 <FindBroadcastRoutes+0x128>)
 8002fbe:	5262      	strh	r2, [r4, r1]
	for (m = 0; m < N; m++) {
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <FindBroadcastRoutes+0x124>)
 8002fc6:	7812      	ldrb	r2, [r2, #0]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d3f4      	bcc.n	8002fb6 <FindBroadcastRoutes+0x26>
	}
	modules[src - 1] = ++level;					// Tag the source
 8002fcc:	3801      	subs	r0, #1
 8002fce:	2301      	movs	r3, #1
 8002fd0:	542b      	strb	r3, [r5, r0]

	/* 2. Source module should send to all neighbors */

	++level;												// Move one level

	for (p = 1; p <= NumOfPorts; p++) {
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	e001      	b.n	8002fda <FindBroadcastRoutes+0x4a>
 8002fd6:	3201      	adds	r2, #1
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	2a05      	cmp	r2, #5
 8002fdc:	d819      	bhi.n	8003012 <FindBroadcastRoutes+0x82>
		if (array[src - 1][p]) {
 8002fde:	0083      	lsls	r3, r0, #2
 8002fe0:	181b      	adds	r3, r3, r0
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	181b      	adds	r3, r3, r0
 8002fe6:	189b      	adds	r3, r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4934      	ldr	r1, [pc, #208]	; (80030bc <FindBroadcastRoutes+0x12c>)
 8002fec:	5a5b      	ldrh	r3, [r3, r1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f1      	beq.n	8002fd6 <FindBroadcastRoutes+0x46>
			bcastRoutes[src - 1] |= (0x01 << (p - 1));
 8002ff2:	1e54      	subs	r4, r2, #1
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	40a1      	lsls	r1, r4
 8002ff8:	000c      	movs	r4, r1
 8002ffa:	4e2f      	ldr	r6, [pc, #188]	; (80030b8 <FindBroadcastRoutes+0x128>)
 8002ffc:	0041      	lsls	r1, r0, #1
 8002ffe:	468c      	mov	ip, r1
 8003000:	5b89      	ldrh	r1, [r1, r6]
 8003002:	4321      	orrs	r1, r4
 8003004:	4664      	mov	r4, ip
 8003006:	53a1      	strh	r1, [r4, r6]
			modules[(array[src - 1][p] >> 3) - 1] = level;// Tag this module as already broadcasted-to
 8003008:	08db      	lsrs	r3, r3, #3
 800300a:	3b01      	subs	r3, #1
 800300c:	2102      	movs	r1, #2
 800300e:	54e9      	strb	r1, [r5, r3]
 8003010:	e7e1      	b.n	8002fd6 <FindBroadcastRoutes+0x46>
	++level;												// Move one level
 8003012:	2302      	movs	r3, #2
 8003014:	469b      	mov	fp, r3

	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do {
		untaged = 0;								// Reset the untaged counter
		++level;											// Move one level
 8003016:	465e      	mov	r6, fp
 8003018:	3601      	adds	r6, #1
 800301a:	b2f3      	uxtb	r3, r6
 800301c:	469b      	mov	fp, r3
		untaged = 0;								// Reset the untaged counter
 800301e:	2300      	movs	r3, #0
 8003020:	469c      	mov	ip, r3

		for (m = 0; m < N; m++)					// Scan all modules in the list
 8003022:	2000      	movs	r0, #0
 8003024:	e02e      	b.n	8003084 <FindBroadcastRoutes+0xf4>
				{
			if (modules[m] == (level - 1))// This module is already broadcasted-to from the previous level
					{
				for (p = 1; p <= NumOfPorts; p++)// Check all neighbors if they're not already broadcasted-to
 8003026:	3201      	adds	r2, #1
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	2a05      	cmp	r2, #5
 800302c:	d828      	bhi.n	8003080 <FindBroadcastRoutes+0xf0>
						{
					if (array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 800302e:	00a3      	lsls	r3, r4, #2
 8003030:	191b      	adds	r3, r3, r4
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	191b      	adds	r3, r3, r4
 8003036:	189b      	adds	r3, r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4920      	ldr	r1, [pc, #128]	; (80030bc <FindBroadcastRoutes+0x12c>)
 800303c:	5a5b      	ldrh	r3, [r3, r1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f1      	beq.n	8003026 <FindBroadcastRoutes+0x96>
 8003042:	08db      	lsrs	r3, r3, #3
 8003044:	3b01      	subs	r3, #1
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	5ce9      	ldrb	r1, [r5, r3]
 800304a:	2900      	cmp	r1, #0
 800304c:	d1eb      	bne.n	8003026 <FindBroadcastRoutes+0x96>
							{
						bcastRoutes[m] |= (0x01 << (p - 1));
 800304e:	0011      	movs	r1, r2
 8003050:	3901      	subs	r1, #1
 8003052:	2601      	movs	r6, #1
 8003054:	408e      	lsls	r6, r1
 8003056:	46b0      	mov	r8, r6
 8003058:	4917      	ldr	r1, [pc, #92]	; (80030b8 <FindBroadcastRoutes+0x128>)
 800305a:	4689      	mov	r9, r1
 800305c:	0061      	lsls	r1, r4, #1
 800305e:	468a      	mov	sl, r1
 8003060:	4649      	mov	r1, r9
 8003062:	4656      	mov	r6, sl
 8003064:	5a71      	ldrh	r1, [r6, r1]
 8003066:	4646      	mov	r6, r8
 8003068:	4331      	orrs	r1, r6
 800306a:	464e      	mov	r6, r9
 800306c:	4653      	mov	r3, sl
 800306e:	5399      	strh	r1, [r3, r6]
						modules[(array[m][p] >> 3) - 1] = level;// Tag this module as already broadcasted-to
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4659      	mov	r1, fp
 8003074:	54e9      	strb	r1, [r5, r3]
						++untaged;
 8003076:	4663      	mov	r3, ip
 8003078:	3301      	adds	r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	469c      	mov	ip, r3
 800307e:	e7d2      	b.n	8003026 <FindBroadcastRoutes+0x96>
		for (m = 0; m < N; m++)					// Scan all modules in the list
 8003080:	3001      	adds	r0, #1
 8003082:	b2c0      	uxtb	r0, r0
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <FindBroadcastRoutes+0x124>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4298      	cmp	r0, r3
 800308a:	d207      	bcs.n	800309c <FindBroadcastRoutes+0x10c>
			if (modules[m] == (level - 1))// This module is already broadcasted-to from the previous level
 800308c:	0004      	movs	r4, r0
 800308e:	5c2a      	ldrb	r2, [r5, r0]
 8003090:	465b      	mov	r3, fp
 8003092:	3b01      	subs	r3, #1
 8003094:	429a      	cmp	r2, r3
 8003096:	d1f3      	bne.n	8003080 <FindBroadcastRoutes+0xf0>
				for (p = 1; p <= NumOfPorts; p++)// Check all neighbors if they're not already broadcasted-to
 8003098:	2201      	movs	r2, #1
 800309a:	e7c6      	b.n	800302a <FindBroadcastRoutes+0x9a>
					}
				}
			}
		}
	} while (untaged);
 800309c:	4663      	mov	r3, ip
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1b9      	bne.n	8003016 <FindBroadcastRoutes+0x86>

	return result;
}
 80030a2:	2000      	movs	r0, #0
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b003      	add	sp, #12
 80030a8:	bc3c      	pop	{r2, r3, r4, r5}
 80030aa:	4690      	mov	r8, r2
 80030ac:	4699      	mov	r9, r3
 80030ae:	46a2      	mov	sl, r4
 80030b0:	46ab      	mov	fp, r5
 80030b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b4:	2000001c 	.word	0x2000001c
 80030b8:	20000510 	.word	0x20000510
 80030bc:	200002d0 	.word	0x200002d0

080030c0 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID) {
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c2:	b08f      	sub	sp, #60	; 0x3c
 80030c4:	0005      	movs	r5, r0
 80030c6:	000e      	movs	r6, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = { 0 };		// All nodes initially in Q (unvisited nodes)
 80030c8:	2232      	movs	r2, #50	; 0x32
 80030ca:	2100      	movs	r1, #0
 80030cc:	a801      	add	r0, sp, #4
 80030ce:	f010 f989 	bl	80133e4 <memset>
	uint8_t alt = 0;
	uint8_t u = 0;
	uint8_t v = 0;
	uint8_t j = 0;

	memset(route, 0, sizeof(route));
 80030d2:	221a      	movs	r2, #26
 80030d4:	2100      	movs	r1, #0
 80030d6:	4848      	ldr	r0, [pc, #288]	; (80031f8 <FindRoute+0x138>)
 80030d8:	f010 f984 	bl	80133e4 <memset>
	routeDist[sourceID - 1] = 0;               // Distance from source to source
 80030dc:	002a      	movs	r2, r5
 80030de:	3d01      	subs	r5, #1
 80030e0:	2300      	movs	r3, #0
 80030e2:	4946      	ldr	r1, [pc, #280]	; (80031fc <FindRoute+0x13c>)
 80030e4:	554b      	strb	r3, [r1, r5]
	routePrev[sourceID - 1] = 0; // Previous node in optimal path initialization undefined
 80030e6:	4946      	ldr	r1, [pc, #280]	; (8003200 <FindRoute+0x140>)
 80030e8:	554b      	strb	r3, [r1, r5]

	/* Check adjacent neighbors first! */
	for (int col = 1; col <= 6; col++) {
 80030ea:	2001      	movs	r0, #1
 80030ec:	e000      	b.n	80030f0 <FindRoute+0x30>
 80030ee:	3001      	adds	r0, #1
 80030f0:	2806      	cmp	r0, #6
 80030f2:	dc16      	bgt.n	8003122 <FindRoute+0x62>
		if (array[sourceID - 1][col]
 80030f4:	00ab      	lsls	r3, r5, #2
 80030f6:	195b      	adds	r3, r3, r5
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	195b      	adds	r3, r3, r5
 80030fc:	181b      	adds	r3, r3, r0
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4940      	ldr	r1, [pc, #256]	; (8003204 <FindRoute+0x144>)
 8003102:	5a5b      	ldrh	r3, [r3, r1]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f2      	beq.n	80030ee <FindRoute+0x2e>
				&& ((array[sourceID - 1][col] >> 3) == desID)) {
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	b2b1      	uxth	r1, r6
 800310c:	428b      	cmp	r3, r1
 800310e:	d1ee      	bne.n	80030ee <FindRoute+0x2e>
			routeDist[desID - 1] = 1;
 8003110:	1e73      	subs	r3, r6, #1
 8003112:	4a3a      	ldr	r2, [pc, #232]	; (80031fc <FindRoute+0x13c>)
 8003114:	2101      	movs	r1, #1
 8003116:	54d1      	strb	r1, [r2, r3]
			route[0] = desID;
 8003118:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <FindRoute+0x138>)
 800311a:	701e      	strb	r6, [r3, #0]
			return col;
 800311c:	b2c0      	uxtb	r0, r0
			return col;
		}
	}

	return 0;
}
 800311e:	b00f      	add	sp, #60	; 0x3c
 8003120:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 1; i <= N; i++) {
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <FindRoute+0x68>
 8003126:	3301      	adds	r3, #1
 8003128:	4937      	ldr	r1, [pc, #220]	; (8003208 <FindRoute+0x148>)
 800312a:	7809      	ldrb	r1, [r1, #0]
 800312c:	4299      	cmp	r1, r3
 800312e:	db09      	blt.n	8003144 <FindRoute+0x84>
		if (i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003130:	429a      	cmp	r2, r3
 8003132:	d0f8      	beq.n	8003126 <FindRoute+0x66>
			routeDist[i - 1] = 0xFF; // Unknown distance function from source to i
 8003134:	1e59      	subs	r1, r3, #1
 8003136:	4831      	ldr	r0, [pc, #196]	; (80031fc <FindRoute+0x13c>)
 8003138:	24ff      	movs	r4, #255	; 0xff
 800313a:	5444      	strb	r4, [r0, r1]
			routePrev[i - 1] = 0;   // Previous node in optimal path from source
 800313c:	4830      	ldr	r0, [pc, #192]	; (8003200 <FindRoute+0x140>)
 800313e:	2400      	movs	r4, #0
 8003140:	5444      	strb	r4, [r0, r1]
 8003142:	e7f0      	b.n	8003126 <FindRoute+0x66>
	uint8_t u = 0;
 8003144:	2400      	movs	r4, #0
	while (!QnotEmpty(Q)) {
 8003146:	a801      	add	r0, sp, #4
 8003148:	f7ff f9ec 	bl	8002524 <QnotEmpty>
 800314c:	2800      	cmp	r0, #0
 800314e:	d10c      	bne.n	800316a <FindRoute+0xaa>
		u = minArr(routeDist, Q) + 1;				// Source node in first case
 8003150:	a901      	add	r1, sp, #4
 8003152:	482a      	ldr	r0, [pc, #168]	; (80031fc <FindRoute+0x13c>)
 8003154:	f7ff f9ca 	bl	80024ec <minArr>
 8003158:	3001      	adds	r0, #1
 800315a:	b2c4      	uxtb	r4, r0
		if (u == desID) {
 800315c:	42b4      	cmp	r4, r6
 800315e:	d004      	beq.n	800316a <FindRoute+0xaa>
			Q[u - 1] = 1;									// Remove u from Q
 8003160:	1e61      	subs	r1, r4, #1
 8003162:	ab01      	add	r3, sp, #4
 8003164:	2201      	movs	r2, #1
 8003166:	545a      	strb	r2, [r3, r1]
		for (uint8_t n = 1; n <= 6; n++)      		// Check all module ports
 8003168:	e003      	b.n	8003172 <FindRoute+0xb2>
	uint8_t u = 0;
 800316a:	2200      	movs	r2, #0
 800316c:	e025      	b.n	80031ba <FindRoute+0xfa>
		for (uint8_t n = 1; n <= 6; n++)      		// Check all module ports
 800316e:	3201      	adds	r2, #1
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	2a06      	cmp	r2, #6
 8003174:	d8e7      	bhi.n	8003146 <FindRoute+0x86>
			if (array[u - 1][n])		// There's a neighbor v at this port n
 8003176:	008b      	lsls	r3, r1, #2
 8003178:	185b      	adds	r3, r3, r1
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	185b      	adds	r3, r3, r1
 800317e:	189b      	adds	r3, r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4820      	ldr	r0, [pc, #128]	; (8003204 <FindRoute+0x144>)
 8003184:	5a1b      	ldrh	r3, [r3, r0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f1      	beq.n	800316e <FindRoute+0xae>
				v = (array[u - 1][n] >> 3);
 800318a:	08db      	lsrs	r3, r3, #3
 800318c:	b2db      	uxtb	r3, r3
				if (!Q[v - 1])								// v is still in Q
 800318e:	3b01      	subs	r3, #1
 8003190:	a801      	add	r0, sp, #4
 8003192:	5cc0      	ldrb	r0, [r0, r3]
 8003194:	2800      	cmp	r0, #0
 8003196:	d1ea      	bne.n	800316e <FindRoute+0xae>
					alt = routeDist[u - 1] + 1;					// Add one hop
 8003198:	4f18      	ldr	r7, [pc, #96]	; (80031fc <FindRoute+0x13c>)
 800319a:	5c78      	ldrb	r0, [r7, r1]
 800319c:	3001      	adds	r0, #1
 800319e:	b2c0      	uxtb	r0, r0
					if (alt < routeDist[v - 1]) // A shorter path to v has been found
 80031a0:	5cff      	ldrb	r7, [r7, r3]
 80031a2:	4287      	cmp	r7, r0
 80031a4:	d9e3      	bls.n	800316e <FindRoute+0xae>
						routeDist[v - 1] = alt;
 80031a6:	4f15      	ldr	r7, [pc, #84]	; (80031fc <FindRoute+0x13c>)
 80031a8:	54f8      	strb	r0, [r7, r3]
						routePrev[v - 1] = u;
 80031aa:	4815      	ldr	r0, [pc, #84]	; (8003200 <FindRoute+0x140>)
 80031ac:	54c4      	strb	r4, [r0, r3]
 80031ae:	e7de      	b.n	800316e <FindRoute+0xae>
		route[j++] = u;          			// Push the vertex onto the stack
 80031b0:	1c53      	adds	r3, r2, #1
 80031b2:	4911      	ldr	r1, [pc, #68]	; (80031f8 <FindRoute+0x138>)
 80031b4:	548c      	strb	r4, [r1, r2]
 80031b6:	b2da      	uxtb	r2, r3
		u = routePrev[u - 1];           	// Traverse from target to source
 80031b8:	0004      	movs	r4, r0
	while (routePrev[u - 1])   // Construct the shortest path with a stack route
 80031ba:	1e63      	subs	r3, r4, #1
 80031bc:	4910      	ldr	r1, [pc, #64]	; (8003200 <FindRoute+0x140>)
 80031be:	5cc8      	ldrb	r0, [r1, r3]
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d1f5      	bne.n	80031b0 <FindRoute+0xf0>
	for (int col = 1; col <= 6; col++) {
 80031c4:	2201      	movs	r2, #1
 80031c6:	e000      	b.n	80031ca <FindRoute+0x10a>
 80031c8:	3201      	adds	r2, #1
 80031ca:	2a06      	cmp	r2, #6
 80031cc:	dca7      	bgt.n	800311e <FindRoute+0x5e>
		if (array[sourceID - 1][col]
 80031ce:	00ab      	lsls	r3, r5, #2
 80031d0:	195b      	adds	r3, r3, r5
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	195b      	adds	r3, r3, r5
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	490a      	ldr	r1, [pc, #40]	; (8003204 <FindRoute+0x144>)
 80031dc:	5a5b      	ldrh	r3, [r3, r1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f2      	beq.n	80031c8 <FindRoute+0x108>
						== route[routeDist[desID - 1] - 1])) {
 80031e2:	08db      	lsrs	r3, r3, #3
 80031e4:	1e71      	subs	r1, r6, #1
 80031e6:	4c05      	ldr	r4, [pc, #20]	; (80031fc <FindRoute+0x13c>)
 80031e8:	5c61      	ldrb	r1, [r4, r1]
 80031ea:	3901      	subs	r1, #1
 80031ec:	4c02      	ldr	r4, [pc, #8]	; (80031f8 <FindRoute+0x138>)
 80031ee:	5c61      	ldrb	r1, [r4, r1]
				&& ((array[sourceID - 1][col] >> 3)
 80031f0:	428b      	cmp	r3, r1
 80031f2:	d1e9      	bne.n	80031c8 <FindRoute+0x108>
			return col;
 80031f4:	b2d0      	uxtb	r0, r2
 80031f6:	e792      	b.n	800311e <FindRoute+0x5e>
 80031f8:	20006200 	.word	0x20006200
 80031fc:	2000092c 	.word	0x2000092c
 8003200:	20000948 	.word	0x20000948
 8003204:	200002d0 	.word	0x200002d0
 8003208:	2000001c 	.word	0x2000001c

0800320c <remoteBootloaderUpdate>:
		uint8_t outport) {
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320e:	b087      	sub	sp, #28
 8003210:	0007      	movs	r7, r0
 8003212:	000e      	movs	r6, r1
 8003214:	9205      	str	r2, [sp, #20]
 8003216:	001c      	movs	r4, r3
	myOutport = FindRoute(myID, dst);
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <remoteBootloaderUpdate+0xd4>)
 800321a:	7818      	ldrb	r0, [r3, #0]
 800321c:	f7ff ff50 	bl	80030c0 <FindRoute>
 8003220:	9004      	str	r0, [sp, #16]
	if (outport && dst == myID) { /* This is a 'via port' update and I'm the last module */
 8003222:	2c00      	cmp	r4, #0
 8003224:	d003      	beq.n	800322e <remoteBootloaderUpdate+0x22>
 8003226:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <remoteBootloaderUpdate+0xd4>)
 8003228:	781d      	ldrb	r5, [r3, #0]
 800322a:	42b5      	cmp	r5, r6
 800322c:	d00d      	beq.n	800324a <remoteBootloaderUpdate+0x3e>
	} else if (outport == 0) { /* This is a remote update */
 800322e:	2c00      	cmp	r4, #0
 8003230:	d10d      	bne.n	800324e <remoteBootloaderUpdate+0x42>
		if (NumberOfHops(dst)== 1)
 8003232:	1e73      	subs	r3, r6, #1
 8003234:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <remoteBootloaderUpdate+0xd8>)
 8003236:	5cd3      	ldrb	r3, [r2, r3]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d003      	beq.n	8003244 <remoteBootloaderUpdate+0x38>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 800323c:	3b01      	subs	r3, #1
 800323e:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <remoteBootloaderUpdate+0xdc>)
 8003240:	5cd5      	ldrb	r5, [r2, r3]
 8003242:	e005      	b.n	8003250 <remoteBootloaderUpdate+0x44>
		lastModule = myID;
 8003244:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <remoteBootloaderUpdate+0xd4>)
 8003246:	781d      	ldrb	r5, [r3, #0]
 8003248:	e002      	b.n	8003250 <remoteBootloaderUpdate+0x44>
		myOutport = outport;
 800324a:	9404      	str	r4, [sp, #16]
 800324c:	e000      	b.n	8003250 <remoteBootloaderUpdate+0x44>
	uint8_t myOutport = 0, lastModule = 0;
 800324e:	2500      	movs	r5, #0
	if (src == myID) {
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <remoteBootloaderUpdate+0xd4>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	42bb      	cmp	r3, r7
 8003256:	d019      	beq.n	800328c <remoteBootloaderUpdate+0x80>
	SetupPortForRemoteBootloaderUpdate(inport);
 8003258:	9805      	ldr	r0, [sp, #20]
 800325a:	f7ff fdfd 	bl	8002e58 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800325e:	9804      	ldr	r0, [sp, #16]
 8003260:	f7ff fdfa 	bl	8002e58 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 8003264:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <remoteBootloaderUpdate+0xd4>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	42ab      	cmp	r3, r5
 800326a:	d032      	beq.n	80032d2 <remoteBootloaderUpdate+0xc6>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL,
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <remoteBootloaderUpdate+0xd4>)
 800326e:	7819      	ldrb	r1, [r3, #0]
 8003270:	2300      	movs	r3, #0
 8003272:	9303      	str	r3, [sp, #12]
 8003274:	3b01      	subs	r3, #1
 8003276:	9302      	str	r3, [sp, #8]
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	3303      	adds	r3, #3
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	000b      	movs	r3, r1
 8003280:	9a04      	ldr	r2, [sp, #16]
 8003282:	9805      	ldr	r0, [sp, #20]
 8003284:	f005 f9d8 	bl	8008638 <StartScastDMAStream>
}
 8003288:	b007      	add	sp, #28
 800328a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800328c:	f00b f860 	bl	800e350 <FreeRTOS_CLIGetOutputBuffer>
 8003290:	0007      	movs	r7, r0
		if (outport == 0)		// This is a remote module update
 8003292:	2c00      	cmp	r4, #0
 8003294:	d116      	bne.n	80032c4 <remoteBootloaderUpdate+0xb8>
			sprintf((char*) pcOutputString, pcRemoteBootloaderUpdateMessage,
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <remoteBootloaderUpdate+0xe0>)
 8003298:	6819      	ldr	r1, [r3, #0]
 800329a:	0032      	movs	r2, r6
 800329c:	f011 f800 	bl	80142a0 <siprintf>
		strcat((char*) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <remoteBootloaderUpdate+0xe4>)
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	0038      	movs	r0, r7
 80032a6:	f011 f81b 	bl	80142e0 <strcat>
				strlen((char*) pcOutputString), cmd50ms);
 80032aa:	0038      	movs	r0, r7
 80032ac:	f7fc ff34 	bl	8000118 <strlen>
		writePxITMutex(inport, (char*) pcOutputString,
 80032b0:	b282      	uxth	r2, r0
 80032b2:	2332      	movs	r3, #50	; 0x32
 80032b4:	0039      	movs	r1, r7
 80032b6:	9805      	ldr	r0, [sp, #20]
 80032b8:	f00a fe22 	bl	800df00 <writePxITMutex>
		Delay_ms(100);
 80032bc:	2064      	movs	r0, #100	; 0x64
 80032be:	f00c ffa3 	bl	8010208 <HAL_Delay>
 80032c2:	e7c9      	b.n	8003258 <remoteBootloaderUpdate+0x4c>
			sprintf((char*) pcOutputString,
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <remoteBootloaderUpdate+0xe8>)
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	0023      	movs	r3, r4
 80032ca:	0032      	movs	r2, r6
 80032cc:	f010 ffe8 	bl	80142a0 <siprintf>
 80032d0:	e7e6      	b.n	80032a0 <remoteBootloaderUpdate+0x94>
		SwapUartPins(GetUart(myOutport), REVERSED);
 80032d2:	9804      	ldr	r0, [sp, #16]
 80032d4:	f00a fdc8 	bl	800de68 <GetUart>
 80032d8:	2101      	movs	r1, #1
 80032da:	f00a fe5d 	bl	800df98 <SwapUartPins>
 80032de:	e7c5      	b.n	800326c <remoteBootloaderUpdate+0x60>
 80032e0:	20000896 	.word	0x20000896
 80032e4:	2000092c 	.word	0x2000092c
 80032e8:	20006200 	.word	0x20006200
 80032ec:	20000078 	.word	0x20000078
 80032f0:	20000080 	.word	0x20000080
 80032f4:	2000007c 	.word	0x2000007c

080032f8 <DisplayTopology>:

/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port) {
 80032f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fa:	b085      	sub	sp, #20
 80032fc:	0004      	movs	r4, r0
 80032fe:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8003300:	4d55      	ldr	r5, [pc, #340]	; (8003458 <DisplayTopology+0x160>)
 8003302:	4b56      	ldr	r3, [pc, #344]	; (800345c <DisplayTopology+0x164>)
 8003304:	002a      	movs	r2, r5
 8003306:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003308:	c243      	stmia	r2!, {r0, r1, r6}
 800330a:	0019      	movs	r1, r3
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	888b      	ldrh	r3, [r1, #4]
 8003312:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003314:	0028      	movs	r0, r5
 8003316:	f7fc feff 	bl	8000118 <strlen>
 800331a:	b282      	uxth	r2, r0
 800331c:	2301      	movs	r3, #1
 800331e:	425b      	negs	r3, r3
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	3333      	adds	r3, #51	; 0x33
 8003324:	0029      	movs	r1, r5
 8003326:	0020      	movs	r0, r4
 8003328:	f00a fdbc 	bl	800dea4 <writePxMutex>
			HAL_MAX_DELAY);
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800332c:	2501      	movs	r5, #1
 800332e:	e013      	b.n	8003358 <DisplayTopology+0x60>
		sprintf(pcUserMessage, "P%d\t", i);
 8003330:	4e49      	ldr	r6, [pc, #292]	; (8003458 <DisplayTopology+0x160>)
 8003332:	002a      	movs	r2, r5
 8003334:	494a      	ldr	r1, [pc, #296]	; (8003460 <DisplayTopology+0x168>)
 8003336:	0030      	movs	r0, r6
 8003338:	f010 ffb2 	bl	80142a0 <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 800333c:	0030      	movs	r0, r6
 800333e:	f7fc feeb 	bl	8000118 <strlen>
 8003342:	b282      	uxth	r2, r0
 8003344:	2301      	movs	r3, #1
 8003346:	425b      	negs	r3, r3
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	3333      	adds	r3, #51	; 0x33
 800334c:	0031      	movs	r1, r6
 800334e:	9803      	ldr	r0, [sp, #12]
 8003350:	f00a fda8 	bl	800dea4 <writePxMutex>
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8003354:	3501      	adds	r5, #1
 8003356:	b2ed      	uxtb	r5, r5
 8003358:	2d05      	cmp	r5, #5
 800335a:	d9e9      	bls.n	8003330 <DisplayTopology+0x38>
				HAL_MAX_DELAY);
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 800335c:	2301      	movs	r3, #1
 800335e:	425b      	negs	r3, r3
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	3333      	adds	r3, #51	; 0x33
 8003364:	2203      	movs	r2, #3
 8003366:	493f      	ldr	r1, [pc, #252]	; (8003464 <DisplayTopology+0x16c>)
 8003368:	9803      	ldr	r0, [sp, #12]
 800336a:	f00a fd9b 	bl	800dea4 <writePxMutex>

	/* Print each row */
	for (uint8_t row = 0; row < N; row++) {
 800336e:	2400      	movs	r4, #0
 8003370:	e031      	b.n	80033d6 <DisplayTopology+0xde>
		/* Connections */
		for (uint8_t col = 1; col <= NumOfPorts; col++) {
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t", 0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col] >> 3),
 8003372:	2307      	movs	r3, #7
 8003374:	4013      	ands	r3, r2
 8003376:	08d2      	lsrs	r2, r2, #3
 8003378:	493b      	ldr	r1, [pc, #236]	; (8003468 <DisplayTopology+0x170>)
 800337a:	4837      	ldr	r0, [pc, #220]	; (8003458 <DisplayTopology+0x160>)
 800337c:	f010 ff90 	bl	80142a0 <siprintf>
						(array[row][col] & 0x07));
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003380:	4f35      	ldr	r7, [pc, #212]	; (8003458 <DisplayTopology+0x160>)
 8003382:	0038      	movs	r0, r7
 8003384:	f7fc fec8 	bl	8000118 <strlen>
 8003388:	b282      	uxth	r2, r0
 800338a:	2301      	movs	r3, #1
 800338c:	425b      	negs	r3, r3
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	3333      	adds	r3, #51	; 0x33
 8003392:	0039      	movs	r1, r7
 8003394:	9803      	ldr	r0, [sp, #12]
 8003396:	f00a fd85 	bl	800dea4 <writePxMutex>
		for (uint8_t col = 1; col <= NumOfPorts; col++) {
 800339a:	3501      	adds	r5, #1
 800339c:	b2ed      	uxtb	r5, r5
 800339e:	2d05      	cmp	r5, #5
 80033a0:	d80e      	bhi.n	80033c0 <DisplayTopology+0xc8>
			if (!array[row][col])
 80033a2:	00b3      	lsls	r3, r6, #2
 80033a4:	199b      	adds	r3, r3, r6
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	199b      	adds	r3, r3, r6
 80033aa:	195b      	adds	r3, r3, r5
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4a2f      	ldr	r2, [pc, #188]	; (800346c <DisplayTopology+0x174>)
 80033b0:	5a9a      	ldrh	r2, [r3, r2]
 80033b2:	2a00      	cmp	r2, #0
 80033b4:	d1dd      	bne.n	8003372 <DisplayTopology+0x7a>
				sprintf(pcUserMessage, "%d\t", 0);
 80033b6:	492e      	ldr	r1, [pc, #184]	; (8003470 <DisplayTopology+0x178>)
 80033b8:	4827      	ldr	r0, [pc, #156]	; (8003458 <DisplayTopology+0x160>)
 80033ba:	f010 ff71 	bl	80142a0 <siprintf>
 80033be:	e7df      	b.n	8003380 <DisplayTopology+0x88>
					HAL_MAX_DELAY);
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 80033c0:	2301      	movs	r3, #1
 80033c2:	425b      	negs	r3, r3
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	3333      	adds	r3, #51	; 0x33
 80033c8:	2202      	movs	r2, #2
 80033ca:	492a      	ldr	r1, [pc, #168]	; (8003474 <DisplayTopology+0x17c>)
 80033cc:	9803      	ldr	r0, [sp, #12]
 80033ce:	f00a fd69 	bl	800dea4 <writePxMutex>
	for (uint8_t row = 0; row < N; row++) {
 80033d2:	3401      	adds	r4, #1
 80033d4:	b2e4      	uxtb	r4, r4
 80033d6:	4b28      	ldr	r3, [pc, #160]	; (8003478 <DisplayTopology+0x180>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	42a3      	cmp	r3, r4
 80033dc:	d930      	bls.n	8003440 <DisplayTopology+0x148>
		sprintf(pcUserMessage, "Module %d:\t", row + 1);
 80033de:	0026      	movs	r6, r4
 80033e0:	1c62      	adds	r2, r4, #1
 80033e2:	4d1d      	ldr	r5, [pc, #116]	; (8003458 <DisplayTopology+0x160>)
 80033e4:	4925      	ldr	r1, [pc, #148]	; (800347c <DisplayTopology+0x184>)
 80033e6:	0028      	movs	r0, r5
 80033e8:	f010 ff5a 	bl	80142a0 <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 80033ec:	0028      	movs	r0, r5
 80033ee:	f7fc fe93 	bl	8000118 <strlen>
 80033f2:	b282      	uxth	r2, r0
 80033f4:	2701      	movs	r7, #1
 80033f6:	427f      	negs	r7, r7
 80033f8:	9700      	str	r7, [sp, #0]
 80033fa:	2332      	movs	r3, #50	; 0x32
 80033fc:	0029      	movs	r1, r5
 80033fe:	9803      	ldr	r0, [sp, #12]
 8003400:	f00a fd50 	bl	800dea4 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003404:	2316      	movs	r3, #22
 8003406:	4363      	muls	r3, r4
 8003408:	4a18      	ldr	r2, [pc, #96]	; (800346c <DisplayTopology+0x174>)
 800340a:	5a9a      	ldrh	r2, [r3, r2]
 800340c:	0053      	lsls	r3, r2, #1
 800340e:	189b      	adds	r3, r3, r2
 8003410:	0059      	lsls	r1, r3, #1
 8003412:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <DisplayTopology+0x188>)
 8003414:	18c9      	adds	r1, r1, r3
 8003416:	2205      	movs	r2, #5
 8003418:	0028      	movs	r0, r5
 800341a:	f010 ff96 	bl	801434a <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 800341e:	9700      	str	r7, [sp, #0]
 8003420:	2332      	movs	r3, #50	; 0x32
 8003422:	2205      	movs	r2, #5
 8003424:	0029      	movs	r1, r5
 8003426:	9d03      	ldr	r5, [sp, #12]
 8003428:	0028      	movs	r0, r5
 800342a:	f00a fd3b 	bl	800dea4 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 800342e:	9700      	str	r7, [sp, #0]
 8003430:	2332      	movs	r3, #50	; 0x32
 8003432:	2201      	movs	r2, #1
 8003434:	4913      	ldr	r1, [pc, #76]	; (8003484 <DisplayTopology+0x18c>)
 8003436:	0028      	movs	r0, r5
 8003438:	f00a fd34 	bl	800dea4 <writePxMutex>
		for (uint8_t col = 1; col <= NumOfPorts; col++) {
 800343c:	2501      	movs	r5, #1
 800343e:	e7ae      	b.n	800339e <DisplayTopology+0xa6>
	}

	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8003440:	2301      	movs	r3, #1
 8003442:	425b      	negs	r3, r3
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	3333      	adds	r3, #51	; 0x33
 8003448:	2201      	movs	r2, #1
 800344a:	490f      	ldr	r1, [pc, #60]	; (8003488 <DisplayTopology+0x190>)
 800344c:	9803      	ldr	r0, [sp, #12]
 800344e:	f00a fd29 	bl	800dea4 <writePxMutex>
}
 8003452:	b005      	add	sp, #20
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	200008c0 	.word	0x200008c0
 800345c:	08017414 	.word	0x08017414
 8003460:	08017428 	.word	0x08017428
 8003464:	08017c2c 	.word	0x08017c2c
 8003468:	08017440 	.word	0x08017440
 800346c:	200002d0 	.word	0x200002d0
 8003470:	0801743c 	.word	0x0801743c
 8003474:	080172bc 	.word	0x080172bc
 8003478:	2000001c 	.word	0x2000001c
 800347c:	08017430 	.word	0x08017430
 8003480:	0801747c 	.word	0x0801747c
 8003484:	08017424 	.word	0x08017424
 8003488:	08019008 	.word	0x08019008

0800348c <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port) {
 800348c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348e:	b083      	sub	sp, #12
 8003490:	0005      	movs	r5, r0
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 8003492:	4c2d      	ldr	r4, [pc, #180]	; (8003548 <DisplayPortsDir+0xbc>)
 8003494:	492d      	ldr	r1, [pc, #180]	; (800354c <DisplayPortsDir+0xc0>)
 8003496:	0023      	movs	r3, r4
 8003498:	000a      	movs	r2, r1
 800349a:	ca43      	ldmia	r2!, {r0, r1, r6}
 800349c:	c343      	stmia	r3!, {r0, r1, r6}
 800349e:	ca43      	ldmia	r2!, {r0, r1, r6}
 80034a0:	c343      	stmia	r3!, {r0, r1, r6}
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	601a      	str	r2, [r3, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 80034a6:	0020      	movs	r0, r4
 80034a8:	f7fc fe36 	bl	8000118 <strlen>
 80034ac:	b282      	uxth	r2, r0
 80034ae:	2301      	movs	r3, #1
 80034b0:	425b      	negs	r3, r3
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	3333      	adds	r3, #51	; 0x33
 80034b6:	0021      	movs	r1, r4
 80034b8:	0028      	movs	r0, r5
 80034ba:	f00a fcf3 	bl	800dea4 <writePxMutex>
			HAL_MAX_DELAY);

	for (uint8_t i = 1; i <= N; i++) {
 80034be:	2601      	movs	r6, #1
 80034c0:	e023      	b.n	800350a <DisplayPortsDir+0x7e>
		for (uint8_t p = 1; p <= MaxNumOfPorts; p++) {
 80034c2:	3401      	adds	r4, #1
 80034c4:	b2e4      	uxtb	r4, r4
 80034c6:	2c0a      	cmp	r4, #10
 80034c8:	d81d      	bhi.n	8003506 <DisplayPortsDir+0x7a>
			if ((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80034ca:	1e73      	subs	r3, r6, #1
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4a20      	ldr	r2, [pc, #128]	; (8003550 <DisplayPortsDir+0xc4>)
 80034d0:	5a9a      	ldrh	r2, [r3, r2]
 80034d2:	1e61      	subs	r1, r4, #1
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	410b      	asrs	r3, r1
 80034da:	4213      	tst	r3, r2
 80034dc:	d0f1      	beq.n	80034c2 <DisplayPortsDir+0x36>
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 80034de:	4f1a      	ldr	r7, [pc, #104]	; (8003548 <DisplayPortsDir+0xbc>)
 80034e0:	0023      	movs	r3, r4
 80034e2:	0032      	movs	r2, r6
 80034e4:	491b      	ldr	r1, [pc, #108]	; (8003554 <DisplayPortsDir+0xc8>)
 80034e6:	0038      	movs	r0, r7
 80034e8:	f010 feda 	bl	80142a0 <siprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage),
 80034ec:	0038      	movs	r0, r7
 80034ee:	f7fc fe13 	bl	8000118 <strlen>
 80034f2:	b282      	uxth	r2, r0
 80034f4:	2301      	movs	r3, #1
 80034f6:	425b      	negs	r3, r3
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	3333      	adds	r3, #51	; 0x33
 80034fc:	0039      	movs	r1, r7
 80034fe:	0028      	movs	r0, r5
 8003500:	f00a fcd0 	bl	800dea4 <writePxMutex>
 8003504:	e7dd      	b.n	80034c2 <DisplayPortsDir+0x36>
	for (uint8_t i = 1; i <= N; i++) {
 8003506:	3601      	adds	r6, #1
 8003508:	b2f6      	uxtb	r6, r6
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <DisplayPortsDir+0xcc>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	42b3      	cmp	r3, r6
 8003510:	d301      	bcc.n	8003516 <DisplayPortsDir+0x8a>
		for (uint8_t p = 1; p <= MaxNumOfPorts; p++) {
 8003512:	2401      	movs	r4, #1
 8003514:	e7d7      	b.n	80034c6 <DisplayPortsDir+0x3a>
						cmd50ms, HAL_MAX_DELAY);
			}
		}
	}

	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 8003516:	4c0c      	ldr	r4, [pc, #48]	; (8003548 <DisplayPortsDir+0xbc>)
 8003518:	4910      	ldr	r1, [pc, #64]	; (800355c <DisplayPortsDir+0xd0>)
 800351a:	0023      	movs	r3, r4
 800351c:	000a      	movs	r2, r1
 800351e:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003520:	c343      	stmia	r3!, {r0, r1, r6}
 8003522:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003524:	c343      	stmia	r3!, {r0, r1, r6}
 8003526:	ca03      	ldmia	r2!, {r0, r1}
 8003528:	c303      	stmia	r3!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 800352a:	0020      	movs	r0, r4
 800352c:	f7fc fdf4 	bl	8000118 <strlen>
 8003530:	b282      	uxth	r2, r0
 8003532:	2301      	movs	r3, #1
 8003534:	425b      	negs	r3, r3
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	3333      	adds	r3, #51	; 0x33
 800353a:	0021      	movs	r1, r4
 800353c:	0028      	movs	r0, r5
 800353e:	f00a fcb1 	bl	800dea4 <writePxMutex>
			HAL_MAX_DELAY);
}
 8003542:	b003      	add	sp, #12
 8003544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	200008c0 	.word	0x200008c0
 800354c:	080173c4 	.word	0x080173c4
 8003550:	200065d0 	.word	0x200065d0
 8003554:	080173e0 	.word	0x080173e0
 8003558:	2000001c 	.word	0x2000001c
 800355c:	080173f4 	.word	0x080173f4

08003560 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port) {
 8003560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003562:	46c6      	mov	lr, r8
 8003564:	b500      	push	{lr}
 8003566:	b084      	sub	sp, #16
 8003568:	0007      	movs	r7, r0
	int8_t *pcOutputString;
	uint16_t temp = 0;

	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800356a:	f00a fef1 	bl	800e350 <FreeRTOS_CLIGetOutputBuffer>
 800356e:	0004      	movs	r4, r0

	strcpy((char*) pcOutputString, "");
 8003570:	2300      	movs	r3, #0
 8003572:	7003      	strb	r3, [r0, #0]

	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8003574:	4b93      	ldr	r3, [pc, #588]	; (80037c4 <DisplayModuleStatus+0x264>)
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	4d93      	ldr	r5, [pc, #588]	; (80037c8 <DisplayModuleStatus+0x268>)
 800357a:	4994      	ldr	r1, [pc, #592]	; (80037cc <DisplayModuleStatus+0x26c>)
 800357c:	0028      	movs	r0, r5
 800357e:	f010 fe8f 	bl	80142a0 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 8003582:	0029      	movs	r1, r5
 8003584:	0020      	movs	r0, r4
 8003586:	f010 feab 	bl	80142e0 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 800358a:	4b91      	ldr	r3, [pc, #580]	; (80037d0 <DisplayModuleStatus+0x270>)
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	4991      	ldr	r1, [pc, #580]	; (80037d4 <DisplayModuleStatus+0x274>)
 8003590:	0028      	movs	r0, r5
 8003592:	f010 fe85 	bl	80142a0 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 8003596:	0029      	movs	r1, r5
 8003598:	0020      	movs	r0, r4
 800359a:	f010 fea1 	bl	80142e0 <strcat>

	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor,
 800359e:	2304      	movs	r3, #4
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	3b02      	subs	r3, #2
 80035a4:	2200      	movs	r2, #0
 80035a6:	498c      	ldr	r1, [pc, #560]	; (80037d8 <DisplayModuleStatus+0x278>)
 80035a8:	0028      	movs	r0, r5
 80035aa:	f010 fe79 	bl	80142a0 <siprintf>
			_firmMinor, _firmPatch);
	strcat((char*) pcOutputString, pcUserMessage);
 80035ae:	0029      	movs	r1, r5
 80035b0:	0020      	movs	r0, r4
 80035b2:	f010 fe95 	bl	80142e0 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 80035b6:	4a89      	ldr	r2, [pc, #548]	; (80037dc <DisplayModuleStatus+0x27c>)
 80035b8:	4989      	ldr	r1, [pc, #548]	; (80037e0 <DisplayModuleStatus+0x280>)
 80035ba:	0028      	movs	r0, r5
 80035bc:	f010 fe70 	bl	80142a0 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 80035c0:	0029      	movs	r1, r5
 80035c2:	0020      	movs	r0, r4
 80035c4:	f010 fe8c 	bl	80142e0 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 80035c8:	4a86      	ldr	r2, [pc, #536]	; (80037e4 <DisplayModuleStatus+0x284>)
 80035ca:	4987      	ldr	r1, [pc, #540]	; (80037e8 <DisplayModuleStatus+0x288>)
 80035cc:	0028      	movs	r0, r5
 80035ce:	f010 fe67 	bl	80142a0 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 80035d2:	0029      	movs	r1, r5
 80035d4:	0020      	movs	r0, r4
 80035d6:	f010 fe83 	bl	80142e0 <strcat>

	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 80035da:	4b84      	ldr	r3, [pc, #528]	; (80037ec <DisplayModuleStatus+0x28c>)
 80035dc:	002a      	movs	r2, r5
 80035de:	cb43      	ldmia	r3!, {r0, r1, r6}
 80035e0:	c243      	stmia	r2!, {r0, r1, r6}
 80035e2:	0019      	movs	r1, r3
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	888b      	ldrh	r3, [r1, #4]
 80035ea:	8093      	strh	r3, [r2, #4]
 80035ec:	798b      	ldrb	r3, [r1, #6]
 80035ee:	7193      	strb	r3, [r2, #6]
	strcat((char*) pcOutputString, pcUserMessage);
 80035f0:	0029      	movs	r1, r5
 80035f2:	0020      	movs	r0, r4
 80035f4:	f010 fe74 	bl	80142e0 <strcat>
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 80035f8:	2501      	movs	r5, #1
 80035fa:	e00d      	b.n	8003618 <DisplayModuleStatus+0xb8>
		sprintf(pcUserMessage, "P%d: ", i);
		strcat((char*) pcOutputString, pcUserMessage);
		switch (portStatus[i]) {
		case FREE:
			sprintf(pcUserMessage, "Free\n\r");
 80035fc:	4b72      	ldr	r3, [pc, #456]	; (80037c8 <DisplayModuleStatus+0x268>)
 80035fe:	4a7c      	ldr	r2, [pc, #496]	; (80037f0 <DisplayModuleStatus+0x290>)
 8003600:	6811      	ldr	r1, [r2, #0]
 8003602:	6019      	str	r1, [r3, #0]
 8003604:	8891      	ldrh	r1, [r2, #4]
 8003606:	8099      	strh	r1, [r3, #4]
 8003608:	7992      	ldrb	r2, [r2, #6]
 800360a:	719a      	strb	r2, [r3, #6]
			sprintf(pcUserMessage, "Connected to a button/switch\n\r");
			break;
		default:
			break;
		}
		strcat((char*) pcOutputString, pcUserMessage);
 800360c:	496e      	ldr	r1, [pc, #440]	; (80037c8 <DisplayModuleStatus+0x268>)
 800360e:	0020      	movs	r0, r4
 8003610:	f010 fe66 	bl	80142e0 <strcat>
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8003614:	3501      	adds	r5, #1
 8003616:	b2ed      	uxtb	r5, r5
 8003618:	2d05      	cmp	r5, #5
 800361a:	d83b      	bhi.n	8003694 <DisplayModuleStatus+0x134>
		sprintf(pcUserMessage, "P%d: ", i);
 800361c:	4e6a      	ldr	r6, [pc, #424]	; (80037c8 <DisplayModuleStatus+0x268>)
 800361e:	002a      	movs	r2, r5
 8003620:	4974      	ldr	r1, [pc, #464]	; (80037f4 <DisplayModuleStatus+0x294>)
 8003622:	0030      	movs	r0, r6
 8003624:	f010 fe3c 	bl	80142a0 <siprintf>
		strcat((char*) pcOutputString, pcUserMessage);
 8003628:	0031      	movs	r1, r6
 800362a:	0020      	movs	r0, r4
 800362c:	f010 fe58 	bl	80142e0 <strcat>
		switch (portStatus[i]) {
 8003630:	4b71      	ldr	r3, [pc, #452]	; (80037f8 <DisplayModuleStatus+0x298>)
 8003632:	5d5b      	ldrb	r3, [r3, r5]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d8e9      	bhi.n	800360c <DisplayModuleStatus+0xac>
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4a70      	ldr	r2, [pc, #448]	; (80037fc <DisplayModuleStatus+0x29c>)
 800363c:	58d3      	ldr	r3, [r2, r3]
 800363e:	469f      	mov	pc, r3
			sprintf(pcUserMessage, "Receiving messages\n\r");
 8003640:	4961      	ldr	r1, [pc, #388]	; (80037c8 <DisplayModuleStatus+0x268>)
 8003642:	486f      	ldr	r0, [pc, #444]	; (8003800 <DisplayModuleStatus+0x2a0>)
 8003644:	000b      	movs	r3, r1
 8003646:	0002      	movs	r2, r0
 8003648:	ca43      	ldmia	r2!, {r0, r1, r6}
 800364a:	c343      	stmia	r3!, {r0, r1, r6}
 800364c:	ca03      	ldmia	r2!, {r0, r1}
 800364e:	c303      	stmia	r3!, {r0, r1}
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	701a      	strb	r2, [r3, #0]
			break;
 8003654:	e7da      	b.n	800360c <DisplayModuleStatus+0xac>
			sprintf(pcUserMessage, "Streaming\n\r");
 8003656:	4a5c      	ldr	r2, [pc, #368]	; (80037c8 <DisplayModuleStatus+0x268>)
 8003658:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <DisplayModuleStatus+0x2a4>)
 800365a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800365c:	c243      	stmia	r2!, {r0, r1, r6}
			break;
 800365e:	e7d5      	b.n	800360c <DisplayModuleStatus+0xac>
			sprintf(pcUserMessage, "Receiving user commands\n\r");
 8003660:	4959      	ldr	r1, [pc, #356]	; (80037c8 <DisplayModuleStatus+0x268>)
 8003662:	4869      	ldr	r0, [pc, #420]	; (8003808 <DisplayModuleStatus+0x2a8>)
 8003664:	000b      	movs	r3, r1
 8003666:	0002      	movs	r2, r0
 8003668:	ca43      	ldmia	r2!, {r0, r1, r6}
 800366a:	c343      	stmia	r3!, {r0, r1, r6}
 800366c:	ca43      	ldmia	r2!, {r0, r1, r6}
 800366e:	c343      	stmia	r3!, {r0, r1, r6}
 8003670:	8812      	ldrh	r2, [r2, #0]
 8003672:	801a      	strh	r2, [r3, #0]
			break;
 8003674:	e7ca      	b.n	800360c <DisplayModuleStatus+0xac>
			sprintf(pcUserMessage, "Connected to a button/switch\n\r");
 8003676:	4954      	ldr	r1, [pc, #336]	; (80037c8 <DisplayModuleStatus+0x268>)
 8003678:	4864      	ldr	r0, [pc, #400]	; (800380c <DisplayModuleStatus+0x2ac>)
 800367a:	000b      	movs	r3, r1
 800367c:	0002      	movs	r2, r0
 800367e:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003680:	c343      	stmia	r3!, {r0, r1, r6}
 8003682:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003684:	c343      	stmia	r3!, {r0, r1, r6}
 8003686:	6811      	ldr	r1, [r2, #0]
 8003688:	6019      	str	r1, [r3, #0]
 800368a:	8891      	ldrh	r1, [r2, #4]
 800368c:	8099      	strh	r1, [r3, #4]
 800368e:	7992      	ldrb	r2, [r2, #6]
 8003690:	719a      	strb	r2, [r3, #6]
			break;
 8003692:	e7bb      	b.n	800360c <DisplayModuleStatus+0xac>
	}

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 8003694:	494c      	ldr	r1, [pc, #304]	; (80037c8 <DisplayModuleStatus+0x268>)
 8003696:	485e      	ldr	r0, [pc, #376]	; (8003810 <DisplayModuleStatus+0x2b0>)
 8003698:	000b      	movs	r3, r1
 800369a:	0002      	movs	r2, r0
 800369c:	ca61      	ldmia	r2!, {r0, r5, r6}
 800369e:	c361      	stmia	r3!, {r0, r5, r6}
 80036a0:	ca61      	ldmia	r2!, {r0, r5, r6}
 80036a2:	c361      	stmia	r3!, {r0, r5, r6}
	strcat((char*) pcOutputString, pcUserMessage);
 80036a4:	0020      	movs	r0, r4
 80036a6:	f010 fe1b 	bl	80142e0 <strcat>
	for (char i = 1; i <= 6; i++) {
 80036aa:	2601      	movs	r6, #1
 80036ac:	e00b      	b.n	80036c6 <DisplayModuleStatus+0x166>
		if (streamDMA[i - 1].Instance == 0) {
			sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 80036ae:	4d46      	ldr	r5, [pc, #280]	; (80037c8 <DisplayModuleStatus+0x268>)
 80036b0:	0032      	movs	r2, r6
 80036b2:	4958      	ldr	r1, [pc, #352]	; (8003814 <DisplayModuleStatus+0x2b4>)
 80036b4:	0028      	movs	r0, r5
 80036b6:	f010 fdf3 	bl	80142a0 <siprintf>
			strcat((char*) pcOutputString, pcUserMessage);
 80036ba:	0029      	movs	r1, r5
 80036bc:	0020      	movs	r0, r4
 80036be:	f010 fe0f 	bl	80142e0 <strcat>
	for (char i = 1; i <= 6; i++) {
 80036c2:	3601      	adds	r6, #1
 80036c4:	b2f6      	uxtb	r6, r6
 80036c6:	2e06      	cmp	r6, #6
 80036c8:	d822      	bhi.n	8003710 <DisplayModuleStatus+0x1b0>
		if (streamDMA[i - 1].Instance == 0) {
 80036ca:	1e75      	subs	r5, r6, #1
 80036cc:	00eb      	lsls	r3, r5, #3
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	00da      	lsls	r2, r3, #3
 80036d2:	4b51      	ldr	r3, [pc, #324]	; (8003818 <DisplayModuleStatus+0x2b8>)
 80036d4:	58d3      	ldr	r3, [r2, r3]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0e9      	beq.n	80036ae <DisplayModuleStatus+0x14e>
		} else {
			sprintf(pcUserMessage,
					"\n\rStreaming DMA %d is streaming from P%d to P%d", i,
					GetPort(streamDMA[i - 1].Parent),
 80036da:	00eb      	lsls	r3, r5, #3
 80036dc:	1b5b      	subs	r3, r3, r5
 80036de:	00da      	lsls	r2, r3, #3
 80036e0:	4b4d      	ldr	r3, [pc, #308]	; (8003818 <DisplayModuleStatus+0x2b8>)
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80036e6:	f007 fc99 	bl	800b01c <GetPort>
 80036ea:	9003      	str	r0, [sp, #12]
					GetPort(dmaStreamDst[i - 1]));
 80036ec:	00ad      	lsls	r5, r5, #2
 80036ee:	4b4b      	ldr	r3, [pc, #300]	; (800381c <DisplayModuleStatus+0x2bc>)
 80036f0:	58e8      	ldr	r0, [r5, r3]
 80036f2:	f007 fc93 	bl	800b01c <GetPort>
			sprintf(pcUserMessage,
 80036f6:	4d34      	ldr	r5, [pc, #208]	; (80037c8 <DisplayModuleStatus+0x268>)
 80036f8:	9000      	str	r0, [sp, #0]
 80036fa:	9b03      	ldr	r3, [sp, #12]
 80036fc:	0032      	movs	r2, r6
 80036fe:	4948      	ldr	r1, [pc, #288]	; (8003820 <DisplayModuleStatus+0x2c0>)
 8003700:	0028      	movs	r0, r5
 8003702:	f010 fdcd 	bl	80142a0 <siprintf>
			strcat((char*) pcOutputString, pcUserMessage);
 8003706:	0029      	movs	r1, r5
 8003708:	0020      	movs	r0, r4
 800370a:	f010 fde9 	bl	80142e0 <strcat>
 800370e:	e7d8      	b.n	80036c2 <DisplayModuleStatus+0x162>
		}
	}
	strcat((char*) pcOutputString, "\n\r");
 8003710:	0020      	movs	r0, r4
 8003712:	f7fc fd01 	bl	8000118 <strlen>
 8003716:	1820      	adds	r0, r4, r0
 8003718:	2203      	movs	r2, #3
 800371a:	4942      	ldr	r1, [pc, #264]	; (8003824 <DisplayModuleStatus+0x2c4>)
 800371c:	f00f fe59 	bl	80133d2 <memcpy>

	/* Ports direction */
	strcat((char*) pcOutputString, "\n\rThese ports are reversed: ");
 8003720:	0020      	movs	r0, r4
 8003722:	f7fc fcf9 	bl	8000118 <strlen>
 8003726:	1820      	adds	r0, r4, r0
 8003728:	221d      	movs	r2, #29
 800372a:	493f      	ldr	r1, [pc, #252]	; (8003828 <DisplayModuleStatus+0x2c8>)
 800372c:	f00f fe51 	bl	80133d2 <memcpy>
	temp = strlen((char*) pcOutputString);
 8003730:	0020      	movs	r0, r4
 8003732:	f7fc fcf1 	bl	8000118 <strlen>
 8003736:	4680      	mov	r8, r0
	for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8003738:	2501      	movs	r5, #1
 800373a:	e001      	b.n	8003740 <DisplayModuleStatus+0x1e0>
 800373c:	3501      	adds	r5, #1
 800373e:	b2ed      	uxtb	r5, r5
 8003740:	2d05      	cmp	r5, #5
 8003742:	d816      	bhi.n	8003772 <DisplayModuleStatus+0x212>
		if ((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <DisplayModuleStatus+0x264>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	3b01      	subs	r3, #1
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4a37      	ldr	r2, [pc, #220]	; (800382c <DisplayModuleStatus+0x2cc>)
 800374e:	5a9a      	ldrh	r2, [r3, r2]
 8003750:	1e69      	subs	r1, r5, #1
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	410b      	asrs	r3, r1
 8003758:	4213      	tst	r3, r2
 800375a:	d0ef      	beq.n	800373c <DisplayModuleStatus+0x1dc>
		{
			sprintf(pcUserMessage, "P%d ", p);
 800375c:	4e1a      	ldr	r6, [pc, #104]	; (80037c8 <DisplayModuleStatus+0x268>)
 800375e:	002a      	movs	r2, r5
 8003760:	4933      	ldr	r1, [pc, #204]	; (8003830 <DisplayModuleStatus+0x2d0>)
 8003762:	0030      	movs	r0, r6
 8003764:	f010 fd9c 	bl	80142a0 <siprintf>
			strcat((char*) pcOutputString, pcUserMessage);
 8003768:	0031      	movs	r1, r6
 800376a:	0020      	movs	r0, r4
 800376c:	f010 fdb8 	bl	80142e0 <strcat>
 8003770:	e7e4      	b.n	800373c <DisplayModuleStatus+0x1dc>
		}
	}
	if (temp == strlen((char*) pcOutputString)) { /* All ports are normal */
 8003772:	0020      	movs	r0, r4
 8003774:	f7fc fcd0 	bl	8000118 <strlen>
 8003778:	4643      	mov	r3, r8
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	0c1b      	lsrs	r3, r3, #16
 800377e:	4298      	cmp	r0, r3
 8003780:	d00d      	beq.n	800379e <DisplayModuleStatus+0x23e>
		strcat((char*) pcOutputString, "None");
	}
	strcat((char*) pcOutputString, "\n\r");
 8003782:	0020      	movs	r0, r4
 8003784:	f7fc fcc8 	bl	8000118 <strlen>
 8003788:	1820      	adds	r0, r4, r0
 800378a:	2203      	movs	r2, #3
 800378c:	4925      	ldr	r1, [pc, #148]	; (8003824 <DisplayModuleStatus+0x2c4>)
 800378e:	f00f fe20 	bl	80133d2 <memcpy>

	/* Display output */
	if (port)
 8003792:	2f00      	cmp	r7, #0
 8003794:	d109      	bne.n	80037aa <DisplayModuleStatus+0x24a>
		writePxMutex(port, (char*) pcOutputString,
				strlen((char*) pcOutputString), cmd50ms, HAL_MAX_DELAY);

}
 8003796:	b004      	add	sp, #16
 8003798:	bc04      	pop	{r2}
 800379a:	4690      	mov	r8, r2
 800379c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char*) pcOutputString, "None");
 800379e:	1820      	adds	r0, r4, r0
 80037a0:	2205      	movs	r2, #5
 80037a2:	4924      	ldr	r1, [pc, #144]	; (8003834 <DisplayModuleStatus+0x2d4>)
 80037a4:	f00f fe15 	bl	80133d2 <memcpy>
 80037a8:	e7eb      	b.n	8003782 <DisplayModuleStatus+0x222>
				strlen((char*) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 80037aa:	0020      	movs	r0, r4
 80037ac:	f7fc fcb4 	bl	8000118 <strlen>
		writePxMutex(port, (char*) pcOutputString,
 80037b0:	b282      	uxth	r2, r0
 80037b2:	2301      	movs	r3, #1
 80037b4:	425b      	negs	r3, r3
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	3333      	adds	r3, #51	; 0x33
 80037ba:	0021      	movs	r1, r4
 80037bc:	0038      	movs	r0, r7
 80037be:	f00a fb71 	bl	800dea4 <writePxMutex>
}
 80037c2:	e7e8      	b.n	8003796 <DisplayModuleStatus+0x236>
 80037c4:	20000896 	.word	0x20000896
 80037c8:	200008c0 	.word	0x200008c0
 80037cc:	08017208 	.word	0x08017208
 80037d0:	200002cf 	.word	0x200002cf
 80037d4:	08017224 	.word	0x08017224
 80037d8:	08017240 	.word	0x08017240
 80037dc:	08017260 	.word	0x08017260
 80037e0:	0801726c 	.word	0x0801726c
 80037e4:	08017284 	.word	0x08017284
 80037e8:	08017290 	.word	0x08017290
 80037ec:	080172ac 	.word	0x080172ac
 80037f0:	080172c8 	.word	0x080172c8
 80037f4:	080172c0 	.word	0x080172c0
 80037f8:	20000910 	.word	0x20000910
 80037fc:	080171e4 	.word	0x080171e4
 8003800:	080172d0 	.word	0x080172d0
 8003804:	080172e8 	.word	0x080172e8
 8003808:	080172f4 	.word	0x080172f4
 800380c:	08017310 	.word	0x08017310
 8003810:	08017330 	.word	0x08017330
 8003814:	08017348 	.word	0x08017348
 8003818:	20001144 	.word	0x20001144
 800381c:	20000c7c 	.word	0x20000c7c
 8003820:	08017364 	.word	0x08017364
 8003824:	080172bc 	.word	0x080172bc
 8003828:	08017394 	.word	0x08017394
 800382c:	200065d0 	.word	0x200065d0
 8003830:	080173b4 	.word	0x080173b4
 8003834:	080173bc 	.word	0x080173bc

08003838 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string) {
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	0005      	movs	r5, r0
	uint8_t id = 0, i = 0;

	if (!strcmp(string, "me")) /* Check keywords */
 800383c:	4929      	ldr	r1, [pc, #164]	; (80038e4 <GetID+0xac>)
 800383e:	f7fc fc61 	bl	8000104 <strcmp>
 8003842:	2800      	cmp	r0, #0
 8003844:	d00a      	beq.n	800385c <GetID+0x24>
		return myID;
	else if (!strcmp(string, "all"))
 8003846:	4928      	ldr	r1, [pc, #160]	; (80038e8 <GetID+0xb0>)
 8003848:	0028      	movs	r0, r5
 800384a:	f7fc fc5b 	bl	8000104 <strcmp>
 800384e:	2800      	cmp	r0, #0
 8003850:	d044      	beq.n	80038dc <GetID+0xa4>
		return BOS_BROADCAST;
	else if (string[0] == '#') /* Check IDs */
 8003852:	782e      	ldrb	r6, [r5, #0]
 8003854:	2e23      	cmp	r6, #35	; 0x23
 8003856:	d004      	beq.n	8003862 <GetID+0x2a>
		else
			return BOS_ERR_WrongID;
	} else /* Check alias */
	{
		/* Check module alias */
		for (i = 0; i < N; i++) {
 8003858:	2400      	movs	r4, #0
 800385a:	e016      	b.n	800388a <GetID+0x52>
		return myID;
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <GetID+0xb4>)
 800385e:	7818      	ldrb	r0, [r3, #0]
		}

		return BOS_ERR_WrongName;
	}

}
 8003860:	bd70      	pop	{r4, r5, r6, pc}
		id = atol(string + 1);
 8003862:	1c68      	adds	r0, r5, #1
 8003864:	f00f fd43 	bl	80132ee <atol>
 8003868:	b2c0      	uxtb	r0, r0
		if (id > 0 && id <= N)
 800386a:	2800      	cmp	r0, #0
 800386c:	d003      	beq.n	8003876 <GetID+0x3e>
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <GetID+0xb8>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	4283      	cmp	r3, r0
 8003874:	d205      	bcs.n	8003882 <GetID+0x4a>
		else if (id == myID)
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <GetID+0xb4>)
 8003878:	781c      	ldrb	r4, [r3, #0]
 800387a:	4284      	cmp	r4, r0
 800387c:	d130      	bne.n	80038e0 <GetID+0xa8>
			return myID;
 800387e:	b220      	sxth	r0, r4
 8003880:	e7ee      	b.n	8003860 <GetID+0x28>
			return id;
 8003882:	b200      	sxth	r0, r0
 8003884:	e7ec      	b.n	8003860 <GetID+0x28>
		for (i = 0; i < N; i++) {
 8003886:	3401      	adds	r4, #1
 8003888:	b2e4      	uxtb	r4, r4
 800388a:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <GetID+0xb8>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	42a3      	cmp	r3, r4
 8003890:	d90d      	bls.n	80038ae <GetID+0x76>
			if (!strcmp(string, moduleAlias[i]) && (*string != 0))
 8003892:	00a3      	lsls	r3, r4, #2
 8003894:	191b      	adds	r3, r3, r4
 8003896:	0059      	lsls	r1, r3, #1
 8003898:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <GetID+0xbc>)
 800389a:	18c9      	adds	r1, r1, r3
 800389c:	0028      	movs	r0, r5
 800389e:	f7fc fc31 	bl	8000104 <strcmp>
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d1ef      	bne.n	8003886 <GetID+0x4e>
 80038a6:	2e00      	cmp	r6, #0
 80038a8:	d0ed      	beq.n	8003886 <GetID+0x4e>
				return (i);
 80038aa:	b220      	sxth	r0, r4
 80038ac:	e7d8      	b.n	8003860 <GetID+0x28>
		for (i = 0; i < MaxNumOfGroups; i++) {
 80038ae:	2600      	movs	r6, #0
 80038b0:	2e09      	cmp	r6, #9
 80038b2:	d811      	bhi.n	80038d8 <GetID+0xa0>
			if (!strcmp(string, groupAlias[i]))
 80038b4:	00b3      	lsls	r3, r6, #2
 80038b6:	199b      	adds	r3, r3, r6
 80038b8:	005a      	lsls	r2, r3, #1
 80038ba:	490f      	ldr	r1, [pc, #60]	; (80038f8 <GetID+0xc0>)
 80038bc:	1889      	adds	r1, r1, r2
 80038be:	0028      	movs	r0, r5
 80038c0:	f7fc fc20 	bl	8000104 <strcmp>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d002      	beq.n	80038ce <GetID+0x96>
		for (i = 0; i < MaxNumOfGroups; i++) {
 80038c8:	3601      	adds	r6, #1
 80038ca:	b2f6      	uxtb	r6, r6
 80038cc:	e7f0      	b.n	80038b0 <GetID+0x78>
				return (BOS_MULTICAST | (i << 8));
 80038ce:	0234      	lsls	r4, r6, #8
 80038d0:	20fe      	movs	r0, #254	; 0xfe
 80038d2:	4320      	orrs	r0, r4
 80038d4:	b200      	sxth	r0, r0
 80038d6:	e7c3      	b.n	8003860 <GetID+0x28>
		return BOS_ERR_WrongName;
 80038d8:	2064      	movs	r0, #100	; 0x64
 80038da:	e7c1      	b.n	8003860 <GetID+0x28>
		return BOS_BROADCAST;
 80038dc:	20ff      	movs	r0, #255	; 0xff
 80038de:	e7bf      	b.n	8003860 <GetID+0x28>
			return BOS_ERR_WrongID;
 80038e0:	2066      	movs	r0, #102	; 0x66
 80038e2:	e7bd      	b.n	8003860 <GetID+0x28>
 80038e4:	08017448 	.word	0x08017448
 80038e8:	0801744c 	.word	0x0801744c
 80038ec:	20000896 	.word	0x20000896
 80038f0:	2000001c 	.word	0x2000001c
 80038f4:	20000788 	.word	0x20000788
 80038f8:	2000067c 	.word	0x2000067c

080038fc <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module, char *alias) {
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	0006      	movs	r6, r0
 8003900:	000d      	movs	r5, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for (i = 0; i < NumOfKeywords; i++) {
 8003902:	2400      	movs	r4, #0
 8003904:	2c03      	cmp	r4, #3
 8003906:	dc09      	bgt.n	800391c <NameModule+0x20>
		if (!strcmp(alias, BOSkeywords[i]))
 8003908:	00a3      	lsls	r3, r4, #2
 800390a:	4929      	ldr	r1, [pc, #164]	; (80039b0 <NameModule+0xb4>)
 800390c:	18c9      	adds	r1, r1, r3
 800390e:	0028      	movs	r0, r5
 8003910:	f7fc fbf8 	bl	8000104 <strcmp>
 8003914:	2800      	cmp	r0, #0
 8003916:	d043      	beq.n	80039a0 <NameModule+0xa4>
	for (i = 0; i < NumOfKeywords; i++) {
 8003918:	3401      	adds	r4, #1
 800391a:	e7f3      	b.n	8003904 <NameModule+0x8>
			return BOS_ERR_Keyword;
	}

	/* 2. Check module alias with other module aliases */
	for (i = 1; i < N; i++) {
 800391c:	2401      	movs	r4, #1
 800391e:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <NameModule+0xb8>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	42a3      	cmp	r3, r4
 8003924:	dd0b      	ble.n	800393e <NameModule+0x42>
		if (!strcmp(alias, moduleAlias[i]))
 8003926:	00a3      	lsls	r3, r4, #2
 8003928:	191b      	adds	r3, r3, r4
 800392a:	0059      	lsls	r1, r3, #1
 800392c:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <NameModule+0xbc>)
 800392e:	18c9      	adds	r1, r1, r3
 8003930:	0028      	movs	r0, r5
 8003932:	f7fc fbe7 	bl	8000104 <strcmp>
 8003936:	2800      	cmp	r0, #0
 8003938:	d034      	beq.n	80039a4 <NameModule+0xa8>
	for (i = 1; i < N; i++) {
 800393a:	3401      	adds	r4, #1
 800393c:	e7ef      	b.n	800391e <NameModule+0x22>
			return BOS_ERR_ExistingAlias;
	}

	/* 3. Check module alias with group aliases */
	for (i = 0; i < MaxNumOfGroups; i++) {
 800393e:	2400      	movs	r4, #0
 8003940:	2c09      	cmp	r4, #9
 8003942:	dc0b      	bgt.n	800395c <NameModule+0x60>
		if (!strcmp(alias, groupAlias[i]))
 8003944:	00a3      	lsls	r3, r4, #2
 8003946:	191b      	adds	r3, r3, r4
 8003948:	005a      	lsls	r2, r3, #1
 800394a:	491c      	ldr	r1, [pc, #112]	; (80039bc <NameModule+0xc0>)
 800394c:	1889      	adds	r1, r1, r2
 800394e:	0028      	movs	r0, r5
 8003950:	f7fc fbd8 	bl	8000104 <strcmp>
 8003954:	2800      	cmp	r0, #0
 8003956:	d027      	beq.n	80039a8 <NameModule+0xac>
	for (i = 0; i < MaxNumOfGroups; i++) {
 8003958:	3401      	adds	r4, #1
 800395a:	e7f1      	b.n	8003940 <NameModule+0x44>
			return BOS_ERR_ExistingAlias;
	}

	/* 4. Check alias with BOS and module commands */
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 800395c:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <NameModule+0xc4>)
 800395e:	4a19      	ldr	r2, [pc, #100]	; (80039c4 <NameModule+0xc8>)
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <NameModule+0xc4>)
 8003964:	681c      	ldr	r4, [r3, #0]
 8003966:	2c00      	cmp	r4, #0
 8003968:	d00f      	beq.n	800398a <NameModule+0x8e>
			pxCommand->pxNext) {
		pcRegisteredCommandString =
				pxCommand->pxCommandLineDefinition->pcCommand;
 800396a:	6823      	ldr	r3, [r4, #0]
		pcRegisteredCommandString =
 800396c:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen((const char*) pcRegisteredCommandString);
 800396e:	0038      	movs	r0, r7
 8003970:	f7fc fbd2 	bl	8000118 <strlen>
 8003974:	0002      	movs	r2, r0

		if (!strncmp(alias, (const char*) pcRegisteredCommandString,
 8003976:	0039      	movs	r1, r7
 8003978:	0028      	movs	r0, r5
 800397a:	f010 fcd5 	bl	8014328 <strncmp>
 800397e:	2800      	cmp	r0, #0
 8003980:	d014      	beq.n	80039ac <NameModule+0xb0>
			pxCommand->pxNext) {
 8003982:	6862      	ldr	r2, [r4, #4]
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <NameModule+0xc4>)
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e7eb      	b.n	8003962 <NameModule+0x66>
			return BOS_ERR_ExistingCmd;
		}
	}

	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 800398a:	00b3      	lsls	r3, r6, #2
 800398c:	199e      	adds	r6, r3, r6
 800398e:	0070      	lsls	r0, r6, #1
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <NameModule+0xbc>)
 8003992:	18c0      	adds	r0, r0, r3
 8003994:	0029      	movs	r1, r5
 8003996:	f010 fcbf 	bl	8014318 <strcpy>

	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 800399a:	f7fe feff 	bl	800279c <SaveEEalias>

	return result;
 800399e:	e002      	b.n	80039a6 <NameModule+0xaa>
			return BOS_ERR_Keyword;
 80039a0:	2006      	movs	r0, #6
 80039a2:	e000      	b.n	80039a6 <NameModule+0xaa>
			return BOS_ERR_ExistingAlias;
 80039a4:	2007      	movs	r0, #7
}
 80039a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80039a8:	2007      	movs	r0, #7
 80039aa:	e7fc      	b.n	80039a6 <NameModule+0xaa>
			return BOS_ERR_ExistingCmd;
 80039ac:	2008      	movs	r0, #8
 80039ae:	e7fa      	b.n	80039a6 <NameModule+0xaa>
 80039b0:	080171f8 	.word	0x080171f8
 80039b4:	2000001c 	.word	0x2000001c
 80039b8:	20000788 	.word	0x20000788
 80039bc:	2000067c 	.word	0x2000067c
 80039c0:	20000918 	.word	0x20000918
 80039c4:	200000d0 	.word	0x200000d0

080039c8 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module, char *group) {
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	0006      	movs	r6, r0
 80039cc:	000d      	movs	r5, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */

	for (i = 0; i < MaxNumOfGroups; i++) {
 80039ce:	2400      	movs	r4, #0
 80039d0:	2c09      	cmp	r4, #9
 80039d2:	dc14      	bgt.n	80039fe <AddModuleToGroup+0x36>
		/* This group already exists */
		if (!strcmp(group, groupAlias[i])) {
 80039d4:	00a3      	lsls	r3, r4, #2
 80039d6:	191b      	adds	r3, r3, r4
 80039d8:	005a      	lsls	r2, r3, #1
 80039da:	4933      	ldr	r1, [pc, #204]	; (8003aa8 <AddModuleToGroup+0xe0>)
 80039dc:	1889      	adds	r1, r1, r2
 80039de:	0028      	movs	r0, r5
 80039e0:	f7fc fb90 	bl	8000104 <strcmp>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d001      	beq.n	80039ec <AddModuleToGroup+0x24>
	for (i = 0; i < MaxNumOfGroups; i++) {
 80039e8:	3401      	adds	r4, #1
 80039ea:	e7f1      	b.n	80039d0 <AddModuleToGroup+0x8>
			/* 1. Add this module to the group */
			groupModules[module - 1] |= (0x0001 << i);
 80039ec:	3e01      	subs	r6, #1
 80039ee:	2201      	movs	r2, #1
 80039f0:	40a2      	lsls	r2, r4
 80039f2:	492e      	ldr	r1, [pc, #184]	; (8003aac <AddModuleToGroup+0xe4>)
 80039f4:	0076      	lsls	r6, r6, #1
 80039f6:	5a73      	ldrh	r3, [r6, r1]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	5273      	strh	r3, [r6, r1]
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 80039fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (j = 0; j < NumOfKeywords; j++) {
 80039fe:	2400      	movs	r4, #0
 8003a00:	2c03      	cmp	r4, #3
 8003a02:	dc09      	bgt.n	8003a18 <AddModuleToGroup+0x50>
		if (!strcmp(group, BOSkeywords[j]))
 8003a04:	00a3      	lsls	r3, r4, #2
 8003a06:	492a      	ldr	r1, [pc, #168]	; (8003ab0 <AddModuleToGroup+0xe8>)
 8003a08:	18c9      	adds	r1, r1, r3
 8003a0a:	0028      	movs	r0, r5
 8003a0c:	f7fc fb7a 	bl	8000104 <strcmp>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d045      	beq.n	8003aa0 <AddModuleToGroup+0xd8>
	for (j = 0; j < NumOfKeywords; j++) {
 8003a14:	3401      	adds	r4, #1
 8003a16:	e7f3      	b.n	8003a00 <AddModuleToGroup+0x38>
	for (j = 1; j < N; j++) {
 8003a18:	2401      	movs	r4, #1
 8003a1a:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <AddModuleToGroup+0xec>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	42a3      	cmp	r3, r4
 8003a20:	dd0b      	ble.n	8003a3a <AddModuleToGroup+0x72>
		if (!strcmp(group, moduleAlias[j]))
 8003a22:	00a3      	lsls	r3, r4, #2
 8003a24:	191b      	adds	r3, r3, r4
 8003a26:	0059      	lsls	r1, r3, #1
 8003a28:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <AddModuleToGroup+0xf0>)
 8003a2a:	18c9      	adds	r1, r1, r3
 8003a2c:	0028      	movs	r0, r5
 8003a2e:	f7fc fb69 	bl	8000104 <strcmp>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d036      	beq.n	8003aa4 <AddModuleToGroup+0xdc>
	for (j = 1; j < N; j++) {
 8003a36:	3401      	adds	r4, #1
 8003a38:	e7ef      	b.n	8003a1a <AddModuleToGroup+0x52>
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <AddModuleToGroup+0xf4>)
 8003a3c:	4a20      	ldr	r2, [pc, #128]	; (8003ac0 <AddModuleToGroup+0xf8>)
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e002      	b.n	8003a48 <AddModuleToGroup+0x80>
			pxCommand->pxNext) {
 8003a42:	6862      	ldr	r2, [r4, #4]
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <AddModuleToGroup+0xf4>)
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <AddModuleToGroup+0xf4>)
 8003a4a:	681c      	ldr	r4, [r3, #0]
 8003a4c:	2c00      	cmp	r4, #0
 8003a4e:	d01c      	beq.n	8003a8a <AddModuleToGroup+0xc2>
				pxCommand->pxCommandLineDefinition->pcCommand;
 8003a50:	6823      	ldr	r3, [r4, #0]
		pcRegisteredCommandString =
 8003a52:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen((const char*) pcRegisteredCommandString);
 8003a54:	0038      	movs	r0, r7
 8003a56:	f7fc fb5f 	bl	8000118 <strlen>
 8003a5a:	0002      	movs	r2, r0
		if (!strncmp(group, (const char*) pcRegisteredCommandString,
 8003a5c:	0039      	movs	r1, r7
 8003a5e:	0028      	movs	r0, r5
 8003a60:	f010 fc62 	bl	8014328 <strncmp>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d1ec      	bne.n	8003a42 <AddModuleToGroup+0x7a>
			return BOS_ERR_ExistingCmd;
 8003a68:	2008      	movs	r0, #8
 8003a6a:	e7c7      	b.n	80039fc <AddModuleToGroup+0x34>
			strcpy(groupAlias[i], group);
 8003a6c:	480e      	ldr	r0, [pc, #56]	; (8003aa8 <AddModuleToGroup+0xe0>)
 8003a6e:	1880      	adds	r0, r0, r2
 8003a70:	0029      	movs	r1, r5
 8003a72:	f010 fc51 	bl	8014318 <strcpy>
	groupModules[module - 1] |= (0x0001 << i);
 8003a76:	3e01      	subs	r6, #1
 8003a78:	2201      	movs	r2, #1
 8003a7a:	40a2      	lsls	r2, r4
 8003a7c:	490b      	ldr	r1, [pc, #44]	; (8003aac <AddModuleToGroup+0xe4>)
 8003a7e:	0076      	lsls	r6, r6, #1
 8003a80:	5a73      	ldrh	r3, [r6, r1]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	5273      	strh	r3, [r6, r1]
	return result;
 8003a86:	2000      	movs	r0, #0
 8003a88:	e7b8      	b.n	80039fc <AddModuleToGroup+0x34>
	for (i = 0; i < MaxNumOfGroups; i++) {
 8003a8a:	2c09      	cmp	r4, #9
 8003a8c:	dcf3      	bgt.n	8003a76 <AddModuleToGroup+0xae>
		if (!groupAlias[i][0]) {
 8003a8e:	00a3      	lsls	r3, r4, #2
 8003a90:	191b      	adds	r3, r3, r4
 8003a92:	005a      	lsls	r2, r3, #1
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <AddModuleToGroup+0xe0>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0e7      	beq.n	8003a6c <AddModuleToGroup+0xa4>
	for (i = 0; i < MaxNumOfGroups; i++) {
 8003a9c:	3401      	adds	r4, #1
 8003a9e:	e7f4      	b.n	8003a8a <AddModuleToGroup+0xc2>
			return BOS_ERR_Keyword;
 8003aa0:	2006      	movs	r0, #6
 8003aa2:	e7ab      	b.n	80039fc <AddModuleToGroup+0x34>
			return BOS_ERR_ExistingAlias;
 8003aa4:	2007      	movs	r0, #7
 8003aa6:	e7a9      	b.n	80039fc <AddModuleToGroup+0x34>
 8003aa8:	2000067c 	.word	0x2000067c
 8003aac:	200006e0 	.word	0x200006e0
 8003ab0:	080171f8 	.word	0x080171f8
 8003ab4:	2000001c 	.word	0x2000001c
 8003ab8:	20000788 	.word	0x20000788
 8003abc:	2000091c 	.word	0x2000091c
 8003ac0:	200000d0 	.word	0x200000d0

08003ac4 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void) {
 8003ac4:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;

	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 8003ac6:	2601      	movs	r6, #1
	BOS_Status result = BOS_OK;
 8003ac8:	2500      	movs	r5, #0
	for (uint8_t i = 1; i <= N; i++) {
 8003aca:	e01d      	b.n	8003b08 <ReadPortsDir+0x44>
			if (responseStatus != BOS_OK) {
				result = BOS_ERR_NoResponse;
			}
		} else {
			/* Check my own ports */
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8003acc:	3401      	adds	r4, #1
 8003ace:	b2e4      	uxtb	r4, r4
 8003ad0:	2c05      	cmp	r4, #5
 8003ad2:	d817      	bhi.n	8003b04 <ReadPortsDir+0x40>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8003ad4:	0020      	movs	r0, r4
 8003ad6:	f00a f9c7 	bl	800de68 <GetUart>
 8003ada:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d1f3      	bne.n	8003acc <ReadPortsDir+0x8>
					arrayPortsDir[myID - 1] |= (0x8000 >> (p - 1)); /* Set bit to 1 */
 8003ae4:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <ReadPortsDir+0x74>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	1e61      	subs	r1, r4, #1
 8003aec:	2280      	movs	r2, #128	; 0x80
 8003aee:	0212      	lsls	r2, r2, #8
 8003af0:	410a      	asrs	r2, r1
 8003af2:	0011      	movs	r1, r2
 8003af4:	4811      	ldr	r0, [pc, #68]	; (8003b3c <ReadPortsDir+0x78>)
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	5a1a      	ldrh	r2, [r3, r0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	521a      	strh	r2, [r3, r0]
 8003afe:	e7e5      	b.n	8003acc <ReadPortsDir+0x8>
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8003b00:	2401      	movs	r4, #1
 8003b02:	e7e5      	b.n	8003ad0 <ReadPortsDir+0xc>
	for (uint8_t i = 1; i <= N; i++) {
 8003b04:	3601      	adds	r6, #1
 8003b06:	b2f6      	uxtb	r6, r6
 8003b08:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <ReadPortsDir+0x7c>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	42b3      	cmp	r3, r6
 8003b0e:	d311      	bcc.n	8003b34 <ReadPortsDir+0x70>
		if (i != myID) {
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <ReadPortsDir+0x74>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	42b3      	cmp	r3, r6
 8003b16:	d0f3      	beq.n	8003b00 <ReadPortsDir+0x3c>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2113      	movs	r1, #19
 8003b1c:	0030      	movs	r0, r6
 8003b1e:	f004 fd65 	bl	80085ec <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8003b22:	2032      	movs	r0, #50	; 0x32
 8003b24:	f00a f80a 	bl	800db3c <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <ReadPortsDir+0x80>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0e9      	beq.n	8003b04 <ReadPortsDir+0x40>
				result = BOS_ERR_NoResponse;
 8003b30:	2502      	movs	r5, #2
 8003b32:	e7e7      	b.n	8003b04 <ReadPortsDir+0x40>
			}
		}
	}

	return result;
}
 8003b34:	0028      	movs	r0, r5
 8003b36:	bd70      	pop	{r4, r5, r6, pc}
 8003b38:	20000896 	.word	0x20000896
 8003b3c:	200065d0 	.word	0x200065d0
 8003b40:	2000001c 	.word	0x2000001c
 8003b44:	20000928 	.word	0x20000928

08003b48 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void) {
 8003b48:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8003b4a:	2401      	movs	r4, #1
 8003b4c:	e007      	b.n	8003b5e <UpdateMyPortsDir+0x16>
		if (!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) {
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 8003b4e:	0020      	movs	r0, r4
 8003b50:	f00a f98a 	bl	800de68 <GetUart>
 8003b54:	2101      	movs	r1, #1
 8003b56:	f00a fa1f 	bl	800df98 <SwapUartPins>
	for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8003b5a:	3401      	adds	r4, #1
 8003b5c:	b2e4      	uxtb	r4, r4
 8003b5e:	2c05      	cmp	r4, #5
 8003b60:	d812      	bhi.n	8003b88 <UpdateMyPortsDir+0x40>
		if (!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) {
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <UpdateMyPortsDir+0x44>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <UpdateMyPortsDir+0x48>)
 8003b6c:	5a9a      	ldrh	r2, [r3, r2]
 8003b6e:	1e61      	subs	r1, r4, #1
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	410b      	asrs	r3, r1
 8003b76:	4213      	tst	r3, r2
 8003b78:	d1e9      	bne.n	8003b4e <UpdateMyPortsDir+0x6>
			SwapUartPins(GetUart(p), NORMAL);
 8003b7a:	0020      	movs	r0, r4
 8003b7c:	f00a f974 	bl	800de68 <GetUart>
 8003b80:	2100      	movs	r1, #0
 8003b82:	f00a fa09 	bl	800df98 <SwapUartPins>
 8003b86:	e7e8      	b.n	8003b5a <UpdateMyPortsDir+0x12>
		}
	}

	return result;
}
 8003b88:	2000      	movs	r0, #0
 8003b8a:	bd10      	pop	{r4, pc}
 8003b8c:	20000896 	.word	0x20000896
 8003b90:	200065d0 	.word	0x200065d0

08003b94 <BOS_Init>:
void BOS_Init(void) {
 8003b94:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8003b96:	f009 fe89 	bl	800d8ac <RTC_Init>
	GetTimeDate();
 8003b9a:	f009 ff27 	bl	800d9ec <GetTimeDate>
	EE_Init();
 8003b9e:	f003 f96d 	bl	8006e7c <EE_Init>
	GPIO_Init();
 8003ba2:	f009 fbbb 	bl	800d31c <GPIO_Init>
	DMA_Init();
 8003ba6:	f008 f945 	bl	800be34 <DMA_Init>
	TIM_USEC_Init();
 8003baa:	f009 ff53 	bl	800da54 <TIM_USEC_Init>
	CRC_Init();
 8003bae:	f009 fb63 	bl	800d278 <CRC_Init>
	TIM_MSEC_Init();
 8003bb2:	f009 ff81 	bl	800dab8 <TIM_MSEC_Init>
	if (IsFactoryReset()) {
 8003bb6:	f009 fc89 	bl	800d4cc <IsFactoryReset>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d111      	bne.n	8003be2 <BOS_Init+0x4e>
	if (IsLowerCLIbaud()) {
 8003bbe:	f7ff f8ed 	bl	8002d9c <IsLowerCLIbaud>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d063      	beq.n	8003c8e <BOS_Init+0xfa>
		CLI_LOW_Baudrate_Flag = 1;
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	; (8003cc0 <BOS_Init+0x12c>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);// Give other modules time to finish factory reset and baudrate check
 8003bcc:	2032      	movs	r0, #50	; 0x32
 8003bce:	f009 ffb5 	bl	800db3c <StartMilliDelay>
		Module_Init();
 8003bd2:	f007 f9cb 	bl	800af6c <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003bd6:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <BOS_Init+0x130>)
 8003bd8:	22e1      	movs	r2, #225	; 0xe1
 8003bda:	0252      	lsls	r2, r2, #9
 8003bdc:	609a      	str	r2, [r3, #8]
		for (uint8_t port = 1; port <= NumOfPorts; port++) {
 8003bde:	2401      	movs	r4, #1
 8003be0:	e011      	b.n	8003c06 <BOS_Init+0x72>
		EE_FormatForFactoryReset();
 8003be2:	f7ff f927 	bl	8002e34 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003be6:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <BOS_Init+0x134>)
 8003bec:	4a37      	ldr	r2, [pc, #220]	; (8003ccc <BOS_Init+0x138>)
 8003bee:	60da      	str	r2, [r3, #12]
 8003bf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	e7fd      	b.n	8003bf4 <BOS_Init+0x60>
			UpdateBaudrate(port, BOS.clibaudrate);
 8003bf8:	4b32      	ldr	r3, [pc, #200]	; (8003cc4 <BOS_Init+0x130>)
 8003bfa:	6899      	ldr	r1, [r3, #8]
 8003bfc:	0020      	movs	r0, r4
 8003bfe:	f00a f9c1 	bl	800df84 <UpdateBaudrate>
		for (uint8_t port = 1; port <= NumOfPorts; port++) {
 8003c02:	3401      	adds	r4, #1
 8003c04:	b2e4      	uxtb	r4, r4
 8003c06:	2c05      	cmp	r4, #5
 8003c08:	d9f6      	bls.n	8003bf8 <BOS_Init+0x64>
	LoadEEvars();
 8003c0a:	f7ff f8b5 	bl	8002d78 <LoadEEvars>
	UpdateMyPortsDir();
 8003c0e:	f7ff ff9b 	bl	8003b48 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8003c12:	f008 fe75 	bl	800c900 <SetupMessagingRxDMAs>
	if (myID == 0) /* Native module */
 8003c16:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <BOS_Init+0x13c>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d03d      	beq.n	8003c9a <BOS_Init+0x106>
		IND_ON();
 8003c1e:	2580      	movs	r5, #128	; 0x80
 8003c20:	012d      	lsls	r5, r5, #4
 8003c22:	2490      	movs	r4, #144	; 0x90
 8003c24:	05e4      	lsls	r4, r4, #23
 8003c26:	2201      	movs	r2, #1
 8003c28:	0029      	movs	r1, r5
 8003c2a:	0020      	movs	r0, r4
 8003c2c:	f00d fe21 	bl	8011872 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8003c30:	20fa      	movs	r0, #250	; 0xfa
 8003c32:	0040      	lsls	r0, r0, #1
 8003c34:	f009 ff82 	bl	800db3c <StartMilliDelay>
		IND_OFF();
 8003c38:	2200      	movs	r2, #0
 8003c3a:	0029      	movs	r1, r5
 8003c3c:	0020      	movs	r0, r4
 8003c3e:	f00d fe18 	bl	8011872 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003c42:	2064      	movs	r0, #100	; 0x64
 8003c44:	f009 ff7a 	bl	800db3c <StartMilliDelay>
		IND_ON();
 8003c48:	2201      	movs	r2, #1
 8003c4a:	0029      	movs	r1, r5
 8003c4c:	0020      	movs	r0, r4
 8003c4e:	f00d fe10 	bl	8011872 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003c52:	2064      	movs	r0, #100	; 0x64
 8003c54:	f009 ff72 	bl	800db3c <StartMilliDelay>
		IND_OFF();
 8003c58:	2200      	movs	r2, #0
 8003c5a:	0029      	movs	r1, r5
 8003c5c:	0020      	movs	r0, r4
 8003c5e:	f00d fe08 	bl	8011872 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003c62:	2064      	movs	r0, #100	; 0x64
 8003c64:	f009 ff6a 	bl	800db3c <StartMilliDelay>
		IND_ON();
 8003c68:	2201      	movs	r2, #1
 8003c6a:	0029      	movs	r1, r5
 8003c6c:	0020      	movs	r0, r4
 8003c6e:	f00d fe00 	bl	8011872 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);IND_OFF();
 8003c72:	2064      	movs	r0, #100	; 0x64
 8003c74:	f009 ff62 	bl	800db3c <StartMilliDelay>
 8003c78:	2200      	movs	r2, #0
 8003c7a:	0029      	movs	r1, r5
 8003c7c:	0020      	movs	r0, r4
 8003c7e:	f00d fdf8 	bl	8011872 <HAL_GPIO_WritePin>
	ResetUartORE();
 8003c82:	f002 ff2f 	bl	8006ae4 <ResetUartORE>
	BOS_initialized = 1;
 8003c86:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <BOS_Init+0x140>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]
}
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);// Give other modules time to finish factory reset and baudrate check
 8003c8e:	2032      	movs	r0, #50	; 0x32
 8003c90:	f009 ff54 	bl	800db3c <StartMilliDelay>
		Module_Init();
 8003c94:	f007 f96a 	bl	800af6c <Module_Init>
 8003c98:	e7b7      	b.n	8003c0a <BOS_Init+0x76>
		IND_ON();
 8003c9a:	2580      	movs	r5, #128	; 0x80
 8003c9c:	012d      	lsls	r5, r5, #4
 8003c9e:	2490      	movs	r4, #144	; 0x90
 8003ca0:	05e4      	lsls	r4, r4, #23
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	0029      	movs	r1, r5
 8003ca6:	0020      	movs	r0, r4
 8003ca8:	f00d fde3 	bl	8011872 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003cac:	20fa      	movs	r0, #250	; 0xfa
 8003cae:	0040      	lsls	r0, r0, #1
 8003cb0:	f009 ff44 	bl	800db3c <StartMilliDelay>
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	0029      	movs	r1, r5
 8003cb8:	0020      	movs	r0, r4
 8003cba:	f00d fdda 	bl	8011872 <HAL_GPIO_WritePin>
 8003cbe:	e7e0      	b.n	8003c82 <BOS_Init+0xee>
 8003cc0:	200002ce 	.word	0x200002ce
 8003cc4:	20006148 	.word	0x20006148
 8003cc8:	e000ed00 	.word	0xe000ed00
 8003ccc:	05fa0004 	.word	0x05fa0004
 8003cd0:	20000896 	.word	0x20000896
 8003cd4:	200002cd 	.word	0x200002cd

08003cd8 <GetDateString>:

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
 */
char* GetDateString(void) {
 8003cd8:	b530      	push	{r4, r5, lr}
 8003cda:	b083      	sub	sp, #12
	static const char formatDateStr[] = "%s %02d/%02d/%04d";
	char *buffer = malloc(30 * sizeof(int8_t));
 8003cdc:	201e      	movs	r0, #30
 8003cde:	f00f fb43 	bl	8013368 <malloc>
 8003ce2:	0004      	movs	r4, r0
	memset(buffer, 0x00, 30 * sizeof(int8_t));
 8003ce4:	221e      	movs	r2, #30
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f00f fb7c 	bl	80133e4 <memset>
	sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday - 1],
 8003cec:	4908      	ldr	r1, [pc, #32]	; (8003d10 <GetDateString+0x38>)
 8003cee:	7d0a      	ldrb	r2, [r1, #20]
 8003cf0:	3a01      	subs	r2, #1
			BOS.date.month, BOS.date.day, BOS.date.year);
 8003cf2:	7d8b      	ldrb	r3, [r1, #22]
 8003cf4:	7d48      	ldrb	r0, [r1, #21]
 8003cf6:	8b09      	ldrh	r1, [r1, #24]
	sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday - 1],
 8003cf8:	0092      	lsls	r2, r2, #2
 8003cfa:	4d06      	ldr	r5, [pc, #24]	; (8003d14 <GetDateString+0x3c>)
 8003cfc:	5952      	ldr	r2, [r2, r5]
 8003cfe:	9101      	str	r1, [sp, #4]
 8003d00:	9000      	str	r0, [sp, #0]
 8003d02:	4905      	ldr	r1, [pc, #20]	; (8003d18 <GetDateString+0x40>)
 8003d04:	0020      	movs	r0, r4
 8003d06:	f010 facb 	bl	80142a0 <siprintf>
	return buffer;
}
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	b003      	add	sp, #12
 8003d0e:	bd30      	pop	{r4, r5, pc}
 8003d10:	20006148 	.word	0x20006148
 8003d14:	0801773c 	.word	0x0801773c
 8003d18:	08017468 	.word	0x08017468

08003d1c <Bridge>:

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
 */
BOS_Status Bridge(uint8_t port1, uint8_t port2) {
 8003d1c:	b500      	push	{lr}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL,
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <Bridge+0x24>)
 8003d24:	7819      	ldrb	r1, [r3, #0]
 8003d26:	2301      	movs	r3, #1
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	3b02      	subs	r3, #2
 8003d2c:	9302      	str	r3, [sp, #8]
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	3303      	adds	r3, #3
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	000b      	movs	r3, r1
 8003d36:	f004 fc7f 	bl	8008638 <StartScastDMAStream>
			0xFFFFFFFF, 0xFFFFFFFF, true);
}
 8003d3a:	b005      	add	sp, #20
 8003d3c:	bd00      	pop	{pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	20000896 	.word	0x20000896

08003d44 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
 */
BOS_Status Unbridge(uint8_t port1, uint8_t port2) {
 8003d44:	b530      	push	{r4, r5, lr}
 8003d46:	b087      	sub	sp, #28
 8003d48:	0004      	movs	r4, r0
 8003d4a:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	9304      	str	r3, [sp, #16]
 8003d50:	9303      	str	r3, [sp, #12]
 8003d52:	9302      	str	r3, [sp, #8]
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f7fe fe7f 	bl	8002a60 <SaveEEstreams>

	// Stop the DMA streams and enable messaging back on these ports
	if (streamDMA[port1 - 1].Instance != 0
 8003d62:	1e62      	subs	r2, r4, #1
 8003d64:	00d3      	lsls	r3, r2, #3
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	00da      	lsls	r2, r3, #3
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <Unbridge+0x7c>)
 8003d6c:	58d2      	ldr	r2, [r2, r3]
 8003d6e:	2a00      	cmp	r2, #0
 8003d70:	d007      	beq.n	8003d82 <Unbridge+0x3e>
			&& streamDMA[port2 - 1].Instance != 0) {
 8003d72:	1e69      	subs	r1, r5, #1
 8003d74:	00cb      	lsls	r3, r1, #3
 8003d76:	1a5b      	subs	r3, r3, r1
 8003d78:	00d9      	lsls	r1, r3, #3
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <Unbridge+0x7c>)
 8003d7c:	58cb      	ldr	r3, [r1, r3]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10e      	bne.n	8003da0 <Unbridge+0x5c>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	} else if (streamDMA[port1 - 1].Instance != 0) {
 8003d82:	2a00      	cmp	r2, #0
 8003d84:	d115      	bne.n	8003db2 <Unbridge+0x6e>
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	} else if (streamDMA[port2 - 1].Instance != 0) {
 8003d86:	1e6a      	subs	r2, r5, #1
 8003d88:	00d3      	lsls	r3, r2, #3
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	00da      	lsls	r2, r3, #3
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <Unbridge+0x7c>)
 8003d90:	58d3      	ldr	r3, [r2, r3]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d012      	beq.n	8003dbc <Unbridge+0x78>
		SwitchStreamDMAToMsg(port2);
 8003d96:	0028      	movs	r0, r5
 8003d98:	f002 fe14 	bl	80069c4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	e006      	b.n	8003dae <Unbridge+0x6a>
		SwitchStreamDMAToMsg(port1);
 8003da0:	0020      	movs	r0, r4
 8003da2:	f002 fe0f 	bl	80069c4 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 8003da6:	0028      	movs	r0, r5
 8003da8:	f002 fe0c 	bl	80069c4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8003dac:	2000      	movs	r0, #0
	} else {
		return BOS_ERR_WrongValue;
	}
}
 8003dae:	b007      	add	sp, #28
 8003db0:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 8003db2:	0020      	movs	r0, r4
 8003db4:	f002 fe06 	bl	80069c4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8003db8:	2000      	movs	r0, #0
 8003dba:	e7f8      	b.n	8003dae <Unbridge+0x6a>
		return BOS_ERR_WrongValue;
 8003dbc:	2068      	movs	r0, #104	; 0x68
 8003dbe:	e7f6      	b.n	8003dae <Unbridge+0x6a>
 8003dc0:	20001144 	.word	0x20001144

08003dc4 <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	0007      	movs	r7, r0
	for(int i = 0; string[i]; i++){
 8003dc8:	2500      	movs	r5, #0
 8003dca:	e001      	b.n	8003dd0 <StringToLowerCase+0xc>
		string[i] = tolower(string[i]);
 8003dcc:	7034      	strb	r4, [r6, #0]
	for(int i = 0; string[i]; i++){
 8003dce:	3501      	adds	r5, #1
 8003dd0:	197e      	adds	r6, r7, r5
 8003dd2:	7834      	ldrb	r4, [r6, #0]
 8003dd4:	2c00      	cmp	r4, #0
 8003dd6:	d009      	beq.n	8003dec <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8003dd8:	f00f fab8 	bl	801334c <__locale_ctype_ptr>
 8003ddc:	1900      	adds	r0, r0, r4
 8003dde:	7842      	ldrb	r2, [r0, #1]
 8003de0:	2303      	movs	r3, #3
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d1f1      	bne.n	8003dcc <StringToLowerCase+0x8>
 8003de8:	3420      	adds	r4, #32
 8003dea:	e7ef      	b.n	8003dcc <StringToLowerCase+0x8>
	}
}
 8003dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003df0 <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8003df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df2:	46c6      	mov	lr, r8
 8003df4:	b500      	push	{lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8003dfa:	4bd7      	ldr	r3, [pc, #860]	; (8004158 <ParseSnippetCondition+0x368>)
 8003dfc:	781c      	ldrb	r4, [r3, #0]
 8003dfe:	2c05      	cmp	r4, #5
 8003e00:	d100      	bne.n	8003e04 <ParseSnippetCondition+0x14>
 8003e02:	e20d      	b.n	8004220 <ParseSnippetCondition+0x430>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 8003e04:	48d5      	ldr	r0, [pc, #852]	; (800415c <ParseSnippetCondition+0x36c>)
 8003e06:	00a3      	lsls	r3, r4, #2
 8003e08:	191a      	adds	r2, r3, r4
 8003e0a:	0091      	lsls	r1, r2, #2
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	540a      	strb	r2, [r1, r0]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8003e10:	1840      	adds	r0, r0, r1
 8003e12:	7042      	strb	r2, [r0, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8003e14:	3002      	adds	r0, #2
 8003e16:	3204      	adds	r2, #4
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f00f fae3 	bl	80133e4 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8003e1e:	782b      	ldrb	r3, [r5, #0]
 8003e20:	2b62      	cmp	r3, #98	; 0x62
 8003e22:	d102      	bne.n	8003e2a <ParseSnippetCondition+0x3a>
 8003e24:	78ab      	ldrb	r3, [r5, #2]
 8003e26:	2b2e      	cmp	r3, #46	; 0x2e
 8003e28:	d04f      	beq.n	8003eca <ParseSnippetCondition+0xda>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 8003e2a:	4ecd      	ldr	r6, [pc, #820]	; (8004160 <ParseSnippetCondition+0x370>)
 8003e2c:	0029      	movs	r1, r5
 8003e2e:	0030      	movs	r0, r6
 8003e30:	f010 fa72 	bl	8014318 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8003e34:	4ccb      	ldr	r4, [pc, #812]	; (8004164 <ParseSnippetCondition+0x374>)
 8003e36:	0021      	movs	r1, r4
 8003e38:	0030      	movs	r0, r6
 8003e3a:	f011 f8fb 	bl	8015034 <strtok>
 8003e3e:	0005      	movs	r5, r0
		secondPart = strtok ( NULL, " ");
 8003e40:	0021      	movs	r1, r4
 8003e42:	2000      	movs	r0, #0
 8003e44:	f011 f8f6 	bl	8015034 <strtok>
 8003e48:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 8003e4a:	0021      	movs	r1, r4
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f011 f8f1 	bl	8015034 <strtok>
 8003e52:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 8003e54:	2d00      	cmp	r5, #0
 8003e56:	d100      	bne.n	8003e5a <ParseSnippetCondition+0x6a>
 8003e58:	e1e9      	b.n	800422e <ParseSnippetCondition+0x43e>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8003e5a:	0028      	movs	r0, r5
 8003e5c:	f7ff f812 	bl	8002e84 <IsModuleParameter>
 8003e60:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8003e62:	d002      	beq.n	8003e6a <ParseSnippetCondition+0x7a>
 8003e64:	2e00      	cmp	r6, #0
 8003e66:	d100      	bne.n	8003e6a <ParseSnippetCondition+0x7a>
 8003e68:	e1ac      	b.n	80041c4 <ParseSnippetCondition+0x3d4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			} 
			else if (secondPart != NULL && thirdPart != NULL) 
 8003e6a:	2e00      	cmp	r6, #0
 8003e6c:	d100      	bne.n	8003e70 <ParseSnippetCondition+0x80>
 8003e6e:	e1e0      	b.n	8004232 <ParseSnippetCondition+0x442>
 8003e70:	2c00      	cmp	r4, #0
 8003e72:	d100      	bne.n	8003e76 <ParseSnippetCondition+0x86>
 8003e74:	e1df      	b.n	8004236 <ParseSnippetCondition+0x446>
			{
				modPar2 = IsModuleParameter(thirdPart);
 8003e76:	0020      	movs	r0, r4
 8003e78:	f7ff f804 	bl	8002e84 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d100      	bne.n	8003e82 <ParseSnippetCondition+0x92>
 8003e80:	e1b1      	b.n	80041e6 <ParseSnippetCondition+0x3f6>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8003e82:	4bb5      	ldr	r3, [pc, #724]	; (8004158 <ParseSnippetCondition+0x368>)
 8003e84:	7819      	ldrb	r1, [r3, #0]
 8003e86:	4ab5      	ldr	r2, [pc, #724]	; (800415c <ParseSnippetCondition+0x36c>)
 8003e88:	008b      	lsls	r3, r1, #2
 8003e8a:	185f      	adds	r7, r3, r1
 8003e8c:	00bc      	lsls	r4, r7, #2
 8003e8e:	2704      	movs	r7, #4
 8003e90:	54a7      	strb	r7, [r4, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8003e92:	1914      	adds	r4, r2, r4
 8003e94:	70e5      	strb	r5, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8003e96:	71e0      	strb	r0, [r4, #7]
					// Extract the constant
					float constant = atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}				
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8003e98:	4daf      	ldr	r5, [pc, #700]	; (8004158 <ParseSnippetCondition+0x368>)
 8003e9a:	782c      	ldrb	r4, [r5, #0]
 8003e9c:	0030      	movs	r0, r6
 8003e9e:	f7ff f80b 	bl	8002eb8 <IsMathOperator>
 8003ea2:	4aae      	ldr	r2, [pc, #696]	; (800415c <ParseSnippetCondition+0x36c>)
 8003ea4:	00a1      	lsls	r1, r4, #2
 8003ea6:	1909      	adds	r1, r1, r4
 8003ea8:	008b      	lsls	r3, r1, #2
 8003eaa:	18d3      	adds	r3, r2, r3
 8003eac:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8003eae:	782b      	ldrb	r3, [r5, #0]
 8003eb0:	0099      	lsls	r1, r3, #2
 8003eb2:	18c9      	adds	r1, r1, r3
 8003eb4:	0088      	lsls	r0, r1, #2
 8003eb6:	1812      	adds	r2, r2, r0
 8003eb8:	7852      	ldrb	r2, [r2, #1]
 8003eba:	2a00      	cmp	r2, #0
 8003ebc:	d100      	bne.n	8003ec0 <ParseSnippetCondition+0xd0>
 8003ebe:	e1bc      	b.n	800423a <ParseSnippetCondition+0x44a>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	4aa5      	ldr	r2, [pc, #660]	; (8004158 <ParseSnippetCondition+0x368>)
 8003ec4:	7013      	strb	r3, [r2, #0]
				return BOS_OK;				
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e1ab      	b.n	8004222 <ParseSnippetCondition+0x432>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8003eca:	786e      	ldrb	r6, [r5, #1]
 8003ecc:	3e30      	subs	r6, #48	; 0x30
 8003ece:	b2f6      	uxtb	r6, r6
 8003ed0:	2e05      	cmp	r6, #5
 8003ed2:	d900      	bls.n	8003ed6 <ParseSnippetCondition+0xe6>
 8003ed4:	e1a9      	b.n	800422a <ParseSnippetCondition+0x43a>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8003ed6:	4ba1      	ldr	r3, [pc, #644]	; (800415c <ParseSnippetCondition+0x36c>)
 8003ed8:	00a2      	lsls	r2, r4, #2
 8003eda:	1910      	adds	r0, r2, r4
 8003edc:	0081      	lsls	r1, r0, #2
 8003ede:	2001      	movs	r0, #1
 8003ee0:	54c8      	strb	r0, [r1, r3]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 8003ee2:	185b      	adds	r3, r3, r1
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8003ee8:	709e      	strb	r6, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8003eea:	1cef      	adds	r7, r5, #3
 8003eec:	3207      	adds	r2, #7
 8003eee:	499e      	ldr	r1, [pc, #632]	; (8004168 <ParseSnippetCondition+0x378>)
 8003ef0:	0038      	movs	r0, r7
 8003ef2:	f010 fa19 	bl	8014328 <strncmp>
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d122      	bne.n	8003f40 <ParseSnippetCondition+0x150>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8003efa:	00a3      	lsls	r3, r4, #2
 8003efc:	191c      	adds	r4, r3, r4
 8003efe:	00a2      	lsls	r2, r4, #2
 8003f00:	4b96      	ldr	r3, [pc, #600]	; (800415c <ParseSnippetCondition+0x36c>)
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	2205      	movs	r2, #5
 8003f06:	70da      	strb	r2, [r3, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8003f08:	00f2      	lsls	r2, r6, #3
 8003f0a:	1992      	adds	r2, r2, r6
 8003f0c:	4b97      	ldr	r3, [pc, #604]	; (800416c <ParseSnippetCondition+0x37c>)
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	7a1b      	ldrb	r3, [r3, #8]
 8003f12:	07db      	lsls	r3, r3, #31
 8003f14:	d505      	bpl.n	8003f22 <ParseSnippetCondition+0x132>
				status = BOS_OK;
 8003f16:	2000      	movs	r0, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8003f18:	4a8f      	ldr	r2, [pc, #572]	; (8004158 <ParseSnippetCondition+0x368>)
 8003f1a:	7813      	ldrb	r3, [r2, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	7013      	strb	r3, [r2, #0]
 8003f20:	e17f      	b.n	8004222 <ParseSnippetCondition+0x432>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8003f22:	2301      	movs	r3, #1
 8003f24:	9305      	str	r3, [sp, #20]
 8003f26:	2300      	movs	r3, #0
 8003f28:	9304      	str	r3, [sp, #16]
 8003f2a:	9303      	str	r3, [sp, #12]
 8003f2c:	9302      	str	r3, [sp, #8]
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	2101      	movs	r1, #1
 8003f36:	0030      	movs	r0, r6
 8003f38:	f003 fea4 	bl	8007c84 <SetButtonEvents>
				status = BOS_OK;
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	e7eb      	b.n	8003f18 <ParseSnippetCondition+0x128>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8003f40:	220e      	movs	r2, #14
 8003f42:	498b      	ldr	r1, [pc, #556]	; (8004170 <ParseSnippetCondition+0x380>)
 8003f44:	0038      	movs	r0, r7
 8003f46:	f010 f9ef 	bl	8014328 <strncmp>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d11e      	bne.n	8003f8c <ParseSnippetCondition+0x19c>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8003f4e:	00a3      	lsls	r3, r4, #2
 8003f50:	191c      	adds	r4, r3, r4
 8003f52:	00a2      	lsls	r2, r4, #2
 8003f54:	4b81      	ldr	r3, [pc, #516]	; (800415c <ParseSnippetCondition+0x36c>)
 8003f56:	189b      	adds	r3, r3, r2
 8003f58:	2206      	movs	r2, #6
 8003f5a:	70da      	strb	r2, [r3, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8003f5c:	00f2      	lsls	r2, r6, #3
 8003f5e:	1992      	adds	r2, r2, r6
 8003f60:	4b82      	ldr	r3, [pc, #520]	; (800416c <ParseSnippetCondition+0x37c>)
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	7a1b      	ldrb	r3, [r3, #8]
 8003f66:	079b      	lsls	r3, r3, #30
 8003f68:	d501      	bpl.n	8003f6e <ParseSnippetCondition+0x17e>
				status = BOS_OK;					
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	e7d4      	b.n	8003f18 <ParseSnippetCondition+0x128>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8003f6e:	2301      	movs	r3, #1
 8003f70:	9305      	str	r3, [sp, #20]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9304      	str	r3, [sp, #16]
 8003f76:	9303      	str	r3, [sp, #12]
 8003f78:	9302      	str	r3, [sp, #8]
 8003f7a:	9301      	str	r3, [sp, #4]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	2100      	movs	r1, #0
 8003f82:	0030      	movs	r0, r6
 8003f84:	f003 fe7e 	bl	8007c84 <SetButtonEvents>
				status = BOS_OK;					
 8003f88:	2000      	movs	r0, #0
 8003f8a:	e7c5      	b.n	8003f18 <ParseSnippetCondition+0x128>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8003f8c:	220c      	movs	r2, #12
 8003f8e:	4979      	ldr	r1, [pc, #484]	; (8004174 <ParseSnippetCondition+0x384>)
 8003f90:	0038      	movs	r0, r7
 8003f92:	f010 f9c9 	bl	8014328 <strncmp>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d17b      	bne.n	8004092 <ParseSnippetCondition+0x2a2>
				if (!button[port].pressedX1Sec) {	
 8003f9a:	00f2      	lsls	r2, r6, #3
 8003f9c:	1992      	adds	r2, r2, r6
 8003f9e:	4b73      	ldr	r3, [pc, #460]	; (800416c <ParseSnippetCondition+0x37c>)
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	789b      	ldrb	r3, [r3, #2]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00f      	beq.n	8003fc8 <ParseSnippetCondition+0x1d8>
				} else if (!button[port].pressedX2Sec) {	
 8003fa8:	00f2      	lsls	r2, r6, #3
 8003faa:	1992      	adds	r2, r2, r6
 8003fac:	4b6f      	ldr	r3, [pc, #444]	; (800416c <ParseSnippetCondition+0x37c>)
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	78db      	ldrb	r3, [r3, #3]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d029      	beq.n	800400a <ParseSnippetCondition+0x21a>
				} else if (!button[port].pressedX3Sec) {	
 8003fb6:	00f2      	lsls	r2, r6, #3
 8003fb8:	1992      	adds	r2, r2, r6
 8003fba:	4b6c      	ldr	r3, [pc, #432]	; (800416c <ParseSnippetCondition+0x37c>)
 8003fbc:	189b      	adds	r3, r3, r2
 8003fbe:	791b      	ldrb	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d044      	beq.n	800404e <ParseSnippetCondition+0x25e>
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8003fc4:	200c      	movs	r0, #12
 8003fc6:	e7a7      	b.n	8003f18 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8003fc8:	4f64      	ldr	r7, [pc, #400]	; (800415c <ParseSnippetCondition+0x36c>)
 8003fca:	00a3      	lsls	r3, r4, #2
 8003fcc:	191c      	adds	r4, r3, r4
 8003fce:	00a3      	lsls	r3, r4, #2
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	2209      	movs	r2, #9
 8003fd4:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8003fd6:	0028      	movs	r0, r5
 8003fd8:	300f      	adds	r0, #15
 8003fda:	f00f f982 	bl	80132e2 <atoi>
 8003fde:	4b5e      	ldr	r3, [pc, #376]	; (8004158 <ParseSnippetCondition+0x368>)
 8003fe0:	7819      	ldrb	r1, [r3, #0]
 8003fe2:	b2c3      	uxtb	r3, r0
 8003fe4:	008a      	lsls	r2, r1, #2
 8003fe6:	1852      	adds	r2, r2, r1
 8003fe8:	0091      	lsls	r1, r2, #2
 8003fea:	187f      	adds	r7, r7, r1
 8003fec:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8003fee:	2201      	movs	r2, #1
 8003ff0:	9205      	str	r2, [sp, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	9204      	str	r2, [sp, #16]
 8003ff6:	9203      	str	r2, [sp, #12]
 8003ff8:	9202      	str	r2, [sp, #8]
 8003ffa:	9201      	str	r2, [sp, #4]
 8003ffc:	9200      	str	r2, [sp, #0]
 8003ffe:	2100      	movs	r1, #0
 8004000:	0030      	movs	r0, r6
 8004002:	f003 fe3f 	bl	8007c84 <SetButtonEvents>
					status = BOS_OK;
 8004006:	2000      	movs	r0, #0
 8004008:	e786      	b.n	8003f18 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 800400a:	4f54      	ldr	r7, [pc, #336]	; (800415c <ParseSnippetCondition+0x36c>)
 800400c:	00a3      	lsls	r3, r4, #2
 800400e:	191c      	adds	r4, r3, r4
 8004010:	00a3      	lsls	r3, r4, #2
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	220a      	movs	r2, #10
 8004016:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004018:	0028      	movs	r0, r5
 800401a:	300f      	adds	r0, #15
 800401c:	f00f f961 	bl	80132e2 <atoi>
 8004020:	4b4d      	ldr	r3, [pc, #308]	; (8004158 <ParseSnippetCondition+0x368>)
 8004022:	781a      	ldrb	r2, [r3, #0]
 8004024:	b2c0      	uxtb	r0, r0
 8004026:	0093      	lsls	r3, r2, #2
 8004028:	189b      	adds	r3, r3, r2
 800402a:	009a      	lsls	r2, r3, #2
 800402c:	18bf      	adds	r7, r7, r2
 800402e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004030:	2301      	movs	r3, #1
 8004032:	9305      	str	r3, [sp, #20]
 8004034:	2300      	movs	r3, #0
 8004036:	9304      	str	r3, [sp, #16]
 8004038:	9303      	str	r3, [sp, #12]
 800403a:	9302      	str	r3, [sp, #8]
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	9000      	str	r0, [sp, #0]
 8004040:	2200      	movs	r2, #0
 8004042:	2100      	movs	r1, #0
 8004044:	0030      	movs	r0, r6
 8004046:	f003 fe1d 	bl	8007c84 <SetButtonEvents>
					status = BOS_OK;		
 800404a:	2000      	movs	r0, #0
 800404c:	e764      	b.n	8003f18 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 800404e:	4f43      	ldr	r7, [pc, #268]	; (800415c <ParseSnippetCondition+0x36c>)
 8004050:	00a3      	lsls	r3, r4, #2
 8004052:	191c      	adds	r4, r3, r4
 8004054:	00a3      	lsls	r3, r4, #2
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	220b      	movs	r2, #11
 800405a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 800405c:	0028      	movs	r0, r5
 800405e:	300f      	adds	r0, #15
 8004060:	f00f f93f 	bl	80132e2 <atoi>
 8004064:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <ParseSnippetCondition+0x368>)
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	b2c0      	uxtb	r0, r0
 800406a:	0093      	lsls	r3, r2, #2
 800406c:	189b      	adds	r3, r3, r2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	18bf      	adds	r7, r7, r2
 8004072:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004074:	2301      	movs	r3, #1
 8004076:	9305      	str	r3, [sp, #20]
 8004078:	2300      	movs	r3, #0
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	9302      	str	r3, [sp, #8]
 8004080:	9001      	str	r0, [sp, #4]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2200      	movs	r2, #0
 8004086:	2100      	movs	r1, #0
 8004088:	0030      	movs	r0, r6
 800408a:	f003 fdfb 	bl	8007c84 <SetButtonEvents>
					status = BOS_OK;	
 800408e:	2000      	movs	r0, #0
 8004090:	e742      	b.n	8003f18 <ParseSnippetCondition+0x128>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004092:	220d      	movs	r2, #13
 8004094:	4938      	ldr	r1, [pc, #224]	; (8004178 <ParseSnippetCondition+0x388>)
 8004096:	0038      	movs	r0, r7
 8004098:	f010 f946 	bl	8014328 <strncmp>
 800409c:	2800      	cmp	r0, #0
 800409e:	d000      	beq.n	80040a2 <ParseSnippetCondition+0x2b2>
 80040a0:	e08e      	b.n	80041c0 <ParseSnippetCondition+0x3d0>
				if (!button[port].releasedY1Sec) {	
 80040a2:	00f2      	lsls	r2, r6, #3
 80040a4:	1992      	adds	r2, r2, r6
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <ParseSnippetCondition+0x37c>)
 80040a8:	189b      	adds	r3, r3, r2
 80040aa:	795b      	ldrb	r3, [r3, #5]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00f      	beq.n	80040d0 <ParseSnippetCondition+0x2e0>
				} else if (!button[port].releasedY2Sec) {	
 80040b0:	00f2      	lsls	r2, r6, #3
 80040b2:	1992      	adds	r2, r2, r6
 80040b4:	4b2d      	ldr	r3, [pc, #180]	; (800416c <ParseSnippetCondition+0x37c>)
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	799b      	ldrb	r3, [r3, #6]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d02a      	beq.n	8004114 <ParseSnippetCondition+0x324>
				} else if (!button[port].releasedY3Sec) {	
 80040be:	00f2      	lsls	r2, r6, #3
 80040c0:	1992      	adds	r2, r2, r6
 80040c2:	4b2a      	ldr	r3, [pc, #168]	; (800416c <ParseSnippetCondition+0x37c>)
 80040c4:	189b      	adds	r3, r3, r2
 80040c6:	79db      	ldrb	r3, [r3, #7]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d057      	beq.n	800417c <ParseSnippetCondition+0x38c>
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 80040cc:	200d      	movs	r0, #13
 80040ce:	e723      	b.n	8003f18 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 80040d0:	4f22      	ldr	r7, [pc, #136]	; (800415c <ParseSnippetCondition+0x36c>)
 80040d2:	00a3      	lsls	r3, r4, #2
 80040d4:	191c      	adds	r4, r3, r4
 80040d6:	00a3      	lsls	r3, r4, #2
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	220c      	movs	r2, #12
 80040dc:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 80040de:	0028      	movs	r0, r5
 80040e0:	3010      	adds	r0, #16
 80040e2:	f00f f8fe 	bl	80132e2 <atoi>
 80040e6:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <ParseSnippetCondition+0x368>)
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	b2c0      	uxtb	r0, r0
 80040ec:	0093      	lsls	r3, r2, #2
 80040ee:	189b      	adds	r3, r3, r2
 80040f0:	009a      	lsls	r2, r3, #2
 80040f2:	18bf      	adds	r7, r7, r2
 80040f4:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 80040f6:	2301      	movs	r3, #1
 80040f8:	9305      	str	r3, [sp, #20]
 80040fa:	2300      	movs	r3, #0
 80040fc:	9304      	str	r3, [sp, #16]
 80040fe:	9303      	str	r3, [sp, #12]
 8004100:	9002      	str	r0, [sp, #8]
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	2100      	movs	r1, #0
 800410a:	0030      	movs	r0, r6
 800410c:	f003 fdba 	bl	8007c84 <SetButtonEvents>
					status = BOS_OK;
 8004110:	2000      	movs	r0, #0
 8004112:	e701      	b.n	8003f18 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 8004114:	4f11      	ldr	r7, [pc, #68]	; (800415c <ParseSnippetCondition+0x36c>)
 8004116:	00a3      	lsls	r3, r4, #2
 8004118:	191c      	adds	r4, r3, r4
 800411a:	00a3      	lsls	r3, r4, #2
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	220d      	movs	r2, #13
 8004120:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004122:	0028      	movs	r0, r5
 8004124:	3010      	adds	r0, #16
 8004126:	f00f f8dc 	bl	80132e2 <atoi>
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <ParseSnippetCondition+0x368>)
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	b2c0      	uxtb	r0, r0
 8004130:	0093      	lsls	r3, r2, #2
 8004132:	189b      	adds	r3, r3, r2
 8004134:	009a      	lsls	r2, r3, #2
 8004136:	18bf      	adds	r7, r7, r2
 8004138:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 800413a:	2301      	movs	r3, #1
 800413c:	9305      	str	r3, [sp, #20]
 800413e:	2300      	movs	r3, #0
 8004140:	9304      	str	r3, [sp, #16]
 8004142:	9003      	str	r0, [sp, #12]
 8004144:	9302      	str	r3, [sp, #8]
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	2100      	movs	r1, #0
 800414e:	0030      	movs	r0, r6
 8004150:	f003 fd98 	bl	8007c84 <SetButtonEvents>
					status = BOS_OK;		
 8004154:	2000      	movs	r0, #0
 8004156:	e6df      	b.n	8003f18 <ParseSnippetCondition+0x128>
 8004158:	20000a37 	.word	0x20000a37
 800415c:	20006164 	.word	0x20006164
 8004160:	2000099c 	.word	0x2000099c
 8004164:	080172c4 	.word	0x080172c4
 8004168:	080187d0 	.word	0x080187d0
 800416c:	20000cd0 	.word	0x20000cd0
 8004170:	08017940 	.word	0x08017940
 8004174:	08017950 	.word	0x08017950
 8004178:	08017960 	.word	0x08017960
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 800417c:	4f30      	ldr	r7, [pc, #192]	; (8004240 <ParseSnippetCondition+0x450>)
 800417e:	3314      	adds	r3, #20
 8004180:	4698      	mov	r8, r3
 8004182:	435c      	muls	r4, r3
 8004184:	193c      	adds	r4, r7, r4
 8004186:	3b06      	subs	r3, #6
 8004188:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 800418a:	0028      	movs	r0, r5
 800418c:	3010      	adds	r0, #16
 800418e:	f00f f8a8 	bl	80132e2 <atoi>
 8004192:	4b2c      	ldr	r3, [pc, #176]	; (8004244 <ParseSnippetCondition+0x454>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	b2c0      	uxtb	r0, r0
 8004198:	4642      	mov	r2, r8
 800419a:	4353      	muls	r3, r2
 800419c:	18ff      	adds	r7, r7, r3
 800419e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 80041a0:	2301      	movs	r3, #1
 80041a2:	9305      	str	r3, [sp, #20]
 80041a4:	9004      	str	r0, [sp, #16]
 80041a6:	2400      	movs	r4, #0
 80041a8:	9403      	str	r4, [sp, #12]
 80041aa:	9402      	str	r4, [sp, #8]
 80041ac:	9401      	str	r4, [sp, #4]
 80041ae:	9400      	str	r4, [sp, #0]
 80041b0:	0023      	movs	r3, r4
 80041b2:	0022      	movs	r2, r4
 80041b4:	0021      	movs	r1, r4
 80041b6:	0030      	movs	r0, r6
 80041b8:	f003 fd64 	bl	8007c84 <SetButtonEvents>
					status = BOS_OK;	
 80041bc:	0020      	movs	r0, r4
 80041be:	e6ab      	b.n	8003f18 <ParseSnippetCondition+0x128>
	BOS_Status status = BOS_OK;
 80041c0:	2000      	movs	r0, #0
 80041c2:	e6a9      	b.n	8003f18 <ParseSnippetCondition+0x128>
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 80041c4:	2c00      	cmp	r4, #0
 80041c6:	d000      	beq.n	80041ca <ParseSnippetCondition+0x3da>
 80041c8:	e64f      	b.n	8003e6a <ParseSnippetCondition+0x7a>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 80041ca:	481e      	ldr	r0, [pc, #120]	; (8004244 <ParseSnippetCondition+0x454>)
 80041cc:	7803      	ldrb	r3, [r0, #0]
 80041ce:	491c      	ldr	r1, [pc, #112]	; (8004240 <ParseSnippetCondition+0x450>)
 80041d0:	009a      	lsls	r2, r3, #2
 80041d2:	18d6      	adds	r6, r2, r3
 80041d4:	00b4      	lsls	r4, r6, #2
 80041d6:	2602      	movs	r6, #2
 80041d8:	5466      	strb	r6, [r4, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 80041da:	1909      	adds	r1, r1, r4
 80041dc:	70cd      	strb	r5, [r1, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 80041de:	3301      	adds	r3, #1
 80041e0:	7003      	strb	r3, [r0, #0]
				return BOS_OK;
 80041e2:	2000      	movs	r0, #0
 80041e4:	e01d      	b.n	8004222 <ParseSnippetCondition+0x432>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <ParseSnippetCondition+0x454>)
 80041e8:	4698      	mov	r8, r3
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	4f14      	ldr	r7, [pc, #80]	; (8004240 <ParseSnippetCondition+0x450>)
 80041ee:	0093      	lsls	r3, r2, #2
 80041f0:	1898      	adds	r0, r3, r2
 80041f2:	0081      	lsls	r1, r0, #2
 80041f4:	2003      	movs	r0, #3
 80041f6:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 80041f8:	187a      	adds	r2, r7, r1
 80041fa:	70d5      	strb	r5, [r2, #3]
					float constant = atof(thirdPart);
 80041fc:	0020      	movs	r0, r4
 80041fe:	f00f f86b 	bl	80132d8 <atof>
 8004202:	f7fe f8d1 	bl	80023a8 <__aeabi_d2f>
 8004206:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004208:	4643      	mov	r3, r8
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	0093      	lsls	r3, r2, #2
 800420e:	189b      	adds	r3, r3, r2
 8004210:	0098      	lsls	r0, r3, #2
 8004212:	19c0      	adds	r0, r0, r7
 8004214:	3006      	adds	r0, #6
 8004216:	2204      	movs	r2, #4
 8004218:	a907      	add	r1, sp, #28
 800421a:	f00f f8da 	bl	80133d2 <memcpy>
 800421e:	e63b      	b.n	8003e98 <ParseSnippetCondition+0xa8>
		return BOS_ERR_SNIP_MEM_FULL;
 8004220:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004222:	b008      	add	sp, #32
 8004224:	bc04      	pop	{r2}
 8004226:	4690      	mov	r8, r2
 8004228:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status status = BOS_OK;
 800422a:	2000      	movs	r0, #0
 800422c:	e7f9      	b.n	8004222 <ParseSnippetCondition+0x432>
			return BOS_ERR_WrongParam;
 800422e:	2067      	movs	r0, #103	; 0x67
 8004230:	e7f7      	b.n	8004222 <ParseSnippetCondition+0x432>
				return BOS_ERR_WrongParam;
 8004232:	2067      	movs	r0, #103	; 0x67
 8004234:	e7f5      	b.n	8004222 <ParseSnippetCondition+0x432>
 8004236:	2067      	movs	r0, #103	; 0x67
 8004238:	e7f3      	b.n	8004222 <ParseSnippetCondition+0x432>
					return BOS_ERR_WrongParam;
 800423a:	2067      	movs	r0, #103	; 0x67
 800423c:	e7f1      	b.n	8004222 <ParseSnippetCondition+0x432>
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	20006164 	.word	0x20006164
 8004244:	20000a37 	.word	0x20000a37

08004248 <AddSnippet>:
{
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	000c      	movs	r4, r1
	switch (code)
 800424c:	2802      	cmp	r0, #2
 800424e:	d017      	beq.n	8004280 <AddSnippet+0x38>
 8004250:	2803      	cmp	r0, #3
 8004252:	d003      	beq.n	800425c <AddSnippet+0x14>
 8004254:	2801      	cmp	r0, #1
 8004256:	d00f      	beq.n	8004278 <AddSnippet+0x30>
	return BOS_OK;
 8004258:	2000      	movs	r0, #0
 800425a:	e00c      	b.n	8004276 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets-1].state = true;
 800425c:	4b34      	ldr	r3, [pc, #208]	; (8004330 <AddSnippet+0xe8>)
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	3a01      	subs	r2, #1
 8004262:	0093      	lsls	r3, r2, #2
 8004264:	189b      	adds	r3, r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	4b32      	ldr	r3, [pc, #200]	; (8004334 <AddSnippet+0xec>)
 800426a:	189b      	adds	r3, r3, r2
 800426c:	2201      	movs	r2, #1
 800426e:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004270:	f006 fd7a 	bl	800ad68 <SaveToRO>
	return BOS_OK;
 8004274:	2000      	movs	r0, #0
}
 8004276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004278:	0008      	movs	r0, r1
 800427a:	f7ff fdb9 	bl	8003df0 <ParseSnippetCondition>
 800427e:	e7fa      	b.n	8004276 <AddSnippet+0x2e>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <AddSnippet+0xe8>)
 8004282:	781d      	ldrb	r5, [r3, #0]
 8004284:	3d01      	subs	r5, #1
 8004286:	00ab      	lsls	r3, r5, #2
 8004288:	195b      	adds	r3, r3, r5
 800428a:	009a      	lsls	r2, r3, #2
 800428c:	4b29      	ldr	r3, [pc, #164]	; (8004334 <AddSnippet+0xec>)
 800428e:	189b      	adds	r3, r3, r2
 8004290:	68de      	ldr	r6, [r3, #12]
 8004292:	2e00      	cmp	r6, #0
 8004294:	d034      	beq.n	8004300 <AddSnippet+0xb8>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8004296:	0030      	movs	r0, r6
 8004298:	f7fb ff3e 	bl	8000118 <strlen>
 800429c:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 800429e:	0020      	movs	r0, r4
 80042a0:	f7fb ff3a 	bl	8000118 <strlen>
 80042a4:	1839      	adds	r1, r7, r0
 80042a6:	3102      	adds	r1, #2
 80042a8:	0030      	movs	r0, r6
 80042aa:	f00f ffd9 	bl	8014260 <realloc>
 80042ae:	4e21      	ldr	r6, [pc, #132]	; (8004334 <AddSnippet+0xec>)
 80042b0:	00ab      	lsls	r3, r5, #2
 80042b2:	195d      	adds	r5, r3, r5
 80042b4:	00ab      	lsls	r3, r5, #2
 80042b6:	18f3      	adds	r3, r6, r3
 80042b8:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 80042ba:	4d1d      	ldr	r5, [pc, #116]	; (8004330 <AddSnippet+0xe8>)
 80042bc:	782b      	ldrb	r3, [r5, #0]
 80042be:	3b01      	subs	r3, #1
 80042c0:	009a      	lsls	r2, r3, #2
 80042c2:	18d2      	adds	r2, r2, r3
 80042c4:	0093      	lsls	r3, r2, #2
 80042c6:	18f3      	adds	r3, r6, r3
 80042c8:	68d8      	ldr	r0, [r3, #12]
 80042ca:	1c7b      	adds	r3, r7, #1
 80042cc:	18c0      	adds	r0, r0, r3
 80042ce:	0021      	movs	r1, r4
 80042d0:	f010 f822 	bl	8014318 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 80042d4:	782a      	ldrb	r2, [r5, #0]
 80042d6:	3a01      	subs	r2, #1
 80042d8:	0093      	lsls	r3, r2, #2
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	009a      	lsls	r2, r3, #2
 80042de:	18b6      	adds	r6, r6, r2
 80042e0:	68f3      	ldr	r3, [r6, #12]
 80042e2:	2213      	movs	r2, #19
 80042e4:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <AddSnippet+0xe8>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	009a      	lsls	r2, r3, #2
 80042ee:	18d2      	adds	r2, r2, r3
 80042f0:	0091      	lsls	r1, r2, #2
 80042f2:	4a10      	ldr	r2, [pc, #64]	; (8004334 <AddSnippet+0xec>)
 80042f4:	1852      	adds	r2, r2, r1
 80042f6:	68d2      	ldr	r2, [r2, #12]
 80042f8:	2a00      	cmp	r2, #0
 80042fa:	d011      	beq.n	8004320 <AddSnippet+0xd8>
	return BOS_OK;
 80042fc:	2000      	movs	r0, #0
 80042fe:	e7ba      	b.n	8004276 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8004300:	0008      	movs	r0, r1
 8004302:	f7fb ff09 	bl	8000118 <strlen>
 8004306:	3001      	adds	r0, #1
 8004308:	f00f f82e 	bl	8013368 <malloc>
 800430c:	00ab      	lsls	r3, r5, #2
 800430e:	195d      	adds	r5, r3, r5
 8004310:	00aa      	lsls	r2, r5, #2
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <AddSnippet+0xec>)
 8004314:	189b      	adds	r3, r3, r2
 8004316:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8004318:	0021      	movs	r1, r4
 800431a:	f00f fffd 	bl	8014318 <strcpy>
 800431e:	e7e2      	b.n	80042e6 <AddSnippet+0x9e>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <AddSnippet+0xec>)
 8004322:	18c8      	adds	r0, r1, r3
 8004324:	2214      	movs	r2, #20
 8004326:	2100      	movs	r1, #0
 8004328:	f00f f85c 	bl	80133e4 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800432c:	200e      	movs	r0, #14
 800432e:	e7a2      	b.n	8004276 <AddSnippet+0x2e>
 8004330:	20000a37 	.word	0x20000a37
 8004334:	20006164 	.word	0x20006164

08004338 <CLI_CommandParser>:
{
 8004338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433a:	46de      	mov	lr, fp
 800433c:	4657      	mov	r7, sl
 800433e:	464e      	mov	r6, r9
 8004340:	4645      	mov	r5, r8
 8004342:	b5e0      	push	{r5, r6, r7, lr}
 8004344:	b08b      	sub	sp, #44	; 0x2c
 8004346:	9004      	str	r0, [sp, #16]
 8004348:	9103      	str	r1, [sp, #12]
 800434a:	0015      	movs	r5, r2
 800434c:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 800434e:	2209      	movs	r2, #9
 8004350:	2100      	movs	r1, #0
 8004352:	a807      	add	r0, sp, #28
 8004354:	f00f f846 	bl	80133e4 <memset>
 8004358:	e160      	b.n	800461c <CLI_CommandParser+0x2e4>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 800435a:	1ce9      	adds	r1, r5, #3
 800435c:	3001      	adds	r0, #1
 800435e:	f7ff ff73 	bl	8004248 <AddSnippet>
 8004362:	2800      	cmp	r0, #0
 8004364:	d106      	bne.n	8004374 <CLI_CommandParser+0x3c>
				recordSnippet = SNIPPET_COMMANDS;
 8004366:	4bcf      	ldr	r3, [pc, #828]	; (80046a4 <CLI_CommandParser+0x36c>)
 8004368:	2202      	movs	r2, #2
 800436a:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 800436c:	230d      	movs	r3, #13
 800436e:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8004370:	2700      	movs	r7, #0
 8004372:	e184      	b.n	800467e <CLI_CommandParser+0x346>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004374:	2252      	movs	r2, #82	; 0x52
 8004376:	49cc      	ldr	r1, [pc, #816]	; (80046a8 <CLI_CommandParser+0x370>)
 8004378:	0020      	movs	r0, r4
 800437a:	f00f f82a 	bl	80133d2 <memcpy>
				recordSnippet = 0;
 800437e:	4bc9      	ldr	r3, [pc, #804]	; (80046a4 <CLI_CommandParser+0x36c>)
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
			xReturned = pdFALSE;
 8004384:	2700      	movs	r7, #0
 8004386:	e17a      	b.n	800467e <CLI_CommandParser+0x346>
			recordSnippet = 0;
 8004388:	4bc6      	ldr	r3, [pc, #792]	; (80046a4 <CLI_CommandParser+0x36c>)
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 800438e:	49c7      	ldr	r1, [pc, #796]	; (80046ac <CLI_CommandParser+0x374>)
 8004390:	3003      	adds	r0, #3
 8004392:	f7ff ff59 	bl	8004248 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 8004396:	2241      	movs	r2, #65	; 0x41
 8004398:	49c5      	ldr	r1, [pc, #788]	; (80046b0 <CLI_CommandParser+0x378>)
 800439a:	0020      	movs	r0, r4
 800439c:	f00f f819 	bl	80133d2 <memcpy>
			xReturned = pdFALSE;
 80043a0:	2700      	movs	r7, #0
 80043a2:	e16c      	b.n	800467e <CLI_CommandParser+0x346>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 80043a4:	0029      	movs	r1, r5
 80043a6:	2002      	movs	r0, #2
 80043a8:	f7ff ff4e 	bl	8004248 <AddSnippet>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d103      	bne.n	80043b8 <CLI_CommandParser+0x80>
				pcOutputString[0] = '\r';
 80043b0:	230d      	movs	r3, #13
 80043b2:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 80043b4:	2700      	movs	r7, #0
 80043b6:	e162      	b.n	800467e <CLI_CommandParser+0x346>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80043b8:	2252      	movs	r2, #82	; 0x52
 80043ba:	49bb      	ldr	r1, [pc, #748]	; (80046a8 <CLI_CommandParser+0x370>)
 80043bc:	0020      	movs	r0, r4
 80043be:	f00f f808 	bl	80133d2 <memcpy>
			xReturned = pdFALSE;
 80043c2:	2700      	movs	r7, #0
 80043c4:	e15b      	b.n	800467e <CLI_CommandParser+0x346>
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 80043c6:	f00e ffc1 	bl	801334c <__locale_ctype_ptr>
 80043ca:	7873      	ldrb	r3, [r6, #1]
 80043cc:	18c0      	adds	r0, r0, r3
 80043ce:	7843      	ldrb	r3, [r0, #1]
 80043d0:	075b      	lsls	r3, r3, #29
 80043d2:	d500      	bpl.n	80043d6 <CLI_CommandParser+0x9e>
 80043d4:	e14c      	b.n	8004670 <CLI_CommandParser+0x338>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 80043d6:	1b72      	subs	r2, r6, r5
 80043d8:	0029      	movs	r1, r5
 80043da:	a807      	add	r0, sp, #28
 80043dc:	f00f ffb5 	bl	801434a <strncpy>
				id = GetID(idString);
 80043e0:	a807      	add	r0, sp, #28
 80043e2:	f7ff fa29 	bl	8003838 <GetID>
 80043e6:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 80043e8:	4ab2      	ldr	r2, [pc, #712]	; (80046b4 <CLI_CommandParser+0x37c>)
 80043ea:	7812      	ldrb	r2, [r2, #0]
 80043ec:	4691      	mov	r9, r2
 80043ee:	4290      	cmp	r0, r2
 80043f0:	d02c      	beq.n	800444c <CLI_CommandParser+0x114>
				}	else if (id == BOS_ERR_WrongName) {		
 80043f2:	2864      	cmp	r0, #100	; 0x64
 80043f4:	d032      	beq.n	800445c <CLI_CommandParser+0x124>
				}	else if (id == BOS_ERR_WrongID) {
 80043f6:	2866      	cmp	r0, #102	; 0x66
 80043f8:	d037      	beq.n	800446a <CLI_CommandParser+0x132>
				}	else if (id == BOS_BROADCAST) {
 80043fa:	28ff      	cmp	r0, #255	; 0xff
 80043fc:	d03c      	beq.n	8004478 <CLI_CommandParser+0x140>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 80043fe:	466b      	mov	r3, sp
 8004400:	7d1b      	ldrb	r3, [r3, #20]
 8004402:	469a      	mov	sl, r3
 8004404:	2bfe      	cmp	r3, #254	; 0xfe
 8004406:	d068      	beq.n	80044da <CLI_CommandParser+0x1a2>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 8004408:	3601      	adds	r6, #1
 800440a:	2206      	movs	r2, #6
 800440c:	49aa      	ldr	r1, [pc, #680]	; (80046b8 <CLI_CommandParser+0x380>)
 800440e:	0030      	movs	r0, r6
 8004410:	f00f ff8a 	bl	8014328 <strncmp>
 8004414:	2800      	cmp	r0, #0
 8004416:	d000      	beq.n	800441a <CLI_CommandParser+0xe2>
 8004418:	e0a3      	b.n	8004562 <CLI_CommandParser+0x22a>
						BOS.response = BOS_RESPONSE_NONE;				
 800441a:	4ba8      	ldr	r3, [pc, #672]	; (80046bc <CLI_CommandParser+0x384>)
 800441c:	2200      	movs	r2, #0
 800441e:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 8004420:	2119      	movs	r1, #25
 8004422:	4650      	mov	r0, sl
 8004424:	f004 f8e2 	bl	80085ec <SendMessageToModule>
						osDelay(100);
 8004428:	2064      	movs	r0, #100	; 0x64
 800442a:	f009 fe6f 	bl	800e10c <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 800442e:	4ba4      	ldr	r3, [pc, #656]	; (80046c0 <CLI_CommandParser+0x388>)
 8004430:	781a      	ldrb	r2, [r3, #0]
 8004432:	4ba0      	ldr	r3, [pc, #640]	; (80046b4 <CLI_CommandParser+0x37c>)
 8004434:	7818      	ldrb	r0, [r3, #0]
 8004436:	2300      	movs	r3, #0
 8004438:	4651      	mov	r1, sl
 800443a:	f7fe fee7 	bl	800320c <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 800443e:	4b9f      	ldr	r3, [pc, #636]	; (80046bc <CLI_CommandParser+0x384>)
 8004440:	799b      	ldrb	r3, [r3, #6]
 8004442:	2b60      	cmp	r3, #96	; 0x60
 8004444:	d100      	bne.n	8004448 <CLI_CommandParser+0x110>
 8004446:	e0c8      	b.n	80045da <CLI_CommandParser+0x2a2>
					xReturned = pdFALSE;
 8004448:	2700      	movs	r7, #0
 800444a:	e118      	b.n	800467e <CLI_CommandParser+0x346>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 800444c:	1c70      	adds	r0, r6, #1
 800444e:	2299      	movs	r2, #153	; 0x99
 8004450:	0092      	lsls	r2, r2, #2
 8004452:	0021      	movs	r1, r4
 8004454:	f009 ff16 	bl	800e284 <FreeRTOS_CLIProcessCommand>
 8004458:	0007      	movs	r7, r0
 800445a:	e110      	b.n	800467e <CLI_CommandParser+0x346>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 800445c:	2227      	movs	r2, #39	; 0x27
 800445e:	4999      	ldr	r1, [pc, #612]	; (80046c4 <CLI_CommandParser+0x38c>)
 8004460:	0020      	movs	r0, r4
 8004462:	f00e ffb6 	bl	80133d2 <memcpy>
					xReturned = pdFALSE;
 8004466:	2700      	movs	r7, #0
 8004468:	e109      	b.n	800467e <CLI_CommandParser+0x346>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 800446a:	2225      	movs	r2, #37	; 0x25
 800446c:	4996      	ldr	r1, [pc, #600]	; (80046c8 <CLI_CommandParser+0x390>)
 800446e:	0020      	movs	r0, r4
 8004470:	f00e ffaf 	bl	80133d2 <memcpy>
					xReturned = pdFALSE;						
 8004474:	2700      	movs	r7, #0
 8004476:	e102      	b.n	800467e <CLI_CommandParser+0x346>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8004478:	221a      	movs	r2, #26
 800447a:	2100      	movs	r1, #0
 800447c:	4893      	ldr	r0, [pc, #588]	; (80046cc <CLI_CommandParser+0x394>)
 800447e:	f00e ffb1 	bl	80133e4 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8004482:	3601      	adds	r6, #1
 8004484:	0028      	movs	r0, r5
 8004486:	f7fb fe47 	bl	8000118 <strlen>
 800448a:	0007      	movs	r7, r0
 800448c:	a807      	add	r0, sp, #28
 800448e:	f7fb fe43 	bl	8000118 <strlen>
 8004492:	1a3a      	subs	r2, r7, r0
 8004494:	3a01      	subs	r2, #1
 8004496:	0031      	movs	r1, r6
 8004498:	488d      	ldr	r0, [pc, #564]	; (80046d0 <CLI_CommandParser+0x398>)
 800449a:	f00f ff56 	bl	801434a <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 800449e:	0028      	movs	r0, r5
 80044a0:	f7fb fe3a 	bl	8000118 <strlen>
 80044a4:	0007      	movs	r7, r0
 80044a6:	a807      	add	r0, sp, #28
 80044a8:	f7fb fe36 	bl	8000118 <strlen>
 80044ac:	1a3b      	subs	r3, r7, r0
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2217      	movs	r2, #23
 80044b2:	21ff      	movs	r1, #255	; 0xff
 80044b4:	4648      	mov	r0, r9
 80044b6:	f004 f871 	bl	800859c <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 80044ba:	2299      	movs	r2, #153	; 0x99
 80044bc:	0092      	lsls	r2, r2, #2
 80044be:	0021      	movs	r1, r4
 80044c0:	0030      	movs	r0, r6
 80044c2:	f009 fedf 	bl	800e284 <FreeRTOS_CLIProcessCommand>
 80044c6:	0007      	movs	r7, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 80044c8:	0020      	movs	r0, r4
 80044ca:	f7fb fe25 	bl	8000118 <strlen>
 80044ce:	1820      	adds	r0, r4, r0
 80044d0:	221d      	movs	r2, #29
 80044d2:	4980      	ldr	r1, [pc, #512]	; (80046d4 <CLI_CommandParser+0x39c>)
 80044d4:	f00e ff7d 	bl	80133d2 <memcpy>
 80044d8:	e0d1      	b.n	800467e <CLI_CommandParser+0x346>
					group = id >> 8;
 80044da:	9b05      	ldr	r3, [sp, #20]
 80044dc:	121b      	asrs	r3, r3, #8
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	469a      	mov	sl, r3
 80044e2:	4b7d      	ldr	r3, [pc, #500]	; (80046d8 <CLI_CommandParser+0x3a0>)
 80044e4:	469b      	mov	fp, r3
 80044e6:	4652      	mov	r2, sl
 80044e8:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 80044ea:	221a      	movs	r2, #26
 80044ec:	2100      	movs	r1, #0
 80044ee:	4877      	ldr	r0, [pc, #476]	; (80046cc <CLI_CommandParser+0x394>)
 80044f0:	f00e ff78 	bl	80133e4 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 80044f4:	1c73      	adds	r3, r6, #1
 80044f6:	4698      	mov	r8, r3
 80044f8:	0028      	movs	r0, r5
 80044fa:	f7fb fe0d 	bl	8000118 <strlen>
 80044fe:	0006      	movs	r6, r0
 8004500:	a807      	add	r0, sp, #28
 8004502:	f7fb fe09 	bl	8000118 <strlen>
 8004506:	1a32      	subs	r2, r6, r0
 8004508:	3a01      	subs	r2, #1
 800450a:	4641      	mov	r1, r8
 800450c:	4870      	ldr	r0, [pc, #448]	; (80046d0 <CLI_CommandParser+0x398>)
 800450e:	f00f ff1c 	bl	801434a <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8004512:	0028      	movs	r0, r5
 8004514:	f7fb fe00 	bl	8000118 <strlen>
 8004518:	0006      	movs	r6, r0
 800451a:	a807      	add	r0, sp, #28
 800451c:	f7fb fdfc 	bl	8000118 <strlen>
 8004520:	1a33      	subs	r3, r6, r0
 8004522:	b29b      	uxth	r3, r3
 8004524:	2217      	movs	r2, #23
 8004526:	4651      	mov	r1, sl
 8004528:	4648      	mov	r0, r9
 800452a:	f004 f837 	bl	800859c <BroadcastMessage>
					if (InGroup(myID, group))
 800452e:	4b61      	ldr	r3, [pc, #388]	; (80046b4 <CLI_CommandParser+0x37c>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	3b01      	subs	r3, #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4a69      	ldr	r2, [pc, #420]	; (80046dc <CLI_CommandParser+0x3a4>)
 8004538:	5a9b      	ldrh	r3, [r3, r2]
 800453a:	465a      	mov	r2, fp
 800453c:	7812      	ldrb	r2, [r2, #0]
 800453e:	4113      	asrs	r3, r2
 8004540:	07db      	lsls	r3, r3, #31
 8004542:	d406      	bmi.n	8004552 <CLI_CommandParser+0x21a>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 8004544:	ab07      	add	r3, sp, #28
 8004546:	0022      	movs	r2, r4
 8004548:	4965      	ldr	r1, [pc, #404]	; (80046e0 <CLI_CommandParser+0x3a8>)
 800454a:	0020      	movs	r0, r4
 800454c:	f00f fea8 	bl	80142a0 <siprintf>
 8004550:	e095      	b.n	800467e <CLI_CommandParser+0x346>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8004552:	2299      	movs	r2, #153	; 0x99
 8004554:	0092      	lsls	r2, r2, #2
 8004556:	0021      	movs	r1, r4
 8004558:	4640      	mov	r0, r8
 800455a:	f009 fe93 	bl	800e284 <FreeRTOS_CLIProcessCommand>
 800455e:	0007      	movs	r7, r0
 8004560:	e7f0      	b.n	8004544 <CLI_CommandParser+0x20c>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 8004562:	0028      	movs	r0, r5
 8004564:	f7fb fdd8 	bl	8000118 <strlen>
 8004568:	0007      	movs	r7, r0
 800456a:	a807      	add	r0, sp, #28
 800456c:	f7fb fdd4 	bl	8000118 <strlen>
 8004570:	1a3a      	subs	r2, r7, r0
 8004572:	3a01      	subs	r2, #1
 8004574:	0031      	movs	r1, r6
 8004576:	4856      	ldr	r0, [pc, #344]	; (80046d0 <CLI_CommandParser+0x398>)
 8004578:	f00f fee7 	bl	801434a <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 800457c:	0028      	movs	r0, r5
 800457e:	f7fb fdcb 	bl	8000118 <strlen>
 8004582:	0006      	movs	r6, r0
 8004584:	a807      	add	r0, sp, #28
 8004586:	f7fb fdc7 	bl	8000118 <strlen>
 800458a:	1a32      	subs	r2, r6, r0
 800458c:	b292      	uxth	r2, r2
 800458e:	3a01      	subs	r2, #1
 8004590:	b292      	uxth	r2, r2
 8004592:	2117      	movs	r1, #23
 8004594:	4650      	mov	r0, sl
 8004596:	f004 f829 	bl	80085ec <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 800459a:	9a05      	ldr	r2, [sp, #20]
 800459c:	4951      	ldr	r1, [pc, #324]	; (80046e4 <CLI_CommandParser+0x3ac>)
 800459e:	0020      	movs	r0, r4
 80045a0:	f00f fe7e 	bl	80142a0 <siprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 80045a4:	7823      	ldrb	r3, [r4, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <CLI_CommandParser+0x278>
 80045aa:	9b03      	ldr	r3, [sp, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d108      	bne.n	80045c2 <CLI_CommandParser+0x28a>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80045b0:	0020      	movs	r0, r4
 80045b2:	f7fb fdb1 	bl	8000118 <strlen>
 80045b6:	0002      	movs	r2, r0
 80045b8:	2100      	movs	r1, #0
 80045ba:	0020      	movs	r0, r4
 80045bc:	f00e ff12 	bl	80133e4 <memset>
 80045c0:	e73d      	b.n	800443e <CLI_CommandParser+0x106>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 80045c2:	0020      	movs	r0, r4
 80045c4:	f7fb fda8 	bl	8000118 <strlen>
 80045c8:	b282      	uxth	r2, r0
 80045ca:	2301      	movs	r3, #1
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	3331      	adds	r3, #49	; 0x31
 80045d0:	0021      	movs	r1, r4
 80045d2:	9804      	ldr	r0, [sp, #16]
 80045d4:	f009 fc66 	bl	800dea4 <writePxMutex>
 80045d8:	e7ea      	b.n	80045b0 <CLI_CommandParser+0x278>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 80045da:	21fa      	movs	r1, #250	; 0xfa
 80045dc:	0089      	lsls	r1, r1, #2
 80045de:	2001      	movs	r0, #1
 80045e0:	f00b f98a 	bl	800f8f8 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 80045e4:	4b40      	ldr	r3, [pc, #256]	; (80046e8 <CLI_CommandParser+0x3b0>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00b      	beq.n	8004604 <CLI_CommandParser+0x2cc>
									++timedoutMsg;
 80045ec:	4a3f      	ldr	r2, [pc, #252]	; (80046ec <CLI_CommandParser+0x3b4>)
 80045ee:	8813      	ldrh	r3, [r2, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 80045f4:	9b05      	ldr	r3, [sp, #20]
 80045f6:	0022      	movs	r2, r4
 80045f8:	493d      	ldr	r1, [pc, #244]	; (80046f0 <CLI_CommandParser+0x3b8>)
 80045fa:	0020      	movs	r0, r4
 80045fc:	f00f fe50 	bl	80142a0 <siprintf>
					xReturned = pdFALSE;
 8004600:	2700      	movs	r7, #0
 8004602:	e03c      	b.n	800467e <CLI_CommandParser+0x346>
 8004604:	2700      	movs	r7, #0
 8004606:	e03a      	b.n	800467e <CLI_CommandParser+0x346>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004608:	0020      	movs	r0, r4
 800460a:	f7fb fd85 	bl	8000118 <strlen>
 800460e:	0002      	movs	r2, r0
 8004610:	2100      	movs	r1, #0
 8004612:	0020      	movs	r0, r4
 8004614:	f00e fee6 	bl	80133e4 <memset>
	} while( xReturned != pdFALSE );
 8004618:	2f00      	cmp	r7, #0
 800461a:	d071      	beq.n	8004700 <CLI_CommandParser+0x3c8>
		StringToLowerCase(( char * )cInputString);
 800461c:	0028      	movs	r0, r5
 800461e:	f7ff fbd1 	bl	8003dc4 <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004622:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <CLI_CommandParser+0x36c>)
 8004624:	781e      	ldrb	r6, [r3, #0]
 8004626:	2e00      	cmp	r6, #0
 8004628:	d107      	bne.n	800463a <CLI_CommandParser+0x302>
 800462a:	2203      	movs	r2, #3
 800462c:	4931      	ldr	r1, [pc, #196]	; (80046f4 <CLI_CommandParser+0x3bc>)
 800462e:	0028      	movs	r0, r5
 8004630:	f00f fe7a 	bl	8014328 <strncmp>
 8004634:	2800      	cmp	r0, #0
 8004636:	d100      	bne.n	800463a <CLI_CommandParser+0x302>
 8004638:	e68f      	b.n	800435a <CLI_CommandParser+0x22>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 800463a:	2e00      	cmp	r6, #0
 800463c:	d007      	beq.n	800464e <CLI_CommandParser+0x316>
 800463e:	2206      	movs	r2, #6
 8004640:	492d      	ldr	r1, [pc, #180]	; (80046f8 <CLI_CommandParser+0x3c0>)
 8004642:	0028      	movs	r0, r5
 8004644:	f00f fe70 	bl	8014328 <strncmp>
 8004648:	2800      	cmp	r0, #0
 800464a:	d100      	bne.n	800464e <CLI_CommandParser+0x316>
 800464c:	e69c      	b.n	8004388 <CLI_CommandParser+0x50>
		else if (recordSnippet == SNIPPET_COMMANDS)
 800464e:	2e02      	cmp	r6, #2
 8004650:	d100      	bne.n	8004654 <CLI_CommandParser+0x31c>
 8004652:	e6a7      	b.n	80043a4 <CLI_CommandParser+0x6c>
			loc = strchr( ( char * ) cInputString, '.');
 8004654:	212e      	movs	r1, #46	; 0x2e
 8004656:	0028      	movs	r0, r5
 8004658:	f00f fe50 	bl	80142fc <strchr>
 800465c:	1e06      	subs	r6, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 800465e:	d007      	beq.n	8004670 <CLI_CommandParser+0x338>
 8004660:	3803      	subs	r0, #3
 8004662:	2203      	movs	r2, #3
 8004664:	4925      	ldr	r1, [pc, #148]	; (80046fc <CLI_CommandParser+0x3c4>)
 8004666:	f00f fe5f 	bl	8014328 <strncmp>
 800466a:	2800      	cmp	r0, #0
 800466c:	d000      	beq.n	8004670 <CLI_CommandParser+0x338>
 800466e:	e6aa      	b.n	80043c6 <CLI_CommandParser+0x8e>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8004670:	2299      	movs	r2, #153	; 0x99
 8004672:	0092      	lsls	r2, r2, #2
 8004674:	0021      	movs	r1, r4
 8004676:	0028      	movs	r0, r5
 8004678:	f009 fe04 	bl	800e284 <FreeRTOS_CLIProcessCommand>
 800467c:	0007      	movs	r7, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 800467e:	7823      	ldrb	r3, [r4, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0c1      	beq.n	8004608 <CLI_CommandParser+0x2d0>
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0be      	beq.n	8004608 <CLI_CommandParser+0x2d0>
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 800468a:	0020      	movs	r0, r4
 800468c:	f7fb fd44 	bl	8000118 <strlen>
 8004690:	b282      	uxth	r2, r0
 8004692:	2301      	movs	r3, #1
 8004694:	425b      	negs	r3, r3
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	3333      	adds	r3, #51	; 0x33
 800469a:	0021      	movs	r1, r4
 800469c:	9804      	ldr	r0, [sp, #16]
 800469e:	f009 fc01 	bl	800dea4 <writePxMutex>
 80046a2:	e7b1      	b.n	8004608 <CLI_CommandParser+0x2d0>
 80046a4:	20000a64 	.word	0x20000a64
 80046a8:	08017778 	.word	0x08017778
 80046ac:	0801742c 	.word	0x0801742c
 80046b0:	080177d4 	.word	0x080177d4
 80046b4:	20000896 	.word	0x20000896
 80046b8:	080178b8 	.word	0x080178b8
 80046bc:	20006148 	.word	0x20006148
 80046c0:	200002cf 	.word	0x200002cf
 80046c4:	0801781c 	.word	0x0801781c
 80046c8:	08017844 	.word	0x08017844
 80046cc:	20000544 	.word	0x20000544
 80046d0:	20000758 	.word	0x20000758
 80046d4:	0801786c 	.word	0x0801786c
 80046d8:	20000a36 	.word	0x20000a36
 80046dc:	200006e0 	.word	0x200006e0
 80046e0:	0801788c 	.word	0x0801788c
 80046e4:	080178c0 	.word	0x080178c0
 80046e8:	20000928 	.word	0x20000928
 80046ec:	20000f12 	.word	0x20000f12
 80046f0:	080178e4 	.word	0x080178e4
 80046f4:	08017774 	.word	0x08017774
 80046f8:	080177cc 	.word	0x080177cc
 80046fc:	08017818 	.word	0x08017818
	memset( idString, 0x00, MaxLengthOfAlias );
 8004700:	2209      	movs	r2, #9
 8004702:	2100      	movs	r1, #0
 8004704:	a807      	add	r0, sp, #28
 8004706:	f00e fe6d 	bl	80133e4 <memset>
	if(!recordSnippet && enableOutput)
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <CLI_CommandParser+0x404>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <CLI_CommandParser+0x3e0>
 8004712:	9b03      	ldr	r3, [sp, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d106      	bne.n	8004726 <CLI_CommandParser+0x3ee>
}
 8004718:	b00b      	add	sp, #44	; 0x2c
 800471a:	bc3c      	pop	{r2, r3, r4, r5}
 800471c:	4690      	mov	r8, r2
 800471e:	4699      	mov	r9, r3
 8004720:	46a2      	mov	sl, r4
 8004722:	46ab      	mov	fp, r5
 8004724:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 8004726:	2301      	movs	r3, #1
 8004728:	425b      	negs	r3, r3
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	3333      	adds	r3, #51	; 0x33
 800472e:	2238      	movs	r2, #56	; 0x38
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <CLI_CommandParser+0x408>)
 8004732:	9804      	ldr	r0, [sp, #16]
 8004734:	f009 fbb6 	bl	800dea4 <writePxMutex>
}
 8004738:	e7ee      	b.n	8004718 <CLI_CommandParser+0x3e0>
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	20000a64 	.word	0x20000a64
 8004740:	08017904 	.word	0x08017904

08004744 <prvCLITask>:
{
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8004748:	2101      	movs	r1, #1
 800474a:	4249      	negs	r1, r1
 800474c:	2001      	movs	r0, #1
 800474e:	f00b f8d3 	bl	800f8f8 <ulTaskNotifyTake>
	cRxedChar = '\0';
 8004752:	230f      	movs	r3, #15
 8004754:	446b      	add	r3, sp
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800475a:	f009 fdf9 	bl	800e350 <FreeRTOS_CLIGetOutputBuffer>
 800475e:	0005      	movs	r5, r0
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8004760:	4b51      	ldr	r3, [pc, #324]	; (80048a8 <prvCLITask+0x164>)
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	23e1      	movs	r3, #225	; 0xe1
 8004766:	031b      	lsls	r3, r3, #12
 8004768:	429a      	cmp	r2, r3
 800476a:	d121      	bne.n	80047b0 <prvCLITask+0x6c>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 800476c:	4b4f      	ldr	r3, [pc, #316]	; (80048ac <prvCLITask+0x168>)
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	005a      	lsls	r2, r3, #1
 8004772:	18d2      	adds	r2, r2, r3
 8004774:	0053      	lsls	r3, r2, #1
 8004776:	4a4e      	ldr	r2, [pc, #312]	; (80048b0 <prvCLITask+0x16c>)
 8004778:	189b      	adds	r3, r3, r2
 800477a:	4a4e      	ldr	r2, [pc, #312]	; (80048b4 <prvCLITask+0x170>)
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	4c4e      	ldr	r4, [pc, #312]	; (80048b8 <prvCLITask+0x174>)
 8004780:	4e4e      	ldr	r6, [pc, #312]	; (80048bc <prvCLITask+0x178>)
 8004782:	7831      	ldrb	r1, [r6, #0]
 8004784:	9100      	str	r1, [sp, #0]
 8004786:	494e      	ldr	r1, [pc, #312]	; (80048c0 <prvCLITask+0x17c>)
 8004788:	0020      	movs	r0, r4
 800478a:	f00f fd89 	bl	80142a0 <siprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 800478e:	7830      	ldrb	r0, [r6, #0]
 8004790:	230a      	movs	r3, #10
 8004792:	4a4c      	ldr	r2, [pc, #304]	; (80048c4 <prvCLITask+0x180>)
 8004794:	494c      	ldr	r1, [pc, #304]	; (80048c8 <prvCLITask+0x184>)
 8004796:	f009 fbb3 	bl	800df00 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 800479a:	0020      	movs	r0, r4
 800479c:	f7fb fcbc 	bl	8000118 <strlen>
 80047a0:	b282      	uxth	r2, r0
 80047a2:	7830      	ldrb	r0, [r6, #0]
 80047a4:	230a      	movs	r3, #10
 80047a6:	0021      	movs	r1, r4
 80047a8:	f009 fbaa 	bl	800df00 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 80047ac:	2600      	movs	r6, #0
 80047ae:	e067      	b.n	8004880 <prvCLITask+0x13c>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 80047b0:	2401      	movs	r4, #1
 80047b2:	2c05      	cmp	r4, #5
 80047b4:	d8da      	bhi.n	800476c <prvCLITask+0x28>
			if (port != PcPort)
 80047b6:	4b41      	ldr	r3, [pc, #260]	; (80048bc <prvCLITask+0x178>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	42a3      	cmp	r3, r4
 80047bc:	d004      	beq.n	80047c8 <prvCLITask+0x84>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 80047be:	21e1      	movs	r1, #225	; 0xe1
 80047c0:	0309      	lsls	r1, r1, #12
 80047c2:	0020      	movs	r0, r4
 80047c4:	f009 fbde 	bl	800df84 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 80047c8:	3401      	adds	r4, #1
 80047ca:	b2e4      	uxtb	r4, r4
 80047cc:	e7f1      	b.n	80047b2 <prvCLITask+0x6e>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 80047ce:	200f      	movs	r0, #15
 80047d0:	4468      	add	r0, sp
 80047d2:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 80047d4:	0198      	lsls	r0, r3, #6
 80047d6:	4a3d      	ldr	r2, [pc, #244]	; (80048cc <prvCLITask+0x188>)
 80047d8:	1812      	adds	r2, r2, r0
 80047da:	2000      	movs	r0, #0
 80047dc:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort-1] = chr;
 80047de:	4a3c      	ldr	r2, [pc, #240]	; (80048d0 <prvCLITask+0x18c>)
 80047e0:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 80047e2:	240f      	movs	r4, #15
 80047e4:	446c      	add	r4, sp
 80047e6:	4b35      	ldr	r3, [pc, #212]	; (80048bc <prvCLITask+0x178>)
 80047e8:	7818      	ldrb	r0, [r3, #0]
 80047ea:	230a      	movs	r3, #10
 80047ec:	2201      	movs	r2, #1
 80047ee:	0021      	movs	r1, r4
 80047f0:	f009 fb86 	bl	800df00 <writePxITMutex>
		if( cRxedChar == '\r' )
 80047f4:	7823      	ldrb	r3, [r4, #0]
 80047f6:	2b0d      	cmp	r3, #13
 80047f8:	d025      	beq.n	8004846 <prvCLITask+0x102>
			if( cRxedChar == '\n' )
 80047fa:	2b0a      	cmp	r3, #10
 80047fc:	d03e      	beq.n	800487c <prvCLITask+0x138>
			else if( cRxedChar == '\b' )
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d049      	beq.n	8004896 <prvCLITask+0x152>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 8004802:	001a      	movs	r2, r3
 8004804:	3a20      	subs	r2, #32
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	2a5e      	cmp	r2, #94	; 0x5e
 800480a:	d837      	bhi.n	800487c <prvCLITask+0x138>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 800480c:	2e31      	cmp	r6, #49	; 0x31
 800480e:	dc35      	bgt.n	800487c <prvCLITask+0x138>
						cInputString[ cInputIndex ] = cRxedChar;
 8004810:	4a30      	ldr	r2, [pc, #192]	; (80048d4 <prvCLITask+0x190>)
 8004812:	5593      	strb	r3, [r2, r6]
						cInputIndex++;
 8004814:	3601      	adds	r6, #1
 8004816:	b276      	sxtb	r6, r6
 8004818:	e030      	b.n	800487c <prvCLITask+0x138>
			taskYIELD();
 800481a:	f00b fb61 	bl	800fee0 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800481e:	3401      	adds	r4, #1
 8004820:	b2a4      	uxth	r4, r4
 8004822:	2c3f      	cmp	r4, #63	; 0x3f
 8004824:	d8dd      	bhi.n	80047e2 <prvCLITask+0x9e>
			if (UARTRxBuf[PcPort-1][chr]) {
 8004826:	4b25      	ldr	r3, [pc, #148]	; (80048bc <prvCLITask+0x178>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	3b01      	subs	r3, #1
 800482c:	0198      	lsls	r0, r3, #6
 800482e:	4a27      	ldr	r2, [pc, #156]	; (80048cc <prvCLITask+0x188>)
 8004830:	1812      	adds	r2, r2, r0
 8004832:	5d12      	ldrb	r2, [r2, r4]
 8004834:	2a00      	cmp	r2, #0
 8004836:	d1ca      	bne.n	80047ce <prvCLITask+0x8a>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8004838:	2c3f      	cmp	r4, #63	; 0x3f
 800483a:	d1ee      	bne.n	800481a <prvCLITask+0xd6>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800483c:	4a24      	ldr	r2, [pc, #144]	; (80048d0 <prvCLITask+0x18c>)
 800483e:	2100      	movs	r1, #0
 8004840:	54d1      	strb	r1, [r2, r3]
 8004842:	2400      	movs	r4, #0
 8004844:	e7e9      	b.n	800481a <prvCLITask+0xd6>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 8004846:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <prvCLITask+0x178>)
 8004848:	7818      	ldrb	r0, [r3, #0]
 800484a:	230a      	movs	r3, #10
 800484c:	2202      	movs	r2, #2
 800484e:	4922      	ldr	r1, [pc, #136]	; (80048d8 <prvCLITask+0x194>)
 8004850:	f009 fb56 	bl	800df00 <writePxITMutex>
			if( cInputIndex == 0 )
 8004854:	2e00      	cmp	r6, #0
 8004856:	d019      	beq.n	800488c <prvCLITask+0x148>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 8004858:	4c1e      	ldr	r4, [pc, #120]	; (80048d4 <prvCLITask+0x190>)
 800485a:	4b18      	ldr	r3, [pc, #96]	; (80048bc <prvCLITask+0x178>)
 800485c:	7818      	ldrb	r0, [r3, #0]
 800485e:	002b      	movs	r3, r5
 8004860:	0022      	movs	r2, r4
 8004862:	2101      	movs	r1, #1
 8004864:	f7ff fd68 	bl	8004338 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 8004868:	0021      	movs	r1, r4
 800486a:	481c      	ldr	r0, [pc, #112]	; (80048dc <prvCLITask+0x198>)
 800486c:	f00f fd54 	bl	8014318 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8004870:	2232      	movs	r2, #50	; 0x32
 8004872:	2100      	movs	r1, #0
 8004874:	0020      	movs	r0, r4
 8004876:	f00e fdb5 	bl	80133e4 <memset>
			cInputIndex = 0;
 800487a:	2600      	movs	r6, #0
		taskYIELD();
 800487c:	f00b fb30 	bl	800fee0 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004880:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <prvCLITask+0x178>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	3b01      	subs	r3, #1
 8004886:	4a12      	ldr	r2, [pc, #72]	; (80048d0 <prvCLITask+0x18c>)
 8004888:	5cd4      	ldrb	r4, [r2, r3]
 800488a:	e7ca      	b.n	8004822 <prvCLITask+0xde>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 800488c:	4913      	ldr	r1, [pc, #76]	; (80048dc <prvCLITask+0x198>)
 800488e:	4811      	ldr	r0, [pc, #68]	; (80048d4 <prvCLITask+0x190>)
 8004890:	f00f fd42 	bl	8014318 <strcpy>
 8004894:	e7e0      	b.n	8004858 <prvCLITask+0x114>
				if( cInputIndex > 0 )
 8004896:	2e00      	cmp	r6, #0
 8004898:	ddf0      	ble.n	800487c <prvCLITask+0x138>
					cInputIndex--;
 800489a:	3e01      	subs	r6, #1
 800489c:	b276      	sxtb	r6, r6
					cInputString[ cInputIndex ] = '\0';
 800489e:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <prvCLITask+0x190>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	559a      	strb	r2, [r3, r6]
 80048a4:	e7ea      	b.n	800487c <prvCLITask+0x138>
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	20006148 	.word	0x20006148
 80048ac:	20000050 	.word	0x20000050
 80048b0:	0801747c 	.word	0x0801747c
 80048b4:	20000896 	.word	0x20000896
 80048b8:	20000a38 	.word	0x20000a38
 80048bc:	200002cf 	.word	0x200002cf
 80048c0:	08017970 	.word	0x08017970
 80048c4:	00000293 	.word	0x00000293
 80048c8:	0801799c 	.word	0x0801799c
 80048cc:	20000ae8 	.word	0x20000ae8
 80048d0:	20000c28 	.word	0x20000c28
 80048d4:	20000968 	.word	0x20000968
 80048d8:	08018d7c 	.word	0x08018d7c
 80048dc:	20000a04 	.word	0x20000a04

080048e0 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 80048e4:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <ParseSnippetCommand+0x78>)
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	3a01      	subs	r2, #1
 80048ea:	0093      	lsls	r3, r2, #2
 80048ec:	189b      	adds	r3, r3, r2
 80048ee:	009a      	lsls	r2, r3, #2
 80048f0:	4b1a      	ldr	r3, [pc, #104]	; (800495c <ParseSnippetCommand+0x7c>)
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d02c      	beq.n	8004954 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 80048fa:	4b19      	ldr	r3, [pc, #100]	; (8004960 <ParseSnippetCommand+0x80>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d014      	beq.n	800492c <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 8004902:	4b17      	ldr	r3, [pc, #92]	; (8004960 <ParseSnippetCommand+0x80>)
 8004904:	681d      	ldr	r5, [r3, #0]
 8004906:	782b      	ldrb	r3, [r5, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d012      	beq.n	8004932 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 800490c:	2113      	movs	r1, #19
 800490e:	0028      	movs	r0, r5
 8004910:	f00f fcf4 	bl	80142fc <strchr>
 8004914:	1e06      	subs	r6, r0, #0
	if (ptrEnd != NULL)
 8004916:	d011      	beq.n	800493c <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 8004918:	1b42      	subs	r2, r0, r5
 800491a:	0029      	movs	r1, r5
 800491c:	0020      	movs	r0, r4
 800491e:	f00f fd14 	bl	801434a <strncpy>
		ptrStart = ptrEnd+1;
 8004922:	3601      	adds	r6, #1
 8004924:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <ParseSnippetCommand+0x80>)
 8004926:	601e      	str	r6, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 8004928:	2001      	movs	r0, #1
 800492a:	e006      	b.n	800493a <ParseSnippetCommand+0x5a>
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <ParseSnippetCommand+0x80>)
 800492e:	6018      	str	r0, [r3, #0]
 8004930:	e7e7      	b.n	8004902 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <ParseSnippetCommand+0x80>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
		return false;
 8004938:	2000      	movs	r0, #0
}
 800493a:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char *)cliBuffer, ptrStart);
 800493c:	0029      	movs	r1, r5
 800493e:	0020      	movs	r0, r4
 8004940:	f00f fcea 	bl	8014318 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 8004944:	0020      	movs	r0, r4
 8004946:	f7fb fbe7 	bl	8000118 <strlen>
 800494a:	182d      	adds	r5, r5, r0
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <ParseSnippetCommand+0x80>)
 800494e:	601d      	str	r5, [r3, #0]
	return true;
 8004950:	2001      	movs	r0, #1
 8004952:	e7f2      	b.n	800493a <ParseSnippetCommand+0x5a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8004954:	2000      	movs	r0, #0
 8004956:	e7f0      	b.n	800493a <ParseSnippetCommand+0x5a>
 8004958:	20000a37 	.word	0x20000a37
 800495c:	20006164 	.word	0x20006164
 8004960:	20000a60 	.word	0x20000a60

08004964 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8004964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004966:	b083      	sub	sp, #12
 8004968:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 800496a:	0083      	lsls	r3, r0, #2
 800496c:	181b      	adds	r3, r3, r0
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	4b46      	ldr	r3, [pc, #280]	; (8004a8c <CheckSnippetCondition+0x128>)
 8004972:	5cd3      	ldrb	r3, [r2, r3]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d004      	beq.n	8004982 <CheckSnippetCondition+0x1e>
 8004978:	2b03      	cmp	r3, #3
 800497a:	d015      	beq.n	80049a8 <CheckSnippetCondition+0x44>
					
  	default:
  		break;
  }
	
	return false;
 800497c:	2000      	movs	r0, #0
}
 800497e:	b003      	add	sp, #12
 8004980:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 8004982:	4a42      	ldr	r2, [pc, #264]	; (8004a8c <CheckSnippetCondition+0x128>)
 8004984:	0083      	lsls	r3, r0, #2
 8004986:	1818      	adds	r0, r3, r0
 8004988:	0081      	lsls	r1, r0, #2
 800498a:	0008      	movs	r0, r1
 800498c:	1851      	adds	r1, r2, r1
 800498e:	7889      	ldrb	r1, [r1, #2]
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 8004990:	1812      	adds	r2, r2, r0
 8004992:	78d2      	ldrb	r2, [r2, #3]
 8004994:	00cb      	lsls	r3, r1, #3
 8004996:	185b      	adds	r3, r3, r1
 8004998:	493d      	ldr	r1, [pc, #244]	; (8004a90 <CheckSnippetCondition+0x12c>)
 800499a:	5c5b      	ldrb	r3, [r3, r1]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <CheckSnippetCondition+0x40>
				return false;			
 80049a0:	2000      	movs	r0, #0
 80049a2:	e7ec      	b.n	800497e <CheckSnippetCondition+0x1a>
				return true;
 80049a4:	2001      	movs	r0, #1
 80049a6:	e7ea      	b.n	800497e <CheckSnippetCondition+0x1a>
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 80049a8:	4e38      	ldr	r6, [pc, #224]	; (8004a8c <CheckSnippetCondition+0x128>)
 80049aa:	0085      	lsls	r5, r0, #2
 80049ac:	182b      	adds	r3, r5, r0
 80049ae:	0099      	lsls	r1, r3, #2
 80049b0:	1871      	adds	r1, r6, r1
 80049b2:	78ca      	ldrb	r2, [r1, #3]
 80049b4:	3a01      	subs	r2, #1
 80049b6:	0053      	lsls	r3, r2, #1
 80049b8:	189b      	adds	r3, r3, r2
 80049ba:	009a      	lsls	r2, r3, #2
 80049bc:	4b35      	ldr	r3, [pc, #212]	; (8004a94 <CheckSnippetCondition+0x130>)
 80049be:	58d3      	ldr	r3, [r2, r3]
 80049c0:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80049c2:	3106      	adds	r1, #6
 80049c4:	2204      	movs	r2, #4
 80049c6:	a801      	add	r0, sp, #4
 80049c8:	f00e fd03 	bl	80133d2 <memcpy>
			switch (snippets[index].cond.mathOperator)
 80049cc:	192c      	adds	r4, r5, r4
 80049ce:	00a3      	lsls	r3, r4, #2
 80049d0:	18f6      	adds	r6, r6, r3
 80049d2:	7873      	ldrb	r3, [r6, #1]
 80049d4:	2b06      	cmp	r3, #6
 80049d6:	d847      	bhi.n	8004a68 <CheckSnippetCondition+0x104>
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4a2f      	ldr	r2, [pc, #188]	; (8004a98 <CheckSnippetCondition+0x134>)
 80049dc:	58d3      	ldr	r3, [r2, r3]
 80049de:	469f      	mov	pc, r3
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 80049e0:	1c39      	adds	r1, r7, #0
 80049e2:	9801      	ldr	r0, [sp, #4]
 80049e4:	f7fb fd6a 	bl	80004bc <__aeabi_fcmpeq>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d03f      	beq.n	8004a6c <CheckSnippetCondition+0x108>
 80049ec:	2001      	movs	r0, #1
 80049ee:	e7c6      	b.n	800497e <CheckSnippetCondition+0x1a>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 80049f0:	1c39      	adds	r1, r7, #0
 80049f2:	9801      	ldr	r0, [sp, #4]
 80049f4:	f7fb fd68 	bl	80004c8 <__aeabi_fcmplt>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d101      	bne.n	8004a00 <CheckSnippetCondition+0x9c>
	return false;
 80049fc:	2000      	movs	r0, #0
 80049fe:	e7be      	b.n	800497e <CheckSnippetCondition+0x1a>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 8004a00:	2001      	movs	r0, #1
 8004a02:	e7bc      	b.n	800497e <CheckSnippetCondition+0x1a>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 8004a04:	1c39      	adds	r1, r7, #0
 8004a06:	9801      	ldr	r0, [sp, #4]
 8004a08:	f7fb fd72 	bl	80004f0 <__aeabi_fcmpgt>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d02f      	beq.n	8004a70 <CheckSnippetCondition+0x10c>
 8004a10:	2100      	movs	r1, #0
 8004a12:	1c38      	adds	r0, r7, #0
 8004a14:	f7fb fd52 	bl	80004bc <__aeabi_fcmpeq>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d12b      	bne.n	8004a74 <CheckSnippetCondition+0x110>
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	e7ae      	b.n	800497e <CheckSnippetCondition+0x1a>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 8004a20:	1c39      	adds	r1, r7, #0
 8004a22:	9801      	ldr	r0, [sp, #4]
 8004a24:	f7fb fd5a 	bl	80004dc <__aeabi_fcmple>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d025      	beq.n	8004a78 <CheckSnippetCondition+0x114>
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	e7a6      	b.n	800497e <CheckSnippetCondition+0x1a>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 8004a30:	1c39      	adds	r1, r7, #0
 8004a32:	9801      	ldr	r0, [sp, #4]
 8004a34:	f7fb fd66 	bl	8000504 <__aeabi_fcmpge>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d01f      	beq.n	8004a7c <CheckSnippetCondition+0x118>
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	1c38      	adds	r0, r7, #0
 8004a40:	f7fb fd3c 	bl	80004bc <__aeabi_fcmpeq>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d11b      	bne.n	8004a80 <CheckSnippetCondition+0x11c>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	e798      	b.n	800497e <CheckSnippetCondition+0x1a>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8004a4c:	1c39      	adds	r1, r7, #0
 8004a4e:	9801      	ldr	r0, [sp, #4]
 8004a50:	f7fb fd34 	bl	80004bc <__aeabi_fcmpeq>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d115      	bne.n	8004a84 <CheckSnippetCondition+0x120>
 8004a58:	2100      	movs	r1, #0
 8004a5a:	1c38      	adds	r0, r7, #0
 8004a5c:	f7fb fd2e 	bl	80004bc <__aeabi_fcmpeq>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d111      	bne.n	8004a88 <CheckSnippetCondition+0x124>
 8004a64:	3001      	adds	r0, #1
 8004a66:	e78a      	b.n	800497e <CheckSnippetCondition+0x1a>
	return false;
 8004a68:	2000      	movs	r0, #0
 8004a6a:	e788      	b.n	800497e <CheckSnippetCondition+0x1a>
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	e786      	b.n	800497e <CheckSnippetCondition+0x1a>
 8004a70:	2000      	movs	r0, #0
 8004a72:	e784      	b.n	800497e <CheckSnippetCondition+0x1a>
 8004a74:	2000      	movs	r0, #0
 8004a76:	e782      	b.n	800497e <CheckSnippetCondition+0x1a>
 8004a78:	2000      	movs	r0, #0
 8004a7a:	e780      	b.n	800497e <CheckSnippetCondition+0x1a>
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	e77e      	b.n	800497e <CheckSnippetCondition+0x1a>
 8004a80:	2000      	movs	r0, #0
 8004a82:	e77c      	b.n	800497e <CheckSnippetCondition+0x1a>
 8004a84:	2000      	movs	r0, #0
 8004a86:	e77a      	b.n	800497e <CheckSnippetCondition+0x1a>
 8004a88:	2000      	movs	r0, #0
 8004a8a:	e778      	b.n	800497e <CheckSnippetCondition+0x1a>
 8004a8c:	20006164 	.word	0x20006164
 8004a90:	20000cd0 	.word	0x20000cd0
 8004a94:	20000084 	.word	0x20000084
 8004a98:	08017758 	.word	0x08017758

08004a9c <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 8004a9c:	b570      	push	{r4, r5, r6, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 8004a9e:	f009 fc57 	bl	800e350 <FreeRTOS_CLIGetOutputBuffer>
 8004aa2:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8004aa4:	2400      	movs	r4, #0
 8004aa6:	e01b      	b.n	8004ae0 <ExecuteSnippet+0x44>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <ExecuteSnippet+0x74>)
 8004aaa:	7818      	ldrb	r0, [r3, #0]
 8004aac:	002b      	movs	r3, r5
 8004aae:	4a19      	ldr	r2, [pc, #100]	; (8004b14 <ExecuteSnippet+0x78>)
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	f7ff fc41 	bl	8004338 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 8004ab6:	0028      	movs	r0, r5
 8004ab8:	f7fb fb2e 	bl	8000118 <strlen>
 8004abc:	0002      	movs	r2, r0
 8004abe:	2100      	movs	r1, #0
 8004ac0:	0028      	movs	r0, r5
 8004ac2:	f00e fc8f 	bl	80133e4 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8004ac6:	00b3      	lsls	r3, r6, #2
 8004ac8:	199b      	adds	r3, r3, r6
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <ExecuteSnippet+0x7c>)
 8004ace:	189b      	adds	r3, r3, r2
 8004ad0:	68d8      	ldr	r0, [r3, #12]
 8004ad2:	4910      	ldr	r1, [pc, #64]	; (8004b14 <ExecuteSnippet+0x78>)
 8004ad4:	f7ff ff04 	bl	80048e0 <ParseSnippetCommand>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d1e5      	bne.n	8004aa8 <ExecuteSnippet+0xc>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8004adc:	3401      	adds	r4, #1
 8004ade:	b2a4      	uxth	r4, r4
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <ExecuteSnippet+0x80>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	d911      	bls.n	8004b0c <ExecuteSnippet+0x70>
		if (snippets[s].state)								// Check for activated Snippets
 8004ae8:	0026      	movs	r6, r4
 8004aea:	00a3      	lsls	r3, r4, #2
 8004aec:	191b      	adds	r3, r3, r4
 8004aee:	009a      	lsls	r2, r3, #2
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <ExecuteSnippet+0x7c>)
 8004af2:	189b      	adds	r3, r3, r2
 8004af4:	7c1b      	ldrb	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <ExecuteSnippet+0x40>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 8004afa:	b2e0      	uxtb	r0, r4
 8004afc:	f7ff ff32 	bl	8004964 <CheckSnippetCondition>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d0eb      	beq.n	8004adc <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <ExecuteSnippet+0x84>)
 8004b06:	2220      	movs	r2, #32
 8004b08:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8004b0a:	e7dc      	b.n	8004ac6 <ExecuteSnippet+0x2a>
			}
		}
  }
	
	return result;
}
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	bd70      	pop	{r4, r5, r6, pc}
 8004b10:	200002cf 	.word	0x200002cf
 8004b14:	200009d0 	.word	0x200009d0
 8004b18:	20006164 	.word	0x20006164
 8004b1c:	20000a37 	.word	0x20000a37
 8004b20:	20006148 	.word	0x20006148

08004b24 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 8004b24:	2000      	movs	r0, #0
 8004b26:	4770      	bx	lr

08004b28 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8004b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	0005      	movs	r5, r0
 8004b2e:	0016      	movs	r6, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8004b34:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d101      	bne.n	8004b3e <setBaudrateCommand+0x16>
 8004b3a:	b672      	cpsid	i
 8004b3c:	e7fe      	b.n	8004b3c <setBaudrateCommand+0x14>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004b3e:	aa01      	add	r2, sp, #4
 8004b40:	2101      	movs	r1, #1
 8004b42:	0030      	movs	r0, r6
 8004b44:	f009 fc08 	bl	800e358 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8004b48:	2300      	movs	r3, #0
 8004b4a:	56c3      	ldrsb	r3, [r0, r3]
 8004b4c:	2b70      	cmp	r3, #112	; 0x70
 8004b4e:	d017      	beq.n	8004b80 <setBaudrateCommand+0x58>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
	}
	else
	{
		result = BOS_ERR_WrongValue;
 8004b50:	2768      	movs	r7, #104	; 0x68
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8004b52:	466a      	mov	r2, sp
 8004b54:	2102      	movs	r1, #2
 8004b56:	0030      	movs	r0, r6
 8004b58:	f009 fbfe 	bl	800e358 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8004b5c:	f00e fbc7 	bl	80132ee <atol>
 8004b60:	0006      	movs	r6, r0

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
 8004b62:	2f68      	cmp	r7, #104	; 0x68
 8004b64:	d012      	beq.n	8004b8c <setBaudrateCommand+0x64>
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
	}
  else
  {
		UpdateBaudrate(port, baudrate);
 8004b66:	0001      	movs	r1, r0
 8004b68:	0020      	movs	r0, r4
 8004b6a:	f009 fa0b 	bl	800df84 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 8004b6e:	0023      	movs	r3, r4
 8004b70:	0032      	movs	r2, r6
 8004b72:	4909      	ldr	r1, [pc, #36]	; (8004b98 <setBaudrateCommand+0x70>)
 8004b74:	0028      	movs	r0, r5
 8004b76:	f00f fb93 	bl	80142a0 <siprintf>
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	b003      	add	sp, #12
 8004b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8004b80:	3001      	adds	r0, #1
 8004b82:	f00e fbb4 	bl	80132ee <atol>
 8004b86:	b2c4      	uxtb	r4, r0
	BOS_Status result = BOS_OK;
 8004b88:	2700      	movs	r7, #0
 8004b8a:	e7e2      	b.n	8004b52 <setBaudrateCommand+0x2a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8004b8c:	2213      	movs	r2, #19
 8004b8e:	4903      	ldr	r1, [pc, #12]	; (8004b9c <setBaudrateCommand+0x74>)
 8004b90:	0028      	movs	r0, r5
 8004b92:	f00e fc1e 	bl	80133d2 <memcpy>
 8004b96:	e7f0      	b.n	8004b7a <setBaudrateCommand+0x52>
 8004b98:	08018538 	.word	0x08018538
 8004b9c:	08018524 	.word	0x08018524

08004ba0 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8004ba0:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d101      	bne.n	8004baa <flashsizeCommand+0xa>
 8004ba6:	b672      	cpsid	i
 8004ba8:	e7fe      	b.n	8004ba8 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 8004baa:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <flashsizeCommand+0x1c>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	0412      	lsls	r2, r2, #16
 8004bb0:	0c12      	lsrs	r2, r2, #16
 8004bb2:	4903      	ldr	r1, [pc, #12]	; (8004bc0 <flashsizeCommand+0x20>)
 8004bb4:	f00f fb74 	bl	80142a0 <siprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8004bb8:	2000      	movs	r0, #0
 8004bba:	bd10      	pop	{r4, pc}
 8004bbc:	1ffff7cc 	.word	0x1ffff7cc
 8004bc0:	08017efc 	.word	0x08017efc

08004bc4 <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8004bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	0004      	movs	r4, r0
 8004bca:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 8004bd0:	4b5f      	ldr	r3, [pc, #380]	; (8004d50 <testportCommand+0x18c>)
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	ab02      	add	r3, sp, #8
 8004bd6:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004bd8:	2c00      	cmp	r4, #0
 8004bda:	d101      	bne.n	8004be0 <testportCommand+0x1c>
 8004bdc:	b672      	cpsid	i
 8004bde:	e7fe      	b.n	8004bde <testportCommand+0x1a>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004be0:	aa03      	add	r2, sp, #12
 8004be2:	2101      	movs	r1, #1
 8004be4:	f009 fbb8 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8004be8:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 8004bea:	495a      	ldr	r1, [pc, #360]	; (8004d54 <testportCommand+0x190>)
 8004bec:	f7fb fa8a 	bl	8000104 <strcmp>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d000      	beq.n	8004bf6 <testportCommand+0x32>
 8004bf4:	e06a      	b.n	8004ccc <testportCommand+0x108>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 8004bf6:	4b58      	ldr	r3, [pc, #352]	; (8004d58 <testportCommand+0x194>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	4a57      	ldr	r2, [pc, #348]	; (8004d5c <testportCommand+0x198>)
 8004bfe:	5cd6      	ldrb	r6, [r2, r3]
    for (ports=1;ports<=NumOfPorts;ports++)
 8004c00:	2501      	movs	r5, #1
 8004c02:	e005      	b.n	8004c10 <testportCommand+0x4c>
    {
      if(PcPort!=ports)
 8004c04:	4b54      	ldr	r3, [pc, #336]	; (8004d58 <testportCommand+0x194>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	42ab      	cmp	r3, r5
 8004c0a:	d106      	bne.n	8004c1a <testportCommand+0x56>
    for (ports=1;ports<=NumOfPorts;ports++)
 8004c0c:	3501      	adds	r5, #1
 8004c0e:	b2ed      	uxtb	r5, r5
 8004c10:	2d05      	cmp	r5, #5
 8004c12:	d9f7      	bls.n	8004c04 <testportCommand+0x40>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8004c14:	2000      	movs	r0, #0
 8004c16:	b005      	add	sp, #20
 8004c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WriteVaule[0]=rand();
 8004c1a:	f00f faef 	bl	80141fc <rand>
 8004c1e:	af02      	add	r7, sp, #8
 8004c20:	7038      	strb	r0, [r7, #0]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8004c22:	2364      	movs	r3, #100	; 0x64
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	3b5a      	subs	r3, #90	; 0x5a
 8004c28:	2201      	movs	r2, #1
 8004c2a:	0039      	movs	r1, r7
 8004c2c:	0028      	movs	r0, r5
 8004c2e:	f009 f939 	bl	800dea4 <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8004c32:	0028      	movs	r0, r5
 8004c34:	f009 f918 	bl	800de68 <GetUart>
 8004c38:	6803      	ldr	r3, [r0, #0]
 8004c3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c3c:	b2db      	uxtb	r3, r3
      if(WriteVaule[0]==ReadValue[0])
 8004c3e:	783a      	ldrb	r2, [r7, #0]
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d022      	beq.n	8004c8a <testportCommand+0xc6>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8004c44:	002a      	movs	r2, r5
 8004c46:	4946      	ldr	r1, [pc, #280]	; (8004d60 <testportCommand+0x19c>)
 8004c48:	0020      	movs	r0, r4
 8004c4a:	f00f fb29 	bl	80142a0 <siprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004c4e:	0020      	movs	r0, r4
 8004c50:	f7fb fa62 	bl	8000118 <strlen>
 8004c54:	b282      	uxth	r2, r0
 8004c56:	4b40      	ldr	r3, [pc, #256]	; (8004d58 <testportCommand+0x194>)
 8004c58:	7818      	ldrb	r0, [r3, #0]
 8004c5a:	2364      	movs	r3, #100	; 0x64
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	3b5a      	subs	r3, #90	; 0x5a
 8004c60:	0021      	movs	r1, r4
 8004c62:	f009 f91f 	bl	800dea4 <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8004c66:	2254      	movs	r2, #84	; 0x54
 8004c68:	493e      	ldr	r1, [pc, #248]	; (8004d64 <testportCommand+0x1a0>)
 8004c6a:	0020      	movs	r0, r4
 8004c6c:	f00e fbb1 	bl	80133d2 <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 8004c70:	0020      	movs	r0, r4
 8004c72:	f7fb fa51 	bl	8000118 <strlen>
 8004c76:	b282      	uxth	r2, r0
 8004c78:	4b37      	ldr	r3, [pc, #220]	; (8004d58 <testportCommand+0x194>)
 8004c7a:	7818      	ldrb	r0, [r3, #0]
 8004c7c:	2364      	movs	r3, #100	; 0x64
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	3b5a      	subs	r3, #90	; 0x5a
 8004c82:	0021      	movs	r1, r4
 8004c84:	f009 f90e 	bl	800dea4 <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8004c88:	e014      	b.n	8004cb4 <testportCommand+0xf0>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 8004c8a:	002a      	movs	r2, r5
 8004c8c:	4936      	ldr	r1, [pc, #216]	; (8004d68 <testportCommand+0x1a4>)
 8004c8e:	0020      	movs	r0, r4
 8004c90:	f00f fb06 	bl	80142a0 <siprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004c94:	0020      	movs	r0, r4
 8004c96:	f7fb fa3f 	bl	8000118 <strlen>
 8004c9a:	b282      	uxth	r2, r0
 8004c9c:	4b2e      	ldr	r3, [pc, #184]	; (8004d58 <testportCommand+0x194>)
 8004c9e:	7818      	ldrb	r0, [r3, #0]
 8004ca0:	2364      	movs	r3, #100	; 0x64
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	3b5a      	subs	r3, #90	; 0x5a
 8004ca6:	0021      	movs	r1, r4
 8004ca8:	f009 f8fc 	bl	800dea4 <writePxMutex>
 8004cac:	e7db      	b.n	8004c66 <testportCommand+0xa2>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8004cae:	2001      	movs	r0, #1
 8004cb0:	f00b faaa 	bl	8010208 <HAL_Delay>
 8004cb4:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <testportCommand+0x194>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	1c71      	adds	r1, r6, #1
 8004cbc:	019b      	lsls	r3, r3, #6
 8004cbe:	4a2b      	ldr	r2, [pc, #172]	; (8004d6c <testportCommand+0x1a8>)
 8004cc0:	18d3      	adds	r3, r2, r3
 8004cc2:	5c5b      	ldrb	r3, [r3, r1]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f2      	beq.n	8004cae <testportCommand+0xea>
       LastEnter++;
 8004cc8:	000e      	movs	r6, r1
 8004cca:	e79f      	b.n	8004c0c <testportCommand+0x48>
	else if (pcParameterString1[0] == 'p') {
 8004ccc:	2300      	movs	r3, #0
 8004cce:	56eb      	ldrsb	r3, [r5, r3]
 8004cd0:	2b70      	cmp	r3, #112	; 0x70
 8004cd2:	d005      	beq.n	8004ce0 <testportCommand+0x11c>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	4926      	ldr	r1, [pc, #152]	; (8004d70 <testportCommand+0x1ac>)
 8004cd8:	0020      	movs	r0, r4
 8004cda:	f00e fb7a 	bl	80133d2 <memcpy>
 8004cde:	e799      	b.n	8004c14 <testportCommand+0x50>
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8004ce0:	1c68      	adds	r0, r5, #1
 8004ce2:	f00e fb04 	bl	80132ee <atol>
 8004ce6:	0005      	movs	r5, r0
 8004ce8:	b2c7      	uxtb	r7, r0
    if(portt>0 && portt<=NumOfPorts)
 8004cea:	1e7b      	subs	r3, r7, #1
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d81a      	bhi.n	8004d28 <testportCommand+0x164>
        WriteVaule[0]=rand();
 8004cf2:	f00f fa83 	bl	80141fc <rand>
 8004cf6:	ae02      	add	r6, sp, #8
 8004cf8:	7030      	strb	r0, [r6, #0]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8004cfa:	2364      	movs	r3, #100	; 0x64
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	3b32      	subs	r3, #50	; 0x32
 8004d00:	2201      	movs	r2, #1
 8004d02:	0031      	movs	r1, r6
 8004d04:	0038      	movs	r0, r7
 8004d06:	f009 f8cd 	bl	800dea4 <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8004d0a:	0038      	movs	r0, r7
 8004d0c:	f009 f8ac 	bl	800de68 <GetUart>
 8004d10:	6803      	ldr	r3, [r0, #0]
 8004d12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d14:	b2db      	uxtb	r3, r3
  if(WriteVaule[0]==ReadValue[0])
 8004d16:	7832      	ldrb	r2, [r6, #0]
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d10e      	bne.n	8004d3a <testportCommand+0x176>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8004d1c:	b2ea      	uxtb	r2, r5
 8004d1e:	4912      	ldr	r1, [pc, #72]	; (8004d68 <testportCommand+0x1a4>)
 8004d20:	0020      	movs	r0, r4
 8004d22:	f00f fabd 	bl	80142a0 <siprintf>
 8004d26:	e775      	b.n	8004c14 <testportCommand+0x50>
   result= BOS_ERR_WrongID;
 8004d28:	2366      	movs	r3, #102	; 0x66
  else if (result == BOS_ERR_WrongID) 
 8004d2a:	2b66      	cmp	r3, #102	; 0x66
 8004d2c:	d107      	bne.n	8004d3e <testportCommand+0x17a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8004d2e:	221b      	movs	r2, #27
 8004d30:	4910      	ldr	r1, [pc, #64]	; (8004d74 <testportCommand+0x1b0>)
 8004d32:	0020      	movs	r0, r4
 8004d34:	f00e fb4d 	bl	80133d2 <memcpy>
 8004d38:	e76c      	b.n	8004c14 <testportCommand+0x50>
      result = BOS_ERR_Keyword;
 8004d3a:	2306      	movs	r3, #6
 8004d3c:	e7f5      	b.n	8004d2a <testportCommand+0x166>
	else if (result == BOS_ERR_Keyword)  
 8004d3e:	2b06      	cmp	r3, #6
 8004d40:	d000      	beq.n	8004d44 <testportCommand+0x180>
 8004d42:	e767      	b.n	8004c14 <testportCommand+0x50>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8004d44:	b2ea      	uxtb	r2, r5
 8004d46:	4906      	ldr	r1, [pc, #24]	; (8004d60 <testportCommand+0x19c>)
 8004d48:	0020      	movs	r0, r4
 8004d4a:	f00f faa9 	bl	80142a0 <siprintf>
 8004d4e:	e761      	b.n	8004c14 <testportCommand+0x50>
 8004d50:	08017130 	.word	0x08017130
 8004d54:	0801744c 	.word	0x0801744c
 8004d58:	200002cf 	.word	0x200002cf
 8004d5c:	20000c28 	.word	0x20000c28
 8004d60:	08019678 	.word	0x08019678
 8004d64:	0801968c 	.word	0x0801968c
 8004d68:	0801965c 	.word	0x0801965c
 8004d6c:	20000ae8 	.word	0x20000ae8
 8004d70:	080196fc 	.word	0x080196fc
 8004d74:	080196e0 	.word	0x080196e0

08004d78 <unbridgeCommand>:
{	
 8004d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	0004      	movs	r4, r0
 8004d7e:	9201      	str	r2, [sp, #4]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	9303      	str	r3, [sp, #12]
 8004d84:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d101      	bne.n	8004d8e <unbridgeCommand+0x16>
 8004d8a:	b672      	cpsid	i
 8004d8c:	e7fe      	b.n	8004d8c <unbridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004d8e:	aa03      	add	r2, sp, #12
 8004d90:	2101      	movs	r1, #1
 8004d92:	9801      	ldr	r0, [sp, #4]
 8004d94:	f009 fae0 	bl	800e358 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8004d98:	2300      	movs	r3, #0
 8004d9a:	56c3      	ldrsb	r3, [r0, r3]
 8004d9c:	2b70      	cmp	r3, #112	; 0x70
 8004d9e:	d016      	beq.n	8004dce <unbridgeCommand+0x56>
		result = BOS_ERR_WrongParam;
 8004da0:	2767      	movs	r7, #103	; 0x67
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8004da2:	aa02      	add	r2, sp, #8
 8004da4:	2102      	movs	r1, #2
 8004da6:	9801      	ldr	r0, [sp, #4]
 8004da8:	f009 fad6 	bl	800e358 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8004dac:	2300      	movs	r3, #0
 8004dae:	56c3      	ldrsb	r3, [r0, r3]
 8004db0:	2b70      	cmp	r3, #112	; 0x70
 8004db2:	d012      	beq.n	8004dda <unbridgeCommand+0x62>
		result = BOS_ERR_WrongParam;
 8004db4:	2067      	movs	r0, #103	; 0x67
	if (result == BOS_OK) 
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d01a      	beq.n	8004df0 <unbridgeCommand+0x78>
	else if (result == BOS_ERR_WrongParam) 
 8004dba:	2867      	cmp	r0, #103	; 0x67
 8004dbc:	d021      	beq.n	8004e02 <unbridgeCommand+0x8a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8004dbe:	2219      	movs	r2, #25
 8004dc0:	4913      	ldr	r1, [pc, #76]	; (8004e10 <unbridgeCommand+0x98>)
 8004dc2:	0020      	movs	r0, r4
 8004dc4:	f00e fb05 	bl	80133d2 <memcpy>
}
 8004dc8:	2000      	movs	r0, #0
 8004dca:	b005      	add	sp, #20
 8004dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8004dce:	3001      	adds	r0, #1
 8004dd0:	f00e fa8d 	bl	80132ee <atol>
 8004dd4:	b2c5      	uxtb	r5, r0
	BOS_Status result = BOS_OK;
 8004dd6:	2700      	movs	r7, #0
 8004dd8:	e7e3      	b.n	8004da2 <unbridgeCommand+0x2a>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f00e fa87 	bl	80132ee <atol>
 8004de0:	b2c6      	uxtb	r6, r0
	if (result == BOS_OK) 
 8004de2:	2f00      	cmp	r7, #0
 8004de4:	d10b      	bne.n	8004dfe <unbridgeCommand+0x86>
		result = Unbridge(port1, port2);
 8004de6:	0031      	movs	r1, r6
 8004de8:	0028      	movs	r0, r5
 8004dea:	f7fe ffab 	bl	8003d44 <Unbridge>
 8004dee:	e7e2      	b.n	8004db6 <unbridgeCommand+0x3e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8004df0:	0033      	movs	r3, r6
 8004df2:	002a      	movs	r2, r5
 8004df4:	4907      	ldr	r1, [pc, #28]	; (8004e14 <unbridgeCommand+0x9c>)
 8004df6:	0020      	movs	r0, r4
 8004df8:	f00f fa52 	bl	80142a0 <siprintf>
 8004dfc:	e7e4      	b.n	8004dc8 <unbridgeCommand+0x50>
		result = BOS_ERR_WrongParam;
 8004dfe:	2067      	movs	r0, #103	; 0x67
 8004e00:	e7db      	b.n	8004dba <unbridgeCommand+0x42>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8004e02:	220f      	movs	r2, #15
 8004e04:	4904      	ldr	r1, [pc, #16]	; (8004e18 <unbridgeCommand+0xa0>)
 8004e06:	0020      	movs	r0, r4
 8004e08:	f00e fae3 	bl	80133d2 <memcpy>
 8004e0c:	e7dc      	b.n	8004dc8 <unbridgeCommand+0x50>
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	080197a8 	.word	0x080197a8
 8004e14:	08019788 	.word	0x08019788
 8004e18:	080196fc 	.word	0x080196fc

08004e1c <bridgeCommand>:
{	
 8004e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	0004      	movs	r4, r0
 8004e22:	9201      	str	r2, [sp, #4]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	9303      	str	r3, [sp, #12]
 8004e28:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d101      	bne.n	8004e32 <bridgeCommand+0x16>
 8004e2e:	b672      	cpsid	i
 8004e30:	e7fe      	b.n	8004e30 <bridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004e32:	aa03      	add	r2, sp, #12
 8004e34:	2101      	movs	r1, #1
 8004e36:	9801      	ldr	r0, [sp, #4]
 8004e38:	f009 fa8e 	bl	800e358 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	56c3      	ldrsb	r3, [r0, r3]
 8004e40:	2b70      	cmp	r3, #112	; 0x70
 8004e42:	d016      	beq.n	8004e72 <bridgeCommand+0x56>
		result = BOS_ERR_WrongParam;
 8004e44:	2767      	movs	r7, #103	; 0x67
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8004e46:	aa02      	add	r2, sp, #8
 8004e48:	2102      	movs	r1, #2
 8004e4a:	9801      	ldr	r0, [sp, #4]
 8004e4c:	f009 fa84 	bl	800e358 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8004e50:	2300      	movs	r3, #0
 8004e52:	56c3      	ldrsb	r3, [r0, r3]
 8004e54:	2b70      	cmp	r3, #112	; 0x70
 8004e56:	d012      	beq.n	8004e7e <bridgeCommand+0x62>
		result = BOS_ERR_WrongParam;
 8004e58:	2067      	movs	r0, #103	; 0x67
	if (result == BOS_OK) 
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d01a      	beq.n	8004e94 <bridgeCommand+0x78>
	else if (result == BOS_ERR_WrongParam) 
 8004e5e:	2867      	cmp	r0, #103	; 0x67
 8004e60:	d021      	beq.n	8004ea6 <bridgeCommand+0x8a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8004e62:	2217      	movs	r2, #23
 8004e64:	4913      	ldr	r1, [pc, #76]	; (8004eb4 <bridgeCommand+0x98>)
 8004e66:	0020      	movs	r0, r4
 8004e68:	f00e fab3 	bl	80133d2 <memcpy>
}
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	b005      	add	sp, #20
 8004e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8004e72:	3001      	adds	r0, #1
 8004e74:	f00e fa3b 	bl	80132ee <atol>
 8004e78:	b2c5      	uxtb	r5, r0
	BOS_Status result = BOS_OK;
 8004e7a:	2700      	movs	r7, #0
 8004e7c:	e7e3      	b.n	8004e46 <bridgeCommand+0x2a>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8004e7e:	3001      	adds	r0, #1
 8004e80:	f00e fa35 	bl	80132ee <atol>
 8004e84:	b2c6      	uxtb	r6, r0
	if (result == BOS_OK) 
 8004e86:	2f00      	cmp	r7, #0
 8004e88:	d10b      	bne.n	8004ea2 <bridgeCommand+0x86>
		result = Bridge(port1, port2);
 8004e8a:	0031      	movs	r1, r6
 8004e8c:	0028      	movs	r0, r5
 8004e8e:	f7fe ff45 	bl	8003d1c <Bridge>
 8004e92:	e7e2      	b.n	8004e5a <bridgeCommand+0x3e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8004e94:	0033      	movs	r3, r6
 8004e96:	002a      	movs	r2, r5
 8004e98:	4907      	ldr	r1, [pc, #28]	; (8004eb8 <bridgeCommand+0x9c>)
 8004e9a:	0020      	movs	r0, r4
 8004e9c:	f00f fa00 	bl	80142a0 <siprintf>
 8004ea0:	e7e4      	b.n	8004e6c <bridgeCommand+0x50>
		result = BOS_ERR_WrongParam;
 8004ea2:	2067      	movs	r0, #103	; 0x67
 8004ea4:	e7db      	b.n	8004e5e <bridgeCommand+0x42>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8004ea6:	220f      	movs	r2, #15
 8004ea8:	4904      	ldr	r1, [pc, #16]	; (8004ebc <bridgeCommand+0xa0>)
 8004eaa:	0020      	movs	r0, r4
 8004eac:	f00e fa91 	bl	80133d2 <memcpy>
 8004eb0:	e7dc      	b.n	8004e6c <bridgeCommand+0x50>
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	08017d98 	.word	0x08017d98
 8004eb8:	08017d74 	.word	0x08017d74
 8004ebc:	080196fc 	.word	0x080196fc

08004ec0 <delSnipCommand>:
{	
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	0006      	movs	r6, r0
 8004ec6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8004ecc:	2e00      	cmp	r6, #0
 8004ece:	d101      	bne.n	8004ed4 <delSnipCommand+0x14>
 8004ed0:	b672      	cpsid	i
 8004ed2:	e7fe      	b.n	8004ed2 <delSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004ed4:	aa01      	add	r2, sp, #4
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	f009 fa3e 	bl	800e358 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8004edc:	f00e fa01 	bl	80132e2 <atoi>
 8004ee0:	b2c4      	uxtb	r4, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8004ee2:	2c00      	cmp	r4, #0
 8004ee4:	d03f      	beq.n	8004f66 <delSnipCommand+0xa6>
 8004ee6:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <delSnipCommand+0xc8>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	42a3      	cmp	r3, r4
 8004eec:	d201      	bcs.n	8004ef2 <delSnipCommand+0x32>
 8004eee:	23ff      	movs	r3, #255	; 0xff
 8004ef0:	e03a      	b.n	8004f68 <delSnipCommand+0xa8>
		snippets[index-1].cond.conditionType = 0;
 8004ef2:	b2c0      	uxtb	r0, r0
 8004ef4:	3801      	subs	r0, #1
 8004ef6:	4d25      	ldr	r5, [pc, #148]	; (8004f8c <delSnipCommand+0xcc>)
 8004ef8:	2314      	movs	r3, #20
 8004efa:	4358      	muls	r0, r3
 8004efc:	2700      	movs	r7, #0
 8004efe:	5547      	strb	r7, [r0, r5]
		snippets[index-1].cond.mathOperator = 0;
 8004f00:	182d      	adds	r5, r5, r0
 8004f02:	706f      	strb	r7, [r5, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 8004f04:	1ca8      	adds	r0, r5, #2
 8004f06:	2204      	movs	r2, #4
 8004f08:	0039      	movs	r1, r7
 8004f0a:	f00e fa6b 	bl	80133e4 <memset>
		snippets[index-1].state = false;
 8004f0e:	742f      	strb	r7, [r5, #16]
		free(snippets[index-1].cmd);
 8004f10:	68e8      	ldr	r0, [r5, #12]
 8004f12:	f00e fa33 	bl	801337c <free>
		snippets[index-1].cmd = NULL;
 8004f16:	60ef      	str	r7, [r5, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8004f18:	e008      	b.n	8004f2c <delSnipCommand+0x6c>
			if (snippets[s].cond.conditionType) {
 8004f1a:	00a3      	lsls	r3, r4, #2
 8004f1c:	191b      	adds	r3, r3, r4
 8004f1e:	009a      	lsls	r2, r3, #2
 8004f20:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <delSnipCommand+0xcc>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10c      	bne.n	8004f42 <delSnipCommand+0x82>
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8004f28:	3401      	adds	r4, #1
 8004f2a:	b2e4      	uxtb	r4, r4
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <delSnipCommand+0xc8>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	d8f2      	bhi.n	8004f1a <delSnipCommand+0x5a>
		--numOfRecordedSnippets;
 8004f34:	3b01      	subs	r3, #1
 8004f36:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <delSnipCommand+0xc8>)
 8004f38:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8004f3a:	f005 ff15 	bl	800ad68 <SaveToRO>
	BOS_Status result = BOS_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e012      	b.n	8004f68 <delSnipCommand+0xa8>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 8004f42:	1e60      	subs	r0, r4, #1
 8004f44:	2714      	movs	r7, #20
 8004f46:	4378      	muls	r0, r7
 8004f48:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <delSnipCommand+0xcc>)
 8004f4a:	18c0      	adds	r0, r0, r3
 8004f4c:	003d      	movs	r5, r7
 8004f4e:	4365      	muls	r5, r4
 8004f50:	18ed      	adds	r5, r5, r3
 8004f52:	003a      	movs	r2, r7
 8004f54:	0029      	movs	r1, r5
 8004f56:	f00e fa3c 	bl	80133d2 <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 8004f5a:	003a      	movs	r2, r7
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	0028      	movs	r0, r5
 8004f60:	f00e fa40 	bl	80133e4 <memset>
 8004f64:	e7e0      	b.n	8004f28 <delSnipCommand+0x68>
 8004f66:	23ff      	movs	r3, #255	; 0xff
	if (result == BOS_OK)
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <delSnipCommand+0xb8>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8004f6c:	2223      	movs	r2, #35	; 0x23
 8004f6e:	4908      	ldr	r1, [pc, #32]	; (8004f90 <delSnipCommand+0xd0>)
 8004f70:	0030      	movs	r0, r6
 8004f72:	f00e fa2e 	bl	80133d2 <memcpy>
 8004f76:	e004      	b.n	8004f82 <delSnipCommand+0xc2>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8004f78:	2236      	movs	r2, #54	; 0x36
 8004f7a:	4906      	ldr	r1, [pc, #24]	; (8004f94 <delSnipCommand+0xd4>)
 8004f7c:	0030      	movs	r0, r6
 8004f7e:	f00e fa28 	bl	80133d2 <memcpy>
}
 8004f82:	2000      	movs	r0, #0
 8004f84:	b003      	add	sp, #12
 8004f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f88:	20000a37 	.word	0x20000a37
 8004f8c:	20006164 	.word	0x20006164
 8004f90:	08017eb8 	.word	0x08017eb8
 8004f94:	08017e80 	.word	0x08017e80

08004f98 <pauseSnipCommand>:
{	
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	0004      	movs	r4, r0
 8004f9e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8004fa4:	2c00      	cmp	r4, #0
 8004fa6:	d101      	bne.n	8004fac <pauseSnipCommand+0x14>
 8004fa8:	b672      	cpsid	i
 8004faa:	e7fe      	b.n	8004faa <pauseSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004fac:	aa01      	add	r2, sp, #4
 8004fae:	2101      	movs	r1, #1
 8004fb0:	f009 f9d2 	bl	800e358 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8004fb4:	f00e f995 	bl	80132e2 <atoi>
 8004fb8:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <pauseSnipCommand+0x2e>
 8004fbe:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <pauseSnipCommand+0x60>)
 8004fc0:	7812      	ldrb	r2, [r2, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d207      	bcs.n	8004fd6 <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8004fc6:	2223      	movs	r2, #35	; 0x23
 8004fc8:	490c      	ldr	r1, [pc, #48]	; (8004ffc <pauseSnipCommand+0x64>)
 8004fca:	0020      	movs	r0, r4
 8004fcc:	f00e fa01 	bl	80133d2 <memcpy>
}
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	b002      	add	sp, #8
 8004fd4:	bd10      	pop	{r4, pc}
		snippets[index-1].state = false;
 8004fd6:	b2c0      	uxtb	r0, r0
 8004fd8:	3801      	subs	r0, #1
 8004fda:	2314      	movs	r3, #20
 8004fdc:	4343      	muls	r3, r0
 8004fde:	4808      	ldr	r0, [pc, #32]	; (8005000 <pauseSnipCommand+0x68>)
 8004fe0:	18c0      	adds	r0, r0, r3
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8004fe6:	f005 febf 	bl	800ad68 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8004fea:	2235      	movs	r2, #53	; 0x35
 8004fec:	4905      	ldr	r1, [pc, #20]	; (8005004 <pauseSnipCommand+0x6c>)
 8004fee:	0020      	movs	r0, r4
 8004ff0:	f00e f9ef 	bl	80133d2 <memcpy>
 8004ff4:	e7ec      	b.n	8004fd0 <pauseSnipCommand+0x38>
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	20000a37 	.word	0x20000a37
 8004ffc:	08017eb8 	.word	0x08017eb8
 8005000:	20006164 	.word	0x20006164
 8005004:	080182c8 	.word	0x080182c8

08005008 <actSnipCommand>:
{	
 8005008:	b510      	push	{r4, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	0004      	movs	r4, r0
 800500e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005014:	2c00      	cmp	r4, #0
 8005016:	d101      	bne.n	800501c <actSnipCommand+0x14>
 8005018:	b672      	cpsid	i
 800501a:	e7fe      	b.n	800501a <actSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800501c:	aa01      	add	r2, sp, #4
 800501e:	2101      	movs	r1, #1
 8005020:	f009 f99a 	bl	800e358 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005024:	f00e f95d 	bl	80132e2 <atoi>
 8005028:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <actSnipCommand+0x2e>
 800502e:	4a0e      	ldr	r2, [pc, #56]	; (8005068 <actSnipCommand+0x60>)
 8005030:	7812      	ldrb	r2, [r2, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d207      	bcs.n	8005046 <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005036:	2223      	movs	r2, #35	; 0x23
 8005038:	490c      	ldr	r1, [pc, #48]	; (800506c <actSnipCommand+0x64>)
 800503a:	0020      	movs	r0, r4
 800503c:	f00e f9c9 	bl	80133d2 <memcpy>
}
 8005040:	2000      	movs	r0, #0
 8005042:	b002      	add	sp, #8
 8005044:	bd10      	pop	{r4, pc}
		snippets[index-1].state = true;
 8005046:	b2c0      	uxtb	r0, r0
 8005048:	3801      	subs	r0, #1
 800504a:	2314      	movs	r3, #20
 800504c:	4343      	muls	r3, r0
 800504e:	4808      	ldr	r0, [pc, #32]	; (8005070 <actSnipCommand+0x68>)
 8005050:	18c0      	adds	r0, r0, r3
 8005052:	2301      	movs	r3, #1
 8005054:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005056:	f005 fe87 	bl	800ad68 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 800505a:	2238      	movs	r2, #56	; 0x38
 800505c:	4905      	ldr	r1, [pc, #20]	; (8005074 <actSnipCommand+0x6c>)
 800505e:	0020      	movs	r0, r4
 8005060:	f00e f9b7 	bl	80133d2 <memcpy>
 8005064:	e7ec      	b.n	8005040 <actSnipCommand+0x38>
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	20000a37 	.word	0x20000a37
 800506c:	08017eb8 	.word	0x08017eb8
 8005070:	20006164 	.word	0x20006164
 8005074:	08017c7c 	.word	0x08017c7c

08005078 <snipCommand>:
{	
 8005078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507a:	46ce      	mov	lr, r9
 800507c:	4647      	mov	r7, r8
 800507e:	b580      	push	{r7, lr}
 8005080:	b08b      	sub	sp, #44	; 0x2c
 8005082:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 8005084:	aa06      	add	r2, sp, #24
 8005086:	4b74      	ldr	r3, [pc, #464]	; (8005258 <snipCommand+0x1e0>)
 8005088:	3304      	adds	r3, #4
 800508a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800508c:	c223      	stmia	r2!, {r0, r1, r5}
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 8005092:	2c00      	cmp	r4, #0
 8005094:	d101      	bne.n	800509a <snipCommand+0x22>
 8005096:	b672      	cpsid	i
 8005098:	e7fe      	b.n	8005098 <snipCommand+0x20>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 800509a:	4b70      	ldr	r3, [pc, #448]	; (800525c <snipCommand+0x1e4>)
 800509c:	7818      	ldrb	r0, [r3, #0]
 800509e:	2301      	movs	r3, #1
 80050a0:	425b      	negs	r3, r3
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	3333      	adds	r3, #51	; 0x33
 80050a6:	2237      	movs	r2, #55	; 0x37
 80050a8:	496d      	ldr	r1, [pc, #436]	; (8005260 <snipCommand+0x1e8>)
 80050aa:	f008 fefb 	bl	800dea4 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 80050ae:	2700      	movs	r7, #0
	uint8_t count = 1;
 80050b0:	2301      	movs	r3, #1
 80050b2:	4698      	mov	r8, r3
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 80050b4:	e088      	b.n	80051c8 <snipCommand+0x150>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 80050b6:	4b6b      	ldr	r3, [pc, #428]	; (8005264 <snipCommand+0x1ec>)
 80050b8:	189b      	adds	r3, r3, r2
 80050ba:	7c1a      	ldrb	r2, [r3, #16]
 80050bc:	00d3      	lsls	r3, r2, #3
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	aa06      	add	r2, sp, #24
 80050c2:	4694      	mov	ip, r2
 80050c4:	4463      	add	r3, ip
 80050c6:	4642      	mov	r2, r8
 80050c8:	4967      	ldr	r1, [pc, #412]	; (8005268 <snipCommand+0x1f0>)
 80050ca:	0020      	movs	r0, r4
 80050cc:	f00f f8e8 	bl	80142a0 <siprintf>
 80050d0:	e087      	b.n	80051e2 <snipCommand+0x16a>
				switch (snippets[s].cond.buffer1[1])
 80050d2:	00ab      	lsls	r3, r5, #2
 80050d4:	195b      	adds	r3, r3, r5
 80050d6:	009a      	lsls	r2, r3, #2
 80050d8:	4b62      	ldr	r3, [pc, #392]	; (8005264 <snipCommand+0x1ec>)
 80050da:	189b      	adds	r3, r3, r2
 80050dc:	78db      	ldrb	r3, [r3, #3]
 80050de:	3b05      	subs	r3, #5
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	2a09      	cmp	r2, #9
 80050e4:	d84a      	bhi.n	800517c <snipCommand+0x104>
 80050e6:	0093      	lsls	r3, r2, #2
 80050e8:	4a60      	ldr	r2, [pc, #384]	; (800526c <snipCommand+0x1f4>)
 80050ea:	58d3      	ldr	r3, [r2, r3]
 80050ec:	469f      	mov	pc, r3
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 80050ee:	2314      	movs	r3, #20
 80050f0:	436b      	muls	r3, r5
 80050f2:	4a5c      	ldr	r2, [pc, #368]	; (8005264 <snipCommand+0x1ec>)
 80050f4:	18d2      	adds	r2, r2, r3
 80050f6:	7893      	ldrb	r3, [r2, #2]
 80050f8:	68d2      	ldr	r2, [r2, #12]
 80050fa:	9200      	str	r2, [sp, #0]
 80050fc:	0022      	movs	r2, r4
 80050fe:	495c      	ldr	r1, [pc, #368]	; (8005270 <snipCommand+0x1f8>)
 8005100:	0020      	movs	r0, r4
 8005102:	f00f f8cd 	bl	80142a0 <siprintf>
        		break;
 8005106:	e039      	b.n	800517c <snipCommand+0x104>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005108:	2314      	movs	r3, #20
 800510a:	436b      	muls	r3, r5
 800510c:	4a55      	ldr	r2, [pc, #340]	; (8005264 <snipCommand+0x1ec>)
 800510e:	18d2      	adds	r2, r2, r3
 8005110:	7893      	ldrb	r3, [r2, #2]
 8005112:	68d2      	ldr	r2, [r2, #12]
 8005114:	9200      	str	r2, [sp, #0]
 8005116:	0022      	movs	r2, r4
 8005118:	4956      	ldr	r1, [pc, #344]	; (8005274 <snipCommand+0x1fc>)
 800511a:	0020      	movs	r0, r4
 800511c:	f00f f8c0 	bl	80142a0 <siprintf>
        		break;
 8005120:	e02c      	b.n	800517c <snipCommand+0x104>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005122:	2314      	movs	r3, #20
 8005124:	436b      	muls	r3, r5
 8005126:	4a4f      	ldr	r2, [pc, #316]	; (8005264 <snipCommand+0x1ec>)
 8005128:	18d2      	adds	r2, r2, r3
 800512a:	7893      	ldrb	r3, [r2, #2]
 800512c:	7911      	ldrb	r1, [r2, #4]
 800512e:	68d2      	ldr	r2, [r2, #12]
 8005130:	9201      	str	r2, [sp, #4]
 8005132:	9100      	str	r1, [sp, #0]
 8005134:	0022      	movs	r2, r4
 8005136:	4950      	ldr	r1, [pc, #320]	; (8005278 <snipCommand+0x200>)
 8005138:	0020      	movs	r0, r4
 800513a:	f00f f8b1 	bl	80142a0 <siprintf>
        		break;
 800513e:	e01d      	b.n	800517c <snipCommand+0x104>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005140:	2314      	movs	r3, #20
 8005142:	436b      	muls	r3, r5
 8005144:	4a47      	ldr	r2, [pc, #284]	; (8005264 <snipCommand+0x1ec>)
 8005146:	18d2      	adds	r2, r2, r3
 8005148:	7893      	ldrb	r3, [r2, #2]
 800514a:	7911      	ldrb	r1, [r2, #4]
 800514c:	68d2      	ldr	r2, [r2, #12]
 800514e:	9201      	str	r2, [sp, #4]
 8005150:	9100      	str	r1, [sp, #0]
 8005152:	0022      	movs	r2, r4
 8005154:	4949      	ldr	r1, [pc, #292]	; (800527c <snipCommand+0x204>)
 8005156:	0020      	movs	r0, r4
 8005158:	f00f f8a2 	bl	80142a0 <siprintf>
        		break;						
 800515c:	e00e      	b.n	800517c <snipCommand+0x104>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 800515e:	4e48      	ldr	r6, [pc, #288]	; (8005280 <snipCommand+0x208>)
 8005160:	0033      	movs	r3, r6
 8005162:	0022      	movs	r2, r4
 8005164:	4947      	ldr	r1, [pc, #284]	; (8005284 <snipCommand+0x20c>)
 8005166:	0020      	movs	r0, r4
 8005168:	f00f f89a 	bl	80142a0 <siprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 800516c:	0030      	movs	r0, r6
 800516e:	f7fa ffd3 	bl	8000118 <strlen>
 8005172:	0002      	movs	r2, r0
 8005174:	2100      	movs	r1, #0
 8005176:	0030      	movs	r0, r6
 8005178:	f00e f934 	bl	80133e4 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 800517c:	00ab      	lsls	r3, r5, #2
 800517e:	195b      	adds	r3, r3, r5
 8005180:	009a      	lsls	r2, r3, #2
 8005182:	4b38      	ldr	r3, [pc, #224]	; (8005264 <snipCommand+0x1ec>)
 8005184:	189b      	adds	r3, r3, r2
 8005186:	68d8      	ldr	r0, [r3, #12]
 8005188:	493d      	ldr	r1, [pc, #244]	; (8005280 <snipCommand+0x208>)
 800518a:	f7ff fba9 	bl	80048e0 <ParseSnippetCommand>
 800518e:	2800      	cmp	r0, #0
 8005190:	d1e5      	bne.n	800515e <snipCommand+0xe6>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 8005192:	0020      	movs	r0, r4
 8005194:	f7fa ffc0 	bl	8000118 <strlen>
 8005198:	1820      	adds	r0, r4, r0
 800519a:	220c      	movs	r2, #12
 800519c:	493a      	ldr	r1, [pc, #232]	; (8005288 <snipCommand+0x210>)
 800519e:	f00e f918 	bl	80133d2 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80051a2:	0020      	movs	r0, r4
 80051a4:	f7fa ffb8 	bl	8000118 <strlen>
 80051a8:	b282      	uxth	r2, r0
 80051aa:	4b2c      	ldr	r3, [pc, #176]	; (800525c <snipCommand+0x1e4>)
 80051ac:	7818      	ldrb	r0, [r3, #0]
 80051ae:	2301      	movs	r3, #1
 80051b0:	425b      	negs	r3, r3
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	3333      	adds	r3, #51	; 0x33
 80051b6:	0021      	movs	r1, r4
 80051b8:	f008 fe74 	bl	800dea4 <writePxMutex>
		++count;
 80051bc:	4643      	mov	r3, r8
 80051be:	3301      	adds	r3, #1
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	4698      	mov	r8, r3
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 80051c4:	3701      	adds	r7, #1
 80051c6:	b2ff      	uxtb	r7, r7
 80051c8:	4b30      	ldr	r3, [pc, #192]	; (800528c <snipCommand+0x214>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	42bb      	cmp	r3, r7
 80051ce:	d938      	bls.n	8005242 <snipCommand+0x1ca>
		if (snippets[s].cond.conditionType)
 80051d0:	003d      	movs	r5, r7
 80051d2:	00bb      	lsls	r3, r7, #2
 80051d4:	19db      	adds	r3, r3, r7
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	4b22      	ldr	r3, [pc, #136]	; (8005264 <snipCommand+0x1ec>)
 80051da:	5cd3      	ldrb	r3, [r2, r3]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d000      	beq.n	80051e2 <snipCommand+0x16a>
 80051e0:	e769      	b.n	80050b6 <snipCommand+0x3e>
		switch (snippets[s].cond.conditionType)
 80051e2:	00ab      	lsls	r3, r5, #2
 80051e4:	195b      	adds	r3, r3, r5
 80051e6:	009a      	lsls	r2, r3, #2
 80051e8:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <snipCommand+0x1ec>)
 80051ea:	5cd3      	ldrb	r3, [r2, r3]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d100      	bne.n	80051f2 <snipCommand+0x17a>
 80051f0:	e76f      	b.n	80050d2 <snipCommand+0x5a>
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d1c2      	bne.n	800517c <snipCommand+0x104>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 80051f6:	00ab      	lsls	r3, r5, #2
 80051f8:	195b      	adds	r3, r3, r5
 80051fa:	009e      	lsls	r6, r3, #2
 80051fc:	4b19      	ldr	r3, [pc, #100]	; (8005264 <snipCommand+0x1ec>)
 80051fe:	18f6      	adds	r6, r6, r3
 8005200:	1db1      	adds	r1, r6, #6
 8005202:	2204      	movs	r2, #4
 8005204:	a805      	add	r0, sp, #20
 8005206:	f00e f8e4 	bl	80133d2 <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 800520a:	78f2      	ldrb	r2, [r6, #3]
 800520c:	3a01      	subs	r2, #1
 800520e:	7873      	ldrb	r3, [r6, #1]
 8005210:	3b01      	subs	r3, #1
 8005212:	005e      	lsls	r6, r3, #1
 8005214:	18f3      	adds	r3, r6, r3
 8005216:	4e1e      	ldr	r6, [pc, #120]	; (8005290 <snipCommand+0x218>)
 8005218:	18f6      	adds	r6, r6, r3
 800521a:	0053      	lsls	r3, r2, #1
 800521c:	189b      	adds	r3, r3, r2
 800521e:	009a      	lsls	r2, r3, #2
 8005220:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <snipCommand+0x21c>)
 8005222:	189b      	adds	r3, r3, r2
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	4699      	mov	r9, r3
 8005228:	9805      	ldr	r0, [sp, #20]
 800522a:	f7fd f86b 	bl	8002304 <__aeabi_f2d>
 800522e:	9002      	str	r0, [sp, #8]
 8005230:	9103      	str	r1, [sp, #12]
 8005232:	9600      	str	r6, [sp, #0]
 8005234:	464b      	mov	r3, r9
 8005236:	0022      	movs	r2, r4
 8005238:	4917      	ldr	r1, [pc, #92]	; (8005298 <snipCommand+0x220>)
 800523a:	0020      	movs	r0, r4
 800523c:	f00f f830 	bl	80142a0 <siprintf>
				break;
 8005240:	e79c      	b.n	800517c <snipCommand+0x104>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 8005242:	22a7      	movs	r2, #167	; 0xa7
 8005244:	4915      	ldr	r1, [pc, #84]	; (800529c <snipCommand+0x224>)
 8005246:	0020      	movs	r0, r4
 8005248:	f00e f8c3 	bl	80133d2 <memcpy>
}
 800524c:	2000      	movs	r0, #0
 800524e:	b00b      	add	sp, #44	; 0x2c
 8005250:	bc0c      	pop	{r2, r3}
 8005252:	4690      	mov	r8, r2
 8005254:	4699      	mov	r9, r3
 8005256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005258:	08017130 	.word	0x08017130
 800525c:	200002cf 	.word	0x200002cf
 8005260:	08018768 	.word	0x08018768
 8005264:	20006164 	.word	0x20006164
 8005268:	080187a0 	.word	0x080187a0
 800526c:	08017c30 	.word	0x08017c30
 8005270:	080187ac 	.word	0x080187ac
 8005274:	080187c0 	.word	0x080187c0
 8005278:	080187d8 	.word	0x080187d8
 800527c:	080187f0 	.word	0x080187f0
 8005280:	20000a68 	.word	0x20000a68
 8005284:	0801881c 	.word	0x0801881c
 8005288:	08018824 	.word	0x08018824
 800528c:	20000a37 	.word	0x20000a37
 8005290:	0801828c 	.word	0x0801828c
 8005294:	20000084 	.word	0x20000084
 8005298:	0801880c 	.word	0x0801880c
 800529c:	08018830 	.word	0x08018830

080052a0 <idcodeCommand>:
{	
 80052a0:	b510      	push	{r4, lr}
 80052a2:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80052a4:	d101      	bne.n	80052aa <idcodeCommand+0xa>
 80052a6:	b672      	cpsid	i
 80052a8:	e7fe      	b.n	80052a8 <idcodeCommand+0x8>
	dev = HAL_GetDEVID();
 80052aa:	f00a ffc1 	bl	8010230 <HAL_GetDEVID>
	switch (dev)
 80052ae:	0403      	lsls	r3, r0, #16
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	4a1b      	ldr	r2, [pc, #108]	; (8005320 <idcodeCommand+0x80>)
 80052b4:	4694      	mov	ip, r2
 80052b6:	4463      	add	r3, ip
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d82a      	bhi.n	8005312 <idcodeCommand+0x72>
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4a19      	ldr	r2, [pc, #100]	; (8005324 <idcodeCommand+0x84>)
 80052c0:	58d3      	ldr	r3, [r2, r3]
 80052c2:	469f      	mov	pc, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 80052c4:	4a18      	ldr	r2, [pc, #96]	; (8005328 <idcodeCommand+0x88>)
 80052c6:	4919      	ldr	r1, [pc, #100]	; (800532c <idcodeCommand+0x8c>)
 80052c8:	0020      	movs	r0, r4
 80052ca:	f00e ffe9 	bl	80142a0 <siprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 80052ce:	f00a ffa9 	bl	8010224 <HAL_GetREVID>
 80052d2:	0b03      	lsrs	r3, r0, #12
 80052d4:	0022      	movs	r2, r4
 80052d6:	4916      	ldr	r1, [pc, #88]	; (8005330 <idcodeCommand+0x90>)
 80052d8:	0020      	movs	r0, r4
 80052da:	f00e ffe1 	bl	80142a0 <siprintf>
}
 80052de:	2000      	movs	r0, #0
 80052e0:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 80052e2:	4a14      	ldr	r2, [pc, #80]	; (8005334 <idcodeCommand+0x94>)
 80052e4:	4911      	ldr	r1, [pc, #68]	; (800532c <idcodeCommand+0x8c>)
 80052e6:	0020      	movs	r0, r4
 80052e8:	f00e ffda 	bl	80142a0 <siprintf>
  		break;
 80052ec:	e7ef      	b.n	80052ce <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 80052ee:	4a12      	ldr	r2, [pc, #72]	; (8005338 <idcodeCommand+0x98>)
 80052f0:	490e      	ldr	r1, [pc, #56]	; (800532c <idcodeCommand+0x8c>)
 80052f2:	0020      	movs	r0, r4
 80052f4:	f00e ffd4 	bl	80142a0 <siprintf>
  		break;
 80052f8:	e7e9      	b.n	80052ce <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 80052fa:	4a10      	ldr	r2, [pc, #64]	; (800533c <idcodeCommand+0x9c>)
 80052fc:	490b      	ldr	r1, [pc, #44]	; (800532c <idcodeCommand+0x8c>)
 80052fe:	0020      	movs	r0, r4
 8005300:	f00e ffce 	bl	80142a0 <siprintf>
  		break;
 8005304:	e7e3      	b.n	80052ce <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 8005306:	4a0e      	ldr	r2, [pc, #56]	; (8005340 <idcodeCommand+0xa0>)
 8005308:	4908      	ldr	r1, [pc, #32]	; (800532c <idcodeCommand+0x8c>)
 800530a:	0020      	movs	r0, r4
 800530c:	f00e ffc8 	bl	80142a0 <siprintf>
  		break;
 8005310:	e7dd      	b.n	80052ce <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 8005312:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <idcodeCommand+0xa4>)
 8005314:	4905      	ldr	r1, [pc, #20]	; (800532c <idcodeCommand+0x8c>)
 8005316:	0020      	movs	r0, r4
 8005318:	f00e ffc2 	bl	80142a0 <siprintf>
  		break;
 800531c:	e7d7      	b.n	80052ce <idcodeCommand+0x2e>
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	fffffbc0 	.word	0xfffffbc0
 8005324:	08017c58 	.word	0x08017c58
 8005328:	08018188 	.word	0x08018188
 800532c:	08018194 	.word	0x08018194
 8005330:	080181e0 	.word	0x080181e0
 8005334:	080181a8 	.word	0x080181a8
 8005338:	080181b4 	.word	0x080181b4
 800533c:	080181c0 	.word	0x080181c0
 8005340:	080181cc 	.word	0x080181cc
 8005344:	080181d8 	.word	0x080181d8

08005348 <uuidCommand>:
{
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800534c:	d101      	bne.n	8005352 <uuidCommand+0xa>
 800534e:	b672      	cpsid	i
 8005350:	e7fe      	b.n	8005350 <uuidCommand+0x8>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 8005352:	220e      	movs	r2, #14
 8005354:	490d      	ldr	r1, [pc, #52]	; (800538c <uuidCommand+0x44>)
 8005356:	f00e f83c 	bl	80133d2 <memcpy>
	for(uint8_t i=0 ; i<3 ; i++)
 800535a:	2500      	movs	r5, #0
 800535c:	2d02      	cmp	r5, #2
 800535e:	d80b      	bhi.n	8005378 <uuidCommand+0x30>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 8005360:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <uuidCommand+0x48>)
 8005362:	18eb      	adds	r3, r5, r3
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	0022      	movs	r2, r4
 800536a:	490a      	ldr	r1, [pc, #40]	; (8005394 <uuidCommand+0x4c>)
 800536c:	0020      	movs	r0, r4
 800536e:	f00e ff97 	bl	80142a0 <siprintf>
	for(uint8_t i=0 ; i<3 ; i++)
 8005372:	3501      	adds	r5, #1
 8005374:	b2ed      	uxtb	r5, r5
 8005376:	e7f1      	b.n	800535c <uuidCommand+0x14>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 8005378:	0020      	movs	r0, r4
 800537a:	f7fa fecd 	bl	8000118 <strlen>
 800537e:	1820      	adds	r0, r4, r0
 8005380:	2203      	movs	r2, #3
 8005382:	4905      	ldr	r1, [pc, #20]	; (8005398 <uuidCommand+0x50>)
 8005384:	f00e f825 	bl	80133d2 <memcpy>
}
 8005388:	2000      	movs	r0, #0
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	080197d4 	.word	0x080197d4
 8005390:	07fffdeb 	.word	0x07fffdeb
 8005394:	080197e4 	.word	0x080197e4
 8005398:	08018d7c 	.word	0x08018d7c

0800539c <timeCommand>:
{
 800539c:	b530      	push	{r4, r5, lr}
 800539e:	b085      	sub	sp, #20
 80053a0:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80053a2:	d101      	bne.n	80053a8 <timeCommand+0xc>
 80053a4:	b672      	cpsid	i
 80053a6:	e7fe      	b.n	80053a6 <timeCommand+0xa>
	GetTimeDate();
 80053a8:	f008 fb20 	bl	800d9ec <GetTimeDate>
	if (BOS.hourformat == 24)
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <timeCommand+0x80>)
 80053ae:	7b5b      	ldrb	r3, [r3, #13]
 80053b0:	2b18      	cmp	r3, #24
 80053b2:	d004      	beq.n	80053be <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d00e      	beq.n	80053d6 <timeCommand+0x3a>
}
 80053b8:	2000      	movs	r0, #0
 80053ba:	b005      	add	sp, #20
 80053bc:	bd30      	pop	{r4, r5, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 80053be:	4917      	ldr	r1, [pc, #92]	; (800541c <timeCommand+0x80>)
 80053c0:	7c8a      	ldrb	r2, [r1, #18]
 80053c2:	7c4b      	ldrb	r3, [r1, #17]
 80053c4:	7c08      	ldrb	r0, [r1, #16]
 80053c6:	89c9      	ldrh	r1, [r1, #14]
 80053c8:	9101      	str	r1, [sp, #4]
 80053ca:	9000      	str	r0, [sp, #0]
 80053cc:	4914      	ldr	r1, [pc, #80]	; (8005420 <timeCommand+0x84>)
 80053ce:	0020      	movs	r0, r4
 80053d0:	f00e ff66 	bl	80142a0 <siprintf>
 80053d4:	e7f0      	b.n	80053b8 <timeCommand+0x1c>
		if (BOS.time.ampm == RTC_AM)
 80053d6:	4b11      	ldr	r3, [pc, #68]	; (800541c <timeCommand+0x80>)
 80053d8:	7cdb      	ldrb	r3, [r3, #19]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d10d      	bne.n	80053fa <timeCommand+0x5e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 80053de:	490f      	ldr	r1, [pc, #60]	; (800541c <timeCommand+0x80>)
 80053e0:	7c8a      	ldrb	r2, [r1, #18]
 80053e2:	7c4b      	ldrb	r3, [r1, #17]
 80053e4:	7c08      	ldrb	r0, [r1, #16]
 80053e6:	89c9      	ldrh	r1, [r1, #14]
 80053e8:	4d0e      	ldr	r5, [pc, #56]	; (8005424 <timeCommand+0x88>)
 80053ea:	9502      	str	r5, [sp, #8]
 80053ec:	9101      	str	r1, [sp, #4]
 80053ee:	9000      	str	r0, [sp, #0]
 80053f0:	490d      	ldr	r1, [pc, #52]	; (8005428 <timeCommand+0x8c>)
 80053f2:	0020      	movs	r0, r4
 80053f4:	f00e ff54 	bl	80142a0 <siprintf>
 80053f8:	e7de      	b.n	80053b8 <timeCommand+0x1c>
		else if (BOS.time.ampm == RTC_PM)
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d1dc      	bne.n	80053b8 <timeCommand+0x1c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 80053fe:	4907      	ldr	r1, [pc, #28]	; (800541c <timeCommand+0x80>)
 8005400:	7c8a      	ldrb	r2, [r1, #18]
 8005402:	7c4b      	ldrb	r3, [r1, #17]
 8005404:	7c08      	ldrb	r0, [r1, #16]
 8005406:	89c9      	ldrh	r1, [r1, #14]
 8005408:	4d08      	ldr	r5, [pc, #32]	; (800542c <timeCommand+0x90>)
 800540a:	9502      	str	r5, [sp, #8]
 800540c:	9101      	str	r1, [sp, #4]
 800540e:	9000      	str	r0, [sp, #0]
 8005410:	4905      	ldr	r1, [pc, #20]	; (8005428 <timeCommand+0x8c>)
 8005412:	0020      	movs	r0, r4
 8005414:	f00e ff44 	bl	80142a0 <siprintf>
 8005418:	e7ce      	b.n	80053b8 <timeCommand+0x1c>
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	20006148 	.word	0x20006148
 8005420:	0801971c 	.word	0x0801971c
 8005424:	08019770 	.word	0x08019770
 8005428:	08019744 	.word	0x08019744
 800542c:	08019774 	.word	0x08019774

08005430 <dateCommand>:
{
 8005430:	b510      	push	{r4, lr}
 8005432:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005434:	d101      	bne.n	800543a <dateCommand+0xa>
 8005436:	b672      	cpsid	i
 8005438:	e7fe      	b.n	8005438 <dateCommand+0x8>
	GetTimeDate();
 800543a:	f008 fad7 	bl	800d9ec <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 800543e:	f7fe fc4b 	bl	8003cd8 <GetDateString>
 8005442:	0002      	movs	r2, r0
 8005444:	4902      	ldr	r1, [pc, #8]	; (8005450 <dateCommand+0x20>)
 8005446:	0020      	movs	r0, r4
 8005448:	f00e ff2a 	bl	80142a0 <siprintf>
}
 800544c:	2000      	movs	r0, #0
 800544e:	bd10      	pop	{r4, pc}
 8005450:	08017dc0 	.word	0x08017dc0

08005454 <getCommand>:
{
 8005454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005456:	b083      	sub	sp, #12
 8005458:	0004      	movs	r4, r0
 800545a:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005462:	2800      	cmp	r0, #0
 8005464:	d101      	bne.n	800546a <getCommand+0x16>
 8005466:	b672      	cpsid	i
 8005468:	e7fe      	b.n	8005468 <getCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800546a:	aa01      	add	r2, sp, #4
 800546c:	2101      	movs	r1, #1
 800546e:	0030      	movs	r0, r6
 8005470:	f008 ff72 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8005474:	0005      	movs	r5, r0
 8005476:	4b7d      	ldr	r3, [pc, #500]	; (800566c <getCommand+0x218>)
 8005478:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 800547a:	2204      	movs	r2, #4
 800547c:	497c      	ldr	r1, [pc, #496]	; (8005670 <getCommand+0x21c>)
 800547e:	f00e ff53 	bl	8014328 <strncmp>
 8005482:	2800      	cmp	r0, #0
 8005484:	d000      	beq.n	8005488 <getCommand+0x34>
 8005486:	e09c      	b.n	80055c2 <getCommand+0x16e>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8005488:	3504      	adds	r5, #4
 800548a:	9b01      	ldr	r3, [sp, #4]
 800548c:	1f1e      	subs	r6, r3, #4
 800548e:	0032      	movs	r2, r6
 8005490:	4978      	ldr	r1, [pc, #480]	; (8005674 <getCommand+0x220>)
 8005492:	0028      	movs	r0, r5
 8005494:	f00e ff48 	bl	8014328 <strncmp>
 8005498:	2800      	cmp	r0, #0
 800549a:	d122      	bne.n	80054e2 <getCommand+0x8e>
			if (BOS.response == BOS_RESPONSE_ALL)
 800549c:	4b76      	ldr	r3, [pc, #472]	; (8005678 <getCommand+0x224>)
 800549e:	799b      	ldrb	r3, [r3, #6]
 80054a0:	2b60      	cmp	r3, #96	; 0x60
 80054a2:	d10b      	bne.n	80054bc <getCommand+0x68>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80054a4:	4a75      	ldr	r2, [pc, #468]	; (800567c <getCommand+0x228>)
 80054a6:	4976      	ldr	r1, [pc, #472]	; (8005680 <getCommand+0x22c>)
 80054a8:	0020      	movs	r0, r4
 80054aa:	f00e fef9 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 80054ae:	2300      	movs	r3, #0
	else if (result == BOS_ERR_WrongValue)
 80054b0:	2b68      	cmp	r3, #104	; 0x68
 80054b2:	d100      	bne.n	80054b6 <getCommand+0x62>
 80054b4:	e0d3      	b.n	800565e <getCommand+0x20a>
}
 80054b6:	2000      	movs	r0, #0
 80054b8:	b003      	add	sp, #12
 80054ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (BOS.response == BOS_RESPONSE_MSG)
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d106      	bne.n	80054ce <getCommand+0x7a>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80054c0:	4a70      	ldr	r2, [pc, #448]	; (8005684 <getCommand+0x230>)
 80054c2:	496f      	ldr	r1, [pc, #444]	; (8005680 <getCommand+0x22c>)
 80054c4:	0020      	movs	r0, r4
 80054c6:	f00e feeb 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 80054ca:	2300      	movs	r3, #0
 80054cc:	e7f0      	b.n	80054b0 <getCommand+0x5c>
			else if (BOS.response == BOS_RESPONSE_NONE)
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d000      	beq.n	80054d4 <getCommand+0x80>
 80054d2:	e0c0      	b.n	8005656 <getCommand+0x202>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80054d4:	4a6c      	ldr	r2, [pc, #432]	; (8005688 <getCommand+0x234>)
 80054d6:	496a      	ldr	r1, [pc, #424]	; (8005680 <getCommand+0x22c>)
 80054d8:	0020      	movs	r0, r4
 80054da:	f00e fee1 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 80054de:	2300      	movs	r3, #0
 80054e0:	e7e6      	b.n	80054b0 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80054e2:	0032      	movs	r2, r6
 80054e4:	4969      	ldr	r1, [pc, #420]	; (800568c <getCommand+0x238>)
 80054e6:	0028      	movs	r0, r5
 80054e8:	f00e ff1e 	bl	8014328 <strncmp>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d11d      	bne.n	800552c <getCommand+0xd8>
			if (BOS.trace == TRACE_BOTH)
 80054f0:	4b61      	ldr	r3, [pc, #388]	; (8005678 <getCommand+0x224>)
 80054f2:	79db      	ldrb	r3, [r3, #7]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d106      	bne.n	8005506 <getCommand+0xb2>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80054f8:	4a60      	ldr	r2, [pc, #384]	; (800567c <getCommand+0x228>)
 80054fa:	4961      	ldr	r1, [pc, #388]	; (8005680 <getCommand+0x22c>)
 80054fc:	0020      	movs	r0, r4
 80054fe:	f00e fecf 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 8005502:	2300      	movs	r3, #0
 8005504:	e7d4      	b.n	80054b0 <getCommand+0x5c>
			else if (BOS.trace == TRACE_MESSAGE)
 8005506:	2b01      	cmp	r3, #1
 8005508:	d106      	bne.n	8005518 <getCommand+0xc4>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 800550a:	4a5e      	ldr	r2, [pc, #376]	; (8005684 <getCommand+0x230>)
 800550c:	495c      	ldr	r1, [pc, #368]	; (8005680 <getCommand+0x22c>)
 800550e:	0020      	movs	r0, r4
 8005510:	f00e fec6 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 8005514:	2300      	movs	r3, #0
 8005516:	e7cb      	b.n	80054b0 <getCommand+0x5c>
			else if (BOS.trace == TRACE_NONE)
 8005518:	2b00      	cmp	r3, #0
 800551a:	d000      	beq.n	800551e <getCommand+0xca>
 800551c:	e09d      	b.n	800565a <getCommand+0x206>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 800551e:	4a5a      	ldr	r2, [pc, #360]	; (8005688 <getCommand+0x234>)
 8005520:	4957      	ldr	r1, [pc, #348]	; (8005680 <getCommand+0x22c>)
 8005522:	0020      	movs	r0, r4
 8005524:	f00e febc 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 8005528:	2300      	movs	r3, #0
 800552a:	e7c1      	b.n	80054b0 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800552c:	0032      	movs	r2, r6
 800552e:	4958      	ldr	r1, [pc, #352]	; (8005690 <getCommand+0x23c>)
 8005530:	0028      	movs	r0, r5
 8005532:	f00e fef9 	bl	8014328 <strncmp>
 8005536:	2800      	cmp	r0, #0
 8005538:	d107      	bne.n	800554a <getCommand+0xf6>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 800553a:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <getCommand+0x224>)
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	4955      	ldr	r1, [pc, #340]	; (8005694 <getCommand+0x240>)
 8005540:	0020      	movs	r0, r4
 8005542:	f00e fead 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 8005546:	2300      	movs	r3, #0
 8005548:	e7b2      	b.n	80054b0 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 800554a:	0032      	movs	r2, r6
 800554c:	4952      	ldr	r1, [pc, #328]	; (8005698 <getCommand+0x244>)
 800554e:	0028      	movs	r0, r5
 8005550:	f00e feea 	bl	8014328 <strncmp>
 8005554:	2800      	cmp	r0, #0
 8005556:	d107      	bne.n	8005568 <getCommand+0x114>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8005558:	4b47      	ldr	r3, [pc, #284]	; (8005678 <getCommand+0x224>)
 800555a:	881a      	ldrh	r2, [r3, #0]
 800555c:	494d      	ldr	r1, [pc, #308]	; (8005694 <getCommand+0x240>)
 800555e:	0020      	movs	r0, r4
 8005560:	f00e fe9e 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 8005564:	2300      	movs	r3, #0
 8005566:	e7a3      	b.n	80054b0 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8005568:	0032      	movs	r2, r6
 800556a:	494c      	ldr	r1, [pc, #304]	; (800569c <getCommand+0x248>)
 800556c:	0028      	movs	r0, r5
 800556e:	f00e fedb 	bl	8014328 <strncmp>
 8005572:	2800      	cmp	r0, #0
 8005574:	d107      	bne.n	8005586 <getCommand+0x132>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 8005576:	4b40      	ldr	r3, [pc, #256]	; (8005678 <getCommand+0x224>)
 8005578:	885a      	ldrh	r2, [r3, #2]
 800557a:	4946      	ldr	r1, [pc, #280]	; (8005694 <getCommand+0x240>)
 800557c:	0020      	movs	r0, r4
 800557e:	f00e fe8f 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 8005582:	2300      	movs	r3, #0
 8005584:	e794      	b.n	80054b0 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8005586:	0032      	movs	r2, r6
 8005588:	4945      	ldr	r1, [pc, #276]	; (80056a0 <getCommand+0x24c>)
 800558a:	0028      	movs	r0, r5
 800558c:	f00e fecc 	bl	8014328 <strncmp>
 8005590:	2800      	cmp	r0, #0
 8005592:	d107      	bne.n	80055a4 <getCommand+0x150>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 8005594:	4b38      	ldr	r3, [pc, #224]	; (8005678 <getCommand+0x224>)
 8005596:	791a      	ldrb	r2, [r3, #4]
 8005598:	493e      	ldr	r1, [pc, #248]	; (8005694 <getCommand+0x240>)
 800559a:	0020      	movs	r0, r4
 800559c:	f00e fe80 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 80055a0:	2300      	movs	r3, #0
 80055a2:	e785      	b.n	80054b0 <getCommand+0x5c>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 80055a4:	0032      	movs	r2, r6
 80055a6:	493f      	ldr	r1, [pc, #252]	; (80056a4 <getCommand+0x250>)
 80055a8:	0028      	movs	r0, r5
 80055aa:	f00e febd 	bl	8014328 <strncmp>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d10e      	bne.n	80055d0 <getCommand+0x17c>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 80055b2:	4b31      	ldr	r3, [pc, #196]	; (8005678 <getCommand+0x224>)
 80055b4:	795a      	ldrb	r2, [r3, #5]
 80055b6:	4937      	ldr	r1, [pc, #220]	; (8005694 <getCommand+0x240>)
 80055b8:	0020      	movs	r0, r4
 80055ba:	f00e fe71 	bl	80142a0 <siprintf>
	BOS_Status result = BOS_OK; 
 80055be:	2300      	movs	r3, #0
 80055c0:	e776      	b.n	80054b0 <getCommand+0x5c>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 80055c2:	2205      	movs	r2, #5
 80055c4:	4938      	ldr	r1, [pc, #224]	; (80056a8 <getCommand+0x254>)
 80055c6:	0028      	movs	r0, r5
 80055c8:	f00e feae 	bl	8014328 <strncmp>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d005      	beq.n	80055dc <getCommand+0x188>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 80055d0:	2213      	movs	r2, #19
 80055d2:	4936      	ldr	r1, [pc, #216]	; (80056ac <getCommand+0x258>)
 80055d4:	0020      	movs	r0, r4
 80055d6:	f00d fefc 	bl	80133d2 <memcpy>
 80055da:	e76c      	b.n	80054b6 <getCommand+0x62>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80055dc:	466a      	mov	r2, sp
 80055de:	2102      	movs	r1, #2
 80055e0:	0030      	movs	r0, r6
 80055e2:	f008 feb9 	bl	800e358 <FreeRTOS_CLIGetParameter>
 80055e6:	0007      	movs	r7, r0
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80055e8:	2600      	movs	r6, #0
 80055ea:	e00b      	b.n	8005604 <getCommand+0x1b0>
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 80055ec:	00b3      	lsls	r3, r6, #2
 80055ee:	199b      	adds	r3, r3, r6
 80055f0:	0059      	lsls	r1, r3, #1
 80055f2:	4b2f      	ldr	r3, [pc, #188]	; (80056b0 <getCommand+0x25c>)
 80055f4:	18c9      	adds	r1, r1, r3
 80055f6:	0038      	movs	r0, r7
 80055f8:	f7fa fd84 	bl	8000104 <strcmp>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d00c      	beq.n	800561a <getCommand+0x1c6>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8005600:	3601      	adds	r6, #1
 8005602:	b2f6      	uxtb	r6, r6
 8005604:	2e09      	cmp	r6, #9
 8005606:	d9f1      	bls.n	80055ec <getCommand+0x198>
		temp8 = 0;
 8005608:	2500      	movs	r5, #0
		if (!temp8)
 800560a:	2d00      	cmp	r5, #0
 800560c:	d107      	bne.n	800561e <getCommand+0x1ca>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 800560e:	003a      	movs	r2, r7
 8005610:	4928      	ldr	r1, [pc, #160]	; (80056b4 <getCommand+0x260>)
 8005612:	0020      	movs	r0, r4
 8005614:	f00e fe44 	bl	80142a0 <siprintf>
			return pdFALSE;
 8005618:	e74d      	b.n	80054b6 <getCommand+0x62>
				temp8 = 1; break;
 800561a:	2501      	movs	r5, #1
 800561c:	e7f5      	b.n	800560a <getCommand+0x1b6>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 800561e:	003a      	movs	r2, r7
 8005620:	4925      	ldr	r1, [pc, #148]	; (80056b8 <getCommand+0x264>)
 8005622:	0020      	movs	r0, r4
 8005624:	f00e fe3c 	bl	80142a0 <siprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 8005628:	e008      	b.n	800563c <getCommand+0x1e8>
				if (InGroup(j, i))
 800562a:	1e6b      	subs	r3, r5, #1
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	4a23      	ldr	r2, [pc, #140]	; (80056bc <getCommand+0x268>)
 8005630:	5a9b      	ldrh	r3, [r3, r2]
 8005632:	4133      	asrs	r3, r6
 8005634:	07db      	lsls	r3, r3, #31
 8005636:	d407      	bmi.n	8005648 <getCommand+0x1f4>
			for(j=1 ; j<=N ; j++)						// N modules
 8005638:	3501      	adds	r5, #1
 800563a:	b2ed      	uxtb	r5, r5
 800563c:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <getCommand+0x26c>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	42ab      	cmp	r3, r5
 8005642:	d2f2      	bcs.n	800562a <getCommand+0x1d6>
	BOS_Status result = BOS_OK; 
 8005644:	2300      	movs	r3, #0
 8005646:	e733      	b.n	80054b0 <getCommand+0x5c>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 8005648:	002b      	movs	r3, r5
 800564a:	0022      	movs	r2, r4
 800564c:	491d      	ldr	r1, [pc, #116]	; (80056c4 <getCommand+0x270>)
 800564e:	0020      	movs	r0, r4
 8005650:	f00e fe26 	bl	80142a0 <siprintf>
 8005654:	e7f0      	b.n	8005638 <getCommand+0x1e4>
				result = BOS_ERR_WrongValue;
 8005656:	2368      	movs	r3, #104	; 0x68
 8005658:	e72a      	b.n	80054b0 <getCommand+0x5c>
				result = BOS_ERR_WrongValue;
 800565a:	2368      	movs	r3, #104	; 0x68
 800565c:	e728      	b.n	80054b0 <getCommand+0x5c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 800565e:	4b03      	ldr	r3, [pc, #12]	; (800566c <getCommand+0x218>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4919      	ldr	r1, [pc, #100]	; (80056c8 <getCommand+0x274>)
 8005664:	0020      	movs	r0, r4
 8005666:	f00e fe1b 	bl	80142a0 <siprintf>
 800566a:	e724      	b.n	80054b6 <getCommand+0x62>
 800566c:	20000aa8 	.word	0x20000aa8
 8005670:	08017f2c 	.word	0x08017f2c
 8005674:	08017f34 	.word	0x08017f34
 8005678:	20006148 	.word	0x20006148
 800567c:	0801744c 	.word	0x0801744c
 8005680:	080172a4 	.word	0x080172a4
 8005684:	08017f40 	.word	0x08017f40
 8005688:	08017f44 	.word	0x08017f44
 800568c:	08017f4c 	.word	0x08017f4c
 8005690:	08017f54 	.word	0x08017f54
 8005694:	080178dc 	.word	0x080178dc
 8005698:	08017f60 	.word	0x08017f60
 800569c:	08017f6c 	.word	0x08017f6c
 80056a0:	08017f7c 	.word	0x08017f7c
 80056a4:	08017f90 	.word	0x08017f90
 80056a8:	08017fa4 	.word	0x08017fa4
 80056ac:	08017fe4 	.word	0x08017fe4
 80056b0:	2000067c 	.word	0x2000067c
 80056b4:	08017fac 	.word	0x08017fac
 80056b8:	08017fc8 	.word	0x08017fc8
 80056bc:	200006e0 	.word	0x200006e0
 80056c0:	2000001c 	.word	0x2000001c
 80056c4:	08017fdc 	.word	0x08017fdc
 80056c8:	08017ff8 	.word	0x08017ff8

080056cc <defaultCommand>:
{
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	0004      	movs	r4, r0
 80056d2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80056d8:	2c00      	cmp	r4, #0
 80056da:	d101      	bne.n	80056e0 <defaultCommand+0x14>
 80056dc:	b672      	cpsid	i
 80056de:	e7fe      	b.n	80056de <defaultCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80056e0:	aa01      	add	r2, sp, #4
 80056e2:	2101      	movs	r1, #1
 80056e4:	f008 fe38 	bl	800e358 <FreeRTOS_CLIGetParameter>
 80056e8:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 80056ea:	9e01      	ldr	r6, [sp, #4]
 80056ec:	0032      	movs	r2, r6
 80056ee:	491f      	ldr	r1, [pc, #124]	; (800576c <defaultCommand+0xa0>)
 80056f0:	f00e fe1a 	bl	8014328 <strncmp>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d01e      	beq.n	8005736 <defaultCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 80056f8:	0032      	movs	r2, r6
 80056fa:	491d      	ldr	r1, [pc, #116]	; (8005770 <defaultCommand+0xa4>)
 80056fc:	0028      	movs	r0, r5
 80056fe:	f00e fe13 	bl	8014328 <strncmp>
 8005702:	2800      	cmp	r0, #0
 8005704:	d12b      	bne.n	800575e <defaultCommand+0x92>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8005706:	2200      	movs	r2, #0
 8005708:	2116      	movs	r1, #22
 800570a:	20ff      	movs	r0, #255	; 0xff
 800570c:	f002 ff6e 	bl	80085ec <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 8005710:	4b18      	ldr	r3, [pc, #96]	; (8005774 <defaultCommand+0xa8>)
 8005712:	2202      	movs	r2, #2
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	2064      	movs	r0, #100	; 0x64
 8005718:	f008 fcf8 	bl	800e10c <osDelay>
		ClearEEportsDir();
 800571c:	f7fc fffc 	bl	8002718 <ClearEEportsDir>
		ClearROtopology();
 8005720:	f005 fc0e 	bl	800af40 <ClearROtopology>
		osDelay(100);
 8005724:	2064      	movs	r0, #100	; 0x64
 8005726:	f008 fcf1 	bl	800e10c <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 800572a:	2240      	movs	r2, #64	; 0x40
 800572c:	4912      	ldr	r1, [pc, #72]	; (8005778 <defaultCommand+0xac>)
 800572e:	0020      	movs	r0, r4
 8005730:	f00d fe4f 	bl	80133d2 <memcpy>
 8005734:	e010      	b.n	8005758 <defaultCommand+0x8c>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 8005736:	4911      	ldr	r1, [pc, #68]	; (800577c <defaultCommand+0xb0>)
 8005738:	4811      	ldr	r0, [pc, #68]	; (8005780 <defaultCommand+0xb4>)
 800573a:	000b      	movs	r3, r1
 800573c:	0002      	movs	r2, r0
 800573e:	ca23      	ldmia	r2!, {r0, r1, r5}
 8005740:	c323      	stmia	r3!, {r0, r1, r5}
 8005742:	ca23      	ldmia	r2!, {r0, r1, r5}
 8005744:	c323      	stmia	r3!, {r0, r1, r5}
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	601a      	str	r2, [r3, #0]
		SaveEEparams();
 800574a:	f7fd fa77 	bl	8002c3c <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 800574e:	2227      	movs	r2, #39	; 0x27
 8005750:	490c      	ldr	r1, [pc, #48]	; (8005784 <defaultCommand+0xb8>)
 8005752:	0020      	movs	r0, r4
 8005754:	f00d fe3d 	bl	80133d2 <memcpy>
}
 8005758:	2000      	movs	r0, #0
 800575a:	b002      	add	sp, #8
 800575c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 800575e:	220f      	movs	r2, #15
 8005760:	4909      	ldr	r1, [pc, #36]	; (8005788 <defaultCommand+0xbc>)
 8005762:	0020      	movs	r0, r4
 8005764:	f00d fe35 	bl	80133d2 <memcpy>
 8005768:	e7f6      	b.n	8005758 <defaultCommand+0x8c>
 800576a:	46c0      	nop			; (mov r8, r8)
 800576c:	08017de8 	.word	0x08017de8
 8005770:	08017e18 	.word	0x08017e18
 8005774:	20000714 	.word	0x20000714
 8005778:	08017e30 	.word	0x08017e30
 800577c:	20006148 	.word	0x20006148
 8005780:	20000000 	.word	0x20000000
 8005784:	08017df0 	.word	0x08017df0
 8005788:	08017e20 	.word	0x08017e20

0800578c <setCommand>:
{
 800578c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800578e:	46ce      	mov	lr, r9
 8005790:	4647      	mov	r7, r8
 8005792:	b580      	push	{r7, lr}
 8005794:	b08f      	sub	sp, #60	; 0x3c
 8005796:	9007      	str	r0, [sp, #28]
 8005798:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	930d      	str	r3, [sp, #52]	; 0x34
 800579e:	930c      	str	r3, [sp, #48]	; 0x30
 80057a0:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 80057a2:	930a      	str	r3, [sp, #40]	; 0x28
 80057a4:	9309      	str	r3, [sp, #36]	; 0x24
	configASSERT( pcWriteBuffer );
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d101      	bne.n	80057ae <setCommand+0x22>
 80057aa:	b672      	cpsid	i
 80057ac:	e7fe      	b.n	80057ac <setCommand+0x20>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80057ae:	aa0d      	add	r2, sp, #52	; 0x34
 80057b0:	2101      	movs	r1, #1
 80057b2:	0020      	movs	r0, r4
 80057b4:	f008 fdd0 	bl	800e358 <FreeRTOS_CLIGetParameter>
 80057b8:	0005      	movs	r5, r0
 80057ba:	4bba      	ldr	r3, [pc, #744]	; (8005aa4 <setCommand+0x318>)
 80057bc:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 80057be:	2204      	movs	r2, #4
 80057c0:	49b9      	ldr	r1, [pc, #740]	; (8005aa8 <setCommand+0x31c>)
 80057c2:	f00e fdb1 	bl	8014328 <strncmp>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d01c      	beq.n	8005804 <setCommand+0x78>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 80057ca:	2204      	movs	r2, #4
 80057cc:	49b7      	ldr	r1, [pc, #732]	; (8005aac <setCommand+0x320>)
 80057ce:	0028      	movs	r0, r5
 80057d0:	f00e fdaa 	bl	8014328 <strncmp>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d100      	bne.n	80057da <setCommand+0x4e>
 80057d8:	e18c      	b.n	8005af4 <setCommand+0x368>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 80057da:	2204      	movs	r2, #4
 80057dc:	49b4      	ldr	r1, [pc, #720]	; (8005ab0 <setCommand+0x324>)
 80057de:	0028      	movs	r0, r5
 80057e0:	f00e fda2 	bl	8014328 <strncmp>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d100      	bne.n	80057ea <setCommand+0x5e>
 80057e8:	e1e2      	b.n	8005bb0 <setCommand+0x424>
		result = BOS_ERR_WrongParam;
 80057ea:	2467      	movs	r4, #103	; 0x67
	else if (result == BOS_ERR_WrongParam)
 80057ec:	2c67      	cmp	r4, #103	; 0x67
 80057ee:	d100      	bne.n	80057f2 <setCommand+0x66>
 80057f0:	e3da      	b.n	8005fa8 <setCommand+0x81c>
	else if (result == BOS_ERR_WrongValue)
 80057f2:	2c68      	cmp	r4, #104	; 0x68
 80057f4:	d100      	bne.n	80057f8 <setCommand+0x6c>
 80057f6:	e3dd      	b.n	8005fb4 <setCommand+0x828>
}
 80057f8:	2000      	movs	r0, #0
 80057fa:	b00f      	add	sp, #60	; 0x3c
 80057fc:	bc0c      	pop	{r2, r3}
 80057fe:	4690      	mov	r8, r2
 8005800:	4699      	mov	r9, r3
 8005802:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005804:	aa0c      	add	r2, sp, #48	; 0x30
 8005806:	2102      	movs	r1, #2
 8005808:	0020      	movs	r0, r4
 800580a:	f008 fda5 	bl	800e358 <FreeRTOS_CLIGetParameter>
 800580e:	0004      	movs	r4, r0
 8005810:	4ba8      	ldr	r3, [pc, #672]	; (8005ab4 <setCommand+0x328>)
 8005812:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8005814:	4ba3      	ldr	r3, [pc, #652]	; (8005aa4 <setCommand+0x318>)
 8005816:	681d      	ldr	r5, [r3, #0]
 8005818:	3504      	adds	r5, #4
 800581a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800581c:	1f1f      	subs	r7, r3, #4
 800581e:	003a      	movs	r2, r7
 8005820:	49a5      	ldr	r1, [pc, #660]	; (8005ab8 <setCommand+0x32c>)
 8005822:	0028      	movs	r0, r5
 8005824:	f00e fd80 	bl	8014328 <strncmp>
 8005828:	2800      	cmp	r0, #0
 800582a:	d162      	bne.n	80058f2 <setCommand+0x166>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 800582c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800582e:	002a      	movs	r2, r5
 8005830:	49a2      	ldr	r1, [pc, #648]	; (8005abc <setCommand+0x330>)
 8005832:	0020      	movs	r0, r4
 8005834:	f00e fd78 	bl	8014328 <strncmp>
 8005838:	2800      	cmp	r0, #0
 800583a:	d122      	bne.n	8005882 <setCommand+0xf6>
				BOS.response = BOS_RESPONSE_ALL;
 800583c:	4ba0      	ldr	r3, [pc, #640]	; (8005ac0 <setCommand+0x334>)
 800583e:	2160      	movs	r1, #96	; 0x60
 8005840:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005842:	79db      	ldrb	r3, [r3, #7]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	4319      	orrs	r1, r3
 8005848:	308a      	adds	r0, #138	; 0x8a
 800584a:	0040      	lsls	r0, r0, #1
 800584c:	f001 fa9c 	bl	8006d88 <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005850:	2400      	movs	r4, #0
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8005852:	4b94      	ldr	r3, [pc, #592]	; (8005aa4 <setCommand+0x318>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005858:	18d3      	adds	r3, r2, r3
 800585a:	2100      	movs	r1, #0
 800585c:	7019      	strb	r1, [r3, #0]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 800585e:	4b95      	ldr	r3, [pc, #596]	; (8005ab4 <setCommand+0x328>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4998      	ldr	r1, [pc, #608]	; (8005ac4 <setCommand+0x338>)
 8005864:	9807      	ldr	r0, [sp, #28]
 8005866:	f00e fd1b 	bl	80142a0 <siprintf>
		if (extraMessage == 1) {
 800586a:	2c01      	cmp	r4, #1
 800586c:	d1c4      	bne.n	80057f8 <setCommand+0x6c>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 800586e:	4996      	ldr	r1, [pc, #600]	; (8005ac8 <setCommand+0x33c>)
 8005870:	9c07      	ldr	r4, [sp, #28]
 8005872:	0020      	movs	r0, r4
 8005874:	f00e fd34 	bl	80142e0 <strcat>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 8005878:	4994      	ldr	r1, [pc, #592]	; (8005acc <setCommand+0x340>)
 800587a:	0020      	movs	r0, r4
 800587c:	f00e fd30 	bl	80142e0 <strcat>
 8005880:	e7ba      	b.n	80057f8 <setCommand+0x6c>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8005882:	002a      	movs	r2, r5
 8005884:	4992      	ldr	r1, [pc, #584]	; (8005ad0 <setCommand+0x344>)
 8005886:	0020      	movs	r0, r4
 8005888:	f00e fd4e 	bl	8014328 <strncmp>
 800588c:	2800      	cmp	r0, #0
 800588e:	d10b      	bne.n	80058a8 <setCommand+0x11c>
				BOS.response = BOS_RESPONSE_MSG;
 8005890:	4b8b      	ldr	r3, [pc, #556]	; (8005ac0 <setCommand+0x334>)
 8005892:	2120      	movs	r1, #32
 8005894:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005896:	79db      	ldrb	r3, [r3, #7]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	4319      	orrs	r1, r3
 800589c:	308a      	adds	r0, #138	; 0x8a
 800589e:	0040      	lsls	r0, r0, #1
 80058a0:	f001 fa72 	bl	8006d88 <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 80058a4:	2400      	movs	r4, #0
 80058a6:	e7d4      	b.n	8005852 <setCommand+0xc6>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 80058a8:	002a      	movs	r2, r5
 80058aa:	498a      	ldr	r1, [pc, #552]	; (8005ad4 <setCommand+0x348>)
 80058ac:	0020      	movs	r0, r4
 80058ae:	f00e fd3b 	bl	8014328 <strncmp>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d10b      	bne.n	80058ce <setCommand+0x142>
				BOS.response = BOS_RESPONSE_CLI;
 80058b6:	4b82      	ldr	r3, [pc, #520]	; (8005ac0 <setCommand+0x334>)
 80058b8:	2140      	movs	r1, #64	; 0x40
 80058ba:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80058bc:	79db      	ldrb	r3, [r3, #7]
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	4319      	orrs	r1, r3
 80058c2:	308a      	adds	r0, #138	; 0x8a
 80058c4:	0040      	lsls	r0, r0, #1
 80058c6:	f001 fa5f 	bl	8006d88 <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 80058ca:	2400      	movs	r4, #0
 80058cc:	e7c1      	b.n	8005852 <setCommand+0xc6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 80058ce:	002a      	movs	r2, r5
 80058d0:	4981      	ldr	r1, [pc, #516]	; (8005ad8 <setCommand+0x34c>)
 80058d2:	0020      	movs	r0, r4
 80058d4:	f00e fd28 	bl	8014328 <strncmp>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d000      	beq.n	80058de <setCommand+0x152>
 80058dc:	e348      	b.n	8005f70 <setCommand+0x7e4>
				BOS.response = BOS_RESPONSE_NONE;
 80058de:	4b78      	ldr	r3, [pc, #480]	; (8005ac0 <setCommand+0x334>)
 80058e0:	2400      	movs	r4, #0
 80058e2:	719c      	strb	r4, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80058e4:	79d9      	ldrb	r1, [r3, #7]
 80058e6:	0209      	lsls	r1, r1, #8
 80058e8:	308a      	adds	r0, #138	; 0x8a
 80058ea:	0040      	lsls	r0, r0, #1
 80058ec:	f001 fa4c 	bl	8006d88 <EE_WriteVariable>
 80058f0:	e7af      	b.n	8005852 <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80058f2:	003a      	movs	r2, r7
 80058f4:	4979      	ldr	r1, [pc, #484]	; (8005adc <setCommand+0x350>)
 80058f6:	0028      	movs	r0, r5
 80058f8:	f00e fd16 	bl	8014328 <strncmp>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d14d      	bne.n	800599c <setCommand+0x210>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8005900:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005902:	002a      	movs	r2, r5
 8005904:	496d      	ldr	r1, [pc, #436]	; (8005abc <setCommand+0x330>)
 8005906:	0020      	movs	r0, r4
 8005908:	f00e fd0e 	bl	8014328 <strncmp>
 800590c:	2800      	cmp	r0, #0
 800590e:	d10c      	bne.n	800592a <setCommand+0x19e>
				BOS.trace = TRACE_BOTH;
 8005910:	4b6b      	ldr	r3, [pc, #428]	; (8005ac0 <setCommand+0x334>)
 8005912:	2203      	movs	r2, #3
 8005914:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005916:	799b      	ldrb	r3, [r3, #6]
 8005918:	21c0      	movs	r1, #192	; 0xc0
 800591a:	0089      	lsls	r1, r1, #2
 800591c:	4319      	orrs	r1, r3
 800591e:	308a      	adds	r0, #138	; 0x8a
 8005920:	0040      	lsls	r0, r0, #1
 8005922:	f001 fa31 	bl	8006d88 <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005926:	2400      	movs	r4, #0
 8005928:	e793      	b.n	8005852 <setCommand+0xc6>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 800592a:	002a      	movs	r2, r5
 800592c:	4968      	ldr	r1, [pc, #416]	; (8005ad0 <setCommand+0x344>)
 800592e:	0020      	movs	r0, r4
 8005930:	f00e fcfa 	bl	8014328 <strncmp>
 8005934:	2800      	cmp	r0, #0
 8005936:	d10c      	bne.n	8005952 <setCommand+0x1c6>
				BOS.trace = TRACE_MESSAGE;
 8005938:	4b61      	ldr	r3, [pc, #388]	; (8005ac0 <setCommand+0x334>)
 800593a:	2201      	movs	r2, #1
 800593c:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800593e:	799b      	ldrb	r3, [r3, #6]
 8005940:	2180      	movs	r1, #128	; 0x80
 8005942:	0049      	lsls	r1, r1, #1
 8005944:	4319      	orrs	r1, r3
 8005946:	308a      	adds	r0, #138	; 0x8a
 8005948:	4090      	lsls	r0, r2
 800594a:	f001 fa1d 	bl	8006d88 <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 800594e:	2400      	movs	r4, #0
 8005950:	e77f      	b.n	8005852 <setCommand+0xc6>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8005952:	002a      	movs	r2, r5
 8005954:	4958      	ldr	r1, [pc, #352]	; (8005ab8 <setCommand+0x32c>)
 8005956:	0020      	movs	r0, r4
 8005958:	f00e fce6 	bl	8014328 <strncmp>
 800595c:	2800      	cmp	r0, #0
 800595e:	d10c      	bne.n	800597a <setCommand+0x1ee>
				BOS.trace = TRACE_RESPONSE;
 8005960:	4b57      	ldr	r3, [pc, #348]	; (8005ac0 <setCommand+0x334>)
 8005962:	2202      	movs	r2, #2
 8005964:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005966:	799b      	ldrb	r3, [r3, #6]
 8005968:	2180      	movs	r1, #128	; 0x80
 800596a:	0089      	lsls	r1, r1, #2
 800596c:	4319      	orrs	r1, r3
 800596e:	308a      	adds	r0, #138	; 0x8a
 8005970:	0040      	lsls	r0, r0, #1
 8005972:	f001 fa09 	bl	8006d88 <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005976:	2400      	movs	r4, #0
 8005978:	e76b      	b.n	8005852 <setCommand+0xc6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 800597a:	002a      	movs	r2, r5
 800597c:	4956      	ldr	r1, [pc, #344]	; (8005ad8 <setCommand+0x34c>)
 800597e:	0020      	movs	r0, r4
 8005980:	f00e fcd2 	bl	8014328 <strncmp>
 8005984:	2800      	cmp	r0, #0
 8005986:	d000      	beq.n	800598a <setCommand+0x1fe>
 8005988:	e2f4      	b.n	8005f74 <setCommand+0x7e8>
				BOS.trace = TRACE_NONE;
 800598a:	4b4d      	ldr	r3, [pc, #308]	; (8005ac0 <setCommand+0x334>)
 800598c:	2400      	movs	r4, #0
 800598e:	71dc      	strb	r4, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005990:	7999      	ldrb	r1, [r3, #6]
 8005992:	308a      	adds	r0, #138	; 0x8a
 8005994:	0040      	lsls	r0, r0, #1
 8005996:	f001 f9f7 	bl	8006d88 <EE_WriteVariable>
 800599a:	e75a      	b.n	8005852 <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800599c:	003a      	movs	r2, r7
 800599e:	4950      	ldr	r1, [pc, #320]	; (8005ae0 <setCommand+0x354>)
 80059a0:	0028      	movs	r0, r5
 80059a2:	f00e fcc1 	bl	8014328 <strncmp>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d116      	bne.n	80059d8 <setCommand+0x24c>
			temp2 = atoi((const char *)pcParameterString2);
 80059aa:	0020      	movs	r0, r4
 80059ac:	f00d fc99 	bl	80132e2 <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 80059b0:	23e1      	movs	r3, #225	; 0xe1
 80059b2:	031b      	lsls	r3, r3, #12
 80059b4:	4298      	cmp	r0, r3
 80059b6:	d900      	bls.n	80059ba <setCommand+0x22e>
 80059b8:	e2de      	b.n	8005f78 <setCommand+0x7ec>
				BOS.clibaudrate = temp2;
 80059ba:	4c41      	ldr	r4, [pc, #260]	; (8005ac0 <setCommand+0x334>)
 80059bc:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 80059be:	b281      	uxth	r1, r0
 80059c0:	208c      	movs	r0, #140	; 0x8c
 80059c2:	0040      	lsls	r0, r0, #1
 80059c4:	f001 f9e0 	bl	8006d88 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 80059c8:	68a1      	ldr	r1, [r4, #8]
 80059ca:	0c09      	lsrs	r1, r1, #16
 80059cc:	201a      	movs	r0, #26
 80059ce:	30ff      	adds	r0, #255	; 0xff
 80059d0:	f001 f9da 	bl	8006d88 <EE_WriteVariable>
				extraMessage = 1;
 80059d4:	2401      	movs	r4, #1
 80059d6:	e73c      	b.n	8005852 <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 80059d8:	003a      	movs	r2, r7
 80059da:	4942      	ldr	r1, [pc, #264]	; (8005ae4 <setCommand+0x358>)
 80059dc:	0028      	movs	r0, r5
 80059de:	f00e fca3 	bl	8014328 <strncmp>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d10e      	bne.n	8005a04 <setCommand+0x278>
			temp16 = atoi((const char *)pcParameterString2);
 80059e6:	0020      	movs	r0, r4
 80059e8:	f00d fc7b 	bl	80132e2 <atoi>
 80059ec:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 80059ee:	2900      	cmp	r1, #0
 80059f0:	d100      	bne.n	80059f4 <setCommand+0x268>
 80059f2:	e2c3      	b.n	8005f7c <setCommand+0x7f0>
				BOS.buttons.debounce = temp16;
 80059f4:	4b32      	ldr	r3, [pc, #200]	; (8005ac0 <setCommand+0x334>)
 80059f6:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 80059f8:	2016      	movs	r0, #22
 80059fa:	30ff      	adds	r0, #255	; 0xff
 80059fc:	f001 f9c4 	bl	8006d88 <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005a00:	2400      	movs	r4, #0
 8005a02:	e726      	b.n	8005852 <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8005a04:	003a      	movs	r2, r7
 8005a06:	4938      	ldr	r1, [pc, #224]	; (8005ae8 <setCommand+0x35c>)
 8005a08:	0028      	movs	r0, r5
 8005a0a:	f00e fc8d 	bl	8014328 <strncmp>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d10e      	bne.n	8005a30 <setCommand+0x2a4>
			temp16 = atoi((const char *)pcParameterString2);
 8005a12:	0020      	movs	r0, r4
 8005a14:	f00d fc65 	bl	80132e2 <atoi>
 8005a18:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	d100      	bne.n	8005a20 <setCommand+0x294>
 8005a1e:	e2af      	b.n	8005f80 <setCommand+0x7f4>
				BOS.buttons.singleClickTime = temp16;
 8005a20:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <setCommand+0x334>)
 8005a22:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8005a24:	208b      	movs	r0, #139	; 0x8b
 8005a26:	0040      	lsls	r0, r0, #1
 8005a28:	f001 f9ae 	bl	8006d88 <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005a2c:	2400      	movs	r4, #0
 8005a2e:	e710      	b.n	8005852 <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8005a30:	003a      	movs	r2, r7
 8005a32:	492e      	ldr	r1, [pc, #184]	; (8005aec <setCommand+0x360>)
 8005a34:	0028      	movs	r0, r5
 8005a36:	f00e fc77 	bl	8014328 <strncmp>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d114      	bne.n	8005a68 <setCommand+0x2dc>
			temp16 = atoi((const char *)pcParameterString2);
 8005a3e:	0020      	movs	r0, r4
 8005a40:	f00d fc4f 	bl	80132e2 <atoi>
 8005a44:	b283      	uxth	r3, r0
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2bfe      	cmp	r3, #254	; 0xfe
 8005a4c:	d900      	bls.n	8005a50 <setCommand+0x2c4>
 8005a4e:	e299      	b.n	8005f84 <setCommand+0x7f8>
				BOS.buttons.minInterClickTime = temp16;
 8005a50:	b2c0      	uxtb	r0, r0
 8005a52:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <setCommand+0x334>)
 8005a54:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8005a56:	7959      	ldrb	r1, [r3, #5]
 8005a58:	0209      	lsls	r1, r1, #8
 8005a5a:	4301      	orrs	r1, r0
 8005a5c:	2018      	movs	r0, #24
 8005a5e:	30ff      	adds	r0, #255	; 0xff
 8005a60:	f001 f992 	bl	8006d88 <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005a64:	2400      	movs	r4, #0
 8005a66:	e6f4      	b.n	8005852 <setCommand+0xc6>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8005a68:	003a      	movs	r2, r7
 8005a6a:	4921      	ldr	r1, [pc, #132]	; (8005af0 <setCommand+0x364>)
 8005a6c:	0028      	movs	r0, r5
 8005a6e:	f00e fc5b 	bl	8014328 <strncmp>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d000      	beq.n	8005a78 <setCommand+0x2ec>
 8005a76:	e287      	b.n	8005f88 <setCommand+0x7fc>
			temp16 = atoi((const char *)pcParameterString2);
 8005a78:	0020      	movs	r0, r4
 8005a7a:	f00d fc32 	bl	80132e2 <atoi>
 8005a7e:	b283      	uxth	r3, r0
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2bfe      	cmp	r3, #254	; 0xfe
 8005a86:	d900      	bls.n	8005a8a <setCommand+0x2fe>
 8005a88:	e280      	b.n	8005f8c <setCommand+0x800>
				BOS.buttons.maxInterClickTime = temp16;
 8005a8a:	b2c0      	uxtb	r0, r0
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <setCommand+0x334>)
 8005a8e:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8005a90:	0200      	lsls	r0, r0, #8
 8005a92:	7919      	ldrb	r1, [r3, #4]
 8005a94:	4301      	orrs	r1, r0
 8005a96:	2018      	movs	r0, #24
 8005a98:	30ff      	adds	r0, #255	; 0xff
 8005a9a:	f001 f975 	bl	8006d88 <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005a9e:	2400      	movs	r4, #0
 8005aa0:	e6d7      	b.n	8005852 <setCommand+0xc6>
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	20000aa4 	.word	0x20000aa4
 8005aa8:	08017f2c 	.word	0x08017f2c
 8005aac:	0801857c 	.word	0x0801857c
 8005ab0:	08018588 	.word	0x08018588
 8005ab4:	20000ab0 	.word	0x20000ab0
 8005ab8:	08017f34 	.word	0x08017f34
 8005abc:	0801744c 	.word	0x0801744c
 8005ac0:	20006148 	.word	0x20006148
 8005ac4:	08018670 	.word	0x08018670
 8005ac8:	08018684 	.word	0x08018684
 8005acc:	080186b4 	.word	0x080186b4
 8005ad0:	08018570 	.word	0x08018570
 8005ad4:	08018578 	.word	0x08018578
 8005ad8:	08017f44 	.word	0x08017f44
 8005adc:	08017f4c 	.word	0x08017f4c
 8005ae0:	08017f54 	.word	0x08017f54
 8005ae4:	08017f60 	.word	0x08017f60
 8005ae8:	08017f6c 	.word	0x08017f6c
 8005aec:	08017f7c 	.word	0x08017f7c
 8005af0:	08017f90 	.word	0x08017f90
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005af4:	aa0c      	add	r2, sp, #48	; 0x30
 8005af6:	2102      	movs	r1, #2
 8005af8:	0020      	movs	r0, r4
 8005afa:	f008 fc2d 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8005afe:	4edf      	ldr	r6, [pc, #892]	; (8005e7c <setCommand+0x6f0>)
 8005b00:	6030      	str	r0, [r6, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8005b02:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b04:	2103      	movs	r1, #3
 8005b06:	0020      	movs	r0, r4
 8005b08:	f008 fc26 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8005b0c:	4fdc      	ldr	r7, [pc, #880]	; (8005e80 <setCommand+0x6f4>)
 8005b0e:	6038      	str	r0, [r7, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8005b10:	aa0a      	add	r2, sp, #40	; 0x28
 8005b12:	2104      	movs	r1, #4
 8005b14:	0020      	movs	r0, r4
 8005b16:	f008 fc1f 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8005b1a:	4dda      	ldr	r5, [pc, #872]	; (8005e84 <setCommand+0x6f8>)
 8005b1c:	6028      	str	r0, [r5, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8005b1e:	aa09      	add	r2, sp, #36	; 0x24
 8005b20:	2105      	movs	r1, #5
 8005b22:	0020      	movs	r0, r4
 8005b24:	f008 fc18 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8005b28:	4cd7      	ldr	r4, [pc, #860]	; (8005e88 <setCommand+0x6fc>)
 8005b2a:	6020      	str	r0, [r4, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 8005b2c:	6830      	ldr	r0, [r6, #0]
 8005b2e:	f00d fbd8 	bl	80132e2 <atoi>
 8005b32:	b2c6      	uxtb	r6, r0
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8005b34:	6838      	ldr	r0, [r7, #0]
 8005b36:	f00d fbd4 	bl	80132e2 <atoi>
 8005b3a:	b2c7      	uxtb	r7, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8005b3c:	6828      	ldr	r0, [r5, #0]
 8005b3e:	f00d fbd0 	bl	80132e2 <atoi>
 8005b42:	b2c5      	uxtb	r5, r0
		if (pcParameterString5 != NULL) {
 8005b44:	6824      	ldr	r4, [r4, #0]
 8005b46:	2c00      	cmp	r4, #0
 8005b48:	d010      	beq.n	8005b6c <setCommand+0x3e0>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	49cf      	ldr	r1, [pc, #828]	; (8005e8c <setCommand+0x700>)
 8005b4e:	0020      	movs	r0, r4
 8005b50:	f00e fbea 	bl	8014328 <strncmp>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d028      	beq.n	8005baa <setCommand+0x41e>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8005b58:	2202      	movs	r2, #2
 8005b5a:	49cd      	ldr	r1, [pc, #820]	; (8005e90 <setCommand+0x704>)
 8005b5c:	0020      	movs	r0, r4
 8005b5e:	f00e fbe3 	bl	8014328 <strncmp>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d000      	beq.n	8005b68 <setCommand+0x3dc>
 8005b66:	e1ff      	b.n	8005f68 <setCommand+0x7dc>
				temp84 = RTC_PM;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	4698      	mov	r8, r3
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8005b6c:	2e17      	cmp	r6, #23
 8005b6e:	d900      	bls.n	8005b72 <setCommand+0x3e6>
 8005b70:	e20e      	b.n	8005f90 <setCommand+0x804>
 8005b72:	2f3b      	cmp	r7, #59	; 0x3b
 8005b74:	d900      	bls.n	8005b78 <setCommand+0x3ec>
 8005b76:	e20d      	b.n	8005f94 <setCommand+0x808>
 8005b78:	2d3b      	cmp	r5, #59	; 0x3b
 8005b7a:	d900      	bls.n	8005b7e <setCommand+0x3f2>
 8005b7c:	e20c      	b.n	8005f98 <setCommand+0x80c>
				GetTimeDate();				
 8005b7e:	f007 ff35 	bl	800d9ec <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 8005b82:	4cc4      	ldr	r4, [pc, #784]	; (8005e94 <setCommand+0x708>)
 8005b84:	7da0      	ldrb	r0, [r4, #22]
 8005b86:	7d61      	ldrb	r1, [r4, #21]
 8005b88:	8b22      	ldrh	r2, [r4, #24]
 8005b8a:	7d23      	ldrb	r3, [r4, #20]
 8005b8c:	7b24      	ldrb	r4, [r4, #12]
 8005b8e:	b264      	sxtb	r4, r4
 8005b90:	9404      	str	r4, [sp, #16]
 8005b92:	4644      	mov	r4, r8
 8005b94:	9403      	str	r4, [sp, #12]
 8005b96:	9602      	str	r6, [sp, #8]
 8005b98:	9701      	str	r7, [sp, #4]
 8005b9a:	9500      	str	r5, [sp, #0]
 8005b9c:	f007 fecc 	bl	800d938 <BOS_CalendarConfig>
 8005ba0:	0004      	movs	r4, r0
	if (result == BOS_OK) 
 8005ba2:	2c00      	cmp	r4, #0
 8005ba4:	d000      	beq.n	8005ba8 <setCommand+0x41c>
 8005ba6:	e621      	b.n	80057ec <setCommand+0x60>
 8005ba8:	e653      	b.n	8005852 <setCommand+0xc6>
				temp84 = RTC_AM;
 8005baa:	2301      	movs	r3, #1
 8005bac:	4698      	mov	r8, r3
 8005bae:	e7dd      	b.n	8005b6c <setCommand+0x3e0>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005bb0:	aa0c      	add	r2, sp, #48	; 0x30
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	0020      	movs	r0, r4
 8005bb6:	f008 fbcf 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8005bba:	4db0      	ldr	r5, [pc, #704]	; (8005e7c <setCommand+0x6f0>)
 8005bbc:	6028      	str	r0, [r5, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8005bbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bc0:	2103      	movs	r1, #3
 8005bc2:	0020      	movs	r0, r4
 8005bc4:	f008 fbc8 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8005bc8:	4bad      	ldr	r3, [pc, #692]	; (8005e80 <setCommand+0x6f4>)
 8005bca:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8005bcc:	aa0a      	add	r2, sp, #40	; 0x28
 8005bce:	2104      	movs	r1, #4
 8005bd0:	0020      	movs	r0, r4
 8005bd2:	f008 fbc1 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8005bd6:	4eab      	ldr	r6, [pc, #684]	; (8005e84 <setCommand+0x6f8>)
 8005bd8:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8005bda:	aa09      	add	r2, sp, #36	; 0x24
 8005bdc:	2105      	movs	r1, #5
 8005bde:	0020      	movs	r0, r4
 8005be0:	f008 fbba 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8005be4:	4ca8      	ldr	r4, [pc, #672]	; (8005e88 <setCommand+0x6fc>)
 8005be6:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 8005be8:	6830      	ldr	r0, [r6, #0]
 8005bea:	f00d fb7a 	bl	80132e2 <atoi>
 8005bee:	b2c3      	uxtb	r3, r0
 8005bf0:	4699      	mov	r9, r3
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8005bf2:	6820      	ldr	r0, [r4, #0]
 8005bf4:	f00d fb75 	bl	80132e2 <atoi>
 8005bf8:	b286      	uxth	r6, r0
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8005bfa:	682c      	ldr	r4, [r5, #0]
 8005bfc:	2206      	movs	r2, #6
 8005bfe:	49a6      	ldr	r1, [pc, #664]	; (8005e98 <setCommand+0x70c>)
 8005c00:	0020      	movs	r0, r4
 8005c02:	f00e fb91 	bl	8014328 <strncmp>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d100      	bne.n	8005c0c <setCommand+0x480>
 8005c0a:	e11b      	b.n	8005e44 <setCommand+0x6b8>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 8005c0c:	2207      	movs	r2, #7
 8005c0e:	49a3      	ldr	r1, [pc, #652]	; (8005e9c <setCommand+0x710>)
 8005c10:	0020      	movs	r0, r4
 8005c12:	f00e fb89 	bl	8014328 <strncmp>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d100      	bne.n	8005c1c <setCommand+0x490>
 8005c1a:	e116      	b.n	8005e4a <setCommand+0x6be>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 8005c1c:	2209      	movs	r2, #9
 8005c1e:	49a0      	ldr	r1, [pc, #640]	; (8005ea0 <setCommand+0x714>)
 8005c20:	0020      	movs	r0, r4
 8005c22:	f00e fb81 	bl	8014328 <strncmp>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d100      	bne.n	8005c2c <setCommand+0x4a0>
 8005c2a:	e111      	b.n	8005e50 <setCommand+0x6c4>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	499d      	ldr	r1, [pc, #628]	; (8005ea4 <setCommand+0x718>)
 8005c30:	0020      	movs	r0, r4
 8005c32:	f00e fb79 	bl	8014328 <strncmp>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d100      	bne.n	8005c3c <setCommand+0x4b0>
 8005c3a:	e10c      	b.n	8005e56 <setCommand+0x6ca>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 8005c3c:	2206      	movs	r2, #6
 8005c3e:	499a      	ldr	r1, [pc, #616]	; (8005ea8 <setCommand+0x71c>)
 8005c40:	0020      	movs	r0, r4
 8005c42:	f00e fb71 	bl	8014328 <strncmp>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d100      	bne.n	8005c4c <setCommand+0x4c0>
 8005c4a:	e107      	b.n	8005e5c <setCommand+0x6d0>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	4997      	ldr	r1, [pc, #604]	; (8005eac <setCommand+0x720>)
 8005c50:	0020      	movs	r0, r4
 8005c52:	f00e fb69 	bl	8014328 <strncmp>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d100      	bne.n	8005c5c <setCommand+0x4d0>
 8005c5a:	e102      	b.n	8005e62 <setCommand+0x6d6>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 8005c5c:	2206      	movs	r2, #6
 8005c5e:	4994      	ldr	r1, [pc, #592]	; (8005eb0 <setCommand+0x724>)
 8005c60:	0020      	movs	r0, r4
 8005c62:	f00e fb61 	bl	8014328 <strncmp>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d000      	beq.n	8005c6c <setCommand+0x4e0>
 8005c6a:	e0fd      	b.n	8005e68 <setCommand+0x6dc>
			temp81 = SUNDAY;
 8005c6c:	2707      	movs	r7, #7
	BOS_Status result = BOS_OK; 
 8005c6e:	2400      	movs	r4, #0
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8005c70:	4b83      	ldr	r3, [pc, #524]	; (8005e80 <setCommand+0x6f4>)
 8005c72:	681d      	ldr	r5, [r3, #0]
 8005c74:	2207      	movs	r2, #7
 8005c76:	498f      	ldr	r1, [pc, #572]	; (8005eb4 <setCommand+0x728>)
 8005c78:	0028      	movs	r0, r5
 8005c7a:	f00e fb55 	bl	8014328 <strncmp>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d100      	bne.n	8005c84 <setCommand+0x4f8>
 8005c82:	e0f3      	b.n	8005e6c <setCommand+0x6e0>
 8005c84:	2202      	movs	r2, #2
 8005c86:	498c      	ldr	r1, [pc, #560]	; (8005eb8 <setCommand+0x72c>)
 8005c88:	0028      	movs	r0, r5
 8005c8a:	f00e fb4d 	bl	8014328 <strncmp>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d100      	bne.n	8005c94 <setCommand+0x508>
 8005c92:	e0ed      	b.n	8005e70 <setCommand+0x6e4>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 8005c94:	2208      	movs	r2, #8
 8005c96:	4989      	ldr	r1, [pc, #548]	; (8005ebc <setCommand+0x730>)
 8005c98:	0028      	movs	r0, r5
 8005c9a:	f00e fb45 	bl	8014328 <strncmp>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d100      	bne.n	8005ca4 <setCommand+0x518>
 8005ca2:	e0e7      	b.n	8005e74 <setCommand+0x6e8>
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	4986      	ldr	r1, [pc, #536]	; (8005ec0 <setCommand+0x734>)
 8005ca8:	0028      	movs	r0, r5
 8005caa:	f00e fb3d 	bl	8014328 <strncmp>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d100      	bne.n	8005cb4 <setCommand+0x528>
 8005cb2:	e0e1      	b.n	8005e78 <setCommand+0x6ec>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 8005cb4:	2205      	movs	r2, #5
 8005cb6:	4983      	ldr	r1, [pc, #524]	; (8005ec4 <setCommand+0x738>)
 8005cb8:	0028      	movs	r0, r5
 8005cba:	f00e fb35 	bl	8014328 <strncmp>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d100      	bne.n	8005cc4 <setCommand+0x538>
 8005cc2:	e12b      	b.n	8005f1c <setCommand+0x790>
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	4980      	ldr	r1, [pc, #512]	; (8005ec8 <setCommand+0x73c>)
 8005cc8:	0028      	movs	r0, r5
 8005cca:	f00e fb2d 	bl	8014328 <strncmp>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d100      	bne.n	8005cd4 <setCommand+0x548>
 8005cd2:	e125      	b.n	8005f20 <setCommand+0x794>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 8005cd4:	2205      	movs	r2, #5
 8005cd6:	497d      	ldr	r1, [pc, #500]	; (8005ecc <setCommand+0x740>)
 8005cd8:	0028      	movs	r0, r5
 8005cda:	f00e fb25 	bl	8014328 <strncmp>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d100      	bne.n	8005ce4 <setCommand+0x558>
 8005ce2:	e11f      	b.n	8005f24 <setCommand+0x798>
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	497a      	ldr	r1, [pc, #488]	; (8005ed0 <setCommand+0x744>)
 8005ce8:	0028      	movs	r0, r5
 8005cea:	f00e fb1d 	bl	8014328 <strncmp>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d100      	bne.n	8005cf4 <setCommand+0x568>
 8005cf2:	e119      	b.n	8005f28 <setCommand+0x79c>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	4977      	ldr	r1, [pc, #476]	; (8005ed4 <setCommand+0x748>)
 8005cf8:	0028      	movs	r0, r5
 8005cfa:	f00e fb15 	bl	8014328 <strncmp>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d100      	bne.n	8005d04 <setCommand+0x578>
 8005d02:	e113      	b.n	8005f2c <setCommand+0x7a0>
 8005d04:	2202      	movs	r2, #2
 8005d06:	4974      	ldr	r1, [pc, #464]	; (8005ed8 <setCommand+0x74c>)
 8005d08:	0028      	movs	r0, r5
 8005d0a:	f00e fb0d 	bl	8014328 <strncmp>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d100      	bne.n	8005d14 <setCommand+0x588>
 8005d12:	e10d      	b.n	8005f30 <setCommand+0x7a4>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 8005d14:	2204      	movs	r2, #4
 8005d16:	4971      	ldr	r1, [pc, #452]	; (8005edc <setCommand+0x750>)
 8005d18:	0028      	movs	r0, r5
 8005d1a:	f00e fb05 	bl	8014328 <strncmp>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d100      	bne.n	8005d24 <setCommand+0x598>
 8005d22:	e107      	b.n	8005f34 <setCommand+0x7a8>
 8005d24:	2202      	movs	r2, #2
 8005d26:	496e      	ldr	r1, [pc, #440]	; (8005ee0 <setCommand+0x754>)
 8005d28:	0028      	movs	r0, r5
 8005d2a:	f00e fafd 	bl	8014328 <strncmp>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d100      	bne.n	8005d34 <setCommand+0x5a8>
 8005d32:	e101      	b.n	8005f38 <setCommand+0x7ac>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 8005d34:	2204      	movs	r2, #4
 8005d36:	496b      	ldr	r1, [pc, #428]	; (8005ee4 <setCommand+0x758>)
 8005d38:	0028      	movs	r0, r5
 8005d3a:	f00e faf5 	bl	8014328 <strncmp>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d100      	bne.n	8005d44 <setCommand+0x5b8>
 8005d42:	e0fb      	b.n	8005f3c <setCommand+0x7b0>
 8005d44:	2202      	movs	r2, #2
 8005d46:	4968      	ldr	r1, [pc, #416]	; (8005ee8 <setCommand+0x75c>)
 8005d48:	0028      	movs	r0, r5
 8005d4a:	f00e faed 	bl	8014328 <strncmp>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d100      	bne.n	8005d54 <setCommand+0x5c8>
 8005d52:	e0f5      	b.n	8005f40 <setCommand+0x7b4>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 8005d54:	2205      	movs	r2, #5
 8005d56:	4965      	ldr	r1, [pc, #404]	; (8005eec <setCommand+0x760>)
 8005d58:	0028      	movs	r0, r5
 8005d5a:	f00e fae5 	bl	8014328 <strncmp>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d100      	bne.n	8005d64 <setCommand+0x5d8>
 8005d62:	e0ef      	b.n	8005f44 <setCommand+0x7b8>
 8005d64:	2202      	movs	r2, #2
 8005d66:	4962      	ldr	r1, [pc, #392]	; (8005ef0 <setCommand+0x764>)
 8005d68:	0028      	movs	r0, r5
 8005d6a:	f00e fadd 	bl	8014328 <strncmp>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d100      	bne.n	8005d74 <setCommand+0x5e8>
 8005d72:	e0e9      	b.n	8005f48 <setCommand+0x7bc>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8005d74:	2209      	movs	r2, #9
 8005d76:	495f      	ldr	r1, [pc, #380]	; (8005ef4 <setCommand+0x768>)
 8005d78:	0028      	movs	r0, r5
 8005d7a:	f00e fad5 	bl	8014328 <strncmp>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d100      	bne.n	8005d84 <setCommand+0x5f8>
 8005d82:	e0e3      	b.n	8005f4c <setCommand+0x7c0>
 8005d84:	2202      	movs	r2, #2
 8005d86:	495c      	ldr	r1, [pc, #368]	; (8005ef8 <setCommand+0x76c>)
 8005d88:	0028      	movs	r0, r5
 8005d8a:	f00e facd 	bl	8014328 <strncmp>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d100      	bne.n	8005d94 <setCommand+0x608>
 8005d92:	e0dd      	b.n	8005f50 <setCommand+0x7c4>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 8005d94:	2207      	movs	r2, #7
 8005d96:	4959      	ldr	r1, [pc, #356]	; (8005efc <setCommand+0x770>)
 8005d98:	0028      	movs	r0, r5
 8005d9a:	f00e fac5 	bl	8014328 <strncmp>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d100      	bne.n	8005da4 <setCommand+0x618>
 8005da2:	e0d7      	b.n	8005f54 <setCommand+0x7c8>
 8005da4:	2202      	movs	r2, #2
 8005da6:	4956      	ldr	r1, [pc, #344]	; (8005f00 <setCommand+0x774>)
 8005da8:	0028      	movs	r0, r5
 8005daa:	f00e fabd 	bl	8014328 <strncmp>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d100      	bne.n	8005db4 <setCommand+0x628>
 8005db2:	e0d1      	b.n	8005f58 <setCommand+0x7cc>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 8005db4:	2208      	movs	r2, #8
 8005db6:	4953      	ldr	r1, [pc, #332]	; (8005f04 <setCommand+0x778>)
 8005db8:	0028      	movs	r0, r5
 8005dba:	f00e fab5 	bl	8014328 <strncmp>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d100      	bne.n	8005dc4 <setCommand+0x638>
 8005dc2:	e0cb      	b.n	8005f5c <setCommand+0x7d0>
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	4950      	ldr	r1, [pc, #320]	; (8005f08 <setCommand+0x77c>)
 8005dc8:	0028      	movs	r0, r5
 8005dca:	f00e faad 	bl	8014328 <strncmp>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d100      	bne.n	8005dd4 <setCommand+0x648>
 8005dd2:	e0c5      	b.n	8005f60 <setCommand+0x7d4>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	494d      	ldr	r1, [pc, #308]	; (8005f0c <setCommand+0x780>)
 8005dd8:	0028      	movs	r0, r5
 8005dda:	f00e faa5 	bl	8014328 <strncmp>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d100      	bne.n	8005de4 <setCommand+0x658>
 8005de2:	e0bf      	b.n	8005f64 <setCommand+0x7d8>
 8005de4:	2202      	movs	r2, #2
 8005de6:	494a      	ldr	r1, [pc, #296]	; (8005f10 <setCommand+0x784>)
 8005de8:	0028      	movs	r0, r5
 8005dea:	f00e fa9d 	bl	8014328 <strncmp>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d000      	beq.n	8005df4 <setCommand+0x668>
 8005df2:	e0bb      	b.n	8005f6c <setCommand+0x7e0>
			temp82 = DECEMBER;
 8005df4:	250c      	movs	r5, #12
		if (result == BOS_OK) 
 8005df6:	2c00      	cmp	r4, #0
 8005df8:	d000      	beq.n	8005dfc <setCommand+0x670>
 8005dfa:	e6d2      	b.n	8005ba2 <setCommand+0x416>
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b1e      	cmp	r3, #30
 8005e04:	d900      	bls.n	8005e08 <setCommand+0x67c>
 8005e06:	e0c9      	b.n	8005f9c <setCommand+0x810>
 8005e08:	4b42      	ldr	r3, [pc, #264]	; (8005f14 <setCommand+0x788>)
 8005e0a:	429e      	cmp	r6, r3
 8005e0c:	d800      	bhi.n	8005e10 <setCommand+0x684>
 8005e0e:	e0c7      	b.n	8005fa0 <setCommand+0x814>
 8005e10:	4b41      	ldr	r3, [pc, #260]	; (8005f18 <setCommand+0x78c>)
 8005e12:	429e      	cmp	r6, r3
 8005e14:	d900      	bls.n	8005e18 <setCommand+0x68c>
 8005e16:	e0c5      	b.n	8005fa4 <setCommand+0x818>
				GetTimeDate();
 8005e18:	f007 fde8 	bl	800d9ec <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <setCommand+0x708>)
 8005e1e:	7c1a      	ldrb	r2, [r3, #16]
 8005e20:	7c59      	ldrb	r1, [r3, #17]
 8005e22:	7c98      	ldrb	r0, [r3, #18]
 8005e24:	7cdc      	ldrb	r4, [r3, #19]
 8005e26:	7b1b      	ldrb	r3, [r3, #12]
 8005e28:	b25b      	sxtb	r3, r3
 8005e2a:	9304      	str	r3, [sp, #16]
 8005e2c:	9403      	str	r4, [sp, #12]
 8005e2e:	9002      	str	r0, [sp, #8]
 8005e30:	9101      	str	r1, [sp, #4]
 8005e32:	9200      	str	r2, [sp, #0]
 8005e34:	003b      	movs	r3, r7
 8005e36:	0032      	movs	r2, r6
 8005e38:	4649      	mov	r1, r9
 8005e3a:	0028      	movs	r0, r5
 8005e3c:	f007 fd7c 	bl	800d938 <BOS_CalendarConfig>
 8005e40:	0004      	movs	r4, r0
 8005e42:	e6ae      	b.n	8005ba2 <setCommand+0x416>
			temp81 = MONDAY;
 8005e44:	2701      	movs	r7, #1
	BOS_Status result = BOS_OK; 
 8005e46:	2400      	movs	r4, #0
 8005e48:	e712      	b.n	8005c70 <setCommand+0x4e4>
			temp81 = TUESDAY;
 8005e4a:	2702      	movs	r7, #2
	BOS_Status result = BOS_OK; 
 8005e4c:	2400      	movs	r4, #0
 8005e4e:	e70f      	b.n	8005c70 <setCommand+0x4e4>
			temp81 = WEDNESDAY;
 8005e50:	2703      	movs	r7, #3
	BOS_Status result = BOS_OK; 
 8005e52:	2400      	movs	r4, #0
 8005e54:	e70c      	b.n	8005c70 <setCommand+0x4e4>
			temp81 = THURSDAY;
 8005e56:	2704      	movs	r7, #4
	BOS_Status result = BOS_OK; 
 8005e58:	2400      	movs	r4, #0
 8005e5a:	e709      	b.n	8005c70 <setCommand+0x4e4>
			temp81 = FRIDAY;
 8005e5c:	2705      	movs	r7, #5
	BOS_Status result = BOS_OK; 
 8005e5e:	2400      	movs	r4, #0
 8005e60:	e706      	b.n	8005c70 <setCommand+0x4e4>
			temp81 = SATURDAY;
 8005e62:	2706      	movs	r7, #6
	BOS_Status result = BOS_OK; 
 8005e64:	2400      	movs	r4, #0
 8005e66:	e703      	b.n	8005c70 <setCommand+0x4e4>
			result = BOS_ERR_WrongValue;		
 8005e68:	2468      	movs	r4, #104	; 0x68
 8005e6a:	e701      	b.n	8005c70 <setCommand+0x4e4>
			temp82 = JANUARY;
 8005e6c:	2501      	movs	r5, #1
 8005e6e:	e7c2      	b.n	8005df6 <setCommand+0x66a>
 8005e70:	2501      	movs	r5, #1
 8005e72:	e7c0      	b.n	8005df6 <setCommand+0x66a>
			temp82 = FEBRUARY;
 8005e74:	2502      	movs	r5, #2
 8005e76:	e7be      	b.n	8005df6 <setCommand+0x66a>
 8005e78:	2502      	movs	r5, #2
 8005e7a:	e7bc      	b.n	8005df6 <setCommand+0x66a>
 8005e7c:	20000ab0 	.word	0x20000ab0
 8005e80:	20000ab8 	.word	0x20000ab8
 8005e84:	20000ac0 	.word	0x20000ac0
 8005e88:	20000ac4 	.word	0x20000ac4
 8005e8c:	0801a040 	.word	0x0801a040
 8005e90:	08018584 	.word	0x08018584
 8005e94:	20006148 	.word	0x20006148
 8005e98:	08018590 	.word	0x08018590
 8005e9c:	08018598 	.word	0x08018598
 8005ea0:	080185a0 	.word	0x080185a0
 8005ea4:	080185ac 	.word	0x080185ac
 8005ea8:	080185b8 	.word	0x080185b8
 8005eac:	080185c0 	.word	0x080185c0
 8005eb0:	080185cc 	.word	0x080185cc
 8005eb4:	080185d4 	.word	0x080185d4
 8005eb8:	080185dc 	.word	0x080185dc
 8005ebc:	080185e0 	.word	0x080185e0
 8005ec0:	080185ec 	.word	0x080185ec
 8005ec4:	080185f0 	.word	0x080185f0
 8005ec8:	080185f8 	.word	0x080185f8
 8005ecc:	080185fc 	.word	0x080185fc
 8005ed0:	08018604 	.word	0x08018604
 8005ed4:	08018608 	.word	0x08018608
 8005ed8:	0801860c 	.word	0x0801860c
 8005edc:	08018610 	.word	0x08018610
 8005ee0:	08018618 	.word	0x08018618
 8005ee4:	0801861c 	.word	0x0801861c
 8005ee8:	08018624 	.word	0x08018624
 8005eec:	08018628 	.word	0x08018628
 8005ef0:	08018630 	.word	0x08018630
 8005ef4:	08018634 	.word	0x08018634
 8005ef8:	08018640 	.word	0x08018640
 8005efc:	08018644 	.word	0x08018644
 8005f00:	0801864c 	.word	0x0801864c
 8005f04:	08018650 	.word	0x08018650
 8005f08:	0801865c 	.word	0x0801865c
 8005f0c:	08018660 	.word	0x08018660
 8005f10:	0801866c 	.word	0x0801866c
 8005f14:	000007cf 	.word	0x000007cf
 8005f18:	00000834 	.word	0x00000834
			temp82 = MARCH;
 8005f1c:	2503      	movs	r5, #3
 8005f1e:	e76a      	b.n	8005df6 <setCommand+0x66a>
 8005f20:	2503      	movs	r5, #3
 8005f22:	e768      	b.n	8005df6 <setCommand+0x66a>
			temp82 = APRIL;
 8005f24:	2504      	movs	r5, #4
 8005f26:	e766      	b.n	8005df6 <setCommand+0x66a>
 8005f28:	2504      	movs	r5, #4
 8005f2a:	e764      	b.n	8005df6 <setCommand+0x66a>
			temp82 = MAY;
 8005f2c:	2505      	movs	r5, #5
 8005f2e:	e762      	b.n	8005df6 <setCommand+0x66a>
 8005f30:	2505      	movs	r5, #5
 8005f32:	e760      	b.n	8005df6 <setCommand+0x66a>
			temp82 = JUNE;
 8005f34:	2506      	movs	r5, #6
 8005f36:	e75e      	b.n	8005df6 <setCommand+0x66a>
 8005f38:	2506      	movs	r5, #6
 8005f3a:	e75c      	b.n	8005df6 <setCommand+0x66a>
			temp82 = JULY;
 8005f3c:	2507      	movs	r5, #7
 8005f3e:	e75a      	b.n	8005df6 <setCommand+0x66a>
 8005f40:	2507      	movs	r5, #7
 8005f42:	e758      	b.n	8005df6 <setCommand+0x66a>
			temp82 = AUGUST;
 8005f44:	2508      	movs	r5, #8
 8005f46:	e756      	b.n	8005df6 <setCommand+0x66a>
 8005f48:	2508      	movs	r5, #8
 8005f4a:	e754      	b.n	8005df6 <setCommand+0x66a>
			temp82 = SEPTEMBER;
 8005f4c:	2509      	movs	r5, #9
 8005f4e:	e752      	b.n	8005df6 <setCommand+0x66a>
 8005f50:	2509      	movs	r5, #9
 8005f52:	e750      	b.n	8005df6 <setCommand+0x66a>
			temp82 = OCTOBER;
 8005f54:	250a      	movs	r5, #10
 8005f56:	e74e      	b.n	8005df6 <setCommand+0x66a>
 8005f58:	250a      	movs	r5, #10
 8005f5a:	e74c      	b.n	8005df6 <setCommand+0x66a>
			temp82 = NOVEMBER;
 8005f5c:	250b      	movs	r5, #11
 8005f5e:	e74a      	b.n	8005df6 <setCommand+0x66a>
 8005f60:	250b      	movs	r5, #11
 8005f62:	e748      	b.n	8005df6 <setCommand+0x66a>
			temp82 = DECEMBER;
 8005f64:	250c      	movs	r5, #12
 8005f66:	e746      	b.n	8005df6 <setCommand+0x66a>
				result = BOS_ERR_WrongValue;
 8005f68:	2468      	movs	r4, #104	; 0x68
 8005f6a:	e61a      	b.n	8005ba2 <setCommand+0x416>
			result = BOS_ERR_WrongValue;	
 8005f6c:	2468      	movs	r4, #104	; 0x68
 8005f6e:	e618      	b.n	8005ba2 <setCommand+0x416>
				result = BOS_ERR_WrongValue;
 8005f70:	2468      	movs	r4, #104	; 0x68
 8005f72:	e43b      	b.n	80057ec <setCommand+0x60>
				result = BOS_ERR_WrongValue;
 8005f74:	2468      	movs	r4, #104	; 0x68
 8005f76:	e439      	b.n	80057ec <setCommand+0x60>
				result = BOS_ERR_WrongValue;			
 8005f78:	2468      	movs	r4, #104	; 0x68
 8005f7a:	e437      	b.n	80057ec <setCommand+0x60>
				result = BOS_ERR_WrongValue;
 8005f7c:	2468      	movs	r4, #104	; 0x68
 8005f7e:	e435      	b.n	80057ec <setCommand+0x60>
				result = BOS_ERR_WrongValue;			
 8005f80:	2468      	movs	r4, #104	; 0x68
 8005f82:	e433      	b.n	80057ec <setCommand+0x60>
				result = BOS_ERR_WrongValue;			
 8005f84:	2468      	movs	r4, #104	; 0x68
 8005f86:	e431      	b.n	80057ec <setCommand+0x60>
			result = BOS_ERR_WrongParam;
 8005f88:	2467      	movs	r4, #103	; 0x67
 8005f8a:	e42f      	b.n	80057ec <setCommand+0x60>
				result = BOS_ERR_WrongValue;					
 8005f8c:	2468      	movs	r4, #104	; 0x68
 8005f8e:	e42d      	b.n	80057ec <setCommand+0x60>
				result = BOS_ERR_WrongValue;
 8005f90:	2468      	movs	r4, #104	; 0x68
 8005f92:	e42b      	b.n	80057ec <setCommand+0x60>
 8005f94:	2468      	movs	r4, #104	; 0x68
 8005f96:	e429      	b.n	80057ec <setCommand+0x60>
 8005f98:	2468      	movs	r4, #104	; 0x68
 8005f9a:	e427      	b.n	80057ec <setCommand+0x60>
				result = BOS_ERR_WrongValue;
 8005f9c:	2468      	movs	r4, #104	; 0x68
 8005f9e:	e425      	b.n	80057ec <setCommand+0x60>
 8005fa0:	2468      	movs	r4, #104	; 0x68
 8005fa2:	e423      	b.n	80057ec <setCommand+0x60>
 8005fa4:	2468      	movs	r4, #104	; 0x68
 8005fa6:	e421      	b.n	80057ec <setCommand+0x60>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8005fa8:	2213      	movs	r2, #19
 8005faa:	4905      	ldr	r1, [pc, #20]	; (8005fc0 <setCommand+0x834>)
 8005fac:	9807      	ldr	r0, [sp, #28]
 8005fae:	f00d fa10 	bl	80133d2 <memcpy>
 8005fb2:	e421      	b.n	80057f8 <setCommand+0x6c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8005fb4:	220f      	movs	r2, #15
 8005fb6:	4903      	ldr	r1, [pc, #12]	; (8005fc4 <setCommand+0x838>)
 8005fb8:	9807      	ldr	r0, [sp, #28]
 8005fba:	f00d fa0a 	bl	80133d2 <memcpy>
 8005fbe:	e41b      	b.n	80057f8 <setCommand+0x6c>
 8005fc0:	08017fe4 	.word	0x08017fe4
 8005fc4:	08017e20 	.word	0x08017e20

08005fc8 <removebuttonCommand>:
{
 8005fc8:	b530      	push	{r4, r5, lr}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	0005      	movs	r5, r0
 8005fce:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005fd4:	2d00      	cmp	r5, #0
 8005fd6:	d101      	bne.n	8005fdc <removebuttonCommand+0x14>
 8005fd8:	b672      	cpsid	i
 8005fda:	e7fe      	b.n	8005fda <removebuttonCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005fdc:	aa01      	add	r2, sp, #4
 8005fde:	2101      	movs	r1, #1
 8005fe0:	f008 f9ba 	bl	800e358 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	56c3      	ldrsb	r3, [r0, r3]
 8005fe8:	2b70      	cmp	r3, #112	; 0x70
 8005fea:	d008      	beq.n	8005ffe <removebuttonCommand+0x36>
	uint8_t port = 0;
 8005fec:	2400      	movs	r4, #0
	result = RemovePortButton(port);
 8005fee:	0020      	movs	r0, r4
 8005ff0:	f001 fdc2 	bl	8007b78 <RemovePortButton>
	if (result == BOS_OK) 
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d007      	beq.n	8006008 <removebuttonCommand+0x40>
}
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	b003      	add	sp, #12
 8005ffc:	bd30      	pop	{r4, r5, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005ffe:	3001      	adds	r0, #1
 8006000:	f00d f975 	bl	80132ee <atol>
 8006004:	b2c4      	uxtb	r4, r0
 8006006:	e7f2      	b.n	8005fee <removebuttonCommand+0x26>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 8006008:	0023      	movs	r3, r4
 800600a:	0022      	movs	r2, r4
 800600c:	4902      	ldr	r1, [pc, #8]	; (8006018 <removebuttonCommand+0x50>)
 800600e:	0028      	movs	r0, r5
 8006010:	f00e f946 	bl	80142a0 <siprintf>
 8006014:	e7f0      	b.n	8005ff8 <removebuttonCommand+0x30>
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	08018420 	.word	0x08018420

0800601c <addbuttonCommand>:
{
 800601c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800601e:	b085      	sub	sp, #20
 8006020:	0006      	movs	r6, r0
 8006022:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 8006024:	2300      	movs	r3, #0
 8006026:	9303      	str	r3, [sp, #12]
 8006028:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 800602a:	2800      	cmp	r0, #0
 800602c:	d101      	bne.n	8006032 <addbuttonCommand+0x16>
 800602e:	b672      	cpsid	i
 8006030:	e7fe      	b.n	8006030 <addbuttonCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006032:	aa03      	add	r2, sp, #12
 8006034:	2101      	movs	r1, #1
 8006036:	0038      	movs	r0, r7
 8006038:	f008 f98e 	bl	800e358 <FreeRTOS_CLIGetParameter>
 800603c:	0004      	movs	r4, r0
 800603e:	4b26      	ldr	r3, [pc, #152]	; (80060d8 <addbuttonCommand+0xbc>)
 8006040:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006042:	9d03      	ldr	r5, [sp, #12]
 8006044:	002a      	movs	r2, r5
 8006046:	4925      	ldr	r1, [pc, #148]	; (80060dc <addbuttonCommand+0xc0>)
 8006048:	f00e f96e 	bl	8014328 <strncmp>
 800604c:	2800      	cmp	r0, #0
 800604e:	d016      	beq.n	800607e <addbuttonCommand+0x62>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006050:	002a      	movs	r2, r5
 8006052:	4923      	ldr	r1, [pc, #140]	; (80060e0 <addbuttonCommand+0xc4>)
 8006054:	0020      	movs	r0, r4
 8006056:	f00e f967 	bl	8014328 <strncmp>
 800605a:	2800      	cmp	r0, #0
 800605c:	d023      	beq.n	80060a6 <addbuttonCommand+0x8a>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 800605e:	002a      	movs	r2, r5
 8006060:	4920      	ldr	r1, [pc, #128]	; (80060e4 <addbuttonCommand+0xc8>)
 8006062:	0020      	movs	r0, r4
 8006064:	f00e f960 	bl	8014328 <strncmp>
 8006068:	2800      	cmp	r0, #0
 800606a:	d01e      	beq.n	80060aa <addbuttonCommand+0x8e>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 800606c:	002a      	movs	r2, r5
 800606e:	491e      	ldr	r1, [pc, #120]	; (80060e8 <addbuttonCommand+0xcc>)
 8006070:	0020      	movs	r0, r4
 8006072:	f00e f959 	bl	8014328 <strncmp>
 8006076:	2800      	cmp	r0, #0
 8006078:	d019      	beq.n	80060ae <addbuttonCommand+0x92>
	uint8_t port = 0, type = 0;
 800607a:	2500      	movs	r5, #0
 800607c:	e000      	b.n	8006080 <addbuttonCommand+0x64>
		type = MOMENTARY_NO;
 800607e:	2501      	movs	r5, #1
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006080:	aa02      	add	r2, sp, #8
 8006082:	2102      	movs	r1, #2
 8006084:	0038      	movs	r0, r7
 8006086:	f008 f967 	bl	800e358 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800608a:	2300      	movs	r3, #0
 800608c:	56c3      	ldrsb	r3, [r0, r3]
 800608e:	2b70      	cmp	r3, #112	; 0x70
 8006090:	d00f      	beq.n	80060b2 <addbuttonCommand+0x96>
	uint8_t port = 0, type = 0;
 8006092:	2400      	movs	r4, #0
	result = AddPortButton(type, port);
 8006094:	0021      	movs	r1, r4
 8006096:	0028      	movs	r0, r5
 8006098:	f001 fcdc 	bl	8007a54 <AddPortButton>
	if (result == BOS_OK) 
 800609c:	2800      	cmp	r0, #0
 800609e:	d00d      	beq.n	80060bc <addbuttonCommand+0xa0>
}
 80060a0:	2000      	movs	r0, #0
 80060a2:	b005      	add	sp, #20
 80060a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		type = MOMENTARY_NC;
 80060a6:	2502      	movs	r5, #2
 80060a8:	e7ea      	b.n	8006080 <addbuttonCommand+0x64>
		type = ONOFF_NO;
 80060aa:	2503      	movs	r5, #3
 80060ac:	e7e8      	b.n	8006080 <addbuttonCommand+0x64>
		type = ONOFF_NC;
 80060ae:	2504      	movs	r5, #4
 80060b0:	e7e6      	b.n	8006080 <addbuttonCommand+0x64>
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 80060b2:	3001      	adds	r0, #1
 80060b4:	f00d f91b 	bl	80132ee <atol>
 80060b8:	b2c4      	uxtb	r4, r0
 80060ba:	e7eb      	b.n	8006094 <addbuttonCommand+0x78>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <addbuttonCommand+0xbc>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	9b03      	ldr	r3, [sp, #12]
 80060c2:	18d3      	adds	r3, r2, r3
 80060c4:	2100      	movs	r1, #0
 80060c6:	7019      	strb	r1, [r3, #0]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 80060c8:	9400      	str	r4, [sp, #0]
 80060ca:	0023      	movs	r3, r4
 80060cc:	4907      	ldr	r1, [pc, #28]	; (80060ec <addbuttonCommand+0xd0>)
 80060ce:	0030      	movs	r0, r6
 80060d0:	f00e f8e6 	bl	80142a0 <siprintf>
 80060d4:	e7e4      	b.n	80060a0 <addbuttonCommand+0x84>
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	20000aa0 	.word	0x20000aa0
 80060dc:	08017cc4 	.word	0x08017cc4
 80060e0:	08017cd4 	.word	0x08017cd4
 80060e4:	08017ce4 	.word	0x08017ce4
 80060e8:	08017cf0 	.word	0x08017cf0
 80060ec:	08017cfc 	.word	0x08017cfc

080060f0 <scastCommand>:
{
 80060f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060f2:	46de      	mov	lr, fp
 80060f4:	4657      	mov	r7, sl
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b09b      	sub	sp, #108	; 0x6c
 80060fa:	0005      	movs	r5, r0
 80060fc:	9009      	str	r0, [sp, #36]	; 0x24
 80060fe:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 8006100:	2300      	movs	r3, #0
 8006102:	9319      	str	r3, [sp, #100]	; 0x64
 8006104:	9318      	str	r3, [sp, #96]	; 0x60
 8006106:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8006108:	9316      	str	r3, [sp, #88]	; 0x58
 800610a:	9315      	str	r3, [sp, #84]	; 0x54
 800610c:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 = 0;
 800610e:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 8006110:	220a      	movs	r2, #10
 8006112:	2100      	movs	r1, #0
 8006114:	a810      	add	r0, sp, #64	; 0x40
 8006116:	f00d f965 	bl	80133e4 <memset>
 800611a:	220a      	movs	r2, #10
 800611c:	2100      	movs	r1, #0
 800611e:	a80d      	add	r0, sp, #52	; 0x34
 8006120:	f00d f960 	bl	80133e4 <memset>
 8006124:	220a      	movs	r2, #10
 8006126:	2100      	movs	r1, #0
 8006128:	a80a      	add	r0, sp, #40	; 0x28
 800612a:	f00d f95b 	bl	80133e4 <memset>
	configASSERT( pcWriteBuffer );
 800612e:	2d00      	cmp	r5, #0
 8006130:	d101      	bne.n	8006136 <scastCommand+0x46>
 8006132:	b672      	cpsid	i
 8006134:	e7fe      	b.n	8006134 <scastCommand+0x44>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006136:	aa19      	add	r2, sp, #100	; 0x64
 8006138:	2101      	movs	r1, #1
 800613a:	0020      	movs	r0, r4
 800613c:	f008 f90c 	bl	800e358 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8006140:	2300      	movs	r3, #0
 8006142:	56c3      	ldrsb	r3, [r0, r3]
 8006144:	2b50      	cmp	r3, #80	; 0x50
 8006146:	d047      	beq.n	80061d8 <scastCommand+0xe8>
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	9307      	str	r3, [sp, #28]
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800614c:	aa18      	add	r2, sp, #96	; 0x60
 800614e:	2102      	movs	r1, #2
 8006150:	0020      	movs	r0, r4
 8006152:	f008 f901 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8006156:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 8006158:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800615a:	a810      	add	r0, sp, #64	; 0x40
 800615c:	f00e f8f5 	bl	801434a <strncpy>
	srcM = (uint8_t) GetID(par1);
 8006160:	a810      	add	r0, sp, #64	; 0x40
 8006162:	f7fd fb69 	bl	8003838 <GetID>
 8006166:	b2c3      	uxtb	r3, r0
 8006168:	469a      	mov	sl, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800616a:	aa17      	add	r2, sp, #92	; 0x5c
 800616c:	2103      	movs	r1, #3
 800616e:	0020      	movs	r0, r4
 8006170:	f008 f8f2 	bl	800e358 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8006174:	2300      	movs	r3, #0
 8006176:	56c3      	ldrsb	r3, [r0, r3]
 8006178:	2b70      	cmp	r3, #112	; 0x70
 800617a:	d033      	beq.n	80061e4 <scastCommand+0xf4>
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 800617c:	2700      	movs	r7, #0
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800617e:	aa16      	add	r2, sp, #88	; 0x58
 8006180:	2104      	movs	r1, #4
 8006182:	0020      	movs	r0, r4
 8006184:	f008 f8e8 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8006188:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 800618a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800618c:	a80d      	add	r0, sp, #52	; 0x34
 800618e:	f00e f8dc 	bl	801434a <strncpy>
	dstM = (uint8_t) GetID(par2);
 8006192:	a80d      	add	r0, sp, #52	; 0x34
 8006194:	f7fd fb50 	bl	8003838 <GetID>
 8006198:	b2c3      	uxtb	r3, r0
 800619a:	469b      	mov	fp, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 800619c:	aa15      	add	r2, sp, #84	; 0x54
 800619e:	2105      	movs	r1, #5
 80061a0:	0020      	movs	r0, r4
 80061a2:	f008 f8d9 	bl	800e358 <FreeRTOS_CLIGetParameter>
 80061a6:	0005      	movs	r5, r0
 80061a8:	9008      	str	r0, [sp, #32]
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 80061aa:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80061ac:	0032      	movs	r2, r6
 80061ae:	492d      	ldr	r1, [pc, #180]	; (8006264 <scastCommand+0x174>)
 80061b0:	f00e f8ba 	bl	8014328 <strncmp>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d01a      	beq.n	80061ee <scastCommand+0xfe>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 80061b8:	0032      	movs	r2, r6
 80061ba:	492b      	ldr	r1, [pc, #172]	; (8006268 <scastCommand+0x178>)
 80061bc:	0028      	movs	r0, r5
 80061be:	f00e f8b3 	bl	8014328 <strncmp>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d03c      	beq.n	8006240 <scastCommand+0x150>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 80061c6:	0032      	movs	r2, r6
 80061c8:	4928      	ldr	r1, [pc, #160]	; (800626c <scastCommand+0x17c>)
 80061ca:	0028      	movs	r0, r5
 80061cc:	f00e f8ac 	bl	8014328 <strncmp>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d037      	beq.n	8006244 <scastCommand+0x154>
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 80061d4:	2500      	movs	r5, #0
 80061d6:	e00b      	b.n	80061f0 <scastCommand+0x100>
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80061d8:	3001      	adds	r0, #1
 80061da:	f00d f888 	bl	80132ee <atol>
 80061de:	b2c3      	uxtb	r3, r0
 80061e0:	9307      	str	r3, [sp, #28]
 80061e2:	e7b3      	b.n	800614c <scastCommand+0x5c>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 80061e4:	3001      	adds	r0, #1
 80061e6:	f00d f882 	bl	80132ee <atol>
 80061ea:	b2c7      	uxtb	r7, r0
 80061ec:	e7c7      	b.n	800617e <scastCommand+0x8e>
		direction = FORWARD;
 80061ee:	2500      	movs	r5, #0
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 80061f0:	0032      	movs	r2, r6
 80061f2:	9908      	ldr	r1, [sp, #32]
 80061f4:	a80a      	add	r0, sp, #40	; 0x28
 80061f6:	f00e f8a8 	bl	801434a <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 80061fa:	aa14      	add	r2, sp, #80	; 0x50
 80061fc:	2106      	movs	r1, #6
 80061fe:	0020      	movs	r0, r4
 8006200:	f008 f8aa 	bl	800e358 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8006204:	f00d f873 	bl	80132ee <atol>
 8006208:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 800620a:	aa13      	add	r2, sp, #76	; 0x4c
 800620c:	2107      	movs	r1, #7
 800620e:	0020      	movs	r0, r4
 8006210:	f008 f8a2 	bl	800e358 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8006214:	f00d f86b 	bl	80132ee <atol>
 8006218:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 800621a:	2300      	movs	r3, #0
 800621c:	9303      	str	r3, [sp, #12]
 800621e:	9002      	str	r0, [sp, #8]
 8006220:	9601      	str	r6, [sp, #4]
 8006222:	9500      	str	r5, [sp, #0]
 8006224:	465b      	mov	r3, fp
 8006226:	003a      	movs	r2, r7
 8006228:	4651      	mov	r1, sl
 800622a:	9807      	ldr	r0, [sp, #28]
 800622c:	f002 fa04 	bl	8008638 <StartScastDMAStream>
	if (result == BOS_OK) 
 8006230:	2800      	cmp	r0, #0
 8006232:	d009      	beq.n	8006248 <scastCommand+0x158>
}
 8006234:	2000      	movs	r0, #0
 8006236:	b01b      	add	sp, #108	; 0x6c
 8006238:	bc0c      	pop	{r2, r3}
 800623a:	4692      	mov	sl, r2
 800623c:	469b      	mov	fp, r3
 800623e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		direction = BACKWARD;
 8006240:	2501      	movs	r5, #1
 8006242:	e7d5      	b.n	80061f0 <scastCommand+0x100>
		direction = BIDIRECTIONAL;
 8006244:	2502      	movs	r5, #2
 8006246:	e7d3      	b.n	80061f0 <scastCommand+0x100>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 8006248:	9404      	str	r4, [sp, #16]
 800624a:	9603      	str	r6, [sp, #12]
 800624c:	ab0d      	add	r3, sp, #52	; 0x34
 800624e:	9302      	str	r3, [sp, #8]
 8006250:	9701      	str	r7, [sp, #4]
 8006252:	ab10      	add	r3, sp, #64	; 0x40
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	9b07      	ldr	r3, [sp, #28]
 8006258:	aa0a      	add	r2, sp, #40	; 0x28
 800625a:	4905      	ldr	r1, [pc, #20]	; (8006270 <scastCommand+0x180>)
 800625c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800625e:	f00e f81f 	bl	80142a0 <siprintf>
 8006262:	e7e7      	b.n	8006234 <scastCommand+0x144>
 8006264:	08018468 	.word	0x08018468
 8006268:	08018470 	.word	0x08018470
 800626c:	0801847c 	.word	0x0801847c
 8006270:	0801848c 	.word	0x0801848c

08006274 <infoCommand>:
{
 8006274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006276:	b083      	sub	sp, #12
 8006278:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800627a:	d038      	beq.n	80062ee <infoCommand+0x7a>
	if (N > 1)
 800627c:	4b27      	ldr	r3, [pc, #156]	; (800631c <infoCommand+0xa8>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d936      	bls.n	80062f2 <infoCommand+0x7e>
		result = ReadPortsDir();
 8006284:	f7fd fc1e 	bl	8003ac4 <ReadPortsDir>
 8006288:	0005      	movs	r5, r0
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 800628a:	4b24      	ldr	r3, [pc, #144]	; (800631c <infoCommand+0xa8>)
 800628c:	781a      	ldrb	r2, [r3, #0]
 800628e:	4924      	ldr	r1, [pc, #144]	; (8006320 <infoCommand+0xac>)
 8006290:	0020      	movs	r0, r4
 8006292:	f00e f805 	bl	80142a0 <siprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006296:	0020      	movs	r0, r4
 8006298:	f7f9 ff3e 	bl	8000118 <strlen>
 800629c:	b282      	uxth	r2, r0
 800629e:	4e21      	ldr	r6, [pc, #132]	; (8006324 <infoCommand+0xb0>)
 80062a0:	7830      	ldrb	r0, [r6, #0]
 80062a2:	2701      	movs	r7, #1
 80062a4:	427f      	negs	r7, r7
 80062a6:	9700      	str	r7, [sp, #0]
 80062a8:	2332      	movs	r3, #50	; 0x32
 80062aa:	0021      	movs	r1, r4
 80062ac:	f007 fdfa 	bl	800dea4 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 80062b0:	2213      	movs	r2, #19
 80062b2:	491d      	ldr	r1, [pc, #116]	; (8006328 <infoCommand+0xb4>)
 80062b4:	0020      	movs	r0, r4
 80062b6:	f00d f88c 	bl	80133d2 <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80062ba:	0020      	movs	r0, r4
 80062bc:	f7f9 ff2c 	bl	8000118 <strlen>
 80062c0:	b282      	uxth	r2, r0
 80062c2:	7830      	ldrb	r0, [r6, #0]
 80062c4:	9700      	str	r7, [sp, #0]
 80062c6:	2332      	movs	r3, #50	; 0x32
 80062c8:	0021      	movs	r1, r4
 80062ca:	f007 fdeb 	bl	800dea4 <writePxMutex>
	DisplayTopology(PcPort);
 80062ce:	7830      	ldrb	r0, [r6, #0]
 80062d0:	f7fd f812 	bl	80032f8 <DisplayTopology>
	DisplayPortsDir(PcPort);
 80062d4:	7830      	ldrb	r0, [r6, #0]
 80062d6:	f7fd f8d9 	bl	800348c <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 80062da:	2d02      	cmp	r5, #2
 80062dc:	d00b      	beq.n	80062f6 <infoCommand+0x82>
	sprintf( ( char * ) pcWriteBuffer, " ");
 80062de:	2202      	movs	r2, #2
 80062e0:	4912      	ldr	r1, [pc, #72]	; (800632c <infoCommand+0xb8>)
 80062e2:	0020      	movs	r0, r4
 80062e4:	f00d f875 	bl	80133d2 <memcpy>
}
 80062e8:	2000      	movs	r0, #0
 80062ea:	b003      	add	sp, #12
 80062ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80062ee:	b672      	cpsid	i
 80062f0:	e7fe      	b.n	80062f0 <infoCommand+0x7c>
	BOS_Status result = BOS_OK; 
 80062f2:	2500      	movs	r5, #0
 80062f4:	e7c9      	b.n	800628a <infoCommand+0x16>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 80062f6:	2244      	movs	r2, #68	; 0x44
 80062f8:	490d      	ldr	r1, [pc, #52]	; (8006330 <infoCommand+0xbc>)
 80062fa:	0020      	movs	r0, r4
 80062fc:	f00d f869 	bl	80133d2 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 8006300:	0020      	movs	r0, r4
 8006302:	f7f9 ff09 	bl	8000118 <strlen>
 8006306:	b282      	uxth	r2, r0
 8006308:	4b06      	ldr	r3, [pc, #24]	; (8006324 <infoCommand+0xb0>)
 800630a:	7818      	ldrb	r0, [r3, #0]
 800630c:	003b      	movs	r3, r7
 800630e:	9700      	str	r7, [sp, #0]
 8006310:	3333      	adds	r3, #51	; 0x33
 8006312:	0021      	movs	r1, r4
 8006314:	f007 fdc6 	bl	800dea4 <writePxMutex>
 8006318:	e7e1      	b.n	80062de <infoCommand+0x6a>
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	2000001c 	.word	0x2000001c
 8006320:	08018208 	.word	0x08018208
 8006324:	200002cf 	.word	0x200002cf
 8006328:	08018224 	.word	0x08018224
 800632c:	080172c4 	.word	0x080172c4
 8006330:	08018238 	.word	0x08018238

08006334 <statusCommand>:
{
 8006334:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 8006336:	2800      	cmp	r0, #0
 8006338:	d101      	bne.n	800633e <statusCommand+0xa>
 800633a:	b672      	cpsid	i
 800633c:	e7fe      	b.n	800633c <statusCommand+0x8>
	DisplayModuleStatus(0);
 800633e:	2000      	movs	r0, #0
 8006340:	f7fd f90e 	bl	8003560 <DisplayModuleStatus>
}
 8006344:	2000      	movs	r0, #0
 8006346:	bd10      	pop	{r4, pc}

08006348 <groupCommand>:
{
 8006348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634a:	46ce      	mov	lr, r9
 800634c:	b500      	push	{lr}
 800634e:	b090      	sub	sp, #64	; 0x40
 8006350:	0004      	movs	r4, r0
 8006352:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 8006354:	2227      	movs	r2, #39	; 0x27
 8006356:	2100      	movs	r1, #0
 8006358:	a806      	add	r0, sp, #24
 800635a:	f00d f843 	bl	80133e4 <memset>
 800635e:	220a      	movs	r2, #10
 8006360:	2100      	movs	r1, #0
 8006362:	a803      	add	r0, sp, #12
 8006364:	f00d f83e 	bl	80133e4 <memset>
	configASSERT( pcWriteBuffer );
 8006368:	2c00      	cmp	r4, #0
 800636a:	d101      	bne.n	8006370 <groupCommand+0x28>
 800636c:	b672      	cpsid	i
 800636e:	e7fe      	b.n	800636e <groupCommand+0x26>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006370:	4d59      	ldr	r5, [pc, #356]	; (80064d8 <groupCommand+0x190>)
 8006372:	002a      	movs	r2, r5
 8006374:	2101      	movs	r1, #1
 8006376:	9801      	ldr	r0, [sp, #4]
 8006378:	f007 ffee 	bl	800e358 <FreeRTOS_CLIGetParameter>
 800637c:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 800637e:	682a      	ldr	r2, [r5, #0]
 8006380:	a803      	add	r0, sp, #12
 8006382:	f00d ffe2 	bl	801434a <strncpy>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8006386:	2500      	movs	r5, #0
 8006388:	e00b      	b.n	80063a2 <groupCommand+0x5a>
		if (!strcmp(alias, groupAlias[i]))	
 800638a:	00ab      	lsls	r3, r5, #2
 800638c:	195b      	adds	r3, r3, r5
 800638e:	0059      	lsls	r1, r3, #1
 8006390:	4b52      	ldr	r3, [pc, #328]	; (80064dc <groupCommand+0x194>)
 8006392:	18c9      	adds	r1, r1, r3
 8006394:	a803      	add	r0, sp, #12
 8006396:	f7f9 feb5 	bl	8000104 <strcmp>
 800639a:	2800      	cmp	r0, #0
 800639c:	d017      	beq.n	80063ce <groupCommand+0x86>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 800639e:	3501      	adds	r5, #1
 80063a0:	b2ed      	uxtb	r5, r5
 80063a2:	2d09      	cmp	r5, #9
 80063a4:	d9f1      	bls.n	800638a <groupCommand+0x42>
	type = 1;
 80063a6:	2601      	movs	r6, #1
	count = 2;
 80063a8:	4b4d      	ldr	r3, [pc, #308]	; (80064e0 <groupCommand+0x198>)
 80063aa:	2202      	movs	r2, #2
 80063ac:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 80063ae:	3208      	adds	r2, #8
 80063b0:	494c      	ldr	r1, [pc, #304]	; (80064e4 <groupCommand+0x19c>)
 80063b2:	0020      	movs	r0, r4
 80063b4:	f00d f80d 	bl	80133d2 <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 80063b8:	4a4b      	ldr	r2, [pc, #300]	; (80064e8 <groupCommand+0x1a0>)
 80063ba:	2102      	movs	r1, #2
 80063bc:	9801      	ldr	r0, [sp, #4]
 80063be:	f007 ffcb 	bl	800e358 <FreeRTOS_CLIGetParameter>
 80063c2:	4b4a      	ldr	r3, [pc, #296]	; (80064ec <groupCommand+0x1a4>)
 80063c4:	6018      	str	r0, [r3, #0]
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 80063c6:	2300      	movs	r3, #0
 80063c8:	4699      	mov	r9, r3
	BOS_Status result = BOS_OK; 
 80063ca:	2500      	movs	r5, #0
	while (pcParameterString != NULL)
 80063cc:	e00f      	b.n	80063ee <groupCommand+0xa6>
			type = 0; break;
 80063ce:	2600      	movs	r6, #0
 80063d0:	e7ea      	b.n	80063a8 <groupCommand+0x60>
		strcat( ( char * ) pcWriteBuffer, module);
 80063d2:	a906      	add	r1, sp, #24
 80063d4:	0020      	movs	r0, r4
 80063d6:	f00d ff83 	bl	80142e0 <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 80063da:	1c79      	adds	r1, r7, #1
 80063dc:	b249      	sxtb	r1, r1
 80063de:	4b40      	ldr	r3, [pc, #256]	; (80064e0 <groupCommand+0x198>)
 80063e0:	7019      	strb	r1, [r3, #0]
 80063e2:	4a41      	ldr	r2, [pc, #260]	; (80064e8 <groupCommand+0x1a0>)
 80063e4:	9801      	ldr	r0, [sp, #4]
 80063e6:	f007 ffb7 	bl	800e358 <FreeRTOS_CLIGetParameter>
 80063ea:	4b40      	ldr	r3, [pc, #256]	; (80064ec <groupCommand+0x1a4>)
 80063ec:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 80063ee:	4b3f      	ldr	r3, [pc, #252]	; (80064ec <groupCommand+0x1a4>)
 80063f0:	6819      	ldr	r1, [r3, #0]
 80063f2:	2900      	cmp	r1, #0
 80063f4:	d024      	beq.n	8006440 <groupCommand+0xf8>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 80063f6:	4b3c      	ldr	r3, [pc, #240]	; (80064e8 <groupCommand+0x1a0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4699      	mov	r9, r3
 80063fc:	af06      	add	r7, sp, #24
 80063fe:	001a      	movs	r2, r3
 8006400:	0038      	movs	r0, r7
 8006402:	f00d ffa2 	bl	801434a <strncpy>
 8006406:	2300      	movs	r3, #0
 8006408:	464a      	mov	r2, r9
 800640a:	54bb      	strb	r3, [r7, r2]
		modID = GetID(module);
 800640c:	0038      	movs	r0, r7
 800640e:	f7fd fa13 	bl	8003838 <GetID>
 8006412:	4681      	mov	r9, r0
		if (modID < 0)	break;
 8006414:	2800      	cmp	r0, #0
 8006416:	db13      	blt.n	8006440 <groupCommand+0xf8>
		result = AddModuleToGroup(modID, alias);
 8006418:	b2c0      	uxtb	r0, r0
 800641a:	a903      	add	r1, sp, #12
 800641c:	f7fd fad4 	bl	80039c8 <AddModuleToGroup>
 8006420:	1e05      	subs	r5, r0, #0
		if (result != BOS_OK)	break;
 8006422:	d10d      	bne.n	8006440 <groupCommand+0xf8>
		if (count > 2)
 8006424:	4b2e      	ldr	r3, [pc, #184]	; (80064e0 <groupCommand+0x198>)
 8006426:	2700      	movs	r7, #0
 8006428:	57df      	ldrsb	r7, [r3, r7]
 800642a:	2f02      	cmp	r7, #2
 800642c:	ddd1      	ble.n	80063d2 <groupCommand+0x8a>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 800642e:	0020      	movs	r0, r4
 8006430:	f7f9 fe72 	bl	8000118 <strlen>
 8006434:	1820      	adds	r0, r4, r0
 8006436:	2203      	movs	r2, #3
 8006438:	492d      	ldr	r1, [pc, #180]	; (80064f0 <groupCommand+0x1a8>)
 800643a:	f00c ffca 	bl	80133d2 <memcpy>
 800643e:	e7c8      	b.n	80063d2 <groupCommand+0x8a>
	if (modID < 0) 
 8006440:	464b      	mov	r3, r9
 8006442:	2b00      	cmp	r3, #0
 8006444:	db12      	blt.n	800646c <groupCommand+0x124>
	else if (count == 2)
 8006446:	4b26      	ldr	r3, [pc, #152]	; (80064e0 <groupCommand+0x198>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	b25b      	sxtb	r3, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d017      	beq.n	8006480 <groupCommand+0x138>
	else if (result == BOS_OK && type) {
 8006450:	2d00      	cmp	r5, #0
 8006452:	d11b      	bne.n	800648c <groupCommand+0x144>
 8006454:	2e00      	cmp	r6, #0
 8006456:	d019      	beq.n	800648c <groupCommand+0x144>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8006458:	aa03      	add	r2, sp, #12
 800645a:	4926      	ldr	r1, [pc, #152]	; (80064f4 <groupCommand+0x1ac>)
 800645c:	a806      	add	r0, sp, #24
 800645e:	f00d ff1f 	bl	80142a0 <siprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8006462:	a906      	add	r1, sp, #24
 8006464:	0020      	movs	r0, r4
 8006466:	f00d ff3b 	bl	80142e0 <strcat>
 800646a:	e004      	b.n	8006476 <groupCommand+0x12e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 800646c:	aa06      	add	r2, sp, #24
 800646e:	4922      	ldr	r1, [pc, #136]	; (80064f8 <groupCommand+0x1b0>)
 8006470:	0020      	movs	r0, r4
 8006472:	f00d ff15 	bl	80142a0 <siprintf>
}
 8006476:	2000      	movs	r0, #0
 8006478:	b010      	add	sp, #64	; 0x40
 800647a:	bc04      	pop	{r2}
 800647c:	4691      	mov	r9, r2
 800647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 8006480:	aa03      	add	r2, sp, #12
 8006482:	491e      	ldr	r1, [pc, #120]	; (80064fc <groupCommand+0x1b4>)
 8006484:	0020      	movs	r0, r4
 8006486:	f00d ff0b 	bl	80142a0 <siprintf>
 800648a:	e7f4      	b.n	8006476 <groupCommand+0x12e>
	} else if (result == BOS_OK && !type) {
 800648c:	2d00      	cmp	r5, #0
 800648e:	d10b      	bne.n	80064a8 <groupCommand+0x160>
 8006490:	2e00      	cmp	r6, #0
 8006492:	d109      	bne.n	80064a8 <groupCommand+0x160>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 8006494:	aa03      	add	r2, sp, #12
 8006496:	491a      	ldr	r1, [pc, #104]	; (8006500 <groupCommand+0x1b8>)
 8006498:	a806      	add	r0, sp, #24
 800649a:	f00d ff01 	bl	80142a0 <siprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800649e:	a906      	add	r1, sp, #24
 80064a0:	0020      	movs	r0, r4
 80064a2:	f00d ff1d 	bl	80142e0 <strcat>
 80064a6:	e7e6      	b.n	8006476 <groupCommand+0x12e>
	} else if (result == BOS_ERR_Keyword)
 80064a8:	2d06      	cmp	r5, #6
 80064aa:	d007      	beq.n	80064bc <groupCommand+0x174>
	else if (result == BOS_ERR_ExistingAlias)
 80064ac:	2d07      	cmp	r5, #7
 80064ae:	d10b      	bne.n	80064c8 <groupCommand+0x180>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 80064b0:	aa03      	add	r2, sp, #12
 80064b2:	4914      	ldr	r1, [pc, #80]	; (8006504 <groupCommand+0x1bc>)
 80064b4:	0020      	movs	r0, r4
 80064b6:	f00d fef3 	bl	80142a0 <siprintf>
 80064ba:	e7dc      	b.n	8006476 <groupCommand+0x12e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 80064bc:	aa03      	add	r2, sp, #12
 80064be:	4912      	ldr	r1, [pc, #72]	; (8006508 <groupCommand+0x1c0>)
 80064c0:	0020      	movs	r0, r4
 80064c2:	f00d feed 	bl	80142a0 <siprintf>
 80064c6:	e7d6      	b.n	8006476 <groupCommand+0x12e>
	else if (result == BOS_ERR_ExistingCmd)
 80064c8:	2d08      	cmp	r5, #8
 80064ca:	d1d4      	bne.n	8006476 <groupCommand+0x12e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 80064cc:	aa03      	add	r2, sp, #12
 80064ce:	490f      	ldr	r1, [pc, #60]	; (800650c <groupCommand+0x1c4>)
 80064d0:	0020      	movs	r0, r4
 80064d2:	f00d fee5 	bl	80142a0 <siprintf>
 80064d6:	e7ce      	b.n	8006476 <groupCommand+0x12e>
 80064d8:	20000ad4 	.word	0x20000ad4
 80064dc:	2000067c 	.word	0x2000067c
 80064e0:	20000a9a 	.word	0x20000a9a
 80064e4:	08018028 	.word	0x08018028
 80064e8:	20000ac8 	.word	0x20000ac8
 80064ec:	20000a9c 	.word	0x20000a9c
 80064f0:	08018034 	.word	0x08018034
 80064f4:	08018088 	.word	0x08018088
 80064f8:	08018038 	.word	0x08018038
 80064fc:	0801805c 	.word	0x0801805c
 8006500:	080180a4 	.word	0x080180a4
 8006504:	08018104 	.word	0x08018104
 8006508:	080180c4 	.word	0x080180c4
 800650c:	08018138 	.word	0x08018138

08006510 <nameCommand>:
{
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	0004      	movs	r4, r0
 8006514:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 8006516:	2c00      	cmp	r4, #0
 8006518:	d101      	bne.n	800651e <nameCommand+0xe>
 800651a:	b672      	cpsid	i
 800651c:	e7fe      	b.n	800651c <nameCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800651e:	4d1c      	ldr	r5, [pc, #112]	; (8006590 <nameCommand+0x80>)
 8006520:	002a      	movs	r2, r5
 8006522:	2101      	movs	r1, #1
 8006524:	f007 ff18 	bl	800e358 <FreeRTOS_CLIGetParameter>
 8006528:	0001      	movs	r1, r0
 800652a:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <nameCommand+0x84>)
 800652c:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 800652e:	682b      	ldr	r3, [r5, #0]
 8006530:	2b09      	cmp	r3, #9
 8006532:	dd01      	ble.n	8006538 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 8006534:	2300      	movs	r3, #0
 8006536:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 8006538:	4b17      	ldr	r3, [pc, #92]	; (8006598 <nameCommand+0x88>)
 800653a:	7818      	ldrb	r0, [r3, #0]
 800653c:	f7fd f9de 	bl	80038fc <NameModule>
	if (result == BOS_OK)
 8006540:	2800      	cmp	r0, #0
 8006542:	d007      	beq.n	8006554 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 8006544:	2806      	cmp	r0, #6
 8006546:	d00e      	beq.n	8006566 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8006548:	2807      	cmp	r0, #7
 800654a:	d013      	beq.n	8006574 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 800654c:	2808      	cmp	r0, #8
 800654e:	d018      	beq.n	8006582 <nameCommand+0x72>
}
 8006550:	2000      	movs	r0, #0
 8006552:	bd70      	pop	{r4, r5, r6, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 8006554:	4b10      	ldr	r3, [pc, #64]	; (8006598 <nameCommand+0x88>)
 8006556:	781a      	ldrb	r2, [r3, #0]
 8006558:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <nameCommand+0x84>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	490f      	ldr	r1, [pc, #60]	; (800659c <nameCommand+0x8c>)
 800655e:	0020      	movs	r0, r4
 8006560:	f00d fe9e 	bl	80142a0 <siprintf>
 8006564:	e7f4      	b.n	8006550 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <nameCommand+0x84>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	490d      	ldr	r1, [pc, #52]	; (80065a0 <nameCommand+0x90>)
 800656c:	0020      	movs	r0, r4
 800656e:	f00d fe97 	bl	80142a0 <siprintf>
 8006572:	e7ed      	b.n	8006550 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 8006574:	4b07      	ldr	r3, [pc, #28]	; (8006594 <nameCommand+0x84>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	490a      	ldr	r1, [pc, #40]	; (80065a4 <nameCommand+0x94>)
 800657a:	0020      	movs	r0, r4
 800657c:	f00d fe90 	bl	80142a0 <siprintf>
 8006580:	e7e6      	b.n	8006550 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 8006582:	4b04      	ldr	r3, [pc, #16]	; (8006594 <nameCommand+0x84>)
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4908      	ldr	r1, [pc, #32]	; (80065a8 <nameCommand+0x98>)
 8006588:	0020      	movs	r0, r4
 800658a:	f00d fe89 	bl	80142a0 <siprintf>
 800658e:	e7df      	b.n	8006550 <nameCommand+0x40>
 8006590:	20000ad0 	.word	0x20000ad0
 8006594:	20000aac 	.word	0x20000aac
 8006598:	20000896 	.word	0x20000896
 800659c:	080182a0 	.word	0x080182a0
 80065a0:	080180c4 	.word	0x080180c4
 80065a4:	08018104 	.word	0x08018104
 80065a8:	08018138 	.word	0x08018138

080065ac <bootloaderUpdateCommand>:
{
 80065ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ae:	b085      	sub	sp, #20
 80065b0:	1e04      	subs	r4, r0, #0
 80065b2:	9203      	str	r2, [sp, #12]
	configASSERT( pcWriteBuffer );
 80065b4:	d101      	bne.n	80065ba <bootloaderUpdateCommand+0xe>
 80065b6:	b672      	cpsid	i
 80065b8:	e7fe      	b.n	80065b8 <bootloaderUpdateCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80065ba:	4a4b      	ldr	r2, [pc, #300]	; (80066e8 <bootloaderUpdateCommand+0x13c>)
 80065bc:	2101      	movs	r1, #1
 80065be:	9803      	ldr	r0, [sp, #12]
 80065c0:	f007 feca 	bl	800e358 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d040      	beq.n	800664a <bootloaderUpdateCommand+0x9e>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 80065c8:	4b47      	ldr	r3, [pc, #284]	; (80066e8 <bootloaderUpdateCommand+0x13c>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4947      	ldr	r1, [pc, #284]	; (80066ec <bootloaderUpdateCommand+0x140>)
 80065ce:	f00d feab 	bl	8014328 <strncmp>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d000      	beq.n	80065d8 <bootloaderUpdateCommand+0x2c>
 80065d6:	e080      	b.n	80066da <bootloaderUpdateCommand+0x12e>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80065d8:	4a45      	ldr	r2, [pc, #276]	; (80066f0 <bootloaderUpdateCommand+0x144>)
 80065da:	2102      	movs	r1, #2
 80065dc:	9803      	ldr	r0, [sp, #12]
 80065de:	f007 febb 	bl	800e358 <FreeRTOS_CLIGetParameter>
 80065e2:	4f44      	ldr	r7, [pc, #272]	; (80066f4 <bootloaderUpdateCommand+0x148>)
 80065e4:	6038      	str	r0, [r7, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80065e6:	4a44      	ldr	r2, [pc, #272]	; (80066f8 <bootloaderUpdateCommand+0x14c>)
 80065e8:	2103      	movs	r1, #3
 80065ea:	9803      	ldr	r0, [sp, #12]
 80065ec:	f007 feb4 	bl	800e358 <FreeRTOS_CLIGetParameter>
 80065f0:	4b42      	ldr	r3, [pc, #264]	; (80066fc <bootloaderUpdateCommand+0x150>)
 80065f2:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 80065f4:	6838      	ldr	r0, [r7, #0]
 80065f6:	2300      	movs	r3, #0
 80065f8:	56c3      	ldrsb	r3, [r0, r3]
 80065fa:	2b23      	cmp	r3, #35	; 0x23
 80065fc:	d04f      	beq.n	800669e <bootloaderUpdateCommand+0xf2>
				result = BOS_ERR_WrongValue;				
 80065fe:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString3[0] == 'p') {
 8006600:	4b3e      	ldr	r3, [pc, #248]	; (80066fc <bootloaderUpdateCommand+0x150>)
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	2300      	movs	r3, #0
 8006606:	56c3      	ldrsb	r3, [r0, r3]
 8006608:	2b70      	cmp	r3, #112	; 0x70
 800660a:	d04e      	beq.n	80066aa <bootloaderUpdateCommand+0xfe>
				result = BOS_ERR_WrongValue;		
 800660c:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 800660e:	4b3c      	ldr	r3, [pc, #240]	; (8006700 <bootloaderUpdateCommand+0x154>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	42b3      	cmp	r3, r6
 8006614:	d04e      	beq.n	80066b4 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;							
 8006616:	4b3b      	ldr	r3, [pc, #236]	; (8006704 <bootloaderUpdateCommand+0x158>)
 8006618:	2200      	movs	r2, #0
 800661a:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 800661c:	4b3a      	ldr	r3, [pc, #232]	; (8006708 <bootloaderUpdateCommand+0x15c>)
 800661e:	701d      	strb	r5, [r3, #0]
 8006620:	3201      	adds	r2, #1
 8006622:	211a      	movs	r1, #26
 8006624:	0030      	movs	r0, r6
 8006626:	f001 ffe1 	bl	80085ec <SendMessageToModule>
				osDelay(100);			
 800662a:	2064      	movs	r0, #100	; 0x64
 800662c:	f007 fd6e 	bl	800e10c <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 8006630:	4b36      	ldr	r3, [pc, #216]	; (800670c <bootloaderUpdateCommand+0x160>)
 8006632:	781a      	ldrb	r2, [r3, #0]
 8006634:	4b32      	ldr	r3, [pc, #200]	; (8006700 <bootloaderUpdateCommand+0x154>)
 8006636:	7818      	ldrb	r0, [r3, #0]
 8006638:	002b      	movs	r3, r5
 800663a:	0031      	movs	r1, r6
 800663c:	f7fc fde6 	bl	800320c <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8006640:	2f68      	cmp	r7, #104	; 0x68
 8006642:	d04a      	beq.n	80066da <bootloaderUpdateCommand+0x12e>
}
 8006644:	2000      	movs	r0, #0
 8006646:	b005      	add	sp, #20
 8006648:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 800664a:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <bootloaderUpdateCommand+0x154>)
 800664c:	781a      	ldrb	r2, [r3, #0]
 800664e:	4930      	ldr	r1, [pc, #192]	; (8006710 <bootloaderUpdateCommand+0x164>)
 8006650:	0020      	movs	r0, r4
 8006652:	f00d fe25 	bl	80142a0 <siprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8006656:	4b2f      	ldr	r3, [pc, #188]	; (8006714 <bootloaderUpdateCommand+0x168>)
 8006658:	6819      	ldr	r1, [r3, #0]
 800665a:	0020      	movs	r0, r4
 800665c:	f00d fe40 	bl	80142e0 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006660:	0020      	movs	r0, r4
 8006662:	f7f9 fd59 	bl	8000118 <strlen>
 8006666:	b282      	uxth	r2, r0
 8006668:	4b28      	ldr	r3, [pc, #160]	; (800670c <bootloaderUpdateCommand+0x160>)
 800666a:	7818      	ldrb	r0, [r3, #0]
 800666c:	2301      	movs	r3, #1
 800666e:	425b      	negs	r3, r3
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	3333      	adds	r3, #51	; 0x33
 8006674:	0021      	movs	r1, r4
 8006676:	f007 fc15 	bl	800dea4 <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 800667a:	4b27      	ldr	r3, [pc, #156]	; (8006718 <bootloaderUpdateCommand+0x16c>)
 800667c:	4a27      	ldr	r2, [pc, #156]	; (800671c <bootloaderUpdateCommand+0x170>)
 800667e:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 8006680:	4b27      	ldr	r3, [pc, #156]	; (8006720 <bootloaderUpdateCommand+0x174>)
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006686:	200a      	movs	r0, #10
 8006688:	f007 fd40 	bl	800e10c <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	4b24      	ldr	r3, [pc, #144]	; (8006724 <bootloaderUpdateCommand+0x178>)
 8006692:	4a25      	ldr	r2, [pc, #148]	; (8006728 <bootloaderUpdateCommand+0x17c>)
 8006694:	60da      	str	r2, [r3, #12]
 8006696:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	e7fd      	b.n	800669a <bootloaderUpdateCommand+0xee>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 800669e:	3001      	adds	r0, #1
 80066a0:	f00c fe25 	bl	80132ee <atol>
 80066a4:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 80066a6:	2700      	movs	r7, #0
 80066a8:	e7aa      	b.n	8006600 <bootloaderUpdateCommand+0x54>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 80066aa:	3001      	adds	r0, #1
 80066ac:	f00c fe1f 	bl	80132ee <atol>
 80066b0:	b2c5      	uxtb	r5, r0
 80066b2:	e7ac      	b.n	800660e <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 80066b4:	2100      	movs	r1, #0
 80066b6:	9100      	str	r1, [sp, #0]
 80066b8:	2319      	movs	r3, #25
 80066ba:	000a      	movs	r2, r1
 80066bc:	0028      	movs	r0, r5
 80066be:	f001 fd85 	bl	80081cc <SendMessageFromPort>
				osDelay(100);
 80066c2:	2064      	movs	r0, #100	; 0x64
 80066c4:	f007 fd22 	bl	800e10c <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 80066c8:	4b0d      	ldr	r3, [pc, #52]	; (8006700 <bootloaderUpdateCommand+0x154>)
 80066ca:	7818      	ldrb	r0, [r3, #0]
 80066cc:	4b0f      	ldr	r3, [pc, #60]	; (800670c <bootloaderUpdateCommand+0x160>)
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	002b      	movs	r3, r5
 80066d2:	0001      	movs	r1, r0
 80066d4:	f7fc fd9a 	bl	800320c <remoteBootloaderUpdate>
 80066d8:	e7b2      	b.n	8006640 <bootloaderUpdateCommand+0x94>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 80066da:	220f      	movs	r2, #15
 80066dc:	4913      	ldr	r1, [pc, #76]	; (800672c <bootloaderUpdateCommand+0x180>)
 80066de:	0020      	movs	r0, r4
 80066e0:	f00c fe77 	bl	80133d2 <memcpy>
 80066e4:	e7ae      	b.n	8006644 <bootloaderUpdateCommand+0x98>
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	20000acc 	.word	0x20000acc
 80066ec:	08017d60 	.word	0x08017d60
 80066f0:	20000ad8 	.word	0x20000ad8
 80066f4:	20000ab4 	.word	0x20000ab4
 80066f8:	20000adc 	.word	0x20000adc
 80066fc:	20000abc 	.word	0x20000abc
 8006700:	20000896 	.word	0x20000896
 8006704:	20006148 	.word	0x20006148
 8006708:	20000758 	.word	0x20000758
 800670c:	200002cf 	.word	0x200002cf
 8006710:	08017d40 	.word	0x08017d40
 8006714:	20000074 	.word	0x20000074
 8006718:	20007ff0 	.word	0x20007ff0
 800671c:	deadbeef 	.word	0xdeadbeef
 8006720:	20000714 	.word	0x20000714
 8006724:	e000ed00 	.word	0xe000ed00
 8006728:	05fa0004 	.word	0x05fa0004
 800672c:	08017e20 	.word	0x08017e20

08006730 <pingCommand>:
{
 8006730:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 8006732:	2800      	cmp	r0, #0
 8006734:	d01e      	beq.n	8006774 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 8006736:	4b15      	ldr	r3, [pc, #84]	; (800678c <pingCommand+0x5c>)
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	0093      	lsls	r3, r2, #2
 800673c:	189b      	adds	r3, r3, r2
 800673e:	0059      	lsls	r1, r3, #1
 8006740:	4b13      	ldr	r3, [pc, #76]	; (8006790 <pingCommand+0x60>)
 8006742:	5ccb      	ldrb	r3, [r1, r3]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d117      	bne.n	8006778 <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 8006748:	4912      	ldr	r1, [pc, #72]	; (8006794 <pingCommand+0x64>)
 800674a:	f00d fda9 	bl	80142a0 <siprintf>
	RTOS_IND_blink(200);	
 800674e:	2580      	movs	r5, #128	; 0x80
 8006750:	012d      	lsls	r5, r5, #4
 8006752:	2490      	movs	r4, #144	; 0x90
 8006754:	05e4      	lsls	r4, r4, #23
 8006756:	2201      	movs	r2, #1
 8006758:	0029      	movs	r1, r5
 800675a:	0020      	movs	r0, r4
 800675c:	f00b f889 	bl	8011872 <HAL_GPIO_WritePin>
 8006760:	20c8      	movs	r0, #200	; 0xc8
 8006762:	f007 fcd3 	bl	800e10c <osDelay>
 8006766:	2200      	movs	r2, #0
 8006768:	0029      	movs	r1, r5
 800676a:	0020      	movs	r0, r4
 800676c:	f00b f881 	bl	8011872 <HAL_GPIO_WritePin>
}
 8006770:	2000      	movs	r0, #0
 8006772:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8006774:	b672      	cpsid	i
 8006776:	e7fe      	b.n	8006776 <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8006778:	0091      	lsls	r1, r2, #2
 800677a:	1889      	adds	r1, r1, r2
 800677c:	004b      	lsls	r3, r1, #1
 800677e:	4904      	ldr	r1, [pc, #16]	; (8006790 <pingCommand+0x60>)
 8006780:	185b      	adds	r3, r3, r1
 8006782:	4905      	ldr	r1, [pc, #20]	; (8006798 <pingCommand+0x68>)
 8006784:	f00d fd8c 	bl	80142a0 <siprintf>
 8006788:	e7e1      	b.n	800674e <pingCommand+0x1e>
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	20000896 	.word	0x20000896
 8006790:	20000788 	.word	0x20000788
 8006794:	08018310 	.word	0x08018310
 8006798:	08018324 	.word	0x08018324

0800679c <prvRunTimeStatsCommand>:
{
 800679c:	b510      	push	{r4, lr}
 800679e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80067a0:	d101      	bne.n	80067a6 <prvRunTimeStatsCommand+0xa>
 80067a2:	b672      	cpsid	i
 80067a4:	e7fe      	b.n	80067a4 <prvRunTimeStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 80067a6:	2251      	movs	r2, #81	; 0x51
 80067a8:	4904      	ldr	r1, [pc, #16]	; (80067bc <prvRunTimeStatsCommand+0x20>)
 80067aa:	f00c fe12 	bl	80133d2 <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 80067ae:	0020      	movs	r0, r4
 80067b0:	3050      	adds	r0, #80	; 0x50
 80067b2:	f009 f83d 	bl	800f830 <vTaskGetRunTimeStats>
}
 80067b6:	2000      	movs	r0, #0
 80067b8:	bd10      	pop	{r4, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	08018350 	.word	0x08018350

080067c0 <prvTaskStatsCommand>:
{
 80067c0:	b510      	push	{r4, lr}
 80067c2:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80067c4:	d101      	bne.n	80067ca <prvTaskStatsCommand+0xa>
 80067c6:	b672      	cpsid	i
 80067c8:	e7fe      	b.n	80067c8 <prvTaskStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 80067ca:	225b      	movs	r2, #91	; 0x5b
 80067cc:	4904      	ldr	r1, [pc, #16]	; (80067e0 <prvTaskStatsCommand+0x20>)
 80067ce:	f00c fe00 	bl	80133d2 <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 80067d2:	0020      	movs	r0, r4
 80067d4:	305a      	adds	r0, #90	; 0x5a
 80067d6:	f008 ffd1 	bl	800f77c <vTaskList>
}
 80067da:	2000      	movs	r0, #0
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	080183b4 	.word	0x080183b4

080067e4 <resetCommand>:
	configASSERT( pcWriteBuffer );
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d101      	bne.n	80067ec <resetCommand+0x8>
 80067e8:	b672      	cpsid	i
 80067ea:	e7fe      	b.n	80067ea <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	4b03      	ldr	r3, [pc, #12]	; (8006800 <resetCommand+0x1c>)
 80067f2:	4a04      	ldr	r2, [pc, #16]	; (8006804 <resetCommand+0x20>)
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	e7fd      	b.n	80067fa <resetCommand+0x16>
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	e000ed00 	.word	0xe000ed00
 8006804:	05fa0004 	.word	0x05fa0004

08006808 <RegisterUserCLICommands>:
}
 8006808:	4770      	bx	lr
	...

0800680c <vRegisterCLICommands>:
{
 800680c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 800680e:	482f      	ldr	r0, [pc, #188]	; (80068cc <vRegisterCLICommands+0xc0>)
 8006810:	f007 fd1c 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 8006814:	482e      	ldr	r0, [pc, #184]	; (80068d0 <vRegisterCLICommands+0xc4>)
 8006816:	f007 fd19 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 800681a:	482e      	ldr	r0, [pc, #184]	; (80068d4 <vRegisterCLICommands+0xc8>)
 800681c:	f007 fd16 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 8006820:	482d      	ldr	r0, [pc, #180]	; (80068d8 <vRegisterCLICommands+0xcc>)
 8006822:	f007 fd13 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 8006826:	482d      	ldr	r0, [pc, #180]	; (80068dc <vRegisterCLICommands+0xd0>)
 8006828:	f007 fd10 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 800682c:	482c      	ldr	r0, [pc, #176]	; (80068e0 <vRegisterCLICommands+0xd4>)
 800682e:	f007 fd0d 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 8006832:	482c      	ldr	r0, [pc, #176]	; (80068e4 <vRegisterCLICommands+0xd8>)
 8006834:	f007 fd0a 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 8006838:	482b      	ldr	r0, [pc, #172]	; (80068e8 <vRegisterCLICommands+0xdc>)
 800683a:	f007 fd07 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 800683e:	482b      	ldr	r0, [pc, #172]	; (80068ec <vRegisterCLICommands+0xe0>)
 8006840:	f007 fd04 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 8006844:	482a      	ldr	r0, [pc, #168]	; (80068f0 <vRegisterCLICommands+0xe4>)
 8006846:	f007 fd01 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 800684a:	482a      	ldr	r0, [pc, #168]	; (80068f4 <vRegisterCLICommands+0xe8>)
 800684c:	f007 fcfe 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 8006850:	4829      	ldr	r0, [pc, #164]	; (80068f8 <vRegisterCLICommands+0xec>)
 8006852:	f007 fcfb 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 8006856:	4829      	ldr	r0, [pc, #164]	; (80068fc <vRegisterCLICommands+0xf0>)
 8006858:	f007 fcf8 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 800685c:	4828      	ldr	r0, [pc, #160]	; (8006900 <vRegisterCLICommands+0xf4>)
 800685e:	f007 fcf5 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 8006862:	4828      	ldr	r0, [pc, #160]	; (8006904 <vRegisterCLICommands+0xf8>)
 8006864:	f007 fcf2 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 8006868:	4827      	ldr	r0, [pc, #156]	; (8006908 <vRegisterCLICommands+0xfc>)
 800686a:	f007 fcef 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 800686e:	4827      	ldr	r0, [pc, #156]	; (800690c <vRegisterCLICommands+0x100>)
 8006870:	f007 fcec 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 8006874:	4826      	ldr	r0, [pc, #152]	; (8006910 <vRegisterCLICommands+0x104>)
 8006876:	f007 fce9 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 800687a:	4826      	ldr	r0, [pc, #152]	; (8006914 <vRegisterCLICommands+0x108>)
 800687c:	f007 fce6 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8006880:	4825      	ldr	r0, [pc, #148]	; (8006918 <vRegisterCLICommands+0x10c>)
 8006882:	f007 fce3 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 8006886:	4825      	ldr	r0, [pc, #148]	; (800691c <vRegisterCLICommands+0x110>)
 8006888:	f007 fce0 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 800688c:	4824      	ldr	r0, [pc, #144]	; (8006920 <vRegisterCLICommands+0x114>)
 800688e:	f007 fcdd 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 8006892:	4824      	ldr	r0, [pc, #144]	; (8006924 <vRegisterCLICommands+0x118>)
 8006894:	f007 fcda 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 8006898:	4823      	ldr	r0, [pc, #140]	; (8006928 <vRegisterCLICommands+0x11c>)
 800689a:	f007 fcd7 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 800689e:	4823      	ldr	r0, [pc, #140]	; (800692c <vRegisterCLICommands+0x120>)
 80068a0:	f007 fcd4 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 80068a4:	4822      	ldr	r0, [pc, #136]	; (8006930 <vRegisterCLICommands+0x124>)
 80068a6:	f007 fcd1 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 80068aa:	4822      	ldr	r0, [pc, #136]	; (8006934 <vRegisterCLICommands+0x128>)
 80068ac:	f007 fcce 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 80068b0:	4821      	ldr	r0, [pc, #132]	; (8006938 <vRegisterCLICommands+0x12c>)
 80068b2:	f007 fccb 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 80068b6:	4821      	ldr	r0, [pc, #132]	; (800693c <vRegisterCLICommands+0x130>)
 80068b8:	f007 fcc8 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 80068bc:	4b20      	ldr	r3, [pc, #128]	; (8006940 <vRegisterCLICommands+0x134>)
 80068be:	221d      	movs	r2, #29
 80068c0:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80068c2:	f004 fb8b 	bl	800afdc <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80068c6:	f7ff ff9f 	bl	8006808 <RegisterUserCLICommands>
}
 80068ca:	bd10      	pop	{r4, pc}
 80068cc:	08018410 	.word	0x08018410
 80068d0:	080183a4 	.word	0x080183a4
 80068d4:	08018340 	.word	0x08018340
 80068d8:	08017d64 	.word	0x08017d64
 80068dc:	08017eec 	.word	0x08017eec
 80068e0:	08018458 	.word	0x08018458
 80068e4:	080182b8 	.word	0x080182b8
 80068e8:	08018178 	.word	0x08018178
 80068ec:	080188e8 	.word	0x080188e8
 80068f0:	0801827c 	.word	0x0801827c
 80068f4:	08018514 	.word	0x08018514
 80068f8:	08017d30 	.word	0x08017d30
 80068fc:	08018448 	.word	0x08018448
 8006900:	08018758 	.word	0x08018758
 8006904:	08018018 	.word	0x08018018
 8006908:	08017e70 	.word	0x08017e70
 800690c:	08019778 	.word	0x08019778
 8006910:	08017dd8 	.word	0x08017dd8
 8006914:	08018560 	.word	0x08018560
 8006918:	080197ec 	.word	0x080197ec
 800691c:	080181f8 	.word	0x080181f8
 8006920:	08017f1c 	.word	0x08017f1c
 8006924:	080188d8 	.word	0x080188d8
 8006928:	08017cb4 	.word	0x08017cb4
 800692c:	08018300 	.word	0x08018300
 8006930:	08017edc 	.word	0x08017edc
 8006934:	08017db0 	.word	0x08017db0
 8006938:	080197c4 	.word	0x080197c4
 800693c:	0801970c 	.word	0x0801970c
 8006940:	200060cc 	.word	0x200060cc

08006944 <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 8006944:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 8006946:	1e45      	subs	r5, r0, #1
 8006948:	00ec      	lsls	r4, r5, #3
 800694a:	1b63      	subs	r3, r4, r5
 800694c:	00d8      	lsls	r0, r3, #3
 800694e:	4e05      	ldr	r6, [pc, #20]	; (8006964 <StopMsgDMA+0x20>)
 8006950:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8006952:	f00a f938 	bl	8010bc6 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8006956:	1b64      	subs	r4, r4, r5
 8006958:	00e3      	lsls	r3, r4, #3
 800695a:	599b      	ldr	r3, [r3, r6]
 800695c:	2200      	movs	r2, #0
 800695e:	605a      	str	r2, [r3, #4]
}
 8006960:	bd70      	pop	{r4, r5, r6, pc}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	20000f4c 	.word	0x20000f4c

08006968 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 8006968:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 800696a:	1e44      	subs	r4, r0, #1
 800696c:	00e5      	lsls	r5, r4, #3
 800696e:	1b2b      	subs	r3, r5, r4
 8006970:	00d8      	lsls	r0, r3, #3
 8006972:	4e07      	ldr	r6, [pc, #28]	; (8006990 <StopStreamDMA+0x28>)
 8006974:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8006976:	f00a f926 	bl	8010bc6 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800697a:	1b2d      	subs	r5, r5, r4
 800697c:	00eb      	lsls	r3, r5, #3
 800697e:	599a      	ldr	r2, [r3, r6]
 8006980:	2300      	movs	r3, #0
 8006982:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 8006984:	00a4      	lsls	r4, r4, #2
 8006986:	4a03      	ldr	r2, [pc, #12]	; (8006994 <StopStreamDMA+0x2c>)
 8006988:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 800698a:	4a03      	ldr	r2, [pc, #12]	; (8006998 <StopStreamDMA+0x30>)
 800698c:	50a3      	str	r3, [r4, r2]

}
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	20001144 	.word	0x20001144
 8006994:	20000c68 	.word	0x20000c68
 8006998:	20000c90 	.word	0x20000c90

0800699c <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 800699c:	b510      	push	{r4, lr}
 800699e:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 80069a0:	f7ff ffd0 	bl	8006944 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 80069a4:	3c01      	subs	r4, #1
 80069a6:	00e3      	lsls	r3, r4, #3
 80069a8:	1b19      	subs	r1, r3, r4
 80069aa:	00ca      	lsls	r2, r1, #3
 80069ac:	4903      	ldr	r1, [pc, #12]	; (80069bc <SwitchMsgDMAToStream+0x20>)
 80069ae:	5851      	ldr	r1, [r2, r1]
 80069b0:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <SwitchMsgDMAToStream+0x24>)
 80069b2:	18d0      	adds	r0, r2, r3
 80069b4:	f005 fa92 	bl	800bedc <DMA_STREAM_CH_Init>
}
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	20000f4c 	.word	0x20000f4c
 80069c0:	20001144 	.word	0x20001144

080069c4 <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 80069c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c6:	b083      	sub	sp, #12
 80069c8:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 80069ca:	f7ff ffcd 	bl	8006968 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 80069ce:	9401      	str	r4, [sp, #4]
 80069d0:	3c01      	subs	r4, #1
 80069d2:	00e7      	lsls	r7, r4, #3
 80069d4:	1b3b      	subs	r3, r7, r4
 80069d6:	00dd      	lsls	r5, r3, #3
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <SwitchStreamDMAToMsg+0x54>)
 80069da:	18ed      	adds	r5, r5, r3
 80069dc:	4e0f      	ldr	r6, [pc, #60]	; (8006a1c <SwitchStreamDMAToMsg+0x58>)
 80069de:	1b3a      	subs	r2, r7, r4
 80069e0:	00d3      	lsls	r3, r2, #3
 80069e2:	5999      	ldr	r1, [r3, r6]
 80069e4:	0028      	movs	r0, r5
 80069e6:	f005 fa03 	bl	800bdf0 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 80069ea:	1b3a      	subs	r2, r7, r4
 80069ec:	00d3      	lsls	r3, r2, #3
 80069ee:	18f3      	adds	r3, r6, r3
 80069f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80069f2:	f004 fb13 	bl	800b01c <GetPort>
 80069f6:	2300      	movs	r3, #0
 80069f8:	4a09      	ldr	r2, [pc, #36]	; (8006a20 <SwitchStreamDMAToMsg+0x5c>)
 80069fa:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 80069fc:	1b3f      	subs	r7, r7, r4
 80069fe:	00fa      	lsls	r2, r7, #3
 8006a00:	5193      	str	r3, [r2, r6]
	dmaStreamDst[port-1] = 0;
 8006a02:	00a4      	lsls	r4, r4, #2
 8006a04:	4a07      	ldr	r2, [pc, #28]	; (8006a24 <SwitchStreamDMAToMsg+0x60>)
 8006a06:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 8006a08:	9801      	ldr	r0, [sp, #4]
 8006a0a:	f007 fa2d 	bl	800de68 <GetUart>
 8006a0e:	0029      	movs	r1, r5
 8006a10:	f005 ff5e 	bl	800c8d0 <DMA_MSG_RX_Setup>
		
}
 8006a14:	b003      	add	sp, #12
 8006a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a18:	20000f4c 	.word	0x20000f4c
 8006a1c:	20001144 	.word	0x20001144
 8006a20:	20000910 	.word	0x20000910
 8006a24:	20000c7c 	.word	0x20000c7c

08006a28 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	0005      	movs	r5, r0
 8006a2c:	000e      	movs	r6, r1
 8006a2e:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 8006a30:	f004 faf4 	bl	800b01c <GetPort>
 8006a34:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8006a36:	4b0e      	ldr	r3, [pc, #56]	; (8006a70 <StartDMAstream+0x48>)
 8006a38:	5c1b      	ldrb	r3, [r3, r0]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d901      	bls.n	8006a42 <StartDMAstream+0x1a>
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d113      	bne.n	8006a6a <StartDMAstream+0x42>
	{
		SwitchMsgDMAToStream(srcPort);
 8006a42:	0020      	movs	r0, r4
 8006a44:	f7ff ffaa 	bl	800699c <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 8006a48:	1e63      	subs	r3, r4, #1
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4a09      	ldr	r2, [pc, #36]	; (8006a74 <StartDMAstream+0x4c>)
 8006a4e:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 8006a50:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <StartDMAstream+0x48>)
 8006a52:	2102      	movs	r1, #2
 8006a54:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 8006a56:	4a08      	ldr	r2, [pc, #32]	; (8006a78 <StartDMAstream+0x50>)
 8006a58:	2100      	movs	r1, #0
 8006a5a:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 8006a5c:	003a      	movs	r2, r7
 8006a5e:	0031      	movs	r1, r6
 8006a60:	0028      	movs	r0, r5
 8006a62:	f005 ff93 	bl	800c98c <DMA_STREAM_Setup>
	
	return BOS_OK;
 8006a66:	2000      	movs	r0, #0
}
 8006a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8006a6a:	2017      	movs	r0, #23
 8006a6c:	e7fc      	b.n	8006a68 <StartDMAstream+0x40>
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	20000910 	.word	0x20000910
 8006a74:	20000c7c 	.word	0x20000c7c
 8006a78:	20000c68 	.word	0x20000c68

08006a7c <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 8006a80:	4b13      	ldr	r3, [pc, #76]	; (8006ad0 <DMA_IRQHandler+0x54>)
 8006a82:	5c1b      	ldrb	r3, [r3, r0]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d008      	beq.n	8006a9a <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 8006a88:	3c01      	subs	r4, #1
 8006a8a:	00e3      	lsls	r3, r4, #3
 8006a8c:	1b1c      	subs	r4, r3, r4
 8006a8e:	00e0      	lsls	r0, r4, #3
 8006a90:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <DMA_IRQHandler+0x58>)
 8006a92:	18c0      	adds	r0, r0, r3
 8006a94:	f00a f8c0 	bl	8010c18 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 8006a98:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 8006a9a:	1e45      	subs	r5, r0, #1
 8006a9c:	00eb      	lsls	r3, r5, #3
 8006a9e:	1b5b      	subs	r3, r3, r5
 8006aa0:	00d8      	lsls	r0, r3, #3
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <DMA_IRQHandler+0x5c>)
 8006aa4:	18c0      	adds	r0, r0, r3
 8006aa6:	f00a f8b7 	bl	8010c18 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 8006aaa:	00aa      	lsls	r2, r5, #2
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <DMA_IRQHandler+0x60>)
 8006aae:	58d3      	ldr	r3, [r2, r3]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d004      	beq.n	8006abe <DMA_IRQHandler+0x42>
			++dmaStreamCount[port-1];
 8006ab4:	490a      	ldr	r1, [pc, #40]	; (8006ae0 <DMA_IRQHandler+0x64>)
 8006ab6:	0010      	movs	r0, r2
 8006ab8:	5852      	ldr	r2, [r2, r1]
 8006aba:	3201      	adds	r2, #1
 8006abc:	5042      	str	r2, [r0, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 8006abe:	00ad      	lsls	r5, r5, #2
 8006ac0:	4a07      	ldr	r2, [pc, #28]	; (8006ae0 <DMA_IRQHandler+0x64>)
 8006ac2:	58aa      	ldr	r2, [r5, r2]
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d8e7      	bhi.n	8006a98 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8006ac8:	0020      	movs	r0, r4
 8006aca:	f7ff ff4d 	bl	8006968 <StopStreamDMA>
}
 8006ace:	e7e3      	b.n	8006a98 <DMA_IRQHandler+0x1c>
 8006ad0:	20000910 	.word	0x20000910
 8006ad4:	20000f4c 	.word	0x20000f4c
 8006ad8:	20001144 	.word	0x20001144
 8006adc:	20000c90 	.word	0x20000c90
 8006ae0:	20000c68 	.word	0x20000c68

08006ae4 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8006ae4:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <ResetUartORE+0x24>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	2308      	movs	r3, #8
 8006aea:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8006aec:	4a07      	ldr	r2, [pc, #28]	; (8006b0c <ResetUartORE+0x28>)
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8006af2:	4a07      	ldr	r2, [pc, #28]	; (8006b10 <ResetUartORE+0x2c>)
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8006af8:	4a06      	ldr	r2, [pc, #24]	; (8006b14 <ResetUartORE+0x30>)
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8006afe:	4a06      	ldr	r2, [pc, #24]	; (8006b18 <ResetUartORE+0x34>)
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	6213      	str	r3, [r2, #32]
#endif
}
 8006b04:	4770      	bx	lr
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	20006364 	.word	0x20006364
 8006b0c:	2000644c 	.word	0x2000644c
 8006b10:	20006228 	.word	0x20006228
 8006b14:	200062f0 	.word	0x200062f0
 8006b18:	200063dc 	.word	0x200063dc

08006b1c <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatusA = 6, PageStatusB = 6;

  /* Get PageA actual status */
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8006b1c:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <EE_FindValidPage+0x50>)
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3

  /* Get PageB actual status */
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8006b22:	4a13      	ldr	r2, [pc, #76]	; (8006b70 <EE_FindValidPage+0x54>)
 8006b24:	8812      	ldrh	r2, [r2, #0]
 8006b26:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d00f      	beq.n	8006b4c <EE_FindValidPage+0x30>
 8006b2c:	2801      	cmp	r0, #1
 8006b2e:	d113      	bne.n	8006b58 <EE_FindValidPage+0x3c>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatusB == VALID_PAGE)
 8006b30:	2a00      	cmp	r2, #0
 8006b32:	d104      	bne.n	8006b3e <EE_FindValidPage+0x22>
      {
        /* PageA receiving data */
        if (PageStatusA == RECEIVE_DATA)
 8006b34:	490f      	ldr	r1, [pc, #60]	; (8006b74 <EE_FindValidPage+0x58>)
 8006b36:	428b      	cmp	r3, r1
 8006b38:	d111      	bne.n	8006b5e <EE_FindValidPage+0x42>
        {
          return PAGEA;         /* PageA valid */
 8006b3a:	0013      	movs	r3, r2
 8006b3c:	e00d      	b.n	8006b5a <EE_FindValidPage+0x3e>
        else
        {
          return PAGEB;         /* PageB valid */
        }
      }
      else if (PageStatusA == VALID_PAGE)
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10f      	bne.n	8006b62 <EE_FindValidPage+0x46>
      {
        /* PageB receiving data */
        if (PageStatusB == RECEIVE_DATA)
 8006b42:	490c      	ldr	r1, [pc, #48]	; (8006b74 <EE_FindValidPage+0x58>)
 8006b44:	428a      	cmp	r2, r1
 8006b46:	d108      	bne.n	8006b5a <EE_FindValidPage+0x3e>
        {
          return PAGEB;         /* PageB valid */
 8006b48:	3302      	adds	r3, #2
 8006b4a:	e006      	b.n	8006b5a <EE_FindValidPage+0x3e>
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatusA == VALID_PAGE)
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d004      	beq.n	8006b5a <EE_FindValidPage+0x3e>
      {
        return PAGEA;           /* PageA valid */
      }
      else if (PageStatusB == VALID_PAGE)
 8006b50:	2a00      	cmp	r2, #0
 8006b52:	d108      	bne.n	8006b66 <EE_FindValidPage+0x4a>
      {
        return PAGEB;           /* PageB valid */
 8006b54:	2302      	movs	r3, #2
 8006b56:	e000      	b.n	8006b5a <EE_FindValidPage+0x3e>
      {
        return NO_VALID_PAGE ;  /* No valid Page */
      }

    default:
      return PAGEA;             /* PageA valid */
 8006b58:	2300      	movs	r3, #0
  }
}
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	4770      	bx	lr
          return PAGEB;         /* PageB valid */
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e7fb      	b.n	8006b5a <EE_FindValidPage+0x3e>
        return NO_VALID_PAGE;   /* No valid Page */
 8006b62:	23ab      	movs	r3, #171	; 0xab
 8006b64:	e7f9      	b.n	8006b5a <EE_FindValidPage+0x3e>
        return NO_VALID_PAGE ;  /* No valid Page */
 8006b66:	23ab      	movs	r3, #171	; 0xab
 8006b68:	e7f7      	b.n	8006b5a <EE_FindValidPage+0x3e>
 8006b6a:	46c0      	nop			; (mov r8, r8)
 8006b6c:	0801e000 	.word	0x0801e000
 8006b70:	0801f000 	.word	0x0801f000
 8006b74:	0000eeee 	.word	0x0000eeee

08006b78 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	0005      	movs	r5, r0
 8006b7c:	000e      	movs	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 8006b7e:	f00a fc97 	bl	80114b0 <HAL_FLASH_Unlock>

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8006b82:	2001      	movs	r0, #1
 8006b84:	f7ff ffca 	bl	8006b1c <EE_FindValidPage>
 8006b88:	0003      	movs	r3, r0

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8006b8a:	28ab      	cmp	r0, #171	; 0xab
 8006b8c:	d03d      	beq.n	8006c0a <EE_VerifyPageFullWriteVariable+0x92>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8006b8e:	4b20      	ldr	r3, [pc, #128]	; (8006c10 <EE_VerifyPageFullWriteVariable+0x98>)
 8006b90:	18c4      	adds	r4, r0, r3
 8006b92:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8006b94:	3002      	adds	r0, #2
 8006b96:	02c0      	lsls	r0, r0, #11
 8006b98:	4b1e      	ldr	r3, [pc, #120]	; (8006c14 <EE_VerifyPageFullWriteVariable+0x9c>)
 8006b9a:	469c      	mov	ip, r3
 8006b9c:	4460      	add	r0, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8006b9e:	4284      	cmp	r4, r0
 8006ba0:	d230      	bcs.n	8006c04 <EE_VerifyPageFullWriteVariable+0x8c>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	d001      	beq.n	8006bac <EE_VerifyPageFullWriteVariable+0x34>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8006ba8:	3404      	adds	r4, #4
 8006baa:	e7f8      	b.n	8006b9e <EE_VerifyPageFullWriteVariable+0x26>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 8006bac:	0032      	movs	r2, r6
 8006bae:	2300      	movs	r3, #0
 8006bb0:	0021      	movs	r1, r4
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	f00a fcc8 	bl	8011548 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006bb8:	4817      	ldr	r0, [pc, #92]	; (8006c18 <EE_VerifyPageFullWriteVariable+0xa0>)
 8006bba:	f00a fc97 	bl	80114ec <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d003      	beq.n	8006bca <EE_VerifyPageFullWriteVariable+0x52>
        return pFlash.ErrorCode;
 8006bc2:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <EE_VerifyPageFullWriteVariable+0xa4>)
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	e01f      	b.n	8006c0a <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006bca:	4a15      	ldr	r2, [pc, #84]	; (8006c20 <EE_VerifyPageFullWriteVariable+0xa8>)
 8006bcc:	6913      	ldr	r3, [r2, #16]
 8006bce:	2101      	movs	r1, #1
 8006bd0:	438b      	bics	r3, r1
 8006bd2:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8006bd4:	1ca1      	adds	r1, r4, #2
 8006bd6:	002a      	movs	r2, r5
 8006bd8:	2300      	movs	r3, #0
 8006bda:	2001      	movs	r0, #1
 8006bdc:	f00a fcb4 	bl	8011548 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006be0:	480d      	ldr	r0, [pc, #52]	; (8006c18 <EE_VerifyPageFullWriteVariable+0xa0>)
 8006be2:	f00a fc83 	bl	80114ec <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d003      	beq.n	8006bf2 <EE_VerifyPageFullWriteVariable+0x7a>
        return pFlash.ErrorCode;
 8006bea:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <EE_VerifyPageFullWriteVariable+0xa4>)
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	e00b      	b.n	8006c0a <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006bf2:	4a0b      	ldr	r2, [pc, #44]	; (8006c20 <EE_VerifyPageFullWriteVariable+0xa8>)
 8006bf4:	6913      	ldr	r3, [r2, #16]
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	438b      	bics	r3, r1
 8006bfa:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 8006bfc:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <EE_VerifyPageFullWriteVariable+0xa4>)
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	e002      	b.n	8006c0a <EE_VerifyPageFullWriteVariable+0x92>
    }
  }
	
	HAL_FLASH_Lock();
 8006c04:	f00a fc68 	bl	80114d8 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8006c08:	2380      	movs	r3, #128	; 0x80
}
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	0001003c 	.word	0x0001003c
 8006c14:	0801dffe 	.word	0x0801dffe
 8006c18:	0000c350 	.word	0x0000c350
 8006c1c:	20006648 	.word	0x20006648
 8006c20:	40022000 	.word	0x40022000

08006c24 <EE_ReadVariable>:
{
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	0005      	movs	r5, r0
 8006c28:	000c      	movs	r4, r1
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	f7ff ff76 	bl	8006b1c <EE_FindValidPage>
 8006c30:	0003      	movs	r3, r0
  if (ValidPage == NO_VALID_PAGE)
 8006c32:	28ab      	cmp	r0, #171	; 0xab
 8006c34:	d016      	beq.n	8006c64 <EE_ReadVariable+0x40>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <EE_ReadVariable+0x44>)
 8006c38:	18c2      	adds	r2, r0, r3
 8006c3a:	02d2      	lsls	r2, r2, #11
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8006c3c:	3002      	adds	r0, #2
 8006c3e:	02c0      	lsls	r0, r0, #11
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <EE_ReadVariable+0x48>)
 8006c42:	469c      	mov	ip, r3
 8006c44:	4460      	add	r0, ip
  while (Address > (PageStartAddress + 2))
 8006c46:	1c93      	adds	r3, r2, #2
 8006c48:	4283      	cmp	r3, r0
 8006c4a:	d20a      	bcs.n	8006c62 <EE_ReadVariable+0x3e>
    AddressValue = (*(__IO uint16_t*)Address);
 8006c4c:	8803      	ldrh	r3, [r0, #0]
 8006c4e:	b29b      	uxth	r3, r3
    if (AddressValue == VirtAddress)
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	d001      	beq.n	8006c58 <EE_ReadVariable+0x34>
      Address = Address - 4;
 8006c54:	3804      	subs	r0, #4
 8006c56:	e7f6      	b.n	8006c46 <EE_ReadVariable+0x22>
      *Data = (*(__IO uint16_t*)(Address - 2));
 8006c58:	3802      	subs	r0, #2
 8006c5a:	8803      	ldrh	r3, [r0, #0]
 8006c5c:	8023      	strh	r3, [r4, #0]
      ReadStatus = 0;
 8006c5e:	2300      	movs	r3, #0
      break;
 8006c60:	e000      	b.n	8006c64 <EE_ReadVariable+0x40>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8006c62:	2301      	movs	r3, #1
}
 8006c64:	0018      	movs	r0, r3
 8006c66:	bd70      	pop	{r4, r5, r6, pc}
 8006c68:	0001003c 	.word	0x0001003c
 8006c6c:	0801dffe 	.word	0x0801dffe

08006c70 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	0006      	movs	r6, r0
 8006c74:	000c      	movs	r4, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 8006c76:	f00a fc1b 	bl	80114b0 <HAL_FLASH_Unlock>

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	f7ff ff4e 	bl	8006b1c <EE_FindValidPage>

  if (ValidPage == PAGEB)       /* PageB valid */
 8006c80:	2802      	cmp	r0, #2
 8006c82:	d013      	beq.n	8006cac <EE_PageTransfer+0x3c>
    NewPageAddress = PAGEA1_BASE_ADDRESS;

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEB1_BASE_ADDRESS;
  }
  else if (ValidPage == PAGEA)  /* PageA valid */
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d000      	beq.n	8006c8a <EE_PageTransfer+0x1a>
 8006c88:	e06d      	b.n	8006d66 <EE_PageTransfer+0xf6>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGEB1_BASE_ADDRESS;

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 8006c8a:	4f38      	ldr	r7, [pc, #224]	; (8006d6c <EE_PageTransfer+0xfc>)
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 8006c8c:	4d38      	ldr	r5, [pc, #224]	; (8006d70 <EE_PageTransfer+0x100>)
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8006c8e:	4a39      	ldr	r2, [pc, #228]	; (8006d74 <EE_PageTransfer+0x104>)
 8006c90:	2300      	movs	r3, #0
 8006c92:	0029      	movs	r1, r5
 8006c94:	2001      	movs	r0, #1
 8006c96:	f00a fc57 	bl	8011548 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006c9a:	4837      	ldr	r0, [pc, #220]	; (8006d78 <EE_PageTransfer+0x108>)
 8006c9c:	f00a fc26 	bl	80114ec <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d006      	beq.n	8006cb2 <EE_PageTransfer+0x42>
  {
    return pFlash.ErrorCode;
 8006ca4:	4b35      	ldr	r3, [pc, #212]	; (8006d7c <EE_PageTransfer+0x10c>)
 8006ca6:	69d8      	ldr	r0, [r3, #28]
 8006ca8:	b280      	uxth	r0, r0
			
	HAL_FLASH_Lock();
	
  /* Return last operation flash status */
  return FlashStatus;
}
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 8006cac:	4f30      	ldr	r7, [pc, #192]	; (8006d70 <EE_PageTransfer+0x100>)
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 8006cae:	4d2f      	ldr	r5, [pc, #188]	; (8006d6c <EE_PageTransfer+0xfc>)
 8006cb0:	e7ed      	b.n	8006c8e <EE_PageTransfer+0x1e>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006cb2:	4a33      	ldr	r2, [pc, #204]	; (8006d80 <EE_PageTransfer+0x110>)
 8006cb4:	6913      	ldr	r3, [r2, #16]
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	438b      	bics	r3, r1
 8006cba:	6113      	str	r3, [r2, #16]
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8006cbc:	0021      	movs	r1, r4
 8006cbe:	0030      	movs	r0, r6
 8006cc0:	f7ff ff5a 	bl	8006b78 <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1f0      	bne.n	8006caa <EE_PageTransfer+0x3a>
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8006cc8:	2401      	movs	r4, #1
 8006cca:	e001      	b.n	8006cd0 <EE_PageTransfer+0x60>
 8006ccc:	3401      	adds	r4, #1
 8006cce:	b2a4      	uxth	r4, r4
 8006cd0:	2380      	movs	r3, #128	; 0x80
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	429c      	cmp	r4, r3
 8006cd6:	d80f      	bhi.n	8006cf8 <EE_PageTransfer+0x88>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 8006cd8:	42b4      	cmp	r4, r6
 8006cda:	d0f7      	beq.n	8006ccc <EE_PageTransfer+0x5c>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8006cdc:	4929      	ldr	r1, [pc, #164]	; (8006d84 <EE_PageTransfer+0x114>)
 8006cde:	0020      	movs	r0, r4
 8006ce0:	f7ff ffa0 	bl	8006c24 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 8006ce4:	2801      	cmp	r0, #1
 8006ce6:	d0f1      	beq.n	8006ccc <EE_PageTransfer+0x5c>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8006ce8:	4b26      	ldr	r3, [pc, #152]	; (8006d84 <EE_PageTransfer+0x114>)
 8006cea:	8819      	ldrh	r1, [r3, #0]
 8006cec:	0020      	movs	r0, r4
 8006cee:	f7ff ff43 	bl	8006b78 <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d0ea      	beq.n	8006ccc <EE_PageTransfer+0x5c>
 8006cf6:	e7d8      	b.n	8006caa <EE_PageTransfer+0x3a>
  FLASH_PageErase(OldPageAddress);
 8006cf8:	0038      	movs	r0, r7
 8006cfa:	f00a fc87 	bl	801160c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006cfe:	481e      	ldr	r0, [pc, #120]	; (8006d78 <EE_PageTransfer+0x108>)
 8006d00:	f00a fbf4 	bl	80114ec <FLASH_WaitForLastOperation>
  if (FlashStatus != HAL_OK)
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d003      	beq.n	8006d10 <EE_PageTransfer+0xa0>
    return pFlash.ErrorCode;
 8006d08:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <EE_PageTransfer+0x10c>)
 8006d0a:	69d8      	ldr	r0, [r3, #28]
 8006d0c:	b280      	uxth	r0, r0
 8006d0e:	e7cc      	b.n	8006caa <EE_PageTransfer+0x3a>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	18f8      	adds	r0, r7, r3
 8006d16:	f00a fc79 	bl	801160c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006d1a:	4817      	ldr	r0, [pc, #92]	; (8006d78 <EE_PageTransfer+0x108>)
 8006d1c:	f00a fbe6 	bl	80114ec <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d003      	beq.n	8006d2c <EE_PageTransfer+0xbc>
			return pFlash.ErrorCode;
 8006d24:	4b15      	ldr	r3, [pc, #84]	; (8006d7c <EE_PageTransfer+0x10c>)
 8006d26:	69d8      	ldr	r0, [r3, #28]
 8006d28:	b280      	uxth	r0, r0
 8006d2a:	e7be      	b.n	8006caa <EE_PageTransfer+0x3a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006d2c:	4a14      	ldr	r2, [pc, #80]	; (8006d80 <EE_PageTransfer+0x110>)
 8006d2e:	6913      	ldr	r3, [r2, #16]
 8006d30:	2102      	movs	r1, #2
 8006d32:	438b      	bics	r3, r1
 8006d34:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8006d36:	2200      	movs	r2, #0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	0029      	movs	r1, r5
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	f00a fc03 	bl	8011548 <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006d42:	480d      	ldr	r0, [pc, #52]	; (8006d78 <EE_PageTransfer+0x108>)
 8006d44:	f00a fbd2 	bl	80114ec <FLASH_WaitForLastOperation>
 8006d48:	1e04      	subs	r4, r0, #0
  if (FlashStatus != HAL_OK)
 8006d4a:	d003      	beq.n	8006d54 <EE_PageTransfer+0xe4>
    return pFlash.ErrorCode;
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <EE_PageTransfer+0x10c>)
 8006d4e:	69d8      	ldr	r0, [r3, #28]
 8006d50:	b280      	uxth	r0, r0
 8006d52:	e7aa      	b.n	8006caa <EE_PageTransfer+0x3a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006d54:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <EE_PageTransfer+0x110>)
 8006d56:	6913      	ldr	r3, [r2, #16]
 8006d58:	2101      	movs	r1, #1
 8006d5a:	438b      	bics	r3, r1
 8006d5c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8006d5e:	f00a fbbb 	bl	80114d8 <HAL_FLASH_Lock>
  return FlashStatus;
 8006d62:	b2a0      	uxth	r0, r4
 8006d64:	e7a1      	b.n	8006caa <EE_PageTransfer+0x3a>
    return NO_VALID_PAGE;       /* No valid Page */
 8006d66:	20ab      	movs	r0, #171	; 0xab
 8006d68:	e79f      	b.n	8006caa <EE_PageTransfer+0x3a>
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	0801e000 	.word	0x0801e000
 8006d70:	0801f000 	.word	0x0801f000
 8006d74:	0000eeee 	.word	0x0000eeee
 8006d78:	0000c350 	.word	0x0000c350
 8006d7c:	20006648 	.word	0x20006648
 8006d80:	40022000 	.word	0x40022000
 8006d84:	20000ca4 	.word	0x20000ca4

08006d88 <EE_WriteVariable>:
{
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	0005      	movs	r5, r0
 8006d8c:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8006d8e:	f00a fb8f 	bl	80114b0 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8006d92:	0031      	movs	r1, r6
 8006d94:	0028      	movs	r0, r5
 8006d96:	f7ff feef 	bl	8006b78 <EE_VerifyPageFullWriteVariable>
 8006d9a:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 8006d9c:	2880      	cmp	r0, #128	; 0x80
 8006d9e:	d003      	beq.n	8006da8 <EE_WriteVariable+0x20>
	HAL_FLASH_Lock();
 8006da0:	f00a fb9a 	bl	80114d8 <HAL_FLASH_Lock>
}
 8006da4:	0020      	movs	r0, r4
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 8006da8:	0031      	movs	r1, r6
 8006daa:	0028      	movs	r0, r5
 8006dac:	f7ff ff60 	bl	8006c70 <EE_PageTransfer>
 8006db0:	0004      	movs	r4, r0
 8006db2:	e7f5      	b.n	8006da0 <EE_WriteVariable+0x18>

08006db4 <EE_Format>:
{
 8006db4:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8006db6:	f00a fb7b 	bl	80114b0 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 8006dba:	4829      	ldr	r0, [pc, #164]	; (8006e60 <EE_Format+0xac>)
 8006dbc:	f00a fc26 	bl	801160c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006dc0:	4828      	ldr	r0, [pc, #160]	; (8006e64 <EE_Format+0xb0>)
 8006dc2:	f00a fb93 	bl	80114ec <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d003      	beq.n	8006dd2 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8006dca:	4b27      	ldr	r3, [pc, #156]	; (8006e68 <EE_Format+0xb4>)
 8006dcc:	69d8      	ldr	r0, [r3, #28]
 8006dce:	b280      	uxth	r0, r0
}
 8006dd0:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8006dd2:	4826      	ldr	r0, [pc, #152]	; (8006e6c <EE_Format+0xb8>)
 8006dd4:	f00a fc1a 	bl	801160c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006dd8:	4822      	ldr	r0, [pc, #136]	; (8006e64 <EE_Format+0xb0>)
 8006dda:	f00a fb87 	bl	80114ec <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d003      	beq.n	8006dea <EE_Format+0x36>
			return pFlash.ErrorCode;
 8006de2:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <EE_Format+0xb4>)
 8006de4:	69d8      	ldr	r0, [r3, #28]
 8006de6:	b280      	uxth	r0, r0
 8006de8:	e7f2      	b.n	8006dd0 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006dea:	4a21      	ldr	r2, [pc, #132]	; (8006e70 <EE_Format+0xbc>)
 8006dec:	6913      	ldr	r3, [r2, #16]
 8006dee:	2102      	movs	r1, #2
 8006df0:	438b      	bics	r3, r1
 8006df2:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8006df4:	2200      	movs	r2, #0
 8006df6:	2300      	movs	r3, #0
 8006df8:	4919      	ldr	r1, [pc, #100]	; (8006e60 <EE_Format+0xac>)
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	f00a fba4 	bl	8011548 <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006e00:	4818      	ldr	r0, [pc, #96]	; (8006e64 <EE_Format+0xb0>)
 8006e02:	f00a fb73 	bl	80114ec <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d003      	beq.n	8006e12 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8006e0a:	4b17      	ldr	r3, [pc, #92]	; (8006e68 <EE_Format+0xb4>)
 8006e0c:	69d8      	ldr	r0, [r3, #28]
 8006e0e:	b280      	uxth	r0, r0
 8006e10:	e7de      	b.n	8006dd0 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006e12:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <EE_Format+0xbc>)
 8006e14:	6913      	ldr	r3, [r2, #16]
 8006e16:	2101      	movs	r1, #1
 8006e18:	438b      	bics	r3, r1
 8006e1a:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8006e1c:	4815      	ldr	r0, [pc, #84]	; (8006e74 <EE_Format+0xc0>)
 8006e1e:	f00a fbf5 	bl	801160c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006e22:	4810      	ldr	r0, [pc, #64]	; (8006e64 <EE_Format+0xb0>)
 8006e24:	f00a fb62 	bl	80114ec <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d003      	beq.n	8006e34 <EE_Format+0x80>
		return pFlash.ErrorCode;
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <EE_Format+0xb4>)
 8006e2e:	69d8      	ldr	r0, [r3, #28]
 8006e30:	b280      	uxth	r0, r0
 8006e32:	e7cd      	b.n	8006dd0 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8006e34:	4810      	ldr	r0, [pc, #64]	; (8006e78 <EE_Format+0xc4>)
 8006e36:	f00a fbe9 	bl	801160c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006e3a:	480a      	ldr	r0, [pc, #40]	; (8006e64 <EE_Format+0xb0>)
 8006e3c:	f00a fb56 	bl	80114ec <FLASH_WaitForLastOperation>
 8006e40:	1e04      	subs	r4, r0, #0
		if(FlashStatus != HAL_OK)
 8006e42:	d003      	beq.n	8006e4c <EE_Format+0x98>
			return pFlash.ErrorCode;
 8006e44:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <EE_Format+0xb4>)
 8006e46:	69d8      	ldr	r0, [r3, #28]
 8006e48:	b280      	uxth	r0, r0
 8006e4a:	e7c1      	b.n	8006dd0 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006e4c:	4a08      	ldr	r2, [pc, #32]	; (8006e70 <EE_Format+0xbc>)
 8006e4e:	6913      	ldr	r3, [r2, #16]
 8006e50:	2101      	movs	r1, #1
 8006e52:	438b      	bics	r3, r1
 8006e54:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8006e56:	f00a fb3f 	bl	80114d8 <HAL_FLASH_Lock>
  return FlashStatus;
 8006e5a:	b2a0      	uxth	r0, r4
 8006e5c:	e7b8      	b.n	8006dd0 <EE_Format+0x1c>
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	0801e000 	.word	0x0801e000
 8006e64:	0000c350 	.word	0x0000c350
 8006e68:	20006648 	.word	0x20006648
 8006e6c:	0801e800 	.word	0x0801e800
 8006e70:	40022000 	.word	0x40022000
 8006e74:	0801f000 	.word	0x0801f000
 8006e78:	0801f800 	.word	0x0801f800

08006e7c <EE_Init>:
{
 8006e7c:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 8006e7e:	f00a fb17 	bl	80114b0 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8006e82:	4bbc      	ldr	r3, [pc, #752]	; (8007174 <EE_Init+0x2f8>)
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8006e88:	4abb      	ldr	r2, [pc, #748]	; (8007178 <EE_Init+0x2fc>)
 8006e8a:	8812      	ldrh	r2, [r2, #0]
 8006e8c:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8006e8e:	49bb      	ldr	r1, [pc, #748]	; (800717c <EE_Init+0x300>)
 8006e90:	428b      	cmp	r3, r1
 8006e92:	d100      	bne.n	8006e96 <EE_Init+0x1a>
 8006e94:	e072      	b.n	8006f7c <EE_Init+0x100>
 8006e96:	49ba      	ldr	r1, [pc, #744]	; (8007180 <EE_Init+0x304>)
 8006e98:	428b      	cmp	r3, r1
 8006e9a:	d00f      	beq.n	8006ebc <EE_Init+0x40>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d100      	bne.n	8006ea2 <EE_Init+0x26>
 8006ea0:	e106      	b.n	80070b0 <EE_Init+0x234>
      FlashStatus = EE_Format();
 8006ea2:	f7ff ff87 	bl	8006db4 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006ea6:	48b7      	ldr	r0, [pc, #732]	; (8007184 <EE_Init+0x308>)
 8006ea8:	f00a fb20 	bl	80114ec <FLASH_WaitForLastOperation>
 8006eac:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	d102      	bne.n	8006eb8 <EE_Init+0x3c>
	HAL_FLASH_Lock();
 8006eb2:	f00a fb11 	bl	80114d8 <HAL_FLASH_Lock>
  return HAL_OK;
 8006eb6:	2500      	movs	r5, #0
}
 8006eb8:	0028      	movs	r0, r5
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8006ebc:	2a00      	cmp	r2, #0
 8006ebe:	d00d      	beq.n	8006edc <EE_Init+0x60>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8006ec0:	4bae      	ldr	r3, [pc, #696]	; (800717c <EE_Init+0x300>)
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d028      	beq.n	8006f18 <EE_Init+0x9c>
        FlashStatus = EE_Format();
 8006ec6:	f7ff ff75 	bl	8006db4 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006eca:	48ae      	ldr	r0, [pc, #696]	; (8007184 <EE_Init+0x308>)
 8006ecc:	f00a fb0e 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d0ee      	beq.n	8006eb2 <EE_Init+0x36>
          return pFlash.ErrorCode;
 8006ed4:	4bac      	ldr	r3, [pc, #688]	; (8007188 <EE_Init+0x30c>)
 8006ed6:	69dd      	ldr	r5, [r3, #28]
 8006ed8:	b2ad      	uxth	r5, r5
 8006eda:	e7ed      	b.n	8006eb8 <EE_Init+0x3c>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8006edc:	48a5      	ldr	r0, [pc, #660]	; (8007174 <EE_Init+0x2f8>)
 8006ede:	f00a fb95 	bl	801160c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006ee2:	48a8      	ldr	r0, [pc, #672]	; (8007184 <EE_Init+0x308>)
 8006ee4:	f00a fb02 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d003      	beq.n	8006ef4 <EE_Init+0x78>
          return pFlash.ErrorCode;
 8006eec:	4ba6      	ldr	r3, [pc, #664]	; (8007188 <EE_Init+0x30c>)
 8006eee:	69dd      	ldr	r5, [r3, #28]
 8006ef0:	b2ad      	uxth	r5, r5
 8006ef2:	e7e1      	b.n	8006eb8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8006ef4:	48a5      	ldr	r0, [pc, #660]	; (800718c <EE_Init+0x310>)
 8006ef6:	f00a fb89 	bl	801160c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006efa:	48a2      	ldr	r0, [pc, #648]	; (8007184 <EE_Init+0x308>)
 8006efc:	f00a faf6 	bl	80114ec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d105      	bne.n	8006f10 <EE_Init+0x94>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006f04:	4aa2      	ldr	r2, [pc, #648]	; (8007190 <EE_Init+0x314>)
 8006f06:	6913      	ldr	r3, [r2, #16]
 8006f08:	2102      	movs	r1, #2
 8006f0a:	438b      	bics	r3, r1
 8006f0c:	6113      	str	r3, [r2, #16]
 8006f0e:	e7d0      	b.n	8006eb2 <EE_Init+0x36>
						return pFlash.ErrorCode;
 8006f10:	4b9d      	ldr	r3, [pc, #628]	; (8007188 <EE_Init+0x30c>)
 8006f12:	69dd      	ldr	r5, [r3, #28]
 8006f14:	b2ad      	uxth	r5, r5
 8006f16:	e7cf      	b.n	8006eb8 <EE_Init+0x3c>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8006f18:	4896      	ldr	r0, [pc, #600]	; (8007174 <EE_Init+0x2f8>)
 8006f1a:	f00a fb77 	bl	801160c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006f1e:	4899      	ldr	r0, [pc, #612]	; (8007184 <EE_Init+0x308>)
 8006f20:	f00a fae4 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d003      	beq.n	8006f30 <EE_Init+0xb4>
          return pFlash.ErrorCode;
 8006f28:	4b97      	ldr	r3, [pc, #604]	; (8007188 <EE_Init+0x30c>)
 8006f2a:	69dd      	ldr	r5, [r3, #28]
 8006f2c:	b2ad      	uxth	r5, r5
 8006f2e:	e7c3      	b.n	8006eb8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8006f30:	4896      	ldr	r0, [pc, #600]	; (800718c <EE_Init+0x310>)
 8006f32:	f00a fb6b 	bl	801160c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006f36:	4893      	ldr	r0, [pc, #588]	; (8007184 <EE_Init+0x308>)
 8006f38:	f00a fad8 	bl	80114ec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d003      	beq.n	8006f48 <EE_Init+0xcc>
						return pFlash.ErrorCode;
 8006f40:	4b91      	ldr	r3, [pc, #580]	; (8007188 <EE_Init+0x30c>)
 8006f42:	69dd      	ldr	r5, [r3, #28]
 8006f44:	b2ad      	uxth	r5, r5
 8006f46:	e7b7      	b.n	8006eb8 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006f48:	4a91      	ldr	r2, [pc, #580]	; (8007190 <EE_Init+0x314>)
 8006f4a:	6913      	ldr	r3, [r2, #16]
 8006f4c:	2102      	movs	r1, #2
 8006f4e:	438b      	bics	r3, r1
 8006f50:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8006f52:	2200      	movs	r2, #0
 8006f54:	2300      	movs	r3, #0
 8006f56:	4988      	ldr	r1, [pc, #544]	; (8007178 <EE_Init+0x2fc>)
 8006f58:	2001      	movs	r0, #1
 8006f5a:	f00a faf5 	bl	8011548 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006f5e:	4889      	ldr	r0, [pc, #548]	; (8007184 <EE_Init+0x308>)
 8006f60:	f00a fac4 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d105      	bne.n	8006f74 <EE_Init+0xf8>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006f68:	4a89      	ldr	r2, [pc, #548]	; (8007190 <EE_Init+0x314>)
 8006f6a:	6913      	ldr	r3, [r2, #16]
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	438b      	bics	r3, r1
 8006f70:	6113      	str	r3, [r2, #16]
 8006f72:	e79e      	b.n	8006eb2 <EE_Init+0x36>
          return pFlash.ErrorCode;
 8006f74:	4b84      	ldr	r3, [pc, #528]	; (8007188 <EE_Init+0x30c>)
 8006f76:	69dd      	ldr	r5, [r3, #28]
 8006f78:	b2ad      	uxth	r5, r5
 8006f7a:	e79d      	b.n	8006eb8 <EE_Init+0x3c>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	d02f      	beq.n	8006fe0 <EE_Init+0x164>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8006f80:	4b7f      	ldr	r3, [pc, #508]	; (8007180 <EE_Init+0x304>)
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d062      	beq.n	800704c <EE_Init+0x1d0>
        FlashStatus = EE_Format();
 8006f86:	f7ff ff15 	bl	8006db4 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006f8a:	487e      	ldr	r0, [pc, #504]	; (8007184 <EE_Init+0x308>)
 8006f8c:	f00a faae 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d100      	bne.n	8006f96 <EE_Init+0x11a>
 8006f94:	e78d      	b.n	8006eb2 <EE_Init+0x36>
          return pFlash.ErrorCode;
 8006f96:	4b7c      	ldr	r3, [pc, #496]	; (8007188 <EE_Init+0x30c>)
 8006f98:	69dd      	ldr	r5, [r3, #28]
 8006f9a:	b2ad      	uxth	r5, r5
 8006f9c:	e78c      	b.n	8006eb8 <EE_Init+0x3c>
            x = VarIdx;
 8006f9e:	b226      	sxth	r6, r4
 8006fa0:	e00a      	b.n	8006fb8 <EE_Init+0x13c>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8006fa2:	3401      	adds	r4, #1
 8006fa4:	b2a4      	uxth	r4, r4
 8006fa6:	2380      	movs	r3, #128	; 0x80
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	429c      	cmp	r4, r3
 8006fac:	d81c      	bhi.n	8006fe8 <EE_Init+0x16c>
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8006fae:	4b79      	ldr	r3, [pc, #484]	; (8007194 <EE_Init+0x318>)
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	d0f2      	beq.n	8006f9e <EE_Init+0x122>
          if (VarIdx != x)
 8006fb8:	42b4      	cmp	r4, r6
 8006fba:	d0f2      	beq.n	8006fa2 <EE_Init+0x126>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8006fbc:	4976      	ldr	r1, [pc, #472]	; (8007198 <EE_Init+0x31c>)
 8006fbe:	0020      	movs	r0, r4
 8006fc0:	f7ff fe30 	bl	8006c24 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8006fc4:	2801      	cmp	r0, #1
 8006fc6:	d0ec      	beq.n	8006fa2 <EE_Init+0x126>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8006fc8:	4b73      	ldr	r3, [pc, #460]	; (8007198 <EE_Init+0x31c>)
 8006fca:	8819      	ldrh	r1, [r3, #0]
 8006fcc:	0020      	movs	r0, r4
 8006fce:	f7ff fdd3 	bl	8006b78 <EE_VerifyPageFullWriteVariable>
 8006fd2:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006fd4:	486b      	ldr	r0, [pc, #428]	; (8007184 <EE_Init+0x308>)
 8006fd6:	f00a fa89 	bl	80114ec <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d0e1      	beq.n	8006fa2 <EE_Init+0x126>
 8006fde:	e76b      	b.n	8006eb8 <EE_Init+0x3c>
  int16_t x = -1;
 8006fe0:	2601      	movs	r6, #1
 8006fe2:	4276      	negs	r6, r6
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8006fe4:	2401      	movs	r4, #1
 8006fe6:	e7de      	b.n	8006fa6 <EE_Init+0x12a>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	4961      	ldr	r1, [pc, #388]	; (8007174 <EE_Init+0x2f8>)
 8006fee:	2001      	movs	r0, #1
 8006ff0:	f00a faaa 	bl	8011548 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006ff4:	4863      	ldr	r0, [pc, #396]	; (8007184 <EE_Init+0x308>)
 8006ff6:	f00a fa79 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d003      	beq.n	8007006 <EE_Init+0x18a>
          return pFlash.ErrorCode;
 8006ffe:	4b62      	ldr	r3, [pc, #392]	; (8007188 <EE_Init+0x30c>)
 8007000:	69dd      	ldr	r5, [r3, #28]
 8007002:	b2ad      	uxth	r5, r5
 8007004:	e758      	b.n	8006eb8 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007006:	4a62      	ldr	r2, [pc, #392]	; (8007190 <EE_Init+0x314>)
 8007008:	6913      	ldr	r3, [r2, #16]
 800700a:	2101      	movs	r1, #1
 800700c:	438b      	bics	r3, r1
 800700e:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007010:	4859      	ldr	r0, [pc, #356]	; (8007178 <EE_Init+0x2fc>)
 8007012:	f00a fafb 	bl	801160c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007016:	485b      	ldr	r0, [pc, #364]	; (8007184 <EE_Init+0x308>)
 8007018:	f00a fa68 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800701c:	2800      	cmp	r0, #0
 800701e:	d003      	beq.n	8007028 <EE_Init+0x1ac>
          return pFlash.ErrorCode;
 8007020:	4b59      	ldr	r3, [pc, #356]	; (8007188 <EE_Init+0x30c>)
 8007022:	69dd      	ldr	r5, [r3, #28]
 8007024:	b2ad      	uxth	r5, r5
 8007026:	e747      	b.n	8006eb8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007028:	485c      	ldr	r0, [pc, #368]	; (800719c <EE_Init+0x320>)
 800702a:	f00a faef 	bl	801160c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800702e:	4855      	ldr	r0, [pc, #340]	; (8007184 <EE_Init+0x308>)
 8007030:	f00a fa5c 	bl	80114ec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007034:	2800      	cmp	r0, #0
 8007036:	d105      	bne.n	8007044 <EE_Init+0x1c8>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007038:	4a55      	ldr	r2, [pc, #340]	; (8007190 <EE_Init+0x314>)
 800703a:	6913      	ldr	r3, [r2, #16]
 800703c:	2102      	movs	r1, #2
 800703e:	438b      	bics	r3, r1
 8007040:	6113      	str	r3, [r2, #16]
 8007042:	e736      	b.n	8006eb2 <EE_Init+0x36>
						return pFlash.ErrorCode;
 8007044:	4b50      	ldr	r3, [pc, #320]	; (8007188 <EE_Init+0x30c>)
 8007046:	69dd      	ldr	r5, [r3, #28]
 8007048:	b2ad      	uxth	r5, r5
 800704a:	e735      	b.n	8006eb8 <EE_Init+0x3c>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800704c:	484a      	ldr	r0, [pc, #296]	; (8007178 <EE_Init+0x2fc>)
 800704e:	f00a fadd 	bl	801160c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007052:	484c      	ldr	r0, [pc, #304]	; (8007184 <EE_Init+0x308>)
 8007054:	f00a fa4a 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007058:	2800      	cmp	r0, #0
 800705a:	d003      	beq.n	8007064 <EE_Init+0x1e8>
          return pFlash.ErrorCode;
 800705c:	4b4a      	ldr	r3, [pc, #296]	; (8007188 <EE_Init+0x30c>)
 800705e:	69dd      	ldr	r5, [r3, #28]
 8007060:	b2ad      	uxth	r5, r5
 8007062:	e729      	b.n	8006eb8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007064:	484d      	ldr	r0, [pc, #308]	; (800719c <EE_Init+0x320>)
 8007066:	f00a fad1 	bl	801160c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800706a:	4846      	ldr	r0, [pc, #280]	; (8007184 <EE_Init+0x308>)
 800706c:	f00a fa3e 	bl	80114ec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007070:	2800      	cmp	r0, #0
 8007072:	d003      	beq.n	800707c <EE_Init+0x200>
						return pFlash.ErrorCode;
 8007074:	4b44      	ldr	r3, [pc, #272]	; (8007188 <EE_Init+0x30c>)
 8007076:	69dd      	ldr	r5, [r3, #28]
 8007078:	b2ad      	uxth	r5, r5
 800707a:	e71d      	b.n	8006eb8 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800707c:	4a44      	ldr	r2, [pc, #272]	; (8007190 <EE_Init+0x314>)
 800707e:	6913      	ldr	r3, [r2, #16]
 8007080:	2102      	movs	r1, #2
 8007082:	438b      	bics	r3, r1
 8007084:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007086:	2200      	movs	r2, #0
 8007088:	2300      	movs	r3, #0
 800708a:	493a      	ldr	r1, [pc, #232]	; (8007174 <EE_Init+0x2f8>)
 800708c:	2001      	movs	r0, #1
 800708e:	f00a fa5b 	bl	8011548 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007092:	483c      	ldr	r0, [pc, #240]	; (8007184 <EE_Init+0x308>)
 8007094:	f00a fa2a 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007098:	2800      	cmp	r0, #0
 800709a:	d003      	beq.n	80070a4 <EE_Init+0x228>
          return pFlash.ErrorCode;
 800709c:	4b3a      	ldr	r3, [pc, #232]	; (8007188 <EE_Init+0x30c>)
 800709e:	69dd      	ldr	r5, [r3, #28]
 80070a0:	b2ad      	uxth	r5, r5
 80070a2:	e709      	b.n	8006eb8 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80070a4:	4a3a      	ldr	r2, [pc, #232]	; (8007190 <EE_Init+0x314>)
 80070a6:	6913      	ldr	r3, [r2, #16]
 80070a8:	2101      	movs	r1, #1
 80070aa:	438b      	bics	r3, r1
 80070ac:	6113      	str	r3, [r2, #16]
 80070ae:	e700      	b.n	8006eb2 <EE_Init+0x36>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	d006      	beq.n	80070c2 <EE_Init+0x246>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 80070b4:	4b32      	ldr	r3, [pc, #200]	; (8007180 <EE_Init+0x304>)
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d00d      	beq.n	80070d6 <EE_Init+0x25a>
  int16_t x = -1;
 80070ba:	2601      	movs	r6, #1
 80070bc:	4276      	negs	r6, r6
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80070be:	2401      	movs	r4, #1
 80070c0:	e02b      	b.n	800711a <EE_Init+0x29e>
        FlashStatus = EE_Format();
 80070c2:	f7ff fe77 	bl	8006db4 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80070c6:	482f      	ldr	r0, [pc, #188]	; (8007184 <EE_Init+0x308>)
 80070c8:	f00a fa10 	bl	80114ec <FLASH_WaitForLastOperation>
 80070cc:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	d100      	bne.n	80070d4 <EE_Init+0x258>
 80070d2:	e6ee      	b.n	8006eb2 <EE_Init+0x36>
 80070d4:	e6f0      	b.n	8006eb8 <EE_Init+0x3c>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80070d6:	4828      	ldr	r0, [pc, #160]	; (8007178 <EE_Init+0x2fc>)
 80070d8:	f00a fa98 	bl	801160c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80070dc:	4829      	ldr	r0, [pc, #164]	; (8007184 <EE_Init+0x308>)
 80070de:	f00a fa05 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d003      	beq.n	80070ee <EE_Init+0x272>
          return pFlash.ErrorCode;
 80070e6:	4b28      	ldr	r3, [pc, #160]	; (8007188 <EE_Init+0x30c>)
 80070e8:	69dd      	ldr	r5, [r3, #28]
 80070ea:	b2ad      	uxth	r5, r5
 80070ec:	e6e4      	b.n	8006eb8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80070ee:	482b      	ldr	r0, [pc, #172]	; (800719c <EE_Init+0x320>)
 80070f0:	f00a fa8c 	bl	801160c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80070f4:	4823      	ldr	r0, [pc, #140]	; (8007184 <EE_Init+0x308>)
 80070f6:	f00a f9f9 	bl	80114ec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d105      	bne.n	800710a <EE_Init+0x28e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80070fe:	4a24      	ldr	r2, [pc, #144]	; (8007190 <EE_Init+0x314>)
 8007100:	6913      	ldr	r3, [r2, #16]
 8007102:	2102      	movs	r1, #2
 8007104:	438b      	bics	r3, r1
 8007106:	6113      	str	r3, [r2, #16]
 8007108:	e6d3      	b.n	8006eb2 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800710a:	4b1f      	ldr	r3, [pc, #124]	; (8007188 <EE_Init+0x30c>)
 800710c:	69dd      	ldr	r5, [r3, #28]
 800710e:	b2ad      	uxth	r5, r5
 8007110:	e6d2      	b.n	8006eb8 <EE_Init+0x3c>
            x = VarIdx;
 8007112:	b226      	sxth	r6, r4
 8007114:	e00a      	b.n	800712c <EE_Init+0x2b0>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007116:	3401      	adds	r4, #1
 8007118:	b2a4      	uxth	r4, r4
 800711a:	2380      	movs	r3, #128	; 0x80
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	429c      	cmp	r4, r3
 8007120:	d818      	bhi.n	8007154 <EE_Init+0x2d8>
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007122:	4b1f      	ldr	r3, [pc, #124]	; (80071a0 <EE_Init+0x324>)
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	42a3      	cmp	r3, r4
 800712a:	d0f2      	beq.n	8007112 <EE_Init+0x296>
          if (VarIdx != x)
 800712c:	42b4      	cmp	r4, r6
 800712e:	d0f2      	beq.n	8007116 <EE_Init+0x29a>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007130:	4919      	ldr	r1, [pc, #100]	; (8007198 <EE_Init+0x31c>)
 8007132:	0020      	movs	r0, r4
 8007134:	f7ff fd76 	bl	8006c24 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007138:	2801      	cmp	r0, #1
 800713a:	d0ec      	beq.n	8007116 <EE_Init+0x29a>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800713c:	4b16      	ldr	r3, [pc, #88]	; (8007198 <EE_Init+0x31c>)
 800713e:	8819      	ldrh	r1, [r3, #0]
 8007140:	0020      	movs	r0, r4
 8007142:	f7ff fd19 	bl	8006b78 <EE_VerifyPageFullWriteVariable>
 8007146:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007148:	480e      	ldr	r0, [pc, #56]	; (8007184 <EE_Init+0x308>)
 800714a:	f00a f9cf 	bl	80114ec <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 800714e:	2800      	cmp	r0, #0
 8007150:	d0e1      	beq.n	8007116 <EE_Init+0x29a>
 8007152:	e6b1      	b.n	8006eb8 <EE_Init+0x3c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007154:	2200      	movs	r2, #0
 8007156:	2300      	movs	r3, #0
 8007158:	4907      	ldr	r1, [pc, #28]	; (8007178 <EE_Init+0x2fc>)
 800715a:	2001      	movs	r0, #1
 800715c:	f00a f9f4 	bl	8011548 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007160:	4808      	ldr	r0, [pc, #32]	; (8007184 <EE_Init+0x308>)
 8007162:	f00a f9c3 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007166:	2800      	cmp	r0, #0
 8007168:	d01c      	beq.n	80071a4 <EE_Init+0x328>
          return pFlash.ErrorCode;
 800716a:	4b07      	ldr	r3, [pc, #28]	; (8007188 <EE_Init+0x30c>)
 800716c:	69dd      	ldr	r5, [r3, #28]
 800716e:	b2ad      	uxth	r5, r5
 8007170:	e6a2      	b.n	8006eb8 <EE_Init+0x3c>
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	0801e000 	.word	0x0801e000
 8007178:	0801f000 	.word	0x0801f000
 800717c:	0000eeee 	.word	0x0000eeee
 8007180:	0000ffff 	.word	0x0000ffff
 8007184:	0000c350 	.word	0x0000c350
 8007188:	20006648 	.word	0x20006648
 800718c:	0801e800 	.word	0x0801e800
 8007190:	40022000 	.word	0x40022000
 8007194:	0801e006 	.word	0x0801e006
 8007198:	20000ca4 	.word	0x20000ca4
 800719c:	0801f800 	.word	0x0801f800
 80071a0:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80071a4:	4a11      	ldr	r2, [pc, #68]	; (80071ec <EE_Init+0x370>)
 80071a6:	6913      	ldr	r3, [r2, #16]
 80071a8:	2101      	movs	r1, #1
 80071aa:	438b      	bics	r3, r1
 80071ac:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80071ae:	4810      	ldr	r0, [pc, #64]	; (80071f0 <EE_Init+0x374>)
 80071b0:	f00a fa2c 	bl	801160c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80071b4:	480f      	ldr	r0, [pc, #60]	; (80071f4 <EE_Init+0x378>)
 80071b6:	f00a f999 	bl	80114ec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d003      	beq.n	80071c6 <EE_Init+0x34a>
          return pFlash.ErrorCode;
 80071be:	4b0e      	ldr	r3, [pc, #56]	; (80071f8 <EE_Init+0x37c>)
 80071c0:	69dd      	ldr	r5, [r3, #28]
 80071c2:	b2ad      	uxth	r5, r5
 80071c4:	e678      	b.n	8006eb8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80071c6:	480d      	ldr	r0, [pc, #52]	; (80071fc <EE_Init+0x380>)
 80071c8:	f00a fa20 	bl	801160c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80071cc:	4809      	ldr	r0, [pc, #36]	; (80071f4 <EE_Init+0x378>)
 80071ce:	f00a f98d 	bl	80114ec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d105      	bne.n	80071e2 <EE_Init+0x366>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80071d6:	4a05      	ldr	r2, [pc, #20]	; (80071ec <EE_Init+0x370>)
 80071d8:	6913      	ldr	r3, [r2, #16]
 80071da:	2102      	movs	r1, #2
 80071dc:	438b      	bics	r3, r1
 80071de:	6113      	str	r3, [r2, #16]
 80071e0:	e667      	b.n	8006eb2 <EE_Init+0x36>
						return pFlash.ErrorCode;
 80071e2:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <EE_Init+0x37c>)
 80071e4:	69dd      	ldr	r5, [r3, #28]
 80071e6:	b2ad      	uxth	r5, r5
 80071e8:	e666      	b.n	8006eb8 <EE_Init+0x3c>
 80071ea:	46c0      	nop			; (mov r8, r8)
 80071ec:	40022000 	.word	0x40022000
 80071f0:	0801e000 	.word	0x0801e000
 80071f4:	0000c350 	.word	0x0000c350
 80071f8:	20006648 	.word	0x20006648
 80071fc:	0801e800 	.word	0x0801e800

08007200 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	e020      	b.n	8007246 <StartDefaultTask+0x46>
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
		{
			case IND_PING :
				RTOS_IND_blink(200);
 8007204:	2580      	movs	r5, #128	; 0x80
 8007206:	012d      	lsls	r5, r5, #4
 8007208:	2490      	movs	r4, #144	; 0x90
 800720a:	05e4      	lsls	r4, r4, #23
 800720c:	2201      	movs	r2, #1
 800720e:	0029      	movs	r1, r5
 8007210:	0020      	movs	r0, r4
 8007212:	f00a fb2e 	bl	8011872 <HAL_GPIO_WritePin>
 8007216:	20c8      	movs	r0, #200	; 0xc8
 8007218:	f006 ff78 	bl	800e10c <osDelay>
 800721c:	2200      	movs	r2, #0
 800721e:	0029      	movs	r1, r5
 8007220:	0020      	movs	r0, r4
 8007222:	f00a fb26 	bl	8011872 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007226:	4b21      	ldr	r3, [pc, #132]	; (80072ac <StartDefaultTask+0xac>)
 8007228:	2200      	movs	r2, #0
 800722a:	701a      	strb	r2, [r3, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 800722c:	f000 f9d2 	bl	80075d4 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007230:	f7fd fc34 	bl	8004a9c <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 8007234:	4b1e      	ldr	r3, [pc, #120]	; (80072b0 <StartDefaultTask+0xb0>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d102      	bne.n	8007242 <StartDefaultTask+0x42>
 800723c:	4b1d      	ldr	r3, [pc, #116]	; (80072b4 <StartDefaultTask+0xb4>)
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8007242:	f008 fe4d 	bl	800fee0 <vPortYield>
		switch (indMode)
 8007246:	4b19      	ldr	r3, [pc, #100]	; (80072ac <StartDefaultTask+0xac>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d004      	beq.n	8007258 <StartDefaultTask+0x58>
 800724e:	2b03      	cmp	r3, #3
 8007250:	d017      	beq.n	8007282 <StartDefaultTask+0x82>
 8007252:	2b01      	cmp	r3, #1
 8007254:	d1ea      	bne.n	800722c <StartDefaultTask+0x2c>
 8007256:	e7d5      	b.n	8007204 <StartDefaultTask+0x4>
				RTOS_IND_blink(100);
 8007258:	2580      	movs	r5, #128	; 0x80
 800725a:	012d      	lsls	r5, r5, #4
 800725c:	2490      	movs	r4, #144	; 0x90
 800725e:	05e4      	lsls	r4, r4, #23
 8007260:	2201      	movs	r2, #1
 8007262:	0029      	movs	r1, r5
 8007264:	0020      	movs	r0, r4
 8007266:	f00a fb04 	bl	8011872 <HAL_GPIO_WritePin>
 800726a:	2064      	movs	r0, #100	; 0x64
 800726c:	f006 ff4e 	bl	800e10c <osDelay>
 8007270:	2200      	movs	r2, #0
 8007272:	0029      	movs	r1, r5
 8007274:	0020      	movs	r0, r4
 8007276:	f00a fafc 	bl	8011872 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800727a:	4b0c      	ldr	r3, [pc, #48]	; (80072ac <StartDefaultTask+0xac>)
 800727c:	2200      	movs	r2, #0
 800727e:	701a      	strb	r2, [r3, #0]
				break;
 8007280:	e7d4      	b.n	800722c <StartDefaultTask+0x2c>
				RTOS_IND_blink(30);
 8007282:	2580      	movs	r5, #128	; 0x80
 8007284:	012d      	lsls	r5, r5, #4
 8007286:	2490      	movs	r4, #144	; 0x90
 8007288:	05e4      	lsls	r4, r4, #23
 800728a:	2201      	movs	r2, #1
 800728c:	0029      	movs	r1, r5
 800728e:	0020      	movs	r0, r4
 8007290:	f00a faef 	bl	8011872 <HAL_GPIO_WritePin>
 8007294:	201e      	movs	r0, #30
 8007296:	f006 ff39 	bl	800e10c <osDelay>
 800729a:	2200      	movs	r2, #0
 800729c:	0029      	movs	r1, r5
 800729e:	0020      	movs	r0, r4
 80072a0:	f00a fae7 	bl	8011872 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 80072a4:	4b01      	ldr	r3, [pc, #4]	; (80072ac <StartDefaultTask+0xac>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	701a      	strb	r2, [r3, #0]
				break;
 80072aa:	e7bf      	b.n	800722c <StartDefaultTask+0x2c>
 80072ac:	20000714 	.word	0x20000714
 80072b0:	20000d0f 	.word	0x20000d0f
 80072b4:	20000d0e 	.word	0x20000d0e

080072b8 <MX_FREERTOS_Init>:
{
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	b08e      	sub	sp, #56	; 0x38
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 80072bc:	25a0      	movs	r5, #160	; 0xa0
 80072be:	006d      	lsls	r5, r5, #1
 80072c0:	2400      	movs	r4, #0
 80072c2:	9403      	str	r4, [sp, #12]
 80072c4:	9402      	str	r4, [sp, #8]
 80072c6:	4b53      	ldr	r3, [pc, #332]	; (8007414 <MX_FREERTOS_Init+0x15c>)
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	2603      	movs	r6, #3
 80072cc:	9600      	str	r6, [sp, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	002a      	movs	r2, r5
 80072d2:	4951      	ldr	r1, [pc, #324]	; (8007418 <MX_FREERTOS_Init+0x160>)
 80072d4:	4851      	ldr	r0, [pc, #324]	; (800741c <MX_FREERTOS_Init+0x164>)
 80072d6:	f007 fdad 	bl	800ee34 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 80072da:	9403      	str	r4, [sp, #12]
 80072dc:	9402      	str	r4, [sp, #8]
 80072de:	4b50      	ldr	r3, [pc, #320]	; (8007420 <MX_FREERTOS_Init+0x168>)
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	9600      	str	r6, [sp, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	002a      	movs	r2, r5
 80072e8:	494e      	ldr	r1, [pc, #312]	; (8007424 <MX_FREERTOS_Init+0x16c>)
 80072ea:	484f      	ldr	r0, [pc, #316]	; (8007428 <MX_FREERTOS_Init+0x170>)
 80072ec:	f007 fda2 	bl	800ee34 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 80072f0:	9403      	str	r4, [sp, #12]
 80072f2:	9402      	str	r4, [sp, #8]
 80072f4:	4b4d      	ldr	r3, [pc, #308]	; (800742c <MX_FREERTOS_Init+0x174>)
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	9600      	str	r6, [sp, #0]
 80072fa:	2300      	movs	r3, #0
 80072fc:	002a      	movs	r2, r5
 80072fe:	494c      	ldr	r1, [pc, #304]	; (8007430 <MX_FREERTOS_Init+0x178>)
 8007300:	484c      	ldr	r0, [pc, #304]	; (8007434 <MX_FREERTOS_Init+0x17c>)
 8007302:	f007 fd97 	bl	800ee34 <xTaskGenericCreate>
	vRegisterCLICommands();
 8007306:	f7ff fa81 	bl	800680c <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 800730a:	9403      	str	r4, [sp, #12]
 800730c:	9402      	str	r4, [sp, #8]
 800730e:	4b4a      	ldr	r3, [pc, #296]	; (8007438 <MX_FREERTOS_Init+0x180>)
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	9600      	str	r6, [sp, #0]
 8007314:	2300      	movs	r3, #0
 8007316:	002a      	movs	r2, r5
 8007318:	4948      	ldr	r1, [pc, #288]	; (800743c <MX_FREERTOS_Init+0x184>)
 800731a:	4849      	ldr	r0, [pc, #292]	; (8007440 <MX_FREERTOS_Init+0x188>)
 800731c:	f007 fd8a 	bl	800ee34 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 8007320:	4d48      	ldr	r5, [pc, #288]	; (8007444 <MX_FREERTOS_Init+0x18c>)
 8007322:	9403      	str	r4, [sp, #12]
 8007324:	9402      	str	r4, [sp, #8]
 8007326:	4b48      	ldr	r3, [pc, #288]	; (8007448 <MX_FREERTOS_Init+0x190>)
 8007328:	9301      	str	r3, [sp, #4]
 800732a:	3601      	adds	r6, #1
 800732c:	9600      	str	r6, [sp, #0]
 800732e:	2301      	movs	r3, #1
 8007330:	22a0      	movs	r2, #160	; 0xa0
 8007332:	4946      	ldr	r1, [pc, #280]	; (800744c <MX_FREERTOS_Init+0x194>)
 8007334:	0028      	movs	r0, r5
 8007336:	f007 fd7d 	bl	800ee34 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 800733a:	9403      	str	r4, [sp, #12]
 800733c:	9402      	str	r4, [sp, #8]
 800733e:	4b44      	ldr	r3, [pc, #272]	; (8007450 <MX_FREERTOS_Init+0x198>)
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	9600      	str	r6, [sp, #0]
 8007344:	2302      	movs	r3, #2
 8007346:	22a0      	movs	r2, #160	; 0xa0
 8007348:	4942      	ldr	r1, [pc, #264]	; (8007454 <MX_FREERTOS_Init+0x19c>)
 800734a:	0028      	movs	r0, r5
 800734c:	f007 fd72 	bl	800ee34 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8007350:	9403      	str	r4, [sp, #12]
 8007352:	9402      	str	r4, [sp, #8]
 8007354:	4b40      	ldr	r3, [pc, #256]	; (8007458 <MX_FREERTOS_Init+0x1a0>)
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	9600      	str	r6, [sp, #0]
 800735a:	2303      	movs	r3, #3
 800735c:	22a0      	movs	r2, #160	; 0xa0
 800735e:	493f      	ldr	r1, [pc, #252]	; (800745c <MX_FREERTOS_Init+0x1a4>)
 8007360:	0028      	movs	r0, r5
 8007362:	f007 fd67 	bl	800ee34 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 8007366:	9403      	str	r4, [sp, #12]
 8007368:	9402      	str	r4, [sp, #8]
 800736a:	4b3d      	ldr	r3, [pc, #244]	; (8007460 <MX_FREERTOS_Init+0x1a8>)
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	9600      	str	r6, [sp, #0]
 8007370:	2304      	movs	r3, #4
 8007372:	22a0      	movs	r2, #160	; 0xa0
 8007374:	493b      	ldr	r1, [pc, #236]	; (8007464 <MX_FREERTOS_Init+0x1ac>)
 8007376:	0028      	movs	r0, r5
 8007378:	f007 fd5c 	bl	800ee34 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 800737c:	9403      	str	r4, [sp, #12]
 800737e:	9402      	str	r4, [sp, #8]
 8007380:	4b39      	ldr	r3, [pc, #228]	; (8007468 <MX_FREERTOS_Init+0x1b0>)
 8007382:	9301      	str	r3, [sp, #4]
 8007384:	9600      	str	r6, [sp, #0]
 8007386:	2305      	movs	r3, #5
 8007388:	22a0      	movs	r2, #160	; 0xa0
 800738a:	4938      	ldr	r1, [pc, #224]	; (800746c <MX_FREERTOS_Init+0x1b4>)
 800738c:	0028      	movs	r0, r5
 800738e:	f007 fd51 	bl	800ee34 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 8007392:	940d      	str	r4, [sp, #52]	; 0x34
 8007394:	2101      	movs	r1, #1
 8007396:	a80d      	add	r0, sp, #52	; 0x34
 8007398:	f006 fec0 	bl	800e11c <osSemaphoreCreate>
 800739c:	4e34      	ldr	r6, [pc, #208]	; (8007470 <MX_FREERTOS_Init+0x1b8>)
 800739e:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 80073a0:	940c      	str	r4, [sp, #48]	; 0x30
 80073a2:	2101      	movs	r1, #1
 80073a4:	a80c      	add	r0, sp, #48	; 0x30
 80073a6:	f006 feb9 	bl	800e11c <osSemaphoreCreate>
 80073aa:	4d32      	ldr	r5, [pc, #200]	; (8007474 <MX_FREERTOS_Init+0x1bc>)
 80073ac:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 80073ae:	940b      	str	r4, [sp, #44]	; 0x2c
 80073b0:	2101      	movs	r1, #1
 80073b2:	a80b      	add	r0, sp, #44	; 0x2c
 80073b4:	f006 feb2 	bl	800e11c <osSemaphoreCreate>
 80073b8:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 80073ba:	940a      	str	r4, [sp, #40]	; 0x28
 80073bc:	2101      	movs	r1, #1
 80073be:	a80a      	add	r0, sp, #40	; 0x28
 80073c0:	f006 feac 	bl	800e11c <osSemaphoreCreate>
 80073c4:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 80073c6:	9409      	str	r4, [sp, #36]	; 0x24
 80073c8:	2101      	movs	r1, #1
 80073ca:	a809      	add	r0, sp, #36	; 0x24
 80073cc:	f006 fea6 	bl	800e11c <osSemaphoreCreate>
 80073d0:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 80073d2:	9408      	str	r4, [sp, #32]
 80073d4:	2101      	movs	r1, #1
 80073d6:	a808      	add	r0, sp, #32
 80073d8:	f006 fea0 	bl	800e11c <osSemaphoreCreate>
 80073dc:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 80073de:	9407      	str	r4, [sp, #28]
 80073e0:	2101      	movs	r1, #1
 80073e2:	a807      	add	r0, sp, #28
 80073e4:	f006 fe9a 	bl	800e11c <osSemaphoreCreate>
 80073e8:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 80073ea:	9406      	str	r4, [sp, #24]
 80073ec:	2101      	movs	r1, #1
 80073ee:	a806      	add	r0, sp, #24
 80073f0:	f006 fe94 	bl	800e11c <osSemaphoreCreate>
 80073f4:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 80073f6:	9405      	str	r4, [sp, #20]
 80073f8:	2101      	movs	r1, #1
 80073fa:	a805      	add	r0, sp, #20
 80073fc:	f006 fe8e 	bl	800e11c <osSemaphoreCreate>
 8007400:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 8007402:	9404      	str	r4, [sp, #16]
 8007404:	2101      	movs	r1, #1
 8007406:	a804      	add	r0, sp, #16
 8007408:	f006 fe88 	bl	800e11c <osSemaphoreCreate>
 800740c:	6168      	str	r0, [r5, #20]
}
 800740e:	b00e      	add	sp, #56	; 0x38
 8007410:	bd70      	pop	{r4, r5, r6, pc}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	20000cc4 	.word	0x20000cc4
 8007418:	080197fc 	.word	0x080197fc
 800741c:	08007201 	.word	0x08007201
 8007420:	20000ca8 	.word	0x20000ca8
 8007424:	08019808 	.word	0x08019808
 8007428:	080087a5 	.word	0x080087a5
 800742c:	20000cc0 	.word	0x20000cc0
 8007430:	08019814 	.word	0x08019814
 8007434:	080132d7 	.word	0x080132d7
 8007438:	20000ccc 	.word	0x20000ccc
 800743c:	08019820 	.word	0x08019820
 8007440:	08004745 	.word	0x08004745
 8007444:	08008b29 	.word	0x08008b29
 8007448:	20000cac 	.word	0x20000cac
 800744c:	08019828 	.word	0x08019828
 8007450:	20000cb0 	.word	0x20000cb0
 8007454:	08019834 	.word	0x08019834
 8007458:	20000cb4 	.word	0x20000cb4
 800745c:	08019840 	.word	0x08019840
 8007460:	20000cb8 	.word	0x20000cb8
 8007464:	0801984c 	.word	0x0801984c
 8007468:	20000cbc 	.word	0x20000cbc
 800746c:	08019858 	.word	0x08019858
 8007470:	200061e4 	.word	0x200061e4
 8007474:	200061c8 	.word	0x200061c8

08007478 <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 8007478:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800747a:	4b04      	ldr	r3, [pc, #16]	; (800748c <vMainConfigureTimerForRunTimeStats+0x14>)
 800747c:	6818      	ldr	r0, [r3, #0]
 800747e:	4904      	ldr	r1, [pc, #16]	; (8007490 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007480:	f7f8 fe5c 	bl	800013c <__udivsi3>
 8007484:	4b03      	ldr	r3, [pc, #12]	; (8007494 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007486:	6018      	str	r0, [r3, #0]
}
 8007488:	bd10      	pop	{r4, pc}
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	200000c8 	.word	0x200000c8
 8007490:	00002710 	.word	0x00002710
 8007494:	20000cc8 	.word	0x20000cc8

08007498 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 8007498:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800749a:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <ulMainGetRunTimeCounterValue+0x40>)
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	21fa      	movs	r1, #250	; 0xfa
 80074a0:	0089      	lsls	r1, r1, #2
 80074a2:	f7f8 fe4b 	bl	800013c <__udivsi3>
 80074a6:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <ulMainGetRunTimeCounterValue+0x44>)
 80074aa:	681c      	ldr	r4, [r3, #0]
 80074ac:	1b2c      	subs	r4, r5, r4

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 80074ae:	f007 fdeb 	bl	800f088 <xTaskGetTickCountFromISR>

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 80074b2:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <ulMainGetRunTimeCounterValue+0x48>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	015b      	lsls	r3, r3, #5
 80074b8:	d503      	bpl.n	80074c2 <ulMainGetRunTimeCounterValue+0x2a>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 80074ba:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80074bc:	4b07      	ldr	r3, [pc, #28]	; (80074dc <ulMainGetRunTimeCounterValue+0x44>)
 80074be:	681c      	ldr	r4, [r3, #0]
 80074c0:	1b2c      	subs	r4, r5, r4
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 80074c2:	0083      	lsls	r3, r0, #2
 80074c4:	1818      	adds	r0, r3, r0
 80074c6:	0045      	lsls	r5, r0, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <ulMainGetRunTimeCounterValue+0x4c>)
 80074ca:	6819      	ldr	r1, [r3, #0]
 80074cc:	0020      	movs	r0, r4
 80074ce:	f7f8 fe35 	bl	800013c <__udivsi3>
 80074d2:	1940      	adds	r0, r0, r5

	return ulReturn;
}
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	200000c8 	.word	0x200000c8
 80074dc:	e000e018 	.word	0xe000e018
 80074e0:	e000ed04 	.word	0xe000ed04
 80074e4:	20000cc8 	.word	0x20000cc8

080074e8 <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 80074e8:	4770      	bx	lr

080074ea <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 80074ea:	4770      	bx	lr

080074ec <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 80074ec:	4770      	bx	lr

080074ee <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 80074ee:	4770      	bx	lr

080074f0 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 80074f0:	4770      	bx	lr

080074f2 <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 80074f2:	4770      	bx	lr

080074f4 <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 80074f4:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80074f6:	00c2      	lsls	r2, r0, #3
 80074f8:	1812      	adds	r2, r2, r0
 80074fa:	4b18      	ldr	r3, [pc, #96]	; (800755c <CheckForTimedButtonPress+0x68>)
 80074fc:	189b      	adds	r3, r3, r2
 80074fe:	789a      	ldrb	r2, [r3, #2]
 8007500:	78de      	ldrb	r6, [r3, #3]
 8007502:	791c      	ldrb	r4, [r3, #4]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	1a89      	subs	r1, r1, r2
 8007508:	0089      	lsls	r1, r1, #2
 800750a:	1889      	adds	r1, r1, r2
 800750c:	00cd      	lsls	r5, r1, #3
 800750e:	0172      	lsls	r2, r6, #5
 8007510:	1b92      	subs	r2, r2, r6
 8007512:	0092      	lsls	r2, r2, #2
 8007514:	1992      	adds	r2, r2, r6
 8007516:	00d3      	lsls	r3, r2, #3
 8007518:	001a      	movs	r2, r3
 800751a:	0163      	lsls	r3, r4, #5
 800751c:	1b1b      	subs	r3, r3, r4
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	191b      	adds	r3, r3, r4
 8007522:	00d9      	lsls	r1, r3, #3
	
	if (pressCounter[port] == t1)	
 8007524:	0084      	lsls	r4, r0, #2
 8007526:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <CheckForTimedButtonPress+0x6c>)
 8007528:	58e3      	ldr	r3, [r4, r3]
 800752a:	42ab      	cmp	r3, r5
 800752c:	d009      	beq.n	8007542 <CheckForTimedButtonPress+0x4e>
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 800752e:	4293      	cmp	r3, r2
 8007530:	d00e      	beq.n	8007550 <CheckForTimedButtonPress+0x5c>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 8007532:	428b      	cmp	r3, r1
 8007534:	d10a      	bne.n	800754c <CheckForTimedButtonPress+0x58>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 8007536:	00c3      	lsls	r3, r0, #3
 8007538:	1818      	adds	r0, r3, r0
 800753a:	4b08      	ldr	r3, [pc, #32]	; (800755c <CheckForTimedButtonPress+0x68>)
 800753c:	220a      	movs	r2, #10
 800753e:	54c2      	strb	r2, [r0, r3]
 8007540:	e004      	b.n	800754c <CheckForTimedButtonPress+0x58>
		button[port].state = PRESSED_FOR_X1_SEC;
 8007542:	00c3      	lsls	r3, r0, #3
 8007544:	1818      	adds	r0, r3, r0
 8007546:	4b05      	ldr	r3, [pc, #20]	; (800755c <CheckForTimedButtonPress+0x68>)
 8007548:	2209      	movs	r2, #9
 800754a:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 800754c:	2000      	movs	r0, #0
 800754e:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8007550:	00c3      	lsls	r3, r0, #3
 8007552:	1818      	adds	r0, r3, r0
 8007554:	4b01      	ldr	r3, [pc, #4]	; (800755c <CheckForTimedButtonPress+0x68>)
 8007556:	220a      	movs	r2, #10
 8007558:	54c2      	strb	r2, [r0, r3]
 800755a:	e7f7      	b.n	800754c <CheckForTimedButtonPress+0x58>
 800755c:	20000cd0 	.word	0x20000cd0
 8007560:	20000d10 	.word	0x20000d10

08007564 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 8007564:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8007566:	00c2      	lsls	r2, r0, #3
 8007568:	1812      	adds	r2, r2, r0
 800756a:	4b18      	ldr	r3, [pc, #96]	; (80075cc <CheckForTimedButtonRelease+0x68>)
 800756c:	189b      	adds	r3, r3, r2
 800756e:	795a      	ldrb	r2, [r3, #5]
 8007570:	799e      	ldrb	r6, [r3, #6]
 8007572:	79dc      	ldrb	r4, [r3, #7]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	1a89      	subs	r1, r1, r2
 8007578:	0089      	lsls	r1, r1, #2
 800757a:	1889      	adds	r1, r1, r2
 800757c:	00cd      	lsls	r5, r1, #3
 800757e:	0172      	lsls	r2, r6, #5
 8007580:	1b92      	subs	r2, r2, r6
 8007582:	0092      	lsls	r2, r2, #2
 8007584:	1992      	adds	r2, r2, r6
 8007586:	00d3      	lsls	r3, r2, #3
 8007588:	001a      	movs	r2, r3
 800758a:	0163      	lsls	r3, r4, #5
 800758c:	1b1b      	subs	r3, r3, r4
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	191b      	adds	r3, r3, r4
 8007592:	00d9      	lsls	r1, r3, #3
	
	if (releaseCounter[port] == t1)	
 8007594:	0084      	lsls	r4, r0, #2
 8007596:	4b0e      	ldr	r3, [pc, #56]	; (80075d0 <CheckForTimedButtonRelease+0x6c>)
 8007598:	58e3      	ldr	r3, [r4, r3]
 800759a:	42ab      	cmp	r3, r5
 800759c:	d009      	beq.n	80075b2 <CheckForTimedButtonRelease+0x4e>
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00e      	beq.n	80075c0 <CheckForTimedButtonRelease+0x5c>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 80075a2:	428b      	cmp	r3, r1
 80075a4:	d10a      	bne.n	80075bc <CheckForTimedButtonRelease+0x58>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 80075a6:	00c3      	lsls	r3, r0, #3
 80075a8:	1818      	adds	r0, r3, r0
 80075aa:	4b08      	ldr	r3, [pc, #32]	; (80075cc <CheckForTimedButtonRelease+0x68>)
 80075ac:	220d      	movs	r2, #13
 80075ae:	54c2      	strb	r2, [r0, r3]
 80075b0:	e004      	b.n	80075bc <CheckForTimedButtonRelease+0x58>
		button[port].state = RELEASED_FOR_Y1_SEC;
 80075b2:	00c3      	lsls	r3, r0, #3
 80075b4:	1818      	adds	r0, r3, r0
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <CheckForTimedButtonRelease+0x68>)
 80075b8:	220c      	movs	r2, #12
 80075ba:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 80075bc:	2000      	movs	r0, #0
 80075be:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 80075c0:	00c3      	lsls	r3, r0, #3
 80075c2:	1818      	adds	r0, r3, r0
 80075c4:	4b01      	ldr	r3, [pc, #4]	; (80075cc <CheckForTimedButtonRelease+0x68>)
 80075c6:	220d      	movs	r2, #13
 80075c8:	54c2      	strb	r2, [r0, r3]
 80075ca:	e7f7      	b.n	80075bc <CheckForTimedButtonRelease+0x58>
 80075cc:	20000cd0 	.word	0x20000cd0
 80075d0:	20000d28 	.word	0x20000d28

080075d4 <CheckAttachedButtons>:
{
 80075d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d6:	46ce      	mov	lr, r9
 80075d8:	4647      	mov	r7, r8
 80075da:	b580      	push	{r7, lr}
 80075dc:	b087      	sub	sp, #28
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80075de:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 80075e0:	2600      	movs	r6, #0
 80075e2:	2300      	movs	r3, #0
 80075e4:	4698      	mov	r8, r3
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80075e6:	e11e      	b.n	8007826 <CheckAttachedButtons+0x252>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 80075e8:	230e      	movs	r3, #14
 80075ea:	446b      	add	r3, sp
 80075ec:	8819      	ldrh	r1, [r3, #0]
 80075ee:	2201      	movs	r2, #1
 80075f0:	9805      	ldr	r0, [sp, #20]
 80075f2:	f00a f93e 	bl	8011872 <HAL_GPIO_WritePin>
 80075f6:	200a      	movs	r0, #10
 80075f8:	f006 fa8e 	bl	800db18 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 80075fc:	ab03      	add	r3, sp, #12
 80075fe:	8819      	ldrh	r1, [r3, #0]
 8007600:	9804      	ldr	r0, [sp, #16]
 8007602:	f00a f92f 	bl	8011864 <HAL_GPIO_ReadPin>
 8007606:	4680      	mov	r8, r0
 8007608:	e13b      	b.n	8007882 <CheckAttachedButtons+0x2ae>
			switch (button[i].type)
 800760a:	2b01      	cmp	r3, #1
 800760c:	d104      	bne.n	8007618 <CheckAttachedButtons+0x44>
					if (connected == GPIO_PIN_SET)	
 800760e:	4643      	mov	r3, r8
 8007610:	2b01      	cmp	r3, #1
 8007612:	d043      	beq.n	800769c <CheckAttachedButtons+0xc8>
					else if (connected == GPIO_PIN_RESET)
 8007614:	2b00      	cmp	r3, #0
 8007616:	d03b      	beq.n	8007690 <CheckAttachedButtons+0xbc>
			if (state == CLOSED || state == ON)												
 8007618:	2e04      	cmp	r6, #4
 800761a:	d040      	beq.n	800769e <CheckAttachedButtons+0xca>
 800761c:	2e02      	cmp	r6, #2
 800761e:	d03e      	beq.n	800769e <CheckAttachedButtons+0xca>
			if (state == OPEN || state == OFF)												
 8007620:	2e03      	cmp	r6, #3
 8007622:	d04e      	beq.n	80076c2 <CheckAttachedButtons+0xee>
 8007624:	2e01      	cmp	r6, #1
 8007626:	d04c      	beq.n	80076c2 <CheckAttachedButtons+0xee>
			if (pressCounter[i] < BOS.buttons.debounce) 									
 8007628:	00ab      	lsls	r3, r5, #2
 800762a:	4abc      	ldr	r2, [pc, #752]	; (800791c <CheckAttachedButtons+0x348>)
 800762c:	589b      	ldr	r3, [r3, r2]
 800762e:	4abc      	ldr	r2, [pc, #752]	; (8007920 <CheckAttachedButtons+0x34c>)
 8007630:	8812      	ldrh	r2, [r2, #0]
 8007632:	4293      	cmp	r3, r2
 8007634:	d200      	bcs.n	8007638 <CheckAttachedButtons+0x64>
 8007636:	e099      	b.n	800776c <CheckAttachedButtons+0x198>
				if (pressCounter[i] == BOS.buttons.debounce)
 8007638:	d06c      	beq.n	8007714 <CheckAttachedButtons+0x140>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800763a:	00ab      	lsls	r3, r5, #2
 800763c:	49b9      	ldr	r1, [pc, #740]	; (8007924 <CheckAttachedButtons+0x350>)
 800763e:	585b      	ldr	r3, [r3, r1]
 8007640:	429a      	cmp	r2, r3
 8007642:	d203      	bcs.n	800764c <CheckAttachedButtons+0x78>
					releaseCounter[i] = 0;					
 8007644:	00ab      	lsls	r3, r5, #2
 8007646:	000a      	movs	r2, r1
 8007648:	2100      	movs	r1, #0
 800764a:	5099      	str	r1, [r3, r2]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 800764c:	00ab      	lsls	r3, r5, #2
 800764e:	4ab3      	ldr	r2, [pc, #716]	; (800791c <CheckAttachedButtons+0x348>)
 8007650:	589b      	ldr	r3, [r3, r2]
 8007652:	4ab3      	ldr	r2, [pc, #716]	; (8007920 <CheckAttachedButtons+0x34c>)
 8007654:	8852      	ldrh	r2, [r2, #2]
 8007656:	4293      	cmp	r3, r2
 8007658:	d979      	bls.n	800774e <CheckAttachedButtons+0x17a>
 800765a:	22f4      	movs	r2, #244	; 0xf4
 800765c:	32ff      	adds	r2, #255	; 0xff
 800765e:	4293      	cmp	r3, r2
 8007660:	d875      	bhi.n	800774e <CheckAttachedButtons+0x17a>
					if (clicked == 0)
 8007662:	4bb1      	ldr	r3, [pc, #708]	; (8007928 <CheckAttachedButtons+0x354>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d15e      	bne.n	8007728 <CheckAttachedButtons+0x154>
						clicked = 1;																					// Record a possible single click 
 800766a:	4baf      	ldr	r3, [pc, #700]	; (8007928 <CheckAttachedButtons+0x354>)
 800766c:	3af3      	subs	r2, #243	; 0xf3
 800766e:	3aff      	subs	r2, #255	; 0xff
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	e07b      	b.n	800776c <CheckAttachedButtons+0x198>
					if (connected == GPIO_PIN_SET)	
 8007674:	4643      	mov	r3, r8
 8007676:	2b01      	cmp	r3, #1
 8007678:	d01c      	beq.n	80076b4 <CheckAttachedButtons+0xe0>
					else if (connected == GPIO_PIN_RESET) 
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1cc      	bne.n	8007618 <CheckAttachedButtons+0x44>
						state = OPEN;	
 800767e:	2603      	movs	r6, #3
 8007680:	e7cc      	b.n	800761c <CheckAttachedButtons+0x48>
					if (connected == GPIO_PIN_SET)	
 8007682:	4643      	mov	r3, r8
 8007684:	2b01      	cmp	r3, #1
 8007686:	d005      	beq.n	8007694 <CheckAttachedButtons+0xc0>
					else if (connected == GPIO_PIN_RESET) 
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1c5      	bne.n	8007618 <CheckAttachedButtons+0x44>
						state = OFF;
 800768c:	2601      	movs	r6, #1
 800768e:	e7c5      	b.n	800761c <CheckAttachedButtons+0x48>
						state = OPEN;			
 8007690:	2603      	movs	r6, #3
 8007692:	e7c3      	b.n	800761c <CheckAttachedButtons+0x48>
						state = ON;
 8007694:	2602      	movs	r6, #2
 8007696:	e7c1      	b.n	800761c <CheckAttachedButtons+0x48>
						state = OFF;
 8007698:	4646      	mov	r6, r8
 800769a:	e7bf      	b.n	800761c <CheckAttachedButtons+0x48>
						state = CLOSED;
 800769c:	2604      	movs	r6, #4
				if (pressCounter[i] < 0xFFFF)	
 800769e:	00ab      	lsls	r3, r5, #2
 80076a0:	4a9e      	ldr	r2, [pc, #632]	; (800791c <CheckAttachedButtons+0x348>)
 80076a2:	589b      	ldr	r3, [r3, r2]
 80076a4:	4aa1      	ldr	r2, [pc, #644]	; (800792c <CheckAttachedButtons+0x358>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d806      	bhi.n	80076b8 <CheckAttachedButtons+0xe4>
					++pressCounter[i];																			// Advance the debounce counter
 80076aa:	00aa      	lsls	r2, r5, #2
 80076ac:	3301      	adds	r3, #1
 80076ae:	499b      	ldr	r1, [pc, #620]	; (800791c <CheckAttachedButtons+0x348>)
 80076b0:	5053      	str	r3, [r2, r1]
 80076b2:	e7b5      	b.n	8007620 <CheckAttachedButtons+0x4c>
						state = CLOSED;
 80076b4:	2604      	movs	r6, #4
 80076b6:	e7f2      	b.n	800769e <CheckAttachedButtons+0xca>
					pressCounter[i] = 0;																		// Reset debounce counter					
 80076b8:	00ab      	lsls	r3, r5, #2
 80076ba:	4a98      	ldr	r2, [pc, #608]	; (800791c <CheckAttachedButtons+0x348>)
 80076bc:	2100      	movs	r1, #0
 80076be:	5099      	str	r1, [r3, r2]
 80076c0:	e7ae      	b.n	8007620 <CheckAttachedButtons+0x4c>
				if (releaseCounter[i] < 0xFFFF)
 80076c2:	00ab      	lsls	r3, r5, #2
 80076c4:	4a97      	ldr	r2, [pc, #604]	; (8007924 <CheckAttachedButtons+0x350>)
 80076c6:	589b      	ldr	r3, [r3, r2]
 80076c8:	4a98      	ldr	r2, [pc, #608]	; (800792c <CheckAttachedButtons+0x358>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d813      	bhi.n	80076f6 <CheckAttachedButtons+0x122>
					++releaseCounter[i];																		// Advance the debounce counter
 80076ce:	00aa      	lsls	r2, r5, #2
 80076d0:	3301      	adds	r3, #1
 80076d2:	4994      	ldr	r1, [pc, #592]	; (8007924 <CheckAttachedButtons+0x350>)
 80076d4:	5053      	str	r3, [r2, r1]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80076d6:	4b94      	ldr	r3, [pc, #592]	; (8007928 <CheckAttachedButtons+0x354>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d010      	beq.n	8007700 <CheckAttachedButtons+0x12c>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 80076de:	4b94      	ldr	r3, [pc, #592]	; (8007930 <CheckAttachedButtons+0x35c>)
 80076e0:	5d5a      	ldrb	r2, [r3, r5]
 80076e2:	4b8f      	ldr	r3, [pc, #572]	; (8007920 <CheckAttachedButtons+0x34c>)
 80076e4:	795b      	ldrb	r3, [r3, #5]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d99e      	bls.n	8007628 <CheckAttachedButtons+0x54>
					clicked = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	4a8e      	ldr	r2, [pc, #568]	; (8007928 <CheckAttachedButtons+0x354>)
 80076ee:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 80076f0:	4a8f      	ldr	r2, [pc, #572]	; (8007930 <CheckAttachedButtons+0x35c>)
 80076f2:	5553      	strb	r3, [r2, r5]
 80076f4:	e798      	b.n	8007628 <CheckAttachedButtons+0x54>
					releaseCounter[i] = 0;																	// Reset debounce counter		
 80076f6:	00ab      	lsls	r3, r5, #2
 80076f8:	4a8a      	ldr	r2, [pc, #552]	; (8007924 <CheckAttachedButtons+0x350>)
 80076fa:	2100      	movs	r1, #0
 80076fc:	5099      	str	r1, [r3, r2]
 80076fe:	e7ea      	b.n	80076d6 <CheckAttachedButtons+0x102>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8007700:	4b8b      	ldr	r3, [pc, #556]	; (8007930 <CheckAttachedButtons+0x35c>)
 8007702:	5d5b      	ldrb	r3, [r3, r5]
 8007704:	4a86      	ldr	r2, [pc, #536]	; (8007920 <CheckAttachedButtons+0x34c>)
 8007706:	7952      	ldrb	r2, [r2, #5]
 8007708:	4293      	cmp	r3, r2
 800770a:	d8e8      	bhi.n	80076de <CheckAttachedButtons+0x10a>
					++dblCounter[i];			
 800770c:	3301      	adds	r3, #1
 800770e:	4a88      	ldr	r2, [pc, #544]	; (8007930 <CheckAttachedButtons+0x35c>)
 8007710:	5553      	strb	r3, [r2, r5]
 8007712:	e789      	b.n	8007628 <CheckAttachedButtons+0x54>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 8007714:	00e9      	lsls	r1, r5, #3
 8007716:	1949      	adds	r1, r1, r5
 8007718:	4886      	ldr	r0, [pc, #536]	; (8007934 <CheckAttachedButtons+0x360>)
 800771a:	2707      	movs	r7, #7
 800771c:	540f      	strb	r7, [r1, r0]
					++pressCounter[i];
 800771e:	00a9      	lsls	r1, r5, #2
 8007720:	3301      	adds	r3, #1
 8007722:	487e      	ldr	r0, [pc, #504]	; (800791c <CheckAttachedButtons+0x348>)
 8007724:	500b      	str	r3, [r1, r0]
 8007726:	e788      	b.n	800763a <CheckAttachedButtons+0x66>
					else if (clicked == 2) {
 8007728:	2b02      	cmp	r3, #2
 800772a:	d11f      	bne.n	800776c <CheckAttachedButtons+0x198>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 800772c:	4b80      	ldr	r3, [pc, #512]	; (8007930 <CheckAttachedButtons+0x35c>)
 800772e:	5d5b      	ldrb	r3, [r3, r5]
 8007730:	4a7b      	ldr	r2, [pc, #492]	; (8007920 <CheckAttachedButtons+0x34c>)
 8007732:	7912      	ldrb	r2, [r2, #4]
 8007734:	4293      	cmp	r3, r2
 8007736:	d919      	bls.n	800776c <CheckAttachedButtons+0x198>
 8007738:	4a79      	ldr	r2, [pc, #484]	; (8007920 <CheckAttachedButtons+0x34c>)
 800773a:	7952      	ldrb	r2, [r2, #5]
 800773c:	4293      	cmp	r3, r2
 800773e:	d215      	bcs.n	800776c <CheckAttachedButtons+0x198>
							clicked = 3;																				// Record a possible double click 
 8007740:	4b79      	ldr	r3, [pc, #484]	; (8007928 <CheckAttachedButtons+0x354>)
 8007742:	2203      	movs	r2, #3
 8007744:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 8007746:	4b7a      	ldr	r3, [pc, #488]	; (8007930 <CheckAttachedButtons+0x35c>)
 8007748:	2200      	movs	r2, #0
 800774a:	555a      	strb	r2, [r3, r5]
 800774c:	e00e      	b.n	800776c <CheckAttachedButtons+0x198>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 800774e:	3bf5      	subs	r3, #245	; 0xf5
 8007750:	3bff      	subs	r3, #255	; 0xff
 8007752:	4a79      	ldr	r2, [pc, #484]	; (8007938 <CheckAttachedButtons+0x364>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d809      	bhi.n	800776c <CheckAttachedButtons+0x198>
					if (clicked)	clicked = 0;															// Cannot be a click
 8007758:	4b73      	ldr	r3, [pc, #460]	; (8007928 <CheckAttachedButtons+0x354>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <CheckAttachedButtons+0x192>
 8007760:	4b71      	ldr	r3, [pc, #452]	; (8007928 <CheckAttachedButtons+0x354>)
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8007766:	0020      	movs	r0, r4
 8007768:	f7ff fec4 	bl	80074f4 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 800776c:	00ab      	lsls	r3, r5, #2
 800776e:	4a6d      	ldr	r2, [pc, #436]	; (8007924 <CheckAttachedButtons+0x350>)
 8007770:	589b      	ldr	r3, [r3, r2]
 8007772:	4a6b      	ldr	r2, [pc, #428]	; (8007920 <CheckAttachedButtons+0x34c>)
 8007774:	8812      	ldrh	r2, [r2, #0]
 8007776:	4293      	cmp	r3, r2
 8007778:	d33b      	bcc.n	80077f2 <CheckAttachedButtons+0x21e>
				if (releaseCounter[i] == BOS.buttons.debounce)
 800777a:	d022      	beq.n	80077c2 <CheckAttachedButtons+0x1ee>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800777c:	00ab      	lsls	r3, r5, #2
 800777e:	4967      	ldr	r1, [pc, #412]	; (800791c <CheckAttachedButtons+0x348>)
 8007780:	585b      	ldr	r3, [r3, r1]
 8007782:	429a      	cmp	r2, r3
 8007784:	d203      	bcs.n	800778e <CheckAttachedButtons+0x1ba>
					pressCounter[i] = 0;				
 8007786:	00ab      	lsls	r3, r5, #2
 8007788:	000a      	movs	r2, r1
 800778a:	2100      	movs	r1, #0
 800778c:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 800778e:	00ab      	lsls	r3, r5, #2
 8007790:	4a64      	ldr	r2, [pc, #400]	; (8007924 <CheckAttachedButtons+0x350>)
 8007792:	589b      	ldr	r3, [r3, r2]
 8007794:	4a62      	ldr	r2, [pc, #392]	; (8007920 <CheckAttachedButtons+0x34c>)
 8007796:	8852      	ldrh	r2, [r2, #2]
 8007798:	4293      	cmp	r3, r2
 800779a:	d925      	bls.n	80077e8 <CheckAttachedButtons+0x214>
 800779c:	22f4      	movs	r2, #244	; 0xf4
 800779e:	32ff      	adds	r2, #255	; 0xff
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d821      	bhi.n	80077e8 <CheckAttachedButtons+0x214>
					if (clicked == 1)
 80077a4:	4b60      	ldr	r3, [pc, #384]	; (8007928 <CheckAttachedButtons+0x354>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d014      	beq.n	80077d6 <CheckAttachedButtons+0x202>
					else if (clicked == 3)
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d120      	bne.n	80077f2 <CheckAttachedButtons+0x21e>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 80077b0:	00eb      	lsls	r3, r5, #3
 80077b2:	195b      	adds	r3, r3, r5
 80077b4:	4a5f      	ldr	r2, [pc, #380]	; (8007934 <CheckAttachedButtons+0x360>)
 80077b6:	2106      	movs	r1, #6
 80077b8:	5499      	strb	r1, [r3, r2]
						clicked = 0;																					// Prepare for a single click					
 80077ba:	4b5b      	ldr	r3, [pc, #364]	; (8007928 <CheckAttachedButtons+0x354>)
 80077bc:	2200      	movs	r2, #0
 80077be:	701a      	strb	r2, [r3, #0]
 80077c0:	e017      	b.n	80077f2 <CheckAttachedButtons+0x21e>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 80077c2:	00e9      	lsls	r1, r5, #3
 80077c4:	1949      	adds	r1, r1, r5
 80077c6:	485b      	ldr	r0, [pc, #364]	; (8007934 <CheckAttachedButtons+0x360>)
 80077c8:	2708      	movs	r7, #8
 80077ca:	540f      	strb	r7, [r1, r0]
					++releaseCounter[i];
 80077cc:	00a9      	lsls	r1, r5, #2
 80077ce:	3301      	adds	r3, #1
 80077d0:	4854      	ldr	r0, [pc, #336]	; (8007924 <CheckAttachedButtons+0x350>)
 80077d2:	500b      	str	r3, [r1, r0]
 80077d4:	e7d2      	b.n	800777c <CheckAttachedButtons+0x1a8>
						button[i].state = CLICKED;														// Record a single button click event
 80077d6:	00eb      	lsls	r3, r5, #3
 80077d8:	195b      	adds	r3, r3, r5
 80077da:	4a56      	ldr	r2, [pc, #344]	; (8007934 <CheckAttachedButtons+0x360>)
 80077dc:	2105      	movs	r1, #5
 80077de:	5499      	strb	r1, [r3, r2]
						clicked = 2;																					// Prepare for a double click
 80077e0:	4b51      	ldr	r3, [pc, #324]	; (8007928 <CheckAttachedButtons+0x354>)
 80077e2:	2202      	movs	r2, #2
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e004      	b.n	80077f2 <CheckAttachedButtons+0x21e>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 80077e8:	3bf5      	subs	r3, #245	; 0xf5
 80077ea:	3bff      	subs	r3, #255	; 0xff
 80077ec:	4a52      	ldr	r2, [pc, #328]	; (8007938 <CheckAttachedButtons+0x364>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d90b      	bls.n	800780a <CheckAttachedButtons+0x236>
			switch (button[i].state)
 80077f2:	00eb      	lsls	r3, r5, #3
 80077f4:	195b      	adds	r3, r3, r5
 80077f6:	4a4f      	ldr	r2, [pc, #316]	; (8007934 <CheckAttachedButtons+0x360>)
 80077f8:	5c9b      	ldrb	r3, [r3, r2]
 80077fa:	3b05      	subs	r3, #5
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	2a09      	cmp	r2, #9
 8007800:	d80f      	bhi.n	8007822 <CheckAttachedButtons+0x24e>
 8007802:	0093      	lsls	r3, r2, #2
 8007804:	4a4d      	ldr	r2, [pc, #308]	; (800793c <CheckAttachedButtons+0x368>)
 8007806:	58d3      	ldr	r3, [r2, r3]
 8007808:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800780a:	0020      	movs	r0, r4
 800780c:	f7ff feaa 	bl	8007564 <CheckForTimedButtonRelease>
 8007810:	e7ef      	b.n	80077f2 <CheckAttachedButtons+0x21e>
					buttonPressedCallback(i);
 8007812:	0020      	movs	r0, r4
 8007814:	f7ff fe68 	bl	80074e8 <buttonPressedCallback>
					button[i].state = NONE;
 8007818:	00eb      	lsls	r3, r5, #3
 800781a:	195d      	adds	r5, r3, r5
 800781c:	4b45      	ldr	r3, [pc, #276]	; (8007934 <CheckAttachedButtons+0x360>)
 800781e:	2200      	movs	r2, #0
 8007820:	54ea      	strb	r2, [r5, r3]
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8007822:	3401      	adds	r4, #1
 8007824:	b2e4      	uxtb	r4, r4
 8007826:	2c05      	cmp	r4, #5
 8007828:	d900      	bls.n	800782c <CheckAttachedButtons+0x258>
 800782a:	e10a      	b.n	8007a42 <CheckAttachedButtons+0x46e>
		if (button[i].type)			// Only check defined butons
 800782c:	0025      	movs	r5, r4
 800782e:	00e2      	lsls	r2, r4, #3
 8007830:	1912      	adds	r2, r2, r4
 8007832:	4b40      	ldr	r3, [pc, #256]	; (8007934 <CheckAttachedButtons+0x360>)
 8007834:	189b      	adds	r3, r3, r2
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0f2      	beq.n	8007822 <CheckAttachedButtons+0x24e>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 800783c:	4b40      	ldr	r3, [pc, #256]	; (8007940 <CheckAttachedButtons+0x36c>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <CheckAttachedButtons+0x278>
 8007844:	0013      	movs	r3, r2
 8007846:	4a3b      	ldr	r2, [pc, #236]	; (8007934 <CheckAttachedButtons+0x360>)
 8007848:	2100      	movs	r1, #0
 800784a:	5499      	strb	r1, [r3, r2]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800784c:	230e      	movs	r3, #14
 800784e:	446b      	add	r3, sp
 8007850:	4699      	mov	r9, r3
 8007852:	af03      	add	r7, sp, #12
 8007854:	9700      	str	r7, [sp, #0]
 8007856:	ab04      	add	r3, sp, #16
 8007858:	464a      	mov	r2, r9
 800785a:	a905      	add	r1, sp, #20
 800785c:	0020      	movs	r0, r4
 800785e:	f005 fdd9 	bl	800d414 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8007862:	464b      	mov	r3, r9
 8007864:	8819      	ldrh	r1, [r3, #0]
 8007866:	2200      	movs	r2, #0
 8007868:	9805      	ldr	r0, [sp, #20]
 800786a:	f00a f802 	bl	8011872 <HAL_GPIO_WritePin>
 800786e:	200a      	movs	r0, #10
 8007870:	f006 f952 	bl	800db18 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8007874:	8839      	ldrh	r1, [r7, #0]
 8007876:	9804      	ldr	r0, [sp, #16]
 8007878:	f009 fff4 	bl	8011864 <HAL_GPIO_ReadPin>
 800787c:	2800      	cmp	r0, #0
 800787e:	d100      	bne.n	8007882 <CheckAttachedButtons+0x2ae>
 8007880:	e6b2      	b.n	80075e8 <CheckAttachedButtons+0x14>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 8007882:	230e      	movs	r3, #14
 8007884:	446b      	add	r3, sp
 8007886:	8819      	ldrh	r1, [r3, #0]
 8007888:	2200      	movs	r2, #0
 800788a:	9805      	ldr	r0, [sp, #20]
 800788c:	f009 fff1 	bl	8011872 <HAL_GPIO_WritePin>
			switch (button[i].type)
 8007890:	00ea      	lsls	r2, r5, #3
 8007892:	1952      	adds	r2, r2, r5
 8007894:	4b27      	ldr	r3, [pc, #156]	; (8007934 <CheckAttachedButtons+0x360>)
 8007896:	189b      	adds	r3, r3, r2
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b02      	cmp	r3, #2
 800789c:	d100      	bne.n	80078a0 <CheckAttachedButtons+0x2cc>
 800789e:	e6e9      	b.n	8007674 <CheckAttachedButtons+0xa0>
 80078a0:	d800      	bhi.n	80078a4 <CheckAttachedButtons+0x2d0>
 80078a2:	e6b2      	b.n	800760a <CheckAttachedButtons+0x36>
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d100      	bne.n	80078aa <CheckAttachedButtons+0x2d6>
 80078a8:	e6eb      	b.n	8007682 <CheckAttachedButtons+0xae>
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d000      	beq.n	80078b0 <CheckAttachedButtons+0x2dc>
 80078ae:	e6b3      	b.n	8007618 <CheckAttachedButtons+0x44>
					if (connected == GPIO_PIN_SET)	
 80078b0:	4643      	mov	r3, r8
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d100      	bne.n	80078b8 <CheckAttachedButtons+0x2e4>
 80078b6:	e6ef      	b.n	8007698 <CheckAttachedButtons+0xc4>
					else if (connected == GPIO_PIN_RESET) 
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d000      	beq.n	80078be <CheckAttachedButtons+0x2ea>
 80078bc:	e6ac      	b.n	8007618 <CheckAttachedButtons+0x44>
						state = ON;
 80078be:	2602      	movs	r6, #2
 80078c0:	e6ac      	b.n	800761c <CheckAttachedButtons+0x48>
					buttonReleasedCallback(i);
 80078c2:	0020      	movs	r0, r4
 80078c4:	f7ff fe11 	bl	80074ea <buttonReleasedCallback>
					button[i].state = NONE;
 80078c8:	00eb      	lsls	r3, r5, #3
 80078ca:	195d      	adds	r5, r3, r5
 80078cc:	4b19      	ldr	r3, [pc, #100]	; (8007934 <CheckAttachedButtons+0x360>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	54ea      	strb	r2, [r5, r3]
      		break;
 80078d2:	e7a6      	b.n	8007822 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 80078d4:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <CheckAttachedButtons+0x36c>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1a2      	bne.n	8007822 <CheckAttachedButtons+0x24e>
 80078dc:	00eb      	lsls	r3, r5, #3
 80078de:	195b      	adds	r3, r3, r5
 80078e0:	4d14      	ldr	r5, [pc, #80]	; (8007934 <CheckAttachedButtons+0x360>)
 80078e2:	18ed      	adds	r5, r5, r3
 80078e4:	7a2b      	ldrb	r3, [r5, #8]
 80078e6:	07db      	lsls	r3, r3, #31
 80078e8:	d59b      	bpl.n	8007822 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80078ea:	4b15      	ldr	r3, [pc, #84]	; (8007940 <CheckAttachedButtons+0x36c>)
 80078ec:	2201      	movs	r2, #1
 80078ee:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 80078f0:	0020      	movs	r0, r4
 80078f2:	f7ff fdfb 	bl	80074ec <buttonClickedCallback>
 80078f6:	e794      	b.n	8007822 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 80078f8:	4b11      	ldr	r3, [pc, #68]	; (8007940 <CheckAttachedButtons+0x36c>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d190      	bne.n	8007822 <CheckAttachedButtons+0x24e>
 8007900:	00eb      	lsls	r3, r5, #3
 8007902:	195b      	adds	r3, r3, r5
 8007904:	4d0b      	ldr	r5, [pc, #44]	; (8007934 <CheckAttachedButtons+0x360>)
 8007906:	18ed      	adds	r5, r5, r3
 8007908:	7a2b      	ldrb	r3, [r5, #8]
 800790a:	079b      	lsls	r3, r3, #30
 800790c:	d589      	bpl.n	8007822 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800790e:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <CheckAttachedButtons+0x36c>)
 8007910:	2201      	movs	r2, #1
 8007912:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8007914:	0020      	movs	r0, r4
 8007916:	f7ff fdea 	bl	80074ee <buttonDblClickedCallback>
 800791a:	e782      	b.n	8007822 <CheckAttachedButtons+0x24e>
 800791c:	20000d10 	.word	0x20000d10
 8007920:	20006148 	.word	0x20006148
 8007924:	20000d28 	.word	0x20000d28
 8007928:	20000d06 	.word	0x20000d06
 800792c:	0000fffe 	.word	0x0000fffe
 8007930:	20000d08 	.word	0x20000d08
 8007934:	20000cd0 	.word	0x20000cd0
 8007938:	0000fe0a 	.word	0x0000fe0a
 800793c:	08019864 	.word	0x08019864
 8007940:	20000d0e 	.word	0x20000d0e
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 8007944:	4b41      	ldr	r3, [pc, #260]	; (8007a4c <CheckAttachedButtons+0x478>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d000      	beq.n	800794e <CheckAttachedButtons+0x37a>
 800794c:	e769      	b.n	8007822 <CheckAttachedButtons+0x24e>
 800794e:	00eb      	lsls	r3, r5, #3
 8007950:	195b      	adds	r3, r3, r5
 8007952:	4d3f      	ldr	r5, [pc, #252]	; (8007a50 <CheckAttachedButtons+0x47c>)
 8007954:	18ed      	adds	r5, r5, r3
 8007956:	7a2b      	ldrb	r3, [r5, #8]
 8007958:	075b      	lsls	r3, r3, #29
 800795a:	d400      	bmi.n	800795e <CheckAttachedButtons+0x38a>
 800795c:	e761      	b.n	8007822 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800795e:	4b3b      	ldr	r3, [pc, #236]	; (8007a4c <CheckAttachedButtons+0x478>)
 8007960:	2201      	movs	r2, #1
 8007962:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 8007964:	2101      	movs	r1, #1
 8007966:	0020      	movs	r0, r4
 8007968:	f7ff fdc2 	bl	80074f0 <buttonPressedForXCallback>
 800796c:	e759      	b.n	8007822 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 800796e:	4b37      	ldr	r3, [pc, #220]	; (8007a4c <CheckAttachedButtons+0x478>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d000      	beq.n	8007978 <CheckAttachedButtons+0x3a4>
 8007976:	e754      	b.n	8007822 <CheckAttachedButtons+0x24e>
 8007978:	00eb      	lsls	r3, r5, #3
 800797a:	195b      	adds	r3, r3, r5
 800797c:	4d34      	ldr	r5, [pc, #208]	; (8007a50 <CheckAttachedButtons+0x47c>)
 800797e:	18ed      	adds	r5, r5, r3
 8007980:	7a2b      	ldrb	r3, [r5, #8]
 8007982:	071b      	lsls	r3, r3, #28
 8007984:	d400      	bmi.n	8007988 <CheckAttachedButtons+0x3b4>
 8007986:	e74c      	b.n	8007822 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007988:	4b30      	ldr	r3, [pc, #192]	; (8007a4c <CheckAttachedButtons+0x478>)
 800798a:	2201      	movs	r2, #1
 800798c:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 800798e:	2102      	movs	r1, #2
 8007990:	0020      	movs	r0, r4
 8007992:	f7ff fdad 	bl	80074f0 <buttonPressedForXCallback>
 8007996:	e744      	b.n	8007822 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 8007998:	4b2c      	ldr	r3, [pc, #176]	; (8007a4c <CheckAttachedButtons+0x478>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d000      	beq.n	80079a2 <CheckAttachedButtons+0x3ce>
 80079a0:	e73f      	b.n	8007822 <CheckAttachedButtons+0x24e>
 80079a2:	00eb      	lsls	r3, r5, #3
 80079a4:	195b      	adds	r3, r3, r5
 80079a6:	4d2a      	ldr	r5, [pc, #168]	; (8007a50 <CheckAttachedButtons+0x47c>)
 80079a8:	18ed      	adds	r5, r5, r3
 80079aa:	7a2b      	ldrb	r3, [r5, #8]
 80079ac:	06db      	lsls	r3, r3, #27
 80079ae:	d400      	bmi.n	80079b2 <CheckAttachedButtons+0x3de>
 80079b0:	e737      	b.n	8007822 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80079b2:	4b26      	ldr	r3, [pc, #152]	; (8007a4c <CheckAttachedButtons+0x478>)
 80079b4:	2201      	movs	r2, #1
 80079b6:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 80079b8:	2103      	movs	r1, #3
 80079ba:	0020      	movs	r0, r4
 80079bc:	f7ff fd98 	bl	80074f0 <buttonPressedForXCallback>
 80079c0:	e72f      	b.n	8007822 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 80079c2:	4b22      	ldr	r3, [pc, #136]	; (8007a4c <CheckAttachedButtons+0x478>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d000      	beq.n	80079cc <CheckAttachedButtons+0x3f8>
 80079ca:	e72a      	b.n	8007822 <CheckAttachedButtons+0x24e>
 80079cc:	00eb      	lsls	r3, r5, #3
 80079ce:	195b      	adds	r3, r3, r5
 80079d0:	4d1f      	ldr	r5, [pc, #124]	; (8007a50 <CheckAttachedButtons+0x47c>)
 80079d2:	18ed      	adds	r5, r5, r3
 80079d4:	7a2b      	ldrb	r3, [r5, #8]
 80079d6:	069b      	lsls	r3, r3, #26
 80079d8:	d400      	bmi.n	80079dc <CheckAttachedButtons+0x408>
 80079da:	e722      	b.n	8007822 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80079dc:	4b1b      	ldr	r3, [pc, #108]	; (8007a4c <CheckAttachedButtons+0x478>)
 80079de:	2201      	movs	r2, #1
 80079e0:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 80079e2:	2101      	movs	r1, #1
 80079e4:	0020      	movs	r0, r4
 80079e6:	f7ff fd84 	bl	80074f2 <buttonReleasedForYCallback>
 80079ea:	e71a      	b.n	8007822 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 80079ec:	4b17      	ldr	r3, [pc, #92]	; (8007a4c <CheckAttachedButtons+0x478>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d000      	beq.n	80079f6 <CheckAttachedButtons+0x422>
 80079f4:	e715      	b.n	8007822 <CheckAttachedButtons+0x24e>
 80079f6:	00eb      	lsls	r3, r5, #3
 80079f8:	195b      	adds	r3, r3, r5
 80079fa:	4d15      	ldr	r5, [pc, #84]	; (8007a50 <CheckAttachedButtons+0x47c>)
 80079fc:	18ed      	adds	r5, r5, r3
 80079fe:	7a2b      	ldrb	r3, [r5, #8]
 8007a00:	065b      	lsls	r3, r3, #25
 8007a02:	d400      	bmi.n	8007a06 <CheckAttachedButtons+0x432>
 8007a04:	e70d      	b.n	8007822 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007a06:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <CheckAttachedButtons+0x478>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 8007a0c:	2102      	movs	r1, #2
 8007a0e:	0020      	movs	r0, r4
 8007a10:	f7ff fd6f 	bl	80074f2 <buttonReleasedForYCallback>
 8007a14:	e705      	b.n	8007822 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 8007a16:	4b0d      	ldr	r3, [pc, #52]	; (8007a4c <CheckAttachedButtons+0x478>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d000      	beq.n	8007a20 <CheckAttachedButtons+0x44c>
 8007a1e:	e700      	b.n	8007822 <CheckAttachedButtons+0x24e>
 8007a20:	00eb      	lsls	r3, r5, #3
 8007a22:	195b      	adds	r3, r3, r5
 8007a24:	4d0a      	ldr	r5, [pc, #40]	; (8007a50 <CheckAttachedButtons+0x47c>)
 8007a26:	18ed      	adds	r5, r5, r3
 8007a28:	2308      	movs	r3, #8
 8007a2a:	56eb      	ldrsb	r3, [r5, r3]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	db00      	blt.n	8007a32 <CheckAttachedButtons+0x45e>
 8007a30:	e6f7      	b.n	8007822 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007a32:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <CheckAttachedButtons+0x478>)
 8007a34:	2201      	movs	r2, #1
 8007a36:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 8007a38:	2103      	movs	r1, #3
 8007a3a:	0020      	movs	r0, r4
 8007a3c:	f7ff fd59 	bl	80074f2 <buttonReleasedForYCallback>
 8007a40:	e6ef      	b.n	8007822 <CheckAttachedButtons+0x24e>
}
 8007a42:	b007      	add	sp, #28
 8007a44:	bc0c      	pop	{r2, r3}
 8007a46:	4690      	mov	r8, r2
 8007a48:	4699      	mov	r9, r3
 8007a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4c:	20000d0e 	.word	0x20000d0e
 8007a50:	20000cd0 	.word	0x20000cd0

08007a54 <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 8007a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a56:	b08d      	sub	sp, #52	; 0x34
 8007a58:	0006      	movs	r6, r0
 8007a5a:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8007a5c:	4b41      	ldr	r3, [pc, #260]	; (8007b64 <AddPortButton+0x110>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d157      	bne.n	8007b14 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 8007a64:	4b40      	ldr	r3, [pc, #256]	; (8007b68 <AddPortButton+0x114>)
 8007a66:	2204      	movs	r2, #4
 8007a68:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 8007a6a:	4b3e      	ldr	r3, [pc, #248]	; (8007b64 <AddPortButton+0x110>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d15a      	bne.n	8007b28 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 8007a72:	2512      	movs	r5, #18
 8007a74:	446d      	add	r5, sp
 8007a76:	af04      	add	r7, sp, #16
 8007a78:	9700      	str	r7, [sp, #0]
 8007a7a:	ab05      	add	r3, sp, #20
 8007a7c:	002a      	movs	r2, r5
 8007a7e:	a906      	add	r1, sp, #24
 8007a80:	0020      	movs	r0, r4
 8007a82:	f005 fcc7 	bl	800d414 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 8007a86:	882b      	ldrh	r3, [r5, #0]
 8007a88:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a8e:	2500      	movs	r5, #0
 8007a90:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8007a92:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 8007a94:	a907      	add	r1, sp, #28
 8007a96:	9806      	ldr	r0, [sp, #24]
 8007a98:	f009 fe1c 	bl	80116d4 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8007a9c:	883b      	ldrh	r3, [r7, #0]
 8007a9e:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007aa0:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 8007aa6:	a907      	add	r1, sp, #28
 8007aa8:	9805      	ldr	r0, [sp, #20]
 8007aaa:	f009 fe13 	bl	80116d4 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 8007aae:	00e2      	lsls	r2, r4, #3
 8007ab0:	1912      	adds	r2, r2, r4
 8007ab2:	4b2e      	ldr	r3, [pc, #184]	; (8007b6c <AddPortButton+0x118>)
 8007ab4:	189b      	adds	r3, r3, r2
 8007ab6:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8007ab8:	0025      	movs	r5, r4
 8007aba:	353a      	adds	r5, #58	; 0x3a
 8007abc:	00ad      	lsls	r5, r5, #2
 8007abe:	210e      	movs	r1, #14
 8007ac0:	4469      	add	r1, sp
 8007ac2:	0028      	movs	r0, r5
 8007ac4:	f7ff f8ae 	bl	8006c24 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d133      	bne.n	8007b34 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 8007acc:	230e      	movs	r3, #14
 8007ace:	446b      	add	r3, sp
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	0a1b      	lsrs	r3, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 8007ad4:	091a      	lsrs	r2, r3, #4
 8007ad6:	42a2      	cmp	r2, r4
 8007ad8:	d103      	bne.n	8007ae2 <AddPortButton+0x8e>
 8007ada:	220f      	movs	r2, #15
 8007adc:	4013      	ands	r3, r2
 8007ade:	42b3      	cmp	r3, r6
 8007ae0:	d015      	beq.n	8007b0e <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8007ae2:	0324      	lsls	r4, r4, #12
 8007ae4:	0231      	lsls	r1, r6, #8
 8007ae6:	4321      	orrs	r1, r4
 8007ae8:	b289      	uxth	r1, r1
 8007aea:	230e      	movs	r3, #14
 8007aec:	446b      	add	r3, sp
 8007aee:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8007af0:	0028      	movs	r0, r5
 8007af2:	f7ff f949 	bl	8006d88 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8007af6:	1c68      	adds	r0, r5, #1
 8007af8:	2100      	movs	r1, #0
 8007afa:	f7ff f945 	bl	8006d88 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8007afe:	1ca8      	adds	r0, r5, #2
 8007b00:	2100      	movs	r1, #0
 8007b02:	f7ff f941 	bl	8006d88 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8007b06:	1ce8      	adds	r0, r5, #3
 8007b08:	2100      	movs	r1, #0
 8007b0a:	f7ff f93d 	bl	8006d88 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 8007b0e:	2000      	movs	r0, #0
 8007b10:	b00d      	add	sp, #52	; 0x34
 8007b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 8007b14:	008d      	lsls	r5, r1, #2
 8007b16:	4b16      	ldr	r3, [pc, #88]	; (8007b70 <AddPortButton+0x11c>)
 8007b18:	58e8      	ldr	r0, [r5, r3]
 8007b1a:	f006 fb4b 	bl	800e1b4 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8007b1e:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <AddPortButton+0x120>)
 8007b20:	58e8      	ldr	r0, [r5, r3]
 8007b22:	f006 fb47 	bl	800e1b4 <osSemaphoreRelease>
 8007b26:	e79d      	b.n	8007a64 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8007b28:	0020      	movs	r0, r4
 8007b2a:	f006 f99d 	bl	800de68 <GetUart>
 8007b2e:	f00a fe10 	bl	8012752 <HAL_UART_DeInit>
 8007b32:	e79e      	b.n	8007a72 <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8007b34:	0324      	lsls	r4, r4, #12
 8007b36:	0231      	lsls	r1, r6, #8
 8007b38:	4321      	orrs	r1, r4
 8007b3a:	b289      	uxth	r1, r1
 8007b3c:	230e      	movs	r3, #14
 8007b3e:	446b      	add	r3, sp
 8007b40:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 8007b42:	0028      	movs	r0, r5
 8007b44:	f7ff f920 	bl	8006d88 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8007b48:	1c68      	adds	r0, r5, #1
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	f7ff f91c 	bl	8006d88 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8007b50:	1ca8      	adds	r0, r5, #2
 8007b52:	2100      	movs	r1, #0
 8007b54:	f7ff f918 	bl	8006d88 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8007b58:	1ce8      	adds	r0, r5, #3
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	f7ff f914 	bl	8006d88 <EE_WriteVariable>
 8007b60:	e7d5      	b.n	8007b0e <AddPortButton+0xba>
 8007b62:	46c0      	nop			; (mov r8, r8)
 8007b64:	200002cd 	.word	0x200002cd
 8007b68:	20000910 	.word	0x20000910
 8007b6c:	20000cd0 	.word	0x20000cd0
 8007b70:	200061e4 	.word	0x200061e4
 8007b74:	200061c8 	.word	0x200061c8

08007b78 <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	0004      	movs	r4, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 8007b7e:	4836      	ldr	r0, [pc, #216]	; (8007c58 <RemovePortButton+0xe0>)
 8007b80:	00e1      	lsls	r1, r4, #3
 8007b82:	1909      	adds	r1, r1, r4
 8007b84:	1842      	adds	r2, r0, r1
 8007b86:	2300      	movs	r3, #0
 8007b88:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 8007b8a:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8007b8c:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 8007b8e:	7093      	strb	r3, [r2, #2]
 8007b90:	70d3      	strb	r3, [r2, #3]
 8007b92:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 8007b94:	7153      	strb	r3, [r2, #5]
 8007b96:	7193      	strb	r3, [r2, #6]
 8007b98:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8007b9a:	0025      	movs	r5, r4
 8007b9c:	353a      	adds	r5, #58	; 0x3a
 8007b9e:	00ad      	lsls	r5, r5, #2
 8007ba0:	466b      	mov	r3, sp
 8007ba2:	1d99      	adds	r1, r3, #6
 8007ba4:	0028      	movs	r0, r5
 8007ba6:	f7ff f83d 	bl	8006c24 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d01e      	beq.n	8007bec <RemovePortButton+0x74>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 8007bae:	0020      	movs	r0, r4
 8007bb0:	f006 f95a 	bl	800de68 <GetUart>
 8007bb4:	0005      	movs	r5, r0
	
	if (huart->Instance == USART1) 
 8007bb6:	6803      	ldr	r3, [r0, #0]
 8007bb8:	4a28      	ldr	r2, [pc, #160]	; (8007c5c <RemovePortButton+0xe4>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d027      	beq.n	8007c0e <RemovePortButton+0x96>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 8007bbe:	4a28      	ldr	r2, [pc, #160]	; (8007c60 <RemovePortButton+0xe8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d028      	beq.n	8007c16 <RemovePortButton+0x9e>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 8007bc4:	4a27      	ldr	r2, [pc, #156]	; (8007c64 <RemovePortButton+0xec>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d029      	beq.n	8007c1e <RemovePortButton+0xa6>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 8007bca:	4a27      	ldr	r2, [pc, #156]	; (8007c68 <RemovePortButton+0xf0>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d034      	beq.n	8007c3a <RemovePortButton+0xc2>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 8007bd0:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <RemovePortButton+0xf4>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d027      	beq.n	8007c26 <RemovePortButton+0xae>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 8007bd6:	4a26      	ldr	r2, [pc, #152]	; (8007c70 <RemovePortButton+0xf8>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d028      	beq.n	8007c2e <RemovePortButton+0xb6>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 8007bdc:	4a25      	ldr	r2, [pc, #148]	; (8007c74 <RemovePortButton+0xfc>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d037      	beq.n	8007c52 <RemovePortButton+0xda>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 8007be2:	4a25      	ldr	r2, [pc, #148]	; (8007c78 <RemovePortButton+0x100>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d026      	beq.n	8007c36 <RemovePortButton+0xbe>
#ifdef _Usart8	
		MX_USART8_UART_Init();
#endif
	} 
	else
		result = BOS_ERROR;			
 8007be8:	26ff      	movs	r6, #255	; 0xff
 8007bea:	e027      	b.n	8007c3c <RemovePortButton+0xc4>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 8007bec:	2100      	movs	r1, #0
 8007bee:	0028      	movs	r0, r5
 8007bf0:	f7ff f8ca 	bl	8006d88 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8007bf4:	1c68      	adds	r0, r5, #1
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	f7ff f8c6 	bl	8006d88 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8007bfc:	1ca8      	adds	r0, r5, #2
 8007bfe:	2100      	movs	r1, #0
 8007c00:	f7ff f8c2 	bl	8006d88 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 8007c04:	1ce8      	adds	r0, r5, #3
 8007c06:	2100      	movs	r1, #0
 8007c08:	f7ff f8be 	bl	8006d88 <EE_WriteVariable>
 8007c0c:	e7cf      	b.n	8007bae <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8007c0e:	f005 ffa7 	bl	800db60 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8007c12:	2600      	movs	r6, #0
 8007c14:	e012      	b.n	8007c3c <RemovePortButton+0xc4>
		MX_USART2_UART_Init();
 8007c16:	f005 ffbb 	bl	800db90 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8007c1a:	2600      	movs	r6, #0
 8007c1c:	e00e      	b.n	8007c3c <RemovePortButton+0xc4>
		MX_USART3_UART_Init();
 8007c1e:	f005 ffcf 	bl	800dbc0 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8007c22:	2600      	movs	r6, #0
 8007c24:	e00a      	b.n	8007c3c <RemovePortButton+0xc4>
		MX_USART5_UART_Init();
 8007c26:	f005 ffe3 	bl	800dbf0 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8007c2a:	2600      	movs	r6, #0
 8007c2c:	e006      	b.n	8007c3c <RemovePortButton+0xc4>
		MX_USART6_UART_Init();
 8007c2e:	f005 fff7 	bl	800dc20 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8007c32:	2600      	movs	r6, #0
 8007c34:	e002      	b.n	8007c3c <RemovePortButton+0xc4>
 8007c36:	2600      	movs	r6, #0
 8007c38:	e000      	b.n	8007c3c <RemovePortButton+0xc4>
 8007c3a:	2600      	movs	r6, #0
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8007c3c:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <RemovePortButton+0x104>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	551a      	strb	r2, [r3, r4]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 8007c42:	3201      	adds	r2, #1
 8007c44:	490e      	ldr	r1, [pc, #56]	; (8007c80 <RemovePortButton+0x108>)
 8007c46:	0028      	movs	r0, r5
 8007c48:	f00a fddc 	bl	8012804 <HAL_UART_Receive_IT>
	
	return result;
}
 8007c4c:	0030      	movs	r0, r6
 8007c4e:	b002      	add	sp, #8
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result = BOS_OK;
 8007c52:	2600      	movs	r6, #0
 8007c54:	e7f2      	b.n	8007c3c <RemovePortButton+0xc4>
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	20000cd0 	.word	0x20000cd0
 8007c5c:	40013800 	.word	0x40013800
 8007c60:	40004400 	.word	0x40004400
 8007c64:	40004800 	.word	0x40004800
 8007c68:	40004c00 	.word	0x40004c00
 8007c6c:	40005000 	.word	0x40005000
 8007c70:	40011400 	.word	0x40011400
 8007c74:	40011800 	.word	0x40011800
 8007c78:	40011c00 	.word	0x40011c00
 8007c7c:	20000910 	.word	0x20000910
 8007c80:	20000678 	.word	0x20000678

08007c84 <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 8007c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c86:	46de      	mov	lr, fp
 8007c88:	4657      	mov	r7, sl
 8007c8a:	464e      	mov	r6, r9
 8007c8c:	4645      	mov	r5, r8
 8007c8e:	b5e0      	push	{r5, r6, r7, lr}
 8007c90:	b085      	sub	sp, #20
 8007c92:	0007      	movs	r7, r0
 8007c94:	469b      	mov	fp, r3
 8007c96:	ab0e      	add	r3, sp, #56	; 0x38
 8007c98:	781e      	ldrb	r6, [r3, #0]
 8007c9a:	ab0f      	add	r3, sp, #60	; 0x3c
 8007c9c:	781d      	ldrb	r5, [r3, #0]
 8007c9e:	ab10      	add	r3, sp, #64	; 0x40
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	469a      	mov	sl, r3
 8007ca4:	ab11      	add	r3, sp, #68	; 0x44
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	4699      	mov	r9, r3
 8007caa:	ab12      	add	r3, sp, #72	; 0x48
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	4698      	mov	r8, r3
 8007cb0:	ab13      	add	r3, sp, #76	; 0x4c
 8007cb2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 8007cb4:	00c4      	lsls	r4, r0, #3
 8007cb6:	1824      	adds	r4, r4, r0
 8007cb8:	48b3      	ldr	r0, [pc, #716]	; (8007f88 <SetButtonEvents+0x304>)
 8007cba:	1900      	adds	r0, r0, r4
 8007cbc:	7840      	ldrb	r0, [r0, #1]
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d100      	bne.n	8007cc4 <SetButtonEvents+0x40>
 8007cc2:	e155      	b.n	8007f70 <SetButtonEvents+0x2ec>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 8007cc4:	00fc      	lsls	r4, r7, #3
 8007cc6:	19e4      	adds	r4, r4, r7
 8007cc8:	48af      	ldr	r0, [pc, #700]	; (8007f88 <SetButtonEvents+0x304>)
 8007cca:	1900      	adds	r0, r0, r4
 8007ccc:	465c      	mov	r4, fp
 8007cce:	7084      	strb	r4, [r0, #2]
 8007cd0:	70c6      	strb	r6, [r0, #3]
 8007cd2:	7105      	strb	r5, [r0, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 8007cd4:	4654      	mov	r4, sl
 8007cd6:	7144      	strb	r4, [r0, #5]
 8007cd8:	464c      	mov	r4, r9
 8007cda:	7184      	strb	r4, [r0, #6]
 8007cdc:	4644      	mov	r4, r8
 8007cde:	71c4      	strb	r4, [r0, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d005      	beq.n	8007cf0 <SetButtonEvents+0x6c>
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d000      	beq.n	8007cea <SetButtonEvents+0x66>
 8007ce8:	e0ca      	b.n	8007e80 <SetButtonEvents+0x1fc>
 8007cea:	2900      	cmp	r1, #0
 8007cec:	d100      	bne.n	8007cf0 <SetButtonEvents+0x6c>
 8007cee:	e0c7      	b.n	8007e80 <SetButtonEvents+0x1fc>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8007cf0:	00f8      	lsls	r0, r7, #3
 8007cf2:	19c0      	adds	r0, r0, r7
 8007cf4:	49a4      	ldr	r1, [pc, #656]	; (8007f88 <SetButtonEvents+0x304>)
 8007cf6:	1809      	adds	r1, r1, r0
 8007cf8:	7a08      	ldrb	r0, [r1, #8]
 8007cfa:	2401      	movs	r4, #1
 8007cfc:	4320      	orrs	r0, r4
 8007cfe:	7208      	strb	r0, [r1, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d005      	beq.n	8007d10 <SetButtonEvents+0x8c>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d000      	beq.n	8007d0a <SetButtonEvents+0x86>
 8007d08:	e0c6      	b.n	8007e98 <SetButtonEvents+0x214>
 8007d0a:	2a00      	cmp	r2, #0
 8007d0c:	d100      	bne.n	8007d10 <SetButtonEvents+0x8c>
 8007d0e:	e0c3      	b.n	8007e98 <SetButtonEvents+0x214>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8007d10:	00f9      	lsls	r1, r7, #3
 8007d12:	19c9      	adds	r1, r1, r7
 8007d14:	4a9c      	ldr	r2, [pc, #624]	; (8007f88 <SetButtonEvents+0x304>)
 8007d16:	1852      	adds	r2, r2, r1
 8007d18:	7a11      	ldrb	r1, [r2, #8]
 8007d1a:	2002      	movs	r0, #2
 8007d1c:	4301      	orrs	r1, r0
 8007d1e:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d006      	beq.n	8007d32 <SetButtonEvents+0xae>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d000      	beq.n	8007d2a <SetButtonEvents+0xa6>
 8007d28:	e0c2      	b.n	8007eb0 <SetButtonEvents+0x22c>
 8007d2a:	465a      	mov	r2, fp
 8007d2c:	2a00      	cmp	r2, #0
 8007d2e:	d100      	bne.n	8007d32 <SetButtonEvents+0xae>
 8007d30:	e0be      	b.n	8007eb0 <SetButtonEvents+0x22c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8007d32:	00f9      	lsls	r1, r7, #3
 8007d34:	19c9      	adds	r1, r1, r7
 8007d36:	4a94      	ldr	r2, [pc, #592]	; (8007f88 <SetButtonEvents+0x304>)
 8007d38:	1852      	adds	r2, r2, r1
 8007d3a:	7a11      	ldrb	r1, [r2, #8]
 8007d3c:	2004      	movs	r0, #4
 8007d3e:	4301      	orrs	r1, r0
 8007d40:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d005      	beq.n	8007d52 <SetButtonEvents+0xce>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d000      	beq.n	8007d4c <SetButtonEvents+0xc8>
 8007d4a:	e0be      	b.n	8007eca <SetButtonEvents+0x246>
 8007d4c:	2e00      	cmp	r6, #0
 8007d4e:	d100      	bne.n	8007d52 <SetButtonEvents+0xce>
 8007d50:	e0bb      	b.n	8007eca <SetButtonEvents+0x246>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8007d52:	00f9      	lsls	r1, r7, #3
 8007d54:	19c9      	adds	r1, r1, r7
 8007d56:	4a8c      	ldr	r2, [pc, #560]	; (8007f88 <SetButtonEvents+0x304>)
 8007d58:	1852      	adds	r2, r2, r1
 8007d5a:	7a11      	ldrb	r1, [r2, #8]
 8007d5c:	2008      	movs	r0, #8
 8007d5e:	4301      	orrs	r1, r0
 8007d60:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d005      	beq.n	8007d72 <SetButtonEvents+0xee>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d000      	beq.n	8007d6c <SetButtonEvents+0xe8>
 8007d6a:	e0bb      	b.n	8007ee4 <SetButtonEvents+0x260>
 8007d6c:	2d00      	cmp	r5, #0
 8007d6e:	d100      	bne.n	8007d72 <SetButtonEvents+0xee>
 8007d70:	e0b8      	b.n	8007ee4 <SetButtonEvents+0x260>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8007d72:	00f9      	lsls	r1, r7, #3
 8007d74:	19c9      	adds	r1, r1, r7
 8007d76:	4a84      	ldr	r2, [pc, #528]	; (8007f88 <SetButtonEvents+0x304>)
 8007d78:	1852      	adds	r2, r2, r1
 8007d7a:	7a11      	ldrb	r1, [r2, #8]
 8007d7c:	2010      	movs	r0, #16
 8007d7e:	4301      	orrs	r1, r0
 8007d80:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d006      	beq.n	8007d94 <SetButtonEvents+0x110>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d000      	beq.n	8007d8c <SetButtonEvents+0x108>
 8007d8a:	e0b8      	b.n	8007efe <SetButtonEvents+0x27a>
 8007d8c:	4652      	mov	r2, sl
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	d100      	bne.n	8007d94 <SetButtonEvents+0x110>
 8007d92:	e0b4      	b.n	8007efe <SetButtonEvents+0x27a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8007d94:	00f9      	lsls	r1, r7, #3
 8007d96:	19c9      	adds	r1, r1, r7
 8007d98:	4a7b      	ldr	r2, [pc, #492]	; (8007f88 <SetButtonEvents+0x304>)
 8007d9a:	1852      	adds	r2, r2, r1
 8007d9c:	7a11      	ldrb	r1, [r2, #8]
 8007d9e:	2020      	movs	r0, #32
 8007da0:	4301      	orrs	r1, r0
 8007da2:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d006      	beq.n	8007db6 <SetButtonEvents+0x132>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d000      	beq.n	8007dae <SetButtonEvents+0x12a>
 8007dac:	e0b4      	b.n	8007f18 <SetButtonEvents+0x294>
 8007dae:	464a      	mov	r2, r9
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	d100      	bne.n	8007db6 <SetButtonEvents+0x132>
 8007db4:	e0b0      	b.n	8007f18 <SetButtonEvents+0x294>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8007db6:	00f9      	lsls	r1, r7, #3
 8007db8:	19c9      	adds	r1, r1, r7
 8007dba:	4a73      	ldr	r2, [pc, #460]	; (8007f88 <SetButtonEvents+0x304>)
 8007dbc:	1852      	adds	r2, r2, r1
 8007dbe:	7a11      	ldrb	r1, [r2, #8]
 8007dc0:	2040      	movs	r0, #64	; 0x40
 8007dc2:	4301      	orrs	r1, r0
 8007dc4:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d006      	beq.n	8007dd8 <SetButtonEvents+0x154>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d000      	beq.n	8007dd0 <SetButtonEvents+0x14c>
 8007dce:	e0b0      	b.n	8007f32 <SetButtonEvents+0x2ae>
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	2a00      	cmp	r2, #0
 8007dd4:	d100      	bne.n	8007dd8 <SetButtonEvents+0x154>
 8007dd6:	e0ac      	b.n	8007f32 <SetButtonEvents+0x2ae>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 8007dd8:	00fa      	lsls	r2, r7, #3
 8007dda:	19d2      	adds	r2, r2, r7
 8007ddc:	4b6a      	ldr	r3, [pc, #424]	; (8007f88 <SetButtonEvents+0x304>)
 8007dde:	189b      	adds	r3, r3, r2
 8007de0:	7a19      	ldrb	r1, [r3, #8]
 8007de2:	2280      	movs	r2, #128	; 0x80
 8007de4:	4252      	negs	r2, r2
 8007de6:	430a      	orrs	r2, r1
 8007de8:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
	}
	
	/* Add to EEPROM */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8007dea:	003c      	movs	r4, r7
 8007dec:	343a      	adds	r4, #58	; 0x3a
 8007dee:	00a4      	lsls	r4, r4, #2
 8007df0:	ab02      	add	r3, sp, #8
 8007df2:	1d99      	adds	r1, r3, #6
 8007df4:	0020      	movs	r0, r4
 8007df6:	f7fe ff15 	bl	8006c24 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d000      	beq.n	8007e00 <SetButtonEvents+0x17c>
 8007dfe:	e0bf      	b.n	8007f80 <SetButtonEvents+0x2fc>
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 8007e00:	ab02      	add	r3, sp, #8
 8007e02:	3306      	adds	r3, #6
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	0a18      	lsrs	r0, r3, #8
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	00fa      	lsls	r2, r7, #3
 8007e0c:	19d2      	adds	r2, r2, r7
 8007e0e:	4f5e      	ldr	r7, [pc, #376]	; (8007f88 <SetButtonEvents+0x304>)
 8007e10:	18bf      	adds	r7, r7, r2
 8007e12:	7a39      	ldrb	r1, [r7, #8]
 8007e14:	428b      	cmp	r3, r1
 8007e16:	d000      	beq.n	8007e1a <SetButtonEvents+0x196>
 8007e18:	e098      	b.n	8007f4c <SetButtonEvents+0x2c8>
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 8007e1a:	1c63      	adds	r3, r4, #1
 8007e1c:	aa02      	add	r2, sp, #8
 8007e1e:	1d97      	adds	r7, r2, #6
 8007e20:	0039      	movs	r1, r7
 8007e22:	9301      	str	r3, [sp, #4]
 8007e24:	0018      	movs	r0, r3
 8007e26:	f7fe fefd 	bl	8006c24 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 8007e2a:	883a      	ldrh	r2, [r7, #0]
 8007e2c:	4659      	mov	r1, fp
 8007e2e:	0209      	lsls	r1, r1, #8
 8007e30:	4653      	mov	r3, sl
 8007e32:	430b      	orrs	r3, r1
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d000      	beq.n	8007e3a <SetButtonEvents+0x1b6>
 8007e38:	e090      	b.n	8007f5c <SetButtonEvents+0x2d8>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 8007e3a:	1ca3      	adds	r3, r4, #2
 8007e3c:	aa02      	add	r2, sp, #8
 8007e3e:	1d97      	adds	r7, r2, #6
 8007e40:	0039      	movs	r1, r7
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	0018      	movs	r0, r3
 8007e46:	f7fe feed 	bl	8006c24 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8007e4a:	883a      	ldrh	r2, [r7, #0]
 8007e4c:	0236      	lsls	r6, r6, #8
 8007e4e:	464b      	mov	r3, r9
 8007e50:	4333      	orrs	r3, r6
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d000      	beq.n	8007e58 <SetButtonEvents+0x1d4>
 8007e56:	e086      	b.n	8007f66 <SetButtonEvents+0x2e2>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8007e58:	3403      	adds	r4, #3
 8007e5a:	ab02      	add	r3, sp, #8
 8007e5c:	1d9e      	adds	r6, r3, #6
 8007e5e:	0031      	movs	r1, r6
 8007e60:	0020      	movs	r0, r4
 8007e62:	f7fe fedf 	bl	8006c24 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8007e66:	8832      	ldrh	r2, [r6, #0]
 8007e68:	022d      	lsls	r5, r5, #8
 8007e6a:	4643      	mov	r3, r8
 8007e6c:	432b      	orrs	r3, r5
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d100      	bne.n	8007e74 <SetButtonEvents+0x1f0>
 8007e72:	e087      	b.n	8007f84 <SetButtonEvents+0x300>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 8007e74:	0019      	movs	r1, r3
 8007e76:	0020      	movs	r0, r4
 8007e78:	f7fe ff86 	bl	8006d88 <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	e078      	b.n	8007f72 <SetButtonEvents+0x2ee>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
 8007e80:	4319      	orrs	r1, r3
 8007e82:	d000      	beq.n	8007e86 <SetButtonEvents+0x202>
 8007e84:	e73c      	b.n	8007d00 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8007e86:	00f8      	lsls	r0, r7, #3
 8007e88:	19c0      	adds	r0, r0, r7
 8007e8a:	493f      	ldr	r1, [pc, #252]	; (8007f88 <SetButtonEvents+0x304>)
 8007e8c:	1809      	adds	r1, r1, r0
 8007e8e:	7a08      	ldrb	r0, [r1, #8]
 8007e90:	2401      	movs	r4, #1
 8007e92:	43a0      	bics	r0, r4
 8007e94:	7208      	strb	r0, [r1, #8]
 8007e96:	e733      	b.n	8007d00 <SetButtonEvents+0x7c>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	d000      	beq.n	8007e9e <SetButtonEvents+0x21a>
 8007e9c:	e740      	b.n	8007d20 <SetButtonEvents+0x9c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 8007e9e:	00f9      	lsls	r1, r7, #3
 8007ea0:	19c9      	adds	r1, r1, r7
 8007ea2:	4a39      	ldr	r2, [pc, #228]	; (8007f88 <SetButtonEvents+0x304>)
 8007ea4:	1852      	adds	r2, r2, r1
 8007ea6:	7a11      	ldrb	r1, [r2, #8]
 8007ea8:	2002      	movs	r0, #2
 8007eaa:	4381      	bics	r1, r0
 8007eac:	7211      	strb	r1, [r2, #8]
 8007eae:	e737      	b.n	8007d20 <SetButtonEvents+0x9c>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
 8007eb0:	465a      	mov	r2, fp
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	d000      	beq.n	8007eb8 <SetButtonEvents+0x234>
 8007eb6:	e744      	b.n	8007d42 <SetButtonEvents+0xbe>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8007eb8:	00f9      	lsls	r1, r7, #3
 8007eba:	19c9      	adds	r1, r1, r7
 8007ebc:	4a32      	ldr	r2, [pc, #200]	; (8007f88 <SetButtonEvents+0x304>)
 8007ebe:	1852      	adds	r2, r2, r1
 8007ec0:	7a11      	ldrb	r1, [r2, #8]
 8007ec2:	2004      	movs	r0, #4
 8007ec4:	4381      	bics	r1, r0
 8007ec6:	7211      	strb	r1, [r2, #8]
 8007ec8:	e73b      	b.n	8007d42 <SetButtonEvents+0xbe>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
 8007eca:	0032      	movs	r2, r6
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	d000      	beq.n	8007ed2 <SetButtonEvents+0x24e>
 8007ed0:	e747      	b.n	8007d62 <SetButtonEvents+0xde>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 8007ed2:	00f9      	lsls	r1, r7, #3
 8007ed4:	19c9      	adds	r1, r1, r7
 8007ed6:	4a2c      	ldr	r2, [pc, #176]	; (8007f88 <SetButtonEvents+0x304>)
 8007ed8:	1852      	adds	r2, r2, r1
 8007eda:	7a11      	ldrb	r1, [r2, #8]
 8007edc:	2008      	movs	r0, #8
 8007ede:	4381      	bics	r1, r0
 8007ee0:	7211      	strb	r1, [r2, #8]
 8007ee2:	e73e      	b.n	8007d62 <SetButtonEvents+0xde>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
 8007ee4:	002a      	movs	r2, r5
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	d000      	beq.n	8007eec <SetButtonEvents+0x268>
 8007eea:	e74a      	b.n	8007d82 <SetButtonEvents+0xfe>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8007eec:	00f9      	lsls	r1, r7, #3
 8007eee:	19c9      	adds	r1, r1, r7
 8007ef0:	4a25      	ldr	r2, [pc, #148]	; (8007f88 <SetButtonEvents+0x304>)
 8007ef2:	1852      	adds	r2, r2, r1
 8007ef4:	7a11      	ldrb	r1, [r2, #8]
 8007ef6:	2010      	movs	r0, #16
 8007ef8:	4381      	bics	r1, r0
 8007efa:	7211      	strb	r1, [r2, #8]
 8007efc:	e741      	b.n	8007d82 <SetButtonEvents+0xfe>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
 8007efe:	4652      	mov	r2, sl
 8007f00:	431a      	orrs	r2, r3
 8007f02:	d000      	beq.n	8007f06 <SetButtonEvents+0x282>
 8007f04:	e74e      	b.n	8007da4 <SetButtonEvents+0x120>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 8007f06:	00f9      	lsls	r1, r7, #3
 8007f08:	19c9      	adds	r1, r1, r7
 8007f0a:	4a1f      	ldr	r2, [pc, #124]	; (8007f88 <SetButtonEvents+0x304>)
 8007f0c:	1852      	adds	r2, r2, r1
 8007f0e:	7a11      	ldrb	r1, [r2, #8]
 8007f10:	2020      	movs	r0, #32
 8007f12:	4381      	bics	r1, r0
 8007f14:	7211      	strb	r1, [r2, #8]
 8007f16:	e745      	b.n	8007da4 <SetButtonEvents+0x120>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
 8007f18:	464a      	mov	r2, r9
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	d000      	beq.n	8007f20 <SetButtonEvents+0x29c>
 8007f1e:	e752      	b.n	8007dc6 <SetButtonEvents+0x142>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8007f20:	00f9      	lsls	r1, r7, #3
 8007f22:	19c9      	adds	r1, r1, r7
 8007f24:	4a18      	ldr	r2, [pc, #96]	; (8007f88 <SetButtonEvents+0x304>)
 8007f26:	1852      	adds	r2, r2, r1
 8007f28:	7a11      	ldrb	r1, [r2, #8]
 8007f2a:	2040      	movs	r0, #64	; 0x40
 8007f2c:	4381      	bics	r1, r0
 8007f2e:	7211      	strb	r1, [r2, #8]
 8007f30:	e749      	b.n	8007dc6 <SetButtonEvents+0x142>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
 8007f32:	4642      	mov	r2, r8
 8007f34:	4313      	orrs	r3, r2
 8007f36:	d000      	beq.n	8007f3a <SetButtonEvents+0x2b6>
 8007f38:	e757      	b.n	8007dea <SetButtonEvents+0x166>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8007f3a:	00fa      	lsls	r2, r7, #3
 8007f3c:	19d2      	adds	r2, r2, r7
 8007f3e:	4b12      	ldr	r3, [pc, #72]	; (8007f88 <SetButtonEvents+0x304>)
 8007f40:	189b      	adds	r3, r3, r2
 8007f42:	7a19      	ldrb	r1, [r3, #8]
 8007f44:	227f      	movs	r2, #127	; 0x7f
 8007f46:	400a      	ands	r2, r1
 8007f48:	721a      	strb	r2, [r3, #8]
 8007f4a:	e74e      	b.n	8007dea <SetButtonEvents+0x166>
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8007f4c:	0200      	lsls	r0, r0, #8
 8007f4e:	4301      	orrs	r1, r0
 8007f50:	ab02      	add	r3, sp, #8
 8007f52:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8007f54:	0020      	movs	r0, r4
 8007f56:	f7fe ff17 	bl	8006d88 <EE_WriteVariable>
 8007f5a:	e75e      	b.n	8007e1a <SetButtonEvents+0x196>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8007f5c:	0019      	movs	r1, r3
 8007f5e:	9801      	ldr	r0, [sp, #4]
 8007f60:	f7fe ff12 	bl	8006d88 <EE_WriteVariable>
 8007f64:	e769      	b.n	8007e3a <SetButtonEvents+0x1b6>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 8007f66:	0019      	movs	r1, r3
 8007f68:	9801      	ldr	r0, [sp, #4]
 8007f6a:	f7fe ff0d 	bl	8006d88 <EE_WriteVariable>
 8007f6e:	e773      	b.n	8007e58 <SetButtonEvents+0x1d4>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8007f70:	200b      	movs	r0, #11
}
 8007f72:	b005      	add	sp, #20
 8007f74:	bc3c      	pop	{r2, r3, r4, r5}
 8007f76:	4690      	mov	r8, r2
 8007f78:	4699      	mov	r9, r3
 8007f7a:	46a2      	mov	sl, r4
 8007f7c:	46ab      	mov	fp, r5
 8007f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 8007f80:	200b      	movs	r0, #11
 8007f82:	e7f6      	b.n	8007f72 <SetButtonEvents+0x2ee>
	return result;
 8007f84:	2000      	movs	r0, #0
 8007f86:	e7f4      	b.n	8007f72 <SetButtonEvents+0x2ee>
 8007f88:	20000cd0 	.word	0x20000cd0

08007f8c <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 8007f8c:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8007f8e:	f007 ff40 	bl	800fe12 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007f92:	b2c4      	uxtb	r4, r0
 8007f94:	0020      	movs	r0, r4
 8007f96:	f7fe fce7 	bl	8006968 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007f9a:	0020      	movs	r0, r4
 8007f9c:	f7fe fd12 	bl	80069c4 <SwitchStreamDMAToMsg>
}
 8007fa0:	bd10      	pop	{r4, pc}
	...

08007fa4 <SetupDMAStreams>:
{
 8007fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	000d      	movs	r5, r1
 8007faa:	0014      	movs	r4, r2
 8007fac:	220f      	movs	r2, #15
 8007fae:	446a      	add	r2, sp
 8007fb0:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007fb2:	aa0a      	add	r2, sp, #40	; 0x28
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00d      	beq.n	8007fd6 <SetupDMAStreams+0x32>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d100      	bne.n	8007fc0 <SetupDMAStreams+0x1c>
 8007fbe:	e0b9      	b.n	8008134 <SetupDMAStreams+0x190>
 8007fc0:	2a00      	cmp	r2, #0
 8007fc2:	d100      	bne.n	8007fc6 <SetupDMAStreams+0x22>
 8007fc4:	e0b9      	b.n	800813a <SetupDMAStreams+0x196>
	if (direction == FORWARD) 
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d00a      	beq.n	8007fe0 <SetupDMAStreams+0x3c>
	else if (direction == BACKWARD) 
 8007fca:	2801      	cmp	r0, #1
 8007fcc:	d041      	beq.n	8008052 <SetupDMAStreams+0xae>
	else if (direction == BIDIRECTIONAL) 
 8007fce:	2802      	cmp	r0, #2
 8007fd0:	d069      	beq.n	80080a6 <SetupDMAStreams+0x102>
		return BOS_ERR_WrongParam;
 8007fd2:	2067      	movs	r0, #103	; 0x67
 8007fd4:	e0af      	b.n	8008136 <SetupDMAStreams+0x192>
		portStatus[src] = STREAM;
 8007fd6:	4a5b      	ldr	r2, [pc, #364]	; (8008144 <SetupDMAStreams+0x1a0>)
 8007fd8:	2102      	movs	r1, #2
 8007fda:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007fdc:	2067      	movs	r0, #103	; 0x67
 8007fde:	e0aa      	b.n	8008136 <SetupDMAStreams+0x192>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	f005 ff41 	bl	800de68 <GetUart>
 8007fe6:	0006      	movs	r6, r0
 8007fe8:	ab0a      	add	r3, sp, #40	; 0x28
 8007fea:	7818      	ldrb	r0, [r3, #0]
 8007fec:	f005 ff3c 	bl	800de68 <GetUart>
 8007ff0:	0001      	movs	r1, r0
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	0030      	movs	r0, r6
 8007ff6:	f7fe fd17 	bl	8006a28 <StartDMAstream>
 8007ffa:	2817      	cmp	r0, #23
 8007ffc:	d100      	bne.n	8008000 <SetupDMAStreams+0x5c>
 8007ffe:	e09a      	b.n	8008136 <SetupDMAStreams+0x192>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008000:	0160      	lsls	r0, r4, #5
 8008002:	1b00      	subs	r0, r0, r4
 8008004:	0080      	lsls	r0, r0, #2
 8008006:	1900      	adds	r0, r0, r4
 8008008:	00c0      	lsls	r0, r0, #3
 800800a:	21fa      	movs	r1, #250	; 0xfa
 800800c:	0089      	lsls	r1, r1, #2
 800800e:	f7f8 f895 	bl	800013c <__udivsi3>
 8008012:	0001      	movs	r1, r0
 8008014:	260f      	movs	r6, #15
 8008016:	446e      	add	r6, sp
 8008018:	4b4b      	ldr	r3, [pc, #300]	; (8008148 <SetupDMAStreams+0x1a4>)
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	0033      	movs	r3, r6
 800801e:	2200      	movs	r2, #0
 8008020:	484a      	ldr	r0, [pc, #296]	; (800814c <SetupDMAStreams+0x1a8>)
 8008022:	f007 fd99 	bl	800fb58 <xTimerCreate>
 8008026:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 8008028:	7833      	ldrb	r3, [r6, #0]
 800802a:	3b01      	subs	r3, #1
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4a48      	ldr	r2, [pc, #288]	; (8008150 <SetupDMAStreams+0x1ac>)
 8008030:	509d      	str	r5, [r3, r2]
	if (xTimerStream != NULL)
 8008032:	2c00      	cmp	r4, #0
 8008034:	d100      	bne.n	8008038 <SetupDMAStreams+0x94>
 8008036:	e082      	b.n	800813e <SetupDMAStreams+0x19a>
		xTimerStart( xTimerStream, portMAX_DELAY );
 8008038:	f007 f820 	bl	800f07c <xTaskGetTickCount>
 800803c:	0002      	movs	r2, r0
 800803e:	2301      	movs	r3, #1
 8008040:	425b      	negs	r3, r3
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	2300      	movs	r3, #0
 8008046:	2101      	movs	r1, #1
 8008048:	0020      	movs	r0, r4
 800804a:	f007 fda9 	bl	800fba0 <xTimerGenericCommand>
	return BOS_OK;
 800804e:	2000      	movs	r0, #0
 8008050:	e071      	b.n	8008136 <SetupDMAStreams+0x192>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008052:	0010      	movs	r0, r2
 8008054:	f005 ff08 	bl	800de68 <GetUart>
 8008058:	0006      	movs	r6, r0
 800805a:	230f      	movs	r3, #15
 800805c:	446b      	add	r3, sp
 800805e:	7818      	ldrb	r0, [r3, #0]
 8008060:	f005 ff02 	bl	800de68 <GetUart>
 8008064:	0001      	movs	r1, r0
 8008066:	2201      	movs	r2, #1
 8008068:	0030      	movs	r0, r6
 800806a:	f7fe fcdd 	bl	8006a28 <StartDMAstream>
 800806e:	2817      	cmp	r0, #23
 8008070:	d061      	beq.n	8008136 <SetupDMAStreams+0x192>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008072:	0160      	lsls	r0, r4, #5
 8008074:	1b00      	subs	r0, r0, r4
 8008076:	0080      	lsls	r0, r0, #2
 8008078:	1900      	adds	r0, r0, r4
 800807a:	00c0      	lsls	r0, r0, #3
 800807c:	21fa      	movs	r1, #250	; 0xfa
 800807e:	0089      	lsls	r1, r1, #2
 8008080:	f7f8 f85c 	bl	800013c <__udivsi3>
 8008084:	0001      	movs	r1, r0
 8008086:	4b30      	ldr	r3, [pc, #192]	; (8008148 <SetupDMAStreams+0x1a4>)
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	ab0a      	add	r3, sp, #40	; 0x28
 800808c:	2200      	movs	r2, #0
 800808e:	482f      	ldr	r0, [pc, #188]	; (800814c <SetupDMAStreams+0x1a8>)
 8008090:	f007 fd62 	bl	800fb58 <xTimerCreate>
 8008094:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 8008096:	230f      	movs	r3, #15
 8008098:	446b      	add	r3, sp
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	3b01      	subs	r3, #1
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4a2b      	ldr	r2, [pc, #172]	; (8008150 <SetupDMAStreams+0x1ac>)
 80080a2:	509d      	str	r5, [r3, r2]
 80080a4:	e7c5      	b.n	8008032 <SetupDMAStreams+0x8e>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 80080a6:	0018      	movs	r0, r3
 80080a8:	f005 fede 	bl	800de68 <GetUart>
 80080ac:	0006      	movs	r6, r0
 80080ae:	ab0a      	add	r3, sp, #40	; 0x28
 80080b0:	7818      	ldrb	r0, [r3, #0]
 80080b2:	f005 fed9 	bl	800de68 <GetUart>
 80080b6:	0001      	movs	r1, r0
 80080b8:	2201      	movs	r2, #1
 80080ba:	0030      	movs	r0, r6
 80080bc:	f7fe fcb4 	bl	8006a28 <StartDMAstream>
 80080c0:	2817      	cmp	r0, #23
 80080c2:	d038      	beq.n	8008136 <SetupDMAStreams+0x192>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 80080c4:	0160      	lsls	r0, r4, #5
 80080c6:	1b00      	subs	r0, r0, r4
 80080c8:	0080      	lsls	r0, r0, #2
 80080ca:	1900      	adds	r0, r0, r4
 80080cc:	00c0      	lsls	r0, r0, #3
 80080ce:	21fa      	movs	r1, #250	; 0xfa
 80080d0:	0089      	lsls	r1, r1, #2
 80080d2:	f7f8 f833 	bl	800013c <__udivsi3>
 80080d6:	0004      	movs	r4, r0
 80080d8:	260f      	movs	r6, #15
 80080da:	446e      	add	r6, sp
 80080dc:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <SetupDMAStreams+0x1a4>)
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	0033      	movs	r3, r6
 80080e2:	2200      	movs	r2, #0
 80080e4:	0001      	movs	r1, r0
 80080e6:	4819      	ldr	r0, [pc, #100]	; (800814c <SetupDMAStreams+0x1a8>)
 80080e8:	f007 fd36 	bl	800fb58 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 80080ec:	7833      	ldrb	r3, [r6, #0]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4a17      	ldr	r2, [pc, #92]	; (8008150 <SetupDMAStreams+0x1ac>)
 80080f4:	509d      	str	r5, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80080f6:	ab0a      	add	r3, sp, #40	; 0x28
 80080f8:	7818      	ldrb	r0, [r3, #0]
 80080fa:	f005 feb5 	bl	800de68 <GetUart>
 80080fe:	0007      	movs	r7, r0
 8008100:	7830      	ldrb	r0, [r6, #0]
 8008102:	f005 feb1 	bl	800de68 <GetUart>
 8008106:	0001      	movs	r1, r0
 8008108:	2201      	movs	r2, #1
 800810a:	0038      	movs	r0, r7
 800810c:	f7fe fc8c 	bl	8006a28 <StartDMAstream>
 8008110:	2817      	cmp	r0, #23
 8008112:	d010      	beq.n	8008136 <SetupDMAStreams+0x192>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008114:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <SetupDMAStreams+0x1a4>)
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	ab0a      	add	r3, sp, #40	; 0x28
 800811a:	2200      	movs	r2, #0
 800811c:	0021      	movs	r1, r4
 800811e:	480b      	ldr	r0, [pc, #44]	; (800814c <SetupDMAStreams+0x1a8>)
 8008120:	f007 fd1a 	bl	800fb58 <xTimerCreate>
 8008124:	0004      	movs	r4, r0
		dmaStreamTotal[dst-1] = count;
 8008126:	ab0a      	add	r3, sp, #40	; 0x28
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	3b01      	subs	r3, #1
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4a08      	ldr	r2, [pc, #32]	; (8008150 <SetupDMAStreams+0x1ac>)
 8008130:	509d      	str	r5, [r3, r2]
 8008132:	e77e      	b.n	8008032 <SetupDMAStreams+0x8e>
		return BOS_ERR_WrongParam;
 8008134:	2067      	movs	r0, #103	; 0x67
}
 8008136:	b005      	add	sp, #20
 8008138:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 800813a:	2067      	movs	r0, #103	; 0x67
 800813c:	e7fb      	b.n	8008136 <SetupDMAStreams+0x192>
	return BOS_OK;
 800813e:	2000      	movs	r0, #0
 8008140:	e7f9      	b.n	8008136 <SetupDMAStreams+0x192>
 8008142:	46c0      	nop			; (mov r8, r8)
 8008144:	20000910 	.word	0x20000910
 8008148:	08007f8d 	.word	0x08007f8d
 800814c:	080198a4 	.word	0x080198a4
 8008150:	20000c90 	.word	0x20000c90

08008154 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 8008154:	b510      	push	{r4, lr}
	switch (port)
 8008156:	2805      	cmp	r0, #5
 8008158:	d80a      	bhi.n	8008170 <NotifyMessagingTask+0x1c>
 800815a:	0080      	lsls	r0, r0, #2
 800815c:	4b15      	ldr	r3, [pc, #84]	; (80081b4 <NotifyMessagingTask+0x60>)
 800815e:	581b      	ldr	r3, [r3, r0]
 8008160:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 8008162:	4b15      	ldr	r3, [pc, #84]	; (80081b8 <NotifyMessagingTask+0x64>)
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	2300      	movs	r3, #0
 8008168:	2202      	movs	r2, #2
 800816a:	2100      	movs	r1, #0
 800816c:	f007 fc10 	bl	800f990 <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8008170:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8008172:	4b12      	ldr	r3, [pc, #72]	; (80081bc <NotifyMessagingTask+0x68>)
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	2300      	movs	r3, #0
 8008178:	2202      	movs	r2, #2
 800817a:	2100      	movs	r1, #0
 800817c:	f007 fc08 	bl	800f990 <xTaskGenericNotify>
 8008180:	e7f6      	b.n	8008170 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8008182:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <NotifyMessagingTask+0x6c>)
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	2300      	movs	r3, #0
 8008188:	2202      	movs	r2, #2
 800818a:	2100      	movs	r1, #0
 800818c:	f007 fc00 	bl	800f990 <xTaskGenericNotify>
 8008190:	e7ee      	b.n	8008170 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8008192:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <NotifyMessagingTask+0x70>)
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	2300      	movs	r3, #0
 8008198:	2202      	movs	r2, #2
 800819a:	2100      	movs	r1, #0
 800819c:	f007 fbf8 	bl	800f990 <xTaskGenericNotify>
 80081a0:	e7e6      	b.n	8008170 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 80081a2:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <NotifyMessagingTask+0x74>)
 80081a4:	6818      	ldr	r0, [r3, #0]
 80081a6:	2300      	movs	r3, #0
 80081a8:	2202      	movs	r2, #2
 80081aa:	2100      	movs	r1, #0
 80081ac:	f007 fbf0 	bl	800f990 <xTaskGenericNotify>
}
 80081b0:	e7de      	b.n	8008170 <NotifyMessagingTask+0x1c>
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	0801988c 	.word	0x0801988c
 80081b8:	20000cac 	.word	0x20000cac
 80081bc:	20000cb0 	.word	0x20000cb0
 80081c0:	20000cb4 	.word	0x20000cb4
 80081c4:	20000cb8 	.word	0x20000cb8
 80081c8:	20000cbc 	.word	0x20000cbc

080081cc <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 80081cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ce:	46de      	mov	lr, fp
 80081d0:	4657      	mov	r7, sl
 80081d2:	464e      	mov	r6, r9
 80081d4:	4645      	mov	r5, r8
 80081d6:	b5e0      	push	{r5, r6, r7, lr}
 80081d8:	b085      	sub	sp, #20
 80081da:	0007      	movs	r7, r0
 80081dc:	4688      	mov	r8, r1
 80081de:	0015      	movs	r5, r2
 80081e0:	4699      	mov	r9, r3
 80081e2:	ab0e      	add	r3, sp, #56	; 0x38
 80081e4:	881e      	ldrh	r6, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 80081e6:	0003      	movs	r3, r0
 80081e8:	4313      	orrs	r3, r2
 80081ea:	d100      	bne.n	80081ee <SendMessageFromPort+0x22>
 80081ec:	e167      	b.n	80084be <SendMessageFromPort+0x2f2>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d104      	bne.n	80081fc <SendMessageFromPort+0x30>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80081f2:	2aff      	cmp	r2, #255	; 0xff
 80081f4:	d002      	beq.n	80081fc <SendMessageFromPort+0x30>
 80081f6:	2afe      	cmp	r2, #254	; 0xfe
 80081f8:	d000      	beq.n	80081fc <SendMessageFromPort+0x30>
 80081fa:	e162      	b.n	80084c2 <SendMessageFromPort+0x2f6>
 80081fc:	2f00      	cmp	r7, #0
 80081fe:	d005      	beq.n	800820c <SendMessageFromPort+0x40>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 8008200:	4643      	mov	r3, r8
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <SendMessageFromPort+0x40>
 8008206:	2d00      	cmp	r5, #0
 8008208:	d100      	bne.n	800820c <SendMessageFromPort+0x40>
 800820a:	e15c      	b.n	80084c6 <SendMessageFromPort+0x2fa>
		return BOS_ERR_WrongParam; 
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 800820c:	2000      	movs	r0, #0
 800820e:	f006 fe99 	bl	800ef44 <uxTaskPriorityGet>
 8008212:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8008214:	2105      	movs	r1, #5
 8008216:	2000      	movs	r0, #0
 8008218:	f006 fea4 	bl	800ef64 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 800821c:	4bae      	ldr	r3, [pc, #696]	; (80084d8 <SendMessageFromPort+0x30c>)
 800821e:	2248      	movs	r2, #72	; 0x48
 8008220:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8008222:	3212      	adds	r2, #18
 8008224:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008226:	4643      	mov	r3, r8
 8008228:	433b      	orrs	r3, r7
 800822a:	d103      	bne.n	8008234 <SendMessageFromPort+0x68>
 800822c:	1cab      	adds	r3, r5, #2
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b01      	cmp	r3, #1
 8008232:	d902      	bls.n	800823a <SendMessageFromPort+0x6e>
 8008234:	464b      	mov	r3, r9
 8008236:	2b00      	cmp	r3, #0
 8008238:	d134      	bne.n	80082a4 <SendMessageFromPort+0xd8>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 800823a:	3e01      	subs	r6, #1
 800823c:	4ba7      	ldr	r3, [pc, #668]	; (80084dc <SendMessageFromPort+0x310>)
 800823e:	5d9c      	ldrb	r4, [r3, r6]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8008240:	00f3      	lsls	r3, r6, #3
 8008242:	1b9e      	subs	r6, r3, r6
 8008244:	00f1      	lsls	r1, r6, #3
 8008246:	4ba6      	ldr	r3, [pc, #664]	; (80084e0 <SendMessageFromPort+0x314>)
 8008248:	18c9      	adds	r1, r1, r3
 800824a:	0022      	movs	r2, r4
 800824c:	48a5      	ldr	r0, [pc, #660]	; (80084e4 <SendMessageFromPort+0x318>)
 800824e:	f00b f8c0 	bl	80133d2 <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 8008252:	4ba1      	ldr	r3, [pc, #644]	; (80084d8 <SendMessageFromPort+0x30c>)
 8008254:	469a      	mov	sl, r3
 8008256:	709c      	strb	r4, [r3, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 8008258:	1ce6      	adds	r6, r4, #3
 800825a:	0032      	movs	r2, r6
 800825c:	0019      	movs	r1, r3
 800825e:	48a2      	ldr	r0, [pc, #648]	; (80084e8 <SendMessageFromPort+0x31c>)
 8008260:	f00b f8b7 	bl	80133d2 <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8008264:	b2a4      	uxth	r4, r4
 8008266:	1ce1      	adds	r1, r4, #3
 8008268:	b289      	uxth	r1, r1
 800826a:	489f      	ldr	r0, [pc, #636]	; (80084e8 <SendMessageFromPort+0x31c>)
 800826c:	f005 f826 	bl	800d2bc <CalculateCRC8>
 8008270:	4653      	mov	r3, sl
 8008272:	5598      	strb	r0, [r3, r6]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 8008274:	2238      	movs	r2, #56	; 0x38
 8008276:	2100      	movs	r1, #0
 8008278:	489b      	ldr	r0, [pc, #620]	; (80084e8 <SendMessageFromPort+0x31c>)
 800827a:	f00b f8b3 	bl	80133e4 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 800827e:	3502      	adds	r5, #2
 8008280:	b2ed      	uxtb	r5, r5
 8008282:	2d01      	cmp	r5, #1
 8008284:	d900      	bls.n	8008288 <SendMessageFromPort+0xbc>
 8008286:	e0eb      	b.n	8008460 <SendMessageFromPort+0x294>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 8008288:	464b      	mov	r3, r9
 800828a:	2b00      	cmp	r3, #0
 800828c:	d105      	bne.n	800829a <SendMessageFromPort+0xce>
 800828e:	4643      	mov	r3, r8
 8008290:	2b00      	cmp	r3, #0
 8008292:	d102      	bne.n	800829a <SendMessageFromPort+0xce>
			src = message[4];
 8008294:	4b90      	ldr	r3, [pc, #576]	; (80084d8 <SendMessageFromPort+0x30c>)
 8008296:	791b      	ldrb	r3, [r3, #4]
 8008298:	4698      	mov	r8, r3
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 800829a:	4640      	mov	r0, r8
 800829c:	f7fa fe78 	bl	8002f90 <FindBroadcastRoutes>
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80082a0:	2501      	movs	r5, #1
 80082a2:	e0f5      	b.n	8008490 <SendMessageFromPort+0x2c4>
		if (src == 0)		src = myID;
 80082a4:	4643      	mov	r3, r8
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d102      	bne.n	80082b0 <SendMessageFromPort+0xe4>
 80082aa:	4b90      	ldr	r3, [pc, #576]	; (80084ec <SendMessageFromPort+0x320>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	4698      	mov	r8, r3
		if (code > 0xFF)	extendCode = true;
 80082b0:	464b      	mov	r3, r9
 80082b2:	2bff      	cmp	r3, #255	; 0xff
 80082b4:	d84b      	bhi.n	800834e <SendMessageFromPort+0x182>
	bool extendOptions = false, extendCode = false;
 80082b6:	2100      	movs	r1, #0
		message[2] = length;	
 80082b8:	4a87      	ldr	r2, [pc, #540]	; (80084d8 <SendMessageFromPort+0x30c>)
 80082ba:	2300      	movs	r3, #0
 80082bc:	7093      	strb	r3, [r2, #2]
		message[3] = dst;						
 80082be:	70d5      	strb	r5, [r2, #3]
		message[4] = src;
 80082c0:	4643      	mov	r3, r8
 80082c2:	7113      	strb	r3, [r2, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 80082c4:	488a      	ldr	r0, [pc, #552]	; (80084f0 <SendMessageFromPort+0x324>)
 80082c6:	2306      	movs	r3, #6
 80082c8:	56c3      	ldrsb	r3, [r0, r3]
 80082ca:	79c0      	ldrb	r0, [r0, #7]
 80082cc:	0080      	lsls	r0, r0, #2
 80082ce:	4303      	orrs	r3, r0
 80082d0:	b25b      	sxtb	r3, r3
 80082d2:	0048      	lsls	r0, r1, #1
 80082d4:	4303      	orrs	r3, r0
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	7153      	strb	r3, [r2, #5]
		message[6+shift] = (uint8_t) code;
 80082da:	4648      	mov	r0, r9
 80082dc:	7190      	strb	r0, [r2, #6]
		if (extendCode == true) {
 80082de:	2900      	cmp	r1, #0
 80082e0:	d037      	beq.n	8008352 <SendMessageFromPort+0x186>
			message[6+shift] = (uint8_t) (code >> 8);		
 80082e2:	0a02      	lsrs	r2, r0, #8
 80082e4:	497c      	ldr	r1, [pc, #496]	; (80084d8 <SendMessageFromPort+0x30c>)
 80082e6:	71ca      	strb	r2, [r1, #7]
			++shift;
 80082e8:	2201      	movs	r2, #1
 80082ea:	4693      	mov	fp, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 80082ec:	2e2e      	cmp	r6, #46	; 0x2e
 80082ee:	d933      	bls.n	8008358 <SendMessageFromPort+0x18c>
			message[5] |= 0x80;		
 80082f0:	2280      	movs	r2, #128	; 0x80
 80082f2:	4252      	negs	r2, r2
 80082f4:	4313      	orrs	r3, r2
 80082f6:	4a78      	ldr	r2, [pc, #480]	; (80084d8 <SendMessageFromPort+0x30c>)
 80082f8:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 80082fa:	4b7e      	ldr	r3, [pc, #504]	; (80084f4 <SendMessageFromPort+0x328>)
 80082fc:	801e      	strh	r6, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
 80082fe:	2400      	movs	r4, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8008300:	262e      	movs	r6, #46	; 0x2e
			while (totalNumberOfParams != 0)
 8008302:	4b7c      	ldr	r3, [pc, #496]	; (80084f4 <SendMessageFromPort+0x328>)
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	469a      	mov	sl, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	d035      	beq.n	8008378 <SendMessageFromPort+0x1ac>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 800830c:	0031      	movs	r1, r6
 800830e:	4650      	mov	r0, sl
 8008310:	f7f7 ff14 	bl	800013c <__udivsi3>
 8008314:	b280      	uxth	r0, r0
 8008316:	2800      	cmp	r0, #0
 8008318:	d13b      	bne.n	8008392 <SendMessageFromPort+0x1c6>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 800831a:	486f      	ldr	r0, [pc, #444]	; (80084d8 <SendMessageFromPort+0x30c>)
 800831c:	7942      	ldrb	r2, [r0, #5]
 800831e:	237f      	movs	r3, #127	; 0x7f
 8008320:	4013      	ands	r3, r2
 8008322:	7143      	strb	r3, [r0, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8008324:	465b      	mov	r3, fp
 8008326:	3307      	adds	r3, #7
 8008328:	1818      	adds	r0, r3, r0
 800832a:	4c73      	ldr	r4, [pc, #460]	; (80084f8 <SendMessageFromPort+0x32c>)
 800832c:	8821      	ldrh	r1, [r4, #0]
 800832e:	4b73      	ldr	r3, [pc, #460]	; (80084fc <SendMessageFromPort+0x330>)
 8008330:	18c9      	adds	r1, r1, r3
 8008332:	4652      	mov	r2, sl
 8008334:	f00b f84d 	bl	80133d2 <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	8023      	strh	r3, [r4, #0]
 800833c:	4a6d      	ldr	r2, [pc, #436]	; (80084f4 <SendMessageFromPort+0x328>)
 800833e:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 8008340:	465c      	mov	r4, fp
 8008342:	4454      	add	r4, sl
 8008344:	b2e4      	uxtb	r4, r4
 8008346:	3404      	adds	r4, #4
 8008348:	b2e4      	uxtb	r4, r4
					numberOfParams = totalNumberOfParams;
 800834a:	4656      	mov	r6, sl
 800834c:	e7d9      	b.n	8008302 <SendMessageFromPort+0x136>
		if (code > 0xFF)	extendCode = true;
 800834e:	2101      	movs	r1, #1
 8008350:	e7b2      	b.n	80082b8 <SendMessageFromPort+0xec>
 8008352:	2200      	movs	r2, #0
 8008354:	4693      	mov	fp, r2
 8008356:	e7c9      	b.n	80082ec <SendMessageFromPort+0x120>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8008358:	465b      	mov	r3, fp
 800835a:	3307      	adds	r3, #7
 800835c:	485e      	ldr	r0, [pc, #376]	; (80084d8 <SendMessageFromPort+0x30c>)
 800835e:	1818      	adds	r0, r3, r0
 8008360:	4b65      	ldr	r3, [pc, #404]	; (80084f8 <SendMessageFromPort+0x32c>)
 8008362:	8819      	ldrh	r1, [r3, #0]
 8008364:	4b65      	ldr	r3, [pc, #404]	; (80084fc <SendMessageFromPort+0x330>)
 8008366:	18c9      	adds	r1, r1, r3
 8008368:	0032      	movs	r2, r6
 800836a:	f00b f832 	bl	80133d2 <memcpy>
			length = numberOfParams + shift + 4;
 800836e:	465b      	mov	r3, fp
 8008370:	199c      	adds	r4, r3, r6
 8008372:	b2e4      	uxtb	r4, r4
 8008374:	3404      	adds	r4, #4
 8008376:	b2e4      	uxtb	r4, r4
		if(AddBcastPayload == true)
 8008378:	4b61      	ldr	r3, [pc, #388]	; (8008500 <SendMessageFromPort+0x334>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d100      	bne.n	8008382 <SendMessageFromPort+0x1b6>
 8008380:	e767      	b.n	8008252 <SendMessageFromPort+0x86>
			if (dstGroupID < BOS_BROADCAST)
 8008382:	4b60      	ldr	r3, [pc, #384]	; (8008504 <SendMessageFromPort+0x338>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	469a      	mov	sl, r3
 8008388:	2bff      	cmp	r3, #255	; 0xff
 800838a:	d015      	beq.n	80083b8 <SendMessageFromPort+0x1ec>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 800838c:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 800838e:	2200      	movs	r2, #0
 8008390:	e016      	b.n	80083c0 <SendMessageFromPort+0x1f4>
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8008392:	9600      	str	r6, [sp, #0]
 8008394:	464b      	mov	r3, r9
 8008396:	002a      	movs	r2, r5
 8008398:	4641      	mov	r1, r8
 800839a:	0038      	movs	r0, r7
 800839c:	f7ff ff16 	bl	80081cc <SendMessageFromPort>
					osDelay(10);
 80083a0:	200a      	movs	r0, #10
 80083a2:	f005 feb3 	bl	800e10c <osDelay>
					totalNumberOfParams -= numberOfParams;
 80083a6:	4a53      	ldr	r2, [pc, #332]	; (80084f4 <SendMessageFromPort+0x328>)
 80083a8:	8813      	ldrh	r3, [r2, #0]
 80083aa:	1b9b      	subs	r3, r3, r6
 80083ac:	8013      	strh	r3, [r2, #0]
					ptrShift += numberOfParams;
 80083ae:	4a52      	ldr	r2, [pc, #328]	; (80084f8 <SendMessageFromPort+0x32c>)
 80083b0:	8813      	ldrh	r3, [r2, #0]
 80083b2:	18f3      	adds	r3, r6, r3
 80083b4:	8013      	strh	r3, [r2, #0]
 80083b6:	e7a4      	b.n	8008302 <SendMessageFromPort+0x136>
			uint8_t groupMembers = 0;
 80083b8:	2200      	movs	r2, #0
 80083ba:	e022      	b.n	8008402 <SendMessageFromPort+0x236>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 80083bc:	3301      	adds	r3, #1
 80083be:	b29b      	uxth	r3, r3
 80083c0:	4851      	ldr	r0, [pc, #324]	; (8008508 <SendMessageFromPort+0x33c>)
 80083c2:	7800      	ldrb	r0, [r0, #0]
 80083c4:	4298      	cmp	r0, r3
 80083c6:	d316      	bcc.n	80083f6 <SendMessageFromPort+0x22a>
					if (InGroup(i, dstGroupID))
 80083c8:	1e58      	subs	r0, r3, #1
 80083ca:	0040      	lsls	r0, r0, #1
 80083cc:	494f      	ldr	r1, [pc, #316]	; (800850c <SendMessageFromPort+0x340>)
 80083ce:	5a40      	ldrh	r0, [r0, r1]
 80083d0:	4651      	mov	r1, sl
 80083d2:	4108      	asrs	r0, r1
 80083d4:	07c1      	lsls	r1, r0, #31
 80083d6:	d5f1      	bpl.n	80083bc <SendMessageFromPort+0x1f0>
						++groupMembers;							// Add this member
 80083d8:	3201      	adds	r2, #1
 80083da:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 80083dc:	18b0      	adds	r0, r6, r2
 80083de:	3001      	adds	r0, #1
 80083e0:	282d      	cmp	r0, #45	; 0x2d
 80083e2:	dd00      	ble.n	80083e6 <SendMessageFromPort+0x21a>
 80083e4:	e071      	b.n	80084ca <SendMessageFromPort+0x2fe>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 80083e6:	4659      	mov	r1, fp
 80083e8:	1dc8      	adds	r0, r1, #7
 80083ea:	1830      	adds	r0, r6, r0
 80083ec:	1810      	adds	r0, r2, r0
 80083ee:	3801      	subs	r0, #1
 80083f0:	4939      	ldr	r1, [pc, #228]	; (80084d8 <SendMessageFromPort+0x30c>)
 80083f2:	540b      	strb	r3, [r1, r0]
 80083f4:	e7e2      	b.n	80083bc <SendMessageFromPort+0x1f0>
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 80083f6:	465b      	mov	r3, fp
 80083f8:	3307      	adds	r3, #7
 80083fa:	18f3      	adds	r3, r6, r3
 80083fc:	18d3      	adds	r3, r2, r3
 80083fe:	4836      	ldr	r0, [pc, #216]	; (80084d8 <SendMessageFromPort+0x30c>)
 8008400:	54c2      	strb	r2, [r0, r3]
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8008402:	4653      	mov	r3, sl
 8008404:	2bff      	cmp	r3, #255	; 0xff
 8008406:	d01a      	beq.n	800843e <SendMessageFromPort+0x272>
			else if (dstGroupID == BOS_BROADCAST)
 8008408:	4653      	mov	r3, sl
 800840a:	2bff      	cmp	r3, #255	; 0xff
 800840c:	d05f      	beq.n	80084ce <SendMessageFromPort+0x302>
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 800840e:	18b3      	adds	r3, r6, r2
 8008410:	3302      	adds	r3, #2
 8008412:	2b2d      	cmp	r3, #45	; 0x2d
 8008414:	dc5d      	bgt.n	80084d2 <SendMessageFromPort+0x306>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 8008416:	483e      	ldr	r0, [pc, #248]	; (8008510 <SendMessageFromPort+0x344>)
 8008418:	7803      	ldrb	r3, [r0, #0]
 800841a:	3301      	adds	r3, #1
 800841c:	b2db      	uxtb	r3, r3
 800841e:	7003      	strb	r3, [r0, #0]
 8008420:	4658      	mov	r0, fp
 8008422:	3007      	adds	r0, #7
 8008424:	1836      	adds	r6, r6, r0
 8008426:	1996      	adds	r6, r2, r6
 8008428:	3601      	adds	r6, #1
 800842a:	482b      	ldr	r0, [pc, #172]	; (80084d8 <SendMessageFromPort+0x30c>)
 800842c:	5583      	strb	r3, [r0, r6]
			if (dstGroupID == BOS_BROADCAST)
 800842e:	4653      	mov	r3, sl
 8008430:	2bff      	cmp	r3, #255	; 0xff
 8008432:	d012      	beq.n	800845a <SendMessageFromPort+0x28e>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8008434:	18a4      	adds	r4, r4, r2
 8008436:	b2e4      	uxtb	r4, r4
 8008438:	3402      	adds	r4, #2
 800843a:	b2e4      	uxtb	r4, r4
 800843c:	e709      	b.n	8008252 <SendMessageFromPort+0x86>
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 800843e:	1c73      	adds	r3, r6, #1
 8008440:	2b2d      	cmp	r3, #45	; 0x2d
 8008442:	dce1      	bgt.n	8008408 <SendMessageFromPort+0x23c>
				message[7+shift+numberOfParams] = ++bcastID;
 8008444:	4832      	ldr	r0, [pc, #200]	; (8008510 <SendMessageFromPort+0x344>)
 8008446:	7803      	ldrb	r3, [r0, #0]
 8008448:	3301      	adds	r3, #1
 800844a:	b2db      	uxtb	r3, r3
 800844c:	7003      	strb	r3, [r0, #0]
 800844e:	4658      	mov	r0, fp
 8008450:	3007      	adds	r0, #7
 8008452:	1836      	adds	r6, r6, r0
 8008454:	4820      	ldr	r0, [pc, #128]	; (80084d8 <SendMessageFromPort+0x30c>)
 8008456:	5583      	strb	r3, [r0, r6]
 8008458:	e7e9      	b.n	800842e <SendMessageFromPort+0x262>
				length += 1;		// + bcastID
 800845a:	3401      	adds	r4, #1
 800845c:	b2e4      	uxtb	r4, r4
 800845e:	e6f8      	b.n	8008252 <SendMessageFromPort+0x86>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 8008460:	3404      	adds	r4, #4
 8008462:	b2a2      	uxth	r2, r4
 8008464:	2332      	movs	r3, #50	; 0x32
 8008466:	491c      	ldr	r1, [pc, #112]	; (80084d8 <SendMessageFromPort+0x30c>)
 8008468:	0038      	movs	r0, r7
 800846a:	f005 fd69 	bl	800df40 <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 800846e:	9903      	ldr	r1, [sp, #12]
 8008470:	2000      	movs	r0, #0
 8008472:	f006 fd77 	bl	800ef64 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 8008476:	4b27      	ldr	r3, [pc, #156]	; (8008514 <SendMessageFromPort+0x348>)
 8008478:	2202      	movs	r2, #2
 800847a:	701a      	strb	r2, [r3, #0]
	
	return result;
 800847c:	2000      	movs	r0, #0
}
 800847e:	b005      	add	sp, #20
 8008480:	bc3c      	pop	{r2, r3, r4, r5}
 8008482:	4690      	mov	r8, r2
 8008484:	4699      	mov	r9, r3
 8008486:	46a2      	mov	sl, r4
 8008488:	46ab      	mov	fp, r5
 800848a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 800848c:	3501      	adds	r5, #1
 800848e:	b2ed      	uxtb	r5, r5
 8008490:	2d05      	cmp	r5, #5
 8008492:	d8ec      	bhi.n	800846e <SendMessageFromPort+0x2a2>
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8008494:	4b15      	ldr	r3, [pc, #84]	; (80084ec <SendMessageFromPort+0x320>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	3b01      	subs	r3, #1
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	4a1e      	ldr	r2, [pc, #120]	; (8008518 <SendMessageFromPort+0x34c>)
 800849e:	5a9b      	ldrh	r3, [r3, r2]
 80084a0:	1e6a      	subs	r2, r5, #1
 80084a2:	4113      	asrs	r3, r2
 80084a4:	07db      	lsls	r3, r3, #31
 80084a6:	d5f1      	bpl.n	800848c <SendMessageFromPort+0x2c0>
				writePxDMAMutex(p, message, length+4, cmd50ms);
 80084a8:	1d22      	adds	r2, r4, #4
 80084aa:	b292      	uxth	r2, r2
 80084ac:	2332      	movs	r3, #50	; 0x32
 80084ae:	490a      	ldr	r1, [pc, #40]	; (80084d8 <SendMessageFromPort+0x30c>)
 80084b0:	0028      	movs	r0, r5
 80084b2:	f005 fd45 	bl	800df40 <writePxDMAMutex>
				Delay_ms(1);
 80084b6:	2001      	movs	r0, #1
 80084b8:	f007 fea6 	bl	8010208 <HAL_Delay>
 80084bc:	e7e6      	b.n	800848c <SendMessageFromPort+0x2c0>
		return BOS_ERR_WrongParam; 
 80084be:	2067      	movs	r0, #103	; 0x67
 80084c0:	e7dd      	b.n	800847e <SendMessageFromPort+0x2b2>
 80084c2:	2067      	movs	r0, #103	; 0x67
 80084c4:	e7db      	b.n	800847e <SendMessageFromPort+0x2b2>
 80084c6:	2067      	movs	r0, #103	; 0x67
 80084c8:	e7d9      	b.n	800847e <SendMessageFromPort+0x2b2>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80084ca:	2069      	movs	r0, #105	; 0x69
 80084cc:	e7d7      	b.n	800847e <SendMessageFromPort+0x2b2>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80084ce:	2069      	movs	r0, #105	; 0x69
 80084d0:	e7d5      	b.n	800847e <SendMessageFromPort+0x2b2>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80084d2:	2069      	movs	r0, #105	; 0x69
 80084d4:	e7d3      	b.n	800847e <SendMessageFromPort+0x2b2>
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	20000718 	.word	0x20000718
 80084dc:	20000750 	.word	0x20000750
 80084e0:	20000560 	.word	0x20000560
 80084e4:	2000071b 	.word	0x2000071b
 80084e8:	20000c30 	.word	0x20000c30
 80084ec:	20000896 	.word	0x20000896
 80084f0:	20006148 	.word	0x20006148
 80084f4:	20000d42 	.word	0x20000d42
 80084f8:	20000d40 	.word	0x20000d40
 80084fc:	20000758 	.word	0x20000758
 8008500:	200002cc 	.word	0x200002cc
 8008504:	2000001d 	.word	0x2000001d
 8008508:	2000001c 	.word	0x2000001c
 800850c:	200006e0 	.word	0x200006e0
 8008510:	2000050c 	.word	0x2000050c
 8008514:	20000928 	.word	0x20000928
 8008518:	20000510 	.word	0x20000510

0800851c <ForwardReceivedMessage>:
{
 800851c:	b530      	push	{r4, r5, lr}
 800851e:	b083      	sub	sp, #12
 8008520:	0005      	movs	r5, r0
	AddBcastPayload = false; 	
 8008522:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <ForwardReceivedMessage+0x34>)
 8008524:	2200      	movs	r2, #0
 8008526:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 8008528:	1e42      	subs	r2, r0, #1
 800852a:	00d3      	lsls	r3, r2, #3
 800852c:	1a9b      	subs	r3, r3, r2
 800852e:	00da      	lsls	r2, r3, #3
 8008530:	4b08      	ldr	r3, [pc, #32]	; (8008554 <ForwardReceivedMessage+0x38>)
 8008532:	5cd4      	ldrb	r4, [r2, r3]
	port = FindRoute(myID, dst); 
 8008534:	4b08      	ldr	r3, [pc, #32]	; (8008558 <ForwardReceivedMessage+0x3c>)
 8008536:	7818      	ldrb	r0, [r3, #0]
 8008538:	0021      	movs	r1, r4
 800853a:	f7fa fdc1 	bl	80030c0 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 800853e:	9500      	str	r5, [sp, #0]
 8008540:	2300      	movs	r3, #0
 8008542:	0022      	movs	r2, r4
 8008544:	2100      	movs	r1, #0
 8008546:	f7ff fe41 	bl	80081cc <SendMessageFromPort>
}
 800854a:	2000      	movs	r0, #0
 800854c:	b003      	add	sp, #12
 800854e:	bd30      	pop	{r4, r5, pc}
 8008550:	200002cc 	.word	0x200002cc
 8008554:	20000560 	.word	0x20000560
 8008558:	20000896 	.word	0x20000896

0800855c <BroadcastReceivedMessage>:
{
 800855c:	b500      	push	{lr}
 800855e:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8008560:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <BroadcastReceivedMessage+0x38>)
 8008562:	2200      	movs	r2, #0
 8008564:	701a      	strb	r2, [r3, #0]
 8008566:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <BroadcastReceivedMessage+0x3c>)
 8008568:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 800856a:	28ff      	cmp	r0, #255	; 0xff
 800856c:	d009      	beq.n	8008582 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 800856e:	9100      	str	r1, [sp, #0]
 8008570:	2300      	movs	r3, #0
 8008572:	22fe      	movs	r2, #254	; 0xfe
 8008574:	2100      	movs	r1, #0
 8008576:	2000      	movs	r0, #0
 8008578:	f7ff fe28 	bl	80081cc <SendMessageFromPort>
}
 800857c:	2000      	movs	r0, #0
 800857e:	b003      	add	sp, #12
 8008580:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 8008582:	9100      	str	r1, [sp, #0]
 8008584:	2300      	movs	r3, #0
 8008586:	32ff      	adds	r2, #255	; 0xff
 8008588:	2100      	movs	r1, #0
 800858a:	2000      	movs	r0, #0
 800858c:	f7ff fe1e 	bl	80081cc <SendMessageFromPort>
 8008590:	e7f4      	b.n	800857c <BroadcastReceivedMessage+0x20>
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	200002cc 	.word	0x200002cc
 8008598:	2000001d 	.word	0x2000001d

0800859c <BroadcastMessage>:
{
 800859c:	b530      	push	{r4, r5, lr}
 800859e:	b083      	sub	sp, #12
 80085a0:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 80085a2:	4b0f      	ldr	r3, [pc, #60]	; (80085e0 <BroadcastMessage+0x44>)
 80085a4:	2501      	movs	r5, #1
 80085a6:	701d      	strb	r5, [r3, #0]
 80085a8:	4b0e      	ldr	r3, [pc, #56]	; (80085e4 <BroadcastMessage+0x48>)
 80085aa:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 80085ac:	29ff      	cmp	r1, #255	; 0xff
 80085ae:	d00e      	beq.n	80085ce <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 80085b0:	9400      	str	r4, [sp, #0]
 80085b2:	0013      	movs	r3, r2
 80085b4:	22fe      	movs	r2, #254	; 0xfe
 80085b6:	0001      	movs	r1, r0
 80085b8:	2000      	movs	r0, #0
 80085ba:	f7ff fe07 	bl	80081cc <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 80085be:	0022      	movs	r2, r4
 80085c0:	2100      	movs	r1, #0
 80085c2:	4809      	ldr	r0, [pc, #36]	; (80085e8 <BroadcastMessage+0x4c>)
 80085c4:	f00a ff0e 	bl	80133e4 <memset>
}
 80085c8:	2000      	movs	r0, #0
 80085ca:	b003      	add	sp, #12
 80085cc:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 80085ce:	9400      	str	r4, [sp, #0]
 80085d0:	0013      	movs	r3, r2
 80085d2:	22ff      	movs	r2, #255	; 0xff
 80085d4:	0001      	movs	r1, r0
 80085d6:	2000      	movs	r0, #0
 80085d8:	f7ff fdf8 	bl	80081cc <SendMessageFromPort>
 80085dc:	e7ef      	b.n	80085be <BroadcastMessage+0x22>
 80085de:	46c0      	nop			; (mov r8, r8)
 80085e0:	200002cc 	.word	0x200002cc
 80085e4:	2000001d 	.word	0x2000001d
 80085e8:	20000758 	.word	0x20000758

080085ec <SendMessageToModule>:
{
 80085ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ee:	b083      	sub	sp, #12
 80085f0:	0004      	movs	r4, r0
 80085f2:	000e      	movs	r6, r1
 80085f4:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 80085f6:	28ff      	cmp	r0, #255	; 0xff
 80085f8:	d012      	beq.n	8008620 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 80085fa:	4f0d      	ldr	r7, [pc, #52]	; (8008630 <SendMessageToModule+0x44>)
 80085fc:	7838      	ldrb	r0, [r7, #0]
 80085fe:	0021      	movs	r1, r4
 8008600:	f7fa fd5e 	bl	80030c0 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 8008604:	7839      	ldrb	r1, [r7, #0]
 8008606:	9500      	str	r5, [sp, #0]
 8008608:	0033      	movs	r3, r6
 800860a:	0022      	movs	r2, r4
 800860c:	f7ff fdde 	bl	80081cc <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8008610:	002a      	movs	r2, r5
 8008612:	2100      	movs	r1, #0
 8008614:	4807      	ldr	r0, [pc, #28]	; (8008634 <SendMessageToModule+0x48>)
 8008616:	f00a fee5 	bl	80133e4 <memset>
}
 800861a:	2000      	movs	r0, #0
 800861c:	b003      	add	sp, #12
 800861e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8008620:	4b03      	ldr	r3, [pc, #12]	; (8008630 <SendMessageToModule+0x44>)
 8008622:	7818      	ldrb	r0, [r3, #0]
 8008624:	0013      	movs	r3, r2
 8008626:	000a      	movs	r2, r1
 8008628:	21ff      	movs	r1, #255	; 0xff
 800862a:	f7ff ffb7 	bl	800859c <BroadcastMessage>
 800862e:	e7f4      	b.n	800861a <SendMessageToModule+0x2e>
 8008630:	20000896 	.word	0x20000896
 8008634:	20000758 	.word	0x20000758

08008638 <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 8008638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800863a:	46de      	mov	lr, fp
 800863c:	4657      	mov	r7, sl
 800863e:	464e      	mov	r6, r9
 8008640:	b5c0      	push	{r6, r7, lr}
 8008642:	b08a      	sub	sp, #40	; 0x28
 8008644:	9009      	str	r0, [sp, #36]	; 0x24
 8008646:	000c      	movs	r4, r1
 8008648:	9107      	str	r1, [sp, #28]
 800864a:	9208      	str	r2, [sp, #32]
 800864c:	001d      	movs	r5, r3
 800864e:	9306      	str	r3, [sp, #24]
 8008650:	ab12      	add	r3, sp, #72	; 0x48
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	469a      	mov	sl, r3
 8008656:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8008658:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800865a:	ab15      	add	r3, sp, #84	; 0x54
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	469b      	mov	fp, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 8008660:	4b4d      	ldr	r3, [pc, #308]	; (8008798 <StartScastDMAStream+0x160>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	428b      	cmp	r3, r1
 8008666:	d103      	bne.n	8008670 <StartScastDMAStream+0x38>
		
		return result;
	}
	
	/* Inform participating modules */
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 8008668:	2400      	movs	r4, #0
 800866a:	003d      	movs	r5, r7
 800866c:	0037      	movs	r7, r6
 800866e:	e055      	b.n	800871c <StartScastDMAStream+0xe4>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008670:	0e32      	lsrs	r2, r6, #24
 8008672:	4b4a      	ldr	r3, [pc, #296]	; (800879c <StartScastDMAStream+0x164>)
 8008674:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 8008676:	0c32      	lsrs	r2, r6, #16
 8008678:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 800867a:	0a32      	lsrs	r2, r6, #8
 800867c:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 800867e:	70de      	strb	r6, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8008680:	0e3a      	lsrs	r2, r7, #24
 8008682:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 8008684:	0c3a      	lsrs	r2, r7, #16
 8008686:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 8008688:	0a3a      	lsrs	r2, r7, #8
 800868a:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 800868c:	71df      	strb	r7, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 800868e:	4651      	mov	r1, sl
 8008690:	7219      	strb	r1, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 8008692:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 8008694:	729d      	strb	r5, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 8008696:	9a08      	ldr	r2, [sp, #32]
 8008698:	72da      	strb	r2, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 800869a:	465a      	mov	r2, fp
 800869c:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 800869e:	220d      	movs	r2, #13
 80086a0:	211c      	movs	r1, #28
 80086a2:	0020      	movs	r0, r4
 80086a4:	f7ff ffa2 	bl	80085ec <SendMessageToModule>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 80086a8:	2000      	movs	r0, #0
 80086aa:	b00a      	add	sp, #40	; 0x28
 80086ac:	bc1c      	pop	{r2, r3, r4}
 80086ae:	4691      	mov	r9, r2
 80086b0:	469a      	mov	sl, r3
 80086b2:	46a3      	mov	fp, r4
 80086b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 = FindRoute(route[i], srcM);
 80086b6:	9907      	ldr	r1, [sp, #28]
 80086b8:	f7fa fd02 	bl	80030c0 <FindRoute>
 80086bc:	4681      	mov	r9, r0
			FindRoute(srcM, dstM);
 80086be:	9906      	ldr	r1, [sp, #24]
 80086c0:	9807      	ldr	r0, [sp, #28]
 80086c2:	f7fa fcfd 	bl	80030c0 <FindRoute>
			if (route[i] == dstM) {
 80086c6:	4b36      	ldr	r3, [pc, #216]	; (80087a0 <StartScastDMAStream+0x168>)
 80086c8:	5d98      	ldrb	r0, [r3, r6]
 80086ca:	9b06      	ldr	r3, [sp, #24]
 80086cc:	4298      	cmp	r0, r3
 80086ce:	d139      	bne.n	8008744 <StartScastDMAStream+0x10c>
				temp2 = dstP;
 80086d0:	9808      	ldr	r0, [sp, #32]
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80086d2:	0e3a      	lsrs	r2, r7, #24
 80086d4:	4b31      	ldr	r3, [pc, #196]	; (800879c <StartScastDMAStream+0x164>)
 80086d6:	701a      	strb	r2, [r3, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 80086d8:	0c3a      	lsrs	r2, r7, #16
 80086da:	705a      	strb	r2, [r3, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 80086dc:	0a3a      	lsrs	r2, r7, #8
 80086de:	709a      	strb	r2, [r3, #2]
			messageParams[3] = (uint8_t) count;
 80086e0:	70df      	strb	r7, [r3, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80086e2:	0e2a      	lsrs	r2, r5, #24
 80086e4:	711a      	strb	r2, [r3, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 80086e6:	0c2a      	lsrs	r2, r5, #16
 80086e8:	715a      	strb	r2, [r3, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 80086ea:	0a2a      	lsrs	r2, r5, #8
 80086ec:	719a      	strb	r2, [r3, #6]
			messageParams[7] = (uint8_t) timeout;
 80086ee:	71dd      	strb	r5, [r3, #7]
			messageParams[8] = direction;										/* Stream direction */
 80086f0:	4652      	mov	r2, sl
 80086f2:	721a      	strb	r2, [r3, #8]
			messageParams[9] = temp1;												/* Source port */
 80086f4:	464a      	mov	r2, r9
 80086f6:	725a      	strb	r2, [r3, #9]
			messageParams[10] = temp2;											/* destination port */
 80086f8:	7298      	strb	r0, [r3, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 80086fa:	465a      	mov	r2, fp
 80086fc:	72da      	strb	r2, [r3, #11]
			FindRoute(srcM, dstM);
 80086fe:	9906      	ldr	r1, [sp, #24]
 8008700:	9807      	ldr	r0, [sp, #28]
 8008702:	f7fa fcdd 	bl	80030c0 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 8008706:	4b26      	ldr	r3, [pc, #152]	; (80087a0 <StartScastDMAStream+0x168>)
 8008708:	5d98      	ldrb	r0, [r3, r6]
 800870a:	220c      	movs	r2, #12
 800870c:	211b      	movs	r1, #27
 800870e:	f7ff ff6d 	bl	80085ec <SendMessageToModule>
			osDelay(10);
 8008712:	200a      	movs	r0, #10
 8008714:	f005 fcfa 	bl	800e10c <osDelay>
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 8008718:	3401      	adds	r4, #1
 800871a:	b2e4      	uxtb	r4, r4
 800871c:	2c19      	cmp	r4, #25
 800871e:	d817      	bhi.n	8008750 <StartScastDMAStream+0x118>
		FindRoute(srcM, dstM);
 8008720:	9906      	ldr	r1, [sp, #24]
 8008722:	9807      	ldr	r0, [sp, #28]
 8008724:	f7fa fccc 	bl	80030c0 <FindRoute>
		if (route[i]) 
 8008728:	0026      	movs	r6, r4
 800872a:	4b1d      	ldr	r3, [pc, #116]	; (80087a0 <StartScastDMAStream+0x168>)
 800872c:	5d18      	ldrb	r0, [r3, r4]
 800872e:	2800      	cmp	r0, #0
 8008730:	d0f2      	beq.n	8008718 <StartScastDMAStream+0xe0>
			if (route[i+1]) {
 8008732:	1c63      	adds	r3, r4, #1
 8008734:	4a1a      	ldr	r2, [pc, #104]	; (80087a0 <StartScastDMAStream+0x168>)
 8008736:	5cd1      	ldrb	r1, [r2, r3]
 8008738:	2900      	cmp	r1, #0
 800873a:	d0bc      	beq.n	80086b6 <StartScastDMAStream+0x7e>
				temp1 = FindRoute(route[i], route[i+1]);
 800873c:	f7fa fcc0 	bl	80030c0 <FindRoute>
 8008740:	4681      	mov	r9, r0
 8008742:	e7bc      	b.n	80086be <StartScastDMAStream+0x86>
				temp2 = FindRoute(route[i], route[i-1]);
 8008744:	1e73      	subs	r3, r6, #1
 8008746:	4a16      	ldr	r2, [pc, #88]	; (80087a0 <StartScastDMAStream+0x168>)
 8008748:	5cd1      	ldrb	r1, [r2, r3]
 800874a:	f7fa fcb9 	bl	80030c0 <FindRoute>
 800874e:	e7c0      	b.n	80086d2 <StartScastDMAStream+0x9a>
 8008750:	003e      	movs	r6, r7
 8008752:	002f      	movs	r7, r5
	if (srcM == dstM)
 8008754:	9807      	ldr	r0, [sp, #28]
 8008756:	9906      	ldr	r1, [sp, #24]
 8008758:	4288      	cmp	r0, r1
 800875a:	d118      	bne.n	800878e <StartScastDMAStream+0x156>
	SetupDMAStreams(direction, count, timeout, srcP, port);
 800875c:	9b08      	ldr	r3, [sp, #32]
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008762:	003a      	movs	r2, r7
 8008764:	0031      	movs	r1, r6
 8008766:	4650      	mov	r0, sl
 8008768:	f7ff fc1c 	bl	8007fa4 <SetupDMAStreams>
	if (stored) {		
 800876c:	465b      	mov	r3, fp
 800876e:	2b00      	cmp	r3, #0
 8008770:	d09a      	beq.n	80086a8 <StartScastDMAStream+0x70>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 8008772:	2300      	movs	r3, #0
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	9302      	str	r3, [sp, #8]
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	9b08      	ldr	r3, [sp, #32]
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008782:	003a      	movs	r2, r7
 8008784:	0031      	movs	r1, r6
 8008786:	4650      	mov	r0, sl
 8008788:	f7fa f96a 	bl	8002a60 <SaveEEstreams>
 800878c:	e78c      	b.n	80086a8 <StartScastDMAStream+0x70>
		port = FindRoute(srcM, dstM);
 800878e:	f7fa fc97 	bl	80030c0 <FindRoute>
 8008792:	9008      	str	r0, [sp, #32]
 8008794:	e7e2      	b.n	800875c <StartScastDMAStream+0x124>
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	20000896 	.word	0x20000896
 800879c:	20000758 	.word	0x20000758
 80087a0:	20006200 	.word	0x20006200

080087a4 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 80087a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a6:	46de      	mov	lr, fp
 80087a8:	4657      	mov	r7, sl
 80087aa:	464e      	mov	r6, r9
 80087ac:	4645      	mov	r5, r8
 80087ae:	b5e0      	push	{r5, r6, r7, lr}
 80087b0:	b085      	sub	sp, #20
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
	uint8_t port; bool emptyBuffer = false;
 80087b2:	2300      	movs	r3, #0
 80087b4:	9301      	str	r3, [sp, #4]
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 80087b6:	469b      	mov	fp, r3
 80087b8:	e19a      	b.n	8008af0 <BackEndTask+0x34c>
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
			{	
				/* A.1. Look for HZ delimiter and determine packet start */
				/* Note this parses only a single packet on each pass TODO update to parse all */

				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 80087ba:	1e65      	subs	r5, r4, #1
 80087bc:	4bcd      	ldr	r3, [pc, #820]	; (8008af4 <BackEndTask+0x350>)
 80087be:	5d5f      	ldrb	r7, [r3, r5]
 80087c0:	e004      	b.n	80087cc <BackEndTask+0x28>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
					{	
						packetStart = i;	
						break;
					}	
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 80087c2:	2f3f      	cmp	r7, #63	; 0x3f
 80087c4:	d02b      	beq.n	800881e <BackEndTask+0x7a>
						break;
					}							
					else 
					{
						/* B. Did not find any messaging packets. Check for CLI enter key (0xD) */
						if (i == MSG_RX_BUF_SIZE-1)		
 80087c6:	2f3f      	cmp	r7, #63	; 0x3f
 80087c8:	d037      	beq.n	800883a <BackEndTask+0x96>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 80087ca:	3701      	adds	r7, #1
 80087cc:	2f3f      	cmp	r7, #63	; 0x3f
 80087ce:	dc0f      	bgt.n	80087f0 <BackEndTask+0x4c>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 80087d0:	2f3e      	cmp	r7, #62	; 0x3e
 80087d2:	dcf6      	bgt.n	80087c2 <BackEndTask+0x1e>
 80087d4:	01aa      	lsls	r2, r5, #6
 80087d6:	4bc8      	ldr	r3, [pc, #800]	; (8008af8 <BackEndTask+0x354>)
 80087d8:	189b      	adds	r3, r3, r2
 80087da:	5ddb      	ldrb	r3, [r3, r7]
 80087dc:	2b48      	cmp	r3, #72	; 0x48
 80087de:	d1f0      	bne.n	80087c2 <BackEndTask+0x1e>
 80087e0:	1c7b      	adds	r3, r7, #1
 80087e2:	0011      	movs	r1, r2
 80087e4:	4ac4      	ldr	r2, [pc, #784]	; (8008af8 <BackEndTask+0x354>)
 80087e6:	1852      	adds	r2, r2, r1
 80087e8:	5cd3      	ldrb	r3, [r2, r3]
 80087ea:	2b5a      	cmp	r3, #90	; 0x5a
 80087ec:	d1e9      	bne.n	80087c2 <BackEndTask+0x1e>
						packetStart = i;	
 80087ee:	46bb      	mov	fp, r7
						}
					}						
				}
						
				/* Check parse status */
				if (emptyBuffer) {	
 80087f0:	9b01      	ldr	r3, [sp, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d000      	beq.n	80087f8 <BackEndTask+0x54>
 80087f6:	e176      	b.n	8008ae6 <BackEndTask+0x342>
					emptyBuffer = false;
					continue;
				}
				
				/* A.2. Parse the length byte */
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 80087f8:	465b      	mov	r3, fp
 80087fa:	2b3d      	cmp	r3, #61	; 0x3d
 80087fc:	d05d      	beq.n	80088ba <BackEndTask+0x116>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
					parseStart = 0;				
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 80087fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008800:	d100      	bne.n	8008804 <BackEndTask+0x60>
 8008802:	e084      	b.n	800890e <BackEndTask+0x16a>
					packetLength = UARTRxBuf[port-1][0];
					parseStart = 1;
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 8008804:	2b3f      	cmp	r3, #63	; 0x3f
 8008806:	d100      	bne.n	800880a <BackEndTask+0x66>
 8008808:	e088      	b.n	800891c <BackEndTask+0x178>
					packetLength = UARTRxBuf[port-1][1];
					parseStart = 2;
				} else {
					packetLength = UARTRxBuf[port-1][packetStart+2];
 800880a:	3302      	adds	r3, #2
 800880c:	01a9      	lsls	r1, r5, #6
 800880e:	4aba      	ldr	r2, [pc, #744]	; (8008af8 <BackEndTask+0x354>)
 8008810:	1852      	adds	r2, r2, r1
 8008812:	5cd3      	ldrb	r3, [r2, r3]
 8008814:	4699      	mov	r9, r3
					parseStart = packetStart+3;
 8008816:	2303      	movs	r3, #3
 8008818:	445b      	add	r3, fp
 800881a:	469a      	mov	sl, r3
 800881c:	e055      	b.n	80088ca <BackEndTask+0x126>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800881e:	01aa      	lsls	r2, r5, #6
 8008820:	4bb5      	ldr	r3, [pc, #724]	; (8008af8 <BackEndTask+0x354>)
 8008822:	189b      	adds	r3, r3, r2
 8008824:	333f      	adds	r3, #63	; 0x3f
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b48      	cmp	r3, #72	; 0x48
 800882a:	d1cc      	bne.n	80087c6 <BackEndTask+0x22>
 800882c:	0013      	movs	r3, r2
 800882e:	4ab2      	ldr	r2, [pc, #712]	; (8008af8 <BackEndTask+0x354>)
 8008830:	5c9b      	ldrb	r3, [r3, r2]
 8008832:	2b5a      	cmp	r3, #90	; 0x5a
 8008834:	d1c7      	bne.n	80087c6 <BackEndTask+0x22>
						packetStart = MSG_RX_BUF_SIZE-1;	
 8008836:	46bb      	mov	fp, r7
 8008838:	e7da      	b.n	80087f0 <BackEndTask+0x4c>
							if (BOS.disableCLI == false)
 800883a:	4bb0      	ldr	r3, [pc, #704]	; (8008afc <BackEndTask+0x358>)
 800883c:	7edb      	ldrb	r3, [r3, #27]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <BackEndTask+0xa4>
							emptyBuffer = true;
 8008842:	2301      	movs	r3, #1
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	e7c0      	b.n	80087ca <BackEndTask+0x26>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8008848:	4baa      	ldr	r3, [pc, #680]	; (8008af4 <BackEndTask+0x350>)
 800884a:	5d5b      	ldrb	r3, [r3, r5]
 800884c:	e002      	b.n	8008854 <BackEndTask+0xb0>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800884e:	2b3f      	cmp	r3, #63	; 0x3f
 8008850:	d02a      	beq.n	80088a8 <BackEndTask+0x104>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8008852:	3301      	adds	r3, #1
 8008854:	2b3f      	cmp	r3, #63	; 0x3f
 8008856:	dc2d      	bgt.n	80088b4 <BackEndTask+0x110>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8008858:	01a9      	lsls	r1, r5, #6
 800885a:	4aa7      	ldr	r2, [pc, #668]	; (8008af8 <BackEndTask+0x354>)
 800885c:	1852      	adds	r2, r2, r1
 800885e:	5cd2      	ldrb	r2, [r2, r3]
 8008860:	2a0d      	cmp	r2, #13
 8008862:	d1f6      	bne.n	8008852 <BackEndTask+0xae>
 8008864:	2b3e      	cmp	r3, #62	; 0x3e
 8008866:	dcf2      	bgt.n	800884e <BackEndTask+0xaa>
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	0008      	movs	r0, r1
 800886c:	49a2      	ldr	r1, [pc, #648]	; (8008af8 <BackEndTask+0x354>)
 800886e:	1809      	adds	r1, r1, r0
 8008870:	5c8a      	ldrb	r2, [r1, r2]
 8008872:	2a00      	cmp	r2, #0
 8008874:	d1eb      	bne.n	800884e <BackEndTask+0xaa>
										UARTRxBuf[port-1][j] = 0;
 8008876:	01a9      	lsls	r1, r5, #6
 8008878:	4a9f      	ldr	r2, [pc, #636]	; (8008af8 <BackEndTask+0x354>)
 800887a:	1852      	adds	r2, r2, r1
 800887c:	2100      	movs	r1, #0
 800887e:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 8008880:	3301      	adds	r3, #1
 8008882:	4a9c      	ldr	r2, [pc, #624]	; (8008af4 <BackEndTask+0x350>)
 8008884:	5553      	strb	r3, [r2, r5]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 8008886:	4b9e      	ldr	r3, [pc, #632]	; (8008b00 <BackEndTask+0x35c>)
 8008888:	7818      	ldrb	r0, [r3, #0]
 800888a:	4a9e      	ldr	r2, [pc, #632]	; (8008b04 <BackEndTask+0x360>)
 800888c:	5411      	strb	r1, [r2, r0]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 800888e:	3103      	adds	r1, #3
 8008890:	5591      	strb	r1, [r2, r6]
										PcPort = port;
 8008892:	701c      	strb	r4, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 8008894:	4b9c      	ldr	r3, [pc, #624]	; (8008b08 <BackEndTask+0x364>)
 8008896:	6818      	ldr	r0, [r3, #0]
 8008898:	2300      	movs	r3, #0
 800889a:	2202      	movs	r2, #2
 800889c:	2100      	movs	r1, #0
 800889e:	f007 f877 	bl	800f990 <xTaskGenericNotify>
							emptyBuffer = true;
 80088a2:	2301      	movs	r3, #1
 80088a4:	9301      	str	r3, [sp, #4]
										break;
 80088a6:	e790      	b.n	80087ca <BackEndTask+0x26>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 80088a8:	01aa      	lsls	r2, r5, #6
 80088aa:	4993      	ldr	r1, [pc, #588]	; (8008af8 <BackEndTask+0x354>)
 80088ac:	5c52      	ldrb	r2, [r2, r1]
 80088ae:	2a00      	cmp	r2, #0
 80088b0:	d1cf      	bne.n	8008852 <BackEndTask+0xae>
 80088b2:	e7e0      	b.n	8008876 <BackEndTask+0xd2>
							emptyBuffer = true;
 80088b4:	2301      	movs	r3, #1
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	e787      	b.n	80087ca <BackEndTask+0x26>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 80088ba:	01aa      	lsls	r2, r5, #6
 80088bc:	4b8e      	ldr	r3, [pc, #568]	; (8008af8 <BackEndTask+0x354>)
 80088be:	189b      	adds	r3, r3, r2
 80088c0:	333f      	adds	r3, #63	; 0x3f
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	4699      	mov	r9, r3
					parseStart = 0;				
 80088c6:	2300      	movs	r3, #0
 80088c8:	469a      	mov	sl, r3
				}
				
				/* A.3. Set packet end from packet start and length */			
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 80088ca:	464b      	mov	r3, r9
 80088cc:	1cdf      	adds	r7, r3, #3
 80088ce:	46b8      	mov	r8, r7
 80088d0:	44d8      	add	r8, fp
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 80088d2:	4643      	mov	r3, r8
 80088d4:	2b3f      	cmp	r3, #63	; 0x3f
 80088d6:	dd03      	ble.n	80088e0 <BackEndTask+0x13c>
					packetEnd -= MSG_RX_BUF_SIZE;
 80088d8:	2340      	movs	r3, #64	; 0x40
 80088da:	425b      	negs	r3, r3
 80088dc:	469c      	mov	ip, r3
 80088de:	44e0      	add	r8, ip
			
				if (packetStart != packetEnd)										// Non-empty packet
 80088e0:	45c3      	cmp	fp, r8
 80088e2:	d123      	bne.n	800892c <BackEndTask+0x188>
				}
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */                
				if (packetStart < packetEnd) {
 80088e4:	45c3      	cmp	fp, r8
 80088e6:	db00      	blt.n	80088ea <BackEndTask+0x146>
 80088e8:	e0c3      	b.n	8008a72 <BackEndTask+0x2ce>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 80088ea:	01a8      	lsls	r0, r5, #6
 80088ec:	4458      	add	r0, fp
 80088ee:	4b82      	ldr	r3, [pc, #520]	; (8008af8 <BackEndTask+0x354>)
 80088f0:	18c0      	adds	r0, r0, r3
 80088f2:	464a      	mov	r2, r9
 80088f4:	3204      	adds	r2, #4
 80088f6:	2100      	movs	r1, #0
 80088f8:	f00a fd74 	bl	80133e4 <memset>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
				}    
				
				/* A.6.2 Advance buffer index */				
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 80088fc:	4643      	mov	r3, r8
 80088fe:	3301      	adds	r3, #1
 8008900:	4a7c      	ldr	r2, [pc, #496]	; (8008af4 <BackEndTask+0x350>)
 8008902:	5553      	strb	r3, [r2, r5]
				++rejectedMsg;							
 8008904:	4a81      	ldr	r2, [pc, #516]	; (8008b0c <BackEndTask+0x368>)
 8008906:	8813      	ldrh	r3, [r2, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	8013      	strh	r3, [r2, #0]
 800890c:	e0dc      	b.n	8008ac8 <BackEndTask+0x324>
					packetLength = UARTRxBuf[port-1][0];
 800890e:	01ab      	lsls	r3, r5, #6
 8008910:	4a79      	ldr	r2, [pc, #484]	; (8008af8 <BackEndTask+0x354>)
 8008912:	5c9b      	ldrb	r3, [r3, r2]
 8008914:	4699      	mov	r9, r3
					parseStart = 1;
 8008916:	2301      	movs	r3, #1
 8008918:	469a      	mov	sl, r3
 800891a:	e7d6      	b.n	80088ca <BackEndTask+0x126>
					packetLength = UARTRxBuf[port-1][1];
 800891c:	01aa      	lsls	r2, r5, #6
 800891e:	4b76      	ldr	r3, [pc, #472]	; (8008af8 <BackEndTask+0x354>)
 8008920:	189b      	adds	r3, r3, r2
 8008922:	785b      	ldrb	r3, [r3, #1]
 8008924:	4699      	mov	r9, r3
					parseStart = 2;
 8008926:	2302      	movs	r3, #2
 8008928:	469a      	mov	sl, r3
 800892a:	e7ce      	b.n	80088ca <BackEndTask+0x126>
					Delay_ms(1);
 800892c:	2001      	movs	r0, #1
 800892e:	f007 fc6b 	bl	8010208 <HAL_Delay>
					if (packetStart < packetEnd) {
 8008932:	45c3      	cmp	fp, r8
 8008934:	da49      	bge.n	80089ca <BackEndTask+0x226>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 8008936:	01a9      	lsls	r1, r5, #6
 8008938:	4459      	add	r1, fp
 800893a:	4b6f      	ldr	r3, [pc, #444]	; (8008af8 <BackEndTask+0x354>)
 800893c:	18c9      	adds	r1, r1, r3
 800893e:	003a      	movs	r2, r7
 8008940:	4873      	ldr	r0, [pc, #460]	; (8008b10 <BackEndTask+0x36c>)
 8008942:	f00a fd46 	bl	80133d2 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8008946:	464b      	mov	r3, r9
 8008948:	1cd9      	adds	r1, r3, #3
 800894a:	4f71      	ldr	r7, [pc, #452]	; (8008b10 <BackEndTask+0x36c>)
 800894c:	0038      	movs	r0, r7
 800894e:	f004 fcb5 	bl	800d2bc <CalculateCRC8>
 8008952:	9002      	str	r0, [sp, #8]
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8008954:	2238      	movs	r2, #56	; 0x38
 8008956:	2100      	movs	r1, #0
 8008958:	0038      	movs	r0, r7
 800895a:	f00a fd43 	bl	80133e4 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 800895e:	01aa      	lsls	r2, r5, #6
 8008960:	4b65      	ldr	r3, [pc, #404]	; (8008af8 <BackEndTask+0x354>)
 8008962:	189b      	adds	r3, r3, r2
 8008964:	4642      	mov	r2, r8
 8008966:	5c9b      	ldrb	r3, [r3, r2]
 8008968:	9a02      	ldr	r2, [sp, #8]
 800896a:	429a      	cmp	r2, r3
 800896c:	d1ba      	bne.n	80088e4 <BackEndTask+0x140>
						portStatus[port] = MSG;
 800896e:	4b65      	ldr	r3, [pc, #404]	; (8008b04 <BackEndTask+0x360>)
 8008970:	2201      	movs	r2, #1
 8008972:	559a      	strb	r2, [r3, r6]
						messageLength[port-1] = packetLength;	
 8008974:	4b67      	ldr	r3, [pc, #412]	; (8008b14 <BackEndTask+0x370>)
 8008976:	464a      	mov	r2, r9
 8008978:	555a      	strb	r2, [r3, r5]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 800897a:	233f      	movs	r3, #63	; 0x3f
 800897c:	4652      	mov	r2, sl
 800897e:	1a9b      	subs	r3, r3, r2
 8008980:	454b      	cmp	r3, r9
 8008982:	db3f      	blt.n	8008a04 <BackEndTask+0x260>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 8008984:	00eb      	lsls	r3, r5, #3
 8008986:	1b5b      	subs	r3, r3, r5
 8008988:	00d8      	lsls	r0, r3, #3
 800898a:	4b63      	ldr	r3, [pc, #396]	; (8008b18 <BackEndTask+0x374>)
 800898c:	18c0      	adds	r0, r0, r3
 800898e:	01a9      	lsls	r1, r5, #6
 8008990:	4451      	add	r1, sl
 8008992:	4b59      	ldr	r3, [pc, #356]	; (8008af8 <BackEndTask+0x354>)
 8008994:	18c9      	adds	r1, r1, r3
 8008996:	464a      	mov	r2, r9
 8008998:	f00a fd1b 	bl	80133d2 <memcpy>
						if (packetStart < packetEnd) {
 800899c:	45c3      	cmp	fp, r8
 800899e:	da52      	bge.n	8008a46 <BackEndTask+0x2a2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 80089a0:	01a8      	lsls	r0, r5, #6
 80089a2:	4458      	add	r0, fp
 80089a4:	4b54      	ldr	r3, [pc, #336]	; (8008af8 <BackEndTask+0x354>)
 80089a6:	18c0      	adds	r0, r0, r3
 80089a8:	464a      	mov	r2, r9
 80089aa:	3204      	adds	r2, #4
 80089ac:	2100      	movs	r1, #0
 80089ae:	f00a fd19 	bl	80133e4 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 80089b2:	4642      	mov	r2, r8
 80089b4:	3201      	adds	r2, #1
 80089b6:	4b4f      	ldr	r3, [pc, #316]	; (8008af4 <BackEndTask+0x350>)
 80089b8:	555a      	strb	r2, [r3, r5]
						++acceptedMsg;
 80089ba:	4a58      	ldr	r2, [pc, #352]	; (8008b1c <BackEndTask+0x378>)
 80089bc:	8813      	ldrh	r3, [r2, #0]
 80089be:	3301      	adds	r3, #1
 80089c0:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 80089c2:	0020      	movs	r0, r4
 80089c4:	f7ff fbc6 	bl	8008154 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 80089c8:	e074      	b.n	8008ab4 <BackEndTask+0x310>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 80089ca:	01ab      	lsls	r3, r5, #6
 80089cc:	9303      	str	r3, [sp, #12]
 80089ce:	0019      	movs	r1, r3
 80089d0:	4459      	add	r1, fp
 80089d2:	4849      	ldr	r0, [pc, #292]	; (8008af8 <BackEndTask+0x354>)
 80089d4:	4684      	mov	ip, r0
 80089d6:	4461      	add	r1, ip
 80089d8:	2240      	movs	r2, #64	; 0x40
 80089da:	4658      	mov	r0, fp
 80089dc:	1a10      	subs	r0, r2, r0
 80089de:	9002      	str	r0, [sp, #8]
 80089e0:	0002      	movs	r2, r0
 80089e2:	484b      	ldr	r0, [pc, #300]	; (8008b10 <BackEndTask+0x36c>)
 80089e4:	f00a fcf5 	bl	80133d2 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 80089e8:	4949      	ldr	r1, [pc, #292]	; (8008b10 <BackEndTask+0x36c>)
 80089ea:	0008      	movs	r0, r1
 80089ec:	9b02      	ldr	r3, [sp, #8]
 80089ee:	469c      	mov	ip, r3
 80089f0:	4460      	add	r0, ip
 80089f2:	9a03      	ldr	r2, [sp, #12]
 80089f4:	4940      	ldr	r1, [pc, #256]	; (8008af8 <BackEndTask+0x354>)
 80089f6:	468c      	mov	ip, r1
 80089f8:	4462      	add	r2, ip
 80089fa:	0011      	movs	r1, r2
 80089fc:	1afa      	subs	r2, r7, r3
 80089fe:	f00a fce8 	bl	80133d2 <memcpy>
 8008a02:	e7a0      	b.n	8008946 <BackEndTask+0x1a2>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 8008a04:	00ee      	lsls	r6, r5, #3
 8008a06:	1b73      	subs	r3, r6, r5
 8008a08:	00d8      	lsls	r0, r3, #3
 8008a0a:	4f43      	ldr	r7, [pc, #268]	; (8008b18 <BackEndTask+0x374>)
 8008a0c:	19c0      	adds	r0, r0, r7
 8008a0e:	01ab      	lsls	r3, r5, #6
 8008a10:	9302      	str	r3, [sp, #8]
 8008a12:	0019      	movs	r1, r3
 8008a14:	4451      	add	r1, sl
 8008a16:	4a38      	ldr	r2, [pc, #224]	; (8008af8 <BackEndTask+0x354>)
 8008a18:	4694      	mov	ip, r2
 8008a1a:	4461      	add	r1, ip
 8008a1c:	2240      	movs	r2, #64	; 0x40
 8008a1e:	4653      	mov	r3, sl
 8008a20:	1ad2      	subs	r2, r2, r3
 8008a22:	4692      	mov	sl, r2
 8008a24:	f00a fcd5 	bl	80133d2 <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 8008a28:	1b76      	subs	r6, r6, r5
 8008a2a:	00f3      	lsls	r3, r6, #3
 8008a2c:	4453      	add	r3, sl
 8008a2e:	19d8      	adds	r0, r3, r7
 8008a30:	9b02      	ldr	r3, [sp, #8]
 8008a32:	4a31      	ldr	r2, [pc, #196]	; (8008af8 <BackEndTask+0x354>)
 8008a34:	4694      	mov	ip, r2
 8008a36:	4463      	add	r3, ip
 8008a38:	0019      	movs	r1, r3
 8008a3a:	464b      	mov	r3, r9
 8008a3c:	4652      	mov	r2, sl
 8008a3e:	1a9a      	subs	r2, r3, r2
 8008a40:	f00a fcc7 	bl	80133d2 <memcpy>
 8008a44:	e7aa      	b.n	800899c <BackEndTask+0x1f8>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8008a46:	01ae      	lsls	r6, r5, #6
 8008a48:	465b      	mov	r3, fp
 8008a4a:	18f0      	adds	r0, r6, r3
 8008a4c:	4b2a      	ldr	r3, [pc, #168]	; (8008af8 <BackEndTask+0x354>)
 8008a4e:	469a      	mov	sl, r3
 8008a50:	4450      	add	r0, sl
 8008a52:	2740      	movs	r7, #64	; 0x40
 8008a54:	465b      	mov	r3, fp
 8008a56:	1aff      	subs	r7, r7, r3
 8008a58:	003a      	movs	r2, r7
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	f00a fcc2 	bl	80133e4 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8008a60:	0030      	movs	r0, r6
 8008a62:	4450      	add	r0, sl
 8008a64:	464a      	mov	r2, r9
 8008a66:	3204      	adds	r2, #4
 8008a68:	1bd2      	subs	r2, r2, r7
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	f00a fcba 	bl	80133e4 <memset>
 8008a70:	e79f      	b.n	80089b2 <BackEndTask+0x20e>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8008a72:	01af      	lsls	r7, r5, #6
 8008a74:	465b      	mov	r3, fp
 8008a76:	18f8      	adds	r0, r7, r3
 8008a78:	4b1f      	ldr	r3, [pc, #124]	; (8008af8 <BackEndTask+0x354>)
 8008a7a:	469a      	mov	sl, r3
 8008a7c:	4450      	add	r0, sl
 8008a7e:	2240      	movs	r2, #64	; 0x40
 8008a80:	465b      	mov	r3, fp
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	9302      	str	r3, [sp, #8]
 8008a86:	001a      	movs	r2, r3
 8008a88:	2100      	movs	r1, #0
 8008a8a:	f00a fcab 	bl	80133e4 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8008a8e:	0038      	movs	r0, r7
 8008a90:	4450      	add	r0, sl
 8008a92:	464a      	mov	r2, r9
 8008a94:	3204      	adds	r2, #4
 8008a96:	9b02      	ldr	r3, [sp, #8]
 8008a98:	1ad2      	subs	r2, r2, r3
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	f00a fca2 	bl	80133e4 <memset>
 8008aa0:	e72c      	b.n	80088fc <BackEndTask+0x158>
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
				MsgDMAStopped[port-1] = false;
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 8008aa2:	0020      	movs	r0, r4
 8008aa4:	f005 f9e0 	bl	800de68 <GetUart>
 8008aa8:	01ad      	lsls	r5, r5, #6
 8008aaa:	4913      	ldr	r1, [pc, #76]	; (8008af8 <BackEndTask+0x354>)
 8008aac:	1869      	adds	r1, r5, r1
 8008aae:	2240      	movs	r2, #64	; 0x40
 8008ab0:	f009 ff6c 	bl	801298c <HAL_UART_Receive_DMA>
		for (port=1 ; port <= NumOfPorts; port++)
 8008ab4:	3401      	adds	r4, #1
 8008ab6:	b2e4      	uxtb	r4, r4
 8008ab8:	2c05      	cmp	r4, #5
 8008aba:	d817      	bhi.n	8008aec <BackEndTask+0x348>
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 8008abc:	0026      	movs	r6, r4
 8008abe:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <BackEndTask+0x360>)
 8008ac0:	5d1b      	ldrb	r3, [r3, r4]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d800      	bhi.n	8008ac8 <BackEndTask+0x324>
 8008ac6:	e678      	b.n	80087ba <BackEndTask+0x16>
			if (MsgDMAStopped[port-1] == true) {
 8008ac8:	1e75      	subs	r5, r6, #1
 8008aca:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <BackEndTask+0x37c>)
 8008acc:	5d5b      	ldrb	r3, [r3, r5]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0f0      	beq.n	8008ab4 <BackEndTask+0x310>
				MsgDMAStopped[port-1] = false;
 8008ad2:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <BackEndTask+0x37c>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	555a      	strb	r2, [r3, r5]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <BackEndTask+0x360>)
 8008ada:	5d9b      	ldrb	r3, [r3, r6]
 8008adc:	2b05      	cmp	r3, #5
 8008ade:	d1e0      	bne.n	8008aa2 <BackEndTask+0x2fe>
 8008ae0:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <BackEndTask+0x360>)
 8008ae2:	559a      	strb	r2, [r3, r6]
 8008ae4:	e7dd      	b.n	8008aa2 <BackEndTask+0x2fe>
					emptyBuffer = false;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	e7e3      	b.n	8008ab4 <BackEndTask+0x310>
			}				
		}
		
		taskYIELD();
 8008aec:	f007 f9f8 	bl	800fee0 <vPortYield>
		for (port=1 ; port <= NumOfPorts; port++)
 8008af0:	2401      	movs	r4, #1
 8008af2:	e7e1      	b.n	8008ab8 <BackEndTask+0x314>
 8008af4:	20000c28 	.word	0x20000c28
 8008af8:	20000ae8 	.word	0x20000ae8
 8008afc:	20006148 	.word	0x20006148
 8008b00:	200002cf 	.word	0x200002cf
 8008b04:	20000910 	.word	0x20000910
 8008b08:	20000ccc 	.word	0x20000ccc
 8008b0c:	20000f10 	.word	0x20000f10
 8008b10:	20000c30 	.word	0x20000c30
 8008b14:	20000750 	.word	0x20000750
 8008b18:	20000560 	.word	0x20000560
 8008b1c:	20000d68 	.word	0x20000d68
 8008b20:	20000ae0 	.word	0x20000ae0

08008b24 <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 8008b24:	2001      	movs	r0, #1
 8008b26:	4770      	bx	lr

08008b28 <PxMessagingTask>:
{
 8008b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b2a:	46de      	mov	lr, fp
 8008b2c:	4657      	mov	r7, sl
 8008b2e:	464e      	mov	r6, r9
 8008b30:	4645      	mov	r5, r8
 8008b32:	b5e0      	push	{r5, r6, r7, lr}
 8008b34:	b097      	sub	sp, #92	; 0x5c
 8008b36:	9006      	str	r0, [sp, #24]
	port = (int8_t)(unsigned) argument;
 8008b38:	b2c3      	uxtb	r3, r0
 8008b3a:	9307      	str	r3, [sp, #28]
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	9308      	str	r3, [sp, #32]
 8008b40:	469b      	mov	fp, r3
 8008b42:	e05c      	b.n	8008bfe <PxMessagingTask+0xd6>
				longMessage = 1;
 8008b44:	4ad0      	ldr	r2, [pc, #832]	; (8008e88 <PxMessagingTask+0x360>)
 8008b46:	2101      	movs	r1, #1
 8008b48:	7011      	strb	r1, [r2, #0]
 8008b4a:	e072      	b.n	8008c32 <PxMessagingTask+0x10a>
				++shift;				
 8008b4c:	2401      	movs	r4, #1
 8008b4e:	e07d      	b.n	8008c4c <PxMessagingTask+0x124>
				code = cMessage[port-1][3+shift];
 8008b50:	1ce2      	adds	r2, r4, #3
 8008b52:	00eb      	lsls	r3, r5, #3
 8008b54:	1b5b      	subs	r3, r3, r5
 8008b56:	00d9      	lsls	r1, r3, #3
 8008b58:	4bcc      	ldr	r3, [pc, #816]	; (8008e8c <PxMessagingTask+0x364>)
 8008b5a:	185b      	adds	r3, r3, r1
 8008b5c:	5c9e      	ldrb	r6, [r3, r2]
 8008b5e:	e08e      	b.n	8008c7e <PxMessagingTask+0x156>
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8008b60:	2bfc      	cmp	r3, #252	; 0xfc
 8008b62:	d805      	bhi.n	8008b70 <PxMessagingTask+0x48>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 8008b64:	4bca      	ldr	r3, [pc, #808]	; (8008e90 <PxMessagingTask+0x368>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	454b      	cmp	r3, r9
 8008b6a:	d001      	beq.n	8008b70 <PxMessagingTask+0x48>
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d020      	beq.n	8008bb2 <PxMessagingTask+0x8a>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008b70:	464b      	mov	r3, r9
 8008b72:	2bff      	cmp	r3, #255	; 0xff
 8008b74:	d100      	bne.n	8008b78 <PxMessagingTask+0x50>
 8008b76:	e0b4      	b.n	8008ce2 <PxMessagingTask+0x1ba>
				else if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 8008b78:	464b      	mov	r3, r9
 8008b7a:	2bff      	cmp	r3, #255	; 0xff
 8008b7c:	d100      	bne.n	8008b80 <PxMessagingTask+0x58>
 8008b7e:	e0cf      	b.n	8008d20 <PxMessagingTask+0x1f8>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008b80:	464b      	mov	r3, r9
 8008b82:	2bfe      	cmp	r3, #254	; 0xfe
 8008b84:	d100      	bne.n	8008b88 <PxMessagingTask+0x60>
 8008b86:	e0da      	b.n	8008d3e <PxMessagingTask+0x216>
				else if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 8008b88:	464b      	mov	r3, r9
 8008b8a:	2bfe      	cmp	r3, #254	; 0xfe
 8008b8c:	d100      	bne.n	8008b90 <PxMessagingTask+0x68>
 8008b8e:	e110      	b.n	8008db2 <PxMessagingTask+0x28a>
				shift += 4;
 8008b90:	3404      	adds	r4, #4
 8008b92:	b2e4      	uxtb	r4, r4
				numOfParams = messageLength[port-1] - shift;
 8008b94:	4bbf      	ldr	r3, [pc, #764]	; (8008e94 <PxMessagingTask+0x36c>)
 8008b96:	5d5b      	ldrb	r3, [r3, r5]
 8008b98:	1b1f      	subs	r7, r3, r4
 8008b9a:	b2ff      	uxtb	r7, r7
				if (result == BOS_OK)
 8008b9c:	465a      	mov	r2, fp
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	d10f      	bne.n	8008bc2 <PxMessagingTask+0x9a>
					switch (code)
 8008ba2:	2e24      	cmp	r6, #36	; 0x24
 8008ba4:	d901      	bls.n	8008baa <PxMessagingTask+0x82>
 8008ba6:	f001 fb5c 	bl	800a262 <PxMessagingTask+0x173a>
 8008baa:	00b2      	lsls	r2, r6, #2
 8008bac:	49ba      	ldr	r1, [pc, #744]	; (8008e98 <PxMessagingTask+0x370>)
 8008bae:	588a      	ldr	r2, [r1, r2]
 8008bb0:	4697      	mov	pc, r2
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 8008bb2:	2e10      	cmp	r6, #16
 8008bb4:	d171      	bne.n	8008c9a <PxMessagingTask+0x172>
 8008bb6:	e7db      	b.n	8008b70 <PxMessagingTask+0x48>
					if (code == CODE_UPDATE) {		// Remote bootloader update
 8008bb8:	2e19      	cmp	r6, #25
 8008bba:	d079      	beq.n	8008cb0 <PxMessagingTask+0x188>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8008bbc:	2e1a      	cmp	r6, #26
 8008bbe:	d100      	bne.n	8008bc2 <PxMessagingTask+0x9a>
 8008bc0:	e080      	b.n	8008cc4 <PxMessagingTask+0x19c>
		if (result == BOS_ERR_UnknownMessage) {
 8008bc2:	465b      	mov	r3, fp
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d101      	bne.n	8008bcc <PxMessagingTask+0xa4>
 8008bc8:	f001 fc06 	bl	800a3d8 <PxMessagingTask+0x18b0>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8008bcc:	00eb      	lsls	r3, r5, #3
 8008bce:	1b5b      	subs	r3, r3, r5
 8008bd0:	00d8      	lsls	r0, r3, #3
 8008bd2:	4bae      	ldr	r3, [pc, #696]	; (8008e8c <PxMessagingTask+0x364>)
 8008bd4:	18c0      	adds	r0, r0, r3
 8008bd6:	4caf      	ldr	r4, [pc, #700]	; (8008e94 <PxMessagingTask+0x36c>)
 8008bd8:	5d62      	ldrb	r2, [r4, r5]
 8008bda:	2100      	movs	r1, #0
 8008bdc:	f00a fc02 	bl	80133e4 <memset>
		messageLength[port-1] = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	5563      	strb	r3, [r4, r5]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 8008be4:	4bad      	ldr	r3, [pc, #692]	; (8008e9c <PxMessagingTask+0x374>)
 8008be6:	4642      	mov	r2, r8
 8008be8:	5c9b      	ldrb	r3, [r3, r2]
 8008bea:	3b02      	subs	r3, #2
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d903      	bls.n	8008bfa <PxMessagingTask+0xd2>
			portStatus[port] = FREE;
 8008bf2:	4baa      	ldr	r3, [pc, #680]	; (8008e9c <PxMessagingTask+0x374>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4641      	mov	r1, r8
 8008bf8:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008bfa:	f007 f971 	bl	800fee0 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008bfe:	2101      	movs	r1, #1
 8008c00:	4249      	negs	r1, r1
 8008c02:	2001      	movs	r0, #1
 8008c04:	f006 fe78 	bl	800f8f8 <ulTaskNotifyTake>
 8008c08:	23ff      	movs	r3, #255	; 0xff
 8008c0a:	9a06      	ldr	r2, [sp, #24]
 8008c0c:	401a      	ands	r2, r3
 8008c0e:	4690      	mov	r8, r2
		if (messageLength[port-1])
 8008c10:	1e55      	subs	r5, r2, #1
 8008c12:	4ba0      	ldr	r3, [pc, #640]	; (8008e94 <PxMessagingTask+0x36c>)
 8008c14:	5d58      	ldrb	r0, [r3, r5]
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d0d3      	beq.n	8008bc2 <PxMessagingTask+0x9a>
			if (cMessage[port-1][2]>>7) {
 8008c1a:	00eb      	lsls	r3, r5, #3
 8008c1c:	1b5b      	subs	r3, r3, r5
 8008c1e:	00da      	lsls	r2, r3, #3
 8008c20:	4b9a      	ldr	r3, [pc, #616]	; (8008e8c <PxMessagingTask+0x364>)
 8008c22:	189b      	adds	r3, r3, r2
 8008c24:	789b      	ldrb	r3, [r3, #2]
 8008c26:	b25a      	sxtb	r2, r3
 8008c28:	2a00      	cmp	r2, #0
 8008c2a:	db8b      	blt.n	8008b44 <PxMessagingTask+0x1c>
				longMessage = 0;
 8008c2c:	4a96      	ldr	r2, [pc, #600]	; (8008e88 <PxMessagingTask+0x360>)
 8008c2e:	2100      	movs	r1, #0
 8008c30:	7011      	strb	r1, [r2, #0]
			dst = cMessage[port-1][0]; 
 8008c32:	4996      	ldr	r1, [pc, #600]	; (8008e8c <PxMessagingTask+0x364>)
 8008c34:	00ea      	lsls	r2, r5, #3
 8008c36:	1b56      	subs	r6, r2, r5
 8008c38:	00f4      	lsls	r4, r6, #3
 8008c3a:	5c64      	ldrb	r4, [r4, r1]
 8008c3c:	46a1      	mov	r9, r4
			src = cMessage[port-1][1];	
 8008c3e:	00f4      	lsls	r4, r6, #3
 8008c40:	1909      	adds	r1, r1, r4
 8008c42:	784a      	ldrb	r2, [r1, #1]
 8008c44:	9205      	str	r2, [sp, #20]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 8008c46:	07da      	lsls	r2, r3, #31
 8008c48:	d480      	bmi.n	8008b4c <PxMessagingTask+0x24>
			shift = 0;
 8008c4a:	2400      	movs	r4, #0
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8008c4c:	0899      	lsrs	r1, r3, #2
 8008c4e:	2203      	movs	r2, #3
 8008c50:	400a      	ands	r2, r1
 8008c52:	4993      	ldr	r1, [pc, #588]	; (8008ea0 <PxMessagingTask+0x378>)
 8008c54:	71ca      	strb	r2, [r1, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 8008c56:	2260      	movs	r2, #96	; 0x60
 8008c58:	401a      	ands	r2, r3
 8008c5a:	718a      	strb	r2, [r1, #6]
			if (extendCode == true) {		
 8008c5c:	079b      	lsls	r3, r3, #30
 8008c5e:	d400      	bmi.n	8008c62 <PxMessagingTask+0x13a>
 8008c60:	e776      	b.n	8008b50 <PxMessagingTask+0x28>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8008c62:	1d21      	adds	r1, r4, #4
 8008c64:	00ea      	lsls	r2, r5, #3
 8008c66:	1b52      	subs	r2, r2, r5
 8008c68:	00d3      	lsls	r3, r2, #3
 8008c6a:	4a88      	ldr	r2, [pc, #544]	; (8008e8c <PxMessagingTask+0x364>)
 8008c6c:	18d3      	adds	r3, r2, r3
 8008c6e:	5c5e      	ldrb	r6, [r3, r1]
 8008c70:	0236      	lsls	r6, r6, #8
 8008c72:	1ce2      	adds	r2, r4, #3
 8008c74:	5c9b      	ldrb	r3, [r3, r2]
 8008c76:	18f6      	adds	r6, r6, r3
 8008c78:	b2b6      	uxth	r6, r6
				++shift;
 8008c7a:	3401      	adds	r4, #1
 8008c7c:	b2e4      	uxtb	r4, r4
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8008c7e:	464b      	mov	r3, r9
 8008c80:	3b01      	subs	r3, #1
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2bfc      	cmp	r3, #252	; 0xfc
 8008c86:	d900      	bls.n	8008c8a <PxMessagingTask+0x162>
 8008c88:	e76a      	b.n	8008b60 <PxMessagingTask+0x38>
 8008c8a:	4a81      	ldr	r2, [pc, #516]	; (8008e90 <PxMessagingTask+0x368>)
 8008c8c:	7812      	ldrb	r2, [r2, #0]
 8008c8e:	454a      	cmp	r2, r9
 8008c90:	d100      	bne.n	8008c94 <PxMessagingTask+0x16c>
 8008c92:	e765      	b.n	8008b60 <PxMessagingTask+0x38>
 8008c94:	2a01      	cmp	r2, #1
 8008c96:	d100      	bne.n	8008c9a <PxMessagingTask+0x172>
 8008c98:	e762      	b.n	8008b60 <PxMessagingTask+0x38>
				ForwardReceivedMessage(port);
 8008c9a:	9807      	ldr	r0, [sp, #28]
 8008c9c:	f7ff fc3e 	bl	800851c <ForwardReceivedMessage>
				if (BOS.trace)
 8008ca0:	4b7f      	ldr	r3, [pc, #508]	; (8008ea0 <PxMessagingTask+0x378>)
 8008ca2:	79db      	ldrb	r3, [r3, #7]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d087      	beq.n	8008bb8 <PxMessagingTask+0x90>
					indMode = IND_SHORT_BLINK;
 8008ca8:	4b7e      	ldr	r3, [pc, #504]	; (8008ea4 <PxMessagingTask+0x37c>)
 8008caa:	2203      	movs	r2, #3
 8008cac:	701a      	strb	r2, [r3, #0]
 8008cae:	e783      	b.n	8008bb8 <PxMessagingTask+0x90>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 8008cb0:	2064      	movs	r0, #100	; 0x64
 8008cb2:	f007 faa9 	bl	8010208 <HAL_Delay>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	9a07      	ldr	r2, [sp, #28]
 8008cba:	4649      	mov	r1, r9
 8008cbc:	9805      	ldr	r0, [sp, #20]
 8008cbe:	f7fa faa5 	bl	800320c <remoteBootloaderUpdate>
 8008cc2:	e77e      	b.n	8008bc2 <PxMessagingTask+0x9a>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8008cc4:	2064      	movs	r0, #100	; 0x64
 8008cc6:	f007 fa9f 	bl	8010208 <HAL_Delay>
 8008cca:	00eb      	lsls	r3, r5, #3
 8008ccc:	1b5b      	subs	r3, r3, r5
 8008cce:	00da      	lsls	r2, r3, #3
 8008cd0:	4b6e      	ldr	r3, [pc, #440]	; (8008e8c <PxMessagingTask+0x364>)
 8008cd2:	189b      	adds	r3, r3, r2
 8008cd4:	5d1b      	ldrb	r3, [r3, r4]
 8008cd6:	9a07      	ldr	r2, [sp, #28]
 8008cd8:	4649      	mov	r1, r9
 8008cda:	9805      	ldr	r0, [sp, #20]
 8008cdc:	f7fa fa96 	bl	800320c <remoteBootloaderUpdate>
 8008ce0:	e76f      	b.n	8008bc2 <PxMessagingTask+0x9a>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008ce2:	1e42      	subs	r2, r0, #1
 8008ce4:	00eb      	lsls	r3, r5, #3
 8008ce6:	1b5b      	subs	r3, r3, r5
 8008ce8:	00d9      	lsls	r1, r3, #3
 8008cea:	4b68      	ldr	r3, [pc, #416]	; (8008e8c <PxMessagingTask+0x364>)
 8008cec:	185b      	adds	r3, r3, r1
 8008cee:	5c9b      	ldrb	r3, [r3, r2]
 8008cf0:	4a6d      	ldr	r2, [pc, #436]	; (8008ea8 <PxMessagingTask+0x380>)
 8008cf2:	7812      	ldrb	r2, [r2, #0]
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d100      	bne.n	8008cfa <PxMessagingTask+0x1d2>
 8008cf8:	e73e      	b.n	8008b78 <PxMessagingTask+0x50>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8008cfa:	4a6b      	ldr	r2, [pc, #428]	; (8008ea8 <PxMessagingTask+0x380>)
 8008cfc:	7013      	strb	r3, [r2, #0]
 8008cfe:	4a6b      	ldr	r2, [pc, #428]	; (8008eac <PxMessagingTask+0x384>)
 8008d00:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8008d02:	9907      	ldr	r1, [sp, #28]
 8008d04:	20ff      	movs	r0, #255	; 0xff
 8008d06:	f7ff fc29 	bl	800855c <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8008d0a:	4b62      	ldr	r3, [pc, #392]	; (8008e94 <PxMessagingTask+0x36c>)
 8008d0c:	5d5a      	ldrb	r2, [r3, r5]
 8008d0e:	3a01      	subs	r2, #1
 8008d10:	00eb      	lsls	r3, r5, #3
 8008d12:	1b5b      	subs	r3, r3, r5
 8008d14:	00d9      	lsls	r1, r3, #3
 8008d16:	4b5d      	ldr	r3, [pc, #372]	; (8008e8c <PxMessagingTask+0x364>)
 8008d18:	185b      	adds	r3, r3, r1
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	5499      	strb	r1, [r3, r2]
 8008d1e:	e72f      	b.n	8008b80 <PxMessagingTask+0x58>
				else if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 8008d20:	3801      	subs	r0, #1
 8008d22:	00eb      	lsls	r3, r5, #3
 8008d24:	1b5b      	subs	r3, r3, r5
 8008d26:	00da      	lsls	r2, r3, #3
 8008d28:	4b58      	ldr	r3, [pc, #352]	; (8008e8c <PxMessagingTask+0x364>)
 8008d2a:	189b      	adds	r3, r3, r2
 8008d2c:	5c1a      	ldrb	r2, [r3, r0]
 8008d2e:	4b5e      	ldr	r3, [pc, #376]	; (8008ea8 <PxMessagingTask+0x380>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d000      	beq.n	8008d38 <PxMessagingTask+0x210>
 8008d36:	e723      	b.n	8008b80 <PxMessagingTask+0x58>
					result = BOS_ERR_MSG_Reflection;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	469b      	mov	fp, r3
 8008d3c:	e720      	b.n	8008b80 <PxMessagingTask+0x58>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008d3e:	4b55      	ldr	r3, [pc, #340]	; (8008e94 <PxMessagingTask+0x36c>)
 8008d40:	5d5a      	ldrb	r2, [r3, r5]
 8008d42:	3a01      	subs	r2, #1
 8008d44:	00eb      	lsls	r3, r5, #3
 8008d46:	1b5b      	subs	r3, r3, r5
 8008d48:	00d9      	lsls	r1, r3, #3
 8008d4a:	4b50      	ldr	r3, [pc, #320]	; (8008e8c <PxMessagingTask+0x364>)
 8008d4c:	185b      	adds	r3, r3, r1
 8008d4e:	5c9b      	ldrb	r3, [r3, r2]
 8008d50:	4a55      	ldr	r2, [pc, #340]	; (8008ea8 <PxMessagingTask+0x380>)
 8008d52:	7812      	ldrb	r2, [r2, #0]
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d100      	bne.n	8008d5a <PxMessagingTask+0x232>
 8008d58:	e716      	b.n	8008b88 <PxMessagingTask+0x60>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8008d5a:	4a53      	ldr	r2, [pc, #332]	; (8008ea8 <PxMessagingTask+0x380>)
 8008d5c:	7013      	strb	r3, [r2, #0]
 8008d5e:	4a53      	ldr	r2, [pc, #332]	; (8008eac <PxMessagingTask+0x384>)
 8008d60:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 8008d62:	9907      	ldr	r1, [sp, #28]
 8008d64:	20fe      	movs	r0, #254	; 0xfe
 8008d66:	f7ff fbf9 	bl	800855c <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8008d6a:	4b4a      	ldr	r3, [pc, #296]	; (8008e94 <PxMessagingTask+0x36c>)
 8008d6c:	5d58      	ldrb	r0, [r3, r5]
 8008d6e:	1e41      	subs	r1, r0, #1
 8008d70:	00ea      	lsls	r2, r5, #3
 8008d72:	1b52      	subs	r2, r2, r5
 8008d74:	00d7      	lsls	r7, r2, #3
 8008d76:	4b45      	ldr	r3, [pc, #276]	; (8008e8c <PxMessagingTask+0x364>)
 8008d78:	19db      	adds	r3, r3, r7
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	545a      	strb	r2, [r3, r1]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008d7e:	3802      	subs	r0, #2
 8008d80:	5c1b      	ldrb	r3, [r3, r0]
 8008d82:	001f      	movs	r7, r3
 8008d84:	46a4      	mov	ip, r4
					for(i=0 ; i<temp ; i++)
 8008d86:	42ba      	cmp	r2, r7
 8008d88:	d20e      	bcs.n	8008da8 <PxMessagingTask+0x280>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 8008d8a:	1bc1      	subs	r1, r0, r7
 8008d8c:	1851      	adds	r1, r2, r1
 8008d8e:	00eb      	lsls	r3, r5, #3
 8008d90:	1b5b      	subs	r3, r3, r5
 8008d92:	00dc      	lsls	r4, r3, #3
 8008d94:	4b3d      	ldr	r3, [pc, #244]	; (8008e8c <PxMessagingTask+0x364>)
 8008d96:	191b      	adds	r3, r3, r4
 8008d98:	5c59      	ldrb	r1, [r3, r1]
 8008d9a:	4b3d      	ldr	r3, [pc, #244]	; (8008e90 <PxMessagingTask+0x368>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	4299      	cmp	r1, r3
 8008da0:	d018      	beq.n	8008dd4 <PxMessagingTask+0x2ac>
					for(i=0 ; i<temp ; i++)
 8008da2:	3201      	adds	r2, #1
 8008da4:	b2d2      	uxtb	r2, r2
 8008da6:	e7ee      	b.n	8008d86 <PxMessagingTask+0x25e>
 8008da8:	46ba      	mov	sl, r7
 8008daa:	4664      	mov	r4, ip
					result = BOS_ERR_WrongID;
 8008dac:	2366      	movs	r3, #102	; 0x66
 8008dae:	469b      	mov	fp, r3
 8008db0:	e6ee      	b.n	8008b90 <PxMessagingTask+0x68>
				else if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 8008db2:	4b38      	ldr	r3, [pc, #224]	; (8008e94 <PxMessagingTask+0x36c>)
 8008db4:	5d5a      	ldrb	r2, [r3, r5]
 8008db6:	3a01      	subs	r2, #1
 8008db8:	00eb      	lsls	r3, r5, #3
 8008dba:	1b5b      	subs	r3, r3, r5
 8008dbc:	00d9      	lsls	r1, r3, #3
 8008dbe:	4b33      	ldr	r3, [pc, #204]	; (8008e8c <PxMessagingTask+0x364>)
 8008dc0:	185b      	adds	r3, r3, r1
 8008dc2:	5c9a      	ldrb	r2, [r3, r2]
 8008dc4:	4b38      	ldr	r3, [pc, #224]	; (8008ea8 <PxMessagingTask+0x380>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d000      	beq.n	8008dce <PxMessagingTask+0x2a6>
 8008dcc:	e6e0      	b.n	8008b90 <PxMessagingTask+0x68>
					result = BOS_ERR_MSG_Reflection;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	469b      	mov	fp, r3
 8008dd2:	e6dd      	b.n	8008b90 <PxMessagingTask+0x68>
 8008dd4:	46ba      	mov	sl, r7
 8008dd6:	4664      	mov	r4, ip
							result = BOS_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	469b      	mov	fp, r3
 8008ddc:	e6d8      	b.n	8008b90 <PxMessagingTask+0x68>
							indMode = IND_PING;	osDelay(10);
 8008dde:	4b31      	ldr	r3, [pc, #196]	; (8008ea4 <PxMessagingTask+0x37c>)
 8008de0:	2201      	movs	r2, #1
 8008de2:	701a      	strb	r2, [r3, #0]
 8008de4:	200a      	movs	r0, #10
 8008de6:	f005 f991 	bl	800e10c <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8008dea:	4b2d      	ldr	r3, [pc, #180]	; (8008ea0 <PxMessagingTask+0x378>)
 8008dec:	799b      	ldrb	r3, [r3, #6]
 8008dee:	2b60      	cmp	r3, #96	; 0x60
 8008df0:	d002      	beq.n	8008df8 <PxMessagingTask+0x2d0>
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	d000      	beq.n	8008df8 <PxMessagingTask+0x2d0>
 8008df6:	e6e4      	b.n	8008bc2 <PxMessagingTask+0x9a>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	9805      	ldr	r0, [sp, #20]
 8008dfe:	f7ff fbf5 	bl	80085ec <SendMessageToModule>
 8008e02:	e6de      	b.n	8008bc2 <PxMessagingTask+0x9a>
							if (!moduleAlias[myID][0])
 8008e04:	4b22      	ldr	r3, [pc, #136]	; (8008e90 <PxMessagingTask+0x368>)
 8008e06:	781a      	ldrb	r2, [r3, #0]
 8008e08:	0093      	lsls	r3, r2, #2
 8008e0a:	189b      	adds	r3, r3, r2
 8008e0c:	005a      	lsls	r2, r3, #1
 8008e0e:	4b28      	ldr	r3, [pc, #160]	; (8008eb0 <PxMessagingTask+0x388>)
 8008e10:	5cd3      	ldrb	r3, [r2, r3]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d116      	bne.n	8008e44 <PxMessagingTask+0x31c>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 8008e16:	9a05      	ldr	r2, [sp, #20]
 8008e18:	4926      	ldr	r1, [pc, #152]	; (8008eb4 <PxMessagingTask+0x38c>)
 8008e1a:	4827      	ldr	r0, [pc, #156]	; (8008eb8 <PxMessagingTask+0x390>)
 8008e1c:	f00b fa40 	bl	80142a0 <siprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8008e20:	4c25      	ldr	r4, [pc, #148]	; (8008eb8 <PxMessagingTask+0x390>)
 8008e22:	0020      	movs	r0, r4
 8008e24:	f7f7 f978 	bl	8000118 <strlen>
 8008e28:	b282      	uxth	r2, r0
 8008e2a:	4b24      	ldr	r3, [pc, #144]	; (8008ebc <PxMessagingTask+0x394>)
 8008e2c:	7818      	ldrb	r0, [r3, #0]
 8008e2e:	2301      	movs	r3, #1
 8008e30:	425b      	negs	r3, r3
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	3333      	adds	r3, #51	; 0x33
 8008e36:	0021      	movs	r1, r4
 8008e38:	f005 f834 	bl	800dea4 <writePxMutex>
							responseStatus = BOS_OK;								
 8008e3c:	4b20      	ldr	r3, [pc, #128]	; (8008ec0 <PxMessagingTask+0x398>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	701a      	strb	r2, [r3, #0]
							break;
 8008e42:	e6be      	b.n	8008bc2 <PxMessagingTask+0x9a>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8008e44:	230a      	movs	r3, #10
 8008e46:	9905      	ldr	r1, [sp, #20]
 8008e48:	434b      	muls	r3, r1
 8008e4a:	4a19      	ldr	r2, [pc, #100]	; (8008eb0 <PxMessagingTask+0x388>)
 8008e4c:	189b      	adds	r3, r3, r2
 8008e4e:	000a      	movs	r2, r1
 8008e50:	491c      	ldr	r1, [pc, #112]	; (8008ec4 <PxMessagingTask+0x39c>)
 8008e52:	4819      	ldr	r0, [pc, #100]	; (8008eb8 <PxMessagingTask+0x390>)
 8008e54:	f00b fa24 	bl	80142a0 <siprintf>
 8008e58:	e7e2      	b.n	8008e20 <PxMessagingTask+0x2f8>
							IND_ON();
 8008e5a:	2180      	movs	r1, #128	; 0x80
 8008e5c:	2090      	movs	r0, #144	; 0x90
 8008e5e:	2201      	movs	r2, #1
 8008e60:	0109      	lsls	r1, r1, #4
 8008e62:	05c0      	lsls	r0, r0, #23
 8008e64:	f008 fd05 	bl	8011872 <HAL_GPIO_WritePin>
							break;
 8008e68:	e6ab      	b.n	8008bc2 <PxMessagingTask+0x9a>
							IND_OFF();
 8008e6a:	2180      	movs	r1, #128	; 0x80
 8008e6c:	2090      	movs	r0, #144	; 0x90
 8008e6e:	2200      	movs	r2, #0
 8008e70:	0109      	lsls	r1, r1, #4
 8008e72:	05c0      	lsls	r0, r0, #23
 8008e74:	f008 fcfd 	bl	8011872 <HAL_GPIO_WritePin>
							break;
 8008e78:	e6a3      	b.n	8008bc2 <PxMessagingTask+0x9a>
							IND_toggle();
 8008e7a:	2180      	movs	r1, #128	; 0x80
 8008e7c:	2090      	movs	r0, #144	; 0x90
 8008e7e:	0109      	lsls	r1, r1, #4
 8008e80:	05c0      	lsls	r0, r0, #23
 8008e82:	f008 fcfc 	bl	801187e <HAL_GPIO_TogglePin>
							break;
 8008e86:	e69c      	b.n	8008bc2 <PxMessagingTask+0x9a>
 8008e88:	20000715 	.word	0x20000715
 8008e8c:	20000560 	.word	0x20000560
 8008e90:	20000896 	.word	0x20000896
 8008e94:	20000750 	.word	0x20000750
 8008e98:	080198b0 	.word	0x080198b0
 8008e9c:	20000910 	.word	0x20000910
 8008ea0:	20006148 	.word	0x20006148
 8008ea4:	20000714 	.word	0x20000714
 8008ea8:	20000d6a 	.word	0x20000d6a
 8008eac:	2000050c 	.word	0x2000050c
 8008eb0:	20000788 	.word	0x20000788
 8008eb4:	08018310 	.word	0x08018310
 8008eb8:	20000ec0 	.word	0x20000ec0
 8008ebc:	200002cf 	.word	0x200002cf
 8008ec0:	20000928 	.word	0x20000928
 8008ec4:	08018324 	.word	0x08018324
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 8008ec8:	9b05      	ldr	r3, [sp, #20]
 8008eca:	021a      	lsls	r2, r3, #8
 8008ecc:	b292      	uxth	r2, r2
 8008ece:	1ca0      	adds	r0, r4, #2
 8008ed0:	00eb      	lsls	r3, r5, #3
 8008ed2:	1b5b      	subs	r3, r3, r5
 8008ed4:	00d9      	lsls	r1, r3, #3
 8008ed6:	4bca      	ldr	r3, [pc, #808]	; (8009200 <PxMessagingTask+0x6d8>)
 8008ed8:	1859      	adds	r1, r3, r1
 8008eda:	5c0b      	ldrb	r3, [r1, r0]
 8008edc:	18d2      	adds	r2, r2, r3
 8008ede:	4bc9      	ldr	r3, [pc, #804]	; (8009204 <PxMessagingTask+0x6dc>)
 8008ee0:	00a8      	lsls	r0, r5, #2
 8008ee2:	521a      	strh	r2, [r3, r0]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 8008ee4:	5d0a      	ldrb	r2, [r1, r4]
 8008ee6:	0212      	lsls	r2, r2, #8
 8008ee8:	3401      	adds	r4, #1
 8008eea:	5d09      	ldrb	r1, [r1, r4]
 8008eec:	1852      	adds	r2, r2, r1
 8008eee:	181b      	adds	r3, r3, r0
 8008ef0:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 8008ef2:	4bc5      	ldr	r3, [pc, #788]	; (8009208 <PxMessagingTask+0x6e0>)
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	4ac5      	ldr	r2, [pc, #788]	; (800920c <PxMessagingTask+0x6e4>)
 8008ef8:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 8008efe:	9c07      	ldr	r4, [sp, #28]
 8008f00:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8008f02:	2002      	movs	r0, #2
 8008f04:	f005 f902 	bl	800e10c <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 8008f08:	2303      	movs	r3, #3
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2100      	movs	r1, #0
 8008f12:	0020      	movs	r0, r4
 8008f14:	f7ff f95a 	bl	80081cc <SendMessageFromPort>
							break;
 8008f18:	e653      	b.n	8008bc2 <PxMessagingTask+0x9a>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8008f1a:	9b05      	ldr	r3, [sp, #20]
 8008f1c:	021a      	lsls	r2, r3, #8
 8008f1e:	b292      	uxth	r2, r2
 8008f20:	1ca1      	adds	r1, r4, #2
 8008f22:	00eb      	lsls	r3, r5, #3
 8008f24:	1b5b      	subs	r3, r3, r5
 8008f26:	00d8      	lsls	r0, r3, #3
 8008f28:	4bb5      	ldr	r3, [pc, #724]	; (8009200 <PxMessagingTask+0x6d8>)
 8008f2a:	1818      	adds	r0, r3, r0
 8008f2c:	5c43      	ldrb	r3, [r0, r1]
 8008f2e:	18d2      	adds	r2, r2, r3
 8008f30:	4bb4      	ldr	r3, [pc, #720]	; (8009204 <PxMessagingTask+0x6dc>)
 8008f32:	00a9      	lsls	r1, r5, #2
 8008f34:	525a      	strh	r2, [r3, r1]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8008f36:	5d02      	ldrb	r2, [r0, r4]
 8008f38:	0212      	lsls	r2, r2, #8
 8008f3a:	3401      	adds	r4, #1
 8008f3c:	5d00      	ldrb	r0, [r0, r4]
 8008f3e:	1812      	adds	r2, r2, r0
 8008f40:	185b      	adds	r3, r3, r1
 8008f42:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8008f44:	4bb2      	ldr	r3, [pc, #712]	; (8009210 <PxMessagingTask+0x6e8>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	701a      	strb	r2, [r3, #0]
							break;
 8008f4a:	e63a      	b.n	8008bc2 <PxMessagingTask+0x9a>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 8008f4c:	9807      	ldr	r0, [sp, #28]
 8008f4e:	f7f9 fff9 	bl	8002f44 <ExploreNeighbors>
 8008f52:	4bb0      	ldr	r3, [pc, #704]	; (8009214 <PxMessagingTask+0x6ec>)
 8008f54:	2202      	movs	r2, #2
 8008f56:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 8008f58:	200a      	movs	r0, #10
 8008f5a:	f005 f8d7 	bl	800e10c <osDelay>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8008f5e:	2401      	movs	r4, #1
							osDelay(10); temp = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	001e      	movs	r6, r3
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8008f64:	e001      	b.n	8008f6a <PxMessagingTask+0x442>
 8008f66:	3401      	adds	r4, #1
 8008f68:	b2e4      	uxtb	r4, r4
 8008f6a:	2c05      	cmp	r4, #5
 8008f6c:	d812      	bhi.n	8008f94 <PxMessagingTask+0x46c>
								if (neighbors[p-1][0])
 8008f6e:	1e63      	subs	r3, r4, #1
 8008f70:	0099      	lsls	r1, r3, #2
 8008f72:	4aa4      	ldr	r2, [pc, #656]	; (8009204 <PxMessagingTask+0x6dc>)
 8008f74:	5a8a      	ldrh	r2, [r1, r2]
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	d0f5      	beq.n	8008f66 <PxMessagingTask+0x43e>
									messageParams[temp] = p;
 8008f7a:	4aa4      	ldr	r2, [pc, #656]	; (800920c <PxMessagingTask+0x6e4>)
 8008f7c:	5594      	strb	r4, [r2, r6]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 8008f7e:	1c70      	adds	r0, r6, #1
 8008f80:	000b      	movs	r3, r1
 8008f82:	49a0      	ldr	r1, [pc, #640]	; (8009204 <PxMessagingTask+0x6dc>)
 8008f84:	1859      	adds	r1, r3, r1
 8008f86:	1880      	adds	r0, r0, r2
 8008f88:	2204      	movs	r2, #4
 8008f8a:	f00a fa22 	bl	80133d2 <memcpy>
									temp += 5;		
 8008f8e:	3605      	adds	r6, #5
 8008f90:	b2f6      	uxtb	r6, r6
 8008f92:	e7e8      	b.n	8008f66 <PxMessagingTask+0x43e>
 8008f94:	46b2      	mov	sl, r6
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 8008f96:	b2b2      	uxth	r2, r6
 8008f98:	210d      	movs	r1, #13
 8008f9a:	9805      	ldr	r0, [sp, #20]
 8008f9c:	f7ff fb26 	bl	80085ec <SendMessageToModule>
							break;
 8008fa0:	e60f      	b.n	8008bc2 <PxMessagingTask+0x9a>
							temp = numOfParams/5;
 8008fa2:	2105      	movs	r1, #5
 8008fa4:	0038      	movs	r0, r7
 8008fa6:	f7f7 f8c9 	bl	800013c <__udivsi3>
 8008faa:	b2c3      	uxtb	r3, r0
 8008fac:	469a      	mov	sl, r3
							for (uint8_t k=0 ; k<temp ; k++)  {
 8008fae:	2600      	movs	r6, #0
 8008fb0:	e019      	b.n	8008fe6 <PxMessagingTask+0x4be>
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 8008fb2:	00b3      	lsls	r3, r6, #2
 8008fb4:	199b      	adds	r3, r3, r6
 8008fb6:	18e2      	adds	r2, r4, r3
 8008fb8:	4694      	mov	ip, r2
 8008fba:	4991      	ldr	r1, [pc, #580]	; (8009200 <PxMessagingTask+0x6d8>)
 8008fbc:	00ea      	lsls	r2, r5, #3
 8008fbe:	1b57      	subs	r7, r2, r5
 8008fc0:	00f8      	lsls	r0, r7, #3
 8008fc2:	1808      	adds	r0, r1, r0
 8008fc4:	4667      	mov	r7, ip
 8008fc6:	5dc0      	ldrb	r0, [r0, r7]
 8008fc8:	3801      	subs	r0, #1
 8008fca:	0080      	lsls	r0, r0, #2
 8008fcc:	4f92      	ldr	r7, [pc, #584]	; (8009218 <PxMessagingTask+0x6f0>)
 8008fce:	19c0      	adds	r0, r0, r7
 8008fd0:	1c67      	adds	r7, r4, #1
 8008fd2:	19df      	adds	r7, r3, r7
 8008fd4:	1b52      	subs	r2, r2, r5
 8008fd6:	00d3      	lsls	r3, r2, #3
 8008fd8:	19db      	adds	r3, r3, r7
 8008fda:	1859      	adds	r1, r3, r1
 8008fdc:	2204      	movs	r2, #4
 8008fde:	f00a f9f8 	bl	80133d2 <memcpy>
							for (uint8_t k=0 ; k<temp ; k++)  {
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	b2f6      	uxtb	r6, r6
 8008fe6:	4556      	cmp	r6, sl
 8008fe8:	d3e3      	bcc.n	8008fb2 <PxMessagingTask+0x48a>
							responseStatus = BOS_OK;
 8008fea:	4b89      	ldr	r3, [pc, #548]	; (8009210 <PxMessagingTask+0x6e8>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	701a      	strb	r2, [r3, #0]
							break;
 8008ff0:	e5e7      	b.n	8008bc2 <PxMessagingTask+0x9a>
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 8008ff2:	9b07      	ldr	r3, [sp, #28]
 8008ff4:	429e      	cmp	r6, r3
 8008ff6:	d00c      	beq.n	8009012 <PxMessagingTask+0x4ea>
 8008ff8:	0030      	movs	r0, r6
 8008ffa:	f004 ff35 	bl	800de68 <GetUart>
 8008ffe:	19a2      	adds	r2, r4, r6
 8009000:	3a01      	subs	r2, #1
 8009002:	00eb      	lsls	r3, r5, #3
 8009004:	1b5b      	subs	r3, r3, r5
 8009006:	00d9      	lsls	r1, r3, #3
 8009008:	4b7d      	ldr	r3, [pc, #500]	; (8009200 <PxMessagingTask+0x6d8>)
 800900a:	185b      	adds	r3, r3, r1
 800900c:	5c99      	ldrb	r1, [r3, r2]
 800900e:	f004 ffc3 	bl	800df98 <SwapUartPins>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009012:	3601      	adds	r6, #1
 8009014:	b2f6      	uxtb	r6, r6
 8009016:	2e05      	cmp	r6, #5
 8009018:	d9eb      	bls.n	8008ff2 <PxMessagingTask+0x4ca>
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 800901a:	9807      	ldr	r0, [sp, #28]
 800901c:	f004 ff24 	bl	800de68 <GetUart>
 8009020:	340a      	adds	r4, #10
 8009022:	00eb      	lsls	r3, r5, #3
 8009024:	1b5b      	subs	r3, r3, r5
 8009026:	00da      	lsls	r2, r3, #3
 8009028:	4b75      	ldr	r3, [pc, #468]	; (8009200 <PxMessagingTask+0x6d8>)
 800902a:	189b      	adds	r3, r3, r2
 800902c:	5d19      	ldrb	r1, [r3, r4]
 800902e:	f004 ffb3 	bl	800df98 <SwapUartPins>
							break;
 8009032:	e5c6      	b.n	8008bc2 <PxMessagingTask+0x9a>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009034:	2601      	movs	r6, #1
 8009036:	e7ee      	b.n	8009016 <PxMessagingTask+0x4ee>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 8009038:	00eb      	lsls	r3, r5, #3
 800903a:	1b5b      	subs	r3, r3, r5
 800903c:	00da      	lsls	r2, r3, #3
 800903e:	4b70      	ldr	r3, [pc, #448]	; (8009200 <PxMessagingTask+0x6d8>)
 8009040:	189b      	adds	r3, r3, r2
 8009042:	5d1b      	ldrb	r3, [r3, r4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d108      	bne.n	800905a <PxMessagingTask+0x532>
								myID = cMessage[port-1][1+shift];
 8009048:	3401      	adds	r4, #1
 800904a:	2238      	movs	r2, #56	; 0x38
 800904c:	436a      	muls	r2, r5
 800904e:	4b6c      	ldr	r3, [pc, #432]	; (8009200 <PxMessagingTask+0x6d8>)
 8009050:	189b      	adds	r3, r3, r2
 8009052:	5d1a      	ldrb	r2, [r3, r4]
 8009054:	4b71      	ldr	r3, [pc, #452]	; (800921c <PxMessagingTask+0x6f4>)
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	e5b3      	b.n	8008bc2 <PxMessagingTask+0x9a>
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 800905a:	2b01      	cmp	r3, #1
 800905c:	d000      	beq.n	8009060 <PxMessagingTask+0x538>
 800905e:	e5b0      	b.n	8008bc2 <PxMessagingTask+0x9a>
								messageParams[0] = 0;											/* change own ID */
 8009060:	4a6a      	ldr	r2, [pc, #424]	; (800920c <PxMessagingTask+0x6e4>)
 8009062:	2100      	movs	r1, #0
 8009064:	7011      	strb	r1, [r2, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 8009066:	1c60      	adds	r0, r4, #1
 8009068:	3337      	adds	r3, #55	; 0x37
 800906a:	436b      	muls	r3, r5
 800906c:	4e64      	ldr	r6, [pc, #400]	; (8009200 <PxMessagingTask+0x6d8>)
 800906e:	18f3      	adds	r3, r6, r3
 8009070:	5c18      	ldrb	r0, [r3, r0]
 8009072:	7050      	strb	r0, [r2, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 8009074:	3402      	adds	r4, #2
 8009076:	5d18      	ldrb	r0, [r3, r4]
 8009078:	2303      	movs	r3, #3
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	330d      	adds	r3, #13
 800907e:	000a      	movs	r2, r1
 8009080:	f7ff f8a4 	bl	80081cc <SendMessageFromPort>
 8009084:	e59d      	b.n	8008bc2 <PxMessagingTask+0x9a>
							if (longMessage) {
 8009086:	4b66      	ldr	r3, [pc, #408]	; (8009220 <PxMessagingTask+0x6f8>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00f      	beq.n	80090ae <PxMessagingTask+0x586>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 800908e:	4e65      	ldr	r6, [pc, #404]	; (8009224 <PxMessagingTask+0x6fc>)
 8009090:	8833      	ldrh	r3, [r6, #0]
 8009092:	4865      	ldr	r0, [pc, #404]	; (8009228 <PxMessagingTask+0x700>)
 8009094:	1818      	adds	r0, r3, r0
 8009096:	2138      	movs	r1, #56	; 0x38
 8009098:	4369      	muls	r1, r5
 800909a:	190c      	adds	r4, r1, r4
 800909c:	4958      	ldr	r1, [pc, #352]	; (8009200 <PxMessagingTask+0x6d8>)
 800909e:	1861      	adds	r1, r4, r1
 80090a0:	003a      	movs	r2, r7
 80090a2:	f00a f996 	bl	80133d2 <memcpy>
								longMessageLastPtr += numOfParams;
 80090a6:	8833      	ldrh	r3, [r6, #0]
 80090a8:	19df      	adds	r7, r3, r7
 80090aa:	8037      	strh	r7, [r6, #0]
 80090ac:	e589      	b.n	8008bc2 <PxMessagingTask+0x9a>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 80090ae:	4e5d      	ldr	r6, [pc, #372]	; (8009224 <PxMessagingTask+0x6fc>)
 80090b0:	8830      	ldrh	r0, [r6, #0]
 80090b2:	4b5d      	ldr	r3, [pc, #372]	; (8009228 <PxMessagingTask+0x700>)
 80090b4:	4699      	mov	r9, r3
 80090b6:	4448      	add	r0, r9
 80090b8:	2138      	movs	r1, #56	; 0x38
 80090ba:	4369      	muls	r1, r5
 80090bc:	190c      	adds	r4, r1, r4
 80090be:	4950      	ldr	r1, [pc, #320]	; (8009200 <PxMessagingTask+0x6d8>)
 80090c0:	1861      	adds	r1, r4, r1
 80090c2:	003a      	movs	r2, r7
 80090c4:	f00a f985 	bl	80133d2 <memcpy>
								longMessageLastPtr += numOfParams;
 80090c8:	8834      	ldrh	r4, [r6, #0]
 80090ca:	19e4      	adds	r4, r4, r7
 80090cc:	b2a4      	uxth	r4, r4
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 80090ce:	2116      	movs	r1, #22
 80090d0:	0020      	movs	r0, r4
 80090d2:	f7f7 f833 	bl	800013c <__udivsi3>
 80090d6:	4b55      	ldr	r3, [pc, #340]	; (800922c <PxMessagingTask+0x704>)
 80090d8:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 80090da:	0022      	movs	r2, r4
 80090dc:	4649      	mov	r1, r9
 80090de:	4854      	ldr	r0, [pc, #336]	; (8009230 <PxMessagingTask+0x708>)
 80090e0:	f00a f977 	bl	80133d2 <memcpy>
								longMessageLastPtr = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	8033      	strh	r3, [r6, #0]
 80090e8:	e56b      	b.n	8008bc2 <PxMessagingTask+0x9a>
								for (p=1 ; p<=NumOfPorts ; p++) {
 80090ea:	3401      	adds	r4, #1
 80090ec:	b2e4      	uxtb	r4, r4
 80090ee:	2c05      	cmp	r4, #5
 80090f0:	d810      	bhi.n	8009114 <PxMessagingTask+0x5ec>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 80090f2:	0020      	movs	r0, r4
 80090f4:	f004 feb8 	bl	800de68 <GetUart>
 80090f8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80090fa:	2380      	movs	r3, #128	; 0x80
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	429a      	cmp	r2, r3
 8009100:	d1f3      	bne.n	80090ea <PxMessagingTask+0x5c2>
									messageParams[temp++] = p;
 8009102:	1c73      	adds	r3, r6, #1
 8009104:	4a41      	ldr	r2, [pc, #260]	; (800920c <PxMessagingTask+0x6e4>)
 8009106:	5594      	strb	r4, [r2, r6]
 8009108:	b2de      	uxtb	r6, r3
 800910a:	e7ee      	b.n	80090ea <PxMessagingTask+0x5c2>
								for (p=1 ; p<=NumOfPorts ; p++) {
 800910c:	2401      	movs	r4, #1
							temp = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	001e      	movs	r6, r3
 8009112:	e7ec      	b.n	80090ee <PxMessagingTask+0x5c6>
 8009114:	46b2      	mov	sl, r6
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 8009116:	b2b2      	uxth	r2, r6
 8009118:	2114      	movs	r1, #20
 800911a:	9805      	ldr	r0, [sp, #20]
 800911c:	f7ff fa66 	bl	80085ec <SendMessageToModule>
							break;
 8009120:	e54f      	b.n	8008bc2 <PxMessagingTask+0x9a>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 8009122:	9b05      	ldr	r3, [sp, #20]
 8009124:	3b01      	subs	r3, #1
 8009126:	1860      	adds	r0, r4, r1
 8009128:	00ea      	lsls	r2, r5, #3
 800912a:	1b52      	subs	r2, r2, r5
 800912c:	00d6      	lsls	r6, r2, #3
 800912e:	4a34      	ldr	r2, [pc, #208]	; (8009200 <PxMessagingTask+0x6d8>)
 8009130:	1992      	adds	r2, r2, r6
 8009132:	5c10      	ldrb	r0, [r2, r0]
 8009134:	3801      	subs	r0, #1
 8009136:	2680      	movs	r6, #128	; 0x80
 8009138:	0236      	lsls	r6, r6, #8
 800913a:	4106      	asrs	r6, r0
 800913c:	483d      	ldr	r0, [pc, #244]	; (8009234 <PxMessagingTask+0x70c>)
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	5a1a      	ldrh	r2, [r3, r0]
 8009142:	4332      	orrs	r2, r6
 8009144:	521a      	strh	r2, [r3, r0]
							for (p=0 ; p<numOfParams ; p++) 
 8009146:	3101      	adds	r1, #1
 8009148:	b2c9      	uxtb	r1, r1
 800914a:	42b9      	cmp	r1, r7
 800914c:	d3e9      	bcc.n	8009122 <PxMessagingTask+0x5fa>
							responseStatus = BOS_OK;
 800914e:	4b30      	ldr	r3, [pc, #192]	; (8009210 <PxMessagingTask+0x6e8>)
 8009150:	2200      	movs	r2, #0
 8009152:	701a      	strb	r2, [r3, #0]
							break;		
 8009154:	e535      	b.n	8008bc2 <PxMessagingTask+0x9a>
							for (p=0 ; p<numOfParams ; p++) 
 8009156:	2100      	movs	r1, #0
 8009158:	e7f7      	b.n	800914a <PxMessagingTask+0x622>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 800915a:	00eb      	lsls	r3, r5, #3
 800915c:	1b5b      	subs	r3, r3, r5
 800915e:	00da      	lsls	r2, r3, #3
 8009160:	4b27      	ldr	r3, [pc, #156]	; (8009200 <PxMessagingTask+0x6d8>)
 8009162:	189b      	adds	r3, r3, r2
 8009164:	5d1e      	ldrb	r6, [r3, r4]
 8009166:	0636      	lsls	r6, r6, #24
 8009168:	1c62      	adds	r2, r4, #1
 800916a:	5c9a      	ldrb	r2, [r3, r2]
 800916c:	0412      	lsls	r2, r2, #16
 800916e:	18b6      	adds	r6, r6, r2
 8009170:	1ca2      	adds	r2, r4, #2
 8009172:	5c9a      	ldrb	r2, [r3, r2]
 8009174:	0212      	lsls	r2, r2, #8
 8009176:	18b6      	adds	r6, r6, r2
 8009178:	1ce2      	adds	r2, r4, #3
 800917a:	5c9a      	ldrb	r2, [r3, r2]
 800917c:	18b6      	adds	r6, r6, r2
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 800917e:	1d22      	adds	r2, r4, #4
 8009180:	4691      	mov	r9, r2
 8009182:	5c9b      	ldrb	r3, [r3, r2]
 8009184:	2bff      	cmp	r3, #255	; 0xff
 8009186:	d00e      	beq.n	80091a6 <PxMessagingTask+0x67e>
									for (p=0 ; p<numOfParams ; p++) 
 8009188:	2400      	movs	r4, #0
								temp = temp32 = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	469a      	mov	sl, r3
 800918e:	e01b      	b.n	80091c8 <PxMessagingTask+0x6a0>
										UpdateBaudrate(p, temp32); 
 8009190:	0031      	movs	r1, r6
 8009192:	0020      	movs	r0, r4
 8009194:	f004 fef6 	bl	800df84 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009198:	3401      	adds	r4, #1
 800919a:	b2e4      	uxtb	r4, r4
 800919c:	2c05      	cmp	r4, #5
 800919e:	d9f7      	bls.n	8009190 <PxMessagingTask+0x668>
								temp = temp32 = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	469a      	mov	sl, r3
 80091a4:	e50d      	b.n	8008bc2 <PxMessagingTask+0x9a>
									for (p=1 ; p<=NumOfPorts ; p++) 
 80091a6:	2401      	movs	r4, #1
 80091a8:	e7f8      	b.n	800919c <PxMessagingTask+0x674>
										temp = cMessage[port-1][4+shift+p];
 80091aa:	464b      	mov	r3, r9
 80091ac:	18e2      	adds	r2, r4, r3
 80091ae:	00eb      	lsls	r3, r5, #3
 80091b0:	1b5b      	subs	r3, r3, r5
 80091b2:	00d9      	lsls	r1, r3, #3
 80091b4:	4b12      	ldr	r3, [pc, #72]	; (8009200 <PxMessagingTask+0x6d8>)
 80091b6:	185b      	adds	r3, r3, r1
 80091b8:	5c9b      	ldrb	r3, [r3, r2]
 80091ba:	469a      	mov	sl, r3
										if (temp>0 && temp<=NumOfPorts)	{
 80091bc:	3b01      	subs	r3, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b04      	cmp	r3, #4
 80091c2:	d904      	bls.n	80091ce <PxMessagingTask+0x6a6>
									for (p=0 ; p<numOfParams ; p++) 
 80091c4:	3401      	adds	r4, #1
 80091c6:	b2e4      	uxtb	r4, r4
 80091c8:	42bc      	cmp	r4, r7
 80091ca:	d3ee      	bcc.n	80091aa <PxMessagingTask+0x682>
 80091cc:	e4f9      	b.n	8008bc2 <PxMessagingTask+0x9a>
											UpdateBaudrate(temp, temp32); 
 80091ce:	0031      	movs	r1, r6
 80091d0:	4650      	mov	r0, sl
 80091d2:	f004 fed7 	bl	800df84 <UpdateBaudrate>
 80091d6:	e7f5      	b.n	80091c4 <PxMessagingTask+0x69c>
								SaveToRO();
 80091d8:	f001 fdc6 	bl	800ad68 <SaveToRO>
							SaveEEportsDir();
 80091dc:	f7f9 fa7c 	bl	80026d8 <SaveEEportsDir>
							indMode = IND_PING;
 80091e0:	4b0c      	ldr	r3, [pc, #48]	; (8009214 <PxMessagingTask+0x6ec>)
 80091e2:	2201      	movs	r2, #1
 80091e4:	701a      	strb	r2, [r3, #0]
							break;
 80091e6:	e4ec      	b.n	8008bc2 <PxMessagingTask+0x9a>
							ClearEEportsDir();
 80091e8:	f7f9 fa96 	bl	8002718 <ClearEEportsDir>
							ClearROtopology();
 80091ec:	f001 fea8 	bl	800af40 <ClearROtopology>
							osDelay(100);
 80091f0:	2064      	movs	r0, #100	; 0x64
 80091f2:	f004 ff8b 	bl	800e10c <osDelay>
							indMode = IND_TOPOLOGY;
 80091f6:	4b07      	ldr	r3, [pc, #28]	; (8009214 <PxMessagingTask+0x6ec>)
 80091f8:	2202      	movs	r2, #2
 80091fa:	701a      	strb	r2, [r3, #0]
							break;
 80091fc:	e4e1      	b.n	8008bc2 <PxMessagingTask+0x9a>
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	20000560 	.word	0x20000560
 8009204:	20000898 	.word	0x20000898
 8009208:	20000050 	.word	0x20000050
 800920c:	20000758 	.word	0x20000758
 8009210:	20000928 	.word	0x20000928
 8009214:	20000714 	.word	0x20000714
 8009218:	200008ac 	.word	0x200008ac
 800921c:	20000896 	.word	0x20000896
 8009220:	20000715 	.word	0x20000715
 8009224:	20000716 	.word	0x20000716
 8009228:	20000da0 	.word	0x20000da0
 800922c:	2000001c 	.word	0x2000001c
 8009230:	200002d0 	.word	0x200002d0
 8009234:	200065d0 	.word	0x200065d0
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009238:	f005 f88a 	bl	800e350 <FreeRTOS_CLIGetOutputBuffer>
 800923c:	0006      	movs	r6, r0
							if (dst == BOS_BROADCAST)
 800923e:	464b      	mov	r3, r9
 8009240:	2bff      	cmp	r3, #255	; 0xff
 8009242:	d025      	beq.n	8009290 <PxMessagingTask+0x768>
							else if (dst == BOS_MULTICAST)
 8009244:	2bfe      	cmp	r3, #254	; 0xfe
 8009246:	d02d      	beq.n	80092a4 <PxMessagingTask+0x77c>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 8009248:	00ea      	lsls	r2, r5, #3
 800924a:	1b52      	subs	r2, r2, r5
 800924c:	00d3      	lsls	r3, r2, #3
 800924e:	191c      	adds	r4, r3, r4
 8009250:	49e3      	ldr	r1, [pc, #908]	; (80095e0 <PxMessagingTask+0xab8>)
 8009252:	1861      	adds	r1, r4, r1
 8009254:	003a      	movs	r2, r7
 8009256:	48e3      	ldr	r0, [pc, #908]	; (80095e4 <PxMessagingTask+0xabc>)
 8009258:	f00a f8bb 	bl	80133d2 <memcpy>
								temp = PcPort; PcPort = port;
 800925c:	4fe2      	ldr	r7, [pc, #904]	; (80095e8 <PxMessagingTask+0xac0>)
 800925e:	783c      	ldrb	r4, [r7, #0]
 8009260:	9b07      	ldr	r3, [sp, #28]
 8009262:	703b      	strb	r3, [r7, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8009264:	2299      	movs	r2, #153	; 0x99
 8009266:	0092      	lsls	r2, r2, #2
 8009268:	0031      	movs	r1, r6
 800926a:	48de      	ldr	r0, [pc, #888]	; (80095e4 <PxMessagingTask+0xabc>)
 800926c:	f005 f80a 	bl	800e284 <FreeRTOS_CLIProcessCommand>
 8009270:	4681      	mov	r9, r0
								PcPort = temp;
 8009272:	703c      	strb	r4, [r7, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 8009274:	4bdd      	ldr	r3, [pc, #884]	; (80095ec <PxMessagingTask+0xac4>)
 8009276:	799b      	ldrb	r3, [r3, #6]
 8009278:	2b60      	cmp	r3, #96	; 0x60
 800927a:	d01f      	beq.n	80092bc <PxMessagingTask+0x794>
							while( xReturned != pdFALSE );								
 800927c:	464b      	mov	r3, r9
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1ec      	bne.n	800925c <PxMessagingTask+0x734>
 8009282:	46a2      	mov	sl, r4
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 8009284:	2232      	movs	r2, #50	; 0x32
 8009286:	2100      	movs	r1, #0
 8009288:	48d6      	ldr	r0, [pc, #856]	; (80095e4 <PxMessagingTask+0xabc>)
 800928a:	f00a f8ab 	bl	80133e4 <memset>
							break;
 800928e:	e498      	b.n	8008bc2 <PxMessagingTask+0x9a>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 8009290:	2138      	movs	r1, #56	; 0x38
 8009292:	4369      	muls	r1, r5
 8009294:	190c      	adds	r4, r1, r4
 8009296:	49d2      	ldr	r1, [pc, #840]	; (80095e0 <PxMessagingTask+0xab8>)
 8009298:	1861      	adds	r1, r4, r1
 800929a:	1e7a      	subs	r2, r7, #1
 800929c:	48d1      	ldr	r0, [pc, #836]	; (80095e4 <PxMessagingTask+0xabc>)
 800929e:	f00a f898 	bl	80133d2 <memcpy>
 80092a2:	e7db      	b.n	800925c <PxMessagingTask+0x734>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 80092a4:	2138      	movs	r1, #56	; 0x38
 80092a6:	4369      	muls	r1, r5
 80092a8:	190c      	adds	r4, r1, r4
 80092aa:	49cd      	ldr	r1, [pc, #820]	; (80095e0 <PxMessagingTask+0xab8>)
 80092ac:	1861      	adds	r1, r4, r1
 80092ae:	4653      	mov	r3, sl
 80092b0:	1afa      	subs	r2, r7, r3
 80092b2:	3a02      	subs	r2, #2
 80092b4:	48cb      	ldr	r0, [pc, #812]	; (80095e4 <PxMessagingTask+0xabc>)
 80092b6:	f00a f88c 	bl	80133d2 <memcpy>
 80092ba:	e7cf      	b.n	800925c <PxMessagingTask+0x734>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 80092bc:	0030      	movs	r0, r6
 80092be:	f7f6 ff2b 	bl	8000118 <strlen>
 80092c2:	0002      	movs	r2, r0
 80092c4:	0031      	movs	r1, r6
 80092c6:	48ca      	ldr	r0, [pc, #808]	; (80095f0 <PxMessagingTask+0xac8>)
 80092c8:	f00a f883 	bl	80133d2 <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 80092cc:	0030      	movs	r0, r6
 80092ce:	f7f6 ff23 	bl	8000118 <strlen>
 80092d2:	b282      	uxth	r2, r0
 80092d4:	2118      	movs	r1, #24
 80092d6:	9805      	ldr	r0, [sp, #20]
 80092d8:	f7ff f988 	bl	80085ec <SendMessageToModule>
									osDelay(10); 
 80092dc:	200a      	movs	r0, #10
 80092de:	f004 ff15 	bl	800e10c <osDelay>
 80092e2:	e7cb      	b.n	800927c <PxMessagingTask+0x754>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80092e4:	f005 f834 	bl	800e350 <FreeRTOS_CLIGetOutputBuffer>
 80092e8:	0006      	movs	r6, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80092ea:	f7f6 ff15 	bl	8000118 <strlen>
 80092ee:	0002      	movs	r2, r0
 80092f0:	2100      	movs	r1, #0
 80092f2:	0030      	movs	r0, r6
 80092f4:	f00a f876 	bl	80133e4 <memset>
							if (longMessage) {
 80092f8:	4bbe      	ldr	r3, [pc, #760]	; (80095f4 <PxMessagingTask+0xacc>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d011      	beq.n	8009324 <PxMessagingTask+0x7fc>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009300:	4bbd      	ldr	r3, [pc, #756]	; (80095f8 <PxMessagingTask+0xad0>)
 8009302:	4699      	mov	r9, r3
 8009304:	8818      	ldrh	r0, [r3, #0]
 8009306:	1830      	adds	r0, r6, r0
 8009308:	2138      	movs	r1, #56	; 0x38
 800930a:	4369      	muls	r1, r5
 800930c:	190c      	adds	r4, r1, r4
 800930e:	49b4      	ldr	r1, [pc, #720]	; (80095e0 <PxMessagingTask+0xab8>)
 8009310:	1861      	adds	r1, r4, r1
 8009312:	003a      	movs	r2, r7
 8009314:	f00a f85d 	bl	80133d2 <memcpy>
								longMessageLastPtr += numOfParams;
 8009318:	464b      	mov	r3, r9
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	19df      	adds	r7, r3, r7
 800931e:	464b      	mov	r3, r9
 8009320:	801f      	strh	r7, [r3, #0]
 8009322:	e44e      	b.n	8008bc2 <PxMessagingTask+0x9a>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009324:	4bb4      	ldr	r3, [pc, #720]	; (80095f8 <PxMessagingTask+0xad0>)
 8009326:	4699      	mov	r9, r3
 8009328:	8818      	ldrh	r0, [r3, #0]
 800932a:	1830      	adds	r0, r6, r0
 800932c:	2138      	movs	r1, #56	; 0x38
 800932e:	4369      	muls	r1, r5
 8009330:	190c      	adds	r4, r1, r4
 8009332:	49ab      	ldr	r1, [pc, #684]	; (80095e0 <PxMessagingTask+0xab8>)
 8009334:	1861      	adds	r1, r4, r1
 8009336:	003a      	movs	r2, r7
 8009338:	f00a f84b 	bl	80133d2 <memcpy>
								longMessageLastPtr = 0;
 800933c:	2100      	movs	r1, #0
 800933e:	464b      	mov	r3, r9
 8009340:	8019      	strh	r1, [r3, #0]
								responseStatus = BOS_OK;
 8009342:	4bae      	ldr	r3, [pc, #696]	; (80095fc <PxMessagingTask+0xad4>)
 8009344:	7019      	strb	r1, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 8009346:	000b      	movs	r3, r1
 8009348:	000a      	movs	r2, r1
 800934a:	48ad      	ldr	r0, [pc, #692]	; (8009600 <PxMessagingTask+0xad8>)
 800934c:	6800      	ldr	r0, [r0, #0]
 800934e:	f006 fb1f 	bl	800f990 <xTaskGenericNotify>
 8009352:	e436      	b.n	8008bc2 <PxMessagingTask+0x9a>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8009354:	4bab      	ldr	r3, [pc, #684]	; (8009604 <PxMessagingTask+0xadc>)
 8009356:	4aac      	ldr	r2, [pc, #688]	; (8009608 <PxMessagingTask+0xae0>)
 8009358:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 800935a:	4bac      	ldr	r3, [pc, #688]	; (800960c <PxMessagingTask+0xae4>)
 800935c:	2201      	movs	r2, #1
 800935e:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 8009360:	200a      	movs	r0, #10
 8009362:	f004 fed3 	bl	800e10c <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	4ba9      	ldr	r3, [pc, #676]	; (8009610 <PxMessagingTask+0xae8>)
 800936c:	4aa9      	ldr	r2, [pc, #676]	; (8009614 <PxMessagingTask+0xaec>)
 800936e:	60da      	str	r2, [r3, #12]
 8009370:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009374:	46c0      	nop			; (mov r8, r8)
 8009376:	e7fd      	b.n	8009374 <PxMessagingTask+0x84c>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 8009378:	00eb      	lsls	r3, r5, #3
 800937a:	1b5b      	subs	r3, r3, r5
 800937c:	00da      	lsls	r2, r3, #3
 800937e:	4e98      	ldr	r6, [pc, #608]	; (80095e0 <PxMessagingTask+0xab8>)
 8009380:	18b6      	adds	r6, r6, r2
 8009382:	5d30      	ldrb	r0, [r6, r4]
 8009384:	2300      	movs	r3, #0
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	3319      	adds	r3, #25
 800938a:	2200      	movs	r2, #0
 800938c:	2100      	movs	r1, #0
 800938e:	f7fe ff1d 	bl	80081cc <SendMessageFromPort>
								osDelay(100);
 8009392:	2064      	movs	r0, #100	; 0x64
 8009394:	f004 feba 	bl	800e10c <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 8009398:	5d33      	ldrb	r3, [r6, r4]
 800939a:	4a9f      	ldr	r2, [pc, #636]	; (8009618 <PxMessagingTask+0xaf0>)
 800939c:	7811      	ldrb	r1, [r2, #0]
 800939e:	9a07      	ldr	r2, [sp, #28]
 80093a0:	9805      	ldr	r0, [sp, #20]
 80093a2:	f7f9 ff33 	bl	800320c <remoteBootloaderUpdate>
								break;
 80093a6:	f7ff fc0c 	bl	8008bc2 <PxMessagingTask+0x9a>
							temp = cMessage[port-1][11+shift];
 80093aa:	9409      	str	r4, [sp, #36]	; 0x24
 80093ac:	230b      	movs	r3, #11
 80093ae:	469c      	mov	ip, r3
 80093b0:	44a4      	add	ip, r4
 80093b2:	4661      	mov	r1, ip
 80093b4:	910b      	str	r1, [sp, #44]	; 0x2c
 80093b6:	00eb      	lsls	r3, r5, #3
 80093b8:	1b5b      	subs	r3, r3, r5
 80093ba:	00da      	lsls	r2, r3, #3
 80093bc:	4b88      	ldr	r3, [pc, #544]	; (80095e0 <PxMessagingTask+0xab8>)
 80093be:	189b      	adds	r3, r3, r2
 80093c0:	5c5b      	ldrb	r3, [r3, r1]
 80093c2:	469a      	mov	sl, r3
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 80093c4:	2f0f      	cmp	r7, #15
 80093c6:	d100      	bne.n	80093ca <PxMessagingTask+0x8a2>
 80093c8:	e08a      	b.n	80094e0 <PxMessagingTask+0x9b8>
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 80093ca:	2f11      	cmp	r7, #17
 80093cc:	d100      	bne.n	80093d0 <PxMessagingTask+0x8a8>
 80093ce:	e090      	b.n	80094f2 <PxMessagingTask+0x9ca>
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 80093d0:	00ea      	lsls	r2, r5, #3
 80093d2:	1b52      	subs	r2, r2, r5
 80093d4:	00d3      	lsls	r3, r2, #3
 80093d6:	4a82      	ldr	r2, [pc, #520]	; (80095e0 <PxMessagingTask+0xab8>)
 80093d8:	18d3      	adds	r3, r2, r3
 80093da:	5d1a      	ldrb	r2, [r3, r4]
 80093dc:	0612      	lsls	r2, r2, #24
 80093de:	1c61      	adds	r1, r4, #1
 80093e0:	910c      	str	r1, [sp, #48]	; 0x30
 80093e2:	5c59      	ldrb	r1, [r3, r1]
 80093e4:	0409      	lsls	r1, r1, #16
 80093e6:	1852      	adds	r2, r2, r1
 80093e8:	1ca1      	adds	r1, r4, #2
 80093ea:	910d      	str	r1, [sp, #52]	; 0x34
 80093ec:	5c59      	ldrb	r1, [r3, r1]
 80093ee:	0209      	lsls	r1, r1, #8
 80093f0:	1852      	adds	r2, r2, r1
 80093f2:	1ce1      	adds	r1, r4, #3
 80093f4:	910e      	str	r1, [sp, #56]	; 0x38
 80093f6:	5c59      	ldrb	r1, [r3, r1]
 80093f8:	1852      	adds	r2, r2, r1
 80093fa:	920a      	str	r2, [sp, #40]	; 0x28
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 80093fc:	1d22      	adds	r2, r4, #4
 80093fe:	920f      	str	r2, [sp, #60]	; 0x3c
 8009400:	5c9e      	ldrb	r6, [r3, r2]
 8009402:	0636      	lsls	r6, r6, #24
 8009404:	1d62      	adds	r2, r4, #5
 8009406:	9210      	str	r2, [sp, #64]	; 0x40
 8009408:	5c9a      	ldrb	r2, [r3, r2]
 800940a:	0412      	lsls	r2, r2, #16
 800940c:	18b6      	adds	r6, r6, r2
 800940e:	1da2      	adds	r2, r4, #6
 8009410:	9211      	str	r2, [sp, #68]	; 0x44
 8009412:	5c9a      	ldrb	r2, [r3, r2]
 8009414:	0212      	lsls	r2, r2, #8
 8009416:	18b2      	adds	r2, r6, r2
 8009418:	1de1      	adds	r1, r4, #7
 800941a:	5c5e      	ldrb	r6, [r3, r1]
 800941c:	1996      	adds	r6, r2, r6
							if (temp == false)
 800941e:	4653      	mov	r3, sl
 8009420:	2b00      	cmp	r3, #0
 8009422:	d16f      	bne.n	8009504 <PxMessagingTask+0x9dc>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 8009424:	00eb      	lsls	r3, r5, #3
 8009426:	1b5b      	subs	r3, r3, r5
 8009428:	00d9      	lsls	r1, r3, #3
 800942a:	4a6d      	ldr	r2, [pc, #436]	; (80095e0 <PxMessagingTask+0xab8>)
 800942c:	1852      	adds	r2, r2, r1
 800942e:	0023      	movs	r3, r4
 8009430:	3309      	adds	r3, #9
 8009432:	5cd3      	ldrb	r3, [r2, r3]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d013      	beq.n	8009460 <PxMessagingTask+0x938>
 8009438:	2238      	movs	r2, #56	; 0x38
 800943a:	436a      	muls	r2, r5
 800943c:	4968      	ldr	r1, [pc, #416]	; (80095e0 <PxMessagingTask+0xab8>)
 800943e:	1889      	adds	r1, r1, r2
 8009440:	0022      	movs	r2, r4
 8009442:	320a      	adds	r2, #10
 8009444:	5c89      	ldrb	r1, [r1, r2]
 8009446:	2900      	cmp	r1, #0
 8009448:	d00a      	beq.n	8009460 <PxMessagingTask+0x938>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 800944a:	3a02      	subs	r2, #2
 800944c:	2738      	movs	r7, #56	; 0x38
 800944e:	436f      	muls	r7, r5
 8009450:	4863      	ldr	r0, [pc, #396]	; (80095e0 <PxMessagingTask+0xab8>)
 8009452:	19c0      	adds	r0, r0, r7
 8009454:	5c80      	ldrb	r0, [r0, r2]
 8009456:	9100      	str	r1, [sp, #0]
 8009458:	0032      	movs	r2, r6
 800945a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800945c:	f7fe fda2 	bl	8007fa4 <SetupDMAStreams>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 8009460:	00eb      	lsls	r3, r5, #3
 8009462:	1b5b      	subs	r3, r3, r5
 8009464:	00da      	lsls	r2, r3, #3
 8009466:	4b5e      	ldr	r3, [pc, #376]	; (80095e0 <PxMessagingTask+0xab8>)
 8009468:	189b      	adds	r3, r3, r2
 800946a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800946c:	5c9b      	ldrb	r3, [r3, r2]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d012      	beq.n	8009498 <PxMessagingTask+0x970>
 8009472:	0022      	movs	r2, r4
 8009474:	320c      	adds	r2, #12
 8009476:	2038      	movs	r0, #56	; 0x38
 8009478:	4368      	muls	r0, r5
 800947a:	4959      	ldr	r1, [pc, #356]	; (80095e0 <PxMessagingTask+0xab8>)
 800947c:	1809      	adds	r1, r1, r0
 800947e:	5c89      	ldrb	r1, [r1, r2]
 8009480:	2900      	cmp	r1, #0
 8009482:	d009      	beq.n	8009498 <PxMessagingTask+0x970>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 8009484:	3a04      	subs	r2, #4
 8009486:	0007      	movs	r7, r0
 8009488:	4855      	ldr	r0, [pc, #340]	; (80095e0 <PxMessagingTask+0xab8>)
 800948a:	19c0      	adds	r0, r0, r7
 800948c:	5c80      	ldrb	r0, [r0, r2]
 800948e:	9100      	str	r1, [sp, #0]
 8009490:	0032      	movs	r2, r6
 8009492:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009494:	f7fe fd86 	bl	8007fa4 <SetupDMAStreams>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 8009498:	00eb      	lsls	r3, r5, #3
 800949a:	1b5b      	subs	r3, r3, r5
 800949c:	00d9      	lsls	r1, r3, #3
 800949e:	4a50      	ldr	r2, [pc, #320]	; (80095e0 <PxMessagingTask+0xab8>)
 80094a0:	1852      	adds	r2, r2, r1
 80094a2:	0023      	movs	r3, r4
 80094a4:	330d      	adds	r3, #13
 80094a6:	5cd3      	ldrb	r3, [r2, r3]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <PxMessagingTask+0x988>
 80094ac:	f7ff fb89 	bl	8008bc2 <PxMessagingTask+0x9a>
 80094b0:	2238      	movs	r2, #56	; 0x38
 80094b2:	436a      	muls	r2, r5
 80094b4:	494a      	ldr	r1, [pc, #296]	; (80095e0 <PxMessagingTask+0xab8>)
 80094b6:	1889      	adds	r1, r1, r2
 80094b8:	0022      	movs	r2, r4
 80094ba:	320e      	adds	r2, #14
 80094bc:	5c89      	ldrb	r1, [r1, r2]
 80094be:	2900      	cmp	r1, #0
 80094c0:	d101      	bne.n	80094c6 <PxMessagingTask+0x99e>
 80094c2:	f7ff fb7e 	bl	8008bc2 <PxMessagingTask+0x9a>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 80094c6:	3408      	adds	r4, #8
 80094c8:	2038      	movs	r0, #56	; 0x38
 80094ca:	4368      	muls	r0, r5
 80094cc:	4a44      	ldr	r2, [pc, #272]	; (80095e0 <PxMessagingTask+0xab8>)
 80094ce:	1812      	adds	r2, r2, r0
 80094d0:	5d10      	ldrb	r0, [r2, r4]
 80094d2:	9100      	str	r1, [sp, #0]
 80094d4:	0032      	movs	r2, r6
 80094d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094d8:	f7fe fd64 	bl	8007fa4 <SetupDMAStreams>
 80094dc:	f7ff fb71 	bl	8008bc2 <PxMessagingTask+0x9a>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 80094e0:	2338      	movs	r3, #56	; 0x38
 80094e2:	436b      	muls	r3, r5
 80094e4:	4a3e      	ldr	r2, [pc, #248]	; (80095e0 <PxMessagingTask+0xab8>)
 80094e6:	18d2      	adds	r2, r2, r3
 80094e8:	0023      	movs	r3, r4
 80094ea:	330d      	adds	r3, #13
 80094ec:	5cd3      	ldrb	r3, [r2, r3]
 80094ee:	469a      	mov	sl, r3
 80094f0:	e76b      	b.n	80093ca <PxMessagingTask+0x8a2>
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 80094f2:	2338      	movs	r3, #56	; 0x38
 80094f4:	436b      	muls	r3, r5
 80094f6:	4a3a      	ldr	r2, [pc, #232]	; (80095e0 <PxMessagingTask+0xab8>)
 80094f8:	18d2      	adds	r2, r2, r3
 80094fa:	0023      	movs	r3, r4
 80094fc:	330f      	adds	r3, #15
 80094fe:	5cd3      	ldrb	r3, [r2, r3]
 8009500:	469a      	mov	sl, r3
 8009502:	e765      	b.n	80093d0 <PxMessagingTask+0x8a8>
 8009504:	000e      	movs	r6, r1
 8009506:	46b9      	mov	r9, r7
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 8009508:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800950a:	003b      	movs	r3, r7
 800950c:	3308      	adds	r3, #8
 800950e:	2238      	movs	r2, #56	; 0x38
 8009510:	436a      	muls	r2, r5
 8009512:	4c33      	ldr	r4, [pc, #204]	; (80095e0 <PxMessagingTask+0xab8>)
 8009514:	18a4      	adds	r4, r4, r2
 8009516:	5ce1      	ldrb	r1, [r4, r3]
 8009518:	20e4      	movs	r0, #228	; 0xe4
 800951a:	f7fd fc35 	bl	8006d88 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 800951e:	5de1      	ldrb	r1, [r4, r7]
 8009520:	0209      	lsls	r1, r1, #8
 8009522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009524:	5ce3      	ldrb	r3, [r4, r3]
 8009526:	18c9      	adds	r1, r1, r3
 8009528:	b289      	uxth	r1, r1
 800952a:	20e5      	movs	r0, #229	; 0xe5
 800952c:	f7fd fc2c 	bl	8006d88 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 8009530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009532:	5ce1      	ldrb	r1, [r4, r3]
 8009534:	0209      	lsls	r1, r1, #8
 8009536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009538:	5ce3      	ldrb	r3, [r4, r3]
 800953a:	18c9      	adds	r1, r1, r3
 800953c:	b289      	uxth	r1, r1
 800953e:	20e6      	movs	r0, #230	; 0xe6
 8009540:	f7fd fc22 	bl	8006d88 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 8009544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009546:	5ce1      	ldrb	r1, [r4, r3]
 8009548:	0209      	lsls	r1, r1, #8
 800954a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800954c:	5ce3      	ldrb	r3, [r4, r3]
 800954e:	18c9      	adds	r1, r1, r3
 8009550:	b289      	uxth	r1, r1
 8009552:	20e7      	movs	r0, #231	; 0xe7
 8009554:	f7fd fc18 	bl	8006d88 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 8009558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800955a:	5ce1      	ldrb	r1, [r4, r3]
 800955c:	0209      	lsls	r1, r1, #8
 800955e:	5da3      	ldrb	r3, [r4, r6]
 8009560:	18c9      	adds	r1, r1, r3
 8009562:	b289      	uxth	r1, r1
 8009564:	20e8      	movs	r0, #232	; 0xe8
 8009566:	f7fd fc0f 	bl	8006d88 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 800956a:	003b      	movs	r3, r7
 800956c:	3309      	adds	r3, #9
 800956e:	5ce1      	ldrb	r1, [r4, r3]
 8009570:	0209      	lsls	r1, r1, #8
 8009572:	3301      	adds	r3, #1
 8009574:	5ce3      	ldrb	r3, [r4, r3]
 8009576:	18c9      	adds	r1, r1, r3
 8009578:	b289      	uxth	r1, r1
 800957a:	20e9      	movs	r0, #233	; 0xe9
 800957c:	f7fd fc04 	bl	8006d88 <EE_WriteVariable>
								if (numOfParams == 19)
 8009580:	464b      	mov	r3, r9
 8009582:	2b13      	cmp	r3, #19
 8009584:	d10e      	bne.n	80095a4 <PxMessagingTask+0xa7c>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 8009586:	2238      	movs	r2, #56	; 0x38
 8009588:	436a      	muls	r2, r5
 800958a:	4b15      	ldr	r3, [pc, #84]	; (80095e0 <PxMessagingTask+0xab8>)
 800958c:	189b      	adds	r3, r3, r2
 800958e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009590:	5c99      	ldrb	r1, [r3, r2]
 8009592:	0209      	lsls	r1, r1, #8
 8009594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009596:	320c      	adds	r2, #12
 8009598:	5c9b      	ldrb	r3, [r3, r2]
 800959a:	18c9      	adds	r1, r1, r3
 800959c:	b289      	uxth	r1, r1
 800959e:	20ea      	movs	r0, #234	; 0xea
 80095a0:	f7fd fbf2 	bl	8006d88 <EE_WriteVariable>
								if (numOfParams == 21)
 80095a4:	464b      	mov	r3, r9
 80095a6:	2b15      	cmp	r3, #21
 80095a8:	d110      	bne.n	80095cc <PxMessagingTask+0xaa4>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 80095aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095ac:	0001      	movs	r1, r0
 80095ae:	310d      	adds	r1, #13
 80095b0:	3323      	adds	r3, #35	; 0x23
 80095b2:	436b      	muls	r3, r5
 80095b4:	4a0a      	ldr	r2, [pc, #40]	; (80095e0 <PxMessagingTask+0xab8>)
 80095b6:	18d2      	adds	r2, r2, r3
 80095b8:	5c51      	ldrb	r1, [r2, r1]
 80095ba:	0209      	lsls	r1, r1, #8
 80095bc:	0003      	movs	r3, r0
 80095be:	330e      	adds	r3, #14
 80095c0:	5cd3      	ldrb	r3, [r2, r3]
 80095c2:	18c9      	adds	r1, r1, r3
 80095c4:	b289      	uxth	r1, r1
 80095c6:	20eb      	movs	r0, #235	; 0xeb
 80095c8:	f7fd fbde 	bl	8006d88 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <PxMessagingTask+0xae8>)
 80095d2:	4a10      	ldr	r2, [pc, #64]	; (8009614 <PxMessagingTask+0xaec>)
 80095d4:	60da      	str	r2, [r3, #12]
 80095d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	e7fd      	b.n	80095da <PxMessagingTask+0xab2>
 80095de:	46c0      	nop			; (mov r8, r8)
 80095e0:	20000560 	.word	0x20000560
 80095e4:	20000d6c 	.word	0x20000d6c
 80095e8:	200002cf 	.word	0x200002cf
 80095ec:	20006148 	.word	0x20006148
 80095f0:	20000758 	.word	0x20000758
 80095f4:	20000715 	.word	0x20000715
 80095f8:	20000716 	.word	0x20000716
 80095fc:	20000928 	.word	0x20000928
 8009600:	20000ccc 	.word	0x20000ccc
 8009604:	20007ff0 	.word	0x20007ff0
 8009608:	deadbeef 	.word	0xdeadbeef
 800960c:	20000714 	.word	0x20000714
 8009610:	e000ed00 	.word	0xe000ed00
 8009614:	05fa0004 	.word	0x05fa0004
 8009618:	20000896 	.word	0x20000896
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800961c:	00eb      	lsls	r3, r5, #3
 800961e:	1b5b      	subs	r3, r3, r5
 8009620:	00da      	lsls	r2, r3, #3
 8009622:	4eea      	ldr	r6, [pc, #936]	; (80099cc <PxMessagingTask+0xea4>)
 8009624:	18b6      	adds	r6, r6, r2
 8009626:	5d33      	ldrb	r3, [r6, r4]
 8009628:	061b      	lsls	r3, r3, #24
 800962a:	1c62      	adds	r2, r4, #1
 800962c:	5cb2      	ldrb	r2, [r6, r2]
 800962e:	0412      	lsls	r2, r2, #16
 8009630:	189b      	adds	r3, r3, r2
 8009632:	1ca2      	adds	r2, r4, #2
 8009634:	5cb2      	ldrb	r2, [r6, r2]
 8009636:	0212      	lsls	r2, r2, #8
 8009638:	189b      	adds	r3, r3, r2
 800963a:	1ce2      	adds	r2, r4, #3
 800963c:	5cb2      	ldrb	r2, [r6, r2]
 800963e:	4699      	mov	r9, r3
 8009640:	4491      	add	r9, r2
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 8009642:	1d23      	adds	r3, r4, #4
 8009644:	5cf2      	ldrb	r2, [r6, r3]
 8009646:	0612      	lsls	r2, r2, #24
 8009648:	1d63      	adds	r3, r4, #5
 800964a:	5cf3      	ldrb	r3, [r6, r3]
 800964c:	041b      	lsls	r3, r3, #16
 800964e:	18d3      	adds	r3, r2, r3
 8009650:	1da2      	adds	r2, r4, #6
 8009652:	5cb2      	ldrb	r2, [r6, r2]
 8009654:	0212      	lsls	r2, r2, #8
 8009656:	189b      	adds	r3, r3, r2
 8009658:	1de2      	adds	r2, r4, #7
 800965a:	5cb2      	ldrb	r2, [r6, r2]
 800965c:	469c      	mov	ip, r3
 800965e:	4494      	add	ip, r2
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8009660:	0020      	movs	r0, r4
 8009662:	3009      	adds	r0, #9
 8009664:	0022      	movs	r2, r4
 8009666:	320b      	adds	r2, #11
 8009668:	0023      	movs	r3, r4
 800966a:	330a      	adds	r3, #10
 800966c:	0027      	movs	r7, r4
 800966e:	3708      	adds	r7, #8
 8009670:	340c      	adds	r4, #12
 8009672:	5d34      	ldrb	r4, [r6, r4]
 8009674:	5cf3      	ldrb	r3, [r6, r3]
 8009676:	9309      	str	r3, [sp, #36]	; 0x24
 8009678:	5cb2      	ldrb	r2, [r6, r2]
 800967a:	49d5      	ldr	r1, [pc, #852]	; (80099d0 <PxMessagingTask+0xea8>)
 800967c:	7809      	ldrb	r1, [r1, #0]
 800967e:	5c30      	ldrb	r0, [r6, r0]
 8009680:	1e63      	subs	r3, r4, #1
 8009682:	419c      	sbcs	r4, r3
 8009684:	9403      	str	r4, [sp, #12]
 8009686:	4664      	mov	r4, ip
 8009688:	9402      	str	r4, [sp, #8]
 800968a:	464c      	mov	r4, r9
 800968c:	9401      	str	r4, [sp, #4]
 800968e:	5df4      	ldrb	r4, [r6, r7]
 8009690:	9400      	str	r4, [sp, #0]
 8009692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009694:	f7fe ffd0 	bl	8008638 <StartScastDMAStream>
							break;								
 8009698:	f7ff fa93 	bl	8008bc2 <PxMessagingTask+0x9a>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 800969c:	00ea      	lsls	r2, r5, #3
 800969e:	1b52      	subs	r2, r2, r5
 80096a0:	00d1      	lsls	r1, r2, #3
 80096a2:	4aca      	ldr	r2, [pc, #808]	; (80099cc <PxMessagingTask+0xea4>)
 80096a4:	1852      	adds	r2, r2, r1
 80096a6:	5d12      	ldrb	r2, [r2, r4]
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	d000      	beq.n	80096ae <PxMessagingTask+0xb86>
 80096ac:	e083      	b.n	80097b6 <PxMessagingTask+0xc8e>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 80096ae:	1ca1      	adds	r1, r4, #2
 80096b0:	2338      	movs	r3, #56	; 0x38
 80096b2:	436b      	muls	r3, r5
 80096b4:	4ac5      	ldr	r2, [pc, #788]	; (80099cc <PxMessagingTask+0xea4>)
 80096b6:	18d2      	adds	r2, r2, r3
 80096b8:	5c53      	ldrb	r3, [r2, r1]
 80096ba:	061b      	lsls	r3, r3, #24
 80096bc:	1ce1      	adds	r1, r4, #3
 80096be:	5c51      	ldrb	r1, [r2, r1]
 80096c0:	0409      	lsls	r1, r1, #16
 80096c2:	185b      	adds	r3, r3, r1
 80096c4:	1d21      	adds	r1, r4, #4
 80096c6:	5c51      	ldrb	r1, [r2, r1]
 80096c8:	0209      	lsls	r1, r1, #8
 80096ca:	185b      	adds	r3, r3, r1
 80096cc:	1d61      	adds	r1, r4, #5
 80096ce:	5c51      	ldrb	r1, [r2, r1]
 80096d0:	185b      	adds	r3, r3, r1
									switch (cMessage[port-1][1+shift])											// requested format
 80096d2:	3401      	adds	r4, #1
 80096d4:	5d12      	ldrb	r2, [r2, r4]
 80096d6:	3a01      	subs	r2, #1
 80096d8:	b2d1      	uxtb	r1, r2
 80096da:	2907      	cmp	r1, #7
 80096dc:	d901      	bls.n	80096e2 <PxMessagingTask+0xbba>
 80096de:	f7ff fa70 	bl	8008bc2 <PxMessagingTask+0x9a>
 80096e2:	b2d2      	uxtb	r2, r2
 80096e4:	0092      	lsls	r2, r2, #2
 80096e6:	49bb      	ldr	r1, [pc, #748]	; (80099d4 <PxMessagingTask+0xeac>)
 80096e8:	588a      	ldr	r2, [r1, r2]
 80096ea:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 80096ec:	781a      	ldrb	r2, [r3, #0]
 80096ee:	4bba      	ldr	r3, [pc, #744]	; (80099d8 <PxMessagingTask+0xeb0>)
 80096f0:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 80096f2:	2201      	movs	r2, #1
 80096f4:	211f      	movs	r1, #31
 80096f6:	9805      	ldr	r0, [sp, #20]
 80096f8:	f7fe ff78 	bl	80085ec <SendMessageToModule>
 80096fc:	f7ff fa61 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[0] = *(__IO int8_t *)temp32; 
 8009700:	781a      	ldrb	r2, [r3, #0]
 8009702:	4bb5      	ldr	r3, [pc, #724]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009704:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 8009706:	2201      	movs	r2, #1
 8009708:	211f      	movs	r1, #31
 800970a:	9805      	ldr	r0, [sp, #20]
 800970c:	f7fe ff6e 	bl	80085ec <SendMessageToModule>
 8009710:	f7ff fa57 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 8009714:	8819      	ldrh	r1, [r3, #0]
 8009716:	4ab0      	ldr	r2, [pc, #704]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009718:	7011      	strb	r1, [r2, #0]
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	0a1b      	lsrs	r3, r3, #8
 800971e:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009720:	2202      	movs	r2, #2
 8009722:	211f      	movs	r1, #31
 8009724:	9805      	ldr	r0, [sp, #20]
 8009726:	f7fe ff61 	bl	80085ec <SendMessageToModule>
 800972a:	f7ff fa4a 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800972e:	8819      	ldrh	r1, [r3, #0]
 8009730:	4aa9      	ldr	r2, [pc, #676]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009732:	7011      	strb	r1, [r2, #0]
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	b21b      	sxth	r3, r3
 8009738:	121b      	asrs	r3, r3, #8
 800973a:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800973c:	2202      	movs	r2, #2
 800973e:	211f      	movs	r1, #31
 8009740:	9805      	ldr	r0, [sp, #20]
 8009742:	f7fe ff53 	bl	80085ec <SendMessageToModule>
 8009746:	f7ff fa3c 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800974a:	6819      	ldr	r1, [r3, #0]
 800974c:	4aa2      	ldr	r2, [pc, #648]	; (80099d8 <PxMessagingTask+0xeb0>)
 800974e:	7011      	strb	r1, [r2, #0]
 8009750:	6819      	ldr	r1, [r3, #0]
 8009752:	0a09      	lsrs	r1, r1, #8
 8009754:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8009756:	6819      	ldr	r1, [r3, #0]
 8009758:	0c09      	lsrs	r1, r1, #16
 800975a:	7091      	strb	r1, [r2, #2]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	0e1b      	lsrs	r3, r3, #24
 8009760:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 8009762:	2204      	movs	r2, #4
 8009764:	211f      	movs	r1, #31
 8009766:	9805      	ldr	r0, [sp, #20]
 8009768:	f7fe ff40 	bl	80085ec <SendMessageToModule>
 800976c:	f7ff fa29 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8009770:	6819      	ldr	r1, [r3, #0]
 8009772:	4a99      	ldr	r2, [pc, #612]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009774:	7011      	strb	r1, [r2, #0]
 8009776:	6819      	ldr	r1, [r3, #0]
 8009778:	1209      	asrs	r1, r1, #8
 800977a:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800977c:	6819      	ldr	r1, [r3, #0]
 800977e:	1409      	asrs	r1, r1, #16
 8009780:	7091      	strb	r1, [r2, #2]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	0e1b      	lsrs	r3, r3, #24
 8009786:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 8009788:	2204      	movs	r2, #4
 800978a:	211f      	movs	r1, #31
 800978c:	9805      	ldr	r0, [sp, #20]
 800978e:	f7fe ff2d 	bl	80085ec <SendMessageToModule>
 8009792:	f7ff fa16 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 8009796:	7819      	ldrb	r1, [r3, #0]
 8009798:	4a8f      	ldr	r2, [pc, #572]	; (80099d8 <PxMessagingTask+0xeb0>)
 800979a:	7011      	strb	r1, [r2, #0]
 800979c:	7859      	ldrb	r1, [r3, #1]
 800979e:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 80097a0:	7899      	ldrb	r1, [r3, #2]
 80097a2:	7091      	strb	r1, [r2, #2]
 80097a4:	78db      	ldrb	r3, [r3, #3]
 80097a6:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 80097a8:	2208      	movs	r2, #8
 80097aa:	211f      	movs	r1, #31
 80097ac:	9805      	ldr	r0, [sp, #20]
 80097ae:	f7fe ff1d 	bl	80085ec <SendMessageToModule>
 80097b2:	f7ff fa06 	bl	8008bc2 <PxMessagingTask+0x9a>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 80097b6:	2a02      	cmp	r2, #2
 80097b8:	d000      	beq.n	80097bc <PxMessagingTask+0xc94>
 80097ba:	e08e      	b.n	80098da <PxMessagingTask+0xdb2>
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 80097bc:	3b01      	subs	r3, #1
 80097be:	4883      	ldr	r0, [pc, #524]	; (80099cc <PxMessagingTask+0xea4>)
 80097c0:	3236      	adds	r2, #54	; 0x36
 80097c2:	436a      	muls	r2, r5
 80097c4:	1881      	adds	r1, r0, r2
 80097c6:	2600      	movs	r6, #0
 80097c8:	54ce      	strb	r6, [r1, r3]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 80097ca:	3401      	adds	r4, #1
 80097cc:	1912      	adds	r2, r2, r4
 80097ce:	1810      	adds	r0, r2, r0
 80097d0:	f7f9 fb58 	bl	8002e84 <IsModuleParameter>
 80097d4:	4682      	mov	sl, r0
									if (temp == 0) {																					// Parameter does not exist
 80097d6:	42b0      	cmp	r0, r6
 80097d8:	d106      	bne.n	80097e8 <PxMessagingTask+0xcc0>
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 80097da:	2201      	movs	r2, #1
 80097dc:	211f      	movs	r1, #31
 80097de:	9805      	ldr	r0, [sp, #20]
 80097e0:	f7fe ff04 	bl	80085ec <SendMessageToModule>
 80097e4:	f7ff f9ed 	bl	8008bc2 <PxMessagingTask+0x9a>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 80097e8:	3801      	subs	r0, #1
 80097ea:	4a7c      	ldr	r2, [pc, #496]	; (80099dc <PxMessagingTask+0xeb4>)
 80097ec:	210c      	movs	r1, #12
 80097ee:	4341      	muls	r1, r0
 80097f0:	588b      	ldr	r3, [r1, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 80097f2:	1852      	adds	r2, r2, r1
 80097f4:	7912      	ldrb	r2, [r2, #4]
 80097f6:	4978      	ldr	r1, [pc, #480]	; (80099d8 <PxMessagingTask+0xeb0>)
 80097f8:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 80097fa:	3a01      	subs	r2, #1
 80097fc:	b2d1      	uxtb	r1, r2
 80097fe:	2907      	cmp	r1, #7
 8009800:	d901      	bls.n	8009806 <PxMessagingTask+0xcde>
 8009802:	f7ff f9de 	bl	8008bc2 <PxMessagingTask+0x9a>
 8009806:	b2d2      	uxtb	r2, r2
 8009808:	0092      	lsls	r2, r2, #2
 800980a:	4975      	ldr	r1, [pc, #468]	; (80099e0 <PxMessagingTask+0xeb8>)
 800980c:	588a      	ldr	r2, [r1, r2]
 800980e:	4697      	mov	pc, r2
											messageParams[1] = *(__IO uint8_t *)temp32; 
 8009810:	781a      	ldrb	r2, [r3, #0]
 8009812:	4b71      	ldr	r3, [pc, #452]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009814:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009816:	2202      	movs	r2, #2
 8009818:	211f      	movs	r1, #31
 800981a:	9805      	ldr	r0, [sp, #20]
 800981c:	f7fe fee6 	bl	80085ec <SendMessageToModule>
 8009820:	f7ff f9cf 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[1] = *(__IO int8_t *)temp32; 
 8009824:	781a      	ldrb	r2, [r3, #0]
 8009826:	4b6c      	ldr	r3, [pc, #432]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009828:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800982a:	2202      	movs	r2, #2
 800982c:	211f      	movs	r1, #31
 800982e:	9805      	ldr	r0, [sp, #20]
 8009830:	f7fe fedc 	bl	80085ec <SendMessageToModule>
 8009834:	f7ff f9c5 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8009838:	8819      	ldrh	r1, [r3, #0]
 800983a:	4a67      	ldr	r2, [pc, #412]	; (80099d8 <PxMessagingTask+0xeb0>)
 800983c:	7051      	strb	r1, [r2, #1]
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	0a1b      	lsrs	r3, r3, #8
 8009842:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009844:	2203      	movs	r2, #3
 8009846:	211f      	movs	r1, #31
 8009848:	9805      	ldr	r0, [sp, #20]
 800984a:	f7fe fecf 	bl	80085ec <SendMessageToModule>
 800984e:	f7ff f9b8 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8009852:	8819      	ldrh	r1, [r3, #0]
 8009854:	4a60      	ldr	r2, [pc, #384]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009856:	7051      	strb	r1, [r2, #1]
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	b21b      	sxth	r3, r3
 800985c:	121b      	asrs	r3, r3, #8
 800985e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009860:	2203      	movs	r2, #3
 8009862:	211f      	movs	r1, #31
 8009864:	9805      	ldr	r0, [sp, #20]
 8009866:	f7fe fec1 	bl	80085ec <SendMessageToModule>
 800986a:	f7ff f9aa 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800986e:	6819      	ldr	r1, [r3, #0]
 8009870:	4a59      	ldr	r2, [pc, #356]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009872:	7051      	strb	r1, [r2, #1]
 8009874:	6819      	ldr	r1, [r3, #0]
 8009876:	0a09      	lsrs	r1, r1, #8
 8009878:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800987a:	6819      	ldr	r1, [r3, #0]
 800987c:	0c09      	lsrs	r1, r1, #16
 800987e:	70d1      	strb	r1, [r2, #3]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	0e1b      	lsrs	r3, r3, #24
 8009884:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8009886:	2205      	movs	r2, #5
 8009888:	211f      	movs	r1, #31
 800988a:	9805      	ldr	r0, [sp, #20]
 800988c:	f7fe feae 	bl	80085ec <SendMessageToModule>
 8009890:	f7ff f997 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8009894:	6819      	ldr	r1, [r3, #0]
 8009896:	4a50      	ldr	r2, [pc, #320]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009898:	7051      	strb	r1, [r2, #1]
 800989a:	6819      	ldr	r1, [r3, #0]
 800989c:	1209      	asrs	r1, r1, #8
 800989e:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 80098a0:	6819      	ldr	r1, [r3, #0]
 80098a2:	1409      	asrs	r1, r1, #16
 80098a4:	70d1      	strb	r1, [r2, #3]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	0e1b      	lsrs	r3, r3, #24
 80098aa:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 80098ac:	2205      	movs	r2, #5
 80098ae:	211f      	movs	r1, #31
 80098b0:	9805      	ldr	r0, [sp, #20]
 80098b2:	f7fe fe9b 	bl	80085ec <SendMessageToModule>
 80098b6:	f7ff f984 	bl	8008bc2 <PxMessagingTask+0x9a>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 80098ba:	7819      	ldrb	r1, [r3, #0]
 80098bc:	4a46      	ldr	r2, [pc, #280]	; (80099d8 <PxMessagingTask+0xeb0>)
 80098be:	7051      	strb	r1, [r2, #1]
 80098c0:	7859      	ldrb	r1, [r3, #1]
 80098c2:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 80098c4:	7899      	ldrb	r1, [r3, #2]
 80098c6:	70d1      	strb	r1, [r2, #3]
 80098c8:	78db      	ldrb	r3, [r3, #3]
 80098ca:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 80098cc:	2209      	movs	r2, #9
 80098ce:	211f      	movs	r1, #31
 80098d0:	9805      	ldr	r0, [sp, #20]
 80098d2:	f7fe fe8b 	bl	80085ec <SendMessageToModule>
 80098d6:	f7ff f974 	bl	8008bc2 <PxMessagingTask+0x9a>
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 80098da:	2a02      	cmp	r2, #2
 80098dc:	d801      	bhi.n	80098e2 <PxMessagingTask+0xdba>
 80098de:	f7ff f970 	bl	8008bc2 <PxMessagingTask+0x9a>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 80098e2:	3a04      	subs	r2, #4
 80098e4:	0092      	lsls	r2, r2, #2
 80098e6:	4b3f      	ldr	r3, [pc, #252]	; (80099e4 <PxMessagingTask+0xebc>)
 80098e8:	58d1      	ldr	r1, [r2, r3]
 80098ea:	220f      	movs	r2, #15
 80098ec:	400a      	ands	r2, r1
 80098ee:	4b3a      	ldr	r3, [pc, #232]	; (80099d8 <PxMessagingTask+0xeb0>)
 80098f0:	701a      	strb	r2, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 80098f2:	d106      	bne.n	8009902 <PxMessagingTask+0xdda>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 80098f4:	3201      	adds	r2, #1
 80098f6:	211f      	movs	r1, #31
 80098f8:	9805      	ldr	r0, [sp, #20]
 80098fa:	f7fe fe77 	bl	80085ec <SendMessageToModule>
 80098fe:	f7ff f960 	bl	8008bc2 <PxMessagingTask+0x9a>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 8009902:	0c09      	lsrs	r1, r1, #16
 8009904:	2380      	movs	r3, #128	; 0x80
 8009906:	059b      	lsls	r3, r3, #22
 8009908:	18cb      	adds	r3, r1, r3
										switch (messageParams[0])											// requested format
 800990a:	3a01      	subs	r2, #1
 800990c:	b2d0      	uxtb	r0, r2
 800990e:	2807      	cmp	r0, #7
 8009910:	d901      	bls.n	8009916 <PxMessagingTask+0xdee>
 8009912:	f7ff f956 	bl	8008bc2 <PxMessagingTask+0x9a>
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	0092      	lsls	r2, r2, #2
 800991a:	4833      	ldr	r0, [pc, #204]	; (80099e8 <PxMessagingTask+0xec0>)
 800991c:	5882      	ldr	r2, [r0, r2]
 800991e:	4697      	mov	pc, r2
												messageParams[1] = *(__IO uint8_t *)temp32; 
 8009920:	781a      	ldrb	r2, [r3, #0]
 8009922:	4b2d      	ldr	r3, [pc, #180]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009924:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009926:	2202      	movs	r2, #2
 8009928:	211f      	movs	r1, #31
 800992a:	9805      	ldr	r0, [sp, #20]
 800992c:	f7fe fe5e 	bl	80085ec <SendMessageToModule>
 8009930:	f7ff f947 	bl	8008bc2 <PxMessagingTask+0x9a>
												messageParams[1] = *(__IO int8_t *)temp32; 
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	4b28      	ldr	r3, [pc, #160]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009938:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800993a:	2202      	movs	r2, #2
 800993c:	211f      	movs	r1, #31
 800993e:	9805      	ldr	r0, [sp, #20]
 8009940:	f7fe fe54 	bl	80085ec <SendMessageToModule>
 8009944:	f7ff f93d 	bl	8008bc2 <PxMessagingTask+0x9a>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8009948:	8819      	ldrh	r1, [r3, #0]
 800994a:	4a23      	ldr	r2, [pc, #140]	; (80099d8 <PxMessagingTask+0xeb0>)
 800994c:	7051      	strb	r1, [r2, #1]
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	0a1b      	lsrs	r3, r3, #8
 8009952:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009954:	2203      	movs	r2, #3
 8009956:	211f      	movs	r1, #31
 8009958:	9805      	ldr	r0, [sp, #20]
 800995a:	f7fe fe47 	bl	80085ec <SendMessageToModule>
 800995e:	f7ff f930 	bl	8008bc2 <PxMessagingTask+0x9a>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8009962:	8819      	ldrh	r1, [r3, #0]
 8009964:	4a1c      	ldr	r2, [pc, #112]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009966:	7051      	strb	r1, [r2, #1]
 8009968:	881b      	ldrh	r3, [r3, #0]
 800996a:	b21b      	sxth	r3, r3
 800996c:	121b      	asrs	r3, r3, #8
 800996e:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009970:	2203      	movs	r2, #3
 8009972:	211f      	movs	r1, #31
 8009974:	9805      	ldr	r0, [sp, #20]
 8009976:	f7fe fe39 	bl	80085ec <SendMessageToModule>
 800997a:	f7ff f922 	bl	8008bc2 <PxMessagingTask+0x9a>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800997e:	6819      	ldr	r1, [r3, #0]
 8009980:	4a15      	ldr	r2, [pc, #84]	; (80099d8 <PxMessagingTask+0xeb0>)
 8009982:	7051      	strb	r1, [r2, #1]
 8009984:	6819      	ldr	r1, [r3, #0]
 8009986:	0a09      	lsrs	r1, r1, #8
 8009988:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800998a:	6819      	ldr	r1, [r3, #0]
 800998c:	0c09      	lsrs	r1, r1, #16
 800998e:	70d1      	strb	r1, [r2, #3]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	0e1b      	lsrs	r3, r3, #24
 8009994:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8009996:	2205      	movs	r2, #5
 8009998:	211f      	movs	r1, #31
 800999a:	9805      	ldr	r0, [sp, #20]
 800999c:	f7fe fe26 	bl	80085ec <SendMessageToModule>
 80099a0:	f7ff f90f 	bl	8008bc2 <PxMessagingTask+0x9a>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 80099a4:	6819      	ldr	r1, [r3, #0]
 80099a6:	4a0c      	ldr	r2, [pc, #48]	; (80099d8 <PxMessagingTask+0xeb0>)
 80099a8:	7051      	strb	r1, [r2, #1]
 80099aa:	6819      	ldr	r1, [r3, #0]
 80099ac:	1209      	asrs	r1, r1, #8
 80099ae:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 80099b0:	6819      	ldr	r1, [r3, #0]
 80099b2:	1409      	asrs	r1, r1, #16
 80099b4:	70d1      	strb	r1, [r2, #3]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	0e1b      	lsrs	r3, r3, #24
 80099ba:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 80099bc:	2205      	movs	r2, #5
 80099be:	211f      	movs	r1, #31
 80099c0:	9805      	ldr	r0, [sp, #20]
 80099c2:	f7fe fe13 	bl	80085ec <SendMessageToModule>
 80099c6:	f7ff f8fc 	bl	8008bc2 <PxMessagingTask+0x9a>
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	20000560 	.word	0x20000560
 80099d0:	20000896 	.word	0x20000896
 80099d4:	08019944 	.word	0x08019944
 80099d8:	20000758 	.word	0x20000758
 80099dc:	20000084 	.word	0x20000084
 80099e0:	08019964 	.word	0x08019964
 80099e4:	200060d0 	.word	0x200060d0
 80099e8:	08019984 	.word	0x08019984
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 80099ec:	781a      	ldrb	r2, [r3, #0]
 80099ee:	4bd7      	ldr	r3, [pc, #860]	; (8009d4c <PxMessagingTask+0x1224>)
 80099f0:	705a      	strb	r2, [r3, #1]
 80099f2:	4ad7      	ldr	r2, [pc, #860]	; (8009d50 <PxMessagingTask+0x1228>)
 80099f4:	188a      	adds	r2, r1, r2
 80099f6:	7812      	ldrb	r2, [r2, #0]
 80099f8:	709a      	strb	r2, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 80099fa:	4ad6      	ldr	r2, [pc, #856]	; (8009d54 <PxMessagingTask+0x122c>)
 80099fc:	188a      	adds	r2, r1, r2
 80099fe:	7812      	ldrb	r2, [r2, #0]
 8009a00:	70da      	strb	r2, [r3, #3]
 8009a02:	4ad5      	ldr	r2, [pc, #852]	; (8009d58 <PxMessagingTask+0x1230>)
 8009a04:	4694      	mov	ip, r2
 8009a06:	4461      	add	r1, ip
 8009a08:	780a      	ldrb	r2, [r1, #0]
 8009a0a:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8009a0c:	2209      	movs	r2, #9
 8009a0e:	211f      	movs	r1, #31
 8009a10:	9805      	ldr	r0, [sp, #20]
 8009a12:	f7fe fdeb 	bl	80085ec <SendMessageToModule>
 8009a16:	f7ff f8d4 	bl	8008bc2 <PxMessagingTask+0x9a>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8009a1a:	4bd0      	ldr	r3, [pc, #832]	; (8009d5c <PxMessagingTask+0x1234>)
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2002      	movs	r0, #2
 8009a22:	4240      	negs	r0, r0
 8009a24:	17c1      	asrs	r1, r0, #31
 8009a26:	1880      	adds	r0, r0, r2
 8009a28:	4159      	adcs	r1, r3
 8009a2a:	2900      	cmp	r1, #0
 8009a2c:	d014      	beq.n	8009a58 <PxMessagingTask+0xf30>
							else if (remoteBuffer == REMOTE_MEMORY_ADD)										// We requested a memory location
 8009a2e:	0011      	movs	r1, r2
 8009a30:	4319      	orrs	r1, r3
 8009a32:	d125      	bne.n	8009a80 <PxMessagingTask+0xf58>
								switch (remoteBuffer)															// Requested format
 8009a34:	2601      	movs	r6, #1
 8009a36:	4276      	negs	r6, r6
 8009a38:	17f7      	asrs	r7, r6, #31
 8009a3a:	18b6      	adds	r6, r6, r2
 8009a3c:	415f      	adcs	r7, r3
 8009a3e:	2207      	movs	r2, #7
 8009a40:	2300      	movs	r3, #0
 8009a42:	0030      	movs	r0, r6
 8009a44:	0039      	movs	r1, r7
 8009a46:	f7f6 fd67 	bl	8000518 <__aeabi_ulcmp>
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	2801      	cmp	r0, #1
 8009a4e:	d817      	bhi.n	8009a80 <PxMessagingTask+0xf58>
 8009a50:	00b6      	lsls	r6, r6, #2
 8009a52:	4bc3      	ldr	r3, [pc, #780]	; (8009d60 <PxMessagingTask+0x1238>)
 8009a54:	599b      	ldr	r3, [r3, r6]
 8009a56:	469f      	mov	pc, r3
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	d101      	bne.n	8009a60 <PxMessagingTask+0xf38>
 8009a5c:	2801      	cmp	r0, #1
 8009a5e:	d8e6      	bhi.n	8009a2e <PxMessagingTask+0xf06>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 8009a60:	2238      	movs	r2, #56	; 0x38
 8009a62:	436a      	muls	r2, r5
 8009a64:	4bbf      	ldr	r3, [pc, #764]	; (8009d64 <PxMessagingTask+0x123c>)
 8009a66:	189b      	adds	r3, r3, r2
 8009a68:	5d1b      	ldrb	r3, [r3, r4]
 8009a6a:	4abf      	ldr	r2, [pc, #764]	; (8009d68 <PxMessagingTask+0x1240>)
 8009a6c:	7013      	strb	r3, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 8009a6e:	2b08      	cmp	r3, #8
 8009a70:	d806      	bhi.n	8009a80 <PxMessagingTask+0xf58>
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4abd      	ldr	r2, [pc, #756]	; (8009d6c <PxMessagingTask+0x1244>)
 8009a76:	58d3      	ldr	r3, [r2, r3]
 8009a78:	469f      	mov	pc, r3
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 8009a7a:	4bbd      	ldr	r3, [pc, #756]	; (8009d70 <PxMessagingTask+0x1248>)
 8009a7c:	2210      	movs	r2, #16
 8009a7e:	701a      	strb	r2, [r3, #0]
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 8009a80:	4bbb      	ldr	r3, [pc, #748]	; (8009d70 <PxMessagingTask+0x1248>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	2b10      	cmp	r3, #16
 8009a86:	d101      	bne.n	8009a8c <PxMessagingTask+0xf64>
 8009a88:	f7ff f89b 	bl	8008bc2 <PxMessagingTask+0x9a>
 8009a8c:	4bb8      	ldr	r3, [pc, #736]	; (8009d70 <PxMessagingTask+0x1248>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	701a      	strb	r2, [r3, #0]
 8009a92:	f7ff f896 	bl	8008bc2 <PxMessagingTask+0x9a>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 8009a96:	3401      	adds	r4, #1
 8009a98:	2238      	movs	r2, #56	; 0x38
 8009a9a:	436a      	muls	r2, r5
 8009a9c:	4bb1      	ldr	r3, [pc, #708]	; (8009d64 <PxMessagingTask+0x123c>)
 8009a9e:	189b      	adds	r3, r3, r2
 8009aa0:	5d1a      	ldrb	r2, [r3, r4]
 8009aa2:	4bae      	ldr	r3, [pc, #696]	; (8009d5c <PxMessagingTask+0x1234>)
 8009aa4:	601a      	str	r2, [r3, #0]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	605a      	str	r2, [r3, #4]
 8009aaa:	e7e9      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 8009aac:	3401      	adds	r4, #1
 8009aae:	2238      	movs	r2, #56	; 0x38
 8009ab0:	436a      	muls	r2, r5
 8009ab2:	4bac      	ldr	r3, [pc, #688]	; (8009d64 <PxMessagingTask+0x123c>)
 8009ab4:	189b      	adds	r3, r3, r2
 8009ab6:	571a      	ldrsb	r2, [r3, r4]
 8009ab8:	17d1      	asrs	r1, r2, #31
 8009aba:	4ba8      	ldr	r3, [pc, #672]	; (8009d5c <PxMessagingTask+0x1234>)
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	6059      	str	r1, [r3, #4]
 8009ac0:	e7de      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 8009ac2:	1c61      	adds	r1, r4, #1
 8009ac4:	2338      	movs	r3, #56	; 0x38
 8009ac6:	436b      	muls	r3, r5
 8009ac8:	4aa6      	ldr	r2, [pc, #664]	; (8009d64 <PxMessagingTask+0x123c>)
 8009aca:	18d2      	adds	r2, r2, r3
 8009acc:	5c53      	ldrb	r3, [r2, r1]
 8009ace:	3402      	adds	r4, #2
 8009ad0:	5d12      	ldrb	r2, [r2, r4]
 8009ad2:	0212      	lsls	r2, r2, #8
 8009ad4:	189b      	adds	r3, r3, r2
 8009ad6:	17d9      	asrs	r1, r3, #31
 8009ad8:	4aa0      	ldr	r2, [pc, #640]	; (8009d5c <PxMessagingTask+0x1234>)
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	6051      	str	r1, [r2, #4]
 8009ade:	e7cf      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 8009ae0:	1c61      	adds	r1, r4, #1
 8009ae2:	2338      	movs	r3, #56	; 0x38
 8009ae4:	436b      	muls	r3, r5
 8009ae6:	4a9f      	ldr	r2, [pc, #636]	; (8009d64 <PxMessagingTask+0x123c>)
 8009ae8:	18d2      	adds	r2, r2, r3
 8009aea:	5c53      	ldrb	r3, [r2, r1]
 8009aec:	3402      	adds	r4, #2
 8009aee:	5d12      	ldrb	r2, [r2, r4]
 8009af0:	0212      	lsls	r2, r2, #8
 8009af2:	189b      	adds	r3, r3, r2
 8009af4:	17d9      	asrs	r1, r3, #31
 8009af6:	4a99      	ldr	r2, [pc, #612]	; (8009d5c <PxMessagingTask+0x1234>)
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	6051      	str	r1, [r2, #4]
 8009afc:	e7c0      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8009afe:	1c61      	adds	r1, r4, #1
 8009b00:	2338      	movs	r3, #56	; 0x38
 8009b02:	436b      	muls	r3, r5
 8009b04:	4a97      	ldr	r2, [pc, #604]	; (8009d64 <PxMessagingTask+0x123c>)
 8009b06:	18d2      	adds	r2, r2, r3
 8009b08:	5c53      	ldrb	r3, [r2, r1]
 8009b0a:	1ca1      	adds	r1, r4, #2
 8009b0c:	5c51      	ldrb	r1, [r2, r1]
 8009b0e:	0209      	lsls	r1, r1, #8
 8009b10:	185b      	adds	r3, r3, r1
 8009b12:	1ce1      	adds	r1, r4, #3
 8009b14:	5c51      	ldrb	r1, [r2, r1]
 8009b16:	0409      	lsls	r1, r1, #16
 8009b18:	185b      	adds	r3, r3, r1
 8009b1a:	3404      	adds	r4, #4
 8009b1c:	5d12      	ldrb	r2, [r2, r4]
 8009b1e:	0612      	lsls	r2, r2, #24
 8009b20:	189b      	adds	r3, r3, r2
 8009b22:	4a8e      	ldr	r2, [pc, #568]	; (8009d5c <PxMessagingTask+0x1234>)
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	2300      	movs	r3, #0
 8009b28:	6053      	str	r3, [r2, #4]
 8009b2a:	e7a9      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 8009b2c:	1c61      	adds	r1, r4, #1
 8009b2e:	2338      	movs	r3, #56	; 0x38
 8009b30:	436b      	muls	r3, r5
 8009b32:	4a8c      	ldr	r2, [pc, #560]	; (8009d64 <PxMessagingTask+0x123c>)
 8009b34:	18d2      	adds	r2, r2, r3
 8009b36:	5c53      	ldrb	r3, [r2, r1]
 8009b38:	1ca1      	adds	r1, r4, #2
 8009b3a:	5c51      	ldrb	r1, [r2, r1]
 8009b3c:	0209      	lsls	r1, r1, #8
 8009b3e:	185b      	adds	r3, r3, r1
 8009b40:	1ce1      	adds	r1, r4, #3
 8009b42:	5c51      	ldrb	r1, [r2, r1]
 8009b44:	0409      	lsls	r1, r1, #16
 8009b46:	185b      	adds	r3, r3, r1
 8009b48:	3404      	adds	r4, #4
 8009b4a:	5d12      	ldrb	r2, [r2, r4]
 8009b4c:	0612      	lsls	r2, r2, #24
 8009b4e:	189b      	adds	r3, r3, r2
 8009b50:	17d9      	asrs	r1, r3, #31
 8009b52:	4a82      	ldr	r2, [pc, #520]	; (8009d5c <PxMessagingTask+0x1234>)
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	6051      	str	r1, [r2, #4]
 8009b58:	e792      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8009b5a:	1c61      	adds	r1, r4, #1
 8009b5c:	2338      	movs	r3, #56	; 0x38
 8009b5e:	436b      	muls	r3, r5
 8009b60:	4a80      	ldr	r2, [pc, #512]	; (8009d64 <PxMessagingTask+0x123c>)
 8009b62:	18d2      	adds	r2, r2, r3
 8009b64:	5c53      	ldrb	r3, [r2, r1]
 8009b66:	1ca1      	adds	r1, r4, #2
 8009b68:	5c51      	ldrb	r1, [r2, r1]
 8009b6a:	0209      	lsls	r1, r1, #8
 8009b6c:	185b      	adds	r3, r3, r1
 8009b6e:	1ce1      	adds	r1, r4, #3
 8009b70:	5c51      	ldrb	r1, [r2, r1]
 8009b72:	0409      	lsls	r1, r1, #16
 8009b74:	185b      	adds	r3, r3, r1
 8009b76:	3404      	adds	r4, #4
 8009b78:	5d12      	ldrb	r2, [r2, r4]
 8009b7a:	0612      	lsls	r2, r2, #24
 8009b7c:	189b      	adds	r3, r3, r2
 8009b7e:	4a77      	ldr	r2, [pc, #476]	; (8009d5c <PxMessagingTask+0x1234>)
 8009b80:	6013      	str	r3, [r2, #0]
 8009b82:	2300      	movs	r3, #0
 8009b84:	6053      	str	r3, [r2, #4]
 8009b86:	e77b      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = cMessage[port-1][shift]; break;
 8009b88:	2238      	movs	r2, #56	; 0x38
 8009b8a:	436a      	muls	r2, r5
 8009b8c:	4b75      	ldr	r3, [pc, #468]	; (8009d64 <PxMessagingTask+0x123c>)
 8009b8e:	189b      	adds	r3, r3, r2
 8009b90:	5d1a      	ldrb	r2, [r3, r4]
 8009b92:	4b72      	ldr	r3, [pc, #456]	; (8009d5c <PxMessagingTask+0x1234>)
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	2200      	movs	r2, #0
 8009b98:	605a      	str	r2, [r3, #4]
 8009b9a:	e771      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = (int8_t)cMessage[port-1][shift]; break;
 8009b9c:	2238      	movs	r2, #56	; 0x38
 8009b9e:	436a      	muls	r2, r5
 8009ba0:	4b70      	ldr	r3, [pc, #448]	; (8009d64 <PxMessagingTask+0x123c>)
 8009ba2:	189b      	adds	r3, r3, r2
 8009ba4:	571a      	ldrsb	r2, [r3, r4]
 8009ba6:	17d1      	asrs	r1, r2, #31
 8009ba8:	4b6c      	ldr	r3, [pc, #432]	; (8009d5c <PxMessagingTask+0x1234>)
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	6059      	str	r1, [r3, #4]
 8009bae:	e767      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = ((uint16_t)cMessage[port-1][shift]<<0) + ((uint16_t)cMessage[port-1][1+shift]<<8); break;
 8009bb0:	2338      	movs	r3, #56	; 0x38
 8009bb2:	436b      	muls	r3, r5
 8009bb4:	4a6b      	ldr	r2, [pc, #428]	; (8009d64 <PxMessagingTask+0x123c>)
 8009bb6:	18d2      	adds	r2, r2, r3
 8009bb8:	5d13      	ldrb	r3, [r2, r4]
 8009bba:	3401      	adds	r4, #1
 8009bbc:	5d12      	ldrb	r2, [r2, r4]
 8009bbe:	0212      	lsls	r2, r2, #8
 8009bc0:	189b      	adds	r3, r3, r2
 8009bc2:	17d9      	asrs	r1, r3, #31
 8009bc4:	4a65      	ldr	r2, [pc, #404]	; (8009d5c <PxMessagingTask+0x1234>)
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	6051      	str	r1, [r2, #4]
 8009bca:	e759      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = ((int16_t)cMessage[port-1][shift]<<0) + ((int16_t)cMessage[port-1][1+shift]<<8); break;
 8009bcc:	2338      	movs	r3, #56	; 0x38
 8009bce:	436b      	muls	r3, r5
 8009bd0:	4a64      	ldr	r2, [pc, #400]	; (8009d64 <PxMessagingTask+0x123c>)
 8009bd2:	18d2      	adds	r2, r2, r3
 8009bd4:	5d13      	ldrb	r3, [r2, r4]
 8009bd6:	3401      	adds	r4, #1
 8009bd8:	5d12      	ldrb	r2, [r2, r4]
 8009bda:	0212      	lsls	r2, r2, #8
 8009bdc:	189b      	adds	r3, r3, r2
 8009bde:	17d9      	asrs	r1, r3, #31
 8009be0:	4a5e      	ldr	r2, [pc, #376]	; (8009d5c <PxMessagingTask+0x1234>)
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	6051      	str	r1, [r2, #4]
 8009be6:	e74b      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = ((uint32_t)cMessage[port-1][shift]<<0) + ((uint32_t)cMessage[port-1][1+shift]<<8) + ((uint32_t)cMessage[port-1][2+shift]<<16) + ((uint32_t)cMessage[port-1][3+shift]<<24); break;
 8009be8:	2338      	movs	r3, #56	; 0x38
 8009bea:	436b      	muls	r3, r5
 8009bec:	4a5d      	ldr	r2, [pc, #372]	; (8009d64 <PxMessagingTask+0x123c>)
 8009bee:	18d2      	adds	r2, r2, r3
 8009bf0:	5d13      	ldrb	r3, [r2, r4]
 8009bf2:	1c61      	adds	r1, r4, #1
 8009bf4:	5c51      	ldrb	r1, [r2, r1]
 8009bf6:	0209      	lsls	r1, r1, #8
 8009bf8:	185b      	adds	r3, r3, r1
 8009bfa:	1ca1      	adds	r1, r4, #2
 8009bfc:	5c51      	ldrb	r1, [r2, r1]
 8009bfe:	0409      	lsls	r1, r1, #16
 8009c00:	185b      	adds	r3, r3, r1
 8009c02:	3403      	adds	r4, #3
 8009c04:	5d12      	ldrb	r2, [r2, r4]
 8009c06:	0612      	lsls	r2, r2, #24
 8009c08:	189b      	adds	r3, r3, r2
 8009c0a:	4a54      	ldr	r2, [pc, #336]	; (8009d5c <PxMessagingTask+0x1234>)
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	6053      	str	r3, [r2, #4]
 8009c12:	e735      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = ((int32_t)cMessage[port-1][shift]<<0) + ((int32_t)cMessage[port-1][1+shift]<<8) + ((int32_t)cMessage[port-1][2+shift]<<16) + ((int32_t)cMessage[port-1][3+shift]<<24); break;									
 8009c14:	2338      	movs	r3, #56	; 0x38
 8009c16:	436b      	muls	r3, r5
 8009c18:	4a52      	ldr	r2, [pc, #328]	; (8009d64 <PxMessagingTask+0x123c>)
 8009c1a:	18d2      	adds	r2, r2, r3
 8009c1c:	5d13      	ldrb	r3, [r2, r4]
 8009c1e:	1c61      	adds	r1, r4, #1
 8009c20:	5c51      	ldrb	r1, [r2, r1]
 8009c22:	0209      	lsls	r1, r1, #8
 8009c24:	185b      	adds	r3, r3, r1
 8009c26:	1ca1      	adds	r1, r4, #2
 8009c28:	5c51      	ldrb	r1, [r2, r1]
 8009c2a:	0409      	lsls	r1, r1, #16
 8009c2c:	185b      	adds	r3, r3, r1
 8009c2e:	3403      	adds	r4, #3
 8009c30:	5d12      	ldrb	r2, [r2, r4]
 8009c32:	0612      	lsls	r2, r2, #24
 8009c34:	189b      	adds	r3, r3, r2
 8009c36:	17d9      	asrs	r1, r3, #31
 8009c38:	4a48      	ldr	r2, [pc, #288]	; (8009d5c <PxMessagingTask+0x1234>)
 8009c3a:	6013      	str	r3, [r2, #0]
 8009c3c:	6051      	str	r1, [r2, #4]
 8009c3e:	e71f      	b.n	8009a80 <PxMessagingTask+0xf58>
										remoteBuffer = ((uint32_t)cMessage[port-1][shift]<<0) + ((uint32_t)cMessage[port-1][1+shift]<<8) + ((uint32_t)cMessage[port-1][2+shift]<<16) + ((uint32_t)cMessage[port-1][3+shift]<<24); break;
 8009c40:	2338      	movs	r3, #56	; 0x38
 8009c42:	436b      	muls	r3, r5
 8009c44:	4a47      	ldr	r2, [pc, #284]	; (8009d64 <PxMessagingTask+0x123c>)
 8009c46:	18d2      	adds	r2, r2, r3
 8009c48:	5d13      	ldrb	r3, [r2, r4]
 8009c4a:	1c61      	adds	r1, r4, #1
 8009c4c:	5c51      	ldrb	r1, [r2, r1]
 8009c4e:	0209      	lsls	r1, r1, #8
 8009c50:	185b      	adds	r3, r3, r1
 8009c52:	1ca1      	adds	r1, r4, #2
 8009c54:	5c51      	ldrb	r1, [r2, r1]
 8009c56:	0409      	lsls	r1, r1, #16
 8009c58:	185b      	adds	r3, r3, r1
 8009c5a:	3403      	adds	r4, #3
 8009c5c:	5d12      	ldrb	r2, [r2, r4]
 8009c5e:	0612      	lsls	r2, r2, #24
 8009c60:	189b      	adds	r3, r3, r2
 8009c62:	4a3e      	ldr	r2, [pc, #248]	; (8009d5c <PxMessagingTask+0x1234>)
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	2300      	movs	r3, #0
 8009c68:	6053      	str	r3, [r2, #4]
 8009c6a:	e709      	b.n	8009a80 <PxMessagingTask+0xf58>
							responseStatus = BOS_OK;		// Initialize response
 8009c6c:	4b40      	ldr	r3, [pc, #256]	; (8009d70 <PxMessagingTask+0x1248>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 8009c72:	00eb      	lsls	r3, r5, #3
 8009c74:	1b5b      	subs	r3, r3, r5
 8009c76:	00da      	lsls	r2, r3, #3
 8009c78:	4b3a      	ldr	r3, [pc, #232]	; (8009d64 <PxMessagingTask+0x123c>)
 8009c7a:	189b      	adds	r3, r3, r2
 8009c7c:	5d1b      	ldrb	r3, [r3, r4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d100      	bne.n	8009c84 <PxMessagingTask+0x115c>
 8009c82:	e161      	b.n	8009f48 <PxMessagingTask+0x1420>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 8009c84:	2b1e      	cmp	r3, #30
 8009c86:	d900      	bls.n	8009c8a <PxMessagingTask+0x1162>
 8009c88:	e15a      	b.n	8009f40 <PxMessagingTask+0x1418>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 8009c8a:	1e5e      	subs	r6, r3, #1
 8009c8c:	00b2      	lsls	r2, r6, #2
 8009c8e:	4b39      	ldr	r3, [pc, #228]	; (8009d74 <PxMessagingTask+0x124c>)
 8009c90:	58d2      	ldr	r2, [r2, r3]
 8009c92:	0c13      	lsrs	r3, r2, #16
 8009c94:	2180      	movs	r1, #128	; 0x80
 8009c96:	0589      	lsls	r1, r1, #22
 8009c98:	468c      	mov	ip, r1
 8009c9a:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 8009c9c:	1c61      	adds	r1, r4, #1
 8009c9e:	4689      	mov	r9, r1
 8009ca0:	2038      	movs	r0, #56	; 0x38
 8009ca2:	4368      	muls	r0, r5
 8009ca4:	492f      	ldr	r1, [pc, #188]	; (8009d64 <PxMessagingTask+0x123c>)
 8009ca6:	1809      	adds	r1, r1, r0
 8009ca8:	4648      	mov	r0, r9
 8009caa:	5c0f      	ldrb	r7, [r1, r0]
 8009cac:	1e79      	subs	r1, r7, #1
 8009cae:	b2c8      	uxtb	r0, r1
 8009cb0:	2807      	cmp	r0, #7
 8009cb2:	d81b      	bhi.n	8009cec <PxMessagingTask+0x11c4>
 8009cb4:	b2c9      	uxtb	r1, r1
 8009cb6:	0089      	lsls	r1, r1, #2
 8009cb8:	482f      	ldr	r0, [pc, #188]	; (8009d78 <PxMessagingTask+0x1250>)
 8009cba:	5841      	ldr	r1, [r0, r1]
 8009cbc:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8009cbe:	0712      	lsls	r2, r2, #28
 8009cc0:	d109      	bne.n	8009cd6 <PxMessagingTask+0x11ae>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	f009 fb50 	bl	8013368 <malloc>
 8009cc8:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 8009cca:	d03b      	beq.n	8009d44 <PxMessagingTask+0x121c>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8009ccc:	0400      	lsls	r0, r0, #16
 8009cce:	19c7      	adds	r7, r0, r7
 8009cd0:	00b6      	lsls	r6, r6, #2
 8009cd2:	4a28      	ldr	r2, [pc, #160]	; (8009d74 <PxMessagingTask+0x124c>)
 8009cd4:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 8009cd6:	4a26      	ldr	r2, [pc, #152]	; (8009d70 <PxMessagingTask+0x1248>)
 8009cd8:	7812      	ldrb	r2, [r2, #0]
 8009cda:	2a12      	cmp	r2, #18
 8009cdc:	d006      	beq.n	8009cec <PxMessagingTask+0x11c4>
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 8009cde:	1ca2      	adds	r2, r4, #2
 8009ce0:	2038      	movs	r0, #56	; 0x38
 8009ce2:	4368      	muls	r0, r5
 8009ce4:	491f      	ldr	r1, [pc, #124]	; (8009d64 <PxMessagingTask+0x123c>)
 8009ce6:	1809      	adds	r1, r1, r0
 8009ce8:	5c8a      	ldrb	r2, [r1, r2]
 8009cea:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 8009cec:	2338      	movs	r3, #56	; 0x38
 8009cee:	436b      	muls	r3, r5
 8009cf0:	4a1c      	ldr	r2, [pc, #112]	; (8009d64 <PxMessagingTask+0x123c>)
 8009cf2:	18d3      	adds	r3, r2, r3
 8009cf4:	5d1a      	ldrb	r2, [r3, r4]
 8009cf6:	3a01      	subs	r2, #1
 8009cf8:	0090      	lsls	r0, r2, #2
 8009cfa:	491e      	ldr	r1, [pc, #120]	; (8009d74 <PxMessagingTask+0x124c>)
 8009cfc:	5841      	ldr	r1, [r0, r1]
 8009cfe:	200f      	movs	r0, #15
 8009d00:	4008      	ands	r0, r1
 8009d02:	464c      	mov	r4, r9
 8009d04:	5d1b      	ldrb	r3, [r3, r4]
 8009d06:	4298      	cmp	r0, r3
 8009d08:	d009      	beq.n	8009d1e <PxMessagingTask+0x11f6>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 8009d0a:	481c      	ldr	r0, [pc, #112]	; (8009d7c <PxMessagingTask+0x1254>)
 8009d0c:	4684      	mov	ip, r0
 8009d0e:	4463      	add	r3, ip
 8009d10:	0092      	lsls	r2, r2, #2
 8009d12:	400b      	ands	r3, r1
 8009d14:	4917      	ldr	r1, [pc, #92]	; (8009d74 <PxMessagingTask+0x124c>)
 8009d16:	5053      	str	r3, [r2, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009d18:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <PxMessagingTask+0x1248>)
 8009d1a:	2214      	movs	r2, #20
 8009d1c:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 8009d1e:	4b18      	ldr	r3, [pc, #96]	; (8009d80 <PxMessagingTask+0x1258>)
 8009d20:	799b      	ldrb	r3, [r3, #6]
 8009d22:	2b60      	cmp	r3, #96	; 0x60
 8009d24:	d003      	beq.n	8009d2e <PxMessagingTask+0x1206>
 8009d26:	2b20      	cmp	r3, #32
 8009d28:	d001      	beq.n	8009d2e <PxMessagingTask+0x1206>
 8009d2a:	f7fe ff4a 	bl	8008bc2 <PxMessagingTask+0x9a>
								messageParams[0] = responseStatus;
 8009d2e:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <PxMessagingTask+0x1248>)
 8009d30:	781a      	ldrb	r2, [r3, #0]
 8009d32:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <PxMessagingTask+0x1224>)
 8009d34:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 8009d36:	2201      	movs	r2, #1
 8009d38:	2121      	movs	r1, #33	; 0x21
 8009d3a:	9805      	ldr	r0, [sp, #20]
 8009d3c:	f7fe fc56 	bl	80085ec <SendMessageToModule>
 8009d40:	f7fe ff3f 	bl	8008bc2 <PxMessagingTask+0x9a>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009d44:	4a0a      	ldr	r2, [pc, #40]	; (8009d70 <PxMessagingTask+0x1248>)
 8009d46:	2112      	movs	r1, #18
 8009d48:	7011      	strb	r1, [r2, #0]
 8009d4a:	e7c4      	b.n	8009cd6 <PxMessagingTask+0x11ae>
 8009d4c:	20000758 	.word	0x20000758
 8009d50:	20000001 	.word	0x20000001
 8009d54:	20000002 	.word	0x20000002
 8009d58:	20000003 	.word	0x20000003
 8009d5c:	20000920 	.word	0x20000920
 8009d60:	080199a4 	.word	0x080199a4
 8009d64:	20000560 	.word	0x20000560
 8009d68:	20000070 	.word	0x20000070
 8009d6c:	080199c4 	.word	0x080199c4
 8009d70:	20000928 	.word	0x20000928
 8009d74:	200060d0 	.word	0x200060d0
 8009d78:	080199e8 	.word	0x080199e8
 8009d7c:	0000fff0 	.word	0x0000fff0
 8009d80:	20006148 	.word	0x20006148
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8009d84:	0712      	lsls	r2, r2, #28
 8009d86:	d109      	bne.n	8009d9c <PxMessagingTask+0x1274>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f009 faed 	bl	8013368 <malloc>
 8009d8e:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 8009d90:	d010      	beq.n	8009db4 <PxMessagingTask+0x128c>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8009d92:	0400      	lsls	r0, r0, #16
 8009d94:	19c7      	adds	r7, r0, r7
 8009d96:	00b6      	lsls	r6, r6, #2
 8009d98:	4ad7      	ldr	r2, [pc, #860]	; (800a0f8 <PxMessagingTask+0x15d0>)
 8009d9a:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 8009d9c:	4ad7      	ldr	r2, [pc, #860]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	2a12      	cmp	r2, #18
 8009da2:	d0a3      	beq.n	8009cec <PxMessagingTask+0x11c4>
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 8009da4:	1ca2      	adds	r2, r4, #2
 8009da6:	2038      	movs	r0, #56	; 0x38
 8009da8:	4368      	muls	r0, r5
 8009daa:	49d5      	ldr	r1, [pc, #852]	; (800a100 <PxMessagingTask+0x15d8>)
 8009dac:	1809      	adds	r1, r1, r0
 8009dae:	568a      	ldrsb	r2, [r1, r2]
 8009db0:	701a      	strb	r2, [r3, #0]
 8009db2:	e79b      	b.n	8009cec <PxMessagingTask+0x11c4>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009db4:	4ad1      	ldr	r2, [pc, #836]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009db6:	2112      	movs	r1, #18
 8009db8:	7011      	strb	r1, [r2, #0]
 8009dba:	e7ef      	b.n	8009d9c <PxMessagingTask+0x1274>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8009dbc:	0712      	lsls	r2, r2, #28
 8009dbe:	d109      	bne.n	8009dd4 <PxMessagingTask+0x12ac>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 8009dc0:	2002      	movs	r0, #2
 8009dc2:	f009 fad1 	bl	8013368 <malloc>
 8009dc6:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 8009dc8:	d015      	beq.n	8009df6 <PxMessagingTask+0x12ce>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8009dca:	0400      	lsls	r0, r0, #16
 8009dcc:	19c7      	adds	r7, r0, r7
 8009dce:	00b6      	lsls	r6, r6, #2
 8009dd0:	4ac9      	ldr	r2, [pc, #804]	; (800a0f8 <PxMessagingTask+0x15d0>)
 8009dd2:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 8009dd4:	4ac9      	ldr	r2, [pc, #804]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009dd6:	7812      	ldrb	r2, [r2, #0]
 8009dd8:	2a12      	cmp	r2, #18
 8009dda:	d087      	beq.n	8009cec <PxMessagingTask+0x11c4>
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 8009ddc:	1ca2      	adds	r2, r4, #2
 8009dde:	2138      	movs	r1, #56	; 0x38
 8009de0:	4369      	muls	r1, r5
 8009de2:	48c7      	ldr	r0, [pc, #796]	; (800a100 <PxMessagingTask+0x15d8>)
 8009de4:	1841      	adds	r1, r0, r1
 8009de6:	5c88      	ldrb	r0, [r1, r2]
 8009de8:	1ce2      	adds	r2, r4, #3
 8009dea:	5c8a      	ldrb	r2, [r1, r2]
 8009dec:	0212      	lsls	r2, r2, #8
 8009dee:	1882      	adds	r2, r0, r2
 8009df0:	b292      	uxth	r2, r2
 8009df2:	801a      	strh	r2, [r3, #0]
 8009df4:	e77a      	b.n	8009cec <PxMessagingTask+0x11c4>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009df6:	4ac1      	ldr	r2, [pc, #772]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009df8:	2112      	movs	r1, #18
 8009dfa:	7011      	strb	r1, [r2, #0]
 8009dfc:	e7ea      	b.n	8009dd4 <PxMessagingTask+0x12ac>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8009dfe:	0712      	lsls	r2, r2, #28
 8009e00:	d109      	bne.n	8009e16 <PxMessagingTask+0x12ee>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 8009e02:	2002      	movs	r0, #2
 8009e04:	f009 fab0 	bl	8013368 <malloc>
 8009e08:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 8009e0a:	d016      	beq.n	8009e3a <PxMessagingTask+0x1312>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8009e0c:	0400      	lsls	r0, r0, #16
 8009e0e:	19c7      	adds	r7, r0, r7
 8009e10:	00b6      	lsls	r6, r6, #2
 8009e12:	4ab9      	ldr	r2, [pc, #740]	; (800a0f8 <PxMessagingTask+0x15d0>)
 8009e14:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 8009e16:	4ab9      	ldr	r2, [pc, #740]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009e18:	7812      	ldrb	r2, [r2, #0]
 8009e1a:	2a12      	cmp	r2, #18
 8009e1c:	d100      	bne.n	8009e20 <PxMessagingTask+0x12f8>
 8009e1e:	e765      	b.n	8009cec <PxMessagingTask+0x11c4>
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 8009e20:	1ca2      	adds	r2, r4, #2
 8009e22:	2138      	movs	r1, #56	; 0x38
 8009e24:	4369      	muls	r1, r5
 8009e26:	48b6      	ldr	r0, [pc, #728]	; (800a100 <PxMessagingTask+0x15d8>)
 8009e28:	1841      	adds	r1, r0, r1
 8009e2a:	5c88      	ldrb	r0, [r1, r2]
 8009e2c:	1ce2      	adds	r2, r4, #3
 8009e2e:	5c8a      	ldrb	r2, [r1, r2]
 8009e30:	0212      	lsls	r2, r2, #8
 8009e32:	1882      	adds	r2, r0, r2
 8009e34:	b212      	sxth	r2, r2
 8009e36:	801a      	strh	r2, [r3, #0]
 8009e38:	e758      	b.n	8009cec <PxMessagingTask+0x11c4>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009e3a:	4ab0      	ldr	r2, [pc, #704]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009e3c:	2112      	movs	r1, #18
 8009e3e:	7011      	strb	r1, [r2, #0]
 8009e40:	e7e9      	b.n	8009e16 <PxMessagingTask+0x12ee>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8009e42:	0712      	lsls	r2, r2, #28
 8009e44:	d109      	bne.n	8009e5a <PxMessagingTask+0x1332>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 8009e46:	2004      	movs	r0, #4
 8009e48:	f009 fa8e 	bl	8013368 <malloc>
 8009e4c:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 8009e4e:	d01d      	beq.n	8009e8c <PxMessagingTask+0x1364>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8009e50:	0400      	lsls	r0, r0, #16
 8009e52:	19c7      	adds	r7, r0, r7
 8009e54:	00b6      	lsls	r6, r6, #2
 8009e56:	4aa8      	ldr	r2, [pc, #672]	; (800a0f8 <PxMessagingTask+0x15d0>)
 8009e58:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 8009e5a:	4aa8      	ldr	r2, [pc, #672]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	2a12      	cmp	r2, #18
 8009e60:	d100      	bne.n	8009e64 <PxMessagingTask+0x133c>
 8009e62:	e743      	b.n	8009cec <PxMessagingTask+0x11c4>
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 8009e64:	1ca2      	adds	r2, r4, #2
 8009e66:	2138      	movs	r1, #56	; 0x38
 8009e68:	4369      	muls	r1, r5
 8009e6a:	48a5      	ldr	r0, [pc, #660]	; (800a100 <PxMessagingTask+0x15d8>)
 8009e6c:	1841      	adds	r1, r0, r1
 8009e6e:	5c88      	ldrb	r0, [r1, r2]
 8009e70:	1ce2      	adds	r2, r4, #3
 8009e72:	5c8a      	ldrb	r2, [r1, r2]
 8009e74:	0212      	lsls	r2, r2, #8
 8009e76:	1880      	adds	r0, r0, r2
 8009e78:	1d22      	adds	r2, r4, #4
 8009e7a:	5c8a      	ldrb	r2, [r1, r2]
 8009e7c:	0412      	lsls	r2, r2, #16
 8009e7e:	1882      	adds	r2, r0, r2
 8009e80:	1d60      	adds	r0, r4, #5
 8009e82:	5c09      	ldrb	r1, [r1, r0]
 8009e84:	0609      	lsls	r1, r1, #24
 8009e86:	1852      	adds	r2, r2, r1
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	e72f      	b.n	8009cec <PxMessagingTask+0x11c4>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009e8c:	4a9b      	ldr	r2, [pc, #620]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009e8e:	2112      	movs	r1, #18
 8009e90:	7011      	strb	r1, [r2, #0]
 8009e92:	e7e2      	b.n	8009e5a <PxMessagingTask+0x1332>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8009e94:	0712      	lsls	r2, r2, #28
 8009e96:	d109      	bne.n	8009eac <PxMessagingTask+0x1384>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 8009e98:	2004      	movs	r0, #4
 8009e9a:	f009 fa65 	bl	8013368 <malloc>
 8009e9e:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 8009ea0:	d01d      	beq.n	8009ede <PxMessagingTask+0x13b6>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8009ea2:	0400      	lsls	r0, r0, #16
 8009ea4:	19c7      	adds	r7, r0, r7
 8009ea6:	00b6      	lsls	r6, r6, #2
 8009ea8:	4a93      	ldr	r2, [pc, #588]	; (800a0f8 <PxMessagingTask+0x15d0>)
 8009eaa:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 8009eac:	4a93      	ldr	r2, [pc, #588]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009eae:	7812      	ldrb	r2, [r2, #0]
 8009eb0:	2a12      	cmp	r2, #18
 8009eb2:	d100      	bne.n	8009eb6 <PxMessagingTask+0x138e>
 8009eb4:	e71a      	b.n	8009cec <PxMessagingTask+0x11c4>
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 8009eb6:	1ca2      	adds	r2, r4, #2
 8009eb8:	2138      	movs	r1, #56	; 0x38
 8009eba:	4369      	muls	r1, r5
 8009ebc:	4890      	ldr	r0, [pc, #576]	; (800a100 <PxMessagingTask+0x15d8>)
 8009ebe:	1841      	adds	r1, r0, r1
 8009ec0:	5c88      	ldrb	r0, [r1, r2]
 8009ec2:	1ce2      	adds	r2, r4, #3
 8009ec4:	5c8a      	ldrb	r2, [r1, r2]
 8009ec6:	0212      	lsls	r2, r2, #8
 8009ec8:	1880      	adds	r0, r0, r2
 8009eca:	1d22      	adds	r2, r4, #4
 8009ecc:	5c8a      	ldrb	r2, [r1, r2]
 8009ece:	0412      	lsls	r2, r2, #16
 8009ed0:	1882      	adds	r2, r0, r2
 8009ed2:	1d60      	adds	r0, r4, #5
 8009ed4:	5c09      	ldrb	r1, [r1, r0]
 8009ed6:	0609      	lsls	r1, r1, #24
 8009ed8:	1852      	adds	r2, r2, r1
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	e706      	b.n	8009cec <PxMessagingTask+0x11c4>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009ede:	4a87      	ldr	r2, [pc, #540]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009ee0:	2112      	movs	r1, #18
 8009ee2:	7011      	strb	r1, [r2, #0]
 8009ee4:	e7e2      	b.n	8009eac <PxMessagingTask+0x1384>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8009ee6:	0712      	lsls	r2, r2, #28
 8009ee8:	d109      	bne.n	8009efe <PxMessagingTask+0x13d6>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 8009eea:	2004      	movs	r0, #4
 8009eec:	f009 fa3c 	bl	8013368 <malloc>
 8009ef0:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 8009ef2:	d021      	beq.n	8009f38 <PxMessagingTask+0x1410>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8009ef4:	0400      	lsls	r0, r0, #16
 8009ef6:	19c7      	adds	r7, r0, r7
 8009ef8:	00b6      	lsls	r6, r6, #2
 8009efa:	4a7f      	ldr	r2, [pc, #508]	; (800a0f8 <PxMessagingTask+0x15d0>)
 8009efc:	50b7      	str	r7, [r6, r2]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) {			// Write remote value
 8009efe:	4a7f      	ldr	r2, [pc, #508]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009f00:	7812      	ldrb	r2, [r2, #0]
 8009f02:	2a12      	cmp	r2, #18
 8009f04:	d100      	bne.n	8009f08 <PxMessagingTask+0x13e0>
 8009f06:	e6f1      	b.n	8009cec <PxMessagingTask+0x11c4>
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 8009f08:	1ca2      	adds	r2, r4, #2
 8009f0a:	2138      	movs	r1, #56	; 0x38
 8009f0c:	4369      	muls	r1, r5
 8009f0e:	487c      	ldr	r0, [pc, #496]	; (800a100 <PxMessagingTask+0x15d8>)
 8009f10:	1841      	adds	r1, r0, r1
 8009f12:	5c88      	ldrb	r0, [r1, r2]
 8009f14:	1ce2      	adds	r2, r4, #3
 8009f16:	5c8a      	ldrb	r2, [r1, r2]
 8009f18:	0212      	lsls	r2, r2, #8
 8009f1a:	1880      	adds	r0, r0, r2
 8009f1c:	1d22      	adds	r2, r4, #4
 8009f1e:	5c8a      	ldrb	r2, [r1, r2]
 8009f20:	0412      	lsls	r2, r2, #16
 8009f22:	1882      	adds	r2, r0, r2
 8009f24:	1d60      	adds	r0, r4, #5
 8009f26:	5c09      	ldrb	r1, [r1, r0]
 8009f28:	0609      	lsls	r1, r1, #24
 8009f2a:	1852      	adds	r2, r2, r1
 8009f2c:	4975      	ldr	r1, [pc, #468]	; (800a104 <PxMessagingTask+0x15dc>)
 8009f2e:	600a      	str	r2, [r1, #0]
 8009f30:	2000      	movs	r0, #0
 8009f32:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	e6d9      	b.n	8009cec <PxMessagingTask+0x11c4>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009f38:	4a70      	ldr	r2, [pc, #448]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009f3a:	2112      	movs	r1, #18
 8009f3c:	7011      	strb	r1, [r2, #0]
 8009f3e:	e7de      	b.n	8009efe <PxMessagingTask+0x13d6>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 8009f40:	4b6e      	ldr	r3, [pc, #440]	; (800a0fc <PxMessagingTask+0x15d4>)
 8009f42:	2213      	movs	r2, #19
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	e6ea      	b.n	8009d1e <PxMessagingTask+0x11f6>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 8009f48:	1ca2      	adds	r2, r4, #2
 8009f4a:	2338      	movs	r3, #56	; 0x38
 8009f4c:	436b      	muls	r3, r5
 8009f4e:	496c      	ldr	r1, [pc, #432]	; (800a100 <PxMessagingTask+0x15d8>)
 8009f50:	18cb      	adds	r3, r1, r3
 8009f52:	5c9f      	ldrb	r7, [r3, r2]
 8009f54:	063f      	lsls	r7, r7, #24
 8009f56:	1ce2      	adds	r2, r4, #3
 8009f58:	5c9a      	ldrb	r2, [r3, r2]
 8009f5a:	0412      	lsls	r2, r2, #16
 8009f5c:	18bf      	adds	r7, r7, r2
 8009f5e:	1d22      	adds	r2, r4, #4
 8009f60:	5c9a      	ldrb	r2, [r3, r2]
 8009f62:	0212      	lsls	r2, r2, #8
 8009f64:	18bf      	adds	r7, r7, r2
 8009f66:	1d62      	adds	r2, r4, #5
 8009f68:	5c9b      	ldrb	r3, [r3, r2]
 8009f6a:	18ff      	adds	r7, r7, r3
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 8009f6c:	23e0      	movs	r3, #224	; 0xe0
 8009f6e:	061b      	lsls	r3, r3, #24
 8009f70:	18fa      	adds	r2, r7, r3
 8009f72:	4b65      	ldr	r3, [pc, #404]	; (800a108 <PxMessagingTask+0x15e0>)
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d87c      	bhi.n	800a072 <PxMessagingTask+0x154a>
									switch (cMessage[port-1][1+shift])															// Requested format
 8009f78:	1c63      	adds	r3, r4, #1
 8009f7a:	2138      	movs	r1, #56	; 0x38
 8009f7c:	4369      	muls	r1, r5
 8009f7e:	4a60      	ldr	r2, [pc, #384]	; (800a100 <PxMessagingTask+0x15d8>)
 8009f80:	1852      	adds	r2, r2, r1
 8009f82:	5cd3      	ldrb	r3, [r2, r3]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	2a07      	cmp	r2, #7
 8009f8a:	d900      	bls.n	8009f8e <PxMessagingTask+0x1466>
 8009f8c:	e6c7      	b.n	8009d1e <PxMessagingTask+0x11f6>
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4a5e      	ldr	r2, [pc, #376]	; (800a10c <PxMessagingTask+0x15e4>)
 8009f94:	58d3      	ldr	r3, [r2, r3]
 8009f96:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 8009f98:	3406      	adds	r4, #6
 8009f9a:	2238      	movs	r2, #56	; 0x38
 8009f9c:	436a      	muls	r2, r5
 8009f9e:	4b58      	ldr	r3, [pc, #352]	; (800a100 <PxMessagingTask+0x15d8>)
 8009fa0:	189b      	adds	r3, r3, r2
 8009fa2:	5d1b      	ldrb	r3, [r3, r4]
 8009fa4:	703b      	strb	r3, [r7, #0]
 8009fa6:	e6ba      	b.n	8009d1e <PxMessagingTask+0x11f6>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 8009fa8:	3406      	adds	r4, #6
 8009faa:	2238      	movs	r2, #56	; 0x38
 8009fac:	436a      	muls	r2, r5
 8009fae:	4b54      	ldr	r3, [pc, #336]	; (800a100 <PxMessagingTask+0x15d8>)
 8009fb0:	189b      	adds	r3, r3, r2
 8009fb2:	571b      	ldrsb	r3, [r3, r4]
 8009fb4:	703b      	strb	r3, [r7, #0]
 8009fb6:	e6b2      	b.n	8009d1e <PxMessagingTask+0x11f6>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 8009fb8:	1da1      	adds	r1, r4, #6
 8009fba:	2338      	movs	r3, #56	; 0x38
 8009fbc:	436b      	muls	r3, r5
 8009fbe:	4a50      	ldr	r2, [pc, #320]	; (800a100 <PxMessagingTask+0x15d8>)
 8009fc0:	18d2      	adds	r2, r2, r3
 8009fc2:	5c53      	ldrb	r3, [r2, r1]
 8009fc4:	3407      	adds	r4, #7
 8009fc6:	5d12      	ldrb	r2, [r2, r4]
 8009fc8:	0212      	lsls	r2, r2, #8
 8009fca:	189b      	adds	r3, r3, r2
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	803b      	strh	r3, [r7, #0]
 8009fd0:	e6a5      	b.n	8009d1e <PxMessagingTask+0x11f6>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 8009fd2:	1da1      	adds	r1, r4, #6
 8009fd4:	2338      	movs	r3, #56	; 0x38
 8009fd6:	436b      	muls	r3, r5
 8009fd8:	4a49      	ldr	r2, [pc, #292]	; (800a100 <PxMessagingTask+0x15d8>)
 8009fda:	18d2      	adds	r2, r2, r3
 8009fdc:	5c53      	ldrb	r3, [r2, r1]
 8009fde:	3407      	adds	r4, #7
 8009fe0:	5d12      	ldrb	r2, [r2, r4]
 8009fe2:	0212      	lsls	r2, r2, #8
 8009fe4:	189b      	adds	r3, r3, r2
 8009fe6:	b21b      	sxth	r3, r3
 8009fe8:	803b      	strh	r3, [r7, #0]
 8009fea:	e698      	b.n	8009d1e <PxMessagingTask+0x11f6>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 8009fec:	1da1      	adds	r1, r4, #6
 8009fee:	2338      	movs	r3, #56	; 0x38
 8009ff0:	436b      	muls	r3, r5
 8009ff2:	4a43      	ldr	r2, [pc, #268]	; (800a100 <PxMessagingTask+0x15d8>)
 8009ff4:	18d2      	adds	r2, r2, r3
 8009ff6:	5c53      	ldrb	r3, [r2, r1]
 8009ff8:	1de1      	adds	r1, r4, #7
 8009ffa:	5c51      	ldrb	r1, [r2, r1]
 8009ffc:	0209      	lsls	r1, r1, #8
 8009ffe:	185b      	adds	r3, r3, r1
 800a000:	0021      	movs	r1, r4
 800a002:	3108      	adds	r1, #8
 800a004:	5c51      	ldrb	r1, [r2, r1]
 800a006:	0409      	lsls	r1, r1, #16
 800a008:	185b      	adds	r3, r3, r1
 800a00a:	3409      	adds	r4, #9
 800a00c:	5d12      	ldrb	r2, [r2, r4]
 800a00e:	0612      	lsls	r2, r2, #24
 800a010:	189b      	adds	r3, r3, r2
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	e683      	b.n	8009d1e <PxMessagingTask+0x11f6>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800a016:	1da1      	adds	r1, r4, #6
 800a018:	2338      	movs	r3, #56	; 0x38
 800a01a:	436b      	muls	r3, r5
 800a01c:	4a38      	ldr	r2, [pc, #224]	; (800a100 <PxMessagingTask+0x15d8>)
 800a01e:	18d2      	adds	r2, r2, r3
 800a020:	5c53      	ldrb	r3, [r2, r1]
 800a022:	1de1      	adds	r1, r4, #7
 800a024:	5c51      	ldrb	r1, [r2, r1]
 800a026:	0209      	lsls	r1, r1, #8
 800a028:	185b      	adds	r3, r3, r1
 800a02a:	0021      	movs	r1, r4
 800a02c:	3108      	adds	r1, #8
 800a02e:	5c51      	ldrb	r1, [r2, r1]
 800a030:	0409      	lsls	r1, r1, #16
 800a032:	185b      	adds	r3, r3, r1
 800a034:	3409      	adds	r4, #9
 800a036:	5d12      	ldrb	r2, [r2, r4]
 800a038:	0612      	lsls	r2, r2, #24
 800a03a:	189b      	adds	r3, r3, r2
 800a03c:	603b      	str	r3, [r7, #0]
 800a03e:	e66e      	b.n	8009d1e <PxMessagingTask+0x11f6>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a040:	1da1      	adds	r1, r4, #6
 800a042:	2338      	movs	r3, #56	; 0x38
 800a044:	436b      	muls	r3, r5
 800a046:	4a2e      	ldr	r2, [pc, #184]	; (800a100 <PxMessagingTask+0x15d8>)
 800a048:	18d2      	adds	r2, r2, r3
 800a04a:	5c53      	ldrb	r3, [r2, r1]
 800a04c:	1de1      	adds	r1, r4, #7
 800a04e:	5c51      	ldrb	r1, [r2, r1]
 800a050:	0209      	lsls	r1, r1, #8
 800a052:	185b      	adds	r3, r3, r1
 800a054:	0021      	movs	r1, r4
 800a056:	3108      	adds	r1, #8
 800a058:	5c51      	ldrb	r1, [r2, r1]
 800a05a:	0409      	lsls	r1, r1, #16
 800a05c:	185b      	adds	r3, r3, r1
 800a05e:	3409      	adds	r4, #9
 800a060:	5d12      	ldrb	r2, [r2, r4]
 800a062:	0612      	lsls	r2, r2, #24
 800a064:	189b      	adds	r3, r3, r2
 800a066:	4a27      	ldr	r2, [pc, #156]	; (800a104 <PxMessagingTask+0x15dc>)
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	2100      	movs	r1, #0
 800a06c:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	e655      	b.n	8009d1e <PxMessagingTask+0x11f6>
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800a072:	4a27      	ldr	r2, [pc, #156]	; (800a110 <PxMessagingTask+0x15e8>)
 800a074:	23f8      	movs	r3, #248	; 0xf8
 800a076:	061b      	lsls	r3, r3, #24
 800a078:	18fb      	adds	r3, r7, r3
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d900      	bls.n	800a080 <PxMessagingTask+0x1558>
 800a07e:	e0c2      	b.n	800a206 <PxMessagingTask+0x16de>
									HAL_FLASH_Unlock();
 800a080:	f007 fa16 	bl	80114b0 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800a084:	2e22      	cmp	r6, #34	; 0x22
 800a086:	d111      	bne.n	800a0ac <PxMessagingTask+0x1584>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800a088:	2300      	movs	r3, #0
 800a08a:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress = temp32;
 800a08c:	9714      	str	r7, [sp, #80]	; 0x50
										erase.NbPages = 1;
 800a08e:	3301      	adds	r3, #1
 800a090:	9315      	str	r3, [sp, #84]	; 0x54
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800a092:	a912      	add	r1, sp, #72	; 0x48
 800a094:	a813      	add	r0, sp, #76	; 0x4c
 800a096:	f007 facb 	bl	8011630 <HAL_FLASHEx_Erase>
 800a09a:	9008      	str	r0, [sp, #32]
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d102      	bne.n	800a0a6 <PxMessagingTask+0x157e>
 800a0a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	d002      	beq.n	800a0ac <PxMessagingTask+0x1584>
 800a0a6:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <PxMessagingTask+0x15d4>)
 800a0a8:	2216      	movs	r2, #22
 800a0aa:	701a      	strb	r2, [r3, #0]
									if (responseStatus == BOS_OK)
 800a0ac:	4b13      	ldr	r3, [pc, #76]	; (800a0fc <PxMessagingTask+0x15d4>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d116      	bne.n	800a0e2 <PxMessagingTask+0x15ba>
										switch (cMessage[port-1][1+shift])															// Requested format
 800a0b4:	1c63      	adds	r3, r4, #1
 800a0b6:	2138      	movs	r1, #56	; 0x38
 800a0b8:	4369      	muls	r1, r5
 800a0ba:	4a11      	ldr	r2, [pc, #68]	; (800a100 <PxMessagingTask+0x15d8>)
 800a0bc:	1852      	adds	r2, r2, r1
 800a0be:	5cd3      	ldrb	r3, [r2, r3]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	2a07      	cmp	r2, #7
 800a0c6:	d80c      	bhi.n	800a0e2 <PxMessagingTask+0x15ba>
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4a11      	ldr	r2, [pc, #68]	; (800a114 <PxMessagingTask+0x15ec>)
 800a0ce:	58d3      	ldr	r3, [r2, r3]
 800a0d0:	469f      	mov	pc, r3
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800a0d2:	883b      	ldrh	r3, [r7, #0]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	4a10      	ldr	r2, [pc, #64]	; (800a118 <PxMessagingTask+0x15f0>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d01f      	beq.n	800a11c <PxMessagingTask+0x15f4>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a0dc:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <PxMessagingTask+0x15d4>)
 800a0de:	2216      	movs	r2, #22
 800a0e0:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800a0e2:	f007 f9f9 	bl	80114d8 <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800a0e6:	9b08      	ldr	r3, [sp, #32]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d100      	bne.n	800a0ee <PxMessagingTask+0x15c6>
 800a0ec:	e617      	b.n	8009d1e <PxMessagingTask+0x11f6>
 800a0ee:	4b03      	ldr	r3, [pc, #12]	; (800a0fc <PxMessagingTask+0x15d4>)
 800a0f0:	2216      	movs	r2, #22
 800a0f2:	701a      	strb	r2, [r3, #0]
 800a0f4:	e613      	b.n	8009d1e <PxMessagingTask+0x11f6>
 800a0f6:	46c0      	nop			; (mov r8, r8)
 800a0f8:	200060d0 	.word	0x200060d0
 800a0fc:	20000928 	.word	0x20000928
 800a100:	20000560 	.word	0x20000560
 800a104:	20000920 	.word	0x20000920
 800a108:	00007fff 	.word	0x00007fff
 800a10c:	08019a08 	.word	0x08019a08
 800a110:	0001ffff 	.word	0x0001ffff
 800a114:	08019a28 	.word	0x08019a28
 800a118:	0000ffff 	.word	0x0000ffff
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800a11c:	3406      	adds	r4, #6
 800a11e:	2238      	movs	r2, #56	; 0x38
 800a120:	436a      	muls	r2, r5
 800a122:	4bb2      	ldr	r3, [pc, #712]	; (800a3ec <PxMessagingTask+0x18c4>)
 800a124:	189b      	adds	r3, r3, r2
 800a126:	5d1a      	ldrb	r2, [r3, r4]
 800a128:	2300      	movs	r3, #0
 800a12a:	49b1      	ldr	r1, [pc, #708]	; (800a3f0 <PxMessagingTask+0x18c8>)
 800a12c:	600a      	str	r2, [r1, #0]
 800a12e:	604b      	str	r3, [r1, #4]
 800a130:	0039      	movs	r1, r7
 800a132:	2001      	movs	r0, #1
 800a134:	f007 fa08 	bl	8011548 <HAL_FLASH_Program>
 800a138:	9008      	str	r0, [sp, #32]
 800a13a:	e7d2      	b.n	800a0e2 <PxMessagingTask+0x15ba>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800a13c:	883b      	ldrh	r3, [r7, #0]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	4aac      	ldr	r2, [pc, #688]	; (800a3f4 <PxMessagingTask+0x18cc>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d003      	beq.n	800a14e <PxMessagingTask+0x1626>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a146:	4bac      	ldr	r3, [pc, #688]	; (800a3f8 <PxMessagingTask+0x18d0>)
 800a148:	2216      	movs	r2, #22
 800a14a:	701a      	strb	r2, [r3, #0]
 800a14c:	e7c9      	b.n	800a0e2 <PxMessagingTask+0x15ba>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800a14e:	1da1      	adds	r1, r4, #6
 800a150:	2238      	movs	r2, #56	; 0x38
 800a152:	436a      	muls	r2, r5
 800a154:	4ba5      	ldr	r3, [pc, #660]	; (800a3ec <PxMessagingTask+0x18c4>)
 800a156:	189b      	adds	r3, r3, r2
 800a158:	5c5a      	ldrb	r2, [r3, r1]
 800a15a:	3407      	adds	r4, #7
 800a15c:	5d1b      	ldrb	r3, [r3, r4]
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	18d2      	adds	r2, r2, r3
 800a162:	17d3      	asrs	r3, r2, #31
 800a164:	49a2      	ldr	r1, [pc, #648]	; (800a3f0 <PxMessagingTask+0x18c8>)
 800a166:	600a      	str	r2, [r1, #0]
 800a168:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800a16a:	0039      	movs	r1, r7
 800a16c:	2001      	movs	r0, #1
 800a16e:	f007 f9eb 	bl	8011548 <HAL_FLASH_Program>
 800a172:	9008      	str	r0, [sp, #32]
 800a174:	e7b5      	b.n	800a0e2 <PxMessagingTask+0x15ba>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	3301      	adds	r3, #1
 800a17a:	d003      	beq.n	800a184 <PxMessagingTask+0x165c>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a17c:	4b9e      	ldr	r3, [pc, #632]	; (800a3f8 <PxMessagingTask+0x18d0>)
 800a17e:	2216      	movs	r2, #22
 800a180:	701a      	strb	r2, [r3, #0]
 800a182:	e7ae      	b.n	800a0e2 <PxMessagingTask+0x15ba>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800a184:	1da2      	adds	r2, r4, #6
 800a186:	2338      	movs	r3, #56	; 0x38
 800a188:	436b      	muls	r3, r5
 800a18a:	4998      	ldr	r1, [pc, #608]	; (800a3ec <PxMessagingTask+0x18c4>)
 800a18c:	18cb      	adds	r3, r1, r3
 800a18e:	5c9a      	ldrb	r2, [r3, r2]
 800a190:	1de1      	adds	r1, r4, #7
 800a192:	5c59      	ldrb	r1, [r3, r1]
 800a194:	0209      	lsls	r1, r1, #8
 800a196:	1852      	adds	r2, r2, r1
 800a198:	0021      	movs	r1, r4
 800a19a:	3108      	adds	r1, #8
 800a19c:	5c59      	ldrb	r1, [r3, r1]
 800a19e:	0409      	lsls	r1, r1, #16
 800a1a0:	1852      	adds	r2, r2, r1
 800a1a2:	3409      	adds	r4, #9
 800a1a4:	5d1b      	ldrb	r3, [r3, r4]
 800a1a6:	061b      	lsls	r3, r3, #24
 800a1a8:	18d2      	adds	r2, r2, r3
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4990      	ldr	r1, [pc, #576]	; (800a3f0 <PxMessagingTask+0x18c8>)
 800a1ae:	600a      	str	r2, [r1, #0]
 800a1b0:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800a1b2:	0039      	movs	r1, r7
 800a1b4:	2002      	movs	r0, #2
 800a1b6:	f007 f9c7 	bl	8011548 <HAL_FLASH_Program>
 800a1ba:	9008      	str	r0, [sp, #32]
 800a1bc:	e791      	b.n	800a0e2 <PxMessagingTask+0x15ba>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	d003      	beq.n	800a1cc <PxMessagingTask+0x16a4>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a1c4:	4b8c      	ldr	r3, [pc, #560]	; (800a3f8 <PxMessagingTask+0x18d0>)
 800a1c6:	2216      	movs	r2, #22
 800a1c8:	701a      	strb	r2, [r3, #0]
 800a1ca:	e78a      	b.n	800a0e2 <PxMessagingTask+0x15ba>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a1cc:	1da2      	adds	r2, r4, #6
 800a1ce:	2338      	movs	r3, #56	; 0x38
 800a1d0:	436b      	muls	r3, r5
 800a1d2:	4986      	ldr	r1, [pc, #536]	; (800a3ec <PxMessagingTask+0x18c4>)
 800a1d4:	18cb      	adds	r3, r1, r3
 800a1d6:	5c9a      	ldrb	r2, [r3, r2]
 800a1d8:	1de1      	adds	r1, r4, #7
 800a1da:	5c59      	ldrb	r1, [r3, r1]
 800a1dc:	0209      	lsls	r1, r1, #8
 800a1de:	1852      	adds	r2, r2, r1
 800a1e0:	0021      	movs	r1, r4
 800a1e2:	3108      	adds	r1, #8
 800a1e4:	5c59      	ldrb	r1, [r3, r1]
 800a1e6:	0409      	lsls	r1, r1, #16
 800a1e8:	1852      	adds	r2, r2, r1
 800a1ea:	3409      	adds	r4, #9
 800a1ec:	5d1b      	ldrb	r3, [r3, r4]
 800a1ee:	061b      	lsls	r3, r3, #24
 800a1f0:	18d2      	adds	r2, r2, r3
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	497e      	ldr	r1, [pc, #504]	; (800a3f0 <PxMessagingTask+0x18c8>)
 800a1f6:	600a      	str	r2, [r1, #0]
 800a1f8:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800a1fa:	0039      	movs	r1, r7
 800a1fc:	2003      	movs	r0, #3
 800a1fe:	f007 f9a3 	bl	8011548 <HAL_FLASH_Program>
 800a202:	9008      	str	r0, [sp, #32]
 800a204:	e76d      	b.n	800a0e2 <PxMessagingTask+0x15ba>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800a206:	4b7c      	ldr	r3, [pc, #496]	; (800a3f8 <PxMessagingTask+0x18d0>)
 800a208:	2215      	movs	r2, #21
 800a20a:	701a      	strb	r2, [r3, #0]
 800a20c:	e587      	b.n	8009d1e <PxMessagingTask+0x11f6>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800a20e:	00eb      	lsls	r3, r5, #3
 800a210:	1b5b      	subs	r3, r3, r5
 800a212:	00da      	lsls	r2, r3, #3
 800a214:	4b75      	ldr	r3, [pc, #468]	; (800a3ec <PxMessagingTask+0x18c4>)
 800a216:	189b      	adds	r3, r3, r2
 800a218:	5d1a      	ldrb	r2, [r3, r4]
 800a21a:	4b77      	ldr	r3, [pc, #476]	; (800a3f8 <PxMessagingTask+0x18d0>)
 800a21c:	701a      	strb	r2, [r3, #0]
							break;	
 800a21e:	f7fe fcd0 	bl	8008bc2 <PxMessagingTask+0x9a>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800a222:	1c60      	adds	r0, r4, #1
 800a224:	00eb      	lsls	r3, r5, #3
 800a226:	1b5a      	subs	r2, r3, r5
 800a228:	00d1      	lsls	r1, r2, #3
 800a22a:	1809      	adds	r1, r1, r0
 800a22c:	486f      	ldr	r0, [pc, #444]	; (800a3ec <PxMessagingTask+0x18c4>)
 800a22e:	1809      	adds	r1, r1, r0
 800a230:	1e7a      	subs	r2, r7, #1
 800a232:	b292      	uxth	r2, r2
 800a234:	1b5b      	subs	r3, r3, r5
 800a236:	00de      	lsls	r6, r3, #3
 800a238:	1980      	adds	r0, r0, r6
 800a23a:	5d00      	ldrb	r0, [r0, r4]
 800a23c:	230a      	movs	r3, #10
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	f003 fe30 	bl	800dea4 <writePxMutex>
							break;
 800a244:	f7fe fcbd 	bl	8008bc2 <PxMessagingTask+0x9a>
							 switch(cMessage[port-1][0+shift])
 800a248:	00eb      	lsls	r3, r5, #3
 800a24a:	1b5b      	subs	r3, r3, r5
 800a24c:	00da      	lsls	r2, r3, #3
 800a24e:	4b67      	ldr	r3, [pc, #412]	; (800a3ec <PxMessagingTask+0x18c4>)
 800a250:	189b      	adds	r3, r3, r2
 800a252:	5d1b      	ldrb	r3, [r3, r4]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d051      	beq.n	800a2fc <PxMessagingTask+0x17d4>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d018      	beq.n	800a28e <PxMessagingTask+0x1766>
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d100      	bne.n	800a262 <PxMessagingTask+0x173a>
 800a260:	e083      	b.n	800a36a <PxMessagingTask+0x1842>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800a262:	9400      	str	r4, [sp, #0]
 800a264:	464b      	mov	r3, r9
 800a266:	9a05      	ldr	r2, [sp, #20]
 800a268:	9907      	ldr	r1, [sp, #28]
 800a26a:	0030      	movs	r0, r6
 800a26c:	f7fe fc5a 	bl	8008b24 <User_MessagingParser>
 800a270:	4683      	mov	fp, r0
							if (result == BOS_ERR_UnknownMessage) {
 800a272:	2801      	cmp	r0, #1
 800a274:	d001      	beq.n	800a27a <PxMessagingTask+0x1752>
 800a276:	f7fe fca4 	bl	8008bc2 <PxMessagingTask+0x9a>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800a27a:	9400      	str	r4, [sp, #0]
 800a27c:	464b      	mov	r3, r9
 800a27e:	9a05      	ldr	r2, [sp, #20]
 800a280:	9907      	ldr	r1, [sp, #28]
 800a282:	0030      	movs	r0, r6
 800a284:	f001 fc12 	bl	800baac <Module_MessagingTask>
 800a288:	4683      	mov	fp, r0
 800a28a:	f7fe fc9a 	bl	8008bc2 <PxMessagingTask+0x9a>
										MBmessageParams[0] = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24);
 800a28e:	1c62      	adds	r2, r4, #1
 800a290:	2338      	movs	r3, #56	; 0x38
 800a292:	436b      	muls	r3, r5
 800a294:	4955      	ldr	r1, [pc, #340]	; (800a3ec <PxMessagingTask+0x18c4>)
 800a296:	18cb      	adds	r3, r1, r3
 800a298:	5c9a      	ldrb	r2, [r3, r2]
 800a29a:	1ca1      	adds	r1, r4, #2
 800a29c:	5c59      	ldrb	r1, [r3, r1]
 800a29e:	0209      	lsls	r1, r1, #8
 800a2a0:	1852      	adds	r2, r2, r1
 800a2a2:	1ce1      	adds	r1, r4, #3
 800a2a4:	5c59      	ldrb	r1, [r3, r1]
 800a2a6:	0409      	lsls	r1, r1, #16
 800a2a8:	1852      	adds	r2, r2, r1
 800a2aa:	1d21      	adds	r1, r4, #4
 800a2ac:	5c59      	ldrb	r1, [r3, r1]
 800a2ae:	0609      	lsls	r1, r1, #24
 800a2b0:	1852      	adds	r2, r2, r1
 800a2b2:	4952      	ldr	r1, [pc, #328]	; (800a3fc <PxMessagingTask+0x18d4>)
 800a2b4:	600a      	str	r2, [r1, #0]
										MBmessageParams[1] = ((uint32_t)cMessage[port-1][5+shift]<<0) + ((uint32_t)cMessage[port-1][6+shift]<<8) + ((uint32_t)cMessage[port-1][7+shift]<<16) + ((uint32_t)cMessage[port-1][8+shift]<<24);
 800a2b6:	1d62      	adds	r2, r4, #5
 800a2b8:	5c98      	ldrb	r0, [r3, r2]
 800a2ba:	1da2      	adds	r2, r4, #6
 800a2bc:	5c9a      	ldrb	r2, [r3, r2]
 800a2be:	0212      	lsls	r2, r2, #8
 800a2c0:	1880      	adds	r0, r0, r2
 800a2c2:	1de2      	adds	r2, r4, #7
 800a2c4:	5c9a      	ldrb	r2, [r3, r2]
 800a2c6:	0412      	lsls	r2, r2, #16
 800a2c8:	1880      	adds	r0, r0, r2
 800a2ca:	0022      	movs	r2, r4
 800a2cc:	3208      	adds	r2, #8
 800a2ce:	5c9a      	ldrb	r2, [r3, r2]
 800a2d0:	0612      	lsls	r2, r2, #24
 800a2d2:	1882      	adds	r2, r0, r2
 800a2d4:	604a      	str	r2, [r1, #4]
										MBmessageParams[2] = ((uint32_t)cMessage[port-1][9+shift]<<0) + ((uint32_t)cMessage[port-1][10+shift]<<8) + ((uint32_t)cMessage[port-1][11+shift]<<16) + ((uint32_t)cMessage[port-1][12+shift]<<24);
 800a2d6:	0022      	movs	r2, r4
 800a2d8:	3209      	adds	r2, #9
 800a2da:	5c98      	ldrb	r0, [r3, r2]
 800a2dc:	3201      	adds	r2, #1
 800a2de:	5c9a      	ldrb	r2, [r3, r2]
 800a2e0:	0212      	lsls	r2, r2, #8
 800a2e2:	1880      	adds	r0, r0, r2
 800a2e4:	0022      	movs	r2, r4
 800a2e6:	320b      	adds	r2, #11
 800a2e8:	5c9a      	ldrb	r2, [r3, r2]
 800a2ea:	0412      	lsls	r2, r2, #16
 800a2ec:	1882      	adds	r2, r0, r2
 800a2ee:	0020      	movs	r0, r4
 800a2f0:	300c      	adds	r0, #12
 800a2f2:	5c1b      	ldrb	r3, [r3, r0]
 800a2f4:	061b      	lsls	r3, r3, #24
 800a2f6:	18d3      	adds	r3, r2, r3
 800a2f8:	608b      	str	r3, [r1, #8]
									break;
 800a2fa:	e7b2      	b.n	800a262 <PxMessagingTask+0x173a>
										MBmessageParams[3] = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24);
 800a2fc:	1c62      	adds	r2, r4, #1
 800a2fe:	2338      	movs	r3, #56	; 0x38
 800a300:	436b      	muls	r3, r5
 800a302:	493a      	ldr	r1, [pc, #232]	; (800a3ec <PxMessagingTask+0x18c4>)
 800a304:	18cb      	adds	r3, r1, r3
 800a306:	5c9a      	ldrb	r2, [r3, r2]
 800a308:	1ca1      	adds	r1, r4, #2
 800a30a:	5c59      	ldrb	r1, [r3, r1]
 800a30c:	0209      	lsls	r1, r1, #8
 800a30e:	1852      	adds	r2, r2, r1
 800a310:	1ce1      	adds	r1, r4, #3
 800a312:	5c59      	ldrb	r1, [r3, r1]
 800a314:	0409      	lsls	r1, r1, #16
 800a316:	1852      	adds	r2, r2, r1
 800a318:	1d21      	adds	r1, r4, #4
 800a31a:	5c59      	ldrb	r1, [r3, r1]
 800a31c:	0609      	lsls	r1, r1, #24
 800a31e:	1852      	adds	r2, r2, r1
 800a320:	4936      	ldr	r1, [pc, #216]	; (800a3fc <PxMessagingTask+0x18d4>)
 800a322:	60ca      	str	r2, [r1, #12]
										MBmessageParams[4] = ((uint32_t)cMessage[port-1][5+shift]<<0) + ((uint32_t)cMessage[port-1][6+shift]<<8) + ((uint32_t)cMessage[port-1][7+shift]<<16) + ((uint32_t)cMessage[port-1][8+shift]<<24);
 800a324:	1d62      	adds	r2, r4, #5
 800a326:	5c98      	ldrb	r0, [r3, r2]
 800a328:	1da2      	adds	r2, r4, #6
 800a32a:	5c9a      	ldrb	r2, [r3, r2]
 800a32c:	0212      	lsls	r2, r2, #8
 800a32e:	1880      	adds	r0, r0, r2
 800a330:	1de2      	adds	r2, r4, #7
 800a332:	5c9a      	ldrb	r2, [r3, r2]
 800a334:	0412      	lsls	r2, r2, #16
 800a336:	1880      	adds	r0, r0, r2
 800a338:	0022      	movs	r2, r4
 800a33a:	3208      	adds	r2, #8
 800a33c:	5c9a      	ldrb	r2, [r3, r2]
 800a33e:	0612      	lsls	r2, r2, #24
 800a340:	1882      	adds	r2, r0, r2
 800a342:	610a      	str	r2, [r1, #16]
										MBmessageParams[5] = ((uint32_t)cMessage[port-1][9+shift]<<0) + ((uint32_t)cMessage[port-1][10+shift]<<8) + ((uint32_t)cMessage[port-1][11+shift]<<16) + ((uint32_t)cMessage[port-1][12+shift]<<24);
 800a344:	0022      	movs	r2, r4
 800a346:	3209      	adds	r2, #9
 800a348:	5c98      	ldrb	r0, [r3, r2]
 800a34a:	3201      	adds	r2, #1
 800a34c:	5c9a      	ldrb	r2, [r3, r2]
 800a34e:	0212      	lsls	r2, r2, #8
 800a350:	1880      	adds	r0, r0, r2
 800a352:	0022      	movs	r2, r4
 800a354:	320b      	adds	r2, #11
 800a356:	5c9a      	ldrb	r2, [r3, r2]
 800a358:	0412      	lsls	r2, r2, #16
 800a35a:	1882      	adds	r2, r0, r2
 800a35c:	0020      	movs	r0, r4
 800a35e:	300c      	adds	r0, #12
 800a360:	5c1b      	ldrb	r3, [r3, r0]
 800a362:	061b      	lsls	r3, r3, #24
 800a364:	18d3      	adds	r3, r2, r3
 800a366:	614b      	str	r3, [r1, #20]
									break;
 800a368:	e77b      	b.n	800a262 <PxMessagingTask+0x173a>
										MBmessageParams[6] = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24);
 800a36a:	1c62      	adds	r2, r4, #1
 800a36c:	2338      	movs	r3, #56	; 0x38
 800a36e:	436b      	muls	r3, r5
 800a370:	491e      	ldr	r1, [pc, #120]	; (800a3ec <PxMessagingTask+0x18c4>)
 800a372:	18cb      	adds	r3, r1, r3
 800a374:	5c9a      	ldrb	r2, [r3, r2]
 800a376:	1ca1      	adds	r1, r4, #2
 800a378:	5c59      	ldrb	r1, [r3, r1]
 800a37a:	0209      	lsls	r1, r1, #8
 800a37c:	1852      	adds	r2, r2, r1
 800a37e:	1ce1      	adds	r1, r4, #3
 800a380:	5c59      	ldrb	r1, [r3, r1]
 800a382:	0409      	lsls	r1, r1, #16
 800a384:	1852      	adds	r2, r2, r1
 800a386:	1d21      	adds	r1, r4, #4
 800a388:	5c59      	ldrb	r1, [r3, r1]
 800a38a:	0609      	lsls	r1, r1, #24
 800a38c:	1852      	adds	r2, r2, r1
 800a38e:	491b      	ldr	r1, [pc, #108]	; (800a3fc <PxMessagingTask+0x18d4>)
 800a390:	618a      	str	r2, [r1, #24]
										MBmessageParams[7] = ((uint32_t)cMessage[port-1][5+shift]<<0) + ((uint32_t)cMessage[port-1][6+shift]<<8) + ((uint32_t)cMessage[port-1][7+shift]<<16) + ((uint32_t)cMessage[port-1][8+shift]<<24);
 800a392:	1d62      	adds	r2, r4, #5
 800a394:	5c98      	ldrb	r0, [r3, r2]
 800a396:	1da2      	adds	r2, r4, #6
 800a398:	5c9a      	ldrb	r2, [r3, r2]
 800a39a:	0212      	lsls	r2, r2, #8
 800a39c:	1880      	adds	r0, r0, r2
 800a39e:	1de2      	adds	r2, r4, #7
 800a3a0:	5c9a      	ldrb	r2, [r3, r2]
 800a3a2:	0412      	lsls	r2, r2, #16
 800a3a4:	1880      	adds	r0, r0, r2
 800a3a6:	0022      	movs	r2, r4
 800a3a8:	3208      	adds	r2, #8
 800a3aa:	5c9a      	ldrb	r2, [r3, r2]
 800a3ac:	0612      	lsls	r2, r2, #24
 800a3ae:	1882      	adds	r2, r0, r2
 800a3b0:	61ca      	str	r2, [r1, #28]
										MBmessageParams[8] = ((uint32_t)cMessage[port-1][9+shift]<<0) + ((uint32_t)cMessage[port-1][10+shift]<<8) + ((uint32_t)cMessage[port-1][11+shift]<<16) + ((uint32_t)cMessage[port-1][12+shift]<<24);
 800a3b2:	0022      	movs	r2, r4
 800a3b4:	3209      	adds	r2, #9
 800a3b6:	5c98      	ldrb	r0, [r3, r2]
 800a3b8:	3201      	adds	r2, #1
 800a3ba:	5c9a      	ldrb	r2, [r3, r2]
 800a3bc:	0212      	lsls	r2, r2, #8
 800a3be:	1880      	adds	r0, r0, r2
 800a3c0:	0022      	movs	r2, r4
 800a3c2:	320b      	adds	r2, #11
 800a3c4:	5c9a      	ldrb	r2, [r3, r2]
 800a3c6:	0412      	lsls	r2, r2, #16
 800a3c8:	1882      	adds	r2, r0, r2
 800a3ca:	0020      	movs	r0, r4
 800a3cc:	300c      	adds	r0, #12
 800a3ce:	5c1b      	ldrb	r3, [r3, r0]
 800a3d0:	061b      	lsls	r3, r3, #24
 800a3d2:	18d3      	adds	r3, r2, r3
 800a3d4:	620b      	str	r3, [r1, #32]
									break;
 800a3d6:	e744      	b.n	800a262 <PxMessagingTask+0x173a>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2100      	movs	r1, #0
 800a3dc:	9805      	ldr	r0, [sp, #20]
 800a3de:	f7fe f905 	bl	80085ec <SendMessageToModule>
			result = BOS_OK;			
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	469b      	mov	fp, r3
 800a3e6:	f7fe fbf1 	bl	8008bcc <PxMessagingTask+0xa4>
 800a3ea:	46c0      	nop			; (mov r8, r8)
 800a3ec:	20000560 	.word	0x20000560
 800a3f0:	20000920 	.word	0x20000920
 800a3f4:	0000ffff 	.word	0x0000ffff
 800a3f8:	20000928 	.word	0x20000928
 800a3fc:	20000d44 	.word	0x20000d44

0800a400 <variantModParamCommand>:

}
/*-----------------------------------------------------------*/

static portBASE_TYPE variantModParamCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a400:	b510      	push	{r4, lr}

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800a402:	2800      	cmp	r0, #0
 800a404:	d101      	bne.n	800a40a <variantModParamCommand+0xa>
 800a406:	b672      	cpsid	i
 800a408:	e7fe      	b.n	800a408 <variantModParamCommand+0x8>

	sprintf((char*) pcWriteBuffer, (char*) Msg, buf);
 800a40a:	4b03      	ldr	r3, [pc, #12]	; (800a418 <variantModParamCommand+0x18>)
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	4903      	ldr	r1, [pc, #12]	; (800a41c <variantModParamCommand+0x1c>)
 800a410:	f009 ff46 	bl	80142a0 <siprintf>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a414:	2000      	movs	r0, #0
 800a416:	bd10      	pop	{r4, pc}
 800a418:	20000f30 	.word	0x20000f30
 800a41c:	0801a2e4 	.word	0x0801a2e4

0800a420 <xModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE xModParamCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a420:	b510      	push	{r4, lr}
 800a422:	1e04      	subs	r4, r0, #0

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800a424:	d101      	bne.n	800a42a <xModParamCommand+0xa>
 800a426:	b672      	cpsid	i
 800a428:	e7fe      	b.n	800a428 <xModParamCommand+0x8>

	sprintf((char*) pcWriteBuffer, (char*) Msg, Cbuf1);
 800a42a:	4b06      	ldr	r3, [pc, #24]	; (800a444 <xModParamCommand+0x24>)
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	f7f7 ff69 	bl	8002304 <__aeabi_f2d>
 800a432:	0002      	movs	r2, r0
 800a434:	000b      	movs	r3, r1
 800a436:	4904      	ldr	r1, [pc, #16]	; (800a448 <xModParamCommand+0x28>)
 800a438:	0020      	movs	r0, r4
 800a43a:	f009 ff31 	bl	80142a0 <siprintf>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a43e:	2000      	movs	r0, #0
 800a440:	bd10      	pop	{r4, pc}
 800a442:	46c0      	nop			; (mov r8, r8)
 800a444:	20000f14 	.word	0x20000f14
 800a448:	0801a2fc 	.word	0x0801a2fc

0800a44c <yModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE yModParamCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a44c:	b510      	push	{r4, lr}
 800a44e:	1e04      	subs	r4, r0, #0

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800a450:	d101      	bne.n	800a456 <yModParamCommand+0xa>
 800a452:	b672      	cpsid	i
 800a454:	e7fe      	b.n	800a454 <yModParamCommand+0x8>

	sprintf((char*) pcWriteBuffer, (char*) Msg, Cbuf2);
 800a456:	4b06      	ldr	r3, [pc, #24]	; (800a470 <yModParamCommand+0x24>)
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f7f7 ff53 	bl	8002304 <__aeabi_f2d>
 800a45e:	0002      	movs	r2, r0
 800a460:	000b      	movs	r3, r1
 800a462:	4904      	ldr	r1, [pc, #16]	; (800a474 <yModParamCommand+0x28>)
 800a464:	0020      	movs	r0, r4
 800a466:	f009 ff1b 	bl	80142a0 <siprintf>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a46a:	2000      	movs	r0, #0
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	20000f18 	.word	0x20000f18
 800a474:	0801a2fc 	.word	0x0801a2fc

0800a478 <ADC_Select_CH8>:
static void ADC_Select_CH8(void) {
 800a478:	b500      	push	{lr}
 800a47a:	b085      	sub	sp, #20
	sConfig.Channel = ADC_CHANNEL_8;
 800a47c:	2308      	movs	r3, #8
 800a47e:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a480:	2380      	movs	r3, #128	; 0x80
 800a482:	015b      	lsls	r3, r3, #5
 800a484:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a486:	2304      	movs	r3, #4
 800a488:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a48a:	a901      	add	r1, sp, #4
 800a48c:	4802      	ldr	r0, [pc, #8]	; (800a498 <ADC_Select_CH8+0x20>)
 800a48e:	f006 f903 	bl	8010698 <HAL_ADC_ConfigChannel>
}
 800a492:	b005      	add	sp, #20
 800a494:	bd00      	pop	{pc}
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	200064c8 	.word	0x200064c8

0800a49c <ADC_Deselect_CH8>:
static void ADC_Deselect_CH8(void) {
 800a49c:	b500      	push	{lr}
 800a49e:	b085      	sub	sp, #20
	sConfig.Channel = ADC_CHANNEL_8;
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800a4a4:	4b04      	ldr	r3, [pc, #16]	; (800a4b8 <ADC_Deselect_CH8+0x1c>)
 800a4a6:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a4a8:	2304      	movs	r3, #4
 800a4aa:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a4ac:	a901      	add	r1, sp, #4
 800a4ae:	4803      	ldr	r0, [pc, #12]	; (800a4bc <ADC_Deselect_CH8+0x20>)
 800a4b0:	f006 f8f2 	bl	8010698 <HAL_ADC_ConfigChannel>
}
 800a4b4:	b005      	add	sp, #20
 800a4b6:	bd00      	pop	{pc}
 800a4b8:	00001001 	.word	0x00001001
 800a4bc:	200064c8 	.word	0x200064c8

0800a4c0 <ADC_Select_CH9>:
static void ADC_Select_CH9(void) {
 800a4c0:	b500      	push	{lr}
 800a4c2:	b085      	sub	sp, #20
	sConfig.Channel = ADC_CHANNEL_9;
 800a4c4:	2309      	movs	r3, #9
 800a4c6:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a4c8:	2380      	movs	r3, #128	; 0x80
 800a4ca:	015b      	lsls	r3, r3, #5
 800a4cc:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a4ce:	2304      	movs	r3, #4
 800a4d0:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a4d2:	a901      	add	r1, sp, #4
 800a4d4:	4802      	ldr	r0, [pc, #8]	; (800a4e0 <ADC_Select_CH9+0x20>)
 800a4d6:	f006 f8df 	bl	8010698 <HAL_ADC_ConfigChannel>
}
 800a4da:	b005      	add	sp, #20
 800a4dc:	bd00      	pop	{pc}
 800a4de:	46c0      	nop			; (mov r8, r8)
 800a4e0:	200064c8 	.word	0x200064c8

0800a4e4 <ADC_Deselect_CH9>:
static void ADC_Deselect_CH9(void) {
 800a4e4:	b500      	push	{lr}
 800a4e6:	b085      	sub	sp, #20
	sConfig.Channel = ADC_CHANNEL_9;
 800a4e8:	2309      	movs	r3, #9
 800a4ea:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800a4ec:	4b04      	ldr	r3, [pc, #16]	; (800a500 <ADC_Deselect_CH9+0x1c>)
 800a4ee:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a4f0:	2304      	movs	r3, #4
 800a4f2:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a4f4:	a901      	add	r1, sp, #4
 800a4f6:	4803      	ldr	r0, [pc, #12]	; (800a504 <ADC_Deselect_CH9+0x20>)
 800a4f8:	f006 f8ce 	bl	8010698 <HAL_ADC_ConfigChannel>
}
 800a4fc:	b005      	add	sp, #20
 800a4fe:	bd00      	pop	{pc}
 800a500:	00001001 	.word	0x00001001
 800a504:	200064c8 	.word	0x200064c8

0800a508 <Adc_Calculation>:
static uint32_t Adc_Calculation(int selected) {
 800a508:	b510      	push	{r4, lr}
	switch (selected) {
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d004      	beq.n	800a518 <Adc_Calculation+0x10>
 800a50e:	2801      	cmp	r0, #1
 800a510:	d018      	beq.n	800a544 <Adc_Calculation+0x3c>
	return *vector;
 800a512:	4b17      	ldr	r3, [pc, #92]	; (800a570 <Adc_Calculation+0x68>)
 800a514:	6818      	ldr	r0, [r3, #0]
}
 800a516:	bd10      	pop	{r4, pc}
		ADC_Select_CH8();
 800a518:	f7ff ffae 	bl	800a478 <ADC_Select_CH8>
		HAL_ADC_Start(&hadc);
 800a51c:	4c15      	ldr	r4, [pc, #84]	; (800a574 <Adc_Calculation+0x6c>)
 800a51e:	0020      	movs	r0, r4
 800a520:	f006 f800 	bl	8010524 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800a524:	21fa      	movs	r1, #250	; 0xfa
 800a526:	0089      	lsls	r1, r1, #2
 800a528:	0020      	movs	r0, r4
 800a52a:	f006 f84d 	bl	80105c8 <HAL_ADC_PollForConversion>
		vector[0] = HAL_ADC_GetValue(&hadc);
 800a52e:	0020      	movs	r0, r4
 800a530:	f006 f8ac 	bl	801068c <HAL_ADC_GetValue>
 800a534:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <Adc_Calculation+0x68>)
 800a536:	6018      	str	r0, [r3, #0]
		HAL_ADC_Stop(&hadc);
 800a538:	0020      	movs	r0, r4
 800a53a:	f006 f823 	bl	8010584 <HAL_ADC_Stop>
		ADC_Deselect_CH8();
 800a53e:	f7ff ffad 	bl	800a49c <ADC_Deselect_CH8>
		break;
 800a542:	e7e6      	b.n	800a512 <Adc_Calculation+0xa>
		ADC_Select_CH9();
 800a544:	f7ff ffbc 	bl	800a4c0 <ADC_Select_CH9>
		HAL_ADC_Start(&hadc);
 800a548:	4c0a      	ldr	r4, [pc, #40]	; (800a574 <Adc_Calculation+0x6c>)
 800a54a:	0020      	movs	r0, r4
 800a54c:	f005 ffea 	bl	8010524 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800a550:	21fa      	movs	r1, #250	; 0xfa
 800a552:	0089      	lsls	r1, r1, #2
 800a554:	0020      	movs	r0, r4
 800a556:	f006 f837 	bl	80105c8 <HAL_ADC_PollForConversion>
		vector[1] = HAL_ADC_GetValue(&hadc);
 800a55a:	0020      	movs	r0, r4
 800a55c:	f006 f896 	bl	801068c <HAL_ADC_GetValue>
 800a560:	4b03      	ldr	r3, [pc, #12]	; (800a570 <Adc_Calculation+0x68>)
 800a562:	6058      	str	r0, [r3, #4]
		HAL_ADC_Stop(&hadc);
 800a564:	0020      	movs	r0, r4
 800a566:	f006 f80d 	bl	8010584 <HAL_ADC_Stop>
		ADC_Deselect_CH9();
 800a56a:	f7ff ffbb 	bl	800a4e4 <ADC_Deselect_CH9>
		break;
 800a56e:	e7d0      	b.n	800a512 <Adc_Calculation+0xa>
 800a570:	200064c0 	.word	0x200064c0
 800a574:	200064c8 	.word	0x200064c8

0800a578 <Get_Direction>:
static int Get_Direction(void) {
 800a578:	b510      	push	{r4, lr}
	if (buttonB) {
 800a57a:	4b42      	ldr	r3, [pc, #264]	; (800a684 <Get_Direction+0x10c>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <Get_Direction+0xe>
		for (int i = 0; i < 2; ++i) {
 800a582:	2400      	movs	r4, #0
 800a584:	e00a      	b.n	800a59c <Get_Direction+0x24>
		joystickState = BUTTON_CLICKED;
 800a586:	4b40      	ldr	r3, [pc, #256]	; (800a688 <Get_Direction+0x110>)
 800a588:	2209      	movs	r2, #9
 800a58a:	701a      	strb	r2, [r3, #0]
		buttonB = 0;
 800a58c:	4b3d      	ldr	r3, [pc, #244]	; (800a684 <Get_Direction+0x10c>)
 800a58e:	2200      	movs	r2, #0
 800a590:	701a      	strb	r2, [r3, #0]
	return joystickState;
 800a592:	4b3d      	ldr	r3, [pc, #244]	; (800a688 <Get_Direction+0x110>)
 800a594:	7818      	ldrb	r0, [r3, #0]
 800a596:	b2c0      	uxtb	r0, r0
}
 800a598:	bd10      	pop	{r4, pc}
		for (int i = 0; i < 2; ++i) {
 800a59a:	3401      	adds	r4, #1
 800a59c:	2c01      	cmp	r4, #1
 800a59e:	dcf8      	bgt.n	800a592 <Get_Direction+0x1a>
			Adc_Calculation(i);
 800a5a0:	0020      	movs	r0, r4
 800a5a2:	f7ff ffb1 	bl	800a508 <Adc_Calculation>
			if (vector[0] >= MIN_IDLE && vector[0] <= MAX_IDLE) {
 800a5a6:	4b39      	ldr	r3, [pc, #228]	; (800a68c <Get_Direction+0x114>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4b39      	ldr	r3, [pc, #228]	; (800a690 <Get_Direction+0x118>)
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d907      	bls.n	800a5c0 <Get_Direction+0x48>
 800a5b0:	4b36      	ldr	r3, [pc, #216]	; (800a68c <Get_Direction+0x114>)
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	4b37      	ldr	r3, [pc, #220]	; (800a694 <Get_Direction+0x11c>)
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d802      	bhi.n	800a5c0 <Get_Direction+0x48>
				joystickState = IDLE;
 800a5ba:	4b33      	ldr	r3, [pc, #204]	; (800a688 <Get_Direction+0x110>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	701a      	strb	r2, [r3, #0]
			if (vector[1] >= MIN_IDLE && vector[1] <= MAX_IDLE) {
 800a5c0:	4b32      	ldr	r3, [pc, #200]	; (800a68c <Get_Direction+0x114>)
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	4b32      	ldr	r3, [pc, #200]	; (800a690 <Get_Direction+0x118>)
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d907      	bls.n	800a5da <Get_Direction+0x62>
 800a5ca:	4b30      	ldr	r3, [pc, #192]	; (800a68c <Get_Direction+0x114>)
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	4b31      	ldr	r3, [pc, #196]	; (800a694 <Get_Direction+0x11c>)
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d802      	bhi.n	800a5da <Get_Direction+0x62>
				joystickState = IDLE;
 800a5d4:	4b2c      	ldr	r3, [pc, #176]	; (800a688 <Get_Direction+0x110>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	701a      	strb	r2, [r3, #0]
			if (vector[0] > MAX_Y) {
 800a5da:	4b2c      	ldr	r3, [pc, #176]	; (800a68c <Get_Direction+0x114>)
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	4b2e      	ldr	r3, [pc, #184]	; (800a698 <Get_Direction+0x120>)
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d902      	bls.n	800a5ea <Get_Direction+0x72>
				joystickState = UP;
 800a5e4:	4b28      	ldr	r3, [pc, #160]	; (800a688 <Get_Direction+0x110>)
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	701a      	strb	r2, [r3, #0]
			if (vector[0] < MIN_Y) {
 800a5ea:	4b28      	ldr	r3, [pc, #160]	; (800a68c <Get_Direction+0x114>)
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	4b2b      	ldr	r3, [pc, #172]	; (800a69c <Get_Direction+0x124>)
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d802      	bhi.n	800a5fa <Get_Direction+0x82>
				joystickState = DOWN;
 800a5f4:	4b24      	ldr	r3, [pc, #144]	; (800a688 <Get_Direction+0x110>)
 800a5f6:	2204      	movs	r2, #4
 800a5f8:	701a      	strb	r2, [r3, #0]
			if (vector[1] > MAX_X) {
 800a5fa:	4b24      	ldr	r3, [pc, #144]	; (800a68c <Get_Direction+0x114>)
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	4b26      	ldr	r3, [pc, #152]	; (800a698 <Get_Direction+0x120>)
 800a600:	429a      	cmp	r2, r3
 800a602:	d902      	bls.n	800a60a <Get_Direction+0x92>
				joystickState = LEFT;
 800a604:	4b20      	ldr	r3, [pc, #128]	; (800a688 <Get_Direction+0x110>)
 800a606:	2202      	movs	r2, #2
 800a608:	701a      	strb	r2, [r3, #0]
			if (vector[1] < MIN_X) {
 800a60a:	4b20      	ldr	r3, [pc, #128]	; (800a68c <Get_Direction+0x114>)
 800a60c:	685a      	ldr	r2, [r3, #4]
 800a60e:	4b23      	ldr	r3, [pc, #140]	; (800a69c <Get_Direction+0x124>)
 800a610:	429a      	cmp	r2, r3
 800a612:	d802      	bhi.n	800a61a <Get_Direction+0xa2>
				joystickState = RIGHT;
 800a614:	4b1c      	ldr	r3, [pc, #112]	; (800a688 <Get_Direction+0x110>)
 800a616:	2201      	movs	r2, #1
 800a618:	701a      	strb	r2, [r3, #0]
			if (vector[0] > MAX_Y && vector[1] < MIN_X) {
 800a61a:	4b1c      	ldr	r3, [pc, #112]	; (800a68c <Get_Direction+0x114>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	4b1e      	ldr	r3, [pc, #120]	; (800a698 <Get_Direction+0x120>)
 800a620:	429a      	cmp	r2, r3
 800a622:	d907      	bls.n	800a634 <Get_Direction+0xbc>
 800a624:	4b19      	ldr	r3, [pc, #100]	; (800a68c <Get_Direction+0x114>)
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	4b1c      	ldr	r3, [pc, #112]	; (800a69c <Get_Direction+0x124>)
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d802      	bhi.n	800a634 <Get_Direction+0xbc>
				joystickState = UP_RIGHT_CORNER;
 800a62e:	4b16      	ldr	r3, [pc, #88]	; (800a688 <Get_Direction+0x110>)
 800a630:	2205      	movs	r2, #5
 800a632:	701a      	strb	r2, [r3, #0]
			if (vector[0] < MIN_Y && vector[1] < MIN_X) {
 800a634:	4b15      	ldr	r3, [pc, #84]	; (800a68c <Get_Direction+0x114>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	4b18      	ldr	r3, [pc, #96]	; (800a69c <Get_Direction+0x124>)
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d807      	bhi.n	800a64e <Get_Direction+0xd6>
 800a63e:	4b13      	ldr	r3, [pc, #76]	; (800a68c <Get_Direction+0x114>)
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	4b16      	ldr	r3, [pc, #88]	; (800a69c <Get_Direction+0x124>)
 800a644:	429a      	cmp	r2, r3
 800a646:	d802      	bhi.n	800a64e <Get_Direction+0xd6>
				joystickState = DOWN_RIGHT_CORNER;
 800a648:	4b0f      	ldr	r3, [pc, #60]	; (800a688 <Get_Direction+0x110>)
 800a64a:	2206      	movs	r2, #6
 800a64c:	701a      	strb	r2, [r3, #0]
			if (vector[0] > MAX_Y && vector[1] > MAX_X) {
 800a64e:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <Get_Direction+0x114>)
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	4b11      	ldr	r3, [pc, #68]	; (800a698 <Get_Direction+0x120>)
 800a654:	429a      	cmp	r2, r3
 800a656:	d907      	bls.n	800a668 <Get_Direction+0xf0>
 800a658:	4b0c      	ldr	r3, [pc, #48]	; (800a68c <Get_Direction+0x114>)
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <Get_Direction+0x120>)
 800a65e:	429a      	cmp	r2, r3
 800a660:	d902      	bls.n	800a668 <Get_Direction+0xf0>
				joystickState = UP_LEFT_CORNER;
 800a662:	4b09      	ldr	r3, [pc, #36]	; (800a688 <Get_Direction+0x110>)
 800a664:	2207      	movs	r2, #7
 800a666:	701a      	strb	r2, [r3, #0]
			if (vector[0] < MIN_Y && vector[1] > MAX_X) {
 800a668:	4b08      	ldr	r3, [pc, #32]	; (800a68c <Get_Direction+0x114>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	4b0b      	ldr	r3, [pc, #44]	; (800a69c <Get_Direction+0x124>)
 800a66e:	429a      	cmp	r2, r3
 800a670:	d893      	bhi.n	800a59a <Get_Direction+0x22>
 800a672:	4b06      	ldr	r3, [pc, #24]	; (800a68c <Get_Direction+0x114>)
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	4b08      	ldr	r3, [pc, #32]	; (800a698 <Get_Direction+0x120>)
 800a678:	429a      	cmp	r2, r3
 800a67a:	d98e      	bls.n	800a59a <Get_Direction+0x22>
				joystickState = DOWN_LEFT_CORNER;
 800a67c:	4b02      	ldr	r3, [pc, #8]	; (800a688 <Get_Direction+0x110>)
 800a67e:	2208      	movs	r2, #8
 800a680:	701a      	strb	r2, [r3, #0]
 800a682:	e78a      	b.n	800a59a <Get_Direction+0x22>
 800a684:	20000f34 	.word	0x20000f34
 800a688:	20006298 	.word	0x20006298
 800a68c:	200064c0 	.word	0x200064c0
 800a690:	0000076b 	.word	0x0000076b
 800a694:	00000834 	.word	0x00000834
 800a698:	00000f3c 	.word	0x00000f3c
 800a69c:	0000031f 	.word	0x0000031f

0800a6a0 <demoCommand>:
		const int8_t *pcCommandString) {
 800a6a0:	b510      	push	{r4, lr}
 800a6a2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800a6a4:	d101      	bne.n	800a6aa <demoCommand+0xa>
 800a6a6:	b672      	cpsid	i
 800a6a8:	e7fe      	b.n	800a6a8 <demoCommand+0x8>
	directionNum = Get_Direction();
 800a6aa:	f7ff ff65 	bl	800a578 <Get_Direction>
	switch (directionNum) {
 800a6ae:	2808      	cmp	r0, #8
 800a6b0:	d831      	bhi.n	800a716 <demoCommand+0x76>
 800a6b2:	0080      	lsls	r0, r0, #2
 800a6b4:	4b1a      	ldr	r3, [pc, #104]	; (800a720 <demoCommand+0x80>)
 800a6b6:	581b      	ldr	r3, [r3, r0]
 800a6b8:	469f      	mov	pc, r3
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a6ba:	4b1a      	ldr	r3, [pc, #104]	; (800a724 <demoCommand+0x84>)
 800a6bc:	4a1a      	ldr	r2, [pc, #104]	; (800a728 <demoCommand+0x88>)
 800a6be:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Up";
 800a6c0:	4a1a      	ldr	r2, [pc, #104]	; (800a72c <demoCommand+0x8c>)
	sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, directionVal);
 800a6c2:	4b18      	ldr	r3, [pc, #96]	; (800a724 <demoCommand+0x84>)
 800a6c4:	6819      	ldr	r1, [r3, #0]
 800a6c6:	0020      	movs	r0, r4
 800a6c8:	f009 fdea 	bl	80142a0 <siprintf>
}
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	bd10      	pop	{r4, pc}
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a6d0:	4b14      	ldr	r3, [pc, #80]	; (800a724 <demoCommand+0x84>)
 800a6d2:	4a15      	ldr	r2, [pc, #84]	; (800a728 <demoCommand+0x88>)
 800a6d4:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Down";
 800a6d6:	4a16      	ldr	r2, [pc, #88]	; (800a730 <demoCommand+0x90>)
		break;
 800a6d8:	e7f3      	b.n	800a6c2 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a6da:	4b12      	ldr	r3, [pc, #72]	; (800a724 <demoCommand+0x84>)
 800a6dc:	4a12      	ldr	r2, [pc, #72]	; (800a728 <demoCommand+0x88>)
 800a6de:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Right";
 800a6e0:	4a14      	ldr	r2, [pc, #80]	; (800a734 <demoCommand+0x94>)
		break;
 800a6e2:	e7ee      	b.n	800a6c2 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a6e4:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <demoCommand+0x84>)
 800a6e6:	4a10      	ldr	r2, [pc, #64]	; (800a728 <demoCommand+0x88>)
 800a6e8:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Left";
 800a6ea:	4a13      	ldr	r2, [pc, #76]	; (800a738 <demoCommand+0x98>)
		break;
 800a6ec:	e7e9      	b.n	800a6c2 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a6ee:	4b0d      	ldr	r3, [pc, #52]	; (800a724 <demoCommand+0x84>)
 800a6f0:	4a0d      	ldr	r2, [pc, #52]	; (800a728 <demoCommand+0x88>)
 800a6f2:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Up_Right_Corner";
 800a6f4:	4a11      	ldr	r2, [pc, #68]	; (800a73c <demoCommand+0x9c>)
		break;
 800a6f6:	e7e4      	b.n	800a6c2 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a6f8:	4b0a      	ldr	r3, [pc, #40]	; (800a724 <demoCommand+0x84>)
 800a6fa:	4a0b      	ldr	r2, [pc, #44]	; (800a728 <demoCommand+0x88>)
 800a6fc:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Down_Right_Corner";
 800a6fe:	4a10      	ldr	r2, [pc, #64]	; (800a740 <demoCommand+0xa0>)
		break;
 800a700:	e7df      	b.n	800a6c2 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a702:	4b08      	ldr	r3, [pc, #32]	; (800a724 <demoCommand+0x84>)
 800a704:	4a08      	ldr	r2, [pc, #32]	; (800a728 <demoCommand+0x88>)
 800a706:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Up_Left_Corner";
 800a708:	4a0e      	ldr	r2, [pc, #56]	; (800a744 <demoCommand+0xa4>)
		break;
 800a70a:	e7da      	b.n	800a6c2 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a70c:	4b05      	ldr	r3, [pc, #20]	; (800a724 <demoCommand+0x84>)
 800a70e:	4a06      	ldr	r2, [pc, #24]	; (800a728 <demoCommand+0x88>)
 800a710:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Down_Left_Corner";
 800a712:	4a0d      	ldr	r2, [pc, #52]	; (800a748 <demoCommand+0xa8>)
		break;
 800a714:	e7d5      	b.n	800a6c2 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are not moving (%s) !!\r\n";
 800a716:	4b03      	ldr	r3, [pc, #12]	; (800a724 <demoCommand+0x84>)
 800a718:	4a0c      	ldr	r2, [pc, #48]	; (800a74c <demoCommand+0xac>)
 800a71a:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Idle";
 800a71c:	4a0c      	ldr	r2, [pc, #48]	; (800a750 <demoCommand+0xb0>)
		break;
 800a71e:	e7d0      	b.n	800a6c2 <demoCommand+0x22>
 800a720:	08019a48 	.word	0x08019a48
 800a724:	200000b4 	.word	0x200000b4
 800a728:	08019bd0 	.word	0x08019bd0
 800a72c:	08019b64 	.word	0x08019b64
 800a730:	08019b68 	.word	0x08019b68
 800a734:	08019b70 	.word	0x08019b70
 800a738:	08019b78 	.word	0x08019b78
 800a73c:	08019b80 	.word	0x08019b80
 800a740:	08019b90 	.word	0x08019b90
 800a744:	08019ba4 	.word	0x08019ba4
 800a748:	08019bb4 	.word	0x08019bb4
 800a74c:	08019be8 	.word	0x08019be8
 800a750:	08019bc8 	.word	0x08019bc8

0800a754 <cartesianCoordinates>:
static void cartesianCoordinates(void) {
 800a754:	b510      	push	{r4, lr}
	for (int i = 0; i < 2; ++i) {
 800a756:	2400      	movs	r4, #0
 800a758:	e02f      	b.n	800a7ba <cartesianCoordinates+0x66>
		} else if (vector[0] > MAX_Y) {
 800a75a:	4b2b      	ldr	r3, [pc, #172]	; (800a808 <cartesianCoordinates+0xb4>)
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	4b2b      	ldr	r3, [pc, #172]	; (800a80c <cartesianCoordinates+0xb8>)
 800a760:	429a      	cmp	r2, r3
 800a762:	d910      	bls.n	800a786 <cartesianCoordinates+0x32>
			y = 100.0;
 800a764:	4b2a      	ldr	r3, [pc, #168]	; (800a810 <cartesianCoordinates+0xbc>)
 800a766:	4a2b      	ldr	r2, [pc, #172]	; (800a814 <cartesianCoordinates+0xc0>)
 800a768:	601a      	str	r2, [r3, #0]
		if (vector[1] >= MIN_IDLE && vector[1] <= MAX_IDLE) {
 800a76a:	4b27      	ldr	r3, [pc, #156]	; (800a808 <cartesianCoordinates+0xb4>)
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	4b2a      	ldr	r3, [pc, #168]	; (800a818 <cartesianCoordinates+0xc4>)
 800a770:	429a      	cmp	r2, r3
 800a772:	d919      	bls.n	800a7a8 <cartesianCoordinates+0x54>
 800a774:	4b24      	ldr	r3, [pc, #144]	; (800a808 <cartesianCoordinates+0xb4>)
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	4b28      	ldr	r3, [pc, #160]	; (800a81c <cartesianCoordinates+0xc8>)
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d814      	bhi.n	800a7a8 <cartesianCoordinates+0x54>
			x = 0.0;
 800a77e:	4b28      	ldr	r3, [pc, #160]	; (800a820 <cartesianCoordinates+0xcc>)
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	e018      	b.n	800a7b8 <cartesianCoordinates+0x64>
			y = (vector[0] / 20.475) - 100;
 800a786:	4b20      	ldr	r3, [pc, #128]	; (800a808 <cartesianCoordinates+0xb4>)
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	f7f7 fd89 	bl	80022a0 <__aeabi_ui2d>
 800a78e:	4a25      	ldr	r2, [pc, #148]	; (800a824 <cartesianCoordinates+0xd0>)
 800a790:	4b25      	ldr	r3, [pc, #148]	; (800a828 <cartesianCoordinates+0xd4>)
 800a792:	f7f6 fb35 	bl	8000e00 <__aeabi_ddiv>
 800a796:	2200      	movs	r2, #0
 800a798:	4b24      	ldr	r3, [pc, #144]	; (800a82c <cartesianCoordinates+0xd8>)
 800a79a:	f7f7 f9ad 	bl	8001af8 <__aeabi_dsub>
 800a79e:	f7f7 fe03 	bl	80023a8 <__aeabi_d2f>
 800a7a2:	4b1b      	ldr	r3, [pc, #108]	; (800a810 <cartesianCoordinates+0xbc>)
 800a7a4:	6018      	str	r0, [r3, #0]
 800a7a6:	e7e0      	b.n	800a76a <cartesianCoordinates+0x16>
		} else if (vector[1] > MAX_X) {
 800a7a8:	4b17      	ldr	r3, [pc, #92]	; (800a808 <cartesianCoordinates+0xb4>)
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	4b17      	ldr	r3, [pc, #92]	; (800a80c <cartesianCoordinates+0xb8>)
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d916      	bls.n	800a7e0 <cartesianCoordinates+0x8c>
			x = -100.0;
 800a7b2:	4b1b      	ldr	r3, [pc, #108]	; (800a820 <cartesianCoordinates+0xcc>)
 800a7b4:	4a1e      	ldr	r2, [pc, #120]	; (800a830 <cartesianCoordinates+0xdc>)
 800a7b6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 2; ++i) {
 800a7b8:	3401      	adds	r4, #1
 800a7ba:	2c01      	cmp	r4, #1
 800a7bc:	dc23      	bgt.n	800a806 <cartesianCoordinates+0xb2>
		Adc_Calculation(i);
 800a7be:	0020      	movs	r0, r4
 800a7c0:	f7ff fea2 	bl	800a508 <Adc_Calculation>
		if (vector[0] >= MIN_IDLE && vector[0] <= MAX_IDLE) {
 800a7c4:	4b10      	ldr	r3, [pc, #64]	; (800a808 <cartesianCoordinates+0xb4>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	4b13      	ldr	r3, [pc, #76]	; (800a818 <cartesianCoordinates+0xc4>)
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d9c5      	bls.n	800a75a <cartesianCoordinates+0x6>
 800a7ce:	4b0e      	ldr	r3, [pc, #56]	; (800a808 <cartesianCoordinates+0xb4>)
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b12      	ldr	r3, [pc, #72]	; (800a81c <cartesianCoordinates+0xc8>)
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d8c0      	bhi.n	800a75a <cartesianCoordinates+0x6>
			y = 0.0;
 800a7d8:	4b0d      	ldr	r3, [pc, #52]	; (800a810 <cartesianCoordinates+0xbc>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	e7c4      	b.n	800a76a <cartesianCoordinates+0x16>
			x = -(vector[1] / 20.475) + 100;
 800a7e0:	4b09      	ldr	r3, [pc, #36]	; (800a808 <cartesianCoordinates+0xb4>)
 800a7e2:	6858      	ldr	r0, [r3, #4]
 800a7e4:	f7f7 fd5c 	bl	80022a0 <__aeabi_ui2d>
 800a7e8:	4a0e      	ldr	r2, [pc, #56]	; (800a824 <cartesianCoordinates+0xd0>)
 800a7ea:	4b0f      	ldr	r3, [pc, #60]	; (800a828 <cartesianCoordinates+0xd4>)
 800a7ec:	f7f6 fb08 	bl	8000e00 <__aeabi_ddiv>
 800a7f0:	0002      	movs	r2, r0
 800a7f2:	000b      	movs	r3, r1
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	490d      	ldr	r1, [pc, #52]	; (800a82c <cartesianCoordinates+0xd8>)
 800a7f8:	f7f7 f97e 	bl	8001af8 <__aeabi_dsub>
 800a7fc:	f7f7 fdd4 	bl	80023a8 <__aeabi_d2f>
 800a800:	4b07      	ldr	r3, [pc, #28]	; (800a820 <cartesianCoordinates+0xcc>)
 800a802:	6018      	str	r0, [r3, #0]
 800a804:	e7d8      	b.n	800a7b8 <cartesianCoordinates+0x64>
}
 800a806:	bd10      	pop	{r4, pc}
 800a808:	200064c0 	.word	0x200064c0
 800a80c:	00000f3c 	.word	0x00000f3c
 800a810:	200063d8 	.word	0x200063d8
 800a814:	42c80000 	.word	0x42c80000
 800a818:	0000076b 	.word	0x0000076b
 800a81c:	00000834 	.word	0x00000834
 800a820:	20006220 	.word	0x20006220
 800a824:	9999999a 	.word	0x9999999a
 800a828:	40347999 	.word	0x40347999
 800a82c:	40590000 	.word	0x40590000
 800a830:	c2c80000 	.word	0xc2c80000

0800a834 <joystickStopMeasurement>:
static void joystickStopMeasurement(void) {
 800a834:	b510      	push	{r4, lr}
	HAL_ADC_Stop(&hadc);
 800a836:	4c06      	ldr	r4, [pc, #24]	; (800a850 <joystickStopMeasurement+0x1c>)
 800a838:	0020      	movs	r0, r4
 800a83a:	f005 fea3 	bl	8010584 <HAL_ADC_Stop>
	ADC_Deselect_CH8();
 800a83e:	f7ff fe2d 	bl	800a49c <ADC_Deselect_CH8>
	HAL_ADC_Stop(&hadc);
 800a842:	0020      	movs	r0, r4
 800a844:	f005 fe9e 	bl	8010584 <HAL_ADC_Stop>
	ADC_Deselect_CH9();
 800a848:	f7ff fe4c 	bl	800a4e4 <ADC_Deselect_CH9>
}
 800a84c:	bd10      	pop	{r4, pc}
 800a84e:	46c0      	nop			; (mov r8, r8)
 800a850:	200064c8 	.word	0x200064c8

0800a854 <calculateVariantValue>:
static int calculateVariantValue(bool vector, int maxInterval){
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	0005      	movs	r5, r0
 800a858:	000c      	movs	r4, r1
	variantB = 1;
 800a85a:	4b2c      	ldr	r3, [pc, #176]	; (800a90c <calculateVariantValue+0xb8>)
 800a85c:	2201      	movs	r2, #1
 800a85e:	701a      	strb	r2, [r3, #0]
	Get_Direction();
 800a860:	f7ff fe8a 	bl	800a578 <Get_Direction>
	if (buf <= maxInterval) {
 800a864:	4b2a      	ldr	r3, [pc, #168]	; (800a910 <calculateVariantValue+0xbc>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	42a3      	cmp	r3, r4
 800a86a:	dc49      	bgt.n	800a900 <calculateVariantValue+0xac>
		switch (vector) {
 800a86c:	2d01      	cmp	r5, #1
 800a86e:	d023      	beq.n	800a8b8 <calculateVariantValue+0x64>
			if (joystickState == UP && buf < maxInterval
 800a870:	4a28      	ldr	r2, [pc, #160]	; (800a914 <calculateVariantValue+0xc0>)
 800a872:	7812      	ldrb	r2, [r2, #0]
 800a874:	2a03      	cmp	r2, #3
 800a876:	d012      	beq.n	800a89e <calculateVariantValue+0x4a>
			if (joystickState == DOWN && buf > BASE_RANGE
 800a878:	4b26      	ldr	r3, [pc, #152]	; (800a914 <calculateVariantValue+0xc0>)
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	2b04      	cmp	r3, #4
 800a87e:	d141      	bne.n	800a904 <calculateVariantValue+0xb0>
 800a880:	4b23      	ldr	r3, [pc, #140]	; (800a910 <calculateVariantValue+0xbc>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	dd3d      	ble.n	800a904 <calculateVariantValue+0xb0>
					&& joystickState != IDLE) {
 800a888:	4a22      	ldr	r2, [pc, #136]	; (800a914 <calculateVariantValue+0xc0>)
 800a88a:	7812      	ldrb	r2, [r2, #0]
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	d039      	beq.n	800a904 <calculateVariantValue+0xb0>
				buf -= 1;
 800a890:	3b01      	subs	r3, #1
 800a892:	4a1f      	ldr	r2, [pc, #124]	; (800a910 <calculateVariantValue+0xbc>)
 800a894:	6013      	str	r3, [r2, #0]
				Delay_us(10);
 800a896:	200a      	movs	r0, #10
 800a898:	f003 f93e 	bl	800db18 <StartMicroDelay>
 800a89c:	e032      	b.n	800a904 <calculateVariantValue+0xb0>
			if (joystickState == UP && buf < maxInterval
 800a89e:	42a3      	cmp	r3, r4
 800a8a0:	daea      	bge.n	800a878 <calculateVariantValue+0x24>
					&& joystickState != IDLE) {
 800a8a2:	4a1c      	ldr	r2, [pc, #112]	; (800a914 <calculateVariantValue+0xc0>)
 800a8a4:	7812      	ldrb	r2, [r2, #0]
 800a8a6:	2a00      	cmp	r2, #0
 800a8a8:	d0e6      	beq.n	800a878 <calculateVariantValue+0x24>
				buf += 1;
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	4a18      	ldr	r2, [pc, #96]	; (800a910 <calculateVariantValue+0xbc>)
 800a8ae:	6013      	str	r3, [r2, #0]
				Delay_us(10);
 800a8b0:	200a      	movs	r0, #10
 800a8b2:	f003 f931 	bl	800db18 <StartMicroDelay>
 800a8b6:	e7df      	b.n	800a878 <calculateVariantValue+0x24>
			if (joystickState == RIGHT && buf < maxInterval
 800a8b8:	4a16      	ldr	r2, [pc, #88]	; (800a914 <calculateVariantValue+0xc0>)
 800a8ba:	7812      	ldrb	r2, [r2, #0]
 800a8bc:	2a01      	cmp	r2, #1
 800a8be:	d012      	beq.n	800a8e6 <calculateVariantValue+0x92>
			if (joystickState == LEFT && buf > BASE_RANGE
 800a8c0:	4b14      	ldr	r3, [pc, #80]	; (800a914 <calculateVariantValue+0xc0>)
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d11d      	bne.n	800a904 <calculateVariantValue+0xb0>
 800a8c8:	4b11      	ldr	r3, [pc, #68]	; (800a910 <calculateVariantValue+0xbc>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dd19      	ble.n	800a904 <calculateVariantValue+0xb0>
					&& joystickState != IDLE) {
 800a8d0:	4a10      	ldr	r2, [pc, #64]	; (800a914 <calculateVariantValue+0xc0>)
 800a8d2:	7812      	ldrb	r2, [r2, #0]
 800a8d4:	2a00      	cmp	r2, #0
 800a8d6:	d015      	beq.n	800a904 <calculateVariantValue+0xb0>
				buf -= 1;
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	4a0d      	ldr	r2, [pc, #52]	; (800a910 <calculateVariantValue+0xbc>)
 800a8dc:	6013      	str	r3, [r2, #0]
				Delay_us(10);
 800a8de:	200a      	movs	r0, #10
 800a8e0:	f003 f91a 	bl	800db18 <StartMicroDelay>
 800a8e4:	e00e      	b.n	800a904 <calculateVariantValue+0xb0>
			if (joystickState == RIGHT && buf < maxInterval
 800a8e6:	42a3      	cmp	r3, r4
 800a8e8:	daea      	bge.n	800a8c0 <calculateVariantValue+0x6c>
					&& joystickState != IDLE) {
 800a8ea:	4a0a      	ldr	r2, [pc, #40]	; (800a914 <calculateVariantValue+0xc0>)
 800a8ec:	7812      	ldrb	r2, [r2, #0]
 800a8ee:	2a00      	cmp	r2, #0
 800a8f0:	d0e6      	beq.n	800a8c0 <calculateVariantValue+0x6c>
				buf += 1;
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	4a06      	ldr	r2, [pc, #24]	; (800a910 <calculateVariantValue+0xbc>)
 800a8f6:	6013      	str	r3, [r2, #0]
				Delay_us(10);
 800a8f8:	200a      	movs	r0, #10
 800a8fa:	f003 f90d 	bl	800db18 <StartMicroDelay>
 800a8fe:	e7df      	b.n	800a8c0 <calculateVariantValue+0x6c>
		buf = maxInterval;
 800a900:	4b03      	ldr	r3, [pc, #12]	; (800a910 <calculateVariantValue+0xbc>)
 800a902:	601c      	str	r4, [r3, #0]
	return buf;
 800a904:	4b02      	ldr	r3, [pc, #8]	; (800a910 <calculateVariantValue+0xbc>)
 800a906:	6818      	ldr	r0, [r3, #0]
}
 800a908:	bd70      	pop	{r4, r5, r6, pc}
 800a90a:	46c0      	nop			; (mov r8, r8)
 800a90c:	20000f44 	.word	0x20000f44
 800a910:	20000f30 	.word	0x20000f30
 800a914:	20006298 	.word	0x20006298

0800a918 <CheckForEnterKey>:
static void CheckForEnterKey(void) {
 800a918:	b510      	push	{r4, lr}
 800a91a:	b082      	sub	sp, #8
	stopB = 0;
 800a91c:	4b12      	ldr	r3, [pc, #72]	; (800a968 <CheckForEnterKey+0x50>)
 800a91e:	2200      	movs	r2, #0
 800a920:	701a      	strb	r2, [r3, #0]
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800a922:	2300      	movs	r3, #0
 800a924:	2b3f      	cmp	r3, #63	; 0x3f
 800a926:	d81d      	bhi.n	800a964 <CheckForEnterKey+0x4c>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800a928:	4a10      	ldr	r2, [pc, #64]	; (800a96c <CheckForEnterKey+0x54>)
 800a92a:	7812      	ldrb	r2, [r2, #0]
 800a92c:	3a01      	subs	r2, #1
 800a92e:	001c      	movs	r4, r3
 800a930:	0190      	lsls	r0, r2, #6
 800a932:	490f      	ldr	r1, [pc, #60]	; (800a970 <CheckForEnterKey+0x58>)
 800a934:	1809      	adds	r1, r1, r0
 800a936:	5cc9      	ldrb	r1, [r1, r3]
 800a938:	290d      	cmp	r1, #13
 800a93a:	d002      	beq.n	800a942 <CheckForEnterKey+0x2a>
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800a93c:	3301      	adds	r3, #1
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	e7f0      	b.n	800a924 <CheckForEnterKey+0xc>
			UARTRxBuf[PcPort - 1][chr] = 0;
 800a942:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <CheckForEnterKey+0x58>)
 800a944:	181a      	adds	r2, r3, r0
 800a946:	2300      	movs	r3, #0
 800a948:	5513      	strb	r3, [r2, r4]
			joystickMode = REQ_STOP;		// Stop the streaming task
 800a94a:	4a0a      	ldr	r2, [pc, #40]	; (800a974 <CheckForEnterKey+0x5c>)
 800a94c:	3102      	adds	r1, #2
 800a94e:	7011      	strb	r1, [r2, #0]
			xTimerStop(xTimerJoystick, 0); // Stop any running timeout timer
 800a950:	4a09      	ldr	r2, [pc, #36]	; (800a978 <CheckForEnterKey+0x60>)
 800a952:	6810      	ldr	r0, [r2, #0]
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	2200      	movs	r2, #0
 800a958:	390c      	subs	r1, #12
 800a95a:	f005 f921 	bl	800fba0 <xTimerGenericCommand>
			stopB = 1;
 800a95e:	4b02      	ldr	r3, [pc, #8]	; (800a968 <CheckForEnterKey+0x50>)
 800a960:	2201      	movs	r2, #1
 800a962:	701a      	strb	r2, [r3, #0]
}
 800a964:	b002      	add	sp, #8
 800a966:	bd10      	pop	{r4, pc}
 800a968:	20000f3d 	.word	0x20000f3d
 800a96c:	200002cf 	.word	0x200002cf
 800a970:	20000ae8 	.word	0x20000ae8
 800a974:	200062e8 	.word	0x200062e8
 800a978:	20000f48 	.word	0x20000f48

0800a97c <SendMeasurementResult>:
		int *int_buffer, float *float_buffer1, float *float_buffer2) {
 800a97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a97e:	46ce      	mov	lr, r9
 800a980:	b500      	push	{lr}
 800a982:	b08a      	sub	sp, #40	; 0x28
 800a984:	000c      	movs	r4, r1
 800a986:	1c17      	adds	r7, r2, #0
 800a988:	1c1e      	adds	r6, r3, #0
 800a98a:	ab10      	add	r3, sp, #64	; 0x40
 800a98c:	781d      	ldrb	r5, [r3, #0]
 800a98e:	ab11      	add	r3, sp, #68	; 0x44
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	4699      	mov	r9, r3
	float fXMessage = fXValue;
 800a994:	9206      	str	r2, [sp, #24]
	float fYMessage = fYValue;
 800a996:	9605      	str	r6, [sp, #20]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a998:	f003 fcda 	bl	800e350 <FreeRTOS_CLIGetOutputBuffer>
 800a99c:	9003      	str	r0, [sp, #12]
	if (variantB) {
 800a99e:	4ba1      	ldr	r3, [pc, #644]	; (800ac24 <SendMeasurementResult+0x2a8>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d031      	beq.n	800aa0a <SendMeasurementResult+0x8e>
		pcTMsg = (int8_t*) "%d\r\n";
 800a9a6:	4ba0      	ldr	r3, [pc, #640]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800a9a8:	4aa0      	ldr	r2, [pc, #640]	; (800ac2c <SendMeasurementResult+0x2b0>)
 800a9aa:	601a      	str	r2, [r3, #0]
		sendTVariant = int_value;
 800a9ac:	9409      	str	r4, [sp, #36]	; 0x24
		variantB = 0;
 800a9ae:	4b9d      	ldr	r3, [pc, #628]	; (800ac24 <SendMeasurementResult+0x2a8>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	701a      	strb	r2, [r3, #0]
	int8_t *message = (int8_t*) "";
 800a9b4:	4a9e      	ldr	r2, [pc, #632]	; (800ac30 <SendMeasurementResult+0x2b4>)
	switch (joystickMode) {
 800a9b6:	4b9f      	ldr	r3, [pc, #636]	; (800ac34 <SendMeasurementResult+0x2b8>)
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	d100      	bne.n	800a9c2 <SendMeasurementResult+0x46>
 800a9c0:	e0b4      	b.n	800ab2c <SendMeasurementResult+0x1b0>
 800a9c2:	d96c      	bls.n	800aa9e <SendMeasurementResult+0x122>
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d100      	bne.n	800a9ca <SendMeasurementResult+0x4e>
 800a9c8:	e105      	b.n	800abd6 <SendMeasurementResult+0x25a>
 800a9ca:	2b05      	cmp	r3, #5
 800a9cc:	d118      	bne.n	800aa00 <SendMeasurementResult+0x84>
		if (type == directionStream) {
 800a9ce:	4b9a      	ldr	r3, [pc, #616]	; (800ac38 <SendMeasurementResult+0x2bc>)
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d100      	bne.n	800a9d8 <SendMeasurementResult+0x5c>
 800a9d6:	e07c      	b.n	800aad2 <SendMeasurementResult+0x156>
		} else if (type == cartesianStream) {
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d100      	bne.n	800a9de <SendMeasurementResult+0x62>
 800a9dc:	e07f      	b.n	800aade <SendMeasurementResult+0x162>
				strlen((char*) pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800a9de:	9c03      	ldr	r4, [sp, #12]
 800a9e0:	0020      	movs	r0, r4
 800a9e2:	f7f5 fb99 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcOutputString,
 800a9e6:	23fa      	movs	r3, #250	; 0xfa
 800a9e8:	b282      	uxth	r2, r0
 800a9ea:	4994      	ldr	r1, [pc, #592]	; (800ac3c <SendMeasurementResult+0x2c0>)
 800a9ec:	7808      	ldrb	r0, [r1, #0]
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	4249      	negs	r1, r1
 800a9f2:	9100      	str	r1, [sp, #0]
 800a9f4:	005b      	lsls	r3, r3, #1
 800a9f6:	0021      	movs	r1, r4
 800a9f8:	f003 fa54 	bl	800dea4 <writePxMutex>
		CheckForEnterKey();
 800a9fc:	f7ff ff8c 	bl	800a918 <CheckForEnterKey>
}
 800aa00:	2000      	movs	r0, #0
 800aa02:	b00a      	add	sp, #40	; 0x28
 800aa04:	bc04      	pop	{r2}
 800aa06:	4691      	mov	r9, r2
 800aa08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (type == directionStream) {
 800aa0a:	4b8b      	ldr	r3, [pc, #556]	; (800ac38 <SendMeasurementResult+0x2bc>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d137      	bne.n	800aa82 <SendMeasurementResult+0x106>
			switch (int_value) {
 800aa12:	2c09      	cmp	r4, #9
 800aa14:	d830      	bhi.n	800aa78 <SendMeasurementResult+0xfc>
 800aa16:	00a3      	lsls	r3, r4, #2
 800aa18:	4a89      	ldr	r2, [pc, #548]	; (800ac40 <SendMeasurementResult+0x2c4>)
 800aa1a:	58d3      	ldr	r3, [r2, r3]
 800aa1c:	469f      	mov	pc, r3
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800aa1e:	4b82      	ldr	r3, [pc, #520]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aa20:	4a88      	ldr	r2, [pc, #544]	; (800ac44 <SendMeasurementResult+0x2c8>)
 800aa22:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Up";
 800aa24:	4a88      	ldr	r2, [pc, #544]	; (800ac48 <SendMeasurementResult+0x2cc>)
				break;
 800aa26:	e7c6      	b.n	800a9b6 <SendMeasurementResult+0x3a>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800aa28:	4b7f      	ldr	r3, [pc, #508]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aa2a:	4a86      	ldr	r2, [pc, #536]	; (800ac44 <SendMeasurementResult+0x2c8>)
 800aa2c:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Down";
 800aa2e:	4a87      	ldr	r2, [pc, #540]	; (800ac4c <SendMeasurementResult+0x2d0>)
				break;
 800aa30:	e7c1      	b.n	800a9b6 <SendMeasurementResult+0x3a>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800aa32:	4b7d      	ldr	r3, [pc, #500]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aa34:	4a83      	ldr	r2, [pc, #524]	; (800ac44 <SendMeasurementResult+0x2c8>)
 800aa36:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Right";
 800aa38:	4a85      	ldr	r2, [pc, #532]	; (800ac50 <SendMeasurementResult+0x2d4>)
				break;
 800aa3a:	e7bc      	b.n	800a9b6 <SendMeasurementResult+0x3a>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800aa3c:	4b7a      	ldr	r3, [pc, #488]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aa3e:	4a81      	ldr	r2, [pc, #516]	; (800ac44 <SendMeasurementResult+0x2c8>)
 800aa40:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Left";
 800aa42:	4a84      	ldr	r2, [pc, #528]	; (800ac54 <SendMeasurementResult+0x2d8>)
				break;
 800aa44:	e7b7      	b.n	800a9b6 <SendMeasurementResult+0x3a>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800aa46:	4b78      	ldr	r3, [pc, #480]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aa48:	4a7e      	ldr	r2, [pc, #504]	; (800ac44 <SendMeasurementResult+0x2c8>)
 800aa4a:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Up_Right_Corner";
 800aa4c:	4a82      	ldr	r2, [pc, #520]	; (800ac58 <SendMeasurementResult+0x2dc>)
				break;
 800aa4e:	e7b2      	b.n	800a9b6 <SendMeasurementResult+0x3a>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800aa50:	4b75      	ldr	r3, [pc, #468]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aa52:	4a7c      	ldr	r2, [pc, #496]	; (800ac44 <SendMeasurementResult+0x2c8>)
 800aa54:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Down_Right_Corner";
 800aa56:	4a81      	ldr	r2, [pc, #516]	; (800ac5c <SendMeasurementResult+0x2e0>)
				break;
 800aa58:	e7ad      	b.n	800a9b6 <SendMeasurementResult+0x3a>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800aa5a:	4b73      	ldr	r3, [pc, #460]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aa5c:	4a79      	ldr	r2, [pc, #484]	; (800ac44 <SendMeasurementResult+0x2c8>)
 800aa5e:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Up_Left_Corner";
 800aa60:	4a7f      	ldr	r2, [pc, #508]	; (800ac60 <SendMeasurementResult+0x2e4>)
				break;
 800aa62:	e7a8      	b.n	800a9b6 <SendMeasurementResult+0x3a>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800aa64:	4b70      	ldr	r3, [pc, #448]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aa66:	4a77      	ldr	r2, [pc, #476]	; (800ac44 <SendMeasurementResult+0x2c8>)
 800aa68:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Down_Left_Corner";
 800aa6a:	4a7e      	ldr	r2, [pc, #504]	; (800ac64 <SendMeasurementResult+0x2e8>)
				break;
 800aa6c:	e7a3      	b.n	800a9b6 <SendMeasurementResult+0x3a>
				pcTMsg = (int8_t*) "%s!!\r\n";
 800aa6e:	4b6e      	ldr	r3, [pc, #440]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aa70:	4a7d      	ldr	r2, [pc, #500]	; (800ac68 <SendMeasurementResult+0x2ec>)
 800aa72:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Click";
 800aa74:	4a7d      	ldr	r2, [pc, #500]	; (800ac6c <SendMeasurementResult+0x2f0>)
				break;
 800aa76:	e79e      	b.n	800a9b6 <SendMeasurementResult+0x3a>
				pcTMsg = (int8_t*) "We are not moving (%s) !!\r\n";
 800aa78:	4b6b      	ldr	r3, [pc, #428]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aa7a:	4a7d      	ldr	r2, [pc, #500]	; (800ac70 <SendMeasurementResult+0x2f4>)
 800aa7c:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Idle";
 800aa7e:	4a7d      	ldr	r2, [pc, #500]	; (800ac74 <SendMeasurementResult+0x2f8>)
				break;
 800aa80:	e799      	b.n	800a9b6 <SendMeasurementResult+0x3a>
		} else if (type == cartesianStream && joystickMode == REQ_STREAM_BUFFER) {
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d001      	beq.n	800aa8a <SendMeasurementResult+0x10e>
	int8_t *message = (int8_t*) "";
 800aa86:	4a6a      	ldr	r2, [pc, #424]	; (800ac30 <SendMeasurementResult+0x2b4>)
 800aa88:	e795      	b.n	800a9b6 <SendMeasurementResult+0x3a>
		} else if (type == cartesianStream && joystickMode == REQ_STREAM_BUFFER) {
 800aa8a:	4b6a      	ldr	r3, [pc, #424]	; (800ac34 <SendMeasurementResult+0x2b8>)
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	d001      	beq.n	800aa96 <SendMeasurementResult+0x11a>
	int8_t *message = (int8_t*) "";
 800aa92:	4a67      	ldr	r2, [pc, #412]	; (800ac30 <SendMeasurementResult+0x2b4>)
 800aa94:	e78f      	b.n	800a9b6 <SendMeasurementResult+0x3a>
			sendCValue1 = fXValue;
 800aa96:	9708      	str	r7, [sp, #32]
			sendCValue2 = fYValue;
 800aa98:	9607      	str	r6, [sp, #28]
	int8_t *message = (int8_t*) "";
 800aa9a:	4a65      	ldr	r2, [pc, #404]	; (800ac30 <SendMeasurementResult+0x2b4>)
 800aa9c:	e78b      	b.n	800a9b6 <SendMeasurementResult+0x3a>
	switch (joystickMode) {
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d1ae      	bne.n	800aa00 <SendMeasurementResult+0x84>
		if (type == directionStream) {
 800aaa2:	4b65      	ldr	r3, [pc, #404]	; (800ac38 <SendMeasurementResult+0x2bc>)
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d02a      	beq.n	800ab00 <SendMeasurementResult+0x184>
		} else if (type == cartesianStream) {
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d02d      	beq.n	800ab0a <SendMeasurementResult+0x18e>
				strlen((char*) pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800aaae:	9c03      	ldr	r4, [sp, #12]
 800aab0:	0020      	movs	r0, r4
 800aab2:	f7f5 fb31 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcOutputString,
 800aab6:	23fa      	movs	r3, #250	; 0xfa
 800aab8:	b282      	uxth	r2, r0
 800aaba:	4960      	ldr	r1, [pc, #384]	; (800ac3c <SendMeasurementResult+0x2c0>)
 800aabc:	7808      	ldrb	r0, [r1, #0]
 800aabe:	2101      	movs	r1, #1
 800aac0:	4249      	negs	r1, r1
 800aac2:	9100      	str	r1, [sp, #0]
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	0021      	movs	r1, r4
 800aac8:	f003 f9ec 	bl	800dea4 <writePxMutex>
		CheckForEnterKey();
 800aacc:	f7ff ff24 	bl	800a918 <CheckForEnterKey>
		break;
 800aad0:	e796      	b.n	800aa00 <SendMeasurementResult+0x84>
			sprintf((char*) pcOutputString, (char*) pcTMsg, message);
 800aad2:	4b55      	ldr	r3, [pc, #340]	; (800ac28 <SendMeasurementResult+0x2ac>)
 800aad4:	6819      	ldr	r1, [r3, #0]
 800aad6:	9803      	ldr	r0, [sp, #12]
 800aad8:	f009 fbe2 	bl	80142a0 <siprintf>
 800aadc:	e77f      	b.n	800a9de <SendMeasurementResult+0x62>
			sprintf((char*) pcOutputString, (char*) pcDMsg, fXMessage,
 800aade:	9806      	ldr	r0, [sp, #24]
 800aae0:	f7f7 fc10 	bl	8002304 <__aeabi_f2d>
 800aae4:	0006      	movs	r6, r0
 800aae6:	000f      	movs	r7, r1
 800aae8:	9805      	ldr	r0, [sp, #20]
 800aaea:	f7f7 fc0b 	bl	8002304 <__aeabi_f2d>
 800aaee:	9000      	str	r0, [sp, #0]
 800aaf0:	9101      	str	r1, [sp, #4]
 800aaf2:	0032      	movs	r2, r6
 800aaf4:	003b      	movs	r3, r7
 800aaf6:	4960      	ldr	r1, [pc, #384]	; (800ac78 <SendMeasurementResult+0x2fc>)
 800aaf8:	9803      	ldr	r0, [sp, #12]
 800aafa:	f009 fbd1 	bl	80142a0 <siprintf>
 800aafe:	e76e      	b.n	800a9de <SendMeasurementResult+0x62>
			sprintf((char*) pcOutputString, (char*) pcTRawMsg, message);
 800ab00:	495e      	ldr	r1, [pc, #376]	; (800ac7c <SendMeasurementResult+0x300>)
 800ab02:	9803      	ldr	r0, [sp, #12]
 800ab04:	f009 fbcc 	bl	80142a0 <siprintf>
 800ab08:	e7d1      	b.n	800aaae <SendMeasurementResult+0x132>
			sprintf((char*) pcOutputString, (char*) pcDRawMsg, fXMessage,
 800ab0a:	9806      	ldr	r0, [sp, #24]
 800ab0c:	f7f7 fbfa 	bl	8002304 <__aeabi_f2d>
 800ab10:	0006      	movs	r6, r0
 800ab12:	000f      	movs	r7, r1
 800ab14:	9805      	ldr	r0, [sp, #20]
 800ab16:	f7f7 fbf5 	bl	8002304 <__aeabi_f2d>
 800ab1a:	9000      	str	r0, [sp, #0]
 800ab1c:	9101      	str	r1, [sp, #4]
 800ab1e:	0032      	movs	r2, r6
 800ab20:	003b      	movs	r3, r7
 800ab22:	4957      	ldr	r1, [pc, #348]	; (800ac80 <SendMeasurementResult+0x304>)
 800ab24:	9803      	ldr	r0, [sp, #12]
 800ab26:	f009 fbbb 	bl	80142a0 <siprintf>
 800ab2a:	e7c0      	b.n	800aaae <SendMeasurementResult+0x132>
		if (type == directionStream) {
 800ab2c:	4b42      	ldr	r3, [pc, #264]	; (800ac38 <SendMeasurementResult+0x2bc>)
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d115      	bne.n	800ab60 <SendMeasurementResult+0x1e4>
			if (module == myID) {
 800ab34:	4b53      	ldr	r3, [pc, #332]	; (800ac84 <SendMeasurementResult+0x308>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	42ab      	cmp	r3, r5
 800ab3a:	d009      	beq.n	800ab50 <SendMeasurementResult+0x1d4>
				messageParams[0] = port;
 800ab3c:	4b52      	ldr	r3, [pc, #328]	; (800ac88 <SendMeasurementResult+0x30c>)
 800ab3e:	464a      	mov	r2, r9
 800ab40:	701a      	strb	r2, [r3, #0]
				messageParams[1] = (int_value);
 800ab42:	705c      	strb	r4, [r3, #1]
				SendMessageToModule(module, CODE_PORT_FORWARD,
 800ab44:	2202      	movs	r2, #2
 800ab46:	2123      	movs	r1, #35	; 0x23
 800ab48:	0028      	movs	r0, r5
 800ab4a:	f7fd fd4f 	bl	80085ec <SendMessageToModule>
 800ab4e:	e757      	b.n	800aa00 <SendMeasurementResult+0x84>
				temp[0] = (int_value);
 800ab50:	494e      	ldr	r1, [pc, #312]	; (800ac8c <SendMeasurementResult+0x310>)
 800ab52:	700c      	strb	r4, [r1, #0]
				writePxITMutex(port, (char*) &temp, sizeof(uint8_t), 10);
 800ab54:	230a      	movs	r3, #10
 800ab56:	2201      	movs	r2, #1
 800ab58:	4648      	mov	r0, r9
 800ab5a:	f003 f9d1 	bl	800df00 <writePxITMutex>
 800ab5e:	e74f      	b.n	800aa00 <SendMeasurementResult+0x84>
		} else if (type == cartesianStream) {
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d000      	beq.n	800ab66 <SendMeasurementResult+0x1ea>
 800ab64:	e74c      	b.n	800aa00 <SendMeasurementResult+0x84>
			if (module == myID) {
 800ab66:	4b47      	ldr	r3, [pc, #284]	; (800ac84 <SendMeasurementResult+0x308>)
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	42ab      	cmp	r3, r5
 800ab6c:	d01a      	beq.n	800aba4 <SendMeasurementResult+0x228>
				messageParams[0] = port;
 800ab6e:	4b46      	ldr	r3, [pc, #280]	; (800ac88 <SendMeasurementResult+0x30c>)
 800ab70:	464a      	mov	r2, r9
 800ab72:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&fXMessage) + 3);
 800ab74:	aa06      	add	r2, sp, #24
 800ab76:	78d1      	ldrb	r1, [r2, #3]
 800ab78:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&fXMessage) + 2);
 800ab7a:	7891      	ldrb	r1, [r2, #2]
 800ab7c:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&fXMessage) + 1);
 800ab7e:	7851      	ldrb	r1, [r2, #1]
 800ab80:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&fXMessage) + 0);
 800ab82:	7812      	ldrb	r2, [r2, #0]
 800ab84:	711a      	strb	r2, [r3, #4]
				messageParams[5] = *((__IO uint8_t*) (&fYMessage) + 3);
 800ab86:	aa05      	add	r2, sp, #20
 800ab88:	78d1      	ldrb	r1, [r2, #3]
 800ab8a:	7159      	strb	r1, [r3, #5]
				messageParams[6] = *((__IO uint8_t*) (&fYMessage) + 2);
 800ab8c:	7891      	ldrb	r1, [r2, #2]
 800ab8e:	7199      	strb	r1, [r3, #6]
				messageParams[7] = *((__IO uint8_t*) (&fYMessage) + 1);
 800ab90:	7851      	ldrb	r1, [r2, #1]
 800ab92:	71d9      	strb	r1, [r3, #7]
				messageParams[8] = *((__IO uint8_t*) (&fYMessage) + 0);
 800ab94:	7812      	ldrb	r2, [r2, #0]
 800ab96:	721a      	strb	r2, [r3, #8]
				SendMessageToModule(module, CODE_PORT_FORWARD,
 800ab98:	2205      	movs	r2, #5
 800ab9a:	2123      	movs	r1, #35	; 0x23
 800ab9c:	0028      	movs	r0, r5
 800ab9e:	f7fd fd25 	bl	80085ec <SendMessageToModule>
 800aba2:	e72d      	b.n	800aa00 <SendMeasurementResult+0x84>
				temp[0] = *((__IO uint8_t*) (&fXMessage) + 3);
 800aba4:	ab06      	add	r3, sp, #24
 800aba6:	78da      	ldrb	r2, [r3, #3]
 800aba8:	4938      	ldr	r1, [pc, #224]	; (800ac8c <SendMeasurementResult+0x310>)
 800abaa:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&fXMessage) + 2);
 800abac:	789a      	ldrb	r2, [r3, #2]
 800abae:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&fXMessage) + 1);
 800abb0:	785a      	ldrb	r2, [r3, #1]
 800abb2:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&fXMessage) + 0);
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	70cb      	strb	r3, [r1, #3]
				temp[4] = *((__IO uint8_t*) (&fYMessage) + 3);
 800abb8:	ab05      	add	r3, sp, #20
 800abba:	78da      	ldrb	r2, [r3, #3]
 800abbc:	710a      	strb	r2, [r1, #4]
				temp[5] = *((__IO uint8_t*) (&fYMessage) + 2);
 800abbe:	789a      	ldrb	r2, [r3, #2]
 800abc0:	714a      	strb	r2, [r1, #5]
				temp[6] = *((__IO uint8_t*) (&fYMessage) + 1);
 800abc2:	785a      	ldrb	r2, [r3, #1]
 800abc4:	718a      	strb	r2, [r1, #6]
				temp[7] = *((__IO uint8_t*) (&fYMessage) + 0);
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	71cb      	strb	r3, [r1, #7]
				writePxITMutex(port, (char*) &temp[0], 8 * sizeof(uint8_t), 10);
 800abca:	230a      	movs	r3, #10
 800abcc:	2208      	movs	r2, #8
 800abce:	4648      	mov	r0, r9
 800abd0:	f003 f996 	bl	800df00 <writePxITMutex>
 800abd4:	e714      	b.n	800aa00 <SendMeasurementResult+0x84>
		if (type == directionStream) {
 800abd6:	4b18      	ldr	r3, [pc, #96]	; (800ac38 <SendMeasurementResult+0x2bc>)
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d017      	beq.n	800ac0e <SendMeasurementResult+0x292>
		} else if (type == cartesianStream) {
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d000      	beq.n	800abe4 <SendMeasurementResult+0x268>
 800abe2:	e70d      	b.n	800aa00 <SendMeasurementResult+0x84>
			memset(float_buffer1, 0, sizeof(float));
 800abe4:	2204      	movs	r2, #4
 800abe6:	2100      	movs	r1, #0
 800abe8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800abea:	f008 fbfb 	bl	80133e4 <memset>
			memcpy(float_buffer1, &sendCValue1, sizeof(float));
 800abee:	2204      	movs	r2, #4
 800abf0:	a908      	add	r1, sp, #32
 800abf2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800abf4:	f008 fbed 	bl	80133d2 <memcpy>
			memset(float_buffer2, 0, sizeof(float));
 800abf8:	2204      	movs	r2, #4
 800abfa:	2100      	movs	r1, #0
 800abfc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800abfe:	f008 fbf1 	bl	80133e4 <memset>
			memcpy(float_buffer2, &sendCValue2, sizeof(float));
 800ac02:	2204      	movs	r2, #4
 800ac04:	a907      	add	r1, sp, #28
 800ac06:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ac08:	f008 fbe3 	bl	80133d2 <memcpy>
 800ac0c:	e6f8      	b.n	800aa00 <SendMeasurementResult+0x84>
			memset(int_buffer, 0, sizeof(int));
 800ac0e:	2204      	movs	r2, #4
 800ac10:	2100      	movs	r1, #0
 800ac12:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ac14:	f008 fbe6 	bl	80133e4 <memset>
			memcpy(int_buffer, &sendTVariant, sizeof(int));
 800ac18:	2204      	movs	r2, #4
 800ac1a:	a909      	add	r1, sp, #36	; 0x24
 800ac1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ac1e:	f008 fbd8 	bl	80133d2 <memcpy>
 800ac22:	e6ed      	b.n	800aa00 <SendMeasurementResult+0x84>
 800ac24:	20000f44 	.word	0x20000f44
 800ac28:	200000b8 	.word	0x200000b8
 800ac2c:	0801a2e4 	.word	0x0801a2e4
 800ac30:	0801742c 	.word	0x0801742c
 800ac34:	200062e8 	.word	0x200062e8
 800ac38:	20006224 	.word	0x20006224
 800ac3c:	200002cf 	.word	0x200002cf
 800ac40:	08019a6c 	.word	0x08019a6c
 800ac44:	08019bd0 	.word	0x08019bd0
 800ac48:	08019b64 	.word	0x08019b64
 800ac4c:	08019b68 	.word	0x08019b68
 800ac50:	08019b70 	.word	0x08019b70
 800ac54:	08019b78 	.word	0x08019b78
 800ac58:	08019b80 	.word	0x08019b80
 800ac5c:	08019b90 	.word	0x08019b90
 800ac60:	08019ba4 	.word	0x08019ba4
 800ac64:	08019bb4 	.word	0x08019bb4
 800ac68:	08019b18 	.word	0x08019b18
 800ac6c:	08019b10 	.word	0x08019b10
 800ac70:	08019be8 	.word	0x08019be8
 800ac74:	08019bc8 	.word	0x08019bc8
 800ac78:	08019b20 	.word	0x08019b20
 800ac7c:	08019b4c 	.word	0x08019b4c
 800ac80:	08019b54 	.word	0x08019b54
 800ac84:	20000896 	.word	0x20000896
 800ac88:	20000758 	.word	0x20000758
 800ac8c:	20000f40 	.word	0x20000f40

0800ac90 <JoystickTimerCallback>:
void JoystickTimerCallback(TimerHandle_t xTimerJoystick) {
 800ac90:	b510      	push	{r4, lr}
 800ac92:	0004      	movs	r4, r0
	joystickStopMeasurement();
 800ac94:	f7ff fdce 	bl	800a834 <joystickStopMeasurement>
	tid = (uint32_t) pvTimerGetTimerID(xTimerJoystick);
 800ac98:	0020      	movs	r0, r4
 800ac9a:	f005 f8ba 	bl	800fe12 <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 800ac9e:	28ff      	cmp	r0, #255	; 0xff
 800aca0:	d000      	beq.n	800aca4 <JoystickTimerCallback+0x14>
}
 800aca2:	bd10      	pop	{r4, pc}
		startMeasurement = STOP_MEASUREMENT;
 800aca4:	2300      	movs	r3, #0
 800aca6:	4a02      	ldr	r2, [pc, #8]	; (800acb0 <JoystickTimerCallback+0x20>)
 800aca8:	7013      	strb	r3, [r2, #0]
		joystickMode = REQ_IDLE;		// Stop the streaming task
 800acaa:	4a02      	ldr	r2, [pc, #8]	; (800acb4 <JoystickTimerCallback+0x24>)
 800acac:	7013      	strb	r3, [r2, #0]
}
 800acae:	e7f8      	b.n	800aca2 <JoystickTimerCallback+0x12>
 800acb0:	20000f3c 	.word	0x20000f3c
 800acb4:	200062e8 	.word	0x200062e8

0800acb8 <SystemClock_Config>:
void SystemClock_Config(void) {
 800acb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acba:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800acbc:	2401      	movs	r4, #1
 800acbe:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800acc0:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800acc2:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800acc4:	2310      	movs	r3, #16
 800acc6:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800acc8:	2702      	movs	r7, #2
 800acca:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800accc:	2680      	movs	r6, #128	; 0x80
 800acce:	0276      	lsls	r6, r6, #9
 800acd0:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800acd2:	2380      	movs	r3, #128	; 0x80
 800acd4:	035b      	lsls	r3, r3, #13
 800acd6:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800acd8:	2500      	movs	r5, #0
 800acda:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800acdc:	a80d      	add	r0, sp, #52	; 0x34
 800acde:	f006 fdeb 	bl	80118b8 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800ace2:	2307      	movs	r3, #7
 800ace4:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ace6:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ace8:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800acea:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800acec:	2101      	movs	r1, #1
 800acee:	a809      	add	r0, sp, #36	; 0x24
 800acf0:	f007 f886 	bl	8011e00 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800acf4:	4b1a      	ldr	r3, [pc, #104]	; (800ad60 <SystemClock_Config+0xa8>)
 800acf6:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800acf8:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800acfa:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800acfc:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800acfe:	a802      	add	r0, sp, #8
 800ad00:	f007 fa12 	bl	8012128 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800ad04:	4d17      	ldr	r5, [pc, #92]	; (800ad64 <SystemClock_Config+0xac>)
 800ad06:	69ea      	ldr	r2, [r5, #28]
 800ad08:	2180      	movs	r1, #128	; 0x80
 800ad0a:	0549      	lsls	r1, r1, #21
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	61ea      	str	r2, [r5, #28]
 800ad10:	69eb      	ldr	r3, [r5, #28]
 800ad12:	400b      	ands	r3, r1
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800ad18:	f006 fdc4 	bl	80118a4 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800ad1c:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800ad1e:	23c0      	movs	r3, #192	; 0xc0
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800ad24:	a802      	add	r0, sp, #8
 800ad26:	f007 f9ff 	bl	8012128 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800ad2a:	f007 f9d9 	bl	80120e0 <HAL_RCC_GetHCLKFreq>
 800ad2e:	21fa      	movs	r1, #250	; 0xfa
 800ad30:	0089      	lsls	r1, r1, #2
 800ad32:	f7f5 fa03 	bl	800013c <__udivsi3>
 800ad36:	f005 fd99 	bl	801086c <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800ad3a:	2004      	movs	r0, #4
 800ad3c:	f005 fdb2 	bl	80108a4 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE()
 800ad40:	69ab      	ldr	r3, [r5, #24]
 800ad42:	4323      	orrs	r3, r4
 800ad44:	61ab      	str	r3, [r5, #24]
 800ad46:	69ab      	ldr	r3, [r5, #24]
 800ad48:	401c      	ands	r4, r3
 800ad4a:	9401      	str	r4, [sp, #4]
 800ad4c:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800ad4e:	2001      	movs	r0, #1
 800ad50:	2200      	movs	r2, #0
 800ad52:	2100      	movs	r1, #0
 800ad54:	4240      	negs	r0, r0
 800ad56:	f005 fd45 	bl	80107e4 <HAL_NVIC_SetPriority>
}
 800ad5a:	b01b      	add	sp, #108	; 0x6c
 800ad5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	00040003 	.word	0x00040003
 800ad64:	40021000 	.word	0x40021000

0800ad68 <SaveToRO>:
uint8_t SaveToRO(void) {
 800ad68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad6a:	46c6      	mov	lr, r8
 800ad6c:	b500      	push	{lr}
 800ad6e:	b086      	sub	sp, #24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800ad70:	2215      	movs	r2, #21
 800ad72:	2100      	movs	r1, #0
 800ad74:	4668      	mov	r0, sp
 800ad76:	f008 fb35 	bl	80133e4 <memset>
	HAL_FLASH_Unlock();
 800ad7a:	f006 fb99 	bl	80114b0 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800ad7e:	4866      	ldr	r0, [pc, #408]	; (800af18 <SaveToRO+0x1b0>)
 800ad80:	f006 fc44 	bl	801160c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800ad84:	4865      	ldr	r0, [pc, #404]	; (800af1c <SaveToRO+0x1b4>)
 800ad86:	f006 fbb1 	bl	80114ec <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d10b      	bne.n	800ada6 <SaveToRO+0x3e>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ad8e:	4a64      	ldr	r2, [pc, #400]	; (800af20 <SaveToRO+0x1b8>)
 800ad90:	6913      	ldr	r3, [r2, #16]
 800ad92:	2102      	movs	r1, #2
 800ad94:	438b      	bics	r3, r1
 800ad96:	6113      	str	r3, [r2, #16]
	if (myID) {
 800ad98:	4b62      	ldr	r3, [pc, #392]	; (800af24 <SaveToRO+0x1bc>)
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	2a00      	cmp	r2, #0
 800ad9e:	d109      	bne.n	800adb4 <SaveToRO+0x4c>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800ada0:	2400      	movs	r4, #0
 800ada2:	4e61      	ldr	r6, [pc, #388]	; (800af28 <SaveToRO+0x1c0>)
 800ada4:	e081      	b.n	800aeaa <SaveToRO+0x142>
		return pFlash.ErrorCode;
 800ada6:	4b61      	ldr	r3, [pc, #388]	; (800af2c <SaveToRO+0x1c4>)
 800ada8:	69d8      	ldr	r0, [r3, #28]
 800adaa:	b2c0      	uxtb	r0, r0
}
 800adac:	b006      	add	sp, #24
 800adae:	bc04      	pop	{r2}
 800adb0:	4690      	mov	r8, r2
 800adb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 800adb4:	4b5e      	ldr	r3, [pc, #376]	; (800af30 <SaveToRO+0x1c8>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	021b      	lsls	r3, r3, #8
 800adba:	18d2      	adds	r2, r2, r3
 800adbc:	b292      	uxth	r2, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800adbe:	2300      	movs	r3, #0
 800adc0:	4955      	ldr	r1, [pc, #340]	; (800af18 <SaveToRO+0x1b0>)
 800adc2:	2001      	movs	r0, #1
 800adc4:	f006 fbc0 	bl	8011548 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800adc8:	4854      	ldr	r0, [pc, #336]	; (800af1c <SaveToRO+0x1b4>)
 800adca:	f006 fb8f 	bl	80114ec <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800adce:	2800      	cmp	r0, #0
 800add0:	d107      	bne.n	800ade2 <SaveToRO+0x7a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800add2:	4a53      	ldr	r2, [pc, #332]	; (800af20 <SaveToRO+0x1b8>)
 800add4:	6913      	ldr	r3, [r2, #16]
 800add6:	2101      	movs	r1, #1
 800add8:	438b      	bics	r3, r1
 800adda:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800addc:	2601      	movs	r6, #1
	uint16_t add = 2, temp = 0;
 800adde:	2502      	movs	r5, #2
		for (uint8_t i = 1; i <= N; i++) {
 800ade0:	e02e      	b.n	800ae40 <SaveToRO+0xd8>
			return pFlash.ErrorCode;
 800ade2:	4b52      	ldr	r3, [pc, #328]	; (800af2c <SaveToRO+0x1c4>)
 800ade4:	69d8      	ldr	r0, [r3, #28]
 800ade6:	b2c0      	uxtb	r0, r0
 800ade8:	e7e0      	b.n	800adac <SaveToRO+0x44>
						return pFlash.ErrorCode;
 800adea:	4b50      	ldr	r3, [pc, #320]	; (800af2c <SaveToRO+0x1c4>)
 800adec:	69d8      	ldr	r0, [r3, #28]
 800adee:	b2c0      	uxtb	r0, r0
 800adf0:	e7dc      	b.n	800adac <SaveToRO+0x44>
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800adf2:	3401      	adds	r4, #1
 800adf4:	b2e4      	uxtb	r4, r4
 800adf6:	2c0a      	cmp	r4, #10
 800adf8:	d820      	bhi.n	800ae3c <SaveToRO+0xd4>
				if (array[i - 1][0]) {
 800adfa:	1e72      	subs	r2, r6, #1
 800adfc:	2316      	movs	r3, #22
 800adfe:	4353      	muls	r3, r2
 800ae00:	494c      	ldr	r1, [pc, #304]	; (800af34 <SaveToRO+0x1cc>)
 800ae02:	5a5b      	ldrh	r3, [r3, r1]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d0f4      	beq.n	800adf2 <SaveToRO+0x8a>
					RO_START_ADDRESS + add, array[i - 1][j]);
 800ae08:	0093      	lsls	r3, r2, #2
 800ae0a:	189b      	adds	r3, r3, r2
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	189b      	adds	r3, r3, r2
 800ae10:	191b      	adds	r3, r3, r4
 800ae12:	005b      	lsls	r3, r3, #1
 800ae14:	5a5a      	ldrh	r2, [r3, r1]
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800ae16:	4b40      	ldr	r3, [pc, #256]	; (800af18 <SaveToRO+0x1b0>)
 800ae18:	18e9      	adds	r1, r5, r3
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	2001      	movs	r0, #1
 800ae1e:	f006 fb93 	bl	8011548 <HAL_FLASH_Program>
					add += 2;
 800ae22:	3502      	adds	r5, #2
 800ae24:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation(
 800ae26:	483d      	ldr	r0, [pc, #244]	; (800af1c <SaveToRO+0x1b4>)
 800ae28:	f006 fb60 	bl	80114ec <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d1dc      	bne.n	800adea <SaveToRO+0x82>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ae30:	4a3b      	ldr	r2, [pc, #236]	; (800af20 <SaveToRO+0x1b8>)
 800ae32:	6913      	ldr	r3, [r2, #16]
 800ae34:	2101      	movs	r1, #1
 800ae36:	438b      	bics	r3, r1
 800ae38:	6113      	str	r3, [r2, #16]
 800ae3a:	e7da      	b.n	800adf2 <SaveToRO+0x8a>
		for (uint8_t i = 1; i <= N; i++) {
 800ae3c:	3601      	adds	r6, #1
 800ae3e:	b2f6      	uxtb	r6, r6
 800ae40:	4b3b      	ldr	r3, [pc, #236]	; (800af30 <SaveToRO+0x1c8>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	42b3      	cmp	r3, r6
 800ae46:	d3ab      	bcc.n	800ada0 <SaveToRO+0x38>
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800ae48:	2400      	movs	r4, #0
 800ae4a:	e7d4      	b.n	800adf6 <SaveToRO+0x8e>
					return pFlash.ErrorCode;
 800ae4c:	4b37      	ldr	r3, [pc, #220]	; (800af2c <SaveToRO+0x1c4>)
 800ae4e:	69d8      	ldr	r0, [r3, #28]
 800ae50:	b2c0      	uxtb	r0, r0
 800ae52:	e7ab      	b.n	800adac <SaveToRO+0x44>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800ae54:	2500      	movs	r5, #0
 800ae56:	00bb      	lsls	r3, r7, #2
 800ae58:	19db      	adds	r3, r3, r7
 800ae5a:	009a      	lsls	r2, r3, #2
 800ae5c:	4b36      	ldr	r3, [pc, #216]	; (800af38 <SaveToRO+0x1d0>)
 800ae5e:	189b      	adds	r3, r3, r2
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	4698      	mov	r8, r3
 800ae64:	0018      	movs	r0, r3
 800ae66:	f7f5 f957 	bl	8000118 <strlen>
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	0840      	lsrs	r0, r0, #1
 800ae6e:	4285      	cmp	r5, r0
 800ae70:	d219      	bcs.n	800aea6 <SaveToRO+0x13e>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800ae72:	006b      	lsls	r3, r5, #1
 800ae74:	4642      	mov	r2, r8
 800ae76:	5ad2      	ldrh	r2, [r2, r3]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800ae78:	2300      	movs	r3, #0
 800ae7a:	0031      	movs	r1, r6
 800ae7c:	2001      	movs	r0, #1
 800ae7e:	f006 fb63 	bl	8011548 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800ae82:	4826      	ldr	r0, [pc, #152]	; (800af1c <SaveToRO+0x1b4>)
 800ae84:	f006 fb32 	bl	80114ec <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d108      	bne.n	800ae9e <SaveToRO+0x136>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ae8c:	4a24      	ldr	r2, [pc, #144]	; (800af20 <SaveToRO+0x1b8>)
 800ae8e:	6913      	ldr	r3, [r2, #16]
 800ae90:	2101      	movs	r1, #1
 800ae92:	438b      	bics	r3, r1
 800ae94:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800ae96:	3602      	adds	r6, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800ae98:	3501      	adds	r5, #1
 800ae9a:	b2ed      	uxtb	r5, r5
 800ae9c:	e7db      	b.n	800ae56 <SaveToRO+0xee>
					return pFlash.ErrorCode;
 800ae9e:	4b23      	ldr	r3, [pc, #140]	; (800af2c <SaveToRO+0x1c4>)
 800aea0:	69d8      	ldr	r0, [r3, #28]
 800aea2:	b2c0      	uxtb	r0, r0
 800aea4:	e782      	b.n	800adac <SaveToRO+0x44>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800aea6:	3401      	adds	r4, #1
 800aea8:	b2e4      	uxtb	r4, r4
 800aeaa:	4b24      	ldr	r3, [pc, #144]	; (800af3c <SaveToRO+0x1d4>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	42a3      	cmp	r3, r4
 800aeb0:	d92d      	bls.n	800af0e <SaveToRO+0x1a6>
		if (snippets[s].cond.conditionType) {
 800aeb2:	0027      	movs	r7, r4
 800aeb4:	00a3      	lsls	r3, r4, #2
 800aeb6:	191b      	adds	r3, r3, r4
 800aeb8:	009a      	lsls	r2, r3, #2
 800aeba:	4b1f      	ldr	r3, [pc, #124]	; (800af38 <SaveToRO+0x1d0>)
 800aebc:	5cd3      	ldrb	r3, [r2, r3]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0f1      	beq.n	800aea6 <SaveToRO+0x13e>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800aec2:	23fe      	movs	r3, #254	; 0xfe
 800aec4:	466a      	mov	r2, sp
 800aec6:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800aec8:	00a3      	lsls	r3, r4, #2
 800aeca:	191b      	adds	r3, r3, r4
 800aecc:	0099      	lsls	r1, r3, #2
 800aece:	4b1a      	ldr	r3, [pc, #104]	; (800af38 <SaveToRO+0x1d0>)
 800aed0:	18c9      	adds	r1, r1, r3
 800aed2:	2214      	movs	r2, #20
 800aed4:	466b      	mov	r3, sp
 800aed6:	1c58      	adds	r0, r3, #1
 800aed8:	f008 fa7b 	bl	80133d2 <memcpy>
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800aedc:	2500      	movs	r5, #0
 800aede:	2d09      	cmp	r5, #9
 800aee0:	d8b8      	bhi.n	800ae54 <SaveToRO+0xec>
						*(uint16_t*) &snipBuffer[j * 2]);
 800aee2:	006b      	lsls	r3, r5, #1
 800aee4:	466a      	mov	r2, sp
 800aee6:	5ad2      	ldrh	r2, [r2, r3]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800aee8:	2300      	movs	r3, #0
 800aeea:	0031      	movs	r1, r6
 800aeec:	2001      	movs	r0, #1
 800aeee:	f006 fb2b 	bl	8011548 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800aef2:	480a      	ldr	r0, [pc, #40]	; (800af1c <SaveToRO+0x1b4>)
 800aef4:	f006 fafa 	bl	80114ec <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d1a7      	bne.n	800ae4c <SaveToRO+0xe4>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800aefc:	4a08      	ldr	r2, [pc, #32]	; (800af20 <SaveToRO+0x1b8>)
 800aefe:	6913      	ldr	r3, [r2, #16]
 800af00:	2101      	movs	r1, #1
 800af02:	438b      	bics	r3, r1
 800af04:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800af06:	3602      	adds	r6, #2
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800af08:	3501      	adds	r5, #1
 800af0a:	b2ed      	uxtb	r5, r5
 800af0c:	e7e7      	b.n	800aede <SaveToRO+0x176>
	HAL_FLASH_Lock();
 800af0e:	f006 fae3 	bl	80114d8 <HAL_FLASH_Lock>
	return result;
 800af12:	2000      	movs	r0, #0
 800af14:	e74a      	b.n	800adac <SaveToRO+0x44>
 800af16:	46c0      	nop			; (mov r8, r8)
 800af18:	0801d800 	.word	0x0801d800
 800af1c:	0000c350 	.word	0x0000c350
 800af20:	40022000 	.word	0x40022000
 800af24:	20000896 	.word	0x20000896
 800af28:	0801dc00 	.word	0x0801dc00
 800af2c:	20006648 	.word	0x20006648
 800af30:	2000001c 	.word	0x2000001c
 800af34:	200002d0 	.word	0x200002d0
 800af38:	20006164 	.word	0x20006164
 800af3c:	20000a37 	.word	0x20000a37

0800af40 <ClearROtopology>:
uint8_t ClearROtopology(void) {
 800af40:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800af42:	228f      	movs	r2, #143	; 0x8f
 800af44:	0092      	lsls	r2, r2, #2
 800af46:	2100      	movs	r1, #0
 800af48:	4805      	ldr	r0, [pc, #20]	; (800af60 <ClearROtopology+0x20>)
 800af4a:	f008 fa4b 	bl	80133e4 <memset>
	N = 1;
 800af4e:	4b05      	ldr	r3, [pc, #20]	; (800af64 <ClearROtopology+0x24>)
 800af50:	2201      	movs	r2, #1
 800af52:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800af54:	4b04      	ldr	r3, [pc, #16]	; (800af68 <ClearROtopology+0x28>)
 800af56:	2200      	movs	r2, #0
 800af58:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800af5a:	f7ff ff05 	bl	800ad68 <SaveToRO>
}
 800af5e:	bd10      	pop	{r4, pc}
 800af60:	200002d0 	.word	0x200002d0
 800af64:	2000001c 	.word	0x2000001c
 800af68:	20000896 	.word	0x20000896

0800af6c <Module_Init>:
void Module_Init(void) {
 800af6c:	b500      	push	{lr}
 800af6e:	b085      	sub	sp, #20
	MX_GPIO_Init();
 800af70:	f002 fa0a 	bl	800d388 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800af74:	f002 fdf4 	bl	800db60 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800af78:	f002 fe0a 	bl	800db90 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800af7c:	f002 fe20 	bl	800dbc0 <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 800af80:	f002 fe36 	bl	800dbf0 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800af84:	f002 fe4c 	bl	800dc20 <MX_USART6_UART_Init>
	MX_ADC_Init();
 800af88:	f000 fee4 	bl	800bd54 <MX_ADC_Init>
	xTimerJoystick = xTimerCreate("JoystickTimer", pdMS_TO_TICKS(1000), pdFALSE,
 800af8c:	21fa      	movs	r1, #250	; 0xfa
 800af8e:	4b0d      	ldr	r3, [pc, #52]	; (800afc4 <Module_Init+0x58>)
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	2301      	movs	r3, #1
 800af94:	2200      	movs	r2, #0
 800af96:	0089      	lsls	r1, r1, #2
 800af98:	480b      	ldr	r0, [pc, #44]	; (800afc8 <Module_Init+0x5c>)
 800af9a:	f004 fddd 	bl	800fb58 <xTimerCreate>
 800af9e:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <Module_Init+0x60>)
 800afa0:	6018      	str	r0, [r3, #0]
	xTaskCreate(JoystickTask, (const char* ) "JoystickTask",
 800afa2:	22a0      	movs	r2, #160	; 0xa0
 800afa4:	2300      	movs	r3, #0
 800afa6:	9303      	str	r3, [sp, #12]
 800afa8:	9302      	str	r3, [sp, #8]
 800afaa:	4b09      	ldr	r3, [pc, #36]	; (800afd0 <Module_Init+0x64>)
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	2303      	movs	r3, #3
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	2300      	movs	r3, #0
 800afb4:	0052      	lsls	r2, r2, #1
 800afb6:	4907      	ldr	r1, [pc, #28]	; (800afd4 <Module_Init+0x68>)
 800afb8:	4807      	ldr	r0, [pc, #28]	; (800afd8 <Module_Init+0x6c>)
 800afba:	f003 ff3b 	bl	800ee34 <xTaskGenericCreate>
}
 800afbe:	b005      	add	sp, #20
 800afc0:	bd00      	pop	{pc}
 800afc2:	46c0      	nop			; (mov r8, r8)
 800afc4:	0800ac91 	.word	0x0800ac91
 800afc8:	08019af0 	.word	0x08019af0
 800afcc:	20000f48 	.word	0x20000f48
 800afd0:	20000f2c 	.word	0x20000f2c
 800afd4:	08019b00 	.word	0x08019b00
 800afd8:	0800b0e1 	.word	0x0800b0e1

0800afdc <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800afdc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&demoCommandDefinition);
 800afde:	4809      	ldr	r0, [pc, #36]	; (800b004 <RegisterModuleCLICommands+0x28>)
 800afe0:	f003 f934 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&joystickStreamCommandDefinition);
 800afe4:	4808      	ldr	r0, [pc, #32]	; (800b008 <RegisterModuleCLICommands+0x2c>)
 800afe6:	f003 f931 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&joystickStopCommandDefinition);
 800afea:	4808      	ldr	r0, [pc, #32]	; (800b00c <RegisterModuleCLICommands+0x30>)
 800afec:	f003 f92e 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&variantModParamCommandDefinition);
 800aff0:	4807      	ldr	r0, [pc, #28]	; (800b010 <RegisterModuleCLICommands+0x34>)
 800aff2:	f003 f92b 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xModParamCommandDefinition);
 800aff6:	4807      	ldr	r0, [pc, #28]	; (800b014 <RegisterModuleCLICommands+0x38>)
 800aff8:	f003 f928 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&yModParamCommandDefinition);
 800affc:	4806      	ldr	r0, [pc, #24]	; (800b018 <RegisterModuleCLICommands+0x3c>)
 800affe:	f003 f925 	bl	800e24c <FreeRTOS_CLIRegisterCommand>
}
 800b002:	bd10      	pop	{r4, pc}
 800b004:	08019c04 	.word	0x08019c04
 800b008:	08019e08 	.word	0x08019e08
 800b00c:	08019c68 	.word	0x08019c68
 800b010:	0801a2ec 	.word	0x0801a2ec
 800b014:	0801a304 	.word	0x0801a304
 800b018:	0801a314 	.word	0x0801a314

0800b01c <GetPort>:
	if (huart->Instance == USART5)
 800b01c:	6803      	ldr	r3, [r0, #0]
 800b01e:	4a0d      	ldr	r2, [pc, #52]	; (800b054 <GetPort+0x38>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d00f      	beq.n	800b044 <GetPort+0x28>
	else if (huart->Instance == USART2)
 800b024:	4a0c      	ldr	r2, [pc, #48]	; (800b058 <GetPort+0x3c>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d00e      	beq.n	800b048 <GetPort+0x2c>
	else if (huart->Instance == USART6)
 800b02a:	4a0c      	ldr	r2, [pc, #48]	; (800b05c <GetPort+0x40>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d00d      	beq.n	800b04c <GetPort+0x30>
	else if (huart->Instance == USART3)
 800b030:	4a0b      	ldr	r2, [pc, #44]	; (800b060 <GetPort+0x44>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d00c      	beq.n	800b050 <GetPort+0x34>
	else if (huart->Instance == USART1)
 800b036:	4a0b      	ldr	r2, [pc, #44]	; (800b064 <GetPort+0x48>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d001      	beq.n	800b040 <GetPort+0x24>
	return 0;
 800b03c:	2000      	movs	r0, #0
}
 800b03e:	4770      	bx	lr
		return P5;
 800b040:	2005      	movs	r0, #5
 800b042:	e7fc      	b.n	800b03e <GetPort+0x22>
		return P1;
 800b044:	2001      	movs	r0, #1
 800b046:	e7fa      	b.n	800b03e <GetPort+0x22>
		return P2;
 800b048:	2002      	movs	r0, #2
 800b04a:	e7f8      	b.n	800b03e <GetPort+0x22>
		return P3;
 800b04c:	2003      	movs	r0, #3
 800b04e:	e7f6      	b.n	800b03e <GetPort+0x22>
		return P4;
 800b050:	2004      	movs	r0, #4
 800b052:	e7f4      	b.n	800b03e <GetPort+0x22>
 800b054:	40005000 	.word	0x40005000
 800b058:	40004400 	.word	0x40004400
 800b05c:	40011400 	.word	0x40011400
 800b060:	40004800 	.word	0x40004800
 800b064:	40013800 	.word	0x40013800

0800b068 <HAL_GPIO_EXTI_Callback>:
	buttonB = !buttonB;
 800b068:	4a02      	ldr	r2, [pc, #8]	; (800b074 <HAL_GPIO_EXTI_Callback+0xc>)
 800b06a:	7813      	ldrb	r3, [r2, #0]
 800b06c:	2101      	movs	r1, #1
 800b06e:	404b      	eors	r3, r1
 800b070:	7013      	strb	r3, [r2, #0]
}
 800b072:	4770      	bx	lr
 800b074:	20000f34 	.word	0x20000f34

0800b078 <Stop_Joystick>:
Module_Status Stop_Joystick(void) {
 800b078:	b500      	push	{lr}
 800b07a:	b083      	sub	sp, #12
	joystickMode = REQ_IDLE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	4a08      	ldr	r2, [pc, #32]	; (800b0a0 <Stop_Joystick+0x28>)
 800b080:	7013      	strb	r3, [r2, #0]
	startMeasurement = STOP_MEASUREMENT;
 800b082:	4a08      	ldr	r2, [pc, #32]	; (800b0a4 <Stop_Joystick+0x2c>)
 800b084:	7013      	strb	r3, [r2, #0]
	xTimerStop(xTimerJoystick, 0);
 800b086:	4a08      	ldr	r2, [pc, #32]	; (800b0a8 <Stop_Joystick+0x30>)
 800b088:	6810      	ldr	r0, [r2, #0]
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	2200      	movs	r2, #0
 800b08e:	2103      	movs	r1, #3
 800b090:	f004 fd86 	bl	800fba0 <xTimerGenericCommand>
	joystickStopMeasurement();
 800b094:	f7ff fbce 	bl	800a834 <joystickStopMeasurement>
}
 800b098:	2000      	movs	r0, #0
 800b09a:	b003      	add	sp, #12
 800b09c:	bd00      	pop	{pc}
 800b09e:	46c0      	nop			; (mov r8, r8)
 800b0a0:	200062e8 	.word	0x200062e8
 800b0a4:	20000f3c 	.word	0x20000f3c
 800b0a8:	20000f48 	.word	0x20000f48

0800b0ac <joystickStopCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE joystickStopCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800b0ac:	b510      	push	{r4, lr}
 800b0ae:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b0b0:	d101      	bne.n	800b0b6 <joystickStopCommand+0xa>
 800b0b2:	b672      	cpsid	i
 800b0b4:	e7fe      	b.n	800b0b4 <joystickStopCommand+0x8>

	result = Stop_Joystick();
 800b0b6:	f7ff ffdf 	bl	800b078 <Stop_Joystick>

	if (H10R4_OK == result) {
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d005      	beq.n	800b0ca <joystickStopCommand+0x1e>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
	} else {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800b0be:	222d      	movs	r2, #45	; 0x2d
 800b0c0:	4905      	ldr	r1, [pc, #20]	; (800b0d8 <joystickStopCommand+0x2c>)
 800b0c2:	0020      	movs	r0, r4
 800b0c4:	f008 f985 	bl	80133d2 <memcpy>
 800b0c8:	e004      	b.n	800b0d4 <joystickStopCommand+0x28>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 800b0ca:	2221      	movs	r2, #33	; 0x21
 800b0cc:	4903      	ldr	r1, [pc, #12]	; (800b0dc <joystickStopCommand+0x30>)
 800b0ce:	0020      	movs	r0, r4
 800b0d0:	f008 f97f 	bl	80133d2 <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	bd10      	pop	{r4, pc}
 800b0d8:	08019c38 	.word	0x08019c38
 800b0dc:	08019c14 	.word	0x08019c14

0800b0e0 <JoystickTask>:
static void JoystickTask(void *argument) {
 800b0e0:	b530      	push	{r4, r5, lr}
 800b0e2:	b087      	sub	sp, #28
	uint32_t t0 = 0;
 800b0e4:	2400      	movs	r4, #0
 800b0e6:	e112      	b.n	800b30e <JoystickTask+0x22e>
			t0 = HAL_GetTick();
 800b0e8:	f005 f888 	bl	80101fc <HAL_GetTick>
 800b0ec:	0004      	movs	r4, r0
			if (type == directionStream) {
 800b0ee:	4b8f      	ldr	r3, [pc, #572]	; (800b32c <JoystickTask+0x24c>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d013      	beq.n	800b11e <JoystickTask+0x3e>
			} else if (type == cartesianStream) {
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d128      	bne.n	800b14c <JoystickTask+0x6c>
				cartesianCoordinates();
 800b0fa:	f7ff fb2b 	bl	800a754 <cartesianCoordinates>
				SendMeasurementResult(joystickMode, 0, x, y, 0, 0,
 800b0fe:	4b8c      	ldr	r3, [pc, #560]	; (800b330 <JoystickTask+0x250>)
 800b100:	7818      	ldrb	r0, [r3, #0]
 800b102:	b2c0      	uxtb	r0, r0
 800b104:	4b8b      	ldr	r3, [pc, #556]	; (800b334 <JoystickTask+0x254>)
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	4b8b      	ldr	r3, [pc, #556]	; (800b338 <JoystickTask+0x258>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2100      	movs	r1, #0
 800b10e:	9104      	str	r1, [sp, #16]
 800b110:	9103      	str	r1, [sp, #12]
 800b112:	9102      	str	r1, [sp, #8]
 800b114:	9101      	str	r1, [sp, #4]
 800b116:	9100      	str	r1, [sp, #0]
 800b118:	f7ff fc30 	bl	800a97c <SendMeasurementResult>
 800b11c:	e016      	b.n	800b14c <JoystickTask+0x6c>
				joystickState = Get_Direction();
 800b11e:	f7ff fa2b 	bl	800a578 <Get_Direction>
 800b122:	b2c0      	uxtb	r0, r0
 800b124:	4b85      	ldr	r3, [pc, #532]	; (800b33c <JoystickTask+0x25c>)
 800b126:	7018      	strb	r0, [r3, #0]
				SendMeasurementResult(joystickMode, joystickState, 0, 0, 0, 0,
 800b128:	4a81      	ldr	r2, [pc, #516]	; (800b330 <JoystickTask+0x250>)
 800b12a:	7810      	ldrb	r0, [r2, #0]
 800b12c:	b2c0      	uxtb	r0, r0
 800b12e:	7819      	ldrb	r1, [r3, #0]
 800b130:	b2c9      	uxtb	r1, r1
 800b132:	2200      	movs	r2, #0
 800b134:	2300      	movs	r3, #0
 800b136:	9304      	str	r3, [sp, #16]
 800b138:	9303      	str	r3, [sp, #12]
 800b13a:	9302      	str	r3, [sp, #8]
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	1c13      	adds	r3, r2, #0
 800b142:	f7ff fc1b 	bl	800a97c <SendMeasurementResult>
 800b146:	e001      	b.n	800b14c <JoystickTask+0x6c>
				taskYIELD();
 800b148:	f004 feca 	bl	800fee0 <vPortYield>
			while (HAL_GetTick() - t0 < (joystickPeriod - 1) && !stopB) {
 800b14c:	f005 f856 	bl	80101fc <HAL_GetTick>
 800b150:	1b00      	subs	r0, r0, r4
 800b152:	4b7b      	ldr	r3, [pc, #492]	; (800b340 <JoystickTask+0x260>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3b01      	subs	r3, #1
 800b158:	4298      	cmp	r0, r3
 800b15a:	d300      	bcc.n	800b15e <JoystickTask+0x7e>
 800b15c:	e0d5      	b.n	800b30a <JoystickTask+0x22a>
 800b15e:	4b79      	ldr	r3, [pc, #484]	; (800b344 <JoystickTask+0x264>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d0f0      	beq.n	800b148 <JoystickTask+0x68>
 800b166:	e0d0      	b.n	800b30a <JoystickTask+0x22a>
			t0 = HAL_GetTick();
 800b168:	f005 f848 	bl	80101fc <HAL_GetTick>
 800b16c:	0004      	movs	r4, r0
			if (type == directionStream) {
 800b16e:	4b6f      	ldr	r3, [pc, #444]	; (800b32c <JoystickTask+0x24c>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d013      	beq.n	800b19e <JoystickTask+0xbe>
			} else if (type == cartesianStream) {
 800b176:	2b01      	cmp	r3, #1
 800b178:	d128      	bne.n	800b1cc <JoystickTask+0xec>
				cartesianCoordinates();
 800b17a:	f7ff faeb 	bl	800a754 <cartesianCoordinates>
				SendMeasurementResult(joystickMode, 0, x, y, 0, 0,
 800b17e:	4b6c      	ldr	r3, [pc, #432]	; (800b330 <JoystickTask+0x250>)
 800b180:	7818      	ldrb	r0, [r3, #0]
 800b182:	b2c0      	uxtb	r0, r0
 800b184:	4b6b      	ldr	r3, [pc, #428]	; (800b334 <JoystickTask+0x254>)
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	4b6b      	ldr	r3, [pc, #428]	; (800b338 <JoystickTask+0x258>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2100      	movs	r1, #0
 800b18e:	9104      	str	r1, [sp, #16]
 800b190:	9103      	str	r1, [sp, #12]
 800b192:	9102      	str	r1, [sp, #8]
 800b194:	9101      	str	r1, [sp, #4]
 800b196:	9100      	str	r1, [sp, #0]
 800b198:	f7ff fbf0 	bl	800a97c <SendMeasurementResult>
 800b19c:	e016      	b.n	800b1cc <JoystickTask+0xec>
				joystickState = Get_Direction();
 800b19e:	f7ff f9eb 	bl	800a578 <Get_Direction>
 800b1a2:	b2c0      	uxtb	r0, r0
 800b1a4:	4b65      	ldr	r3, [pc, #404]	; (800b33c <JoystickTask+0x25c>)
 800b1a6:	7018      	strb	r0, [r3, #0]
				SendMeasurementResult(joystickMode, joystickState, 0, 0, 0, 0,
 800b1a8:	4a61      	ldr	r2, [pc, #388]	; (800b330 <JoystickTask+0x250>)
 800b1aa:	7810      	ldrb	r0, [r2, #0]
 800b1ac:	b2c0      	uxtb	r0, r0
 800b1ae:	7819      	ldrb	r1, [r3, #0]
 800b1b0:	b2c9      	uxtb	r1, r1
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	9304      	str	r3, [sp, #16]
 800b1b8:	9303      	str	r3, [sp, #12]
 800b1ba:	9302      	str	r3, [sp, #8]
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	1c13      	adds	r3, r2, #0
 800b1c2:	f7ff fbdb 	bl	800a97c <SendMeasurementResult>
 800b1c6:	e001      	b.n	800b1cc <JoystickTask+0xec>
				taskYIELD();
 800b1c8:	f004 fe8a 	bl	800fee0 <vPortYield>
			while (HAL_GetTick() - t0 < (joystickPeriod - 1) && !stopB) {
 800b1cc:	f005 f816 	bl	80101fc <HAL_GetTick>
 800b1d0:	1b00      	subs	r0, r0, r4
 800b1d2:	4b5b      	ldr	r3, [pc, #364]	; (800b340 <JoystickTask+0x260>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	4298      	cmp	r0, r3
 800b1da:	d300      	bcc.n	800b1de <JoystickTask+0xfe>
 800b1dc:	e095      	b.n	800b30a <JoystickTask+0x22a>
 800b1de:	4b59      	ldr	r3, [pc, #356]	; (800b344 <JoystickTask+0x264>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0f0      	beq.n	800b1c8 <JoystickTask+0xe8>
 800b1e6:	e090      	b.n	800b30a <JoystickTask+0x22a>
			if (type == directionStream) {
 800b1e8:	4b50      	ldr	r3, [pc, #320]	; (800b32c <JoystickTask+0x24c>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d015      	beq.n	800b21c <JoystickTask+0x13c>
			} else if (type == cartesianStream) {
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d12f      	bne.n	800b254 <JoystickTask+0x174>
				cartesianCoordinates();
 800b1f4:	f7ff faae 	bl	800a754 <cartesianCoordinates>
				SendMeasurementResult(joystickMode, 0, x, y, 0, joystickPort,
 800b1f8:	4b4d      	ldr	r3, [pc, #308]	; (800b330 <JoystickTask+0x250>)
 800b1fa:	7818      	ldrb	r0, [r3, #0]
 800b1fc:	b2c0      	uxtb	r0, r0
 800b1fe:	4b4d      	ldr	r3, [pc, #308]	; (800b334 <JoystickTask+0x254>)
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	4b4d      	ldr	r3, [pc, #308]	; (800b338 <JoystickTask+0x258>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2100      	movs	r1, #0
 800b208:	9104      	str	r1, [sp, #16]
 800b20a:	9103      	str	r1, [sp, #12]
 800b20c:	9102      	str	r1, [sp, #8]
 800b20e:	4d4e      	ldr	r5, [pc, #312]	; (800b348 <JoystickTask+0x268>)
 800b210:	782d      	ldrb	r5, [r5, #0]
 800b212:	9501      	str	r5, [sp, #4]
 800b214:	9100      	str	r1, [sp, #0]
 800b216:	f7ff fbb1 	bl	800a97c <SendMeasurementResult>
 800b21a:	e01b      	b.n	800b254 <JoystickTask+0x174>
				t0 = HAL_GetTick();
 800b21c:	f004 ffee 	bl	80101fc <HAL_GetTick>
 800b220:	0004      	movs	r4, r0
				joystickState = Get_Direction();
 800b222:	f7ff f9a9 	bl	800a578 <Get_Direction>
 800b226:	b2c0      	uxtb	r0, r0
 800b228:	4b44      	ldr	r3, [pc, #272]	; (800b33c <JoystickTask+0x25c>)
 800b22a:	7018      	strb	r0, [r3, #0]
				SendMeasurementResult(joystickMode, joystickState, 0, 0, 0,
 800b22c:	4a40      	ldr	r2, [pc, #256]	; (800b330 <JoystickTask+0x250>)
 800b22e:	7810      	ldrb	r0, [r2, #0]
 800b230:	b2c0      	uxtb	r0, r0
 800b232:	7819      	ldrb	r1, [r3, #0]
 800b234:	b2c9      	uxtb	r1, r1
 800b236:	2200      	movs	r2, #0
 800b238:	2300      	movs	r3, #0
 800b23a:	9304      	str	r3, [sp, #16]
 800b23c:	9303      	str	r3, [sp, #12]
 800b23e:	9302      	str	r3, [sp, #8]
 800b240:	4d41      	ldr	r5, [pc, #260]	; (800b348 <JoystickTask+0x268>)
 800b242:	782d      	ldrb	r5, [r5, #0]
 800b244:	9501      	str	r5, [sp, #4]
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	1c13      	adds	r3, r2, #0
 800b24a:	f7ff fb97 	bl	800a97c <SendMeasurementResult>
 800b24e:	e001      	b.n	800b254 <JoystickTask+0x174>
				taskYIELD();
 800b250:	f004 fe46 	bl	800fee0 <vPortYield>
			while (HAL_GetTick() - t0 < (joystickPeriod - 1) && !stopB) {
 800b254:	f004 ffd2 	bl	80101fc <HAL_GetTick>
 800b258:	1b00      	subs	r0, r0, r4
 800b25a:	4b39      	ldr	r3, [pc, #228]	; (800b340 <JoystickTask+0x260>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3b01      	subs	r3, #1
 800b260:	4298      	cmp	r0, r3
 800b262:	d252      	bcs.n	800b30a <JoystickTask+0x22a>
 800b264:	4b37      	ldr	r3, [pc, #220]	; (800b344 <JoystickTask+0x264>)
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d0f1      	beq.n	800b250 <JoystickTask+0x170>
 800b26c:	e04d      	b.n	800b30a <JoystickTask+0x22a>
			if (type == directionStream) {
 800b26e:	4b2f      	ldr	r3, [pc, #188]	; (800b32c <JoystickTask+0x24c>)
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d01a      	beq.n	800b2ac <JoystickTask+0x1cc>
			} else if (type == cartesianStream) {
 800b276:	2b01      	cmp	r3, #1
 800b278:	d138      	bne.n	800b2ec <JoystickTask+0x20c>
				cartesianCoordinates();
 800b27a:	f7ff fa6b 	bl	800a754 <cartesianCoordinates>
				SendMeasurementResult(joystickMode, 0, x, y, joystickModule, 0,
 800b27e:	4b2c      	ldr	r3, [pc, #176]	; (800b330 <JoystickTask+0x250>)
 800b280:	7818      	ldrb	r0, [r3, #0]
 800b282:	b2c0      	uxtb	r0, r0
 800b284:	4b2b      	ldr	r3, [pc, #172]	; (800b334 <JoystickTask+0x254>)
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	4b2b      	ldr	r3, [pc, #172]	; (800b338 <JoystickTask+0x258>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	492f      	ldr	r1, [pc, #188]	; (800b34c <JoystickTask+0x26c>)
 800b28e:	6809      	ldr	r1, [r1, #0]
 800b290:	9104      	str	r1, [sp, #16]
 800b292:	492f      	ldr	r1, [pc, #188]	; (800b350 <JoystickTask+0x270>)
 800b294:	6809      	ldr	r1, [r1, #0]
 800b296:	9103      	str	r1, [sp, #12]
 800b298:	2100      	movs	r1, #0
 800b29a:	9102      	str	r1, [sp, #8]
 800b29c:	9101      	str	r1, [sp, #4]
 800b29e:	492d      	ldr	r1, [pc, #180]	; (800b354 <JoystickTask+0x274>)
 800b2a0:	7809      	ldrb	r1, [r1, #0]
 800b2a2:	9100      	str	r1, [sp, #0]
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	f7ff fb69 	bl	800a97c <SendMeasurementResult>
 800b2aa:	e01f      	b.n	800b2ec <JoystickTask+0x20c>
				t0 = HAL_GetTick();
 800b2ac:	f004 ffa6 	bl	80101fc <HAL_GetTick>
 800b2b0:	0004      	movs	r4, r0
				v = calculateVariantValue(joystickVector, joystickMaxInterval);
 800b2b2:	4b29      	ldr	r3, [pc, #164]	; (800b358 <JoystickTask+0x278>)
 800b2b4:	6819      	ldr	r1, [r3, #0]
 800b2b6:	4b29      	ldr	r3, [pc, #164]	; (800b35c <JoystickTask+0x27c>)
 800b2b8:	7818      	ldrb	r0, [r3, #0]
 800b2ba:	f7ff facb 	bl	800a854 <calculateVariantValue>
 800b2be:	b2c1      	uxtb	r1, r0
 800b2c0:	4b27      	ldr	r3, [pc, #156]	; (800b360 <JoystickTask+0x280>)
 800b2c2:	7019      	strb	r1, [r3, #0]
				SendMeasurementResult(joystickMode, v, 0, 0, joystickModule, 0,
 800b2c4:	4b1a      	ldr	r3, [pc, #104]	; (800b330 <JoystickTask+0x250>)
 800b2c6:	7818      	ldrb	r0, [r3, #0]
 800b2c8:	b2c0      	uxtb	r0, r0
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	9303      	str	r3, [sp, #12]
 800b2d2:	4d24      	ldr	r5, [pc, #144]	; (800b364 <JoystickTask+0x284>)
 800b2d4:	682d      	ldr	r5, [r5, #0]
 800b2d6:	9502      	str	r5, [sp, #8]
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <JoystickTask+0x274>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	1c13      	adds	r3, r2, #0
 800b2e2:	f7ff fb4b 	bl	800a97c <SendMeasurementResult>
 800b2e6:	e001      	b.n	800b2ec <JoystickTask+0x20c>
				taskYIELD();
 800b2e8:	f004 fdfa 	bl	800fee0 <vPortYield>
			while (HAL_GetTick() - t0 < (joystickPeriod - 1) && !stopB) {
 800b2ec:	f004 ff86 	bl	80101fc <HAL_GetTick>
 800b2f0:	1b00      	subs	r0, r0, r4
 800b2f2:	4b13      	ldr	r3, [pc, #76]	; (800b340 <JoystickTask+0x260>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	4298      	cmp	r0, r3
 800b2fa:	d206      	bcs.n	800b30a <JoystickTask+0x22a>
 800b2fc:	4b11      	ldr	r3, [pc, #68]	; (800b344 <JoystickTask+0x264>)
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d0f1      	beq.n	800b2e8 <JoystickTask+0x208>
 800b304:	e001      	b.n	800b30a <JoystickTask+0x22a>
			Stop_Joystick();
 800b306:	f7ff feb7 	bl	800b078 <Stop_Joystick>
		taskYIELD();
 800b30a:	f004 fde9 	bl	800fee0 <vPortYield>
		switch (joystickMode) {
 800b30e:	4b08      	ldr	r3, [pc, #32]	; (800b330 <JoystickTask+0x250>)
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b0f      	cmp	r3, #15
 800b316:	d803      	bhi.n	800b320 <JoystickTask+0x240>
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	4a13      	ldr	r2, [pc, #76]	; (800b368 <JoystickTask+0x288>)
 800b31c:	58d3      	ldr	r3, [r2, r3]
 800b31e:	469f      	mov	pc, r3
			joystickMode = REQ_IDLE;
 800b320:	2300      	movs	r3, #0
 800b322:	4a03      	ldr	r2, [pc, #12]	; (800b330 <JoystickTask+0x250>)
 800b324:	7013      	strb	r3, [r2, #0]
			buttonB = 0;
 800b326:	4a11      	ldr	r2, [pc, #68]	; (800b36c <JoystickTask+0x28c>)
 800b328:	7013      	strb	r3, [r2, #0]
			break;
 800b32a:	e7ee      	b.n	800b30a <JoystickTask+0x22a>
 800b32c:	20006224 	.word	0x20006224
 800b330:	200062e8 	.word	0x200062e8
 800b334:	20006220 	.word	0x20006220
 800b338:	200063d8 	.word	0x200063d8
 800b33c:	20006298 	.word	0x20006298
 800b340:	200062a4 	.word	0x200062a4
 800b344:	20000f3d 	.word	0x20000f3d
 800b348:	200062a0 	.word	0x200062a0
 800b34c:	200000c4 	.word	0x200000c4
 800b350:	200000c0 	.word	0x200000c0
 800b354:	2000629a 	.word	0x2000629a
 800b358:	20000f38 	.word	0x20000f38
 800b35c:	20006360 	.word	0x20006360
 800b360:	200063d4 	.word	0x200063d4
 800b364:	200000bc 	.word	0x200000bc
 800b368:	08019a94 	.word	0x08019a94
 800b36c:	20000f34 	.word	0x20000f34

0800b370 <Stream_To_CLI>:
Module_Status Stream_To_CLI(uint32_t Period, uint32_t Timeout) {
 800b370:	b510      	push	{r4, lr}
 800b372:	b082      	sub	sp, #8
	joystickPeriod = Period;
 800b374:	4b19      	ldr	r3, [pc, #100]	; (800b3dc <Stream_To_CLI+0x6c>)
 800b376:	6018      	str	r0, [r3, #0]
	joystickTimeout = Timeout;
 800b378:	4b19      	ldr	r3, [pc, #100]	; (800b3e0 <Stream_To_CLI+0x70>)
 800b37a:	6019      	str	r1, [r3, #0]
	joystickMode = REQ_STREAM_CLI;
 800b37c:	4b19      	ldr	r3, [pc, #100]	; (800b3e4 <Stream_To_CLI+0x74>)
 800b37e:	2205      	movs	r2, #5
 800b380:	701a      	strb	r2, [r3, #0]
	if ((joystickTimeout > 0) && (joystickTimeout < 0xFFFFFFFF)) {
 800b382:	1e4b      	subs	r3, r1, #1
 800b384:	3303      	adds	r3, #3
 800b386:	d909      	bls.n	800b39c <Stream_To_CLI+0x2c>
	if (joystickTimeout > 0) {
 800b388:	4b15      	ldr	r3, [pc, #84]	; (800b3e0 <Stream_To_CLI+0x70>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <Stream_To_CLI+0x26>
		startMeasurement = START_MEASUREMENT;
 800b390:	4b15      	ldr	r3, [pc, #84]	; (800b3e8 <Stream_To_CLI+0x78>)
 800b392:	2201      	movs	r2, #1
 800b394:	701a      	strb	r2, [r3, #0]
}
 800b396:	2000      	movs	r0, #0
 800b398:	b002      	add	sp, #8
 800b39a:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(joystickTimeout), pdFALSE,
 800b39c:	014b      	lsls	r3, r1, #5
 800b39e:	1a5b      	subs	r3, r3, r1
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	1859      	adds	r1, r3, r1
 800b3a4:	00c8      	lsls	r0, r1, #3
		xTimerJoystick = xTimerCreate("JoystickTimer",
 800b3a6:	21fa      	movs	r1, #250	; 0xfa
 800b3a8:	0089      	lsls	r1, r1, #2
 800b3aa:	f7f4 fec7 	bl	800013c <__udivsi3>
 800b3ae:	0001      	movs	r1, r0
 800b3b0:	4b0e      	ldr	r3, [pc, #56]	; (800b3ec <Stream_To_CLI+0x7c>)
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	23ff      	movs	r3, #255	; 0xff
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	480d      	ldr	r0, [pc, #52]	; (800b3f0 <Stream_To_CLI+0x80>)
 800b3ba:	f004 fbcd 	bl	800fb58 <xTimerCreate>
 800b3be:	0004      	movs	r4, r0
 800b3c0:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <Stream_To_CLI+0x84>)
 800b3c2:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerJoystick, portMAX_DELAY);
 800b3c4:	f003 fe5a 	bl	800f07c <xTaskGetTickCount>
 800b3c8:	0002      	movs	r2, r0
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	425b      	negs	r3, r3
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	0020      	movs	r0, r4
 800b3d6:	f004 fbe3 	bl	800fba0 <xTimerGenericCommand>
 800b3da:	e7d5      	b.n	800b388 <Stream_To_CLI+0x18>
 800b3dc:	200062a4 	.word	0x200062a4
 800b3e0:	200064bc 	.word	0x200064bc
 800b3e4:	200062e8 	.word	0x200062e8
 800b3e8:	20000f3c 	.word	0x20000f3c
 800b3ec:	0800ac91 	.word	0x0800ac91
 800b3f0:	08019af0 	.word	0x08019af0
 800b3f4:	20000f48 	.word	0x20000f48

0800b3f8 <Stream_To_CLI_R>:
Module_Status Stream_To_CLI_R(uint32_t Period, uint32_t Timeout) {
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	b082      	sub	sp, #8
	joystickPeriod = Period;
 800b3fc:	4b19      	ldr	r3, [pc, #100]	; (800b464 <Stream_To_CLI_R+0x6c>)
 800b3fe:	6018      	str	r0, [r3, #0]
	joystickTimeout = Timeout;
 800b400:	4b19      	ldr	r3, [pc, #100]	; (800b468 <Stream_To_CLI_R+0x70>)
 800b402:	6019      	str	r1, [r3, #0]
	joystickMode = REQ_STREAM_RAW;
 800b404:	4b19      	ldr	r3, [pc, #100]	; (800b46c <Stream_To_CLI_R+0x74>)
 800b406:	2202      	movs	r2, #2
 800b408:	701a      	strb	r2, [r3, #0]
	if ((joystickTimeout > 0) && (joystickTimeout < 0xFFFFFFFF)) {
 800b40a:	1e4b      	subs	r3, r1, #1
 800b40c:	3303      	adds	r3, #3
 800b40e:	d909      	bls.n	800b424 <Stream_To_CLI_R+0x2c>
	if (joystickTimeout > 0) {
 800b410:	4b15      	ldr	r3, [pc, #84]	; (800b468 <Stream_To_CLI_R+0x70>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <Stream_To_CLI_R+0x26>
		startMeasurement = START_MEASUREMENT;
 800b418:	4b15      	ldr	r3, [pc, #84]	; (800b470 <Stream_To_CLI_R+0x78>)
 800b41a:	2201      	movs	r2, #1
 800b41c:	701a      	strb	r2, [r3, #0]
}
 800b41e:	2000      	movs	r0, #0
 800b420:	b002      	add	sp, #8
 800b422:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(joystickTimeout), pdFALSE,
 800b424:	014b      	lsls	r3, r1, #5
 800b426:	1a5b      	subs	r3, r3, r1
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	1859      	adds	r1, r3, r1
 800b42c:	00c8      	lsls	r0, r1, #3
		xTimerJoystick = xTimerCreate("JoystickTimer",
 800b42e:	21fa      	movs	r1, #250	; 0xfa
 800b430:	0089      	lsls	r1, r1, #2
 800b432:	f7f4 fe83 	bl	800013c <__udivsi3>
 800b436:	0001      	movs	r1, r0
 800b438:	4b0e      	ldr	r3, [pc, #56]	; (800b474 <Stream_To_CLI_R+0x7c>)
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	23ff      	movs	r3, #255	; 0xff
 800b43e:	2200      	movs	r2, #0
 800b440:	480d      	ldr	r0, [pc, #52]	; (800b478 <Stream_To_CLI_R+0x80>)
 800b442:	f004 fb89 	bl	800fb58 <xTimerCreate>
 800b446:	0004      	movs	r4, r0
 800b448:	4b0c      	ldr	r3, [pc, #48]	; (800b47c <Stream_To_CLI_R+0x84>)
 800b44a:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerJoystick, portMAX_DELAY);
 800b44c:	f003 fe16 	bl	800f07c <xTaskGetTickCount>
 800b450:	0002      	movs	r2, r0
 800b452:	2301      	movs	r3, #1
 800b454:	425b      	negs	r3, r3
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	2300      	movs	r3, #0
 800b45a:	2101      	movs	r1, #1
 800b45c:	0020      	movs	r0, r4
 800b45e:	f004 fb9f 	bl	800fba0 <xTimerGenericCommand>
 800b462:	e7d5      	b.n	800b410 <Stream_To_CLI_R+0x18>
 800b464:	200062a4 	.word	0x200062a4
 800b468:	200064bc 	.word	0x200064bc
 800b46c:	200062e8 	.word	0x200062e8
 800b470:	20000f3c 	.word	0x20000f3c
 800b474:	0800ac91 	.word	0x0800ac91
 800b478:	08019af0 	.word	0x08019af0
 800b47c:	20000f48 	.word	0x20000f48

0800b480 <Stream_To_Port>:
		uint32_t Timeout) {
 800b480:	b510      	push	{r4, lr}
 800b482:	b082      	sub	sp, #8
	joystickPort = Port;
 800b484:	4c18      	ldr	r4, [pc, #96]	; (800b4e8 <Stream_To_Port+0x68>)
 800b486:	7020      	strb	r0, [r4, #0]
	joystickModule = Module;
 800b488:	4818      	ldr	r0, [pc, #96]	; (800b4ec <Stream_To_Port+0x6c>)
 800b48a:	7001      	strb	r1, [r0, #0]
	joystickPeriod = Period;
 800b48c:	4918      	ldr	r1, [pc, #96]	; (800b4f0 <Stream_To_Port+0x70>)
 800b48e:	600a      	str	r2, [r1, #0]
	joystickTimeout = Timeout;
 800b490:	4a18      	ldr	r2, [pc, #96]	; (800b4f4 <Stream_To_Port+0x74>)
 800b492:	6013      	str	r3, [r2, #0]
	joystickMode = REQ_STREAM_PORT;
 800b494:	4a18      	ldr	r2, [pc, #96]	; (800b4f8 <Stream_To_Port+0x78>)
 800b496:	2103      	movs	r1, #3
 800b498:	7011      	strb	r1, [r2, #0]
	if ((joystickTimeout > 0) && (joystickTimeout < 0xFFFFFFFF)) {
 800b49a:	1e5a      	subs	r2, r3, #1
 800b49c:	3203      	adds	r2, #3
 800b49e:	d902      	bls.n	800b4a6 <Stream_To_Port+0x26>
}
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	b002      	add	sp, #8
 800b4a4:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(joystickTimeout), pdFALSE,
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	1ad2      	subs	r2, r2, r3
 800b4aa:	0092      	lsls	r2, r2, #2
 800b4ac:	18d3      	adds	r3, r2, r3
 800b4ae:	00d8      	lsls	r0, r3, #3
		xTimerJoystick = xTimerCreate("JoystickTimer",
 800b4b0:	21fa      	movs	r1, #250	; 0xfa
 800b4b2:	0089      	lsls	r1, r1, #2
 800b4b4:	f7f4 fe42 	bl	800013c <__udivsi3>
 800b4b8:	0001      	movs	r1, r0
 800b4ba:	4b10      	ldr	r3, [pc, #64]	; (800b4fc <Stream_To_Port+0x7c>)
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	23ff      	movs	r3, #255	; 0xff
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	480f      	ldr	r0, [pc, #60]	; (800b500 <Stream_To_Port+0x80>)
 800b4c4:	f004 fb48 	bl	800fb58 <xTimerCreate>
 800b4c8:	0004      	movs	r4, r0
 800b4ca:	4b0e      	ldr	r3, [pc, #56]	; (800b504 <Stream_To_Port+0x84>)
 800b4cc:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerJoystick, portMAX_DELAY);
 800b4ce:	f003 fdd5 	bl	800f07c <xTaskGetTickCount>
 800b4d2:	0002      	movs	r2, r0
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	425b      	negs	r3, r3
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	2101      	movs	r1, #1
 800b4de:	0020      	movs	r0, r4
 800b4e0:	f004 fb5e 	bl	800fba0 <xTimerGenericCommand>
 800b4e4:	e7dc      	b.n	800b4a0 <Stream_To_Port+0x20>
 800b4e6:	46c0      	nop			; (mov r8, r8)
 800b4e8:	200062a0 	.word	0x200062a0
 800b4ec:	2000629a 	.word	0x2000629a
 800b4f0:	200062a4 	.word	0x200062a4
 800b4f4:	200064bc 	.word	0x200064bc
 800b4f8:	200062e8 	.word	0x200062e8
 800b4fc:	0800ac91 	.word	0x0800ac91
 800b500:	08019af0 	.word	0x08019af0
 800b504:	20000f48 	.word	0x20000f48

0800b508 <Stream_To_Buffer>:
Module_Status Stream_To_Buffer(int *Buffer, uint32_t Period, uint32_t Timeout) {
 800b508:	b510      	push	{r4, lr}
 800b50a:	b082      	sub	sp, #8
	joystickPeriod = Period;
 800b50c:	4b17      	ldr	r3, [pc, #92]	; (800b56c <Stream_To_Buffer+0x64>)
 800b50e:	6019      	str	r1, [r3, #0]
	joystickTimeout = Timeout;
 800b510:	4b17      	ldr	r3, [pc, #92]	; (800b570 <Stream_To_Buffer+0x68>)
 800b512:	601a      	str	r2, [r3, #0]
	ptrBuf = Buffer;
 800b514:	4b17      	ldr	r3, [pc, #92]	; (800b574 <Stream_To_Buffer+0x6c>)
 800b516:	6018      	str	r0, [r3, #0]
	joystickMode = REQ_STREAM_BUFFER;
 800b518:	4b17      	ldr	r3, [pc, #92]	; (800b578 <Stream_To_Buffer+0x70>)
 800b51a:	2104      	movs	r1, #4
 800b51c:	7019      	strb	r1, [r3, #0]
	if ((joystickTimeout > 0) && (joystickTimeout < 0xFFFFFFFF)) {
 800b51e:	1e53      	subs	r3, r2, #1
 800b520:	3303      	adds	r3, #3
 800b522:	d902      	bls.n	800b52a <Stream_To_Buffer+0x22>
}
 800b524:	2000      	movs	r0, #0
 800b526:	b002      	add	sp, #8
 800b528:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(joystickTimeout), pdFALSE,
 800b52a:	0153      	lsls	r3, r2, #5
 800b52c:	1a9b      	subs	r3, r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	189a      	adds	r2, r3, r2
 800b532:	00d0      	lsls	r0, r2, #3
		xTimerJoystick = xTimerCreate("JoystickTimer",
 800b534:	21fa      	movs	r1, #250	; 0xfa
 800b536:	0089      	lsls	r1, r1, #2
 800b538:	f7f4 fe00 	bl	800013c <__udivsi3>
 800b53c:	0001      	movs	r1, r0
 800b53e:	4b0f      	ldr	r3, [pc, #60]	; (800b57c <Stream_To_Buffer+0x74>)
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	23ff      	movs	r3, #255	; 0xff
 800b544:	2200      	movs	r2, #0
 800b546:	480e      	ldr	r0, [pc, #56]	; (800b580 <Stream_To_Buffer+0x78>)
 800b548:	f004 fb06 	bl	800fb58 <xTimerCreate>
 800b54c:	0004      	movs	r4, r0
 800b54e:	4b0d      	ldr	r3, [pc, #52]	; (800b584 <Stream_To_Buffer+0x7c>)
 800b550:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerJoystick, portMAX_DELAY);
 800b552:	f003 fd93 	bl	800f07c <xTaskGetTickCount>
 800b556:	0002      	movs	r2, r0
 800b558:	2301      	movs	r3, #1
 800b55a:	425b      	negs	r3, r3
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	2300      	movs	r3, #0
 800b560:	2101      	movs	r1, #1
 800b562:	0020      	movs	r0, r4
 800b564:	f004 fb1c 	bl	800fba0 <xTimerGenericCommand>
 800b568:	e7dc      	b.n	800b524 <Stream_To_Buffer+0x1c>
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	200062a4 	.word	0x200062a4
 800b570:	200064bc 	.word	0x200064bc
 800b574:	200000bc 	.word	0x200000bc
 800b578:	200062e8 	.word	0x200062e8
 800b57c:	0800ac91 	.word	0x0800ac91
 800b580:	08019af0 	.word	0x08019af0
 800b584:	20000f48 	.word	0x20000f48

0800b588 <Stream_To_Cbuffer>:
		uint32_t Timeout) {
 800b588:	b510      	push	{r4, lr}
 800b58a:	b082      	sub	sp, #8
	joystickPeriod = Period;
 800b58c:	4c18      	ldr	r4, [pc, #96]	; (800b5f0 <Stream_To_Cbuffer+0x68>)
 800b58e:	6022      	str	r2, [r4, #0]
	joystickTimeout = Timeout;
 800b590:	4a18      	ldr	r2, [pc, #96]	; (800b5f4 <Stream_To_Cbuffer+0x6c>)
 800b592:	6013      	str	r3, [r2, #0]
	ptrCbuf1 = Buffer1;
 800b594:	4a18      	ldr	r2, [pc, #96]	; (800b5f8 <Stream_To_Cbuffer+0x70>)
 800b596:	6010      	str	r0, [r2, #0]
	ptrCbuf2 = Buffer2;
 800b598:	4a18      	ldr	r2, [pc, #96]	; (800b5fc <Stream_To_Cbuffer+0x74>)
 800b59a:	6011      	str	r1, [r2, #0]
	joystickMode = REQ_STREAM_BUFFER;
 800b59c:	4a18      	ldr	r2, [pc, #96]	; (800b600 <Stream_To_Cbuffer+0x78>)
 800b59e:	2104      	movs	r1, #4
 800b5a0:	7011      	strb	r1, [r2, #0]
	if ((joystickTimeout > 0) && (joystickTimeout < 0xFFFFFFFF)) {
 800b5a2:	1e5a      	subs	r2, r3, #1
 800b5a4:	3203      	adds	r2, #3
 800b5a6:	d902      	bls.n	800b5ae <Stream_To_Cbuffer+0x26>
}
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	b002      	add	sp, #8
 800b5ac:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(joystickTimeout), pdFALSE,
 800b5ae:	015a      	lsls	r2, r3, #5
 800b5b0:	1ad2      	subs	r2, r2, r3
 800b5b2:	0092      	lsls	r2, r2, #2
 800b5b4:	18d3      	adds	r3, r2, r3
 800b5b6:	00d8      	lsls	r0, r3, #3
		xTimerJoystick = xTimerCreate("JoystickTimer",
 800b5b8:	21fa      	movs	r1, #250	; 0xfa
 800b5ba:	0089      	lsls	r1, r1, #2
 800b5bc:	f7f4 fdbe 	bl	800013c <__udivsi3>
 800b5c0:	0001      	movs	r1, r0
 800b5c2:	4b10      	ldr	r3, [pc, #64]	; (800b604 <Stream_To_Cbuffer+0x7c>)
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	23ff      	movs	r3, #255	; 0xff
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	480f      	ldr	r0, [pc, #60]	; (800b608 <Stream_To_Cbuffer+0x80>)
 800b5cc:	f004 fac4 	bl	800fb58 <xTimerCreate>
 800b5d0:	0004      	movs	r4, r0
 800b5d2:	4b0e      	ldr	r3, [pc, #56]	; (800b60c <Stream_To_Cbuffer+0x84>)
 800b5d4:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerJoystick, portMAX_DELAY);
 800b5d6:	f003 fd51 	bl	800f07c <xTaskGetTickCount>
 800b5da:	0002      	movs	r2, r0
 800b5dc:	2301      	movs	r3, #1
 800b5de:	425b      	negs	r3, r3
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	0020      	movs	r0, r4
 800b5e8:	f004 fada 	bl	800fba0 <xTimerGenericCommand>
 800b5ec:	e7dc      	b.n	800b5a8 <Stream_To_Cbuffer+0x20>
 800b5ee:	46c0      	nop			; (mov r8, r8)
 800b5f0:	200062a4 	.word	0x200062a4
 800b5f4:	200064bc 	.word	0x200064bc
 800b5f8:	200000c0 	.word	0x200000c0
 800b5fc:	200000c4 	.word	0x200000c4
 800b600:	200062e8 	.word	0x200062e8
 800b604:	0800ac91 	.word	0x0800ac91
 800b608:	08019af0 	.word	0x08019af0
 800b60c:	20000f48 	.word	0x20000f48

0800b610 <joystickStreamCommand>:
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800b610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b612:	46d6      	mov	lr, sl
 800b614:	464f      	mov	r7, r9
 800b616:	b580      	push	{r7, lr}
 800b618:	b08d      	sub	sp, #52	; 0x34
 800b61a:	0004      	movs	r4, r0
 800b61c:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength2 = 0;
 800b622:	930a      	str	r3, [sp, #40]	; 0x28
	portBASE_TYPE xParameterStringLength3 = 0;
 800b624:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 = 0;
 800b626:	9308      	str	r3, [sp, #32]
	portBASE_TYPE xParameterStringLength5 = 0;
 800b628:	9307      	str	r3, [sp, #28]
	portBASE_TYPE xParameterStringLength6 = 0;
 800b62a:	9306      	str	r3, [sp, #24]
	configASSERT(pcWriteBuffer);
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d101      	bne.n	800b634 <joystickStreamCommand+0x24>
 800b630:	b672      	cpsid	i
 800b632:	e7fe      	b.n	800b632 <joystickStreamCommand+0x22>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800b634:	aa0b      	add	r2, sp, #44	; 0x2c
 800b636:	2101      	movs	r1, #1
 800b638:	0028      	movs	r0, r5
 800b63a:	f002 fe8d 	bl	800e358 <FreeRTOS_CLIGetParameter>
 800b63e:	0006      	movs	r6, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800b640:	aa0a      	add	r2, sp, #40	; 0x28
 800b642:	2102      	movs	r1, #2
 800b644:	0028      	movs	r0, r5
 800b646:	f002 fe87 	bl	800e358 <FreeRTOS_CLIGetParameter>
 800b64a:	0007      	movs	r7, r0
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800b64c:	aa09      	add	r2, sp, #36	; 0x24
 800b64e:	2103      	movs	r1, #3
 800b650:	0028      	movs	r0, r5
 800b652:	f002 fe81 	bl	800e358 <FreeRTOS_CLIGetParameter>
 800b656:	9002      	str	r0, [sp, #8]
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,
 800b658:	aa08      	add	r2, sp, #32
 800b65a:	2104      	movs	r1, #4
 800b65c:	0028      	movs	r0, r5
 800b65e:	f002 fe7b 	bl	800e358 <FreeRTOS_CLIGetParameter>
 800b662:	9005      	str	r0, [sp, #20]
	pcParameterString5 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 5,
 800b664:	aa07      	add	r2, sp, #28
 800b666:	2105      	movs	r1, #5
 800b668:	0028      	movs	r0, r5
 800b66a:	f002 fe75 	bl	800e358 <FreeRTOS_CLIGetParameter>
 800b66e:	9003      	str	r0, [sp, #12]
	pcParameterString6 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 6,
 800b670:	aa06      	add	r2, sp, #24
 800b672:	2106      	movs	r1, #6
 800b674:	0028      	movs	r0, r5
 800b676:	f002 fe6f 	bl	800e358 <FreeRTOS_CLIGetParameter>
 800b67a:	9004      	str	r0, [sp, #16]
	if (NULL != pcParameterString1
 800b67c:	2e00      	cmp	r6, #0
 800b67e:	d00a      	beq.n	800b696 <joystickStreamCommand+0x86>
			&& !strncmp((const char*) pcParameterString1, "-d", 2)) {
 800b680:	2202      	movs	r2, #2
 800b682:	49c8      	ldr	r1, [pc, #800]	; (800b9a4 <joystickStreamCommand+0x394>)
 800b684:	0030      	movs	r0, r6
 800b686:	f008 fe4f 	bl	8014328 <strncmp>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d103      	bne.n	800b696 <joystickStreamCommand+0x86>
		type = directionStream;
 800b68e:	2500      	movs	r5, #0
 800b690:	4ac5      	ldr	r2, [pc, #788]	; (800b9a8 <joystickStreamCommand+0x398>)
 800b692:	7015      	strb	r5, [r2, #0]
 800b694:	e010      	b.n	800b6b8 <joystickStreamCommand+0xa8>
	} else if (NULL != pcParameterString1
 800b696:	2e00      	cmp	r6, #0
 800b698:	d00b      	beq.n	800b6b2 <joystickStreamCommand+0xa2>
			&& !strncmp((const char*) pcParameterString1, "-c", 2)) {
 800b69a:	2202      	movs	r2, #2
 800b69c:	49c3      	ldr	r1, [pc, #780]	; (800b9ac <joystickStreamCommand+0x39c>)
 800b69e:	0030      	movs	r0, r6
 800b6a0:	f008 fe42 	bl	8014328 <strncmp>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d106      	bne.n	800b6b6 <joystickStreamCommand+0xa6>
		type = cartesianStream;
 800b6a8:	4bbf      	ldr	r3, [pc, #764]	; (800b9a8 <joystickStreamCommand+0x398>)
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	701a      	strb	r2, [r3, #0]
	Module_Status result = H10R4_OK;
 800b6ae:	2500      	movs	r5, #0
		type = cartesianStream;
 800b6b0:	e002      	b.n	800b6b8 <joystickStreamCommand+0xa8>
		result = H10R4_ERR_WrongParams;
 800b6b2:	2504      	movs	r5, #4
 800b6b4:	e000      	b.n	800b6b8 <joystickStreamCommand+0xa8>
 800b6b6:	2504      	movs	r5, #4
	if (NULL != pcParameterString3) {
 800b6b8:	9802      	ldr	r0, [sp, #8]
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d031      	beq.n	800b722 <joystickStreamCommand+0x112>
		Period = atoi((char*) pcParameterString3);
 800b6be:	f007 fe10 	bl	80132e2 <atoi>
 800b6c2:	9002      	str	r0, [sp, #8]
	if (NULL != pcParameterString4) {
 800b6c4:	9b05      	ldr	r3, [sp, #20]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d034      	beq.n	800b734 <joystickStreamCommand+0x124>
		if (!strncmp((const char*) pcParameterString4, "inf", 3)) {
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	49b8      	ldr	r1, [pc, #736]	; (800b9b0 <joystickStreamCommand+0x3a0>)
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	f008 fe2a 	bl	8014328 <strncmp>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d128      	bne.n	800b72a <joystickStreamCommand+0x11a>
			Timeout = portMAX_DELAY;
 800b6d8:	2601      	movs	r6, #1
 800b6da:	4276      	negs	r6, r6
	if (NULL != pcParameterString2
 800b6dc:	2f00      	cmp	r7, #0
 800b6de:	d02c      	beq.n	800b73a <joystickStreamCommand+0x12a>
			&& !strncmp((const char*) pcParameterString2, "cli", 3)) {
 800b6e0:	2203      	movs	r2, #3
 800b6e2:	49b4      	ldr	r1, [pc, #720]	; (800b9b4 <joystickStreamCommand+0x3a4>)
 800b6e4:	0038      	movs	r0, r7
 800b6e6:	f008 fe1f 	bl	8014328 <strncmp>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	d125      	bne.n	800b73a <joystickStreamCommand+0x12a>
		option = cli;
 800b6ee:	4bb2      	ldr	r3, [pc, #712]	; (800b9b8 <joystickStreamCommand+0x3a8>)
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	701a      	strb	r2, [r3, #0]
	switch (type) {
 800b6f4:	4bac      	ldr	r3, [pc, #688]	; (800b9a8 <joystickStreamCommand+0x398>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d056      	beq.n	800b7aa <joystickStreamCommand+0x19a>
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d100      	bne.n	800b702 <joystickStreamCommand+0xf2>
 800b700:	e0f0      	b.n	800b8e4 <joystickStreamCommand+0x2d4>
	if (H10R4_ERR_WrongParams == result) {
 800b702:	2d04      	cmp	r5, #4
 800b704:	d05b      	beq.n	800b7be <joystickStreamCommand+0x1ae>
	if (stopB) {
 800b706:	4bad      	ldr	r3, [pc, #692]	; (800b9bc <joystickStreamCommand+0x3ac>)
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d000      	beq.n	800b710 <joystickStreamCommand+0x100>
 800b70e:	e1a0      	b.n	800ba52 <joystickStreamCommand+0x442>
		memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800b710:	0020      	movs	r0, r4
 800b712:	f7f4 fd01 	bl	8000118 <strlen>
 800b716:	0002      	movs	r2, r0
 800b718:	2100      	movs	r1, #0
 800b71a:	0020      	movs	r0, r4
 800b71c:	f007 fe62 	bl	80133e4 <memset>
 800b720:	e1b4      	b.n	800ba8c <joystickStreamCommand+0x47c>
		result = H10R4_ERR_WrongParams;
 800b722:	2504      	movs	r5, #4
	uint32_t Period = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	9302      	str	r3, [sp, #8]
 800b728:	e7cc      	b.n	800b6c4 <joystickStreamCommand+0xb4>
			Timeout = atoi((char*) pcParameterString4);
 800b72a:	9805      	ldr	r0, [sp, #20]
 800b72c:	f007 fdd9 	bl	80132e2 <atoi>
 800b730:	0006      	movs	r6, r0
 800b732:	e7d3      	b.n	800b6dc <joystickStreamCommand+0xcc>
		result = H10R4_ERR_WrongParams;
 800b734:	2504      	movs	r5, #4
	uint32_t Timeout = 0;
 800b736:	2600      	movs	r6, #0
 800b738:	e7d0      	b.n	800b6dc <joystickStreamCommand+0xcc>
	} else if (NULL != pcParameterString2
 800b73a:	2f00      	cmp	r7, #0
 800b73c:	d00a      	beq.n	800b754 <joystickStreamCommand+0x144>
			&& !strncmp((const char*) pcParameterString2, "raw", 3)) {
 800b73e:	2203      	movs	r2, #3
 800b740:	499f      	ldr	r1, [pc, #636]	; (800b9c0 <joystickStreamCommand+0x3b0>)
 800b742:	0038      	movs	r0, r7
 800b744:	f008 fdf0 	bl	8014328 <strncmp>
 800b748:	2800      	cmp	r0, #0
 800b74a:	d103      	bne.n	800b754 <joystickStreamCommand+0x144>
		option = raw;
 800b74c:	4b9a      	ldr	r3, [pc, #616]	; (800b9b8 <joystickStreamCommand+0x3a8>)
 800b74e:	2201      	movs	r2, #1
 800b750:	701a      	strb	r2, [r3, #0]
 800b752:	e7cf      	b.n	800b6f4 <joystickStreamCommand+0xe4>
	} else if (NULL != pcParameterString2
 800b754:	2f00      	cmp	r7, #0
 800b756:	d00a      	beq.n	800b76e <joystickStreamCommand+0x15e>
			&& !strncmp((const char*) pcParameterString2, "variant", 7)) {
 800b758:	2207      	movs	r2, #7
 800b75a:	499a      	ldr	r1, [pc, #616]	; (800b9c4 <joystickStreamCommand+0x3b4>)
 800b75c:	0038      	movs	r0, r7
 800b75e:	f008 fde3 	bl	8014328 <strncmp>
 800b762:	2800      	cmp	r0, #0
 800b764:	d103      	bne.n	800b76e <joystickStreamCommand+0x15e>
		option = variant;
 800b766:	4b94      	ldr	r3, [pc, #592]	; (800b9b8 <joystickStreamCommand+0x3a8>)
 800b768:	2200      	movs	r2, #0
 800b76a:	701a      	strb	r2, [r3, #0]
 800b76c:	e7c2      	b.n	800b6f4 <joystickStreamCommand+0xe4>
	} else if (NULL != pcParameterString2
 800b76e:	2f00      	cmp	r7, #0
 800b770:	d00a      	beq.n	800b788 <joystickStreamCommand+0x178>
			&& !strncmp((const char*) pcParameterString2, "port", 4)) {
 800b772:	2204      	movs	r2, #4
 800b774:	4994      	ldr	r1, [pc, #592]	; (800b9c8 <joystickStreamCommand+0x3b8>)
 800b776:	0038      	movs	r0, r7
 800b778:	f008 fdd6 	bl	8014328 <strncmp>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d103      	bne.n	800b788 <joystickStreamCommand+0x178>
		option = port;
 800b780:	4b8d      	ldr	r3, [pc, #564]	; (800b9b8 <joystickStreamCommand+0x3a8>)
 800b782:	2203      	movs	r2, #3
 800b784:	701a      	strb	r2, [r3, #0]
 800b786:	e7b5      	b.n	800b6f4 <joystickStreamCommand+0xe4>
	} else if (NULL != pcParameterString2
 800b788:	2f00      	cmp	r7, #0
 800b78a:	d00a      	beq.n	800b7a2 <joystickStreamCommand+0x192>
			&& !strncmp((const char*) pcParameterString2, "buffer", 6)) {
 800b78c:	2206      	movs	r2, #6
 800b78e:	498f      	ldr	r1, [pc, #572]	; (800b9cc <joystickStreamCommand+0x3bc>)
 800b790:	0038      	movs	r0, r7
 800b792:	f008 fdc9 	bl	8014328 <strncmp>
 800b796:	2800      	cmp	r0, #0
 800b798:	d105      	bne.n	800b7a6 <joystickStreamCommand+0x196>
		option = buffer;
 800b79a:	4b87      	ldr	r3, [pc, #540]	; (800b9b8 <joystickStreamCommand+0x3a8>)
 800b79c:	2204      	movs	r2, #4
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	e7a8      	b.n	800b6f4 <joystickStreamCommand+0xe4>
		result = H10R4_ERR_WrongParams;
 800b7a2:	2504      	movs	r5, #4
 800b7a4:	e7a6      	b.n	800b6f4 <joystickStreamCommand+0xe4>
 800b7a6:	2504      	movs	r5, #4
 800b7a8:	e7a4      	b.n	800b6f4 <joystickStreamCommand+0xe4>
		switch (option) {
 800b7aa:	4b83      	ldr	r3, [pc, #524]	; (800b9b8 <joystickStreamCommand+0x3a8>)
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d031      	beq.n	800b816 <joystickStreamCommand+0x206>
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d016      	beq.n	800b7e4 <joystickStreamCommand+0x1d4>
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d04e      	beq.n	800b858 <joystickStreamCommand+0x248>
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d06d      	beq.n	800b89a <joystickStreamCommand+0x28a>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800b7be:	2212      	movs	r2, #18
 800b7c0:	4983      	ldr	r1, [pc, #524]	; (800b9d0 <joystickStreamCommand+0x3c0>)
 800b7c2:	0020      	movs	r0, r4
 800b7c4:	f007 fe05 	bl	80133d2 <memcpy>
						strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800b7c8:	0020      	movs	r0, r4
 800b7ca:	f7f4 fca5 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800b7ce:	b282      	uxth	r2, r0
 800b7d0:	4b80      	ldr	r3, [pc, #512]	; (800b9d4 <joystickStreamCommand+0x3c4>)
 800b7d2:	7818      	ldrb	r0, [r3, #0]
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	425b      	negs	r3, r3
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	3333      	adds	r3, #51	; 0x33
 800b7dc:	0021      	movs	r1, r4
 800b7de:	f002 fb61 	bl	800dea4 <writePxMutex>
 800b7e2:	e790      	b.n	800b706 <joystickStreamCommand+0xf6>
			if(result == H10R4_OK){
 800b7e4:	2d00      	cmp	r5, #0
 800b7e6:	d18c      	bne.n	800b702 <joystickStreamCommand+0xf2>
			joystickVector = atoi((char*) pcParameterString5);
 800b7e8:	9803      	ldr	r0, [sp, #12]
 800b7ea:	f007 fd7a 	bl	80132e2 <atoi>
 800b7ee:	1e43      	subs	r3, r0, #1
 800b7f0:	4198      	sbcs	r0, r3
 800b7f2:	4b79      	ldr	r3, [pc, #484]	; (800b9d8 <joystickStreamCommand+0x3c8>)
 800b7f4:	7018      	strb	r0, [r3, #0]
			joystickMaxInterval = atoi((char*) pcParameterString6);
 800b7f6:	9804      	ldr	r0, [sp, #16]
 800b7f8:	f007 fd73 	bl	80132e2 <atoi>
 800b7fc:	4b77      	ldr	r3, [pc, #476]	; (800b9dc <joystickStreamCommand+0x3cc>)
 800b7fe:	6018      	str	r0, [r3, #0]
			strcpy((char*) pcWriteBuffer, (char*) pcMessageTbuffer);
 800b800:	2260      	movs	r2, #96	; 0x60
 800b802:	4977      	ldr	r1, [pc, #476]	; (800b9e0 <joystickStreamCommand+0x3d0>)
 800b804:	0020      	movs	r0, r4
 800b806:	f007 fde4 	bl	80133d2 <memcpy>
			Stream_To_Buffer(&buf, Period, Timeout);
 800b80a:	0032      	movs	r2, r6
 800b80c:	9902      	ldr	r1, [sp, #8]
 800b80e:	4875      	ldr	r0, [pc, #468]	; (800b9e4 <joystickStreamCommand+0x3d4>)
 800b810:	f7ff fe7a 	bl	800b508 <Stream_To_Buffer>
 800b814:	e775      	b.n	800b702 <joystickStreamCommand+0xf2>
			if(result == H10R4_OK){
 800b816:	2d00      	cmp	r5, #0
 800b818:	d000      	beq.n	800b81c <joystickStreamCommand+0x20c>
 800b81a:	e772      	b.n	800b702 <joystickStreamCommand+0xf2>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800b81c:	2225      	movs	r2, #37	; 0x25
 800b81e:	4972      	ldr	r1, [pc, #456]	; (800b9e8 <joystickStreamCommand+0x3d8>)
 800b820:	0020      	movs	r0, r4
 800b822:	f007 fdd6 	bl	80133d2 <memcpy>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800b826:	0020      	movs	r0, r4
 800b828:	f7f4 fc76 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800b82c:	b282      	uxth	r2, r0
 800b82e:	4b69      	ldr	r3, [pc, #420]	; (800b9d4 <joystickStreamCommand+0x3c4>)
 800b830:	7818      	ldrb	r0, [r3, #0]
 800b832:	2301      	movs	r3, #1
 800b834:	425b      	negs	r3, r3
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	3333      	adds	r3, #51	; 0x33
 800b83a:	0021      	movs	r1, r4
 800b83c:	f002 fb32 	bl	800dea4 <writePxMutex>
			Stream_To_CLI_R(Period, Timeout);
 800b840:	0031      	movs	r1, r6
 800b842:	9802      	ldr	r0, [sp, #8]
 800b844:	f7ff fdd8 	bl	800b3f8 <Stream_To_CLI_R>
			while (startMeasurement != STOP_MEASUREMENT) {
 800b848:	4b68      	ldr	r3, [pc, #416]	; (800b9ec <joystickStreamCommand+0x3dc>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d100      	bne.n	800b852 <joystickStreamCommand+0x242>
 800b850:	e757      	b.n	800b702 <joystickStreamCommand+0xf2>
				taskYIELD();
 800b852:	f004 fb45 	bl	800fee0 <vPortYield>
 800b856:	e7f7      	b.n	800b848 <joystickStreamCommand+0x238>
			if(result == H10R4_OK){
 800b858:	2d00      	cmp	r5, #0
 800b85a:	d000      	beq.n	800b85e <joystickStreamCommand+0x24e>
 800b85c:	e751      	b.n	800b702 <joystickStreamCommand+0xf2>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800b85e:	2225      	movs	r2, #37	; 0x25
 800b860:	4961      	ldr	r1, [pc, #388]	; (800b9e8 <joystickStreamCommand+0x3d8>)
 800b862:	0020      	movs	r0, r4
 800b864:	f007 fdb5 	bl	80133d2 <memcpy>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800b868:	0020      	movs	r0, r4
 800b86a:	f7f4 fc55 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800b86e:	b282      	uxth	r2, r0
 800b870:	4b58      	ldr	r3, [pc, #352]	; (800b9d4 <joystickStreamCommand+0x3c4>)
 800b872:	7818      	ldrb	r0, [r3, #0]
 800b874:	2301      	movs	r3, #1
 800b876:	425b      	negs	r3, r3
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	3333      	adds	r3, #51	; 0x33
 800b87c:	0021      	movs	r1, r4
 800b87e:	f002 fb11 	bl	800dea4 <writePxMutex>
			Stream_To_CLI(Period, Timeout);
 800b882:	0031      	movs	r1, r6
 800b884:	9802      	ldr	r0, [sp, #8]
 800b886:	f7ff fd73 	bl	800b370 <Stream_To_CLI>
			while (startMeasurement != STOP_MEASUREMENT) {
 800b88a:	4b58      	ldr	r3, [pc, #352]	; (800b9ec <joystickStreamCommand+0x3dc>)
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d100      	bne.n	800b894 <joystickStreamCommand+0x284>
 800b892:	e736      	b.n	800b702 <joystickStreamCommand+0xf2>
				taskYIELD();
 800b894:	f004 fb24 	bl	800fee0 <vPortYield>
 800b898:	e7f7      	b.n	800b88a <joystickStreamCommand+0x27a>
			if(result == H10R4_OK){
 800b89a:	2d00      	cmp	r5, #0
 800b89c:	d000      	beq.n	800b8a0 <joystickStreamCommand+0x290>
 800b89e:	e730      	b.n	800b702 <joystickStreamCommand+0xf2>
			Port = (uint8_t) atol((char*) pcParameterString5);
 800b8a0:	9803      	ldr	r0, [sp, #12]
 800b8a2:	f007 fd24 	bl	80132ee <atol>
 800b8a6:	0007      	movs	r7, r0
 800b8a8:	b2c3      	uxtb	r3, r0
 800b8aa:	4699      	mov	r9, r3
			Module = (uint8_t) atol((char*) pcParameterString6);
 800b8ac:	9804      	ldr	r0, [sp, #16]
 800b8ae:	f007 fd1e 	bl	80132ee <atol>
 800b8b2:	b2c3      	uxtb	r3, r0
 800b8b4:	469a      	mov	sl, r3
			if (result != (uint8_t) BOS_ERR_WrongName) {
 800b8b6:	2d64      	cmp	r5, #100	; 0x64
 800b8b8:	d00e      	beq.n	800b8d8 <joystickStreamCommand+0x2c8>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageModule, Port,
 800b8ba:	22ff      	movs	r2, #255	; 0xff
 800b8bc:	0003      	movs	r3, r0
 800b8be:	4013      	ands	r3, r2
 800b8c0:	403a      	ands	r2, r7
 800b8c2:	494b      	ldr	r1, [pc, #300]	; (800b9f0 <joystickStreamCommand+0x3e0>)
 800b8c4:	0020      	movs	r0, r4
 800b8c6:	f008 fceb 	bl	80142a0 <siprintf>
				Stream_To_Port(Port, Module, Period, Timeout);
 800b8ca:	0033      	movs	r3, r6
 800b8cc:	9a02      	ldr	r2, [sp, #8]
 800b8ce:	4651      	mov	r1, sl
 800b8d0:	4648      	mov	r0, r9
 800b8d2:	f7ff fdd5 	bl	800b480 <Stream_To_Port>
				return pdFALSE;
 800b8d6:	e0d9      	b.n	800ba8c <joystickStreamCommand+0x47c>
				strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongName);
 800b8d8:	2214      	movs	r2, #20
 800b8da:	4946      	ldr	r1, [pc, #280]	; (800b9f4 <joystickStreamCommand+0x3e4>)
 800b8dc:	0020      	movs	r0, r4
 800b8de:	f007 fd78 	bl	80133d2 <memcpy>
 800b8e2:	e70e      	b.n	800b702 <joystickStreamCommand+0xf2>
		switch (option) {
 800b8e4:	4b34      	ldr	r3, [pc, #208]	; (800b9b8 <joystickStreamCommand+0x3a8>)
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d03a      	beq.n	800b962 <joystickStreamCommand+0x352>
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	2a02      	cmp	r2, #2
 800b8f0:	d823      	bhi.n	800b93a <joystickStreamCommand+0x32a>
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d000      	beq.n	800b8f8 <joystickStreamCommand+0x2e8>
 800b8f6:	e762      	b.n	800b7be <joystickStreamCommand+0x1ae>
			if(result == H10R4_OK){
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	d000      	beq.n	800b8fe <joystickStreamCommand+0x2ee>
 800b8fc:	e701      	b.n	800b702 <joystickStreamCommand+0xf2>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800b8fe:	2225      	movs	r2, #37	; 0x25
 800b900:	4939      	ldr	r1, [pc, #228]	; (800b9e8 <joystickStreamCommand+0x3d8>)
 800b902:	0020      	movs	r0, r4
 800b904:	f007 fd65 	bl	80133d2 <memcpy>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800b908:	0020      	movs	r0, r4
 800b90a:	f7f4 fc05 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800b90e:	b282      	uxth	r2, r0
 800b910:	4b30      	ldr	r3, [pc, #192]	; (800b9d4 <joystickStreamCommand+0x3c4>)
 800b912:	7818      	ldrb	r0, [r3, #0]
 800b914:	2301      	movs	r3, #1
 800b916:	425b      	negs	r3, r3
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	3333      	adds	r3, #51	; 0x33
 800b91c:	0021      	movs	r1, r4
 800b91e:	f002 fac1 	bl	800dea4 <writePxMutex>
			Stream_To_CLI_R(Period, Timeout);
 800b922:	0031      	movs	r1, r6
 800b924:	9802      	ldr	r0, [sp, #8]
 800b926:	f7ff fd67 	bl	800b3f8 <Stream_To_CLI_R>
			while (startMeasurement != STOP_MEASUREMENT) {
 800b92a:	4b30      	ldr	r3, [pc, #192]	; (800b9ec <joystickStreamCommand+0x3dc>)
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d100      	bne.n	800b934 <joystickStreamCommand+0x324>
 800b932:	e6e6      	b.n	800b702 <joystickStreamCommand+0xf2>
				taskYIELD();
 800b934:	f004 fad4 	bl	800fee0 <vPortYield>
 800b938:	e7f7      	b.n	800b92a <joystickStreamCommand+0x31a>
		switch (option) {
 800b93a:	2b03      	cmp	r3, #3
 800b93c:	d062      	beq.n	800ba04 <joystickStreamCommand+0x3f4>
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d000      	beq.n	800b944 <joystickStreamCommand+0x334>
 800b942:	e73c      	b.n	800b7be <joystickStreamCommand+0x1ae>
			if(result == H10R4_OK){
 800b944:	2d00      	cmp	r5, #0
 800b946:	d000      	beq.n	800b94a <joystickStreamCommand+0x33a>
 800b948:	e6db      	b.n	800b702 <joystickStreamCommand+0xf2>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageCbuffer);
 800b94a:	225f      	movs	r2, #95	; 0x5f
 800b94c:	492a      	ldr	r1, [pc, #168]	; (800b9f8 <joystickStreamCommand+0x3e8>)
 800b94e:	0020      	movs	r0, r4
 800b950:	f007 fd3f 	bl	80133d2 <memcpy>
			Stream_To_Cbuffer(&Cbuf1, &Cbuf2, Period, Timeout);
 800b954:	0033      	movs	r3, r6
 800b956:	9a02      	ldr	r2, [sp, #8]
 800b958:	4928      	ldr	r1, [pc, #160]	; (800b9fc <joystickStreamCommand+0x3ec>)
 800b95a:	4829      	ldr	r0, [pc, #164]	; (800ba00 <joystickStreamCommand+0x3f0>)
 800b95c:	f7ff fe14 	bl	800b588 <Stream_To_Cbuffer>
 800b960:	e6cf      	b.n	800b702 <joystickStreamCommand+0xf2>
			if(result == H10R4_OK){
 800b962:	2d00      	cmp	r5, #0
 800b964:	d000      	beq.n	800b968 <joystickStreamCommand+0x358>
 800b966:	e6cc      	b.n	800b702 <joystickStreamCommand+0xf2>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800b968:	2225      	movs	r2, #37	; 0x25
 800b96a:	491f      	ldr	r1, [pc, #124]	; (800b9e8 <joystickStreamCommand+0x3d8>)
 800b96c:	0020      	movs	r0, r4
 800b96e:	f007 fd30 	bl	80133d2 <memcpy>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800b972:	0020      	movs	r0, r4
 800b974:	f7f4 fbd0 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800b978:	b282      	uxth	r2, r0
 800b97a:	4b16      	ldr	r3, [pc, #88]	; (800b9d4 <joystickStreamCommand+0x3c4>)
 800b97c:	7818      	ldrb	r0, [r3, #0]
 800b97e:	2301      	movs	r3, #1
 800b980:	425b      	negs	r3, r3
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	3333      	adds	r3, #51	; 0x33
 800b986:	0021      	movs	r1, r4
 800b988:	f002 fa8c 	bl	800dea4 <writePxMutex>
			Stream_To_CLI(Period, Timeout);
 800b98c:	0031      	movs	r1, r6
 800b98e:	9802      	ldr	r0, [sp, #8]
 800b990:	f7ff fcee 	bl	800b370 <Stream_To_CLI>
			while (startMeasurement != STOP_MEASUREMENT) {
 800b994:	4b15      	ldr	r3, [pc, #84]	; (800b9ec <joystickStreamCommand+0x3dc>)
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d100      	bne.n	800b99e <joystickStreamCommand+0x38e>
 800b99c:	e6b1      	b.n	800b702 <joystickStreamCommand+0xf2>
				taskYIELD();
 800b99e:	f004 fa9f 	bl	800fee0 <vPortYield>
 800b9a2:	e7f7      	b.n	800b994 <joystickStreamCommand+0x384>
 800b9a4:	08019c78 	.word	0x08019c78
 800b9a8:	20006224 	.word	0x20006224
 800b9ac:	08019c7c 	.word	0x08019c7c
 800b9b0:	08019c80 	.word	0x08019c80
 800b9b4:	08018578 	.word	0x08018578
 800b9b8:	20006299 	.word	0x20006299
 800b9bc:	20000f3d 	.word	0x20000f3d
 800b9c0:	08019c84 	.word	0x08019c84
 800b9c4:	08019c88 	.word	0x08019c88
 800b9c8:	08019c90 	.word	0x08019c90
 800b9cc:	08019c98 	.word	0x08019c98
 800b9d0:	08019dd0 	.word	0x08019dd0
 800b9d4:	200002cf 	.word	0x200002cf
 800b9d8:	20006360 	.word	0x20006360
 800b9dc:	20000f38 	.word	0x20000f38
 800b9e0:	08019ca0 	.word	0x08019ca0
 800b9e4:	20000f30 	.word	0x20000f30
 800b9e8:	08019d00 	.word	0x08019d00
 800b9ec:	20000f3c 	.word	0x20000f3c
 800b9f0:	08019d28 	.word	0x08019d28
 800b9f4:	08019d5c 	.word	0x08019d5c
 800b9f8:	08019d70 	.word	0x08019d70
 800b9fc:	20000f18 	.word	0x20000f18
 800ba00:	20000f14 	.word	0x20000f14
			if(result == H10R4_OK){
 800ba04:	2d00      	cmp	r5, #0
 800ba06:	d000      	beq.n	800ba0a <joystickStreamCommand+0x3fa>
 800ba08:	e67b      	b.n	800b702 <joystickStreamCommand+0xf2>
			Port = (uint8_t) atol((char*) pcParameterString5);
 800ba0a:	9803      	ldr	r0, [sp, #12]
 800ba0c:	f007 fc6f 	bl	80132ee <atol>
 800ba10:	9003      	str	r0, [sp, #12]
 800ba12:	466b      	mov	r3, sp
 800ba14:	7b1b      	ldrb	r3, [r3, #12]
 800ba16:	469a      	mov	sl, r3
			Module = (uint8_t) atol((char*) pcParameterString6);
 800ba18:	9804      	ldr	r0, [sp, #16]
 800ba1a:	f007 fc68 	bl	80132ee <atol>
 800ba1e:	b2c7      	uxtb	r7, r0
			if (Module != (uint8_t) BOS_ERR_WrongName) {
 800ba20:	2f64      	cmp	r7, #100	; 0x64
 800ba22:	d010      	beq.n	800ba46 <joystickStreamCommand+0x436>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageModule, Port,
 800ba24:	22ff      	movs	r2, #255	; 0xff
 800ba26:	0003      	movs	r3, r0
 800ba28:	4013      	ands	r3, r2
 800ba2a:	9903      	ldr	r1, [sp, #12]
 800ba2c:	4011      	ands	r1, r2
 800ba2e:	000a      	movs	r2, r1
 800ba30:	4919      	ldr	r1, [pc, #100]	; (800ba98 <joystickStreamCommand+0x488>)
 800ba32:	0020      	movs	r0, r4
 800ba34:	f008 fc34 	bl	80142a0 <siprintf>
				Stream_To_Port(Port, Module, Period, Timeout);
 800ba38:	0033      	movs	r3, r6
 800ba3a:	9a02      	ldr	r2, [sp, #8]
 800ba3c:	0039      	movs	r1, r7
 800ba3e:	4650      	mov	r0, sl
 800ba40:	f7ff fd1e 	bl	800b480 <Stream_To_Port>
				return pdFALSE;
 800ba44:	e022      	b.n	800ba8c <joystickStreamCommand+0x47c>
				strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongName);
 800ba46:	2214      	movs	r2, #20
 800ba48:	4914      	ldr	r1, [pc, #80]	; (800ba9c <joystickStreamCommand+0x48c>)
 800ba4a:	0020      	movs	r0, r4
 800ba4c:	f007 fcc1 	bl	80133d2 <memcpy>
 800ba50:	e657      	b.n	800b702 <joystickStreamCommand+0xf2>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageStopMsg);
 800ba52:	2221      	movs	r2, #33	; 0x21
 800ba54:	4912      	ldr	r1, [pc, #72]	; (800baa0 <joystickStreamCommand+0x490>)
 800ba56:	0020      	movs	r0, r4
 800ba58:	f007 fcbb 	bl	80133d2 <memcpy>
				strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800ba5c:	0020      	movs	r0, r4
 800ba5e:	f7f4 fb5b 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800ba62:	b282      	uxth	r2, r0
 800ba64:	4b0f      	ldr	r3, [pc, #60]	; (800baa4 <joystickStreamCommand+0x494>)
 800ba66:	7818      	ldrb	r0, [r3, #0]
 800ba68:	2301      	movs	r3, #1
 800ba6a:	425b      	negs	r3, r3
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	3333      	adds	r3, #51	; 0x33
 800ba70:	0021      	movs	r1, r4
 800ba72:	f002 fa17 	bl	800dea4 <writePxMutex>
		memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800ba76:	0020      	movs	r0, r4
 800ba78:	f7f4 fb4e 	bl	8000118 <strlen>
 800ba7c:	0002      	movs	r2, r0
 800ba7e:	2100      	movs	r1, #0
 800ba80:	0020      	movs	r0, r4
 800ba82:	f007 fcaf 	bl	80133e4 <memset>
		stopB = 0;
 800ba86:	4b08      	ldr	r3, [pc, #32]	; (800baa8 <joystickStreamCommand+0x498>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	701a      	strb	r2, [r3, #0]
}
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	b00d      	add	sp, #52	; 0x34
 800ba90:	bc0c      	pop	{r2, r3}
 800ba92:	4691      	mov	r9, r2
 800ba94:	469a      	mov	sl, r3
 800ba96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba98:	08019d28 	.word	0x08019d28
 800ba9c:	08019d5c 	.word	0x08019d5c
 800baa0:	08019de4 	.word	0x08019de4
 800baa4:	200002cf 	.word	0x200002cf
 800baa8:	20000f3d 	.word	0x20000f3d

0800baac <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800baac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baae:	46c6      	mov	lr, r8
 800bab0:	b500      	push	{lr}
 800bab2:	ab06      	add	r3, sp, #24
 800bab4:	781c      	ldrb	r4, [r3, #0]
	switch (code) {
 800bab6:	4ba0      	ldr	r3, [pc, #640]	; (800bd38 <Module_MessagingTask+0x28c>)
 800bab8:	469c      	mov	ip, r3
 800baba:	4460      	add	r0, ip
 800babc:	b283      	uxth	r3, r0
 800babe:	2b06      	cmp	r3, #6
 800bac0:	d900      	bls.n	800bac4 <Module_MessagingTask+0x18>
 800bac2:	e137      	b.n	800bd34 <Module_MessagingTask+0x288>
 800bac4:	0098      	lsls	r0, r3, #2
 800bac6:	4b9d      	ldr	r3, [pc, #628]	; (800bd3c <Module_MessagingTask+0x290>)
 800bac8:	581b      	ldr	r3, [r3, r0]
 800baca:	469f      	mov	pc, r3
		if (cMessage[port-1][shift] == 0)
 800bacc:	3901      	subs	r1, #1
 800bace:	00cb      	lsls	r3, r1, #3
 800bad0:	1a59      	subs	r1, r3, r1
 800bad2:	00ca      	lsls	r2, r1, #3
 800bad4:	4b9a      	ldr	r3, [pc, #616]	; (800bd40 <Module_MessagingTask+0x294>)
 800bad6:	189b      	adds	r3, r3, r2
 800bad8:	5d1b      	ldrb	r3, [r3, r4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d104      	bne.n	800bae8 <Module_MessagingTask+0x3c>
			H10R4_STREAM_TYPE = 0;
 800bade:	4b99      	ldr	r3, [pc, #612]	; (800bd44 <Module_MessagingTask+0x298>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	701a      	strb	r2, [r3, #0]
	Module_Status result = H10R4_OK;
 800bae4:	2000      	movs	r0, #0
 800bae6:	e008      	b.n	800bafa <Module_MessagingTask+0x4e>
			H10R4_STREAM_TYPE = 1;
 800bae8:	4b96      	ldr	r3, [pc, #600]	; (800bd44 <Module_MessagingTask+0x298>)
 800baea:	2201      	movs	r2, #1
 800baec:	701a      	strb	r2, [r3, #0]
	Module_Status result = H10R4_OK;
 800baee:	2000      	movs	r0, #0
 800baf0:	e003      	b.n	800bafa <Module_MessagingTask+0x4e>
		joystickMode = REQ_STOP;
 800baf2:	4b95      	ldr	r3, [pc, #596]	; (800bd48 <Module_MessagingTask+0x29c>)
 800baf4:	220f      	movs	r2, #15
 800baf6:	701a      	strb	r2, [r3, #0]
	Module_Status result = H10R4_OK;
 800baf8:	2000      	movs	r0, #0
}
 800bafa:	bc04      	pop	{r2}
 800bafc:	4690      	mov	r8, r2
 800bafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		period = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];
 800bb00:	1e48      	subs	r0, r1, #1
 800bb02:	1ca2      	adds	r2, r4, #2
 800bb04:	4f8e      	ldr	r7, [pc, #568]	; (800bd40 <Module_MessagingTask+0x294>)
 800bb06:	00c6      	lsls	r6, r0, #3
 800bb08:	1a33      	subs	r3, r6, r0
 800bb0a:	00dd      	lsls	r5, r3, #3
 800bb0c:	197d      	adds	r5, r7, r5
 800bb0e:	5caa      	ldrb	r2, [r5, r2]
 800bb10:	0612      	lsls	r2, r2, #24
 800bb12:	1ce3      	adds	r3, r4, #3
 800bb14:	5ceb      	ldrb	r3, [r5, r3]
 800bb16:	041b      	lsls	r3, r3, #16
 800bb18:	18d2      	adds	r2, r2, r3
 800bb1a:	1d23      	adds	r3, r4, #4
 800bb1c:	5ceb      	ldrb	r3, [r5, r3]
 800bb1e:	021b      	lsls	r3, r3, #8
 800bb20:	18d2      	adds	r2, r2, r3
 800bb22:	1d63      	adds	r3, r4, #5
 800bb24:	5ceb      	ldrb	r3, [r5, r3]
 800bb26:	18d2      	adds	r2, r2, r3
		timeout = ( (uint32_t) cMessage[port-1][6+shift] << 24 ) + ( (uint32_t) cMessage[port-1][7+shift] << 16 ) + ( (uint32_t) cMessage[port-1][8+shift] << 8 ) + cMessage[port-1][9+shift];
 800bb28:	1da3      	adds	r3, r4, #6
 800bb2a:	5ceb      	ldrb	r3, [r5, r3]
 800bb2c:	061b      	lsls	r3, r3, #24
 800bb2e:	1de1      	adds	r1, r4, #7
 800bb30:	5c69      	ldrb	r1, [r5, r1]
 800bb32:	0409      	lsls	r1, r1, #16
 800bb34:	185b      	adds	r3, r3, r1
 800bb36:	0021      	movs	r1, r4
 800bb38:	3108      	adds	r1, #8
 800bb3a:	5c69      	ldrb	r1, [r5, r1]
 800bb3c:	0209      	lsls	r1, r1, #8
 800bb3e:	185b      	adds	r3, r3, r1
 800bb40:	0021      	movs	r1, r4
 800bb42:	3109      	adds	r1, #9
 800bb44:	5c69      	ldrb	r1, [r5, r1]
 800bb46:	185b      	adds	r3, r3, r1
		Stream_To_Port(cMessage[port-1][shift], cMessage[port-1][1+shift], period, timeout);
 800bb48:	1c61      	adds	r1, r4, #1
 800bb4a:	5c69      	ldrb	r1, [r5, r1]
 800bb4c:	1a30      	subs	r0, r6, r0
 800bb4e:	00c5      	lsls	r5, r0, #3
 800bb50:	197f      	adds	r7, r7, r5
 800bb52:	5d38      	ldrb	r0, [r7, r4]
 800bb54:	f7ff fc94 	bl	800b480 <Stream_To_Port>
	Module_Status result = H10R4_OK;
 800bb58:	2000      	movs	r0, #0
		break;
 800bb5a:	e7ce      	b.n	800bafa <Module_MessagingTask+0x4e>
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800bb5c:	3901      	subs	r1, #1
 800bb5e:	4e78      	ldr	r6, [pc, #480]	; (800bd40 <Module_MessagingTask+0x294>)
 800bb60:	00cd      	lsls	r5, r1, #3
 800bb62:	1a6a      	subs	r2, r5, r1
 800bb64:	00d3      	lsls	r3, r2, #3
 800bb66:	18f3      	adds	r3, r6, r3
 800bb68:	5d18      	ldrb	r0, [r3, r4]
 800bb6a:	0600      	lsls	r0, r0, #24
 800bb6c:	1c62      	adds	r2, r4, #1
 800bb6e:	5c9a      	ldrb	r2, [r3, r2]
 800bb70:	0412      	lsls	r2, r2, #16
 800bb72:	1880      	adds	r0, r0, r2
 800bb74:	1ca2      	adds	r2, r4, #2
 800bb76:	5c9a      	ldrb	r2, [r3, r2]
 800bb78:	0212      	lsls	r2, r2, #8
 800bb7a:	1880      	adds	r0, r0, r2
 800bb7c:	1ce2      	adds	r2, r4, #3
 800bb7e:	5c9a      	ldrb	r2, [r3, r2]
 800bb80:	1880      	adds	r0, r0, r2
			timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800bb82:	1d22      	adds	r2, r4, #4
 800bb84:	5c9a      	ldrb	r2, [r3, r2]
 800bb86:	0612      	lsls	r2, r2, #24
 800bb88:	1d67      	adds	r7, r4, #5
 800bb8a:	5ddf      	ldrb	r7, [r3, r7]
 800bb8c:	043f      	lsls	r7, r7, #16
 800bb8e:	19d2      	adds	r2, r2, r7
 800bb90:	1da7      	adds	r7, r4, #6
 800bb92:	5ddb      	ldrb	r3, [r3, r7]
 800bb94:	021b      	lsls	r3, r3, #8
 800bb96:	18d3      	adds	r3, r2, r3
 800bb98:	3407      	adds	r4, #7
 800bb9a:	1a69      	subs	r1, r5, r1
 800bb9c:	00ca      	lsls	r2, r1, #3
 800bb9e:	18b6      	adds	r6, r6, r2
 800bba0:	5d31      	ldrb	r1, [r6, r4]
 800bba2:	1859      	adds	r1, r3, r1
			Stream_To_CLI(period, timeout);
 800bba4:	f7ff fbe4 	bl	800b370 <Stream_To_CLI>
	Module_Status result = H10R4_OK;
 800bba8:	2000      	movs	r0, #0
			break;
 800bbaa:	e7a6      	b.n	800bafa <Module_MessagingTask+0x4e>
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800bbac:	3901      	subs	r1, #1
 800bbae:	4e64      	ldr	r6, [pc, #400]	; (800bd40 <Module_MessagingTask+0x294>)
 800bbb0:	00cd      	lsls	r5, r1, #3
 800bbb2:	1a6a      	subs	r2, r5, r1
 800bbb4:	00d3      	lsls	r3, r2, #3
 800bbb6:	18f3      	adds	r3, r6, r3
 800bbb8:	5d18      	ldrb	r0, [r3, r4]
 800bbba:	0600      	lsls	r0, r0, #24
 800bbbc:	1c62      	adds	r2, r4, #1
 800bbbe:	5c9a      	ldrb	r2, [r3, r2]
 800bbc0:	0412      	lsls	r2, r2, #16
 800bbc2:	1880      	adds	r0, r0, r2
 800bbc4:	1ca2      	adds	r2, r4, #2
 800bbc6:	5c9a      	ldrb	r2, [r3, r2]
 800bbc8:	0212      	lsls	r2, r2, #8
 800bbca:	1880      	adds	r0, r0, r2
 800bbcc:	1ce2      	adds	r2, r4, #3
 800bbce:	5c9a      	ldrb	r2, [r3, r2]
 800bbd0:	1880      	adds	r0, r0, r2
			timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800bbd2:	1d22      	adds	r2, r4, #4
 800bbd4:	5c9a      	ldrb	r2, [r3, r2]
 800bbd6:	0612      	lsls	r2, r2, #24
 800bbd8:	1d67      	adds	r7, r4, #5
 800bbda:	5ddf      	ldrb	r7, [r3, r7]
 800bbdc:	043f      	lsls	r7, r7, #16
 800bbde:	19d2      	adds	r2, r2, r7
 800bbe0:	1da7      	adds	r7, r4, #6
 800bbe2:	5ddb      	ldrb	r3, [r3, r7]
 800bbe4:	021b      	lsls	r3, r3, #8
 800bbe6:	18d3      	adds	r3, r2, r3
 800bbe8:	3407      	adds	r4, #7
 800bbea:	1a69      	subs	r1, r5, r1
 800bbec:	00ca      	lsls	r2, r1, #3
 800bbee:	18b6      	adds	r6, r6, r2
 800bbf0:	5d31      	ldrb	r1, [r6, r4]
 800bbf2:	1859      	adds	r1, r3, r1
			Stream_To_CLI_R(period, timeout);
 800bbf4:	f7ff fc00 	bl	800b3f8 <Stream_To_CLI_R>
	Module_Status result = H10R4_OK;
 800bbf8:	2000      	movs	r0, #0
			break;
 800bbfa:	e77e      	b.n	800bafa <Module_MessagingTask+0x4e>
		period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800bbfc:	1e4b      	subs	r3, r1, #1
 800bbfe:	4a50      	ldr	r2, [pc, #320]	; (800bd40 <Module_MessagingTask+0x294>)
 800bc00:	4690      	mov	r8, r2
 800bc02:	00da      	lsls	r2, r3, #3
 800bc04:	1ad2      	subs	r2, r2, r3
 800bc06:	00d0      	lsls	r0, r2, #3
 800bc08:	4440      	add	r0, r8
 800bc0a:	5d05      	ldrb	r5, [r0, r4]
 800bc0c:	062d      	lsls	r5, r5, #24
 800bc0e:	1c62      	adds	r2, r4, #1
 800bc10:	5c82      	ldrb	r2, [r0, r2]
 800bc12:	0412      	lsls	r2, r2, #16
 800bc14:	18ad      	adds	r5, r5, r2
 800bc16:	1ca2      	adds	r2, r4, #2
 800bc18:	5c82      	ldrb	r2, [r0, r2]
 800bc1a:	0212      	lsls	r2, r2, #8
 800bc1c:	18ad      	adds	r5, r5, r2
 800bc1e:	1ce2      	adds	r2, r4, #3
 800bc20:	5c82      	ldrb	r2, [r0, r2]
 800bc22:	18ad      	adds	r5, r5, r2
		timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800bc24:	1d22      	adds	r2, r4, #4
 800bc26:	5c86      	ldrb	r6, [r0, r2]
 800bc28:	0636      	lsls	r6, r6, #24
 800bc2a:	1d62      	adds	r2, r4, #5
 800bc2c:	5c82      	ldrb	r2, [r0, r2]
 800bc2e:	0412      	lsls	r2, r2, #16
 800bc30:	18b6      	adds	r6, r6, r2
 800bc32:	1da2      	adds	r2, r4, #6
 800bc34:	5c82      	ldrb	r2, [r0, r2]
 800bc36:	0212      	lsls	r2, r2, #8
 800bc38:	18b6      	adds	r6, r6, r2
 800bc3a:	1de2      	adds	r2, r4, #7
 800bc3c:	5c82      	ldrb	r2, [r0, r2]
 800bc3e:	18b6      	adds	r6, r6, r2
		buf = ( (uint32_t) cMessage[port-1][8+shift] << 24 ) + ( (uint32_t) cMessage[port-1][9+shift] << 16 ) + ( (uint32_t) cMessage[port-1][10+shift] << 8 ) + cMessage[port-1][11+shift];
 800bc40:	0022      	movs	r2, r4
 800bc42:	3208      	adds	r2, #8
 800bc44:	5c82      	ldrb	r2, [r0, r2]
 800bc46:	0612      	lsls	r2, r2, #24
 800bc48:	0021      	movs	r1, r4
 800bc4a:	3109      	adds	r1, #9
 800bc4c:	5c41      	ldrb	r1, [r0, r1]
 800bc4e:	0409      	lsls	r1, r1, #16
 800bc50:	1852      	adds	r2, r2, r1
 800bc52:	0021      	movs	r1, r4
 800bc54:	310a      	adds	r1, #10
 800bc56:	5c41      	ldrb	r1, [r0, r1]
 800bc58:	0209      	lsls	r1, r1, #8
 800bc5a:	1852      	adds	r2, r2, r1
 800bc5c:	0021      	movs	r1, r4
 800bc5e:	310b      	adds	r1, #11
 800bc60:	5c41      	ldrb	r1, [r0, r1]
 800bc62:	1852      	adds	r2, r2, r1
 800bc64:	4f39      	ldr	r7, [pc, #228]	; (800bd4c <Module_MessagingTask+0x2a0>)
 800bc66:	603a      	str	r2, [r7, #0]
		max = ( (uint32_t) cMessage[port-1][12+shift] << 24 ) + ( (uint32_t) cMessage[port-1][13+shift] << 16 ) + ( (uint32_t) cMessage[port-1][14+shift] << 8 ) + cMessage[port-1][15+shift];
 800bc68:	0022      	movs	r2, r4
 800bc6a:	320c      	adds	r2, #12
 800bc6c:	5c81      	ldrb	r1, [r0, r2]
 800bc6e:	0609      	lsls	r1, r1, #24
 800bc70:	3201      	adds	r2, #1
 800bc72:	5c82      	ldrb	r2, [r0, r2]
 800bc74:	0412      	lsls	r2, r2, #16
 800bc76:	1889      	adds	r1, r1, r2
 800bc78:	0022      	movs	r2, r4
 800bc7a:	320e      	adds	r2, #14
 800bc7c:	5c82      	ldrb	r2, [r0, r2]
 800bc7e:	0212      	lsls	r2, r2, #8
 800bc80:	1889      	adds	r1, r1, r2
 800bc82:	0022      	movs	r2, r4
 800bc84:	320f      	adds	r2, #15
 800bc86:	5c82      	ldrb	r2, [r0, r2]
 800bc88:	1889      	adds	r1, r1, r2
		vector = ((bool) cMessage[port-1][16+shift]);
 800bc8a:	3410      	adds	r4, #16
 800bc8c:	5d00      	ldrb	r0, [r0, r4]
 800bc8e:	1e43      	subs	r3, r0, #1
 800bc90:	4198      	sbcs	r0, r3
 800bc92:	b2c0      	uxtb	r0, r0
		calculateVariantValue(vector, max);
 800bc94:	f7fe fdde 	bl	800a854 <calculateVariantValue>
		Stream_To_Buffer(&buf, period, timeout);
 800bc98:	0032      	movs	r2, r6
 800bc9a:	0029      	movs	r1, r5
 800bc9c:	0038      	movs	r0, r7
 800bc9e:	f7ff fc33 	bl	800b508 <Stream_To_Buffer>
	Module_Status result = H10R4_OK;
 800bca2:	2000      	movs	r0, #0
		break;
 800bca4:	e729      	b.n	800bafa <Module_MessagingTask+0x4e>
		period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800bca6:	3901      	subs	r1, #1
 800bca8:	4b25      	ldr	r3, [pc, #148]	; (800bd40 <Module_MessagingTask+0x294>)
 800bcaa:	4698      	mov	r8, r3
 800bcac:	00cb      	lsls	r3, r1, #3
 800bcae:	1a58      	subs	r0, r3, r1
 800bcb0:	00c5      	lsls	r5, r0, #3
 800bcb2:	4445      	add	r5, r8
 800bcb4:	5d2e      	ldrb	r6, [r5, r4]
 800bcb6:	0636      	lsls	r6, r6, #24
 800bcb8:	1c60      	adds	r0, r4, #1
 800bcba:	5c28      	ldrb	r0, [r5, r0]
 800bcbc:	0400      	lsls	r0, r0, #16
 800bcbe:	1836      	adds	r6, r6, r0
 800bcc0:	1ca0      	adds	r0, r4, #2
 800bcc2:	5c28      	ldrb	r0, [r5, r0]
 800bcc4:	0200      	lsls	r0, r0, #8
 800bcc6:	1836      	adds	r6, r6, r0
 800bcc8:	1ce0      	adds	r0, r4, #3
 800bcca:	5c28      	ldrb	r0, [r5, r0]
 800bccc:	1836      	adds	r6, r6, r0
		timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800bcce:	1d20      	adds	r0, r4, #4
 800bcd0:	5c2f      	ldrb	r7, [r5, r0]
 800bcd2:	063f      	lsls	r7, r7, #24
 800bcd4:	1d60      	adds	r0, r4, #5
 800bcd6:	5c28      	ldrb	r0, [r5, r0]
 800bcd8:	0400      	lsls	r0, r0, #16
 800bcda:	183f      	adds	r7, r7, r0
 800bcdc:	1da0      	adds	r0, r4, #6
 800bcde:	5c28      	ldrb	r0, [r5, r0]
 800bce0:	0200      	lsls	r0, r0, #8
 800bce2:	183f      	adds	r7, r7, r0
 800bce4:	1de0      	adds	r0, r4, #7
 800bce6:	5c28      	ldrb	r0, [r5, r0]
 800bce8:	183f      	adds	r7, r7, r0
		Cbuf1 = ( (uint32_t) cMessage[port-1][12+shift] << 24 ) + ( (uint32_t) cMessage[port-1][13+shift] << 16 ) + ( (uint32_t) cMessage[port-1][14+shift] << 8 ) + cMessage[port-1][15+shift];
 800bcea:	0020      	movs	r0, r4
 800bcec:	300c      	adds	r0, #12
 800bcee:	5c28      	ldrb	r0, [r5, r0]
 800bcf0:	0600      	lsls	r0, r0, #24
 800bcf2:	220d      	movs	r2, #13
 800bcf4:	4694      	mov	ip, r2
 800bcf6:	44a4      	add	ip, r4
 800bcf8:	4662      	mov	r2, ip
 800bcfa:	5caa      	ldrb	r2, [r5, r2]
 800bcfc:	0412      	lsls	r2, r2, #16
 800bcfe:	4694      	mov	ip, r2
 800bd00:	4460      	add	r0, ip
 800bd02:	220e      	movs	r2, #14
 800bd04:	4694      	mov	ip, r2
 800bd06:	44a4      	add	ip, r4
 800bd08:	4662      	mov	r2, ip
 800bd0a:	5cad      	ldrb	r5, [r5, r2]
 800bd0c:	022d      	lsls	r5, r5, #8
 800bd0e:	1940      	adds	r0, r0, r5
 800bd10:	340f      	adds	r4, #15
 800bd12:	1a59      	subs	r1, r3, r1
 800bd14:	00cb      	lsls	r3, r1, #3
 800bd16:	4443      	add	r3, r8
 800bd18:	5d1b      	ldrb	r3, [r3, r4]
 800bd1a:	18c0      	adds	r0, r0, r3
 800bd1c:	4c0c      	ldr	r4, [pc, #48]	; (800bd50 <Module_MessagingTask+0x2a4>)
 800bd1e:	f7f4 fd13 	bl	8000748 <__aeabi_ui2f>
 800bd22:	6020      	str	r0, [r4, #0]
		Stream_To_Cbuffer(&Cbuf1, &Cbuf1, period, timeout);
 800bd24:	003b      	movs	r3, r7
 800bd26:	0032      	movs	r2, r6
 800bd28:	0021      	movs	r1, r4
 800bd2a:	0020      	movs	r0, r4
 800bd2c:	f7ff fc2c 	bl	800b588 <Stream_To_Cbuffer>
	Module_Status result = H10R4_OK;
 800bd30:	2000      	movs	r0, #0
		break;
 800bd32:	e6e2      	b.n	800bafa <Module_MessagingTask+0x4e>
		result = H10R4_ERR_UnknownMessage;
 800bd34:	2001      	movs	r0, #1
 800bd36:	e6e0      	b.n	800bafa <Module_MessagingTask+0x4e>
 800bd38:	fffffab0 	.word	0xfffffab0
 800bd3c:	08019ad4 	.word	0x08019ad4
 800bd40:	20000560 	.word	0x20000560
 800bd44:	20000f1c 	.word	0x20000f1c
 800bd48:	200062e8 	.word	0x200062e8
 800bd4c:	20000f30 	.word	0x20000f30
 800bd50:	20000f14 	.word	0x20000f14

0800bd54 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;


/* ADC init function */
void MX_ADC_Init(void)
{
 800bd54:	b510      	push	{r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800bd56:	480c      	ldr	r0, [pc, #48]	; (800bd88 <MX_ADC_Init+0x34>)
 800bd58:	4b0c      	ldr	r3, [pc, #48]	; (800bd8c <MX_ADC_Init+0x38>)
 800bd5a:	6003      	str	r3, [r0, #0]
    hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	6043      	str	r3, [r0, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800bd60:	6083      	str	r3, [r0, #8]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bd62:	60c3      	str	r3, [r0, #12]
    hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800bd64:	2201      	movs	r2, #1
 800bd66:	6102      	str	r2, [r0, #16]
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bd68:	2104      	movs	r1, #4
 800bd6a:	6141      	str	r1, [r0, #20]
    hadc.Init.LowPowerAutoWait = DISABLE;
 800bd6c:	6183      	str	r3, [r0, #24]
    hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800bd6e:	61c3      	str	r3, [r0, #28]
    hadc.Init.ContinuousConvMode = ENABLE;
 800bd70:	6202      	str	r2, [r0, #32]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 800bd72:	6243      	str	r3, [r0, #36]	; 0x24
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bd74:	21c2      	movs	r1, #194	; 0xc2
 800bd76:	31ff      	adds	r1, #255	; 0xff
 800bd78:	6281      	str	r1, [r0, #40]	; 0x28
    hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bd7a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc.Init.DMAContinuousRequests = DISABLE;
 800bd7c:	6303      	str	r3, [r0, #48]	; 0x30
    hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800bd7e:	6342      	str	r2, [r0, #52]	; 0x34
    if (HAL_ADC_Init(&hadc) != HAL_OK)
 800bd80:	f004 fb1c 	bl	80103bc <HAL_ADC_Init>
    {

    }

}
 800bd84:	bd10      	pop	{r4, pc}
 800bd86:	46c0      	nop			; (mov r8, r8)
 800bd88:	200064c8 	.word	0x200064c8
 800bd8c:	40012400 	.word	0x40012400

0800bd90 <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800bd90:	b510      	push	{r4, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd96:	2214      	movs	r2, #20
 800bd98:	2100      	movs	r1, #0
 800bd9a:	a803      	add	r0, sp, #12
 800bd9c:	f007 fb22 	bl	80133e4 <memset>
  if(adcHandle->Instance==ADC1)
 800bda0:	6822      	ldr	r2, [r4, #0]
 800bda2:	4b10      	ldr	r3, [pc, #64]	; (800bde4 <HAL_ADC_MspInit+0x54>)
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d001      	beq.n	800bdac <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800bda8:	b008      	add	sp, #32
 800bdaa:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800bdac:	4b0e      	ldr	r3, [pc, #56]	; (800bde8 <HAL_ADC_MspInit+0x58>)
 800bdae:	6999      	ldr	r1, [r3, #24]
 800bdb0:	2080      	movs	r0, #128	; 0x80
 800bdb2:	0080      	lsls	r0, r0, #2
 800bdb4:	4301      	orrs	r1, r0
 800bdb6:	6199      	str	r1, [r3, #24]
 800bdb8:	699a      	ldr	r2, [r3, #24]
 800bdba:	4002      	ands	r2, r0
 800bdbc:	9201      	str	r2, [sp, #4]
 800bdbe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bdc0:	695a      	ldr	r2, [r3, #20]
 800bdc2:	2180      	movs	r1, #128	; 0x80
 800bdc4:	02c9      	lsls	r1, r1, #11
 800bdc6:	430a      	orrs	r2, r1
 800bdc8:	615a      	str	r2, [r3, #20]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	400b      	ands	r3, r1
 800bdce:	9302      	str	r3, [sp, #8]
 800bdd0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bdd6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bdd8:	a903      	add	r1, sp, #12
 800bdda:	4804      	ldr	r0, [pc, #16]	; (800bdec <HAL_ADC_MspInit+0x5c>)
 800bddc:	f005 fc7a 	bl	80116d4 <HAL_GPIO_Init>
}
 800bde0:	e7e2      	b.n	800bda8 <HAL_ADC_MspInit+0x18>
 800bde2:	46c0      	nop			; (mov r8, r8)
 800bde4:	40012400 	.word	0x40012400
 800bde8:	40021000 	.word	0x40021000
 800bdec:	48000400 	.word	0x48000400

0800bdf0 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bdf0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bdf2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bdf8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bdfa:	2280      	movs	r2, #128	; 0x80
 800bdfc:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bdfe:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800be00:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800be02:	3320      	adds	r3, #32
 800be04:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800be06:	2380      	movs	r3, #128	; 0x80
 800be08:	019b      	lsls	r3, r3, #6
 800be0a:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800be0c:	f004 fe88 	bl	8010b20 <HAL_DMA_Init>
}
 800be10:	bd10      	pop	{r4, pc}

0800be12 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800be12:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800be14:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800be16:	2310      	movs	r3, #16
 800be18:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800be1e:	2280      	movs	r2, #128	; 0x80
 800be20:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800be22:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800be24:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800be26:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800be28:	2380      	movs	r3, #128	; 0x80
 800be2a:	019b      	lsls	r3, r3, #6
 800be2c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800be2e:	f004 fe77 	bl	8010b20 <HAL_DMA_Init>
}
 800be32:	bd10      	pop	{r4, pc}

0800be34 <DMA_Init>:
{
 800be34:	b510      	push	{r4, lr}
 800be36:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800be38:	4b1d      	ldr	r3, [pc, #116]	; (800beb0 <DMA_Init+0x7c>)
 800be3a:	6959      	ldr	r1, [r3, #20]
 800be3c:	2201      	movs	r2, #1
 800be3e:	4311      	orrs	r1, r2
 800be40:	6159      	str	r1, [r3, #20]
 800be42:	6959      	ldr	r1, [r3, #20]
 800be44:	400a      	ands	r2, r1
 800be46:	9200      	str	r2, [sp, #0]
 800be48:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800be4a:	6959      	ldr	r1, [r3, #20]
 800be4c:	2202      	movs	r2, #2
 800be4e:	4311      	orrs	r1, r2
 800be50:	6159      	str	r1, [r3, #20]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	401a      	ands	r2, r3
 800be56:	9201      	str	r2, [sp, #4]
 800be58:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800be5a:	4c16      	ldr	r4, [pc, #88]	; (800beb4 <DMA_Init+0x80>)
 800be5c:	4916      	ldr	r1, [pc, #88]	; (800beb8 <DMA_Init+0x84>)
 800be5e:	0020      	movs	r0, r4
 800be60:	f7ff ffc6 	bl	800bdf0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800be64:	0020      	movs	r0, r4
 800be66:	3038      	adds	r0, #56	; 0x38
 800be68:	4914      	ldr	r1, [pc, #80]	; (800bebc <DMA_Init+0x88>)
 800be6a:	f7ff ffc1 	bl	800bdf0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800be6e:	0020      	movs	r0, r4
 800be70:	3070      	adds	r0, #112	; 0x70
 800be72:	4913      	ldr	r1, [pc, #76]	; (800bec0 <DMA_Init+0x8c>)
 800be74:	f7ff ffbc 	bl	800bdf0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800be78:	0020      	movs	r0, r4
 800be7a:	30a8      	adds	r0, #168	; 0xa8
 800be7c:	4911      	ldr	r1, [pc, #68]	; (800bec4 <DMA_Init+0x90>)
 800be7e:	f7ff ffb7 	bl	800bdf0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800be82:	0020      	movs	r0, r4
 800be84:	30e0      	adds	r0, #224	; 0xe0
 800be86:	4910      	ldr	r1, [pc, #64]	; (800bec8 <DMA_Init+0x94>)
 800be88:	f7ff ffb2 	bl	800bdf0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800be8c:	4c0f      	ldr	r4, [pc, #60]	; (800becc <DMA_Init+0x98>)
 800be8e:	4910      	ldr	r1, [pc, #64]	; (800bed0 <DMA_Init+0x9c>)
 800be90:	0020      	movs	r0, r4
 800be92:	f7ff ffbe 	bl	800be12 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800be96:	0020      	movs	r0, r4
 800be98:	3038      	adds	r0, #56	; 0x38
 800be9a:	490e      	ldr	r1, [pc, #56]	; (800bed4 <DMA_Init+0xa0>)
 800be9c:	f7ff ffb9 	bl	800be12 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800bea0:	0020      	movs	r0, r4
 800bea2:	3070      	adds	r0, #112	; 0x70
 800bea4:	490c      	ldr	r1, [pc, #48]	; (800bed8 <DMA_Init+0xa4>)
 800bea6:	f7ff ffb4 	bl	800be12 <DMA_MSG_TX_CH_Init>
}
 800beaa:	b002      	add	sp, #8
 800beac:	bd10      	pop	{r4, pc}
 800beae:	46c0      	nop			; (mov r8, r8)
 800beb0:	40021000 	.word	0x40021000
 800beb4:	20000f4c 	.word	0x20000f4c
 800beb8:	40020008 	.word	0x40020008
 800bebc:	40020030 	.word	0x40020030
 800bec0:	40020058 	.word	0x40020058
 800bec4:	4002006c 	.word	0x4002006c
 800bec8:	4002041c 	.word	0x4002041c
 800becc:	2000109c 	.word	0x2000109c
 800bed0:	4002001c 	.word	0x4002001c
 800bed4:	40020044 	.word	0x40020044
 800bed8:	40020080 	.word	0x40020080

0800bedc <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bedc:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bede:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bee0:	2300      	movs	r3, #0
 800bee2:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bee4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800bee6:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bee8:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800beea:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800beec:	3320      	adds	r3, #32
 800beee:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800bef0:	2380      	movs	r3, #128	; 0x80
 800bef2:	015b      	lsls	r3, r3, #5
 800bef4:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bef6:	f004 fe13 	bl	8010b20 <HAL_DMA_Init>
}
 800befa:	bd10      	pop	{r4, pc}

0800befc <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800befc:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800befe:	6803      	ldr	r3, [r0, #0]
 800bf00:	4a20      	ldr	r2, [pc, #128]	; (800bf84 <SetupDMAInterrupts+0x88>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d020      	beq.n	800bf48 <SetupDMAInterrupts+0x4c>
 800bf06:	d827      	bhi.n	800bf58 <SetupDMAInterrupts+0x5c>
 800bf08:	4a1f      	ldr	r2, [pc, #124]	; (800bf88 <SetupDMAInterrupts+0x8c>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d00e      	beq.n	800bf2c <SetupDMAInterrupts+0x30>
 800bf0e:	d815      	bhi.n	800bf3c <SetupDMAInterrupts+0x40>
 800bf10:	4a1e      	ldr	r2, [pc, #120]	; (800bf8c <SetupDMAInterrupts+0x90>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d107      	bne.n	800bf26 <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800bf16:	2200      	movs	r2, #0
 800bf18:	2009      	movs	r0, #9
 800bf1a:	f004 fc63 	bl	80107e4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800bf1e:	2009      	movs	r0, #9
 800bf20:	f004 fc90 	bl	8010844 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800bf24:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bf26:	4a1a      	ldr	r2, [pc, #104]	; (800bf90 <SetupDMAInterrupts+0x94>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d1fb      	bne.n	800bf24 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	200a      	movs	r0, #10
 800bf30:	f004 fc58 	bl	80107e4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bf34:	200a      	movs	r0, #10
 800bf36:	f004 fc85 	bl	8010844 <HAL_NVIC_EnableIRQ>
			break;
 800bf3a:	e7f3      	b.n	800bf24 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800bf3c:	4a15      	ldr	r2, [pc, #84]	; (800bf94 <SetupDMAInterrupts+0x98>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d002      	beq.n	800bf48 <SetupDMAInterrupts+0x4c>
 800bf42:	4a15      	ldr	r2, [pc, #84]	; (800bf98 <SetupDMAInterrupts+0x9c>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d1ed      	bne.n	800bf24 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800bf48:	2200      	movs	r2, #0
 800bf4a:	200b      	movs	r0, #11
 800bf4c:	f004 fc4a 	bl	80107e4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bf50:	200b      	movs	r0, #11
 800bf52:	f004 fc77 	bl	8010844 <HAL_NVIC_EnableIRQ>
}
 800bf56:	e7e5      	b.n	800bf24 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800bf58:	4a10      	ldr	r2, [pc, #64]	; (800bf9c <SetupDMAInterrupts+0xa0>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d0e6      	beq.n	800bf2c <SetupDMAInterrupts+0x30>
 800bf5e:	d909      	bls.n	800bf74 <SetupDMAInterrupts+0x78>
 800bf60:	4a0f      	ldr	r2, [pc, #60]	; (800bfa0 <SetupDMAInterrupts+0xa4>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d0f0      	beq.n	800bf48 <SetupDMAInterrupts+0x4c>
 800bf66:	4a0f      	ldr	r2, [pc, #60]	; (800bfa4 <SetupDMAInterrupts+0xa8>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d0ed      	beq.n	800bf48 <SetupDMAInterrupts+0x4c>
 800bf6c:	4a0e      	ldr	r2, [pc, #56]	; (800bfa8 <SetupDMAInterrupts+0xac>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d1d8      	bne.n	800bf24 <SetupDMAInterrupts+0x28>
 800bf72:	e7e9      	b.n	800bf48 <SetupDMAInterrupts+0x4c>
 800bf74:	4a0d      	ldr	r2, [pc, #52]	; (800bfac <SetupDMAInterrupts+0xb0>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d0e6      	beq.n	800bf48 <SetupDMAInterrupts+0x4c>
 800bf7a:	4a0d      	ldr	r2, [pc, #52]	; (800bfb0 <SetupDMAInterrupts+0xb4>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d0d5      	beq.n	800bf2c <SetupDMAInterrupts+0x30>
 800bf80:	e7d0      	b.n	800bf24 <SetupDMAInterrupts+0x28>
 800bf82:	46c0      	nop			; (mov r8, r8)
 800bf84:	4002006c 	.word	0x4002006c
 800bf88:	40020030 	.word	0x40020030
 800bf8c:	40020008 	.word	0x40020008
 800bf90:	4002001c 	.word	0x4002001c
 800bf94:	40020044 	.word	0x40020044
 800bf98:	40020058 	.word	0x40020058
 800bf9c:	4002041c 	.word	0x4002041c
 800bfa0:	40020444 	.word	0x40020444
 800bfa4:	40020458 	.word	0x40020458
 800bfa8:	40020430 	.word	0x40020430
 800bfac:	40020080 	.word	0x40020080
 800bfb0:	40020408 	.word	0x40020408

0800bfb4 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800bfb4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800bfb6:	6803      	ldr	r3, [r0, #0]
 800bfb8:	4a1a      	ldr	r2, [pc, #104]	; (800c024 <UnSetupDMAInterrupts+0x70>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d018      	beq.n	800bff0 <UnSetupDMAInterrupts+0x3c>
 800bfbe:	d81b      	bhi.n	800bff8 <UnSetupDMAInterrupts+0x44>
 800bfc0:	4a19      	ldr	r2, [pc, #100]	; (800c028 <UnSetupDMAInterrupts+0x74>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d00a      	beq.n	800bfdc <UnSetupDMAInterrupts+0x28>
 800bfc6:	d80d      	bhi.n	800bfe4 <UnSetupDMAInterrupts+0x30>
 800bfc8:	4a18      	ldr	r2, [pc, #96]	; (800c02c <UnSetupDMAInterrupts+0x78>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d103      	bne.n	800bfd6 <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800bfce:	2009      	movs	r0, #9
 800bfd0:	f004 fc42 	bl	8010858 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800bfd4:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bfd6:	4a16      	ldr	r2, [pc, #88]	; (800c030 <UnSetupDMAInterrupts+0x7c>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d1fb      	bne.n	800bfd4 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bfdc:	200a      	movs	r0, #10
 800bfde:	f004 fc3b 	bl	8010858 <HAL_NVIC_DisableIRQ>
			break;
 800bfe2:	e7f7      	b.n	800bfd4 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bfe4:	4a13      	ldr	r2, [pc, #76]	; (800c034 <UnSetupDMAInterrupts+0x80>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d002      	beq.n	800bff0 <UnSetupDMAInterrupts+0x3c>
 800bfea:	4a13      	ldr	r2, [pc, #76]	; (800c038 <UnSetupDMAInterrupts+0x84>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d1f1      	bne.n	800bfd4 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bff0:	200b      	movs	r0, #11
 800bff2:	f004 fc31 	bl	8010858 <HAL_NVIC_DisableIRQ>
}
 800bff6:	e7ed      	b.n	800bfd4 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bff8:	4a10      	ldr	r2, [pc, #64]	; (800c03c <UnSetupDMAInterrupts+0x88>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d0ee      	beq.n	800bfdc <UnSetupDMAInterrupts+0x28>
 800bffe:	d909      	bls.n	800c014 <UnSetupDMAInterrupts+0x60>
 800c000:	4a0f      	ldr	r2, [pc, #60]	; (800c040 <UnSetupDMAInterrupts+0x8c>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d0f4      	beq.n	800bff0 <UnSetupDMAInterrupts+0x3c>
 800c006:	4a0f      	ldr	r2, [pc, #60]	; (800c044 <UnSetupDMAInterrupts+0x90>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d0f1      	beq.n	800bff0 <UnSetupDMAInterrupts+0x3c>
 800c00c:	4a0e      	ldr	r2, [pc, #56]	; (800c048 <UnSetupDMAInterrupts+0x94>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d1e0      	bne.n	800bfd4 <UnSetupDMAInterrupts+0x20>
 800c012:	e7ed      	b.n	800bff0 <UnSetupDMAInterrupts+0x3c>
 800c014:	4a0d      	ldr	r2, [pc, #52]	; (800c04c <UnSetupDMAInterrupts+0x98>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d0ea      	beq.n	800bff0 <UnSetupDMAInterrupts+0x3c>
 800c01a:	4a0d      	ldr	r2, [pc, #52]	; (800c050 <UnSetupDMAInterrupts+0x9c>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d0dd      	beq.n	800bfdc <UnSetupDMAInterrupts+0x28>
 800c020:	e7d8      	b.n	800bfd4 <UnSetupDMAInterrupts+0x20>
 800c022:	46c0      	nop			; (mov r8, r8)
 800c024:	4002006c 	.word	0x4002006c
 800c028:	40020030 	.word	0x40020030
 800c02c:	40020008 	.word	0x40020008
 800c030:	4002001c 	.word	0x4002001c
 800c034:	40020044 	.word	0x40020044
 800c038:	40020058 	.word	0x40020058
 800c03c:	4002041c 	.word	0x4002041c
 800c040:	40020444 	.word	0x40020444
 800c044:	40020458 	.word	0x40020458
 800c048:	40020430 	.word	0x40020430
 800c04c:	40020080 	.word	0x40020080
 800c050:	40020408 	.word	0x40020408

0800c054 <DMA_MSG_TX_UnSetup>:
{	
 800c054:	b510      	push	{r4, lr}
 800c056:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800c058:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c05a:	f7ff ffab 	bl	800bfb4 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800c05e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c060:	2300      	movs	r3, #0
 800c062:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800c064:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c066:	bd10      	pop	{r4, pc}

0800c068 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c068:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c06a:	6803      	ldr	r3, [r0, #0]
 800c06c:	4acc      	ldr	r2, [pc, #816]	; (800c3a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d100      	bne.n	800c074 <RemapAndLinkDMAtoUARTRx+0xc>
 800c072:	e0ca      	b.n	800c20a <RemapAndLinkDMAtoUARTRx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c074:	4aca      	ldr	r2, [pc, #808]	; (800c3a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d100      	bne.n	800c07c <RemapAndLinkDMAtoUARTRx+0x14>
 800c07a:	e0d8      	b.n	800c22e <RemapAndLinkDMAtoUARTRx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c07c:	4ac8      	ldr	r2, [pc, #800]	; (800c3a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d100      	bne.n	800c084 <RemapAndLinkDMAtoUARTRx+0x1c>
 800c082:	e0e5      	b.n	800c250 <RemapAndLinkDMAtoUARTRx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c084:	4ac6      	ldr	r2, [pc, #792]	; (800c3a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d100      	bne.n	800c08c <RemapAndLinkDMAtoUARTRx+0x24>
 800c08a:	e0f2      	b.n	800c272 <RemapAndLinkDMAtoUARTRx+0x20a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c08c:	4ac4      	ldr	r2, [pc, #784]	; (800c3a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d100      	bne.n	800c094 <RemapAndLinkDMAtoUARTRx+0x2c>
 800c092:	e0ff      	b.n	800c294 <RemapAndLinkDMAtoUARTRx+0x22c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c094:	4ac2      	ldr	r2, [pc, #776]	; (800c3a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d100      	bne.n	800c09c <RemapAndLinkDMAtoUARTRx+0x34>
 800c09a:	e10b      	b.n	800c2b4 <RemapAndLinkDMAtoUARTRx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c09c:	4ac1      	ldr	r2, [pc, #772]	; (800c3a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d100      	bne.n	800c0a4 <RemapAndLinkDMAtoUARTRx+0x3c>
 800c0a2:	e118      	b.n	800c2d6 <RemapAndLinkDMAtoUARTRx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c0a4:	4abf      	ldr	r2, [pc, #764]	; (800c3a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d100      	bne.n	800c0ac <RemapAndLinkDMAtoUARTRx+0x44>
 800c0aa:	e124      	b.n	800c2f6 <RemapAndLinkDMAtoUARTRx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c0ac:	4abd      	ldr	r2, [pc, #756]	; (800c3a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d100      	bne.n	800c0b4 <RemapAndLinkDMAtoUARTRx+0x4c>
 800c0b2:	e131      	b.n	800c318 <RemapAndLinkDMAtoUARTRx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c0b4:	4abb      	ldr	r2, [pc, #748]	; (800c3a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d100      	bne.n	800c0bc <RemapAndLinkDMAtoUARTRx+0x54>
 800c0ba:	e13e      	b.n	800c33a <RemapAndLinkDMAtoUARTRx+0x2d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c0bc:	4ab9      	ldr	r2, [pc, #740]	; (800c3a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d100      	bne.n	800c0c4 <RemapAndLinkDMAtoUARTRx+0x5c>
 800c0c2:	e14b      	b.n	800c35c <RemapAndLinkDMAtoUARTRx+0x2f4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c0c4:	4ab7      	ldr	r2, [pc, #732]	; (800c3a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d100      	bne.n	800c0cc <RemapAndLinkDMAtoUARTRx+0x64>
 800c0ca:	e157      	b.n	800c37c <RemapAndLinkDMAtoUARTRx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c0cc:	4ab6      	ldr	r2, [pc, #728]	; (800c3a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d100      	bne.n	800c0d4 <RemapAndLinkDMAtoUARTRx+0x6c>
 800c0d2:	e18b      	b.n	800c3ec <RemapAndLinkDMAtoUARTRx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c0d4:	4ab4      	ldr	r2, [pc, #720]	; (800c3a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d100      	bne.n	800c0dc <RemapAndLinkDMAtoUARTRx+0x74>
 800c0da:	e197      	b.n	800c40c <RemapAndLinkDMAtoUARTRx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c0dc:	4ab2      	ldr	r2, [pc, #712]	; (800c3a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d100      	bne.n	800c0e4 <RemapAndLinkDMAtoUARTRx+0x7c>
 800c0e2:	e1a4      	b.n	800c42e <RemapAndLinkDMAtoUARTRx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c0e4:	4ab0      	ldr	r2, [pc, #704]	; (800c3a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d100      	bne.n	800c0ec <RemapAndLinkDMAtoUARTRx+0x84>
 800c0ea:	e1b1      	b.n	800c450 <RemapAndLinkDMAtoUARTRx+0x3e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c0ec:	4aae      	ldr	r2, [pc, #696]	; (800c3a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d100      	bne.n	800c0f4 <RemapAndLinkDMAtoUARTRx+0x8c>
 800c0f2:	e1be      	b.n	800c472 <RemapAndLinkDMAtoUARTRx+0x40a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c0f4:	4aac      	ldr	r2, [pc, #688]	; (800c3a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d100      	bne.n	800c0fc <RemapAndLinkDMAtoUARTRx+0x94>
 800c0fa:	e1ca      	b.n	800c492 <RemapAndLinkDMAtoUARTRx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c0fc:	4aab      	ldr	r2, [pc, #684]	; (800c3ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d100      	bne.n	800c104 <RemapAndLinkDMAtoUARTRx+0x9c>
 800c102:	e1d7      	b.n	800c4b4 <RemapAndLinkDMAtoUARTRx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c104:	4aa9      	ldr	r2, [pc, #676]	; (800c3ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d100      	bne.n	800c10c <RemapAndLinkDMAtoUARTRx+0xa4>
 800c10a:	e1e3      	b.n	800c4d4 <RemapAndLinkDMAtoUARTRx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c10c:	4aa7      	ldr	r2, [pc, #668]	; (800c3ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d100      	bne.n	800c114 <RemapAndLinkDMAtoUARTRx+0xac>
 800c112:	e1f0      	b.n	800c4f6 <RemapAndLinkDMAtoUARTRx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c114:	4aa5      	ldr	r2, [pc, #660]	; (800c3ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d100      	bne.n	800c11c <RemapAndLinkDMAtoUARTRx+0xb4>
 800c11a:	e1fd      	b.n	800c518 <RemapAndLinkDMAtoUARTRx+0x4b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c11c:	4aa3      	ldr	r2, [pc, #652]	; (800c3ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d100      	bne.n	800c124 <RemapAndLinkDMAtoUARTRx+0xbc>
 800c122:	e20a      	b.n	800c53a <RemapAndLinkDMAtoUARTRx+0x4d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c124:	4aa1      	ldr	r2, [pc, #644]	; (800c3ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d100      	bne.n	800c12c <RemapAndLinkDMAtoUARTRx+0xc4>
 800c12a:	e216      	b.n	800c55a <RemapAndLinkDMAtoUARTRx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c12c:	4aa0      	ldr	r2, [pc, #640]	; (800c3b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d100      	bne.n	800c134 <RemapAndLinkDMAtoUARTRx+0xcc>
 800c132:	e223      	b.n	800c57c <RemapAndLinkDMAtoUARTRx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c134:	4a9e      	ldr	r2, [pc, #632]	; (800c3b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d100      	bne.n	800c13c <RemapAndLinkDMAtoUARTRx+0xd4>
 800c13a:	e22f      	b.n	800c59c <RemapAndLinkDMAtoUARTRx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c13c:	4a9c      	ldr	r2, [pc, #624]	; (800c3b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d100      	bne.n	800c144 <RemapAndLinkDMAtoUARTRx+0xdc>
 800c142:	e23c      	b.n	800c5be <RemapAndLinkDMAtoUARTRx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c144:	4a9a      	ldr	r2, [pc, #616]	; (800c3b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d100      	bne.n	800c14c <RemapAndLinkDMAtoUARTRx+0xe4>
 800c14a:	e249      	b.n	800c5e0 <RemapAndLinkDMAtoUARTRx+0x578>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c14c:	4a98      	ldr	r2, [pc, #608]	; (800c3b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d100      	bne.n	800c154 <RemapAndLinkDMAtoUARTRx+0xec>
 800c152:	e256      	b.n	800c602 <RemapAndLinkDMAtoUARTRx+0x59a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c154:	4a96      	ldr	r2, [pc, #600]	; (800c3b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d100      	bne.n	800c15c <RemapAndLinkDMAtoUARTRx+0xf4>
 800c15a:	e262      	b.n	800c622 <RemapAndLinkDMAtoUARTRx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c15c:	4a95      	ldr	r2, [pc, #596]	; (800c3b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d100      	bne.n	800c164 <RemapAndLinkDMAtoUARTRx+0xfc>
 800c162:	e26f      	b.n	800c644 <RemapAndLinkDMAtoUARTRx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c164:	4a93      	ldr	r2, [pc, #588]	; (800c3b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d100      	bne.n	800c16c <RemapAndLinkDMAtoUARTRx+0x104>
 800c16a:	e27b      	b.n	800c664 <RemapAndLinkDMAtoUARTRx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c16c:	4a91      	ldr	r2, [pc, #580]	; (800c3b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d100      	bne.n	800c174 <RemapAndLinkDMAtoUARTRx+0x10c>
 800c172:	e288      	b.n	800c686 <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c174:	4a8f      	ldr	r2, [pc, #572]	; (800c3b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d100      	bne.n	800c17c <RemapAndLinkDMAtoUARTRx+0x114>
 800c17a:	e295      	b.n	800c6a8 <RemapAndLinkDMAtoUARTRx+0x640>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c17c:	4a8d      	ldr	r2, [pc, #564]	; (800c3b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d100      	bne.n	800c184 <RemapAndLinkDMAtoUARTRx+0x11c>
 800c182:	e2a2      	b.n	800c6ca <RemapAndLinkDMAtoUARTRx+0x662>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c184:	4a8b      	ldr	r2, [pc, #556]	; (800c3b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d100      	bne.n	800c18c <RemapAndLinkDMAtoUARTRx+0x124>
 800c18a:	e2ae      	b.n	800c6ea <RemapAndLinkDMAtoUARTRx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c18c:	4a8a      	ldr	r2, [pc, #552]	; (800c3b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d100      	bne.n	800c194 <RemapAndLinkDMAtoUARTRx+0x12c>
 800c192:	e2bb      	b.n	800c70c <RemapAndLinkDMAtoUARTRx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c194:	4a88      	ldr	r2, [pc, #544]	; (800c3b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d100      	bne.n	800c19c <RemapAndLinkDMAtoUARTRx+0x134>
 800c19a:	e2c7      	b.n	800c72c <RemapAndLinkDMAtoUARTRx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c19c:	4a86      	ldr	r2, [pc, #536]	; (800c3b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d100      	bne.n	800c1a4 <RemapAndLinkDMAtoUARTRx+0x13c>
 800c1a2:	e2d4      	b.n	800c74e <RemapAndLinkDMAtoUARTRx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c1a4:	4a84      	ldr	r2, [pc, #528]	; (800c3b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d100      	bne.n	800c1ac <RemapAndLinkDMAtoUARTRx+0x144>
 800c1aa:	e2f7      	b.n	800c79c <RemapAndLinkDMAtoUARTRx+0x734>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c1ac:	4a82      	ldr	r2, [pc, #520]	; (800c3b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d100      	bne.n	800c1b4 <RemapAndLinkDMAtoUARTRx+0x14c>
 800c1b2:	e304      	b.n	800c7be <RemapAndLinkDMAtoUARTRx+0x756>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c1b4:	4a80      	ldr	r2, [pc, #512]	; (800c3b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d100      	bne.n	800c1bc <RemapAndLinkDMAtoUARTRx+0x154>
 800c1ba:	e310      	b.n	800c7de <RemapAndLinkDMAtoUARTRx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c1bc:	4a7f      	ldr	r2, [pc, #508]	; (800c3bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d100      	bne.n	800c1c4 <RemapAndLinkDMAtoUARTRx+0x15c>
 800c1c2:	e31d      	b.n	800c800 <RemapAndLinkDMAtoUARTRx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c1c4:	4a7d      	ldr	r2, [pc, #500]	; (800c3bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d100      	bne.n	800c1cc <RemapAndLinkDMAtoUARTRx+0x164>
 800c1ca:	e328      	b.n	800c81e <RemapAndLinkDMAtoUARTRx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c1cc:	4a7b      	ldr	r2, [pc, #492]	; (800c3bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d100      	bne.n	800c1d4 <RemapAndLinkDMAtoUARTRx+0x16c>
 800c1d2:	e335      	b.n	800c840 <RemapAndLinkDMAtoUARTRx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c1d4:	4a79      	ldr	r2, [pc, #484]	; (800c3bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d100      	bne.n	800c1dc <RemapAndLinkDMAtoUARTRx+0x174>
 800c1da:	e342      	b.n	800c862 <RemapAndLinkDMAtoUARTRx+0x7fa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c1dc:	4a77      	ldr	r2, [pc, #476]	; (800c3bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d100      	bne.n	800c1e4 <RemapAndLinkDMAtoUARTRx+0x17c>
 800c1e2:	e34f      	b.n	800c884 <RemapAndLinkDMAtoUARTRx+0x81c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c1e4:	4a75      	ldr	r2, [pc, #468]	; (800c3bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d11e      	bne.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800c1ea:	4b75      	ldr	r3, [pc, #468]	; (800c3c0 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c1ec:	680a      	ldr	r2, [r1, #0]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d11a      	bne.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c1f2:	4a74      	ldr	r2, [pc, #464]	; (800c3c4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c1f4:	23a8      	movs	r3, #168	; 0xa8
 800c1f6:	58d4      	ldr	r4, [r2, r3]
 800c1f8:	4d73      	ldr	r5, [pc, #460]	; (800c3c8 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c1fa:	402c      	ands	r4, r5
 800c1fc:	50d4      	str	r4, [r2, r3]
 800c1fe:	58d5      	ldr	r5, [r2, r3]
 800c200:	24f0      	movs	r4, #240	; 0xf0
 800c202:	0124      	lsls	r4, r4, #4
 800c204:	432c      	orrs	r4, r5
 800c206:	50d4      	str	r4, [r2, r3]
 800c208:	e00e      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c20a:	4a70      	ldr	r2, [pc, #448]	; (800c3cc <RemapAndLinkDMAtoUARTRx+0x364>)
 800c20c:	680c      	ldr	r4, [r1, #0]
 800c20e:	4294      	cmp	r4, r2
 800c210:	d000      	beq.n	800c214 <RemapAndLinkDMAtoUARTRx+0x1ac>
 800c212:	e72f      	b.n	800c074 <RemapAndLinkDMAtoUARTRx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c214:	4a6e      	ldr	r2, [pc, #440]	; (800c3d0 <RemapAndLinkDMAtoUARTRx+0x368>)
 800c216:	23a8      	movs	r3, #168	; 0xa8
 800c218:	58d4      	ldr	r4, [r2, r3]
 800c21a:	250f      	movs	r5, #15
 800c21c:	43ac      	bics	r4, r5
 800c21e:	50d4      	str	r4, [r2, r3]
 800c220:	58d4      	ldr	r4, [r2, r3]
 800c222:	3d07      	subs	r5, #7
 800c224:	432c      	orrs	r4, r5
 800c226:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c228:	6641      	str	r1, [r0, #100]	; 0x64
 800c22a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c22c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c22e:	4a69      	ldr	r2, [pc, #420]	; (800c3d4 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800c230:	680c      	ldr	r4, [r1, #0]
 800c232:	4294      	cmp	r4, r2
 800c234:	d000      	beq.n	800c238 <RemapAndLinkDMAtoUARTRx+0x1d0>
 800c236:	e721      	b.n	800c07c <RemapAndLinkDMAtoUARTRx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c238:	4a65      	ldr	r2, [pc, #404]	; (800c3d0 <RemapAndLinkDMAtoUARTRx+0x368>)
 800c23a:	23a8      	movs	r3, #168	; 0xa8
 800c23c:	58d4      	ldr	r4, [r2, r3]
 800c23e:	4d62      	ldr	r5, [pc, #392]	; (800c3c8 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c240:	402c      	ands	r4, r5
 800c242:	50d4      	str	r4, [r2, r3]
 800c244:	58d5      	ldr	r5, [r2, r3]
 800c246:	2480      	movs	r4, #128	; 0x80
 800c248:	0124      	lsls	r4, r4, #4
 800c24a:	432c      	orrs	r4, r5
 800c24c:	50d4      	str	r4, [r2, r3]
 800c24e:	e7eb      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c250:	4a61      	ldr	r2, [pc, #388]	; (800c3d8 <RemapAndLinkDMAtoUARTRx+0x370>)
 800c252:	680c      	ldr	r4, [r1, #0]
 800c254:	4294      	cmp	r4, r2
 800c256:	d000      	beq.n	800c25a <RemapAndLinkDMAtoUARTRx+0x1f2>
 800c258:	e714      	b.n	800c084 <RemapAndLinkDMAtoUARTRx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c25a:	4a5d      	ldr	r2, [pc, #372]	; (800c3d0 <RemapAndLinkDMAtoUARTRx+0x368>)
 800c25c:	23a8      	movs	r3, #168	; 0xa8
 800c25e:	58d4      	ldr	r4, [r2, r3]
 800c260:	4d5e      	ldr	r5, [pc, #376]	; (800c3dc <RemapAndLinkDMAtoUARTRx+0x374>)
 800c262:	402c      	ands	r4, r5
 800c264:	50d4      	str	r4, [r2, r3]
 800c266:	58d5      	ldr	r5, [r2, r3]
 800c268:	2480      	movs	r4, #128	; 0x80
 800c26a:	0324      	lsls	r4, r4, #12
 800c26c:	432c      	orrs	r4, r5
 800c26e:	50d4      	str	r4, [r2, r3]
 800c270:	e7da      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c272:	4a5b      	ldr	r2, [pc, #364]	; (800c3e0 <RemapAndLinkDMAtoUARTRx+0x378>)
 800c274:	680c      	ldr	r4, [r1, #0]
 800c276:	4294      	cmp	r4, r2
 800c278:	d000      	beq.n	800c27c <RemapAndLinkDMAtoUARTRx+0x214>
 800c27a:	e707      	b.n	800c08c <RemapAndLinkDMAtoUARTRx+0x24>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c27c:	4a54      	ldr	r2, [pc, #336]	; (800c3d0 <RemapAndLinkDMAtoUARTRx+0x368>)
 800c27e:	23a8      	movs	r3, #168	; 0xa8
 800c280:	58d4      	ldr	r4, [r2, r3]
 800c282:	4d58      	ldr	r5, [pc, #352]	; (800c3e4 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800c284:	402c      	ands	r4, r5
 800c286:	50d4      	str	r4, [r2, r3]
 800c288:	58d5      	ldr	r5, [r2, r3]
 800c28a:	2480      	movs	r4, #128	; 0x80
 800c28c:	0424      	lsls	r4, r4, #16
 800c28e:	432c      	orrs	r4, r5
 800c290:	50d4      	str	r4, [r2, r3]
 800c292:	e7c9      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c294:	4a54      	ldr	r2, [pc, #336]	; (800c3e8 <RemapAndLinkDMAtoUARTRx+0x380>)
 800c296:	680c      	ldr	r4, [r1, #0]
 800c298:	4294      	cmp	r4, r2
 800c29a:	d000      	beq.n	800c29e <RemapAndLinkDMAtoUARTRx+0x236>
 800c29c:	e6fa      	b.n	800c094 <RemapAndLinkDMAtoUARTRx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c29e:	4a49      	ldr	r2, [pc, #292]	; (800c3c4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c2a0:	23a8      	movs	r3, #168	; 0xa8
 800c2a2:	58d4      	ldr	r4, [r2, r3]
 800c2a4:	25f0      	movs	r5, #240	; 0xf0
 800c2a6:	43ac      	bics	r4, r5
 800c2a8:	50d4      	str	r4, [r2, r3]
 800c2aa:	58d4      	ldr	r4, [r2, r3]
 800c2ac:	3d70      	subs	r5, #112	; 0x70
 800c2ae:	432c      	orrs	r4, r5
 800c2b0:	50d4      	str	r4, [r2, r3]
 800c2b2:	e7b9      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c2b4:	4a42      	ldr	r2, [pc, #264]	; (800c3c0 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c2b6:	680c      	ldr	r4, [r1, #0]
 800c2b8:	4294      	cmp	r4, r2
 800c2ba:	d000      	beq.n	800c2be <RemapAndLinkDMAtoUARTRx+0x256>
 800c2bc:	e6ee      	b.n	800c09c <RemapAndLinkDMAtoUARTRx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c2be:	4a41      	ldr	r2, [pc, #260]	; (800c3c4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c2c0:	23a8      	movs	r3, #168	; 0xa8
 800c2c2:	58d4      	ldr	r4, [r2, r3]
 800c2c4:	4d40      	ldr	r5, [pc, #256]	; (800c3c8 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c2c6:	402c      	ands	r4, r5
 800c2c8:	50d4      	str	r4, [r2, r3]
 800c2ca:	58d5      	ldr	r5, [r2, r3]
 800c2cc:	2480      	movs	r4, #128	; 0x80
 800c2ce:	0124      	lsls	r4, r4, #4
 800c2d0:	432c      	orrs	r4, r5
 800c2d2:	50d4      	str	r4, [r2, r3]
 800c2d4:	e7a8      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c2d6:	4a3d      	ldr	r2, [pc, #244]	; (800c3cc <RemapAndLinkDMAtoUARTRx+0x364>)
 800c2d8:	680c      	ldr	r4, [r1, #0]
 800c2da:	4294      	cmp	r4, r2
 800c2dc:	d000      	beq.n	800c2e0 <RemapAndLinkDMAtoUARTRx+0x278>
 800c2de:	e6e1      	b.n	800c0a4 <RemapAndLinkDMAtoUARTRx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800c2e0:	4a3b      	ldr	r2, [pc, #236]	; (800c3d0 <RemapAndLinkDMAtoUARTRx+0x368>)
 800c2e2:	23a8      	movs	r3, #168	; 0xa8
 800c2e4:	58d4      	ldr	r4, [r2, r3]
 800c2e6:	250f      	movs	r5, #15
 800c2e8:	43ac      	bics	r4, r5
 800c2ea:	50d4      	str	r4, [r2, r3]
 800c2ec:	58d4      	ldr	r4, [r2, r3]
 800c2ee:	3d06      	subs	r5, #6
 800c2f0:	432c      	orrs	r4, r5
 800c2f2:	50d4      	str	r4, [r2, r3]
 800c2f4:	e798      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c2f6:	4a37      	ldr	r2, [pc, #220]	; (800c3d4 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800c2f8:	680c      	ldr	r4, [r1, #0]
 800c2fa:	4294      	cmp	r4, r2
 800c2fc:	d000      	beq.n	800c300 <RemapAndLinkDMAtoUARTRx+0x298>
 800c2fe:	e6d5      	b.n	800c0ac <RemapAndLinkDMAtoUARTRx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800c300:	4a33      	ldr	r2, [pc, #204]	; (800c3d0 <RemapAndLinkDMAtoUARTRx+0x368>)
 800c302:	23a8      	movs	r3, #168	; 0xa8
 800c304:	58d4      	ldr	r4, [r2, r3]
 800c306:	4d30      	ldr	r5, [pc, #192]	; (800c3c8 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c308:	402c      	ands	r4, r5
 800c30a:	50d4      	str	r4, [r2, r3]
 800c30c:	58d5      	ldr	r5, [r2, r3]
 800c30e:	2490      	movs	r4, #144	; 0x90
 800c310:	0124      	lsls	r4, r4, #4
 800c312:	432c      	orrs	r4, r5
 800c314:	50d4      	str	r4, [r2, r3]
 800c316:	e787      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c318:	4a2f      	ldr	r2, [pc, #188]	; (800c3d8 <RemapAndLinkDMAtoUARTRx+0x370>)
 800c31a:	680c      	ldr	r4, [r1, #0]
 800c31c:	4294      	cmp	r4, r2
 800c31e:	d000      	beq.n	800c322 <RemapAndLinkDMAtoUARTRx+0x2ba>
 800c320:	e6c8      	b.n	800c0b4 <RemapAndLinkDMAtoUARTRx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800c322:	4a2b      	ldr	r2, [pc, #172]	; (800c3d0 <RemapAndLinkDMAtoUARTRx+0x368>)
 800c324:	23a8      	movs	r3, #168	; 0xa8
 800c326:	58d4      	ldr	r4, [r2, r3]
 800c328:	4d2c      	ldr	r5, [pc, #176]	; (800c3dc <RemapAndLinkDMAtoUARTRx+0x374>)
 800c32a:	402c      	ands	r4, r5
 800c32c:	50d4      	str	r4, [r2, r3]
 800c32e:	58d5      	ldr	r5, [r2, r3]
 800c330:	2490      	movs	r4, #144	; 0x90
 800c332:	0324      	lsls	r4, r4, #12
 800c334:	432c      	orrs	r4, r5
 800c336:	50d4      	str	r4, [r2, r3]
 800c338:	e776      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c33a:	4a29      	ldr	r2, [pc, #164]	; (800c3e0 <RemapAndLinkDMAtoUARTRx+0x378>)
 800c33c:	680c      	ldr	r4, [r1, #0]
 800c33e:	4294      	cmp	r4, r2
 800c340:	d000      	beq.n	800c344 <RemapAndLinkDMAtoUARTRx+0x2dc>
 800c342:	e6bb      	b.n	800c0bc <RemapAndLinkDMAtoUARTRx+0x54>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800c344:	4a22      	ldr	r2, [pc, #136]	; (800c3d0 <RemapAndLinkDMAtoUARTRx+0x368>)
 800c346:	23a8      	movs	r3, #168	; 0xa8
 800c348:	58d4      	ldr	r4, [r2, r3]
 800c34a:	4d26      	ldr	r5, [pc, #152]	; (800c3e4 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800c34c:	402c      	ands	r4, r5
 800c34e:	50d4      	str	r4, [r2, r3]
 800c350:	58d5      	ldr	r5, [r2, r3]
 800c352:	2490      	movs	r4, #144	; 0x90
 800c354:	0424      	lsls	r4, r4, #16
 800c356:	432c      	orrs	r4, r5
 800c358:	50d4      	str	r4, [r2, r3]
 800c35a:	e765      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c35c:	4a22      	ldr	r2, [pc, #136]	; (800c3e8 <RemapAndLinkDMAtoUARTRx+0x380>)
 800c35e:	680c      	ldr	r4, [r1, #0]
 800c360:	4294      	cmp	r4, r2
 800c362:	d000      	beq.n	800c366 <RemapAndLinkDMAtoUARTRx+0x2fe>
 800c364:	e6ae      	b.n	800c0c4 <RemapAndLinkDMAtoUARTRx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800c366:	4a17      	ldr	r2, [pc, #92]	; (800c3c4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c368:	23a8      	movs	r3, #168	; 0xa8
 800c36a:	58d4      	ldr	r4, [r2, r3]
 800c36c:	25f0      	movs	r5, #240	; 0xf0
 800c36e:	43ac      	bics	r4, r5
 800c370:	50d4      	str	r4, [r2, r3]
 800c372:	58d4      	ldr	r4, [r2, r3]
 800c374:	3d60      	subs	r5, #96	; 0x60
 800c376:	432c      	orrs	r4, r5
 800c378:	50d4      	str	r4, [r2, r3]
 800c37a:	e755      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c37c:	4a10      	ldr	r2, [pc, #64]	; (800c3c0 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c37e:	680c      	ldr	r4, [r1, #0]
 800c380:	4294      	cmp	r4, r2
 800c382:	d000      	beq.n	800c386 <RemapAndLinkDMAtoUARTRx+0x31e>
 800c384:	e6a2      	b.n	800c0cc <RemapAndLinkDMAtoUARTRx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c386:	4a0f      	ldr	r2, [pc, #60]	; (800c3c4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c388:	23a8      	movs	r3, #168	; 0xa8
 800c38a:	58d4      	ldr	r4, [r2, r3]
 800c38c:	4d0e      	ldr	r5, [pc, #56]	; (800c3c8 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c38e:	402c      	ands	r4, r5
 800c390:	50d4      	str	r4, [r2, r3]
 800c392:	58d5      	ldr	r5, [r2, r3]
 800c394:	2490      	movs	r4, #144	; 0x90
 800c396:	0124      	lsls	r4, r4, #4
 800c398:	432c      	orrs	r4, r5
 800c39a:	50d4      	str	r4, [r2, r3]
 800c39c:	e744      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800c39e:	46c0      	nop			; (mov r8, r8)
 800c3a0:	40013800 	.word	0x40013800
 800c3a4:	40004400 	.word	0x40004400
 800c3a8:	40004800 	.word	0x40004800
 800c3ac:	40004c00 	.word	0x40004c00
 800c3b0:	40005000 	.word	0x40005000
 800c3b4:	40011400 	.word	0x40011400
 800c3b8:	40011800 	.word	0x40011800
 800c3bc:	40011c00 	.word	0x40011c00
 800c3c0:	40020430 	.word	0x40020430
 800c3c4:	40020400 	.word	0x40020400
 800c3c8:	fffff0ff 	.word	0xfffff0ff
 800c3cc:	40020008 	.word	0x40020008
 800c3d0:	40020000 	.word	0x40020000
 800c3d4:	40020030 	.word	0x40020030
 800c3d8:	40020058 	.word	0x40020058
 800c3dc:	fff0ffff 	.word	0xfff0ffff
 800c3e0:	4002006c 	.word	0x4002006c
 800c3e4:	ff0fffff 	.word	0xff0fffff
 800c3e8:	4002041c 	.word	0x4002041c
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c3ec:	4ae0      	ldr	r2, [pc, #896]	; (800c770 <RemapAndLinkDMAtoUARTRx+0x708>)
 800c3ee:	680c      	ldr	r4, [r1, #0]
 800c3f0:	4294      	cmp	r4, r2
 800c3f2:	d000      	beq.n	800c3f6 <RemapAndLinkDMAtoUARTRx+0x38e>
 800c3f4:	e66e      	b.n	800c0d4 <RemapAndLinkDMAtoUARTRx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800c3f6:	4adf      	ldr	r2, [pc, #892]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c3f8:	23a8      	movs	r3, #168	; 0xa8
 800c3fa:	58d4      	ldr	r4, [r2, r3]
 800c3fc:	250f      	movs	r5, #15
 800c3fe:	43ac      	bics	r4, r5
 800c400:	50d4      	str	r4, [r2, r3]
 800c402:	58d4      	ldr	r4, [r2, r3]
 800c404:	3d05      	subs	r5, #5
 800c406:	432c      	orrs	r4, r5
 800c408:	50d4      	str	r4, [r2, r3]
 800c40a:	e70d      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c40c:	4ada      	ldr	r2, [pc, #872]	; (800c778 <RemapAndLinkDMAtoUARTRx+0x710>)
 800c40e:	680c      	ldr	r4, [r1, #0]
 800c410:	4294      	cmp	r4, r2
 800c412:	d000      	beq.n	800c416 <RemapAndLinkDMAtoUARTRx+0x3ae>
 800c414:	e662      	b.n	800c0dc <RemapAndLinkDMAtoUARTRx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c416:	4ad7      	ldr	r2, [pc, #860]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c418:	23a8      	movs	r3, #168	; 0xa8
 800c41a:	58d4      	ldr	r4, [r2, r3]
 800c41c:	4dd7      	ldr	r5, [pc, #860]	; (800c77c <RemapAndLinkDMAtoUARTRx+0x714>)
 800c41e:	402c      	ands	r4, r5
 800c420:	50d4      	str	r4, [r2, r3]
 800c422:	58d5      	ldr	r5, [r2, r3]
 800c424:	24a0      	movs	r4, #160	; 0xa0
 800c426:	0124      	lsls	r4, r4, #4
 800c428:	432c      	orrs	r4, r5
 800c42a:	50d4      	str	r4, [r2, r3]
 800c42c:	e6fc      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c42e:	4ad4      	ldr	r2, [pc, #848]	; (800c780 <RemapAndLinkDMAtoUARTRx+0x718>)
 800c430:	680c      	ldr	r4, [r1, #0]
 800c432:	4294      	cmp	r4, r2
 800c434:	d000      	beq.n	800c438 <RemapAndLinkDMAtoUARTRx+0x3d0>
 800c436:	e655      	b.n	800c0e4 <RemapAndLinkDMAtoUARTRx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c438:	4ace      	ldr	r2, [pc, #824]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c43a:	23a8      	movs	r3, #168	; 0xa8
 800c43c:	58d4      	ldr	r4, [r2, r3]
 800c43e:	4dd1      	ldr	r5, [pc, #836]	; (800c784 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800c440:	402c      	ands	r4, r5
 800c442:	50d4      	str	r4, [r2, r3]
 800c444:	58d5      	ldr	r5, [r2, r3]
 800c446:	24a0      	movs	r4, #160	; 0xa0
 800c448:	0324      	lsls	r4, r4, #12
 800c44a:	432c      	orrs	r4, r5
 800c44c:	50d4      	str	r4, [r2, r3]
 800c44e:	e6eb      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c450:	4acd      	ldr	r2, [pc, #820]	; (800c788 <RemapAndLinkDMAtoUARTRx+0x720>)
 800c452:	680c      	ldr	r4, [r1, #0]
 800c454:	4294      	cmp	r4, r2
 800c456:	d000      	beq.n	800c45a <RemapAndLinkDMAtoUARTRx+0x3f2>
 800c458:	e648      	b.n	800c0ec <RemapAndLinkDMAtoUARTRx+0x84>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c45a:	4ac6      	ldr	r2, [pc, #792]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c45c:	23a8      	movs	r3, #168	; 0xa8
 800c45e:	58d4      	ldr	r4, [r2, r3]
 800c460:	4dca      	ldr	r5, [pc, #808]	; (800c78c <RemapAndLinkDMAtoUARTRx+0x724>)
 800c462:	402c      	ands	r4, r5
 800c464:	50d4      	str	r4, [r2, r3]
 800c466:	58d5      	ldr	r5, [r2, r3]
 800c468:	24a0      	movs	r4, #160	; 0xa0
 800c46a:	0424      	lsls	r4, r4, #16
 800c46c:	432c      	orrs	r4, r5
 800c46e:	50d4      	str	r4, [r2, r3]
 800c470:	e6da      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c472:	4ac7      	ldr	r2, [pc, #796]	; (800c790 <RemapAndLinkDMAtoUARTRx+0x728>)
 800c474:	680c      	ldr	r4, [r1, #0]
 800c476:	4294      	cmp	r4, r2
 800c478:	d000      	beq.n	800c47c <RemapAndLinkDMAtoUARTRx+0x414>
 800c47a:	e63b      	b.n	800c0f4 <RemapAndLinkDMAtoUARTRx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c47c:	4ac5      	ldr	r2, [pc, #788]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c47e:	23a8      	movs	r3, #168	; 0xa8
 800c480:	58d4      	ldr	r4, [r2, r3]
 800c482:	25f0      	movs	r5, #240	; 0xf0
 800c484:	43ac      	bics	r4, r5
 800c486:	50d4      	str	r4, [r2, r3]
 800c488:	58d4      	ldr	r4, [r2, r3]
 800c48a:	3d50      	subs	r5, #80	; 0x50
 800c48c:	432c      	orrs	r4, r5
 800c48e:	50d4      	str	r4, [r2, r3]
 800c490:	e6ca      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c492:	4ac1      	ldr	r2, [pc, #772]	; (800c798 <RemapAndLinkDMAtoUARTRx+0x730>)
 800c494:	680c      	ldr	r4, [r1, #0]
 800c496:	4294      	cmp	r4, r2
 800c498:	d000      	beq.n	800c49c <RemapAndLinkDMAtoUARTRx+0x434>
 800c49a:	e62f      	b.n	800c0fc <RemapAndLinkDMAtoUARTRx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c49c:	4abd      	ldr	r2, [pc, #756]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c49e:	23a8      	movs	r3, #168	; 0xa8
 800c4a0:	58d4      	ldr	r4, [r2, r3]
 800c4a2:	4db6      	ldr	r5, [pc, #728]	; (800c77c <RemapAndLinkDMAtoUARTRx+0x714>)
 800c4a4:	402c      	ands	r4, r5
 800c4a6:	50d4      	str	r4, [r2, r3]
 800c4a8:	58d5      	ldr	r5, [r2, r3]
 800c4aa:	24a0      	movs	r4, #160	; 0xa0
 800c4ac:	0124      	lsls	r4, r4, #4
 800c4ae:	432c      	orrs	r4, r5
 800c4b0:	50d4      	str	r4, [r2, r3]
 800c4b2:	e6b9      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c4b4:	4aae      	ldr	r2, [pc, #696]	; (800c770 <RemapAndLinkDMAtoUARTRx+0x708>)
 800c4b6:	680c      	ldr	r4, [r1, #0]
 800c4b8:	4294      	cmp	r4, r2
 800c4ba:	d000      	beq.n	800c4be <RemapAndLinkDMAtoUARTRx+0x456>
 800c4bc:	e622      	b.n	800c104 <RemapAndLinkDMAtoUARTRx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c4be:	4aad      	ldr	r2, [pc, #692]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c4c0:	23a8      	movs	r3, #168	; 0xa8
 800c4c2:	58d4      	ldr	r4, [r2, r3]
 800c4c4:	250f      	movs	r5, #15
 800c4c6:	43ac      	bics	r4, r5
 800c4c8:	50d4      	str	r4, [r2, r3]
 800c4ca:	58d4      	ldr	r4, [r2, r3]
 800c4cc:	3d04      	subs	r5, #4
 800c4ce:	432c      	orrs	r4, r5
 800c4d0:	50d4      	str	r4, [r2, r3]
 800c4d2:	e6a9      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c4d4:	4aa8      	ldr	r2, [pc, #672]	; (800c778 <RemapAndLinkDMAtoUARTRx+0x710>)
 800c4d6:	680c      	ldr	r4, [r1, #0]
 800c4d8:	4294      	cmp	r4, r2
 800c4da:	d000      	beq.n	800c4de <RemapAndLinkDMAtoUARTRx+0x476>
 800c4dc:	e616      	b.n	800c10c <RemapAndLinkDMAtoUARTRx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c4de:	4aa5      	ldr	r2, [pc, #660]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c4e0:	23a8      	movs	r3, #168	; 0xa8
 800c4e2:	58d4      	ldr	r4, [r2, r3]
 800c4e4:	4da5      	ldr	r5, [pc, #660]	; (800c77c <RemapAndLinkDMAtoUARTRx+0x714>)
 800c4e6:	402c      	ands	r4, r5
 800c4e8:	50d4      	str	r4, [r2, r3]
 800c4ea:	58d5      	ldr	r5, [r2, r3]
 800c4ec:	24b0      	movs	r4, #176	; 0xb0
 800c4ee:	0124      	lsls	r4, r4, #4
 800c4f0:	432c      	orrs	r4, r5
 800c4f2:	50d4      	str	r4, [r2, r3]
 800c4f4:	e698      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c4f6:	4aa2      	ldr	r2, [pc, #648]	; (800c780 <RemapAndLinkDMAtoUARTRx+0x718>)
 800c4f8:	680c      	ldr	r4, [r1, #0]
 800c4fa:	4294      	cmp	r4, r2
 800c4fc:	d000      	beq.n	800c500 <RemapAndLinkDMAtoUARTRx+0x498>
 800c4fe:	e609      	b.n	800c114 <RemapAndLinkDMAtoUARTRx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c500:	4a9c      	ldr	r2, [pc, #624]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c502:	23a8      	movs	r3, #168	; 0xa8
 800c504:	58d4      	ldr	r4, [r2, r3]
 800c506:	4d9f      	ldr	r5, [pc, #636]	; (800c784 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800c508:	402c      	ands	r4, r5
 800c50a:	50d4      	str	r4, [r2, r3]
 800c50c:	58d5      	ldr	r5, [r2, r3]
 800c50e:	24b0      	movs	r4, #176	; 0xb0
 800c510:	0324      	lsls	r4, r4, #12
 800c512:	432c      	orrs	r4, r5
 800c514:	50d4      	str	r4, [r2, r3]
 800c516:	e687      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c518:	4a9b      	ldr	r2, [pc, #620]	; (800c788 <RemapAndLinkDMAtoUARTRx+0x720>)
 800c51a:	680c      	ldr	r4, [r1, #0]
 800c51c:	4294      	cmp	r4, r2
 800c51e:	d000      	beq.n	800c522 <RemapAndLinkDMAtoUARTRx+0x4ba>
 800c520:	e5fc      	b.n	800c11c <RemapAndLinkDMAtoUARTRx+0xb4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c522:	4a94      	ldr	r2, [pc, #592]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c524:	23a8      	movs	r3, #168	; 0xa8
 800c526:	58d4      	ldr	r4, [r2, r3]
 800c528:	4d98      	ldr	r5, [pc, #608]	; (800c78c <RemapAndLinkDMAtoUARTRx+0x724>)
 800c52a:	402c      	ands	r4, r5
 800c52c:	50d4      	str	r4, [r2, r3]
 800c52e:	58d5      	ldr	r5, [r2, r3]
 800c530:	24b0      	movs	r4, #176	; 0xb0
 800c532:	0424      	lsls	r4, r4, #16
 800c534:	432c      	orrs	r4, r5
 800c536:	50d4      	str	r4, [r2, r3]
 800c538:	e676      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c53a:	4a95      	ldr	r2, [pc, #596]	; (800c790 <RemapAndLinkDMAtoUARTRx+0x728>)
 800c53c:	680c      	ldr	r4, [r1, #0]
 800c53e:	4294      	cmp	r4, r2
 800c540:	d000      	beq.n	800c544 <RemapAndLinkDMAtoUARTRx+0x4dc>
 800c542:	e5ef      	b.n	800c124 <RemapAndLinkDMAtoUARTRx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800c544:	4a93      	ldr	r2, [pc, #588]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c546:	23a8      	movs	r3, #168	; 0xa8
 800c548:	58d4      	ldr	r4, [r2, r3]
 800c54a:	25f0      	movs	r5, #240	; 0xf0
 800c54c:	43ac      	bics	r4, r5
 800c54e:	50d4      	str	r4, [r2, r3]
 800c550:	58d4      	ldr	r4, [r2, r3]
 800c552:	3d40      	subs	r5, #64	; 0x40
 800c554:	432c      	orrs	r4, r5
 800c556:	50d4      	str	r4, [r2, r3]
 800c558:	e666      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c55a:	4a8f      	ldr	r2, [pc, #572]	; (800c798 <RemapAndLinkDMAtoUARTRx+0x730>)
 800c55c:	680c      	ldr	r4, [r1, #0]
 800c55e:	4294      	cmp	r4, r2
 800c560:	d000      	beq.n	800c564 <RemapAndLinkDMAtoUARTRx+0x4fc>
 800c562:	e5e3      	b.n	800c12c <RemapAndLinkDMAtoUARTRx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c564:	4a8b      	ldr	r2, [pc, #556]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c566:	23a8      	movs	r3, #168	; 0xa8
 800c568:	58d4      	ldr	r4, [r2, r3]
 800c56a:	4d84      	ldr	r5, [pc, #528]	; (800c77c <RemapAndLinkDMAtoUARTRx+0x714>)
 800c56c:	402c      	ands	r4, r5
 800c56e:	50d4      	str	r4, [r2, r3]
 800c570:	58d5      	ldr	r5, [r2, r3]
 800c572:	24b0      	movs	r4, #176	; 0xb0
 800c574:	0124      	lsls	r4, r4, #4
 800c576:	432c      	orrs	r4, r5
 800c578:	50d4      	str	r4, [r2, r3]
 800c57a:	e655      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c57c:	4a7c      	ldr	r2, [pc, #496]	; (800c770 <RemapAndLinkDMAtoUARTRx+0x708>)
 800c57e:	680c      	ldr	r4, [r1, #0]
 800c580:	4294      	cmp	r4, r2
 800c582:	d000      	beq.n	800c586 <RemapAndLinkDMAtoUARTRx+0x51e>
 800c584:	e5d6      	b.n	800c134 <RemapAndLinkDMAtoUARTRx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800c586:	4a7b      	ldr	r2, [pc, #492]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c588:	23a8      	movs	r3, #168	; 0xa8
 800c58a:	58d4      	ldr	r4, [r2, r3]
 800c58c:	250f      	movs	r5, #15
 800c58e:	43ac      	bics	r4, r5
 800c590:	50d4      	str	r4, [r2, r3]
 800c592:	58d4      	ldr	r4, [r2, r3]
 800c594:	3d03      	subs	r5, #3
 800c596:	432c      	orrs	r4, r5
 800c598:	50d4      	str	r4, [r2, r3]
 800c59a:	e645      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c59c:	4a76      	ldr	r2, [pc, #472]	; (800c778 <RemapAndLinkDMAtoUARTRx+0x710>)
 800c59e:	680c      	ldr	r4, [r1, #0]
 800c5a0:	4294      	cmp	r4, r2
 800c5a2:	d000      	beq.n	800c5a6 <RemapAndLinkDMAtoUARTRx+0x53e>
 800c5a4:	e5ca      	b.n	800c13c <RemapAndLinkDMAtoUARTRx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800c5a6:	4a73      	ldr	r2, [pc, #460]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c5a8:	23a8      	movs	r3, #168	; 0xa8
 800c5aa:	58d4      	ldr	r4, [r2, r3]
 800c5ac:	4d73      	ldr	r5, [pc, #460]	; (800c77c <RemapAndLinkDMAtoUARTRx+0x714>)
 800c5ae:	402c      	ands	r4, r5
 800c5b0:	50d4      	str	r4, [r2, r3]
 800c5b2:	58d5      	ldr	r5, [r2, r3]
 800c5b4:	24c0      	movs	r4, #192	; 0xc0
 800c5b6:	0124      	lsls	r4, r4, #4
 800c5b8:	432c      	orrs	r4, r5
 800c5ba:	50d4      	str	r4, [r2, r3]
 800c5bc:	e634      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c5be:	4a70      	ldr	r2, [pc, #448]	; (800c780 <RemapAndLinkDMAtoUARTRx+0x718>)
 800c5c0:	680c      	ldr	r4, [r1, #0]
 800c5c2:	4294      	cmp	r4, r2
 800c5c4:	d000      	beq.n	800c5c8 <RemapAndLinkDMAtoUARTRx+0x560>
 800c5c6:	e5bd      	b.n	800c144 <RemapAndLinkDMAtoUARTRx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800c5c8:	4a6a      	ldr	r2, [pc, #424]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c5ca:	23a8      	movs	r3, #168	; 0xa8
 800c5cc:	58d4      	ldr	r4, [r2, r3]
 800c5ce:	4d6d      	ldr	r5, [pc, #436]	; (800c784 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800c5d0:	402c      	ands	r4, r5
 800c5d2:	50d4      	str	r4, [r2, r3]
 800c5d4:	58d5      	ldr	r5, [r2, r3]
 800c5d6:	24c0      	movs	r4, #192	; 0xc0
 800c5d8:	0324      	lsls	r4, r4, #12
 800c5da:	432c      	orrs	r4, r5
 800c5dc:	50d4      	str	r4, [r2, r3]
 800c5de:	e623      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c5e0:	4a69      	ldr	r2, [pc, #420]	; (800c788 <RemapAndLinkDMAtoUARTRx+0x720>)
 800c5e2:	680c      	ldr	r4, [r1, #0]
 800c5e4:	4294      	cmp	r4, r2
 800c5e6:	d000      	beq.n	800c5ea <RemapAndLinkDMAtoUARTRx+0x582>
 800c5e8:	e5b0      	b.n	800c14c <RemapAndLinkDMAtoUARTRx+0xe4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800c5ea:	4a62      	ldr	r2, [pc, #392]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c5ec:	23a8      	movs	r3, #168	; 0xa8
 800c5ee:	58d4      	ldr	r4, [r2, r3]
 800c5f0:	4d66      	ldr	r5, [pc, #408]	; (800c78c <RemapAndLinkDMAtoUARTRx+0x724>)
 800c5f2:	402c      	ands	r4, r5
 800c5f4:	50d4      	str	r4, [r2, r3]
 800c5f6:	58d5      	ldr	r5, [r2, r3]
 800c5f8:	24c0      	movs	r4, #192	; 0xc0
 800c5fa:	0424      	lsls	r4, r4, #16
 800c5fc:	432c      	orrs	r4, r5
 800c5fe:	50d4      	str	r4, [r2, r3]
 800c600:	e612      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c602:	4a63      	ldr	r2, [pc, #396]	; (800c790 <RemapAndLinkDMAtoUARTRx+0x728>)
 800c604:	680c      	ldr	r4, [r1, #0]
 800c606:	4294      	cmp	r4, r2
 800c608:	d000      	beq.n	800c60c <RemapAndLinkDMAtoUARTRx+0x5a4>
 800c60a:	e5a3      	b.n	800c154 <RemapAndLinkDMAtoUARTRx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800c60c:	4a61      	ldr	r2, [pc, #388]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c60e:	23a8      	movs	r3, #168	; 0xa8
 800c610:	58d4      	ldr	r4, [r2, r3]
 800c612:	25f0      	movs	r5, #240	; 0xf0
 800c614:	43ac      	bics	r4, r5
 800c616:	50d4      	str	r4, [r2, r3]
 800c618:	58d4      	ldr	r4, [r2, r3]
 800c61a:	3d30      	subs	r5, #48	; 0x30
 800c61c:	432c      	orrs	r4, r5
 800c61e:	50d4      	str	r4, [r2, r3]
 800c620:	e602      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c622:	4a5d      	ldr	r2, [pc, #372]	; (800c798 <RemapAndLinkDMAtoUARTRx+0x730>)
 800c624:	680c      	ldr	r4, [r1, #0]
 800c626:	4294      	cmp	r4, r2
 800c628:	d000      	beq.n	800c62c <RemapAndLinkDMAtoUARTRx+0x5c4>
 800c62a:	e597      	b.n	800c15c <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800c62c:	4a59      	ldr	r2, [pc, #356]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c62e:	23a8      	movs	r3, #168	; 0xa8
 800c630:	58d4      	ldr	r4, [r2, r3]
 800c632:	4d52      	ldr	r5, [pc, #328]	; (800c77c <RemapAndLinkDMAtoUARTRx+0x714>)
 800c634:	402c      	ands	r4, r5
 800c636:	50d4      	str	r4, [r2, r3]
 800c638:	58d5      	ldr	r5, [r2, r3]
 800c63a:	24c0      	movs	r4, #192	; 0xc0
 800c63c:	0124      	lsls	r4, r4, #4
 800c63e:	432c      	orrs	r4, r5
 800c640:	50d4      	str	r4, [r2, r3]
 800c642:	e5f1      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c644:	4a4a      	ldr	r2, [pc, #296]	; (800c770 <RemapAndLinkDMAtoUARTRx+0x708>)
 800c646:	680c      	ldr	r4, [r1, #0]
 800c648:	4294      	cmp	r4, r2
 800c64a:	d000      	beq.n	800c64e <RemapAndLinkDMAtoUARTRx+0x5e6>
 800c64c:	e58a      	b.n	800c164 <RemapAndLinkDMAtoUARTRx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800c64e:	4a49      	ldr	r2, [pc, #292]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c650:	23a8      	movs	r3, #168	; 0xa8
 800c652:	58d4      	ldr	r4, [r2, r3]
 800c654:	250f      	movs	r5, #15
 800c656:	43ac      	bics	r4, r5
 800c658:	50d4      	str	r4, [r2, r3]
 800c65a:	58d4      	ldr	r4, [r2, r3]
 800c65c:	3d02      	subs	r5, #2
 800c65e:	432c      	orrs	r4, r5
 800c660:	50d4      	str	r4, [r2, r3]
 800c662:	e5e1      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c664:	4a44      	ldr	r2, [pc, #272]	; (800c778 <RemapAndLinkDMAtoUARTRx+0x710>)
 800c666:	680c      	ldr	r4, [r1, #0]
 800c668:	4294      	cmp	r4, r2
 800c66a:	d000      	beq.n	800c66e <RemapAndLinkDMAtoUARTRx+0x606>
 800c66c:	e57e      	b.n	800c16c <RemapAndLinkDMAtoUARTRx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800c66e:	4a41      	ldr	r2, [pc, #260]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c670:	23a8      	movs	r3, #168	; 0xa8
 800c672:	58d4      	ldr	r4, [r2, r3]
 800c674:	4d41      	ldr	r5, [pc, #260]	; (800c77c <RemapAndLinkDMAtoUARTRx+0x714>)
 800c676:	402c      	ands	r4, r5
 800c678:	50d4      	str	r4, [r2, r3]
 800c67a:	58d5      	ldr	r5, [r2, r3]
 800c67c:	24d0      	movs	r4, #208	; 0xd0
 800c67e:	0124      	lsls	r4, r4, #4
 800c680:	432c      	orrs	r4, r5
 800c682:	50d4      	str	r4, [r2, r3]
 800c684:	e5d0      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c686:	4a3e      	ldr	r2, [pc, #248]	; (800c780 <RemapAndLinkDMAtoUARTRx+0x718>)
 800c688:	680c      	ldr	r4, [r1, #0]
 800c68a:	4294      	cmp	r4, r2
 800c68c:	d000      	beq.n	800c690 <RemapAndLinkDMAtoUARTRx+0x628>
 800c68e:	e571      	b.n	800c174 <RemapAndLinkDMAtoUARTRx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800c690:	4a38      	ldr	r2, [pc, #224]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c692:	23a8      	movs	r3, #168	; 0xa8
 800c694:	58d4      	ldr	r4, [r2, r3]
 800c696:	4d3b      	ldr	r5, [pc, #236]	; (800c784 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800c698:	402c      	ands	r4, r5
 800c69a:	50d4      	str	r4, [r2, r3]
 800c69c:	58d5      	ldr	r5, [r2, r3]
 800c69e:	24d0      	movs	r4, #208	; 0xd0
 800c6a0:	0324      	lsls	r4, r4, #12
 800c6a2:	432c      	orrs	r4, r5
 800c6a4:	50d4      	str	r4, [r2, r3]
 800c6a6:	e5bf      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c6a8:	4a37      	ldr	r2, [pc, #220]	; (800c788 <RemapAndLinkDMAtoUARTRx+0x720>)
 800c6aa:	680c      	ldr	r4, [r1, #0]
 800c6ac:	4294      	cmp	r4, r2
 800c6ae:	d000      	beq.n	800c6b2 <RemapAndLinkDMAtoUARTRx+0x64a>
 800c6b0:	e564      	b.n	800c17c <RemapAndLinkDMAtoUARTRx+0x114>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c6b2:	4a30      	ldr	r2, [pc, #192]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c6b4:	23a8      	movs	r3, #168	; 0xa8
 800c6b6:	58d4      	ldr	r4, [r2, r3]
 800c6b8:	4d34      	ldr	r5, [pc, #208]	; (800c78c <RemapAndLinkDMAtoUARTRx+0x724>)
 800c6ba:	402c      	ands	r4, r5
 800c6bc:	50d4      	str	r4, [r2, r3]
 800c6be:	58d5      	ldr	r5, [r2, r3]
 800c6c0:	24d0      	movs	r4, #208	; 0xd0
 800c6c2:	0424      	lsls	r4, r4, #16
 800c6c4:	432c      	orrs	r4, r5
 800c6c6:	50d4      	str	r4, [r2, r3]
 800c6c8:	e5ae      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c6ca:	4a31      	ldr	r2, [pc, #196]	; (800c790 <RemapAndLinkDMAtoUARTRx+0x728>)
 800c6cc:	680c      	ldr	r4, [r1, #0]
 800c6ce:	4294      	cmp	r4, r2
 800c6d0:	d000      	beq.n	800c6d4 <RemapAndLinkDMAtoUARTRx+0x66c>
 800c6d2:	e557      	b.n	800c184 <RemapAndLinkDMAtoUARTRx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c6d4:	4a2f      	ldr	r2, [pc, #188]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c6d6:	23a8      	movs	r3, #168	; 0xa8
 800c6d8:	58d4      	ldr	r4, [r2, r3]
 800c6da:	25f0      	movs	r5, #240	; 0xf0
 800c6dc:	43ac      	bics	r4, r5
 800c6de:	50d4      	str	r4, [r2, r3]
 800c6e0:	58d4      	ldr	r4, [r2, r3]
 800c6e2:	3d20      	subs	r5, #32
 800c6e4:	432c      	orrs	r4, r5
 800c6e6:	50d4      	str	r4, [r2, r3]
 800c6e8:	e59e      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c6ea:	4a2b      	ldr	r2, [pc, #172]	; (800c798 <RemapAndLinkDMAtoUARTRx+0x730>)
 800c6ec:	680c      	ldr	r4, [r1, #0]
 800c6ee:	4294      	cmp	r4, r2
 800c6f0:	d000      	beq.n	800c6f4 <RemapAndLinkDMAtoUARTRx+0x68c>
 800c6f2:	e54b      	b.n	800c18c <RemapAndLinkDMAtoUARTRx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800c6f4:	4a27      	ldr	r2, [pc, #156]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c6f6:	23a8      	movs	r3, #168	; 0xa8
 800c6f8:	58d4      	ldr	r4, [r2, r3]
 800c6fa:	4d20      	ldr	r5, [pc, #128]	; (800c77c <RemapAndLinkDMAtoUARTRx+0x714>)
 800c6fc:	402c      	ands	r4, r5
 800c6fe:	50d4      	str	r4, [r2, r3]
 800c700:	58d5      	ldr	r5, [r2, r3]
 800c702:	24d0      	movs	r4, #208	; 0xd0
 800c704:	0124      	lsls	r4, r4, #4
 800c706:	432c      	orrs	r4, r5
 800c708:	50d4      	str	r4, [r2, r3]
 800c70a:	e58d      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c70c:	4a18      	ldr	r2, [pc, #96]	; (800c770 <RemapAndLinkDMAtoUARTRx+0x708>)
 800c70e:	680c      	ldr	r4, [r1, #0]
 800c710:	4294      	cmp	r4, r2
 800c712:	d000      	beq.n	800c716 <RemapAndLinkDMAtoUARTRx+0x6ae>
 800c714:	e53e      	b.n	800c194 <RemapAndLinkDMAtoUARTRx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c716:	4a17      	ldr	r2, [pc, #92]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c718:	23a8      	movs	r3, #168	; 0xa8
 800c71a:	58d4      	ldr	r4, [r2, r3]
 800c71c:	250f      	movs	r5, #15
 800c71e:	43ac      	bics	r4, r5
 800c720:	50d4      	str	r4, [r2, r3]
 800c722:	58d4      	ldr	r4, [r2, r3]
 800c724:	3d01      	subs	r5, #1
 800c726:	432c      	orrs	r4, r5
 800c728:	50d4      	str	r4, [r2, r3]
 800c72a:	e57d      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c72c:	4a12      	ldr	r2, [pc, #72]	; (800c778 <RemapAndLinkDMAtoUARTRx+0x710>)
 800c72e:	680c      	ldr	r4, [r1, #0]
 800c730:	4294      	cmp	r4, r2
 800c732:	d000      	beq.n	800c736 <RemapAndLinkDMAtoUARTRx+0x6ce>
 800c734:	e532      	b.n	800c19c <RemapAndLinkDMAtoUARTRx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800c736:	4a0f      	ldr	r2, [pc, #60]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c738:	23a8      	movs	r3, #168	; 0xa8
 800c73a:	58d4      	ldr	r4, [r2, r3]
 800c73c:	4d0f      	ldr	r5, [pc, #60]	; (800c77c <RemapAndLinkDMAtoUARTRx+0x714>)
 800c73e:	402c      	ands	r4, r5
 800c740:	50d4      	str	r4, [r2, r3]
 800c742:	58d5      	ldr	r5, [r2, r3]
 800c744:	24e0      	movs	r4, #224	; 0xe0
 800c746:	0124      	lsls	r4, r4, #4
 800c748:	432c      	orrs	r4, r5
 800c74a:	50d4      	str	r4, [r2, r3]
 800c74c:	e56c      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c74e:	4a0c      	ldr	r2, [pc, #48]	; (800c780 <RemapAndLinkDMAtoUARTRx+0x718>)
 800c750:	680c      	ldr	r4, [r1, #0]
 800c752:	4294      	cmp	r4, r2
 800c754:	d000      	beq.n	800c758 <RemapAndLinkDMAtoUARTRx+0x6f0>
 800c756:	e525      	b.n	800c1a4 <RemapAndLinkDMAtoUARTRx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800c758:	4a06      	ldr	r2, [pc, #24]	; (800c774 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c75a:	23a8      	movs	r3, #168	; 0xa8
 800c75c:	58d4      	ldr	r4, [r2, r3]
 800c75e:	4d09      	ldr	r5, [pc, #36]	; (800c784 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800c760:	402c      	ands	r4, r5
 800c762:	50d4      	str	r4, [r2, r3]
 800c764:	58d5      	ldr	r5, [r2, r3]
 800c766:	24e0      	movs	r4, #224	; 0xe0
 800c768:	0324      	lsls	r4, r4, #12
 800c76a:	432c      	orrs	r4, r5
 800c76c:	50d4      	str	r4, [r2, r3]
 800c76e:	e55b      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800c770:	40020008 	.word	0x40020008
 800c774:	40020000 	.word	0x40020000
 800c778:	40020030 	.word	0x40020030
 800c77c:	fffff0ff 	.word	0xfffff0ff
 800c780:	40020058 	.word	0x40020058
 800c784:	fff0ffff 	.word	0xfff0ffff
 800c788:	4002006c 	.word	0x4002006c
 800c78c:	ff0fffff 	.word	0xff0fffff
 800c790:	4002041c 	.word	0x4002041c
 800c794:	40020400 	.word	0x40020400
 800c798:	40020430 	.word	0x40020430
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c79c:	4a41      	ldr	r2, [pc, #260]	; (800c8a4 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800c79e:	680c      	ldr	r4, [r1, #0]
 800c7a0:	4294      	cmp	r4, r2
 800c7a2:	d000      	beq.n	800c7a6 <RemapAndLinkDMAtoUARTRx+0x73e>
 800c7a4:	e502      	b.n	800c1ac <RemapAndLinkDMAtoUARTRx+0x144>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800c7a6:	4a40      	ldr	r2, [pc, #256]	; (800c8a8 <RemapAndLinkDMAtoUARTRx+0x840>)
 800c7a8:	23a8      	movs	r3, #168	; 0xa8
 800c7aa:	58d4      	ldr	r4, [r2, r3]
 800c7ac:	4d3f      	ldr	r5, [pc, #252]	; (800c8ac <RemapAndLinkDMAtoUARTRx+0x844>)
 800c7ae:	402c      	ands	r4, r5
 800c7b0:	50d4      	str	r4, [r2, r3]
 800c7b2:	58d5      	ldr	r5, [r2, r3]
 800c7b4:	24e0      	movs	r4, #224	; 0xe0
 800c7b6:	0424      	lsls	r4, r4, #16
 800c7b8:	432c      	orrs	r4, r5
 800c7ba:	50d4      	str	r4, [r2, r3]
 800c7bc:	e534      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c7be:	4a3c      	ldr	r2, [pc, #240]	; (800c8b0 <RemapAndLinkDMAtoUARTRx+0x848>)
 800c7c0:	680c      	ldr	r4, [r1, #0]
 800c7c2:	4294      	cmp	r4, r2
 800c7c4:	d000      	beq.n	800c7c8 <RemapAndLinkDMAtoUARTRx+0x760>
 800c7c6:	e4f5      	b.n	800c1b4 <RemapAndLinkDMAtoUARTRx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800c7c8:	4a3a      	ldr	r2, [pc, #232]	; (800c8b4 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800c7ca:	23a8      	movs	r3, #168	; 0xa8
 800c7cc:	58d4      	ldr	r4, [r2, r3]
 800c7ce:	25f0      	movs	r5, #240	; 0xf0
 800c7d0:	43ac      	bics	r4, r5
 800c7d2:	50d4      	str	r4, [r2, r3]
 800c7d4:	58d4      	ldr	r4, [r2, r3]
 800c7d6:	3d10      	subs	r5, #16
 800c7d8:	432c      	orrs	r4, r5
 800c7da:	50d4      	str	r4, [r2, r3]
 800c7dc:	e524      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c7de:	4a36      	ldr	r2, [pc, #216]	; (800c8b8 <RemapAndLinkDMAtoUARTRx+0x850>)
 800c7e0:	680c      	ldr	r4, [r1, #0]
 800c7e2:	4294      	cmp	r4, r2
 800c7e4:	d000      	beq.n	800c7e8 <RemapAndLinkDMAtoUARTRx+0x780>
 800c7e6:	e4e9      	b.n	800c1bc <RemapAndLinkDMAtoUARTRx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800c7e8:	4a32      	ldr	r2, [pc, #200]	; (800c8b4 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800c7ea:	23a8      	movs	r3, #168	; 0xa8
 800c7ec:	58d4      	ldr	r4, [r2, r3]
 800c7ee:	4d33      	ldr	r5, [pc, #204]	; (800c8bc <RemapAndLinkDMAtoUARTRx+0x854>)
 800c7f0:	402c      	ands	r4, r5
 800c7f2:	50d4      	str	r4, [r2, r3]
 800c7f4:	58d5      	ldr	r5, [r2, r3]
 800c7f6:	24e0      	movs	r4, #224	; 0xe0
 800c7f8:	0124      	lsls	r4, r4, #4
 800c7fa:	432c      	orrs	r4, r5
 800c7fc:	50d4      	str	r4, [r2, r3]
 800c7fe:	e513      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c800:	4a2f      	ldr	r2, [pc, #188]	; (800c8c0 <RemapAndLinkDMAtoUARTRx+0x858>)
 800c802:	680c      	ldr	r4, [r1, #0]
 800c804:	4294      	cmp	r4, r2
 800c806:	d000      	beq.n	800c80a <RemapAndLinkDMAtoUARTRx+0x7a2>
 800c808:	e4dc      	b.n	800c1c4 <RemapAndLinkDMAtoUARTRx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800c80a:	4a27      	ldr	r2, [pc, #156]	; (800c8a8 <RemapAndLinkDMAtoUARTRx+0x840>)
 800c80c:	23a8      	movs	r3, #168	; 0xa8
 800c80e:	58d5      	ldr	r5, [r2, r3]
 800c810:	260f      	movs	r6, #15
 800c812:	43b5      	bics	r5, r6
 800c814:	50d5      	str	r5, [r2, r3]
 800c816:	58d4      	ldr	r4, [r2, r3]
 800c818:	4334      	orrs	r4, r6
 800c81a:	50d4      	str	r4, [r2, r3]
 800c81c:	e504      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c81e:	4a29      	ldr	r2, [pc, #164]	; (800c8c4 <RemapAndLinkDMAtoUARTRx+0x85c>)
 800c820:	680c      	ldr	r4, [r1, #0]
 800c822:	4294      	cmp	r4, r2
 800c824:	d000      	beq.n	800c828 <RemapAndLinkDMAtoUARTRx+0x7c0>
 800c826:	e4d1      	b.n	800c1cc <RemapAndLinkDMAtoUARTRx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c828:	4a1f      	ldr	r2, [pc, #124]	; (800c8a8 <RemapAndLinkDMAtoUARTRx+0x840>)
 800c82a:	23a8      	movs	r3, #168	; 0xa8
 800c82c:	58d4      	ldr	r4, [r2, r3]
 800c82e:	4d23      	ldr	r5, [pc, #140]	; (800c8bc <RemapAndLinkDMAtoUARTRx+0x854>)
 800c830:	402c      	ands	r4, r5
 800c832:	50d4      	str	r4, [r2, r3]
 800c834:	58d5      	ldr	r5, [r2, r3]
 800c836:	24f0      	movs	r4, #240	; 0xf0
 800c838:	0124      	lsls	r4, r4, #4
 800c83a:	432c      	orrs	r4, r5
 800c83c:	50d4      	str	r4, [r2, r3]
 800c83e:	e4f3      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c840:	4a21      	ldr	r2, [pc, #132]	; (800c8c8 <RemapAndLinkDMAtoUARTRx+0x860>)
 800c842:	680c      	ldr	r4, [r1, #0]
 800c844:	4294      	cmp	r4, r2
 800c846:	d000      	beq.n	800c84a <RemapAndLinkDMAtoUARTRx+0x7e2>
 800c848:	e4c4      	b.n	800c1d4 <RemapAndLinkDMAtoUARTRx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c84a:	4a17      	ldr	r2, [pc, #92]	; (800c8a8 <RemapAndLinkDMAtoUARTRx+0x840>)
 800c84c:	23a8      	movs	r3, #168	; 0xa8
 800c84e:	58d4      	ldr	r4, [r2, r3]
 800c850:	4d1e      	ldr	r5, [pc, #120]	; (800c8cc <RemapAndLinkDMAtoUARTRx+0x864>)
 800c852:	402c      	ands	r4, r5
 800c854:	50d4      	str	r4, [r2, r3]
 800c856:	58d5      	ldr	r5, [r2, r3]
 800c858:	24f0      	movs	r4, #240	; 0xf0
 800c85a:	0324      	lsls	r4, r4, #12
 800c85c:	432c      	orrs	r4, r5
 800c85e:	50d4      	str	r4, [r2, r3]
 800c860:	e4e2      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c862:	4a10      	ldr	r2, [pc, #64]	; (800c8a4 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800c864:	680c      	ldr	r4, [r1, #0]
 800c866:	4294      	cmp	r4, r2
 800c868:	d000      	beq.n	800c86c <RemapAndLinkDMAtoUARTRx+0x804>
 800c86a:	e4b7      	b.n	800c1dc <RemapAndLinkDMAtoUARTRx+0x174>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c86c:	4a0e      	ldr	r2, [pc, #56]	; (800c8a8 <RemapAndLinkDMAtoUARTRx+0x840>)
 800c86e:	23a8      	movs	r3, #168	; 0xa8
 800c870:	58d4      	ldr	r4, [r2, r3]
 800c872:	4d0e      	ldr	r5, [pc, #56]	; (800c8ac <RemapAndLinkDMAtoUARTRx+0x844>)
 800c874:	402c      	ands	r4, r5
 800c876:	50d4      	str	r4, [r2, r3]
 800c878:	58d5      	ldr	r5, [r2, r3]
 800c87a:	24f0      	movs	r4, #240	; 0xf0
 800c87c:	0424      	lsls	r4, r4, #16
 800c87e:	432c      	orrs	r4, r5
 800c880:	50d4      	str	r4, [r2, r3]
 800c882:	e4d1      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c884:	4a0a      	ldr	r2, [pc, #40]	; (800c8b0 <RemapAndLinkDMAtoUARTRx+0x848>)
 800c886:	680c      	ldr	r4, [r1, #0]
 800c888:	4294      	cmp	r4, r2
 800c88a:	d000      	beq.n	800c88e <RemapAndLinkDMAtoUARTRx+0x826>
 800c88c:	e4aa      	b.n	800c1e4 <RemapAndLinkDMAtoUARTRx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c88e:	4a09      	ldr	r2, [pc, #36]	; (800c8b4 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800c890:	23a8      	movs	r3, #168	; 0xa8
 800c892:	58d5      	ldr	r5, [r2, r3]
 800c894:	26f0      	movs	r6, #240	; 0xf0
 800c896:	43b5      	bics	r5, r6
 800c898:	50d5      	str	r5, [r2, r3]
 800c89a:	58d4      	ldr	r4, [r2, r3]
 800c89c:	4334      	orrs	r4, r6
 800c89e:	50d4      	str	r4, [r2, r3]
 800c8a0:	e4c2      	b.n	800c228 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800c8a2:	46c0      	nop			; (mov r8, r8)
 800c8a4:	4002006c 	.word	0x4002006c
 800c8a8:	40020000 	.word	0x40020000
 800c8ac:	ff0fffff 	.word	0xff0fffff
 800c8b0:	4002041c 	.word	0x4002041c
 800c8b4:	40020400 	.word	0x40020400
 800c8b8:	40020430 	.word	0x40020430
 800c8bc:	fffff0ff 	.word	0xfffff0ff
 800c8c0:	40020008 	.word	0x40020008
 800c8c4:	40020030 	.word	0x40020030
 800c8c8:	40020058 	.word	0x40020058
 800c8cc:	fff0ffff 	.word	0xfff0ffff

0800c8d0 <DMA_MSG_RX_Setup>:
{	
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	0004      	movs	r4, r0
 800c8d4:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c8d6:	f7ff fbc7 	bl	800c068 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c8da:	2100      	movs	r1, #0
 800c8dc:	0028      	movs	r0, r5
 800c8de:	f7ff fb0d 	bl	800befc <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c8e2:	0020      	movs	r0, r4
 800c8e4:	f7fe fb9a 	bl	800b01c <GetPort>
 800c8e8:	1e41      	subs	r1, r0, #1
 800c8ea:	0189      	lsls	r1, r1, #6
 800c8ec:	4803      	ldr	r0, [pc, #12]	; (800c8fc <DMA_MSG_RX_Setup+0x2c>)
 800c8ee:	1809      	adds	r1, r1, r0
 800c8f0:	2240      	movs	r2, #64	; 0x40
 800c8f2:	0020      	movs	r0, r4
 800c8f4:	f006 f84a 	bl	801298c <HAL_UART_Receive_DMA>
}
 800c8f8:	bd70      	pop	{r4, r5, r6, pc}
 800c8fa:	46c0      	nop			; (mov r8, r8)
 800c8fc:	20000ae8 	.word	0x20000ae8

0800c900 <SetupMessagingRxDMAs>:
{	
 800c900:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c902:	4b17      	ldr	r3, [pc, #92]	; (800c960 <SetupMessagingRxDMAs+0x60>)
 800c904:	785b      	ldrb	r3, [r3, #1]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d010      	beq.n	800c92c <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800c90a:	4b15      	ldr	r3, [pc, #84]	; (800c960 <SetupMessagingRxDMAs+0x60>)
 800c90c:	789b      	ldrb	r3, [r3, #2]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d011      	beq.n	800c936 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800c912:	4b13      	ldr	r3, [pc, #76]	; (800c960 <SetupMessagingRxDMAs+0x60>)
 800c914:	78db      	ldrb	r3, [r3, #3]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d012      	beq.n	800c940 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800c91a:	4b11      	ldr	r3, [pc, #68]	; (800c960 <SetupMessagingRxDMAs+0x60>)
 800c91c:	791b      	ldrb	r3, [r3, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d013      	beq.n	800c94a <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800c922:	4b0f      	ldr	r3, [pc, #60]	; (800c960 <SetupMessagingRxDMAs+0x60>)
 800c924:	795b      	ldrb	r3, [r3, #5]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d014      	beq.n	800c954 <SetupMessagingRxDMAs+0x54>
}
 800c92a:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c92c:	490d      	ldr	r1, [pc, #52]	; (800c964 <SetupMessagingRxDMAs+0x64>)
 800c92e:	480e      	ldr	r0, [pc, #56]	; (800c968 <SetupMessagingRxDMAs+0x68>)
 800c930:	f7ff ffce 	bl	800c8d0 <DMA_MSG_RX_Setup>
 800c934:	e7e9      	b.n	800c90a <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c936:	490d      	ldr	r1, [pc, #52]	; (800c96c <SetupMessagingRxDMAs+0x6c>)
 800c938:	480d      	ldr	r0, [pc, #52]	; (800c970 <SetupMessagingRxDMAs+0x70>)
 800c93a:	f7ff ffc9 	bl	800c8d0 <DMA_MSG_RX_Setup>
 800c93e:	e7e8      	b.n	800c912 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c940:	490c      	ldr	r1, [pc, #48]	; (800c974 <SetupMessagingRxDMAs+0x74>)
 800c942:	480d      	ldr	r0, [pc, #52]	; (800c978 <SetupMessagingRxDMAs+0x78>)
 800c944:	f7ff ffc4 	bl	800c8d0 <DMA_MSG_RX_Setup>
 800c948:	e7e7      	b.n	800c91a <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c94a:	490c      	ldr	r1, [pc, #48]	; (800c97c <SetupMessagingRxDMAs+0x7c>)
 800c94c:	480c      	ldr	r0, [pc, #48]	; (800c980 <SetupMessagingRxDMAs+0x80>)
 800c94e:	f7ff ffbf 	bl	800c8d0 <DMA_MSG_RX_Setup>
 800c952:	e7e6      	b.n	800c922 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c954:	490b      	ldr	r1, [pc, #44]	; (800c984 <SetupMessagingRxDMAs+0x84>)
 800c956:	480c      	ldr	r0, [pc, #48]	; (800c988 <SetupMessagingRxDMAs+0x88>)
 800c958:	f7ff ffba 	bl	800c8d0 <DMA_MSG_RX_Setup>
}
 800c95c:	e7e5      	b.n	800c92a <SetupMessagingRxDMAs+0x2a>
 800c95e:	46c0      	nop			; (mov r8, r8)
 800c960:	20000910 	.word	0x20000910
 800c964:	20000f4c 	.word	0x20000f4c
 800c968:	200062f0 	.word	0x200062f0
 800c96c:	20000f84 	.word	0x20000f84
 800c970:	2000644c 	.word	0x2000644c
 800c974:	20000fbc 	.word	0x20000fbc
 800c978:	200063dc 	.word	0x200063dc
 800c97c:	20000ff4 	.word	0x20000ff4
 800c980:	20006228 	.word	0x20006228
 800c984:	2000102c 	.word	0x2000102c
 800c988:	20006364 	.word	0x20006364

0800c98c <DMA_STREAM_Setup>:
{	
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	0005      	movs	r5, r0
 800c990:	000f      	movs	r7, r1
 800c992:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800c994:	f7fe fb42 	bl	800b01c <GetPort>
	hDMA = &streamDMA[port-1];
 800c998:	3801      	subs	r0, #1
 800c99a:	00c3      	lsls	r3, r0, #3
 800c99c:	1a18      	subs	r0, r3, r0
 800c99e:	00c4      	lsls	r4, r0, #3
 800c9a0:	4b09      	ldr	r3, [pc, #36]	; (800c9c8 <DMA_STREAM_Setup+0x3c>)
 800c9a2:	18e4      	adds	r4, r4, r3
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c9a4:	0021      	movs	r1, r4
 800c9a6:	0028      	movs	r0, r5
 800c9a8:	f7ff fb5e 	bl	800c068 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c9ac:	2101      	movs	r1, #1
 800c9ae:	0020      	movs	r0, r4
 800c9b0:	f7ff faa4 	bl	800befc <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c9b4:	2369      	movs	r3, #105	; 0x69
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	3128      	adds	r1, #40	; 0x28
 800c9be:	0032      	movs	r2, r6
 800c9c0:	0028      	movs	r0, r5
 800c9c2:	f005 ffe3 	bl	801298c <HAL_UART_Receive_DMA>
}
 800c9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9c8:	20001144 	.word	0x20001144

0800c9cc <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c9cc:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c9ce:	6803      	ldr	r3, [r0, #0]
 800c9d0:	4acc      	ldr	r2, [pc, #816]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d100      	bne.n	800c9d8 <RemapAndLinkDMAtoUARTTx+0xc>
 800c9d6:	e0ca      	b.n	800cb6e <RemapAndLinkDMAtoUARTTx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c9d8:	4aca      	ldr	r2, [pc, #808]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d100      	bne.n	800c9e0 <RemapAndLinkDMAtoUARTTx+0x14>
 800c9de:	e0d8      	b.n	800cb92 <RemapAndLinkDMAtoUARTTx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c9e0:	4ac8      	ldr	r2, [pc, #800]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d100      	bne.n	800c9e8 <RemapAndLinkDMAtoUARTTx+0x1c>
 800c9e6:	e0e5      	b.n	800cbb4 <RemapAndLinkDMAtoUARTTx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c9e8:	4ac6      	ldr	r2, [pc, #792]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d100      	bne.n	800c9f0 <RemapAndLinkDMAtoUARTTx+0x24>
 800c9ee:	e0f2      	b.n	800cbd6 <RemapAndLinkDMAtoUARTTx+0x20a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c9f0:	4ac4      	ldr	r2, [pc, #784]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d100      	bne.n	800c9f8 <RemapAndLinkDMAtoUARTTx+0x2c>
 800c9f6:	e0fe      	b.n	800cbf6 <RemapAndLinkDMAtoUARTTx+0x22a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c9f8:	4ac2      	ldr	r2, [pc, #776]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d100      	bne.n	800ca00 <RemapAndLinkDMAtoUARTTx+0x34>
 800c9fe:	e10b      	b.n	800cc18 <RemapAndLinkDMAtoUARTTx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800ca00:	4ac1      	ldr	r2, [pc, #772]	; (800cd08 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d100      	bne.n	800ca08 <RemapAndLinkDMAtoUARTTx+0x3c>
 800ca06:	e118      	b.n	800cc3a <RemapAndLinkDMAtoUARTTx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800ca08:	4abf      	ldr	r2, [pc, #764]	; (800cd08 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d100      	bne.n	800ca10 <RemapAndLinkDMAtoUARTTx+0x44>
 800ca0e:	e124      	b.n	800cc5a <RemapAndLinkDMAtoUARTTx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800ca10:	4abd      	ldr	r2, [pc, #756]	; (800cd08 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d100      	bne.n	800ca18 <RemapAndLinkDMAtoUARTTx+0x4c>
 800ca16:	e131      	b.n	800cc7c <RemapAndLinkDMAtoUARTTx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800ca18:	4abb      	ldr	r2, [pc, #748]	; (800cd08 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d100      	bne.n	800ca20 <RemapAndLinkDMAtoUARTTx+0x54>
 800ca1e:	e13e      	b.n	800cc9e <RemapAndLinkDMAtoUARTTx+0x2d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800ca20:	4ab9      	ldr	r2, [pc, #740]	; (800cd08 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d100      	bne.n	800ca28 <RemapAndLinkDMAtoUARTTx+0x5c>
 800ca26:	e14a      	b.n	800ccbe <RemapAndLinkDMAtoUARTTx+0x2f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800ca28:	4ab7      	ldr	r2, [pc, #732]	; (800cd08 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d100      	bne.n	800ca30 <RemapAndLinkDMAtoUARTTx+0x64>
 800ca2e:	e157      	b.n	800cce0 <RemapAndLinkDMAtoUARTTx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800ca30:	4ab6      	ldr	r2, [pc, #728]	; (800cd0c <RemapAndLinkDMAtoUARTTx+0x340>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d100      	bne.n	800ca38 <RemapAndLinkDMAtoUARTTx+0x6c>
 800ca36:	e18b      	b.n	800cd50 <RemapAndLinkDMAtoUARTTx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800ca38:	4ab4      	ldr	r2, [pc, #720]	; (800cd0c <RemapAndLinkDMAtoUARTTx+0x340>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d100      	bne.n	800ca40 <RemapAndLinkDMAtoUARTTx+0x74>
 800ca3e:	e197      	b.n	800cd70 <RemapAndLinkDMAtoUARTTx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800ca40:	4ab2      	ldr	r2, [pc, #712]	; (800cd0c <RemapAndLinkDMAtoUARTTx+0x340>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d100      	bne.n	800ca48 <RemapAndLinkDMAtoUARTTx+0x7c>
 800ca46:	e1a4      	b.n	800cd92 <RemapAndLinkDMAtoUARTTx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800ca48:	4ab0      	ldr	r2, [pc, #704]	; (800cd0c <RemapAndLinkDMAtoUARTTx+0x340>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d100      	bne.n	800ca50 <RemapAndLinkDMAtoUARTTx+0x84>
 800ca4e:	e1b1      	b.n	800cdb4 <RemapAndLinkDMAtoUARTTx+0x3e8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800ca50:	4aae      	ldr	r2, [pc, #696]	; (800cd0c <RemapAndLinkDMAtoUARTTx+0x340>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d100      	bne.n	800ca58 <RemapAndLinkDMAtoUARTTx+0x8c>
 800ca56:	e1bd      	b.n	800cdd4 <RemapAndLinkDMAtoUARTTx+0x408>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800ca58:	4aac      	ldr	r2, [pc, #688]	; (800cd0c <RemapAndLinkDMAtoUARTTx+0x340>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d100      	bne.n	800ca60 <RemapAndLinkDMAtoUARTTx+0x94>
 800ca5e:	e1ca      	b.n	800cdf6 <RemapAndLinkDMAtoUARTTx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800ca60:	4aab      	ldr	r2, [pc, #684]	; (800cd10 <RemapAndLinkDMAtoUARTTx+0x344>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d100      	bne.n	800ca68 <RemapAndLinkDMAtoUARTTx+0x9c>
 800ca66:	e1d7      	b.n	800ce18 <RemapAndLinkDMAtoUARTTx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800ca68:	4aa9      	ldr	r2, [pc, #676]	; (800cd10 <RemapAndLinkDMAtoUARTTx+0x344>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d100      	bne.n	800ca70 <RemapAndLinkDMAtoUARTTx+0xa4>
 800ca6e:	e1e3      	b.n	800ce38 <RemapAndLinkDMAtoUARTTx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800ca70:	4aa7      	ldr	r2, [pc, #668]	; (800cd10 <RemapAndLinkDMAtoUARTTx+0x344>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d100      	bne.n	800ca78 <RemapAndLinkDMAtoUARTTx+0xac>
 800ca76:	e1f0      	b.n	800ce5a <RemapAndLinkDMAtoUARTTx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800ca78:	4aa5      	ldr	r2, [pc, #660]	; (800cd10 <RemapAndLinkDMAtoUARTTx+0x344>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d100      	bne.n	800ca80 <RemapAndLinkDMAtoUARTTx+0xb4>
 800ca7e:	e1fd      	b.n	800ce7c <RemapAndLinkDMAtoUARTTx+0x4b0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800ca80:	4aa3      	ldr	r2, [pc, #652]	; (800cd10 <RemapAndLinkDMAtoUARTTx+0x344>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d100      	bne.n	800ca88 <RemapAndLinkDMAtoUARTTx+0xbc>
 800ca86:	e209      	b.n	800ce9c <RemapAndLinkDMAtoUARTTx+0x4d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800ca88:	4aa1      	ldr	r2, [pc, #644]	; (800cd10 <RemapAndLinkDMAtoUARTTx+0x344>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d100      	bne.n	800ca90 <RemapAndLinkDMAtoUARTTx+0xc4>
 800ca8e:	e216      	b.n	800cebe <RemapAndLinkDMAtoUARTTx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800ca90:	4aa0      	ldr	r2, [pc, #640]	; (800cd14 <RemapAndLinkDMAtoUARTTx+0x348>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d100      	bne.n	800ca98 <RemapAndLinkDMAtoUARTTx+0xcc>
 800ca96:	e223      	b.n	800cee0 <RemapAndLinkDMAtoUARTTx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800ca98:	4a9e      	ldr	r2, [pc, #632]	; (800cd14 <RemapAndLinkDMAtoUARTTx+0x348>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d100      	bne.n	800caa0 <RemapAndLinkDMAtoUARTTx+0xd4>
 800ca9e:	e22f      	b.n	800cf00 <RemapAndLinkDMAtoUARTTx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800caa0:	4a9c      	ldr	r2, [pc, #624]	; (800cd14 <RemapAndLinkDMAtoUARTTx+0x348>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d100      	bne.n	800caa8 <RemapAndLinkDMAtoUARTTx+0xdc>
 800caa6:	e23c      	b.n	800cf22 <RemapAndLinkDMAtoUARTTx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800caa8:	4a9a      	ldr	r2, [pc, #616]	; (800cd14 <RemapAndLinkDMAtoUARTTx+0x348>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d100      	bne.n	800cab0 <RemapAndLinkDMAtoUARTTx+0xe4>
 800caae:	e249      	b.n	800cf44 <RemapAndLinkDMAtoUARTTx+0x578>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800cab0:	4a98      	ldr	r2, [pc, #608]	; (800cd14 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d100      	bne.n	800cab8 <RemapAndLinkDMAtoUARTTx+0xec>
 800cab6:	e255      	b.n	800cf64 <RemapAndLinkDMAtoUARTTx+0x598>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800cab8:	4a96      	ldr	r2, [pc, #600]	; (800cd14 <RemapAndLinkDMAtoUARTTx+0x348>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d100      	bne.n	800cac0 <RemapAndLinkDMAtoUARTTx+0xf4>
 800cabe:	e262      	b.n	800cf86 <RemapAndLinkDMAtoUARTTx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800cac0:	4a95      	ldr	r2, [pc, #596]	; (800cd18 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d100      	bne.n	800cac8 <RemapAndLinkDMAtoUARTTx+0xfc>
 800cac6:	e26f      	b.n	800cfa8 <RemapAndLinkDMAtoUARTTx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800cac8:	4a93      	ldr	r2, [pc, #588]	; (800cd18 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d100      	bne.n	800cad0 <RemapAndLinkDMAtoUARTTx+0x104>
 800cace:	e27b      	b.n	800cfc8 <RemapAndLinkDMAtoUARTTx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800cad0:	4a91      	ldr	r2, [pc, #580]	; (800cd18 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d100      	bne.n	800cad8 <RemapAndLinkDMAtoUARTTx+0x10c>
 800cad6:	e288      	b.n	800cfea <RemapAndLinkDMAtoUARTTx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800cad8:	4a8f      	ldr	r2, [pc, #572]	; (800cd18 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d100      	bne.n	800cae0 <RemapAndLinkDMAtoUARTTx+0x114>
 800cade:	e295      	b.n	800d00c <RemapAndLinkDMAtoUARTTx+0x640>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800cae0:	4a8d      	ldr	r2, [pc, #564]	; (800cd18 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d100      	bne.n	800cae8 <RemapAndLinkDMAtoUARTTx+0x11c>
 800cae6:	e2a1      	b.n	800d02c <RemapAndLinkDMAtoUARTTx+0x660>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800cae8:	4a8b      	ldr	r2, [pc, #556]	; (800cd18 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d100      	bne.n	800caf0 <RemapAndLinkDMAtoUARTTx+0x124>
 800caee:	e2ae      	b.n	800d04e <RemapAndLinkDMAtoUARTTx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800caf0:	4a8a      	ldr	r2, [pc, #552]	; (800cd1c <RemapAndLinkDMAtoUARTTx+0x350>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d100      	bne.n	800caf8 <RemapAndLinkDMAtoUARTTx+0x12c>
 800caf6:	e2bb      	b.n	800d070 <RemapAndLinkDMAtoUARTTx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800caf8:	4a88      	ldr	r2, [pc, #544]	; (800cd1c <RemapAndLinkDMAtoUARTTx+0x350>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d100      	bne.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x134>
 800cafe:	e2c7      	b.n	800d090 <RemapAndLinkDMAtoUARTTx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800cb00:	4a86      	ldr	r2, [pc, #536]	; (800cd1c <RemapAndLinkDMAtoUARTTx+0x350>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d100      	bne.n	800cb08 <RemapAndLinkDMAtoUARTTx+0x13c>
 800cb06:	e2d4      	b.n	800d0b2 <RemapAndLinkDMAtoUARTTx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800cb08:	4a84      	ldr	r2, [pc, #528]	; (800cd1c <RemapAndLinkDMAtoUARTTx+0x350>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d100      	bne.n	800cb10 <RemapAndLinkDMAtoUARTTx+0x144>
 800cb0e:	e2f7      	b.n	800d100 <RemapAndLinkDMAtoUARTTx+0x734>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800cb10:	4a82      	ldr	r2, [pc, #520]	; (800cd1c <RemapAndLinkDMAtoUARTTx+0x350>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d100      	bne.n	800cb18 <RemapAndLinkDMAtoUARTTx+0x14c>
 800cb16:	e303      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x754>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800cb18:	4a80      	ldr	r2, [pc, #512]	; (800cd1c <RemapAndLinkDMAtoUARTTx+0x350>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d100      	bne.n	800cb20 <RemapAndLinkDMAtoUARTTx+0x154>
 800cb1e:	e310      	b.n	800d142 <RemapAndLinkDMAtoUARTTx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800cb20:	4a7f      	ldr	r2, [pc, #508]	; (800cd20 <RemapAndLinkDMAtoUARTTx+0x354>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d100      	bne.n	800cb28 <RemapAndLinkDMAtoUARTTx+0x15c>
 800cb26:	e31d      	b.n	800d164 <RemapAndLinkDMAtoUARTTx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800cb28:	4a7d      	ldr	r2, [pc, #500]	; (800cd20 <RemapAndLinkDMAtoUARTTx+0x354>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d100      	bne.n	800cb30 <RemapAndLinkDMAtoUARTTx+0x164>
 800cb2e:	e328      	b.n	800d182 <RemapAndLinkDMAtoUARTTx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800cb30:	4a7b      	ldr	r2, [pc, #492]	; (800cd20 <RemapAndLinkDMAtoUARTTx+0x354>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d100      	bne.n	800cb38 <RemapAndLinkDMAtoUARTTx+0x16c>
 800cb36:	e335      	b.n	800d1a4 <RemapAndLinkDMAtoUARTTx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800cb38:	4a79      	ldr	r2, [pc, #484]	; (800cd20 <RemapAndLinkDMAtoUARTTx+0x354>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d100      	bne.n	800cb40 <RemapAndLinkDMAtoUARTTx+0x174>
 800cb3e:	e342      	b.n	800d1c6 <RemapAndLinkDMAtoUARTTx+0x7fa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800cb40:	4a77      	ldr	r2, [pc, #476]	; (800cd20 <RemapAndLinkDMAtoUARTTx+0x354>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d100      	bne.n	800cb48 <RemapAndLinkDMAtoUARTTx+0x17c>
 800cb46:	e34d      	b.n	800d1e4 <RemapAndLinkDMAtoUARTTx+0x818>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800cb48:	4a75      	ldr	r2, [pc, #468]	; (800cd20 <RemapAndLinkDMAtoUARTTx+0x354>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d11e      	bne.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
 800cb4e:	4b75      	ldr	r3, [pc, #468]	; (800cd24 <RemapAndLinkDMAtoUARTTx+0x358>)
 800cb50:	680a      	ldr	r2, [r1, #0]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d11a      	bne.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800cb56:	4a74      	ldr	r2, [pc, #464]	; (800cd28 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cb58:	23a8      	movs	r3, #168	; 0xa8
 800cb5a:	58d4      	ldr	r4, [r2, r3]
 800cb5c:	4d73      	ldr	r5, [pc, #460]	; (800cd2c <RemapAndLinkDMAtoUARTTx+0x360>)
 800cb5e:	402c      	ands	r4, r5
 800cb60:	50d4      	str	r4, [r2, r3]
 800cb62:	58d5      	ldr	r5, [r2, r3]
 800cb64:	24f0      	movs	r4, #240	; 0xf0
 800cb66:	0324      	lsls	r4, r4, #12
 800cb68:	432c      	orrs	r4, r5
 800cb6a:	50d4      	str	r4, [r2, r3]
 800cb6c:	e00e      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800cb6e:	4a70      	ldr	r2, [pc, #448]	; (800cd30 <RemapAndLinkDMAtoUARTTx+0x364>)
 800cb70:	680c      	ldr	r4, [r1, #0]
 800cb72:	4294      	cmp	r4, r2
 800cb74:	d000      	beq.n	800cb78 <RemapAndLinkDMAtoUARTTx+0x1ac>
 800cb76:	e72f      	b.n	800c9d8 <RemapAndLinkDMAtoUARTTx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800cb78:	4a6e      	ldr	r2, [pc, #440]	; (800cd34 <RemapAndLinkDMAtoUARTTx+0x368>)
 800cb7a:	23a8      	movs	r3, #168	; 0xa8
 800cb7c:	58d4      	ldr	r4, [r2, r3]
 800cb7e:	25f0      	movs	r5, #240	; 0xf0
 800cb80:	43ac      	bics	r4, r5
 800cb82:	50d4      	str	r4, [r2, r3]
 800cb84:	58d4      	ldr	r4, [r2, r3]
 800cb86:	3d70      	subs	r5, #112	; 0x70
 800cb88:	432c      	orrs	r4, r5
 800cb8a:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800cb8c:	6601      	str	r1, [r0, #96]	; 0x60
 800cb8e:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cb90:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800cb92:	4a69      	ldr	r2, [pc, #420]	; (800cd38 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800cb94:	680c      	ldr	r4, [r1, #0]
 800cb96:	4294      	cmp	r4, r2
 800cb98:	d000      	beq.n	800cb9c <RemapAndLinkDMAtoUARTTx+0x1d0>
 800cb9a:	e721      	b.n	800c9e0 <RemapAndLinkDMAtoUARTTx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800cb9c:	4a65      	ldr	r2, [pc, #404]	; (800cd34 <RemapAndLinkDMAtoUARTTx+0x368>)
 800cb9e:	23a8      	movs	r3, #168	; 0xa8
 800cba0:	58d4      	ldr	r4, [r2, r3]
 800cba2:	4d66      	ldr	r5, [pc, #408]	; (800cd3c <RemapAndLinkDMAtoUARTTx+0x370>)
 800cba4:	402c      	ands	r4, r5
 800cba6:	50d4      	str	r4, [r2, r3]
 800cba8:	58d5      	ldr	r5, [r2, r3]
 800cbaa:	2480      	movs	r4, #128	; 0x80
 800cbac:	0224      	lsls	r4, r4, #8
 800cbae:	432c      	orrs	r4, r5
 800cbb0:	50d4      	str	r4, [r2, r3]
 800cbb2:	e7eb      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800cbb4:	4a62      	ldr	r2, [pc, #392]	; (800cd40 <RemapAndLinkDMAtoUARTTx+0x374>)
 800cbb6:	680c      	ldr	r4, [r1, #0]
 800cbb8:	4294      	cmp	r4, r2
 800cbba:	d000      	beq.n	800cbbe <RemapAndLinkDMAtoUARTTx+0x1f2>
 800cbbc:	e714      	b.n	800c9e8 <RemapAndLinkDMAtoUARTTx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800cbbe:	4a5d      	ldr	r2, [pc, #372]	; (800cd34 <RemapAndLinkDMAtoUARTTx+0x368>)
 800cbc0:	23a8      	movs	r3, #168	; 0xa8
 800cbc2:	58d4      	ldr	r4, [r2, r3]
 800cbc4:	4d5f      	ldr	r5, [pc, #380]	; (800cd44 <RemapAndLinkDMAtoUARTTx+0x378>)
 800cbc6:	402c      	ands	r4, r5
 800cbc8:	50d4      	str	r4, [r2, r3]
 800cbca:	58d5      	ldr	r5, [r2, r3]
 800cbcc:	2480      	movs	r4, #128	; 0x80
 800cbce:	0524      	lsls	r4, r4, #20
 800cbd0:	432c      	orrs	r4, r5
 800cbd2:	50d4      	str	r4, [r2, r3]
 800cbd4:	e7da      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800cbd6:	4a5c      	ldr	r2, [pc, #368]	; (800cd48 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800cbd8:	680c      	ldr	r4, [r1, #0]
 800cbda:	4294      	cmp	r4, r2
 800cbdc:	d000      	beq.n	800cbe0 <RemapAndLinkDMAtoUARTTx+0x214>
 800cbde:	e707      	b.n	800c9f0 <RemapAndLinkDMAtoUARTTx+0x24>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800cbe0:	4a51      	ldr	r2, [pc, #324]	; (800cd28 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cbe2:	23a8      	movs	r3, #168	; 0xa8
 800cbe4:	58d4      	ldr	r4, [r2, r3]
 800cbe6:	250f      	movs	r5, #15
 800cbe8:	43ac      	bics	r4, r5
 800cbea:	50d4      	str	r4, [r2, r3]
 800cbec:	58d4      	ldr	r4, [r2, r3]
 800cbee:	3d07      	subs	r5, #7
 800cbf0:	432c      	orrs	r4, r5
 800cbf2:	50d4      	str	r4, [r2, r3]
 800cbf4:	e7ca      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800cbf6:	4a55      	ldr	r2, [pc, #340]	; (800cd4c <RemapAndLinkDMAtoUARTTx+0x380>)
 800cbf8:	680c      	ldr	r4, [r1, #0]
 800cbfa:	4294      	cmp	r4, r2
 800cbfc:	d000      	beq.n	800cc00 <RemapAndLinkDMAtoUARTTx+0x234>
 800cbfe:	e6fb      	b.n	800c9f8 <RemapAndLinkDMAtoUARTTx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800cc00:	4a49      	ldr	r2, [pc, #292]	; (800cd28 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cc02:	23a8      	movs	r3, #168	; 0xa8
 800cc04:	58d4      	ldr	r4, [r2, r3]
 800cc06:	4d4d      	ldr	r5, [pc, #308]	; (800cd3c <RemapAndLinkDMAtoUARTTx+0x370>)
 800cc08:	402c      	ands	r4, r5
 800cc0a:	50d4      	str	r4, [r2, r3]
 800cc0c:	58d5      	ldr	r5, [r2, r3]
 800cc0e:	2480      	movs	r4, #128	; 0x80
 800cc10:	0224      	lsls	r4, r4, #8
 800cc12:	432c      	orrs	r4, r5
 800cc14:	50d4      	str	r4, [r2, r3]
 800cc16:	e7b9      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800cc18:	4a42      	ldr	r2, [pc, #264]	; (800cd24 <RemapAndLinkDMAtoUARTTx+0x358>)
 800cc1a:	680c      	ldr	r4, [r1, #0]
 800cc1c:	4294      	cmp	r4, r2
 800cc1e:	d000      	beq.n	800cc22 <RemapAndLinkDMAtoUARTTx+0x256>
 800cc20:	e6ee      	b.n	800ca00 <RemapAndLinkDMAtoUARTTx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800cc22:	4a41      	ldr	r2, [pc, #260]	; (800cd28 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cc24:	23a8      	movs	r3, #168	; 0xa8
 800cc26:	58d4      	ldr	r4, [r2, r3]
 800cc28:	4d40      	ldr	r5, [pc, #256]	; (800cd2c <RemapAndLinkDMAtoUARTTx+0x360>)
 800cc2a:	402c      	ands	r4, r5
 800cc2c:	50d4      	str	r4, [r2, r3]
 800cc2e:	58d5      	ldr	r5, [r2, r3]
 800cc30:	2480      	movs	r4, #128	; 0x80
 800cc32:	0324      	lsls	r4, r4, #12
 800cc34:	432c      	orrs	r4, r5
 800cc36:	50d4      	str	r4, [r2, r3]
 800cc38:	e7a8      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800cc3a:	4a3d      	ldr	r2, [pc, #244]	; (800cd30 <RemapAndLinkDMAtoUARTTx+0x364>)
 800cc3c:	680c      	ldr	r4, [r1, #0]
 800cc3e:	4294      	cmp	r4, r2
 800cc40:	d000      	beq.n	800cc44 <RemapAndLinkDMAtoUARTTx+0x278>
 800cc42:	e6e1      	b.n	800ca08 <RemapAndLinkDMAtoUARTTx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800cc44:	4a3b      	ldr	r2, [pc, #236]	; (800cd34 <RemapAndLinkDMAtoUARTTx+0x368>)
 800cc46:	23a8      	movs	r3, #168	; 0xa8
 800cc48:	58d4      	ldr	r4, [r2, r3]
 800cc4a:	25f0      	movs	r5, #240	; 0xf0
 800cc4c:	43ac      	bics	r4, r5
 800cc4e:	50d4      	str	r4, [r2, r3]
 800cc50:	58d4      	ldr	r4, [r2, r3]
 800cc52:	3d60      	subs	r5, #96	; 0x60
 800cc54:	432c      	orrs	r4, r5
 800cc56:	50d4      	str	r4, [r2, r3]
 800cc58:	e798      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800cc5a:	4a37      	ldr	r2, [pc, #220]	; (800cd38 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800cc5c:	680c      	ldr	r4, [r1, #0]
 800cc5e:	4294      	cmp	r4, r2
 800cc60:	d000      	beq.n	800cc64 <RemapAndLinkDMAtoUARTTx+0x298>
 800cc62:	e6d5      	b.n	800ca10 <RemapAndLinkDMAtoUARTTx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800cc64:	4a33      	ldr	r2, [pc, #204]	; (800cd34 <RemapAndLinkDMAtoUARTTx+0x368>)
 800cc66:	23a8      	movs	r3, #168	; 0xa8
 800cc68:	58d4      	ldr	r4, [r2, r3]
 800cc6a:	4d34      	ldr	r5, [pc, #208]	; (800cd3c <RemapAndLinkDMAtoUARTTx+0x370>)
 800cc6c:	402c      	ands	r4, r5
 800cc6e:	50d4      	str	r4, [r2, r3]
 800cc70:	58d5      	ldr	r5, [r2, r3]
 800cc72:	2490      	movs	r4, #144	; 0x90
 800cc74:	0224      	lsls	r4, r4, #8
 800cc76:	432c      	orrs	r4, r5
 800cc78:	50d4      	str	r4, [r2, r3]
 800cc7a:	e787      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800cc7c:	4a30      	ldr	r2, [pc, #192]	; (800cd40 <RemapAndLinkDMAtoUARTTx+0x374>)
 800cc7e:	680c      	ldr	r4, [r1, #0]
 800cc80:	4294      	cmp	r4, r2
 800cc82:	d000      	beq.n	800cc86 <RemapAndLinkDMAtoUARTTx+0x2ba>
 800cc84:	e6c8      	b.n	800ca18 <RemapAndLinkDMAtoUARTTx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800cc86:	4a2b      	ldr	r2, [pc, #172]	; (800cd34 <RemapAndLinkDMAtoUARTTx+0x368>)
 800cc88:	23a8      	movs	r3, #168	; 0xa8
 800cc8a:	58d4      	ldr	r4, [r2, r3]
 800cc8c:	4d2d      	ldr	r5, [pc, #180]	; (800cd44 <RemapAndLinkDMAtoUARTTx+0x378>)
 800cc8e:	402c      	ands	r4, r5
 800cc90:	50d4      	str	r4, [r2, r3]
 800cc92:	58d5      	ldr	r5, [r2, r3]
 800cc94:	2490      	movs	r4, #144	; 0x90
 800cc96:	0524      	lsls	r4, r4, #20
 800cc98:	432c      	orrs	r4, r5
 800cc9a:	50d4      	str	r4, [r2, r3]
 800cc9c:	e776      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800cc9e:	4a2a      	ldr	r2, [pc, #168]	; (800cd48 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800cca0:	680c      	ldr	r4, [r1, #0]
 800cca2:	4294      	cmp	r4, r2
 800cca4:	d000      	beq.n	800cca8 <RemapAndLinkDMAtoUARTTx+0x2dc>
 800cca6:	e6bb      	b.n	800ca20 <RemapAndLinkDMAtoUARTTx+0x54>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800cca8:	4a1f      	ldr	r2, [pc, #124]	; (800cd28 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800ccaa:	23a8      	movs	r3, #168	; 0xa8
 800ccac:	58d4      	ldr	r4, [r2, r3]
 800ccae:	250f      	movs	r5, #15
 800ccb0:	43ac      	bics	r4, r5
 800ccb2:	50d4      	str	r4, [r2, r3]
 800ccb4:	58d4      	ldr	r4, [r2, r3]
 800ccb6:	3d06      	subs	r5, #6
 800ccb8:	432c      	orrs	r4, r5
 800ccba:	50d4      	str	r4, [r2, r3]
 800ccbc:	e766      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800ccbe:	4a23      	ldr	r2, [pc, #140]	; (800cd4c <RemapAndLinkDMAtoUARTTx+0x380>)
 800ccc0:	680c      	ldr	r4, [r1, #0]
 800ccc2:	4294      	cmp	r4, r2
 800ccc4:	d000      	beq.n	800ccc8 <RemapAndLinkDMAtoUARTTx+0x2fc>
 800ccc6:	e6af      	b.n	800ca28 <RemapAndLinkDMAtoUARTTx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800ccc8:	4a17      	ldr	r2, [pc, #92]	; (800cd28 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800ccca:	23a8      	movs	r3, #168	; 0xa8
 800cccc:	58d4      	ldr	r4, [r2, r3]
 800ccce:	4d1b      	ldr	r5, [pc, #108]	; (800cd3c <RemapAndLinkDMAtoUARTTx+0x370>)
 800ccd0:	402c      	ands	r4, r5
 800ccd2:	50d4      	str	r4, [r2, r3]
 800ccd4:	58d5      	ldr	r5, [r2, r3]
 800ccd6:	2490      	movs	r4, #144	; 0x90
 800ccd8:	0224      	lsls	r4, r4, #8
 800ccda:	432c      	orrs	r4, r5
 800ccdc:	50d4      	str	r4, [r2, r3]
 800ccde:	e755      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800cce0:	4a10      	ldr	r2, [pc, #64]	; (800cd24 <RemapAndLinkDMAtoUARTTx+0x358>)
 800cce2:	680c      	ldr	r4, [r1, #0]
 800cce4:	4294      	cmp	r4, r2
 800cce6:	d000      	beq.n	800ccea <RemapAndLinkDMAtoUARTTx+0x31e>
 800cce8:	e6a2      	b.n	800ca30 <RemapAndLinkDMAtoUARTTx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800ccea:	4a0f      	ldr	r2, [pc, #60]	; (800cd28 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800ccec:	23a8      	movs	r3, #168	; 0xa8
 800ccee:	58d4      	ldr	r4, [r2, r3]
 800ccf0:	4d0e      	ldr	r5, [pc, #56]	; (800cd2c <RemapAndLinkDMAtoUARTTx+0x360>)
 800ccf2:	402c      	ands	r4, r5
 800ccf4:	50d4      	str	r4, [r2, r3]
 800ccf6:	58d5      	ldr	r5, [r2, r3]
 800ccf8:	2490      	movs	r4, #144	; 0x90
 800ccfa:	0324      	lsls	r4, r4, #12
 800ccfc:	432c      	orrs	r4, r5
 800ccfe:	50d4      	str	r4, [r2, r3]
 800cd00:	e744      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
 800cd02:	46c0      	nop			; (mov r8, r8)
 800cd04:	40013800 	.word	0x40013800
 800cd08:	40004400 	.word	0x40004400
 800cd0c:	40004800 	.word	0x40004800
 800cd10:	40004c00 	.word	0x40004c00
 800cd14:	40005000 	.word	0x40005000
 800cd18:	40011400 	.word	0x40011400
 800cd1c:	40011800 	.word	0x40011800
 800cd20:	40011c00 	.word	0x40011c00
 800cd24:	40020458 	.word	0x40020458
 800cd28:	40020400 	.word	0x40020400
 800cd2c:	fff0ffff 	.word	0xfff0ffff
 800cd30:	4002001c 	.word	0x4002001c
 800cd34:	40020000 	.word	0x40020000
 800cd38:	40020044 	.word	0x40020044
 800cd3c:	ffff0fff 	.word	0xffff0fff
 800cd40:	40020080 	.word	0x40020080
 800cd44:	f0ffffff 	.word	0xf0ffffff
 800cd48:	40020408 	.word	0x40020408
 800cd4c:	40020444 	.word	0x40020444
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800cd50:	4ae0      	ldr	r2, [pc, #896]	; (800d0d4 <RemapAndLinkDMAtoUARTTx+0x708>)
 800cd52:	680c      	ldr	r4, [r1, #0]
 800cd54:	4294      	cmp	r4, r2
 800cd56:	d000      	beq.n	800cd5a <RemapAndLinkDMAtoUARTTx+0x38e>
 800cd58:	e66e      	b.n	800ca38 <RemapAndLinkDMAtoUARTTx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800cd5a:	4adf      	ldr	r2, [pc, #892]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800cd5c:	23a8      	movs	r3, #168	; 0xa8
 800cd5e:	58d4      	ldr	r4, [r2, r3]
 800cd60:	25f0      	movs	r5, #240	; 0xf0
 800cd62:	43ac      	bics	r4, r5
 800cd64:	50d4      	str	r4, [r2, r3]
 800cd66:	58d4      	ldr	r4, [r2, r3]
 800cd68:	3d50      	subs	r5, #80	; 0x50
 800cd6a:	432c      	orrs	r4, r5
 800cd6c:	50d4      	str	r4, [r2, r3]
 800cd6e:	e70d      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800cd70:	4ada      	ldr	r2, [pc, #872]	; (800d0dc <RemapAndLinkDMAtoUARTTx+0x710>)
 800cd72:	680c      	ldr	r4, [r1, #0]
 800cd74:	4294      	cmp	r4, r2
 800cd76:	d000      	beq.n	800cd7a <RemapAndLinkDMAtoUARTTx+0x3ae>
 800cd78:	e662      	b.n	800ca40 <RemapAndLinkDMAtoUARTTx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800cd7a:	4ad7      	ldr	r2, [pc, #860]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800cd7c:	23a8      	movs	r3, #168	; 0xa8
 800cd7e:	58d4      	ldr	r4, [r2, r3]
 800cd80:	4dd7      	ldr	r5, [pc, #860]	; (800d0e0 <RemapAndLinkDMAtoUARTTx+0x714>)
 800cd82:	402c      	ands	r4, r5
 800cd84:	50d4      	str	r4, [r2, r3]
 800cd86:	58d5      	ldr	r5, [r2, r3]
 800cd88:	24a0      	movs	r4, #160	; 0xa0
 800cd8a:	0224      	lsls	r4, r4, #8
 800cd8c:	432c      	orrs	r4, r5
 800cd8e:	50d4      	str	r4, [r2, r3]
 800cd90:	e6fc      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800cd92:	4ad4      	ldr	r2, [pc, #848]	; (800d0e4 <RemapAndLinkDMAtoUARTTx+0x718>)
 800cd94:	680c      	ldr	r4, [r1, #0]
 800cd96:	4294      	cmp	r4, r2
 800cd98:	d000      	beq.n	800cd9c <RemapAndLinkDMAtoUARTTx+0x3d0>
 800cd9a:	e655      	b.n	800ca48 <RemapAndLinkDMAtoUARTTx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800cd9c:	4ace      	ldr	r2, [pc, #824]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800cd9e:	23a8      	movs	r3, #168	; 0xa8
 800cda0:	58d4      	ldr	r4, [r2, r3]
 800cda2:	4dd1      	ldr	r5, [pc, #836]	; (800d0e8 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800cda4:	402c      	ands	r4, r5
 800cda6:	50d4      	str	r4, [r2, r3]
 800cda8:	58d5      	ldr	r5, [r2, r3]
 800cdaa:	24a0      	movs	r4, #160	; 0xa0
 800cdac:	0524      	lsls	r4, r4, #20
 800cdae:	432c      	orrs	r4, r5
 800cdb0:	50d4      	str	r4, [r2, r3]
 800cdb2:	e6eb      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800cdb4:	4acd      	ldr	r2, [pc, #820]	; (800d0ec <RemapAndLinkDMAtoUARTTx+0x720>)
 800cdb6:	680c      	ldr	r4, [r1, #0]
 800cdb8:	4294      	cmp	r4, r2
 800cdba:	d000      	beq.n	800cdbe <RemapAndLinkDMAtoUARTTx+0x3f2>
 800cdbc:	e648      	b.n	800ca50 <RemapAndLinkDMAtoUARTTx+0x84>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800cdbe:	4acc      	ldr	r2, [pc, #816]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800cdc0:	23a8      	movs	r3, #168	; 0xa8
 800cdc2:	58d4      	ldr	r4, [r2, r3]
 800cdc4:	250f      	movs	r5, #15
 800cdc6:	43ac      	bics	r4, r5
 800cdc8:	50d4      	str	r4, [r2, r3]
 800cdca:	58d4      	ldr	r4, [r2, r3]
 800cdcc:	3d05      	subs	r5, #5
 800cdce:	432c      	orrs	r4, r5
 800cdd0:	50d4      	str	r4, [r2, r3]
 800cdd2:	e6db      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800cdd4:	4ac7      	ldr	r2, [pc, #796]	; (800d0f4 <RemapAndLinkDMAtoUARTTx+0x728>)
 800cdd6:	680c      	ldr	r4, [r1, #0]
 800cdd8:	4294      	cmp	r4, r2
 800cdda:	d000      	beq.n	800cdde <RemapAndLinkDMAtoUARTTx+0x412>
 800cddc:	e63c      	b.n	800ca58 <RemapAndLinkDMAtoUARTTx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800cdde:	4ac4      	ldr	r2, [pc, #784]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800cde0:	23a8      	movs	r3, #168	; 0xa8
 800cde2:	58d4      	ldr	r4, [r2, r3]
 800cde4:	4dbe      	ldr	r5, [pc, #760]	; (800d0e0 <RemapAndLinkDMAtoUARTTx+0x714>)
 800cde6:	402c      	ands	r4, r5
 800cde8:	50d4      	str	r4, [r2, r3]
 800cdea:	58d5      	ldr	r5, [r2, r3]
 800cdec:	24a0      	movs	r4, #160	; 0xa0
 800cdee:	0224      	lsls	r4, r4, #8
 800cdf0:	432c      	orrs	r4, r5
 800cdf2:	50d4      	str	r4, [r2, r3]
 800cdf4:	e6ca      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800cdf6:	4ac0      	ldr	r2, [pc, #768]	; (800d0f8 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800cdf8:	680c      	ldr	r4, [r1, #0]
 800cdfa:	4294      	cmp	r4, r2
 800cdfc:	d000      	beq.n	800ce00 <RemapAndLinkDMAtoUARTTx+0x434>
 800cdfe:	e62f      	b.n	800ca60 <RemapAndLinkDMAtoUARTTx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800ce00:	4abb      	ldr	r2, [pc, #748]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800ce02:	23a8      	movs	r3, #168	; 0xa8
 800ce04:	58d4      	ldr	r4, [r2, r3]
 800ce06:	4dbd      	ldr	r5, [pc, #756]	; (800d0fc <RemapAndLinkDMAtoUARTTx+0x730>)
 800ce08:	402c      	ands	r4, r5
 800ce0a:	50d4      	str	r4, [r2, r3]
 800ce0c:	58d5      	ldr	r5, [r2, r3]
 800ce0e:	24a0      	movs	r4, #160	; 0xa0
 800ce10:	0324      	lsls	r4, r4, #12
 800ce12:	432c      	orrs	r4, r5
 800ce14:	50d4      	str	r4, [r2, r3]
 800ce16:	e6b9      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800ce18:	4aae      	ldr	r2, [pc, #696]	; (800d0d4 <RemapAndLinkDMAtoUARTTx+0x708>)
 800ce1a:	680c      	ldr	r4, [r1, #0]
 800ce1c:	4294      	cmp	r4, r2
 800ce1e:	d000      	beq.n	800ce22 <RemapAndLinkDMAtoUARTTx+0x456>
 800ce20:	e622      	b.n	800ca68 <RemapAndLinkDMAtoUARTTx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800ce22:	4aad      	ldr	r2, [pc, #692]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ce24:	23a8      	movs	r3, #168	; 0xa8
 800ce26:	58d4      	ldr	r4, [r2, r3]
 800ce28:	25f0      	movs	r5, #240	; 0xf0
 800ce2a:	43ac      	bics	r4, r5
 800ce2c:	50d4      	str	r4, [r2, r3]
 800ce2e:	58d4      	ldr	r4, [r2, r3]
 800ce30:	3d40      	subs	r5, #64	; 0x40
 800ce32:	432c      	orrs	r4, r5
 800ce34:	50d4      	str	r4, [r2, r3]
 800ce36:	e6a9      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800ce38:	4aa8      	ldr	r2, [pc, #672]	; (800d0dc <RemapAndLinkDMAtoUARTTx+0x710>)
 800ce3a:	680c      	ldr	r4, [r1, #0]
 800ce3c:	4294      	cmp	r4, r2
 800ce3e:	d000      	beq.n	800ce42 <RemapAndLinkDMAtoUARTTx+0x476>
 800ce40:	e616      	b.n	800ca70 <RemapAndLinkDMAtoUARTTx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800ce42:	4aa5      	ldr	r2, [pc, #660]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ce44:	23a8      	movs	r3, #168	; 0xa8
 800ce46:	58d4      	ldr	r4, [r2, r3]
 800ce48:	4da5      	ldr	r5, [pc, #660]	; (800d0e0 <RemapAndLinkDMAtoUARTTx+0x714>)
 800ce4a:	402c      	ands	r4, r5
 800ce4c:	50d4      	str	r4, [r2, r3]
 800ce4e:	58d5      	ldr	r5, [r2, r3]
 800ce50:	24b0      	movs	r4, #176	; 0xb0
 800ce52:	0224      	lsls	r4, r4, #8
 800ce54:	432c      	orrs	r4, r5
 800ce56:	50d4      	str	r4, [r2, r3]
 800ce58:	e698      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800ce5a:	4aa2      	ldr	r2, [pc, #648]	; (800d0e4 <RemapAndLinkDMAtoUARTTx+0x718>)
 800ce5c:	680c      	ldr	r4, [r1, #0]
 800ce5e:	4294      	cmp	r4, r2
 800ce60:	d000      	beq.n	800ce64 <RemapAndLinkDMAtoUARTTx+0x498>
 800ce62:	e609      	b.n	800ca78 <RemapAndLinkDMAtoUARTTx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800ce64:	4a9c      	ldr	r2, [pc, #624]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ce66:	23a8      	movs	r3, #168	; 0xa8
 800ce68:	58d4      	ldr	r4, [r2, r3]
 800ce6a:	4d9f      	ldr	r5, [pc, #636]	; (800d0e8 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800ce6c:	402c      	ands	r4, r5
 800ce6e:	50d4      	str	r4, [r2, r3]
 800ce70:	58d5      	ldr	r5, [r2, r3]
 800ce72:	24b0      	movs	r4, #176	; 0xb0
 800ce74:	0524      	lsls	r4, r4, #20
 800ce76:	432c      	orrs	r4, r5
 800ce78:	50d4      	str	r4, [r2, r3]
 800ce7a:	e687      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800ce7c:	4a9b      	ldr	r2, [pc, #620]	; (800d0ec <RemapAndLinkDMAtoUARTTx+0x720>)
 800ce7e:	680c      	ldr	r4, [r1, #0]
 800ce80:	4294      	cmp	r4, r2
 800ce82:	d000      	beq.n	800ce86 <RemapAndLinkDMAtoUARTTx+0x4ba>
 800ce84:	e5fc      	b.n	800ca80 <RemapAndLinkDMAtoUARTTx+0xb4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800ce86:	4a9a      	ldr	r2, [pc, #616]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800ce88:	23a8      	movs	r3, #168	; 0xa8
 800ce8a:	58d4      	ldr	r4, [r2, r3]
 800ce8c:	250f      	movs	r5, #15
 800ce8e:	43ac      	bics	r4, r5
 800ce90:	50d4      	str	r4, [r2, r3]
 800ce92:	58d4      	ldr	r4, [r2, r3]
 800ce94:	3d04      	subs	r5, #4
 800ce96:	432c      	orrs	r4, r5
 800ce98:	50d4      	str	r4, [r2, r3]
 800ce9a:	e677      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800ce9c:	4a95      	ldr	r2, [pc, #596]	; (800d0f4 <RemapAndLinkDMAtoUARTTx+0x728>)
 800ce9e:	680c      	ldr	r4, [r1, #0]
 800cea0:	4294      	cmp	r4, r2
 800cea2:	d000      	beq.n	800cea6 <RemapAndLinkDMAtoUARTTx+0x4da>
 800cea4:	e5f0      	b.n	800ca88 <RemapAndLinkDMAtoUARTTx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800cea6:	4a92      	ldr	r2, [pc, #584]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800cea8:	23a8      	movs	r3, #168	; 0xa8
 800ceaa:	58d4      	ldr	r4, [r2, r3]
 800ceac:	4d8c      	ldr	r5, [pc, #560]	; (800d0e0 <RemapAndLinkDMAtoUARTTx+0x714>)
 800ceae:	402c      	ands	r4, r5
 800ceb0:	50d4      	str	r4, [r2, r3]
 800ceb2:	58d5      	ldr	r5, [r2, r3]
 800ceb4:	24b0      	movs	r4, #176	; 0xb0
 800ceb6:	0224      	lsls	r4, r4, #8
 800ceb8:	432c      	orrs	r4, r5
 800ceba:	50d4      	str	r4, [r2, r3]
 800cebc:	e666      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800cebe:	4a8e      	ldr	r2, [pc, #568]	; (800d0f8 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800cec0:	680c      	ldr	r4, [r1, #0]
 800cec2:	4294      	cmp	r4, r2
 800cec4:	d000      	beq.n	800cec8 <RemapAndLinkDMAtoUARTTx+0x4fc>
 800cec6:	e5e3      	b.n	800ca90 <RemapAndLinkDMAtoUARTTx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800cec8:	4a89      	ldr	r2, [pc, #548]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800ceca:	23a8      	movs	r3, #168	; 0xa8
 800cecc:	58d4      	ldr	r4, [r2, r3]
 800cece:	4d8b      	ldr	r5, [pc, #556]	; (800d0fc <RemapAndLinkDMAtoUARTTx+0x730>)
 800ced0:	402c      	ands	r4, r5
 800ced2:	50d4      	str	r4, [r2, r3]
 800ced4:	58d5      	ldr	r5, [r2, r3]
 800ced6:	24b0      	movs	r4, #176	; 0xb0
 800ced8:	0324      	lsls	r4, r4, #12
 800ceda:	432c      	orrs	r4, r5
 800cedc:	50d4      	str	r4, [r2, r3]
 800cede:	e655      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800cee0:	4a7c      	ldr	r2, [pc, #496]	; (800d0d4 <RemapAndLinkDMAtoUARTTx+0x708>)
 800cee2:	680c      	ldr	r4, [r1, #0]
 800cee4:	4294      	cmp	r4, r2
 800cee6:	d000      	beq.n	800ceea <RemapAndLinkDMAtoUARTTx+0x51e>
 800cee8:	e5d6      	b.n	800ca98 <RemapAndLinkDMAtoUARTTx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800ceea:	4a7b      	ldr	r2, [pc, #492]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ceec:	23a8      	movs	r3, #168	; 0xa8
 800ceee:	58d4      	ldr	r4, [r2, r3]
 800cef0:	25f0      	movs	r5, #240	; 0xf0
 800cef2:	43ac      	bics	r4, r5
 800cef4:	50d4      	str	r4, [r2, r3]
 800cef6:	58d4      	ldr	r4, [r2, r3]
 800cef8:	3d30      	subs	r5, #48	; 0x30
 800cefa:	432c      	orrs	r4, r5
 800cefc:	50d4      	str	r4, [r2, r3]
 800cefe:	e645      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800cf00:	4a76      	ldr	r2, [pc, #472]	; (800d0dc <RemapAndLinkDMAtoUARTTx+0x710>)
 800cf02:	680c      	ldr	r4, [r1, #0]
 800cf04:	4294      	cmp	r4, r2
 800cf06:	d000      	beq.n	800cf0a <RemapAndLinkDMAtoUARTTx+0x53e>
 800cf08:	e5ca      	b.n	800caa0 <RemapAndLinkDMAtoUARTTx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800cf0a:	4a73      	ldr	r2, [pc, #460]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800cf0c:	23a8      	movs	r3, #168	; 0xa8
 800cf0e:	58d4      	ldr	r4, [r2, r3]
 800cf10:	4d73      	ldr	r5, [pc, #460]	; (800d0e0 <RemapAndLinkDMAtoUARTTx+0x714>)
 800cf12:	402c      	ands	r4, r5
 800cf14:	50d4      	str	r4, [r2, r3]
 800cf16:	58d5      	ldr	r5, [r2, r3]
 800cf18:	24c0      	movs	r4, #192	; 0xc0
 800cf1a:	0224      	lsls	r4, r4, #8
 800cf1c:	432c      	orrs	r4, r5
 800cf1e:	50d4      	str	r4, [r2, r3]
 800cf20:	e634      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800cf22:	4a70      	ldr	r2, [pc, #448]	; (800d0e4 <RemapAndLinkDMAtoUARTTx+0x718>)
 800cf24:	680c      	ldr	r4, [r1, #0]
 800cf26:	4294      	cmp	r4, r2
 800cf28:	d000      	beq.n	800cf2c <RemapAndLinkDMAtoUARTTx+0x560>
 800cf2a:	e5bd      	b.n	800caa8 <RemapAndLinkDMAtoUARTTx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800cf2c:	4a6a      	ldr	r2, [pc, #424]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800cf2e:	23a8      	movs	r3, #168	; 0xa8
 800cf30:	58d4      	ldr	r4, [r2, r3]
 800cf32:	4d6d      	ldr	r5, [pc, #436]	; (800d0e8 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800cf34:	402c      	ands	r4, r5
 800cf36:	50d4      	str	r4, [r2, r3]
 800cf38:	58d5      	ldr	r5, [r2, r3]
 800cf3a:	24c0      	movs	r4, #192	; 0xc0
 800cf3c:	0524      	lsls	r4, r4, #20
 800cf3e:	432c      	orrs	r4, r5
 800cf40:	50d4      	str	r4, [r2, r3]
 800cf42:	e623      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800cf44:	4a69      	ldr	r2, [pc, #420]	; (800d0ec <RemapAndLinkDMAtoUARTTx+0x720>)
 800cf46:	680c      	ldr	r4, [r1, #0]
 800cf48:	4294      	cmp	r4, r2
 800cf4a:	d000      	beq.n	800cf4e <RemapAndLinkDMAtoUARTTx+0x582>
 800cf4c:	e5b0      	b.n	800cab0 <RemapAndLinkDMAtoUARTTx+0xe4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800cf4e:	4a68      	ldr	r2, [pc, #416]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800cf50:	23a8      	movs	r3, #168	; 0xa8
 800cf52:	58d4      	ldr	r4, [r2, r3]
 800cf54:	250f      	movs	r5, #15
 800cf56:	43ac      	bics	r4, r5
 800cf58:	50d4      	str	r4, [r2, r3]
 800cf5a:	58d4      	ldr	r4, [r2, r3]
 800cf5c:	3d03      	subs	r5, #3
 800cf5e:	432c      	orrs	r4, r5
 800cf60:	50d4      	str	r4, [r2, r3]
 800cf62:	e613      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800cf64:	4a63      	ldr	r2, [pc, #396]	; (800d0f4 <RemapAndLinkDMAtoUARTTx+0x728>)
 800cf66:	680c      	ldr	r4, [r1, #0]
 800cf68:	4294      	cmp	r4, r2
 800cf6a:	d000      	beq.n	800cf6e <RemapAndLinkDMAtoUARTTx+0x5a2>
 800cf6c:	e5a4      	b.n	800cab8 <RemapAndLinkDMAtoUARTTx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800cf6e:	4a60      	ldr	r2, [pc, #384]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800cf70:	23a8      	movs	r3, #168	; 0xa8
 800cf72:	58d4      	ldr	r4, [r2, r3]
 800cf74:	4d5a      	ldr	r5, [pc, #360]	; (800d0e0 <RemapAndLinkDMAtoUARTTx+0x714>)
 800cf76:	402c      	ands	r4, r5
 800cf78:	50d4      	str	r4, [r2, r3]
 800cf7a:	58d5      	ldr	r5, [r2, r3]
 800cf7c:	24c0      	movs	r4, #192	; 0xc0
 800cf7e:	0224      	lsls	r4, r4, #8
 800cf80:	432c      	orrs	r4, r5
 800cf82:	50d4      	str	r4, [r2, r3]
 800cf84:	e602      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800cf86:	4a5c      	ldr	r2, [pc, #368]	; (800d0f8 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800cf88:	680c      	ldr	r4, [r1, #0]
 800cf8a:	4294      	cmp	r4, r2
 800cf8c:	d000      	beq.n	800cf90 <RemapAndLinkDMAtoUARTTx+0x5c4>
 800cf8e:	e597      	b.n	800cac0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800cf90:	4a57      	ldr	r2, [pc, #348]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800cf92:	23a8      	movs	r3, #168	; 0xa8
 800cf94:	58d4      	ldr	r4, [r2, r3]
 800cf96:	4d59      	ldr	r5, [pc, #356]	; (800d0fc <RemapAndLinkDMAtoUARTTx+0x730>)
 800cf98:	402c      	ands	r4, r5
 800cf9a:	50d4      	str	r4, [r2, r3]
 800cf9c:	58d5      	ldr	r5, [r2, r3]
 800cf9e:	24c0      	movs	r4, #192	; 0xc0
 800cfa0:	0324      	lsls	r4, r4, #12
 800cfa2:	432c      	orrs	r4, r5
 800cfa4:	50d4      	str	r4, [r2, r3]
 800cfa6:	e5f1      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800cfa8:	4a4a      	ldr	r2, [pc, #296]	; (800d0d4 <RemapAndLinkDMAtoUARTTx+0x708>)
 800cfaa:	680c      	ldr	r4, [r1, #0]
 800cfac:	4294      	cmp	r4, r2
 800cfae:	d000      	beq.n	800cfb2 <RemapAndLinkDMAtoUARTTx+0x5e6>
 800cfb0:	e58a      	b.n	800cac8 <RemapAndLinkDMAtoUARTTx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800cfb2:	4a49      	ldr	r2, [pc, #292]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800cfb4:	23a8      	movs	r3, #168	; 0xa8
 800cfb6:	58d4      	ldr	r4, [r2, r3]
 800cfb8:	25f0      	movs	r5, #240	; 0xf0
 800cfba:	43ac      	bics	r4, r5
 800cfbc:	50d4      	str	r4, [r2, r3]
 800cfbe:	58d4      	ldr	r4, [r2, r3]
 800cfc0:	3d20      	subs	r5, #32
 800cfc2:	432c      	orrs	r4, r5
 800cfc4:	50d4      	str	r4, [r2, r3]
 800cfc6:	e5e1      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800cfc8:	4a44      	ldr	r2, [pc, #272]	; (800d0dc <RemapAndLinkDMAtoUARTTx+0x710>)
 800cfca:	680c      	ldr	r4, [r1, #0]
 800cfcc:	4294      	cmp	r4, r2
 800cfce:	d000      	beq.n	800cfd2 <RemapAndLinkDMAtoUARTTx+0x606>
 800cfd0:	e57e      	b.n	800cad0 <RemapAndLinkDMAtoUARTTx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800cfd2:	4a41      	ldr	r2, [pc, #260]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800cfd4:	23a8      	movs	r3, #168	; 0xa8
 800cfd6:	58d4      	ldr	r4, [r2, r3]
 800cfd8:	4d41      	ldr	r5, [pc, #260]	; (800d0e0 <RemapAndLinkDMAtoUARTTx+0x714>)
 800cfda:	402c      	ands	r4, r5
 800cfdc:	50d4      	str	r4, [r2, r3]
 800cfde:	58d5      	ldr	r5, [r2, r3]
 800cfe0:	24d0      	movs	r4, #208	; 0xd0
 800cfe2:	0224      	lsls	r4, r4, #8
 800cfe4:	432c      	orrs	r4, r5
 800cfe6:	50d4      	str	r4, [r2, r3]
 800cfe8:	e5d0      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800cfea:	4a3e      	ldr	r2, [pc, #248]	; (800d0e4 <RemapAndLinkDMAtoUARTTx+0x718>)
 800cfec:	680c      	ldr	r4, [r1, #0]
 800cfee:	4294      	cmp	r4, r2
 800cff0:	d000      	beq.n	800cff4 <RemapAndLinkDMAtoUARTTx+0x628>
 800cff2:	e571      	b.n	800cad8 <RemapAndLinkDMAtoUARTTx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800cff4:	4a38      	ldr	r2, [pc, #224]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800cff6:	23a8      	movs	r3, #168	; 0xa8
 800cff8:	58d4      	ldr	r4, [r2, r3]
 800cffa:	4d3b      	ldr	r5, [pc, #236]	; (800d0e8 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800cffc:	402c      	ands	r4, r5
 800cffe:	50d4      	str	r4, [r2, r3]
 800d000:	58d5      	ldr	r5, [r2, r3]
 800d002:	24d0      	movs	r4, #208	; 0xd0
 800d004:	0524      	lsls	r4, r4, #20
 800d006:	432c      	orrs	r4, r5
 800d008:	50d4      	str	r4, [r2, r3]
 800d00a:	e5bf      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d00c:	4a37      	ldr	r2, [pc, #220]	; (800d0ec <RemapAndLinkDMAtoUARTTx+0x720>)
 800d00e:	680c      	ldr	r4, [r1, #0]
 800d010:	4294      	cmp	r4, r2
 800d012:	d000      	beq.n	800d016 <RemapAndLinkDMAtoUARTTx+0x64a>
 800d014:	e564      	b.n	800cae0 <RemapAndLinkDMAtoUARTTx+0x114>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d016:	4a36      	ldr	r2, [pc, #216]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800d018:	23a8      	movs	r3, #168	; 0xa8
 800d01a:	58d4      	ldr	r4, [r2, r3]
 800d01c:	250f      	movs	r5, #15
 800d01e:	43ac      	bics	r4, r5
 800d020:	50d4      	str	r4, [r2, r3]
 800d022:	58d4      	ldr	r4, [r2, r3]
 800d024:	3d02      	subs	r5, #2
 800d026:	432c      	orrs	r4, r5
 800d028:	50d4      	str	r4, [r2, r3]
 800d02a:	e5af      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d02c:	4a31      	ldr	r2, [pc, #196]	; (800d0f4 <RemapAndLinkDMAtoUARTTx+0x728>)
 800d02e:	680c      	ldr	r4, [r1, #0]
 800d030:	4294      	cmp	r4, r2
 800d032:	d000      	beq.n	800d036 <RemapAndLinkDMAtoUARTTx+0x66a>
 800d034:	e558      	b.n	800cae8 <RemapAndLinkDMAtoUARTTx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d036:	4a2e      	ldr	r2, [pc, #184]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800d038:	23a8      	movs	r3, #168	; 0xa8
 800d03a:	58d4      	ldr	r4, [r2, r3]
 800d03c:	4d28      	ldr	r5, [pc, #160]	; (800d0e0 <RemapAndLinkDMAtoUARTTx+0x714>)
 800d03e:	402c      	ands	r4, r5
 800d040:	50d4      	str	r4, [r2, r3]
 800d042:	58d5      	ldr	r5, [r2, r3]
 800d044:	24d0      	movs	r4, #208	; 0xd0
 800d046:	0224      	lsls	r4, r4, #8
 800d048:	432c      	orrs	r4, r5
 800d04a:	50d4      	str	r4, [r2, r3]
 800d04c:	e59e      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d04e:	4a2a      	ldr	r2, [pc, #168]	; (800d0f8 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800d050:	680c      	ldr	r4, [r1, #0]
 800d052:	4294      	cmp	r4, r2
 800d054:	d000      	beq.n	800d058 <RemapAndLinkDMAtoUARTTx+0x68c>
 800d056:	e54b      	b.n	800caf0 <RemapAndLinkDMAtoUARTTx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d058:	4a25      	ldr	r2, [pc, #148]	; (800d0f0 <RemapAndLinkDMAtoUARTTx+0x724>)
 800d05a:	23a8      	movs	r3, #168	; 0xa8
 800d05c:	58d4      	ldr	r4, [r2, r3]
 800d05e:	4d27      	ldr	r5, [pc, #156]	; (800d0fc <RemapAndLinkDMAtoUARTTx+0x730>)
 800d060:	402c      	ands	r4, r5
 800d062:	50d4      	str	r4, [r2, r3]
 800d064:	58d5      	ldr	r5, [r2, r3]
 800d066:	24d0      	movs	r4, #208	; 0xd0
 800d068:	0324      	lsls	r4, r4, #12
 800d06a:	432c      	orrs	r4, r5
 800d06c:	50d4      	str	r4, [r2, r3]
 800d06e:	e58d      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d070:	4a18      	ldr	r2, [pc, #96]	; (800d0d4 <RemapAndLinkDMAtoUARTTx+0x708>)
 800d072:	680c      	ldr	r4, [r1, #0]
 800d074:	4294      	cmp	r4, r2
 800d076:	d000      	beq.n	800d07a <RemapAndLinkDMAtoUARTTx+0x6ae>
 800d078:	e53e      	b.n	800caf8 <RemapAndLinkDMAtoUARTTx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d07a:	4a17      	ldr	r2, [pc, #92]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d07c:	23a8      	movs	r3, #168	; 0xa8
 800d07e:	58d4      	ldr	r4, [r2, r3]
 800d080:	25f0      	movs	r5, #240	; 0xf0
 800d082:	43ac      	bics	r4, r5
 800d084:	50d4      	str	r4, [r2, r3]
 800d086:	58d4      	ldr	r4, [r2, r3]
 800d088:	3d10      	subs	r5, #16
 800d08a:	432c      	orrs	r4, r5
 800d08c:	50d4      	str	r4, [r2, r3]
 800d08e:	e57d      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d090:	4a12      	ldr	r2, [pc, #72]	; (800d0dc <RemapAndLinkDMAtoUARTTx+0x710>)
 800d092:	680c      	ldr	r4, [r1, #0]
 800d094:	4294      	cmp	r4, r2
 800d096:	d000      	beq.n	800d09a <RemapAndLinkDMAtoUARTTx+0x6ce>
 800d098:	e532      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d09a:	4a0f      	ldr	r2, [pc, #60]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d09c:	23a8      	movs	r3, #168	; 0xa8
 800d09e:	58d4      	ldr	r4, [r2, r3]
 800d0a0:	4d0f      	ldr	r5, [pc, #60]	; (800d0e0 <RemapAndLinkDMAtoUARTTx+0x714>)
 800d0a2:	402c      	ands	r4, r5
 800d0a4:	50d4      	str	r4, [r2, r3]
 800d0a6:	58d5      	ldr	r5, [r2, r3]
 800d0a8:	24e0      	movs	r4, #224	; 0xe0
 800d0aa:	0224      	lsls	r4, r4, #8
 800d0ac:	432c      	orrs	r4, r5
 800d0ae:	50d4      	str	r4, [r2, r3]
 800d0b0:	e56c      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d0b2:	4a0c      	ldr	r2, [pc, #48]	; (800d0e4 <RemapAndLinkDMAtoUARTTx+0x718>)
 800d0b4:	680c      	ldr	r4, [r1, #0]
 800d0b6:	4294      	cmp	r4, r2
 800d0b8:	d000      	beq.n	800d0bc <RemapAndLinkDMAtoUARTTx+0x6f0>
 800d0ba:	e525      	b.n	800cb08 <RemapAndLinkDMAtoUARTTx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d0bc:	4a06      	ldr	r2, [pc, #24]	; (800d0d8 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d0be:	23a8      	movs	r3, #168	; 0xa8
 800d0c0:	58d4      	ldr	r4, [r2, r3]
 800d0c2:	4d09      	ldr	r5, [pc, #36]	; (800d0e8 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800d0c4:	402c      	ands	r4, r5
 800d0c6:	50d4      	str	r4, [r2, r3]
 800d0c8:	58d5      	ldr	r5, [r2, r3]
 800d0ca:	24e0      	movs	r4, #224	; 0xe0
 800d0cc:	0524      	lsls	r4, r4, #20
 800d0ce:	432c      	orrs	r4, r5
 800d0d0:	50d4      	str	r4, [r2, r3]
 800d0d2:	e55b      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
 800d0d4:	4002001c 	.word	0x4002001c
 800d0d8:	40020000 	.word	0x40020000
 800d0dc:	40020044 	.word	0x40020044
 800d0e0:	ffff0fff 	.word	0xffff0fff
 800d0e4:	40020080 	.word	0x40020080
 800d0e8:	f0ffffff 	.word	0xf0ffffff
 800d0ec:	40020408 	.word	0x40020408
 800d0f0:	40020400 	.word	0x40020400
 800d0f4:	40020444 	.word	0x40020444
 800d0f8:	40020458 	.word	0x40020458
 800d0fc:	fff0ffff 	.word	0xfff0ffff
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d100:	4a41      	ldr	r2, [pc, #260]	; (800d208 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800d102:	680c      	ldr	r4, [r1, #0]
 800d104:	4294      	cmp	r4, r2
 800d106:	d000      	beq.n	800d10a <RemapAndLinkDMAtoUARTTx+0x73e>
 800d108:	e502      	b.n	800cb10 <RemapAndLinkDMAtoUARTTx+0x144>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d10a:	4a40      	ldr	r2, [pc, #256]	; (800d20c <RemapAndLinkDMAtoUARTTx+0x840>)
 800d10c:	23a8      	movs	r3, #168	; 0xa8
 800d10e:	58d4      	ldr	r4, [r2, r3]
 800d110:	250f      	movs	r5, #15
 800d112:	43ac      	bics	r4, r5
 800d114:	50d4      	str	r4, [r2, r3]
 800d116:	58d4      	ldr	r4, [r2, r3]
 800d118:	3d01      	subs	r5, #1
 800d11a:	432c      	orrs	r4, r5
 800d11c:	50d4      	str	r4, [r2, r3]
 800d11e:	e535      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d120:	4a3b      	ldr	r2, [pc, #236]	; (800d210 <RemapAndLinkDMAtoUARTTx+0x844>)
 800d122:	680c      	ldr	r4, [r1, #0]
 800d124:	4294      	cmp	r4, r2
 800d126:	d000      	beq.n	800d12a <RemapAndLinkDMAtoUARTTx+0x75e>
 800d128:	e4f6      	b.n	800cb18 <RemapAndLinkDMAtoUARTTx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d12a:	4a38      	ldr	r2, [pc, #224]	; (800d20c <RemapAndLinkDMAtoUARTTx+0x840>)
 800d12c:	23a8      	movs	r3, #168	; 0xa8
 800d12e:	58d4      	ldr	r4, [r2, r3]
 800d130:	4d38      	ldr	r5, [pc, #224]	; (800d214 <RemapAndLinkDMAtoUARTTx+0x848>)
 800d132:	402c      	ands	r4, r5
 800d134:	50d4      	str	r4, [r2, r3]
 800d136:	58d5      	ldr	r5, [r2, r3]
 800d138:	24e0      	movs	r4, #224	; 0xe0
 800d13a:	0224      	lsls	r4, r4, #8
 800d13c:	432c      	orrs	r4, r5
 800d13e:	50d4      	str	r4, [r2, r3]
 800d140:	e524      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d142:	4a35      	ldr	r2, [pc, #212]	; (800d218 <RemapAndLinkDMAtoUARTTx+0x84c>)
 800d144:	680c      	ldr	r4, [r1, #0]
 800d146:	4294      	cmp	r4, r2
 800d148:	d000      	beq.n	800d14c <RemapAndLinkDMAtoUARTTx+0x780>
 800d14a:	e4e9      	b.n	800cb20 <RemapAndLinkDMAtoUARTTx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d14c:	4a2f      	ldr	r2, [pc, #188]	; (800d20c <RemapAndLinkDMAtoUARTTx+0x840>)
 800d14e:	23a8      	movs	r3, #168	; 0xa8
 800d150:	58d4      	ldr	r4, [r2, r3]
 800d152:	4d32      	ldr	r5, [pc, #200]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x850>)
 800d154:	402c      	ands	r4, r5
 800d156:	50d4      	str	r4, [r2, r3]
 800d158:	58d5      	ldr	r5, [r2, r3]
 800d15a:	24e0      	movs	r4, #224	; 0xe0
 800d15c:	0324      	lsls	r4, r4, #12
 800d15e:	432c      	orrs	r4, r5
 800d160:	50d4      	str	r4, [r2, r3]
 800d162:	e513      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d164:	4a2e      	ldr	r2, [pc, #184]	; (800d220 <RemapAndLinkDMAtoUARTTx+0x854>)
 800d166:	680c      	ldr	r4, [r1, #0]
 800d168:	4294      	cmp	r4, r2
 800d16a:	d000      	beq.n	800d16e <RemapAndLinkDMAtoUARTTx+0x7a2>
 800d16c:	e4dc      	b.n	800cb28 <RemapAndLinkDMAtoUARTTx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d16e:	4a2d      	ldr	r2, [pc, #180]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x858>)
 800d170:	23a8      	movs	r3, #168	; 0xa8
 800d172:	58d5      	ldr	r5, [r2, r3]
 800d174:	26f0      	movs	r6, #240	; 0xf0
 800d176:	43b5      	bics	r5, r6
 800d178:	50d5      	str	r5, [r2, r3]
 800d17a:	58d4      	ldr	r4, [r2, r3]
 800d17c:	4334      	orrs	r4, r6
 800d17e:	50d4      	str	r4, [r2, r3]
 800d180:	e504      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d182:	4a29      	ldr	r2, [pc, #164]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x85c>)
 800d184:	680c      	ldr	r4, [r1, #0]
 800d186:	4294      	cmp	r4, r2
 800d188:	d000      	beq.n	800d18c <RemapAndLinkDMAtoUARTTx+0x7c0>
 800d18a:	e4d1      	b.n	800cb30 <RemapAndLinkDMAtoUARTTx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d18c:	4a25      	ldr	r2, [pc, #148]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x858>)
 800d18e:	23a8      	movs	r3, #168	; 0xa8
 800d190:	58d4      	ldr	r4, [r2, r3]
 800d192:	4d20      	ldr	r5, [pc, #128]	; (800d214 <RemapAndLinkDMAtoUARTTx+0x848>)
 800d194:	402c      	ands	r4, r5
 800d196:	50d4      	str	r4, [r2, r3]
 800d198:	58d5      	ldr	r5, [r2, r3]
 800d19a:	24f0      	movs	r4, #240	; 0xf0
 800d19c:	0224      	lsls	r4, r4, #8
 800d19e:	432c      	orrs	r4, r5
 800d1a0:	50d4      	str	r4, [r2, r3]
 800d1a2:	e4f3      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d1a4:	4a21      	ldr	r2, [pc, #132]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x860>)
 800d1a6:	680c      	ldr	r4, [r1, #0]
 800d1a8:	4294      	cmp	r4, r2
 800d1aa:	d000      	beq.n	800d1ae <RemapAndLinkDMAtoUARTTx+0x7e2>
 800d1ac:	e4c4      	b.n	800cb38 <RemapAndLinkDMAtoUARTTx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d1ae:	4a1d      	ldr	r2, [pc, #116]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x858>)
 800d1b0:	23a8      	movs	r3, #168	; 0xa8
 800d1b2:	58d4      	ldr	r4, [r2, r3]
 800d1b4:	4d1e      	ldr	r5, [pc, #120]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x864>)
 800d1b6:	402c      	ands	r4, r5
 800d1b8:	50d4      	str	r4, [r2, r3]
 800d1ba:	58d5      	ldr	r5, [r2, r3]
 800d1bc:	24f0      	movs	r4, #240	; 0xf0
 800d1be:	0524      	lsls	r4, r4, #20
 800d1c0:	432c      	orrs	r4, r5
 800d1c2:	50d4      	str	r4, [r2, r3]
 800d1c4:	e4e2      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d1c6:	4a10      	ldr	r2, [pc, #64]	; (800d208 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800d1c8:	680c      	ldr	r4, [r1, #0]
 800d1ca:	4294      	cmp	r4, r2
 800d1cc:	d000      	beq.n	800d1d0 <RemapAndLinkDMAtoUARTTx+0x804>
 800d1ce:	e4b7      	b.n	800cb40 <RemapAndLinkDMAtoUARTTx+0x174>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d1d0:	4a0e      	ldr	r2, [pc, #56]	; (800d20c <RemapAndLinkDMAtoUARTTx+0x840>)
 800d1d2:	23a8      	movs	r3, #168	; 0xa8
 800d1d4:	58d5      	ldr	r5, [r2, r3]
 800d1d6:	260f      	movs	r6, #15
 800d1d8:	43b5      	bics	r5, r6
 800d1da:	50d5      	str	r5, [r2, r3]
 800d1dc:	58d4      	ldr	r4, [r2, r3]
 800d1de:	4334      	orrs	r4, r6
 800d1e0:	50d4      	str	r4, [r2, r3]
 800d1e2:	e4d3      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d1e4:	4a0a      	ldr	r2, [pc, #40]	; (800d210 <RemapAndLinkDMAtoUARTTx+0x844>)
 800d1e6:	680c      	ldr	r4, [r1, #0]
 800d1e8:	4294      	cmp	r4, r2
 800d1ea:	d000      	beq.n	800d1ee <RemapAndLinkDMAtoUARTTx+0x822>
 800d1ec:	e4ac      	b.n	800cb48 <RemapAndLinkDMAtoUARTTx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d1ee:	4a07      	ldr	r2, [pc, #28]	; (800d20c <RemapAndLinkDMAtoUARTTx+0x840>)
 800d1f0:	23a8      	movs	r3, #168	; 0xa8
 800d1f2:	58d4      	ldr	r4, [r2, r3]
 800d1f4:	4d07      	ldr	r5, [pc, #28]	; (800d214 <RemapAndLinkDMAtoUARTTx+0x848>)
 800d1f6:	402c      	ands	r4, r5
 800d1f8:	50d4      	str	r4, [r2, r3]
 800d1fa:	58d5      	ldr	r5, [r2, r3]
 800d1fc:	24f0      	movs	r4, #240	; 0xf0
 800d1fe:	0224      	lsls	r4, r4, #8
 800d200:	432c      	orrs	r4, r5
 800d202:	50d4      	str	r4, [r2, r3]
 800d204:	e4c2      	b.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x1c0>
 800d206:	46c0      	nop			; (mov r8, r8)
 800d208:	40020408 	.word	0x40020408
 800d20c:	40020400 	.word	0x40020400
 800d210:	40020444 	.word	0x40020444
 800d214:	ffff0fff 	.word	0xffff0fff
 800d218:	40020458 	.word	0x40020458
 800d21c:	fff0ffff 	.word	0xfff0ffff
 800d220:	4002001c 	.word	0x4002001c
 800d224:	40020000 	.word	0x40020000
 800d228:	40020044 	.word	0x40020044
 800d22c:	40020080 	.word	0x40020080
 800d230:	f0ffffff 	.word	0xf0ffffff

0800d234 <DMA_MSG_TX_Setup>:
{	
 800d234:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d236:	4b0d      	ldr	r3, [pc, #52]	; (800d26c <DMA_MSG_TX_Setup+0x38>)
 800d238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d010      	beq.n	800d260 <DMA_MSG_TX_Setup+0x2c>
	else if (msgTxDMA[1].Parent == NULL)
 800d23e:	4b0b      	ldr	r3, [pc, #44]	; (800d26c <DMA_MSG_TX_Setup+0x38>)
 800d240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00e      	beq.n	800d264 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[2].Parent == NULL)
 800d246:	4a09      	ldr	r2, [pc, #36]	; (800d26c <DMA_MSG_TX_Setup+0x38>)
 800d248:	2394      	movs	r3, #148	; 0x94
 800d24a:	58d3      	ldr	r3, [r2, r3]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00b      	beq.n	800d268 <DMA_MSG_TX_Setup+0x34>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d250:	0021      	movs	r1, r4
 800d252:	f7ff fbbb 	bl	800c9cc <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d256:	2100      	movs	r1, #0
 800d258:	0020      	movs	r0, r4
 800d25a:	f7fe fe4f 	bl	800befc <SetupDMAInterrupts>
}
 800d25e:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[0];
 800d260:	4c02      	ldr	r4, [pc, #8]	; (800d26c <DMA_MSG_TX_Setup+0x38>)
 800d262:	e7f5      	b.n	800d250 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800d264:	4c02      	ldr	r4, [pc, #8]	; (800d270 <DMA_MSG_TX_Setup+0x3c>)
 800d266:	e7f3      	b.n	800d250 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[2];  
 800d268:	4c02      	ldr	r4, [pc, #8]	; (800d274 <DMA_MSG_TX_Setup+0x40>)
 800d26a:	e7f1      	b.n	800d250 <DMA_MSG_TX_Setup+0x1c>
 800d26c:	2000109c 	.word	0x2000109c
 800d270:	200010d4 	.word	0x200010d4
 800d274:	2000110c 	.word	0x2000110c

0800d278 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800d278:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800d27a:	4807      	ldr	r0, [pc, #28]	; (800d298 <CRC_Init+0x20>)
 800d27c:	4b07      	ldr	r3, [pc, #28]	; (800d29c <CRC_Init+0x24>)
 800d27e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d280:	2310      	movs	r3, #16
 800d282:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800d284:	2300      	movs	r3, #0
 800d286:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d288:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800d28a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800d28c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d28e:	3303      	adds	r3, #3
 800d290:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d292:	f003 fb6a 	bl	801096a <HAL_CRC_Init>
}
 800d296:	bd10      	pop	{r4, pc}
 800d298:	20006514 	.word	0x20006514
 800d29c:	40023000 	.word	0x40023000

0800d2a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d2a0:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d2a2:	4a05      	ldr	r2, [pc, #20]	; (800d2b8 <HAL_CRC_MspInit+0x18>)
 800d2a4:	6951      	ldr	r1, [r2, #20]
 800d2a6:	2340      	movs	r3, #64	; 0x40
 800d2a8:	4319      	orrs	r1, r3
 800d2aa:	6151      	str	r1, [r2, #20]
 800d2ac:	6952      	ldr	r2, [r2, #20]
 800d2ae:	4013      	ands	r3, r2
 800d2b0:	9301      	str	r3, [sp, #4]
 800d2b2:	9b01      	ldr	r3, [sp, #4]
}
 800d2b4:	b002      	add	sp, #8
 800d2b6:	4770      	bx	lr
 800d2b8:	40021000 	.word	0x40021000

0800d2bc <CalculateCRC8>:
/*-----------------------------------------------------------*/
/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	0004      	movs	r4, r0
 800d2c0:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	d014      	beq.n	800d2f0 <CalculateCRC8+0x34>
 800d2c6:	2900      	cmp	r1, #0
 800d2c8:	d101      	bne.n	800d2ce <CalculateCRC8+0x12>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800d2ca:	2000      	movs	r0, #0
}
 800d2cc:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d2ce:	088e      	lsrs	r6, r1, #2
 800d2d0:	0032      	movs	r2, r6
 800d2d2:	0001      	movs	r1, r0
 800d2d4:	4807      	ldr	r0, [pc, #28]	; (800d2f4 <CalculateCRC8+0x38>)
 800d2d6:	f003 fba3 	bl	8010a20 <HAL_CRC_Calculate>
 800d2da:	b2c0      	uxtb	r0, r0
		if ((size%4)!=0)
 800d2dc:	07ab      	lsls	r3, r5, #30
 800d2de:	d0f5      	beq.n	800d2cc <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800d2e0:	0131      	lsls	r1, r6, #4
 800d2e2:	1861      	adds	r1, r4, r1
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	4803      	ldr	r0, [pc, #12]	; (800d2f4 <CalculateCRC8+0x38>)
 800d2e8:	f003 fb70 	bl	80109cc <HAL_CRC_Accumulate>
 800d2ec:	b2c0      	uxtb	r0, r0
 800d2ee:	e7ed      	b.n	800d2cc <CalculateCRC8+0x10>
	return 0;
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	e7eb      	b.n	800d2cc <CalculateCRC8+0x10>
 800d2f4:	20006514 	.word	0x20006514

0800d2f8 <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800d2f8:	b500      	push	{lr}
 800d2fa:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800d2fc:	2380      	movs	r3, #128	; 0x80
 800d2fe:	011b      	lsls	r3, r3, #4
 800d300:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d302:	2301      	movs	r3, #1
 800d304:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d306:	2300      	movs	r3, #0
 800d308:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d30a:	3303      	adds	r3, #3
 800d30c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d30e:	2090      	movs	r0, #144	; 0x90
 800d310:	a901      	add	r1, sp, #4
 800d312:	05c0      	lsls	r0, r0, #23
 800d314:	f004 f9de 	bl	80116d4 <HAL_GPIO_Init>
}
 800d318:	b007      	add	sp, #28
 800d31a:	bd00      	pop	{pc}

0800d31c <GPIO_Init>:
{
 800d31c:	b500      	push	{lr}
 800d31e:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d320:	4b18      	ldr	r3, [pc, #96]	; (800d384 <GPIO_Init+0x68>)
 800d322:	6959      	ldr	r1, [r3, #20]
 800d324:	2080      	movs	r0, #128	; 0x80
 800d326:	0300      	lsls	r0, r0, #12
 800d328:	4301      	orrs	r1, r0
 800d32a:	6159      	str	r1, [r3, #20]
 800d32c:	695a      	ldr	r2, [r3, #20]
 800d32e:	4002      	ands	r2, r0
 800d330:	9201      	str	r2, [sp, #4]
 800d332:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d334:	6959      	ldr	r1, [r3, #20]
 800d336:	2080      	movs	r0, #128	; 0x80
 800d338:	0280      	lsls	r0, r0, #10
 800d33a:	4301      	orrs	r1, r0
 800d33c:	6159      	str	r1, [r3, #20]
 800d33e:	695a      	ldr	r2, [r3, #20]
 800d340:	4002      	ands	r2, r0
 800d342:	9202      	str	r2, [sp, #8]
 800d344:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d346:	6959      	ldr	r1, [r3, #20]
 800d348:	2080      	movs	r0, #128	; 0x80
 800d34a:	0340      	lsls	r0, r0, #13
 800d34c:	4301      	orrs	r1, r0
 800d34e:	6159      	str	r1, [r3, #20]
 800d350:	695a      	ldr	r2, [r3, #20]
 800d352:	4002      	ands	r2, r0
 800d354:	9203      	str	r2, [sp, #12]
 800d356:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d358:	6959      	ldr	r1, [r3, #20]
 800d35a:	2080      	movs	r0, #128	; 0x80
 800d35c:	02c0      	lsls	r0, r0, #11
 800d35e:	4301      	orrs	r1, r0
 800d360:	6159      	str	r1, [r3, #20]
 800d362:	695a      	ldr	r2, [r3, #20]
 800d364:	4002      	ands	r2, r0
 800d366:	9204      	str	r2, [sp, #16]
 800d368:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d36a:	695a      	ldr	r2, [r3, #20]
 800d36c:	2180      	movs	r1, #128	; 0x80
 800d36e:	03c9      	lsls	r1, r1, #15
 800d370:	430a      	orrs	r2, r1
 800d372:	615a      	str	r2, [r3, #20]
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	400b      	ands	r3, r1
 800d378:	9305      	str	r3, [sp, #20]
 800d37a:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800d37c:	f7ff ffbc 	bl	800d2f8 <IND_LED_Init>
}
 800d380:	b007      	add	sp, #28
 800d382:	bd00      	pop	{pc}
 800d384:	40021000 	.word	0x40021000

0800d388 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 800d388:	b530      	push	{r4, r5, lr}
 800d38a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d38c:	2214      	movs	r2, #20
 800d38e:	2100      	movs	r1, #0
 800d390:	a803      	add	r0, sp, #12
 800d392:	f006 f827 	bl	80133e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d396:	4b1c      	ldr	r3, [pc, #112]	; (800d408 <MX_GPIO_Init+0x80>)
 800d398:	6959      	ldr	r1, [r3, #20]
 800d39a:	2080      	movs	r0, #128	; 0x80
 800d39c:	02c0      	lsls	r0, r0, #11
 800d39e:	4301      	orrs	r1, r0
 800d3a0:	6159      	str	r1, [r3, #20]
 800d3a2:	695a      	ldr	r2, [r3, #20]
 800d3a4:	4002      	ands	r2, r0
 800d3a6:	9201      	str	r2, [sp, #4]
 800d3a8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3aa:	695a      	ldr	r2, [r3, #20]
 800d3ac:	2180      	movs	r1, #128	; 0x80
 800d3ae:	0289      	lsls	r1, r1, #10
 800d3b0:	430a      	orrs	r2, r1
 800d3b2:	615a      	str	r2, [r3, #20]
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	400b      	ands	r3, r1
 800d3b8:	9302      	str	r3, [sp, #8]
 800d3ba:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800d3bc:	2480      	movs	r4, #128	; 0x80
 800d3be:	0124      	lsls	r4, r4, #4
 800d3c0:	2590      	movs	r5, #144	; 0x90
 800d3c2:	05ed      	lsls	r5, r5, #23
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	0021      	movs	r1, r4
 800d3c8:	0028      	movs	r0, r5
 800d3ca:	f004 fa52 	bl	8011872 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800d3ce:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d3d0:	2401      	movs	r4, #1
 800d3d2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800d3d8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3da:	a903      	add	r1, sp, #12
 800d3dc:	0028      	movs	r0, r5
 800d3de:	f004 f979 	bl	80116d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d3e2:	2340      	movs	r3, #64	; 0x40
 800d3e4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d3e6:	4b09      	ldr	r3, [pc, #36]	; (800d40c <MX_GPIO_Init+0x84>)
 800d3e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3ea:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d3ec:	a903      	add	r1, sp, #12
 800d3ee:	4808      	ldr	r0, [pc, #32]	; (800d410 <MX_GPIO_Init+0x88>)
 800d3f0:	f004 f970 	bl	80116d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	2007      	movs	r0, #7
 800d3fa:	f003 f9f3 	bl	80107e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800d3fe:	2007      	movs	r0, #7
 800d400:	f003 fa20 	bl	8010844 <HAL_NVIC_EnableIRQ>

}
 800d404:	b009      	add	sp, #36	; 0x24
 800d406:	bd30      	pop	{r4, r5, pc}
 800d408:	40021000 	.word	0x40021000
 800d40c:	10210000 	.word	0x10210000
 800d410:	48000400 	.word	0x48000400

0800d414 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	000e      	movs	r6, r1
 800d418:	0015      	movs	r5, r2
 800d41a:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800d41c:	f000 fd24 	bl	800de68 <GetUart>
	
	if (huart == &huart1) 
 800d420:	4b24      	ldr	r3, [pc, #144]	; (800d4b4 <GetPortGPIOs+0xa0>)
 800d422:	4298      	cmp	r0, r3
 800d424:	d00d      	beq.n	800d442 <GetPortGPIOs+0x2e>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800d426:	4b24      	ldr	r3, [pc, #144]	; (800d4b8 <GetPortGPIOs+0xa4>)
 800d428:	4298      	cmp	r0, r3
 800d42a:	d017      	beq.n	800d45c <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800d42c:	4b23      	ldr	r3, [pc, #140]	; (800d4bc <GetPortGPIOs+0xa8>)
 800d42e:	4298      	cmp	r0, r3
 800d430:	d01f      	beq.n	800d472 <GetPortGPIOs+0x5e>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800d432:	4b23      	ldr	r3, [pc, #140]	; (800d4c0 <GetPortGPIOs+0xac>)
 800d434:	4298      	cmp	r0, r3
 800d436:	d028      	beq.n	800d48a <GetPortGPIOs+0x76>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800d438:	4b22      	ldr	r3, [pc, #136]	; (800d4c4 <GetPortGPIOs+0xb0>)
 800d43a:	4298      	cmp	r0, r3
 800d43c:	d02f      	beq.n	800d49e <GetPortGPIOs+0x8a>
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800d43e:	20ff      	movs	r0, #255	; 0xff
 800d440:	e00b      	b.n	800d45a <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800d442:	2390      	movs	r3, #144	; 0x90
 800d444:	05db      	lsls	r3, r3, #23
 800d446:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800d448:	2280      	movs	r2, #128	; 0x80
 800d44a:	0092      	lsls	r2, r2, #2
 800d44c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800d44e:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800d450:	2380      	movs	r3, #128	; 0x80
 800d452:	00db      	lsls	r3, r3, #3
 800d454:	9a04      	ldr	r2, [sp, #16]
 800d456:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d458:	2000      	movs	r0, #0
	
	return result;	
}
 800d45a:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800d45c:	2390      	movs	r3, #144	; 0x90
 800d45e:	05db      	lsls	r3, r3, #23
 800d460:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800d462:	2204      	movs	r2, #4
 800d464:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800d466:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800d468:	2308      	movs	r3, #8
 800d46a:	9a04      	ldr	r2, [sp, #16]
 800d46c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d46e:	2000      	movs	r0, #0
 800d470:	e7f3      	b.n	800d45a <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800d472:	4b15      	ldr	r3, [pc, #84]	; (800d4c8 <GetPortGPIOs+0xb4>)
 800d474:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800d476:	2280      	movs	r2, #128	; 0x80
 800d478:	00d2      	lsls	r2, r2, #3
 800d47a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800d47c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800d47e:	2380      	movs	r3, #128	; 0x80
 800d480:	011b      	lsls	r3, r3, #4
 800d482:	9a04      	ldr	r2, [sp, #16]
 800d484:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d486:	2000      	movs	r0, #0
 800d488:	e7e7      	b.n	800d45a <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800d48a:	4b0f      	ldr	r3, [pc, #60]	; (800d4c8 <GetPortGPIOs+0xb4>)
 800d48c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800d48e:	2208      	movs	r2, #8
 800d490:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800d492:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800d494:	2310      	movs	r3, #16
 800d496:	9a04      	ldr	r2, [sp, #16]
 800d498:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d49a:	2000      	movs	r0, #0
 800d49c:	e7dd      	b.n	800d45a <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800d49e:	2390      	movs	r3, #144	; 0x90
 800d4a0:	05db      	lsls	r3, r3, #23
 800d4a2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800d4a4:	2210      	movs	r2, #16
 800d4a6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800d4a8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800d4aa:	2320      	movs	r3, #32
 800d4ac:	9a04      	ldr	r2, [sp, #16]
 800d4ae:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e7d2      	b.n	800d45a <GetPortGPIOs+0x46>
 800d4b4:	20006364 	.word	0x20006364
 800d4b8:	2000644c 	.word	0x2000644c
 800d4bc:	20006228 	.word	0x20006228
 800d4c0:	200062f0 	.word	0x200062f0
 800d4c4:	200063dc 	.word	0x200063dc
 800d4c8:	48000400 	.word	0x48000400

0800d4cc <IsFactoryReset>:
{
 800d4cc:	b570      	push	{r4, r5, r6, lr}
 800d4ce:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800d4d0:	4b39      	ldr	r3, [pc, #228]	; (800d5b8 <IsFactoryReset+0xec>)
 800d4d2:	6959      	ldr	r1, [r3, #20]
 800d4d4:	2080      	movs	r0, #128	; 0x80
 800d4d6:	0280      	lsls	r0, r0, #10
 800d4d8:	4301      	orrs	r1, r0
 800d4da:	6159      	str	r1, [r3, #20]
 800d4dc:	695a      	ldr	r2, [r3, #20]
 800d4de:	4002      	ands	r2, r0
 800d4e0:	9203      	str	r2, [sp, #12]
 800d4e2:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d4e4:	6959      	ldr	r1, [r3, #20]
 800d4e6:	2080      	movs	r0, #128	; 0x80
 800d4e8:	02c0      	lsls	r0, r0, #11
 800d4ea:	4301      	orrs	r1, r0
 800d4ec:	6159      	str	r1, [r3, #20]
 800d4ee:	695a      	ldr	r2, [r3, #20]
 800d4f0:	4002      	ands	r2, r0
 800d4f2:	9204      	str	r2, [sp, #16]
 800d4f4:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800d4f6:	6959      	ldr	r1, [r3, #20]
 800d4f8:	2080      	movs	r0, #128	; 0x80
 800d4fa:	0300      	lsls	r0, r0, #12
 800d4fc:	4301      	orrs	r1, r0
 800d4fe:	6159      	str	r1, [r3, #20]
 800d500:	695a      	ldr	r2, [r3, #20]
 800d502:	4002      	ands	r2, r0
 800d504:	9205      	str	r2, [sp, #20]
 800d506:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800d508:	695a      	ldr	r2, [r3, #20]
 800d50a:	2180      	movs	r1, #128	; 0x80
 800d50c:	0349      	lsls	r1, r1, #13
 800d50e:	430a      	orrs	r2, r1
 800d510:	615a      	str	r2, [r3, #20]
 800d512:	695b      	ldr	r3, [r3, #20]
 800d514:	400b      	ands	r3, r1
 800d516:	9306      	str	r3, [sp, #24]
 800d518:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d51a:	2522      	movs	r5, #34	; 0x22
 800d51c:	446d      	add	r5, sp
 800d51e:	ab08      	add	r3, sp, #32
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	ab0b      	add	r3, sp, #44	; 0x2c
 800d524:	002a      	movs	r2, r5
 800d526:	a90c      	add	r1, sp, #48	; 0x30
 800d528:	2001      	movs	r0, #1
 800d52a:	f7ff ff73 	bl	800d414 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d52e:	ac07      	add	r4, sp, #28
 800d530:	9400      	str	r4, [sp, #0]
 800d532:	ab09      	add	r3, sp, #36	; 0x24
 800d534:	221e      	movs	r2, #30
 800d536:	446a      	add	r2, sp
 800d538:	a90a      	add	r1, sp, #40	; 0x28
 800d53a:	2005      	movs	r0, #5
 800d53c:	f7ff ff6a 	bl	800d414 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d540:	2301      	movs	r3, #1
 800d542:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d544:	2600      	movs	r6, #0
 800d546:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d548:	882b      	ldrh	r3, [r5, #0]
 800d54a:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d54c:	a90d      	add	r1, sp, #52	; 0x34
 800d54e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d550:	f004 f8c0 	bl	80116d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d554:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800d556:	2302      	movs	r3, #2
 800d558:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d55a:	8823      	ldrh	r3, [r4, #0]
 800d55c:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d55e:	a90d      	add	r1, sp, #52	; 0x34
 800d560:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d562:	f004 f8b7 	bl	80116d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800d566:	8829      	ldrh	r1, [r5, #0]
 800d568:	2200      	movs	r2, #0
 800d56a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d56c:	f004 f981 	bl	8011872 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800d570:	2005      	movs	r0, #5
 800d572:	f000 fae3 	bl	800db3c <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800d576:	8821      	ldrh	r1, [r4, #0]
 800d578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d57a:	f004 f973 	bl	8011864 <HAL_GPIO_ReadPin>
 800d57e:	2800      	cmp	r0, #0
 800d580:	d006      	beq.n	800d590 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d582:	4b0e      	ldr	r3, [pc, #56]	; (800d5bc <IsFactoryReset+0xf0>)
 800d584:	2201      	movs	r2, #1
 800d586:	4252      	negs	r2, r2
 800d588:	601a      	str	r2, [r3, #0]
	return 0;
 800d58a:	2000      	movs	r0, #0
}
 800d58c:	b012      	add	sp, #72	; 0x48
 800d58e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800d590:	2322      	movs	r3, #34	; 0x22
 800d592:	446b      	add	r3, sp
 800d594:	8819      	ldrh	r1, [r3, #0]
 800d596:	2201      	movs	r2, #1
 800d598:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d59a:	f004 f96a 	bl	8011872 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800d59e:	2005      	movs	r0, #5
 800d5a0:	f000 facc 	bl	800db3c <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800d5a4:	ab07      	add	r3, sp, #28
 800d5a6:	8819      	ldrh	r1, [r3, #0]
 800d5a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5aa:	f004 f95b 	bl	8011864 <HAL_GPIO_ReadPin>
 800d5ae:	2801      	cmp	r0, #1
 800d5b0:	d1e7      	bne.n	800d582 <IsFactoryReset+0xb6>
			return 1;
 800d5b2:	2001      	movs	r0, #1
 800d5b4:	e7ea      	b.n	800d58c <IsFactoryReset+0xc0>
 800d5b6:	46c0      	nop			; (mov r8, r8)
 800d5b8:	40021000 	.word	0x40021000
 800d5bc:	20007ff0 	.word	0x20007ff0

0800d5c0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d5c0:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d5c2:	f002 fe13 	bl	80101ec <HAL_IncTick>
  osSystickHandler();  
 800d5c6:	f000 fe21 	bl	800e20c <osSystickHandler>

}
 800d5ca:	bd10      	pop	{r4, pc}

0800d5cc <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d5cc:	e7fe      	b.n	800d5cc <HardFault_Handler>
	...

0800d5d0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d5d0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d5d2:	4802      	ldr	r0, [pc, #8]	; (800d5dc <USART1_IRQHandler+0xc>)
 800d5d4:	f005 fdf5 	bl	80131c2 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d5d8:	bd10      	pop	{r4, pc}
 800d5da:	46c0      	nop			; (mov r8, r8)
 800d5dc:	20006364 	.word	0x20006364

0800d5e0 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d5e0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d5e2:	4802      	ldr	r0, [pc, #8]	; (800d5ec <USART2_IRQHandler+0xc>)
 800d5e4:	f005 fded 	bl	80131c2 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d5e8:	bd10      	pop	{r4, pc}
 800d5ea:	46c0      	nop			; (mov r8, r8)
 800d5ec:	2000644c 	.word	0x2000644c

0800d5f0 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d5f0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d5f2:	4805      	ldr	r0, [pc, #20]	; (800d608 <USART3_8_IRQHandler+0x18>)
 800d5f4:	f005 fde5 	bl	80131c2 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d5f8:	4804      	ldr	r0, [pc, #16]	; (800d60c <USART3_8_IRQHandler+0x1c>)
 800d5fa:	f005 fde2 	bl	80131c2 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d5fe:	4804      	ldr	r0, [pc, #16]	; (800d610 <USART3_8_IRQHandler+0x20>)
 800d600:	f005 fddf 	bl	80131c2 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d604:	bd10      	pop	{r4, pc}
 800d606:	46c0      	nop			; (mov r8, r8)
 800d608:	20006228 	.word	0x20006228
 800d60c:	200062f0 	.word	0x200062f0
 800d610:	200063dc 	.word	0x200063dc

0800d614 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d614:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d616:	4b0c      	ldr	r3, [pc, #48]	; (800d648 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	06db      	lsls	r3, r3, #27
 800d61c:	d408      	bmi.n	800d630 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d61e:	4b0b      	ldr	r3, [pc, #44]	; (800d64c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	05db      	lsls	r3, r3, #23
 800d624:	d408      	bmi.n	800d638 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d626:	4b09      	ldr	r3, [pc, #36]	; (800d64c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	06db      	lsls	r3, r3, #27
 800d62c:	d408      	bmi.n	800d640 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800d62e:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800d630:	2005      	movs	r0, #5
 800d632:	f7f9 fa23 	bl	8006a7c <DMA_IRQHandler>
 800d636:	e7fa      	b.n	800d62e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800d638:	2002      	movs	r0, #2
 800d63a:	f7f9 fa1f 	bl	8006a7c <DMA_IRQHandler>
 800d63e:	e7f6      	b.n	800d62e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d640:	4803      	ldr	r0, [pc, #12]	; (800d650 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d642:	f003 fae9 	bl	8010c18 <HAL_DMA_IRQHandler>
}
 800d646:	e7f2      	b.n	800d62e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800d648:	40020400 	.word	0x40020400
 800d64c:	40020000 	.word	0x40020000
 800d650:	2000109c 	.word	0x2000109c

0800d654 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d654:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d656:	4b14      	ldr	r3, [pc, #80]	; (800d6a8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	03db      	lsls	r3, r3, #15
 800d65c:	d413      	bmi.n	800d686 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d65e:	4b12      	ldr	r3, [pc, #72]	; (800d6a8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	02db      	lsls	r3, r3, #11
 800d664:	d413      	bmi.n	800d68e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d666:	4b11      	ldr	r3, [pc, #68]	; (800d6ac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	05db      	lsls	r3, r3, #23
 800d66c:	d413      	bmi.n	800d696 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d66e:	4b0e      	ldr	r3, [pc, #56]	; (800d6a8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	04db      	lsls	r3, r3, #19
 800d674:	d413      	bmi.n	800d69e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d676:	4b0c      	ldr	r3, [pc, #48]	; (800d6a8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	01db      	lsls	r3, r3, #7
 800d67c:	d506      	bpl.n	800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d67e:	480c      	ldr	r0, [pc, #48]	; (800d6b0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800d680:	f003 faca 	bl	8010c18 <HAL_DMA_IRQHandler>
	}
}
 800d684:	e002      	b.n	800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800d686:	2003      	movs	r0, #3
 800d688:	f7f9 f9f8 	bl	8006a7c <DMA_IRQHandler>
}
 800d68c:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d68e:	2004      	movs	r0, #4
 800d690:	f7f9 f9f4 	bl	8006a7c <DMA_IRQHandler>
 800d694:	e7fa      	b.n	800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800d696:	2006      	movs	r0, #6
 800d698:	f7f9 f9f0 	bl	8006a7c <DMA_IRQHandler>
 800d69c:	e7f6      	b.n	800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d69e:	4805      	ldr	r0, [pc, #20]	; (800d6b4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800d6a0:	f003 faba 	bl	8010c18 <HAL_DMA_IRQHandler>
 800d6a4:	e7f2      	b.n	800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800d6a6:	46c0      	nop			; (mov r8, r8)
 800d6a8:	40020000 	.word	0x40020000
 800d6ac:	40020400 	.word	0x40020400
 800d6b0:	2000110c 	.word	0x2000110c
 800d6b4:	200010d4 	.word	0x200010d4

0800d6b8 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d6b8:	b510      	push	{r4, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d6c2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d001      	beq.n	800d6cc <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d6c8:	f7fe fcc4 	bl	800c054 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d6cc:	0020      	movs	r0, r4
 800d6ce:	f7fd fca5 	bl	800b01c <GetPort>
 800d6d2:	0080      	lsls	r0, r0, #2
 800d6d4:	4b03      	ldr	r3, [pc, #12]	; (800d6e4 <HAL_UART_TxCpltCallback+0x2c>)
 800d6d6:	58c0      	ldr	r0, [r0, r3]
 800d6d8:	a901      	add	r1, sp, #4
 800d6da:	f001 f927 	bl	800e92c <xQueueGiveFromISR>
}
 800d6de:	b002      	add	sp, #8
 800d6e0:	bd10      	pop	{r4, pc}
 800d6e2:	46c0      	nop			; (mov r8, r8)
 800d6e4:	200061c8 	.word	0x200061c8

0800d6e8 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d6e8:	b510      	push	{r4, lr}
 800d6ea:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d6ec:	2369      	movs	r3, #105	; 0x69
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d6f2:	f7fd fc93 	bl	800b01c <GetPort>
	if (portStatus[port] == STREAM) {
 800d6f6:	4b0b      	ldr	r3, [pc, #44]	; (800d724 <HAL_UART_ErrorCallback+0x3c>)
 800d6f8:	5c1b      	ldrb	r3, [r3, r0]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d004      	beq.n	800d708 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d6fe:	3801      	subs	r0, #1
 800d700:	4b09      	ldr	r3, [pc, #36]	; (800d728 <HAL_UART_ErrorCallback+0x40>)
 800d702:	2201      	movs	r2, #1
 800d704:	541a      	strb	r2, [r3, r0]
	}	
}
 800d706:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d708:	3801      	subs	r0, #1
 800d70a:	0080      	lsls	r0, r0, #2
 800d70c:	4b07      	ldr	r3, [pc, #28]	; (800d72c <HAL_UART_ErrorCallback+0x44>)
 800d70e:	58c3      	ldr	r3, [r0, r3]
 800d710:	6819      	ldr	r1, [r3, #0]
 800d712:	3128      	adds	r1, #40	; 0x28
 800d714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	685a      	ldr	r2, [r3, #4]
 800d71a:	b292      	uxth	r2, r2
 800d71c:	0020      	movs	r0, r4
 800d71e:	f005 f935 	bl	801298c <HAL_UART_Receive_DMA>
 800d722:	e7f0      	b.n	800d706 <HAL_UART_ErrorCallback+0x1e>
 800d724:	20000910 	.word	0x20000910
 800d728:	20000ae0 	.word	0x20000ae0
 800d72c:	20000c7c 	.word	0x20000c7c

0800d730 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d730:	b510      	push	{r4, lr}
 800d732:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800d734:	f7fd fc72 	bl	800b01c <GetPort>
 800d738:	4b12      	ldr	r3, [pc, #72]	; (800d784 <HAL_UART_RxCpltCallback+0x54>)
 800d73a:	5c1b      	ldrb	r3, [r3, r0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d006      	beq.n	800d74e <HAL_UART_RxCpltCallback+0x1e>
 800d740:	0020      	movs	r0, r4
 800d742:	f7fd fc6b 	bl	800b01c <GetPort>
 800d746:	4b0f      	ldr	r3, [pc, #60]	; (800d784 <HAL_UART_RxCpltCallback+0x54>)
 800d748:	5c1b      	ldrb	r3, [r3, r0]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d118      	bne.n	800d780 <HAL_UART_RxCpltCallback+0x50>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800d74e:	0020      	movs	r0, r4
 800d750:	f7fd fc64 	bl	800b01c <GetPort>
 800d754:	4b0c      	ldr	r3, [pc, #48]	; (800d788 <HAL_UART_RxCpltCallback+0x58>)
 800d756:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800d758:	0020      	movs	r0, r4
 800d75a:	f7fd fc5f 	bl	800b01c <GetPort>
 800d75e:	4b09      	ldr	r3, [pc, #36]	; (800d784 <HAL_UART_RxCpltCallback+0x54>)
 800d760:	2205      	movs	r2, #5
 800d762:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800d764:	0020      	movs	r0, r4
 800d766:	f7fd fc59 	bl	800b01c <GetPort>
 800d76a:	3801      	subs	r0, #1
 800d76c:	4b07      	ldr	r3, [pc, #28]	; (800d78c <HAL_UART_RxCpltCallback+0x5c>)
 800d76e:	2200      	movs	r2, #0
 800d770:	541a      	strb	r2, [r3, r0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800d772:	0020      	movs	r0, r4
 800d774:	f7fd fc52 	bl	800b01c <GetPort>
 800d778:	3801      	subs	r0, #1
 800d77a:	4b05      	ldr	r3, [pc, #20]	; (800d790 <HAL_UART_RxCpltCallback+0x60>)
 800d77c:	2201      	movs	r2, #1
 800d77e:	541a      	strb	r2, [r3, r0]
	}
}
 800d780:	bd10      	pop	{r4, pc}
 800d782:	46c0      	nop			; (mov r8, r8)
 800d784:	20000910 	.word	0x20000910
 800d788:	20006148 	.word	0x20006148
 800d78c:	20000c28 	.word	0x20000c28
 800d790:	20000ae0 	.word	0x20000ae0

0800d794 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800d794:	b672      	cpsid	i
 800d796:	e7fe      	b.n	800d796 <vApplicationStackOverflowHook+0x2>

0800d798 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800d798:	b672      	cpsid	i
 800d79a:	e7fe      	b.n	800d79a <vApplicationMallocFailedHook+0x2>

0800d79c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800d79c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800d79e:	2040      	movs	r0, #64	; 0x40
 800d7a0:	f004 f872 	bl	8011888 <HAL_GPIO_EXTI_IRQHandler>
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );

}
 800d7a4:	bd10      	pop	{r4, pc}
	...

0800d7a8 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7aa:	46d6      	mov	lr, sl
 800d7ac:	464f      	mov	r7, r9
 800d7ae:	4646      	mov	r6, r8
 800d7b0:	b5c0      	push	{r6, r7, lr}
 800d7b2:	b08c      	sub	sp, #48	; 0x30
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d7b4:	ac03      	add	r4, sp, #12
 800d7b6:	4b37      	ldr	r3, [pc, #220]	; (800d894 <RTC_CalendarConfig+0xec>)
 800d7b8:	0022      	movs	r2, r4
 800d7ba:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d7bc:	c243      	stmia	r2!, {r0, r1, r6}
 800d7be:	466b      	mov	r3, sp
 800d7c0:	4a35      	ldr	r2, [pc, #212]	; (800d898 <RTC_CalendarConfig+0xf0>)
 800d7c2:	ca03      	ldmia	r2!, {r0, r1}
 800d7c4:	c303      	stmia	r3!, {r0, r1}
 800d7c6:	0019      	movs	r1, r3
 800d7c8:	7813      	ldrb	r3, [r2, #0]
 800d7ca:	700b      	strb	r3, [r1, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d7cc:	2015      	movs	r0, #21
 800d7ce:	4468      	add	r0, sp
 800d7d0:	f005 fd87 	bl	80132e2 <atoi>
 800d7d4:	b2c7      	uxtb	r7, r0
  *(comDate + 6) = 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	4698      	mov	r8, r3
 800d7da:	71a3      	strb	r3, [r4, #6]
  day = atoi(comDate + 4);
 800d7dc:	a804      	add	r0, sp, #16
 800d7de:	f005 fd80 	bl	80132e2 <atoi>
 800d7e2:	b2c6      	uxtb	r6, r0
  *(comDate + 3) = 0;
 800d7e4:	4643      	mov	r3, r8
 800d7e6:	70e3      	strb	r3, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800d7e8:	2400      	movs	r4, #0
 800d7ea:	e001      	b.n	800d7f0 <RTC_CalendarConfig+0x48>
 800d7ec:	3401      	adds	r4, #1
 800d7ee:	b2e4      	uxtb	r4, r4
 800d7f0:	2c0b      	cmp	r4, #11
 800d7f2:	d80a      	bhi.n	800d80a <RTC_CalendarConfig+0x62>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d7f4:	00a3      	lsls	r3, r4, #2
 800d7f6:	4a29      	ldr	r2, [pc, #164]	; (800d89c <RTC_CalendarConfig+0xf4>)
 800d7f8:	5899      	ldr	r1, [r3, r2]
 800d7fa:	a803      	add	r0, sp, #12
 800d7fc:	f7f2 fc82 	bl	8000104 <strcmp>
 800d800:	2800      	cmp	r0, #0
 800d802:	d1f3      	bne.n	800d7ec <RTC_CalendarConfig+0x44>
			month = i + 1;
 800d804:	1c65      	adds	r5, r4, #1
 800d806:	b2ed      	uxtb	r5, r5
 800d808:	e7f0      	b.n	800d7ec <RTC_CalendarConfig+0x44>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d80a:	466b      	mov	r3, sp
 800d80c:	1d98      	adds	r0, r3, #6
 800d80e:	f005 fd68 	bl	80132e2 <atoi>
 800d812:	b2c3      	uxtb	r3, r0
 800d814:	4698      	mov	r8, r3
	*(comDate + 5) = 0;
 800d816:	ac03      	add	r4, sp, #12
 800d818:	2300      	movs	r3, #0
 800d81a:	469a      	mov	sl, r3
 800d81c:	7163      	strb	r3, [r4, #5]
	minutes = atoi(comTime + 3);
 800d81e:	466b      	mov	r3, sp
 800d820:	1cd8      	adds	r0, r3, #3
 800d822:	f005 fd5e 	bl	80132e2 <atoi>
 800d826:	b2c3      	uxtb	r3, r0
 800d828:	4699      	mov	r9, r3
	*(comDate + 2) = 0;
 800d82a:	4653      	mov	r3, sl
 800d82c:	70a3      	strb	r3, [r4, #2]
	hours = atoi(comTime);
 800d82e:	4668      	mov	r0, sp
 800d830:	f005 fd57 	bl	80132e2 <atoi>
 800d834:	b2c4      	uxtb	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d836:	a90b      	add	r1, sp, #44	; 0x2c
 800d838:	70cf      	strb	r7, [r1, #3]
  sdatestructure.Month = month;
 800d83a:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d83c:	708e      	strb	r6, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d83e:	2301      	movs	r3, #1
 800d840:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d842:	2200      	movs	r2, #0
 800d844:	4816      	ldr	r0, [pc, #88]	; (800d8a0 <RTC_CalendarConfig+0xf8>)
 800d846:	f004 fe19 	bl	801247c <HAL_RTC_SetDate>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d119      	bne.n	800d882 <RTC_CalendarConfig+0xda>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d84e:	a906      	add	r1, sp, #24
 800d850:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800d852:	464b      	mov	r3, r9
 800d854:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800d856:	4643      	mov	r3, r8
 800d858:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d85a:	2300      	movs	r3, #0
 800d85c:	720b      	strb	r3, [r1, #8]
 800d85e:	4a11      	ldr	r2, [pc, #68]	; (800d8a4 <RTC_CalendarConfig+0xfc>)
 800d860:	3018      	adds	r0, #24
 800d862:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d864:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d866:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d868:	2200      	movs	r2, #0
 800d86a:	480d      	ldr	r0, [pc, #52]	; (800d8a0 <RTC_CalendarConfig+0xf8>)
 800d86c:	f004 fd88 	bl	8012380 <HAL_RTC_SetTime>
 800d870:	2800      	cmp	r0, #0
 800d872:	d10d      	bne.n	800d890 <RTC_CalendarConfig+0xe8>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d874:	4a0c      	ldr	r2, [pc, #48]	; (800d8a8 <RTC_CalendarConfig+0x100>)
 800d876:	2101      	movs	r1, #1
 800d878:	4809      	ldr	r0, [pc, #36]	; (800d8a0 <RTC_CalendarConfig+0xf8>)
 800d87a:	f004 fec1 	bl	8012600 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d87e:	2000      	movs	r0, #0
 800d880:	e000      	b.n	800d884 <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;
 800d882:	20ff      	movs	r0, #255	; 0xff
}
 800d884:	b00c      	add	sp, #48	; 0x30
 800d886:	bc1c      	pop	{r2, r3, r4}
 800d888:	4690      	mov	r8, r2
 800d88a:	4699      	mov	r9, r3
 800d88c:	46a2      	mov	sl, r4
 800d88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800d890:	20ff      	movs	r0, #255	; 0xff
 800d892:	e7f7      	b.n	800d884 <RTC_CalendarConfig+0xdc>
 800d894:	08017260 	.word	0x08017260
 800d898:	0801a324 	.word	0x0801a324
 800d89c:	20000020 	.word	0x20000020
 800d8a0:	20006538 	.word	0x20006538
 800d8a4:	20006148 	.word	0x20006148
 800d8a8:	000032f2 	.word	0x000032f2

0800d8ac <RTC_Init>:
{
 800d8ac:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d8ae:	4a1c      	ldr	r2, [pc, #112]	; (800d920 <RTC_Init+0x74>)
 800d8b0:	6a11      	ldr	r1, [r2, #32]
 800d8b2:	2380      	movs	r3, #128	; 0x80
 800d8b4:	021b      	lsls	r3, r3, #8
 800d8b6:	430b      	orrs	r3, r1
 800d8b8:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800d8ba:	481a      	ldr	r0, [pc, #104]	; (800d924 <RTC_Init+0x78>)
 800d8bc:	4b1a      	ldr	r3, [pc, #104]	; (800d928 <RTC_Init+0x7c>)
 800d8be:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d8c4:	227c      	movs	r2, #124	; 0x7c
 800d8c6:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d8c8:	4a18      	ldr	r2, [pc, #96]	; (800d92c <RTC_Init+0x80>)
 800d8ca:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d8cc:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d8ce:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d8d0:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d8d2:	f004 fcf9 	bl	80122c8 <HAL_RTC_Init>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d11f      	bne.n	800d91a <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d8da:	2101      	movs	r1, #1
 800d8dc:	4811      	ldr	r0, [pc, #68]	; (800d924 <RTC_Init+0x78>)
 800d8de:	f004 fe95 	bl	801260c <HAL_RTCEx_BKUPRead>
 800d8e2:	4b13      	ldr	r3, [pc, #76]	; (800d930 <RTC_Init+0x84>)
 800d8e4:	4298      	cmp	r0, r3
 800d8e6:	d10e      	bne.n	800d906 <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d8e8:	4b0d      	ldr	r3, [pc, #52]	; (800d920 <RTC_Init+0x74>)
 800d8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ec:	011b      	lsls	r3, r3, #4
 800d8ee:	d502      	bpl.n	800d8f6 <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800d8f0:	4b10      	ldr	r3, [pc, #64]	; (800d934 <RTC_Init+0x88>)
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d8f6:	4b0a      	ldr	r3, [pc, #40]	; (800d920 <RTC_Init+0x74>)
 800d8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fa:	015b      	lsls	r3, r3, #5
 800d8fc:	d505      	bpl.n	800d90a <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800d8fe:	4b0d      	ldr	r3, [pc, #52]	; (800d934 <RTC_Init+0x88>)
 800d900:	2201      	movs	r2, #1
 800d902:	701a      	strb	r2, [r3, #0]
 800d904:	e001      	b.n	800d90a <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800d906:	f7ff ff4f 	bl	800d7a8 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d90a:	4a05      	ldr	r2, [pc, #20]	; (800d920 <RTC_Init+0x74>)
 800d90c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d90e:	2380      	movs	r3, #128	; 0x80
 800d910:	045b      	lsls	r3, r3, #17
 800d912:	430b      	orrs	r3, r1
 800d914:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800d916:	2000      	movs	r0, #0
}
 800d918:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d91a:	20ff      	movs	r0, #255	; 0xff
 800d91c:	e7fc      	b.n	800d918 <RTC_Init+0x6c>
 800d91e:	46c0      	nop			; (mov r8, r8)
 800d920:	40021000 	.word	0x40021000
 800d924:	20006538 	.word	0x20006538
 800d928:	40002800 	.word	0x40002800
 800d92c:	000007cf 	.word	0x000007cf
 800d930:	000032f2 	.word	0x000032f2
 800d934:	20001294 	.word	0x20001294

0800d938 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d93a:	46c6      	mov	lr, r8
 800d93c:	b500      	push	{lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	ac0c      	add	r4, sp, #48	; 0x30
 800d942:	7827      	ldrb	r7, [r4, #0]
 800d944:	ac0d      	add	r4, sp, #52	; 0x34
 800d946:	7824      	ldrb	r4, [r4, #0]
 800d948:	46a0      	mov	r8, r4
 800d94a:	ac0e      	add	r4, sp, #56	; 0x38
 800d94c:	7825      	ldrb	r5, [r4, #0]
 800d94e:	ac0f      	add	r4, sp, #60	; 0x3c
 800d950:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d952:	3230      	adds	r2, #48	; 0x30
 800d954:	ac05      	add	r4, sp, #20
 800d956:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d958:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d95a:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d95c:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d95e:	2200      	movs	r2, #0
 800d960:	0021      	movs	r1, r4
 800d962:	481f      	ldr	r0, [pc, #124]	; (800d9e0 <BOS_CalendarConfig+0xa8>)
 800d964:	f004 fd8a 	bl	801247c <HAL_RTC_SetDate>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d134      	bne.n	800d9d6 <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d96c:	466b      	mov	r3, sp
 800d96e:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d970:	4642      	mov	r2, r8
 800d972:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d974:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d976:	2300      	movs	r3, #0
 800d978:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800d97a:	2e01      	cmp	r6, #1
 800d97c:	d01e      	beq.n	800d9bc <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d97e:	2e02      	cmp	r6, #2
 800d980:	d022      	beq.n	800d9c8 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d982:	4b18      	ldr	r3, [pc, #96]	; (800d9e4 <BOS_CalendarConfig+0xac>)
 800d984:	2218      	movs	r2, #24
 800d986:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d988:	2200      	movs	r2, #0
 800d98a:	4669      	mov	r1, sp
 800d98c:	4814      	ldr	r0, [pc, #80]	; (800d9e0 <BOS_CalendarConfig+0xa8>)
 800d98e:	f004 fcf7 	bl	8012380 <HAL_RTC_SetTime>
 800d992:	2800      	cmp	r0, #0
 800d994:	d121      	bne.n	800d9da <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d996:	4a13      	ldr	r2, [pc, #76]	; (800d9e4 <BOS_CalendarConfig+0xac>)
 800d998:	7b53      	ldrb	r3, [r2, #13]
 800d99a:	021b      	lsls	r3, r3, #8
 800d99c:	7911      	ldrb	r1, [r2, #4]
 800d99e:	4319      	orrs	r1, r3
 800d9a0:	308d      	adds	r0, #141	; 0x8d
 800d9a2:	0040      	lsls	r0, r0, #1
 800d9a4:	f7f9 f9f0 	bl	8006d88 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d9a8:	4a0f      	ldr	r2, [pc, #60]	; (800d9e8 <BOS_CalendarConfig+0xb0>)
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	480c      	ldr	r0, [pc, #48]	; (800d9e0 <BOS_CalendarConfig+0xa8>)
 800d9ae:	f004 fe27 	bl	8012600 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d9b2:	2000      	movs	r0, #0
}
 800d9b4:	b006      	add	sp, #24
 800d9b6:	bc04      	pop	{r2}
 800d9b8:	4690      	mov	r8, r2
 800d9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d9bc:	466a      	mov	r2, sp
 800d9be:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d9c0:	4b08      	ldr	r3, [pc, #32]	; (800d9e4 <BOS_CalendarConfig+0xac>)
 800d9c2:	220c      	movs	r2, #12
 800d9c4:	735a      	strb	r2, [r3, #13]
 800d9c6:	e7df      	b.n	800d988 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d9c8:	2340      	movs	r3, #64	; 0x40
 800d9ca:	466a      	mov	r2, sp
 800d9cc:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d9ce:	4b05      	ldr	r3, [pc, #20]	; (800d9e4 <BOS_CalendarConfig+0xac>)
 800d9d0:	220c      	movs	r2, #12
 800d9d2:	735a      	strb	r2, [r3, #13]
 800d9d4:	e7d8      	b.n	800d988 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800d9d6:	20ff      	movs	r0, #255	; 0xff
 800d9d8:	e7ec      	b.n	800d9b4 <BOS_CalendarConfig+0x7c>
		return BOS_ERROR;
 800d9da:	20ff      	movs	r0, #255	; 0xff
 800d9dc:	e7ea      	b.n	800d9b4 <BOS_CalendarConfig+0x7c>
 800d9de:	46c0      	nop			; (mov r8, r8)
 800d9e0:	20006538 	.word	0x20006538
 800d9e4:	20006148 	.word	0x20006148
 800d9e8:	000032f2 	.word	0x000032f2

0800d9ec <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d9ec:	b530      	push	{r4, r5, lr}
 800d9ee:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d9f0:	4d16      	ldr	r5, [pc, #88]	; (800da4c <GetTimeDate+0x60>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	a902      	add	r1, sp, #8
 800d9f6:	0028      	movs	r0, r5
 800d9f8:	f004 fdb6 	bl	8012568 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d9fc:	ac07      	add	r4, sp, #28
 800d9fe:	2200      	movs	r2, #0
 800da00:	0021      	movs	r1, r4
 800da02:	0028      	movs	r0, r5
 800da04:	f004 fdd8 	bl	80125b8 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800da08:	ab02      	add	r3, sp, #8
 800da0a:	7a1a      	ldrb	r2, [r3, #8]
 800da0c:	09d2      	lsrs	r2, r2, #7
 800da0e:	3201      	adds	r2, #1
 800da10:	4b0f      	ldr	r3, [pc, #60]	; (800da50 <GetTimeDate+0x64>)
 800da12:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800da14:	9a03      	ldr	r2, [sp, #12]
 800da16:	9201      	str	r2, [sp, #4]
 800da18:	0852      	lsrs	r2, r2, #1
 800da1a:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800da1c:	aa02      	add	r2, sp, #8
 800da1e:	7892      	ldrb	r2, [r2, #2]
 800da20:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800da22:	aa02      	add	r2, sp, #8
 800da24:	7852      	ldrb	r2, [r2, #1]
 800da26:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800da28:	aa02      	add	r2, sp, #8
 800da2a:	7812      	ldrb	r2, [r2, #0]
 800da2c:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800da2e:	78a2      	ldrb	r2, [r4, #2]
 800da30:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800da32:	7862      	ldrb	r2, [r4, #1]
 800da34:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800da36:	7822      	ldrb	r2, [r4, #0]
 800da38:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800da3a:	78e2      	ldrb	r2, [r4, #3]
 800da3c:	21fa      	movs	r1, #250	; 0xfa
 800da3e:	00c9      	lsls	r1, r1, #3
 800da40:	468c      	mov	ip, r1
 800da42:	4462      	add	r2, ip
 800da44:	831a      	strh	r2, [r3, #24]
}
 800da46:	b009      	add	sp, #36	; 0x24
 800da48:	bd30      	pop	{r4, r5, pc}
 800da4a:	46c0      	nop			; (mov r8, r8)
 800da4c:	20006538 	.word	0x20006538
 800da50:	20006148 	.word	0x20006148

0800da54 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800da54:	b530      	push	{r4, r5, lr}
 800da56:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800da58:	4a12      	ldr	r2, [pc, #72]	; (800daa4 <TIM_USEC_Init+0x50>)
 800da5a:	69d1      	ldr	r1, [r2, #28]
 800da5c:	2080      	movs	r0, #128	; 0x80
 800da5e:	0040      	lsls	r0, r0, #1
 800da60:	4301      	orrs	r1, r0
 800da62:	61d1      	str	r1, [r2, #28]
 800da64:	69d3      	ldr	r3, [r2, #28]
 800da66:	4003      	ands	r3, r0
 800da68:	9301      	str	r3, [sp, #4]
 800da6a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800da6c:	4c0e      	ldr	r4, [pc, #56]	; (800daa8 <TIM_USEC_Init+0x54>)
 800da6e:	4b0f      	ldr	r3, [pc, #60]	; (800daac <TIM_USEC_Init+0x58>)
 800da70:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800da72:	f004 fb49 	bl	8012108 <HAL_RCC_GetPCLK1Freq>
 800da76:	490e      	ldr	r1, [pc, #56]	; (800dab0 <TIM_USEC_Init+0x5c>)
 800da78:	f7f2 fb60 	bl	800013c <__udivsi3>
 800da7c:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800da7e:	2500      	movs	r5, #0
 800da80:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800da82:	4b0c      	ldr	r3, [pc, #48]	; (800dab4 <TIM_USEC_Init+0x60>)
 800da84:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800da86:	0020      	movs	r0, r4
 800da88:	f004 fe22 	bl	80126d0 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800da8c:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800da8e:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800da90:	a902      	add	r1, sp, #8
 800da92:	0020      	movs	r0, r4
 800da94:	f004 fe36 	bl	8012704 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800da98:	0020      	movs	r0, r4
 800da9a:	f004 fdbe 	bl	801261a <HAL_TIM_Base_Start>
}
 800da9e:	b005      	add	sp, #20
 800daa0:	bd30      	pop	{r4, r5, pc}
 800daa2:	46c0      	nop			; (mov r8, r8)
 800daa4:	40021000 	.word	0x40021000
 800daa8:	20006594 	.word	0x20006594
 800daac:	40002000 	.word	0x40002000
 800dab0:	000f4240 	.word	0x000f4240
 800dab4:	0000ffff 	.word	0x0000ffff

0800dab8 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800dab8:	b530      	push	{r4, r5, lr}
 800daba:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800dabc:	4a12      	ldr	r2, [pc, #72]	; (800db08 <TIM_MSEC_Init+0x50>)
 800dabe:	6991      	ldr	r1, [r2, #24]
 800dac0:	2080      	movs	r0, #128	; 0x80
 800dac2:	0240      	lsls	r0, r0, #9
 800dac4:	4301      	orrs	r1, r0
 800dac6:	6191      	str	r1, [r2, #24]
 800dac8:	6993      	ldr	r3, [r2, #24]
 800daca:	4003      	ands	r3, r0
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800dad0:	4c0e      	ldr	r4, [pc, #56]	; (800db0c <TIM_MSEC_Init+0x54>)
 800dad2:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <TIM_MSEC_Init+0x58>)
 800dad4:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800dad6:	f004 fb17 	bl	8012108 <HAL_RCC_GetPCLK1Freq>
 800dada:	21fa      	movs	r1, #250	; 0xfa
 800dadc:	0089      	lsls	r1, r1, #2
 800dade:	f7f2 fb2d 	bl	800013c <__udivsi3>
 800dae2:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dae4:	2500      	movs	r5, #0
 800dae6:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800dae8:	4b0a      	ldr	r3, [pc, #40]	; (800db14 <TIM_MSEC_Init+0x5c>)
 800daea:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800daec:	0020      	movs	r0, r4
 800daee:	f004 fdef 	bl	80126d0 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800daf2:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800daf4:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800daf6:	a902      	add	r1, sp, #8
 800daf8:	0020      	movs	r0, r4
 800dafa:	f004 fe03 	bl	8012704 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800dafe:	0020      	movs	r0, r4
 800db00:	f004 fd8b 	bl	801261a <HAL_TIM_Base_Start>
}
 800db04:	b005      	add	sp, #20
 800db06:	bd30      	pop	{r4, r5, pc}
 800db08:	40021000 	.word	0x40021000
 800db0c:	20006558 	.word	0x20006558
 800db10:	40014000 	.word	0x40014000
 800db14:	0000ffff 	.word	0x0000ffff

0800db18 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800db18:	b510      	push	{r4, lr}
 800db1a:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800db1c:	f002 f9ec 	bl	800fef8 <vPortEnterCritical>
	
	if (Delay)
 800db20:	2c00      	cmp	r4, #0
 800db22:	d006      	beq.n	800db32 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800db24:	4b04      	ldr	r3, [pc, #16]	; (800db38 <StartMicroDelay+0x20>)
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800db2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800db2c:	1a5b      	subs	r3, r3, r1
 800db2e:	42a3      	cmp	r3, r4
 800db30:	d9fb      	bls.n	800db2a <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800db32:	f002 f9ed 	bl	800ff10 <vPortExitCritical>
}
 800db36:	bd10      	pop	{r4, pc}
 800db38:	20006594 	.word	0x20006594

0800db3c <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800db3c:	b510      	push	{r4, lr}
 800db3e:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800db40:	f002 f9da 	bl	800fef8 <vPortEnterCritical>
	
	if (Delay)
 800db44:	2c00      	cmp	r4, #0
 800db46:	d006      	beq.n	800db56 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800db48:	4b04      	ldr	r3, [pc, #16]	; (800db5c <StartMilliDelay+0x20>)
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800db4e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800db50:	1a5b      	subs	r3, r3, r1
 800db52:	42a3      	cmp	r3, r4
 800db54:	d9fb      	bls.n	800db4e <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800db56:	f002 f9db 	bl	800ff10 <vPortExitCritical>
}
 800db5a:	bd10      	pop	{r4, pc}
 800db5c:	20006558 	.word	0x20006558

0800db60 <MX_USART1_UART_Init>:
	 uint16_t arrayPortsDir[__N];
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void) {
 800db60:	b510      	push	{r4, lr}
	huart1.Instance = USART1;
 800db62:	4809      	ldr	r0, [pc, #36]	; (800db88 <MX_USART1_UART_Init+0x28>)
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <MX_USART1_UART_Init+0x2c>)
 800db66:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db68:	23e1      	movs	r3, #225	; 0xe1
 800db6a:	031b      	lsls	r3, r3, #12
 800db6c:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800db6e:	2300      	movs	r3, #0
 800db70:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800db72:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800db74:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800db76:	220c      	movs	r2, #12
 800db78:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db7a:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800db7c:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800db7e:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db80:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800db82:	f005 fa45 	bl	8013010 <HAL_UART_Init>
#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800db86:	bd10      	pop	{r4, pc}
 800db88:	20006364 	.word	0x20006364
 800db8c:	40013800 	.word	0x40013800

0800db90 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void) {
 800db90:	b510      	push	{r4, lr}
	huart2.Instance = USART2;
 800db92:	4809      	ldr	r0, [pc, #36]	; (800dbb8 <MX_USART2_UART_Init+0x28>)
 800db94:	4b09      	ldr	r3, [pc, #36]	; (800dbbc <MX_USART2_UART_Init+0x2c>)
 800db96:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db98:	23e1      	movs	r3, #225	; 0xe1
 800db9a:	031b      	lsls	r3, r3, #12
 800db9c:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800db9e:	2300      	movs	r3, #0
 800dba0:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800dba2:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800dba4:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800dba6:	220c      	movs	r2, #12
 800dba8:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dbaa:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dbac:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dbae:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dbb0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800dbb2:	f005 fa2d 	bl	8013010 <HAL_UART_Init>
#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800dbb6:	bd10      	pop	{r4, pc}
 800dbb8:	2000644c 	.word	0x2000644c
 800dbbc:	40004400 	.word	0x40004400

0800dbc0 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void) {
 800dbc0:	b510      	push	{r4, lr}
	huart3.Instance = USART3;
 800dbc2:	4809      	ldr	r0, [pc, #36]	; (800dbe8 <MX_USART3_UART_Init+0x28>)
 800dbc4:	4b09      	ldr	r3, [pc, #36]	; (800dbec <MX_USART3_UART_Init+0x2c>)
 800dbc6:	6003      	str	r3, [r0, #0]
	huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dbc8:	23e1      	movs	r3, #225	; 0xe1
 800dbca:	031b      	lsls	r3, r3, #12
 800dbcc:	6043      	str	r3, [r0, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	6083      	str	r3, [r0, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800dbd2:	60c3      	str	r3, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800dbd4:	6103      	str	r3, [r0, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800dbd6:	220c      	movs	r2, #12
 800dbd8:	6142      	str	r2, [r0, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dbda:	6183      	str	r3, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dbdc:	61c3      	str	r3, [r0, #28]
	huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dbde:	6203      	str	r3, [r0, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dbe0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dbe2:	f005 fa15 	bl	8013010 <HAL_UART_Init>
#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800dbe6:	bd10      	pop	{r4, pc}
 800dbe8:	20006228 	.word	0x20006228
 800dbec:	40004800 	.word	0x40004800

0800dbf0 <MX_USART5_UART_Init>:
}
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void) {
 800dbf0:	b510      	push	{r4, lr}
	huart5.Instance = USART5;
 800dbf2:	4809      	ldr	r0, [pc, #36]	; (800dc18 <MX_USART5_UART_Init+0x28>)
 800dbf4:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <MX_USART5_UART_Init+0x2c>)
 800dbf6:	6003      	str	r3, [r0, #0]
	huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dbf8:	23e1      	movs	r3, #225	; 0xe1
 800dbfa:	031b      	lsls	r3, r3, #12
 800dbfc:	6043      	str	r3, [r0, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	6083      	str	r3, [r0, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 800dc02:	60c3      	str	r3, [r0, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800dc04:	6103      	str	r3, [r0, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800dc06:	220c      	movs	r2, #12
 800dc08:	6142      	str	r2, [r0, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc0a:	6183      	str	r3, [r0, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc0c:	61c3      	str	r3, [r0, #28]
	huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc0e:	6203      	str	r3, [r0, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc10:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800dc12:	f005 f9fd 	bl	8013010 <HAL_UART_Init>
#if _P1pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800dc16:	bd10      	pop	{r4, pc}
 800dc18:	200062f0 	.word	0x200062f0
 800dc1c:	40005000 	.word	0x40005000

0800dc20 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void) {
 800dc20:	b510      	push	{r4, lr}
	huart6.Instance = USART6;
 800dc22:	4809      	ldr	r0, [pc, #36]	; (800dc48 <MX_USART6_UART_Init+0x28>)
 800dc24:	4b09      	ldr	r3, [pc, #36]	; (800dc4c <MX_USART6_UART_Init+0x2c>)
 800dc26:	6003      	str	r3, [r0, #0]
	huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dc28:	23e1      	movs	r3, #225	; 0xe1
 800dc2a:	031b      	lsls	r3, r3, #12
 800dc2c:	6043      	str	r3, [r0, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	6083      	str	r3, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800dc32:	60c3      	str	r3, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800dc34:	6103      	str	r3, [r0, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800dc36:	220c      	movs	r2, #12
 800dc38:	6142      	str	r2, [r0, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc3a:	6183      	str	r3, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc3c:	61c3      	str	r3, [r0, #28]
	huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc3e:	6203      	str	r3, [r0, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc40:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800dc42:	f005 f9e5 	bl	8013010 <HAL_UART_Init>
#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800dc46:	bd10      	pop	{r4, pc}
 800dc48:	200063dc 	.word	0x200063dc
 800dc4c:	40011400 	.word	0x40011400

0800dc50 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800dc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc52:	46ce      	mov	lr, r9
 800dc54:	b500      	push	{lr}
 800dc56:	b08a      	sub	sp, #40	; 0x28

	GPIO_InitTypeDef GPIO_InitStruct;
	if (huart->Instance == USART1) {
 800dc58:	6803      	ldr	r3, [r0, #0]
 800dc5a:	4a7b      	ldr	r2, [pc, #492]	; (800de48 <HAL_UART_MspInit+0x1f8>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d014      	beq.n	800dc8a <HAL_UART_MspInit+0x3a>

		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(USART1_IRQn);
#endif
	} else if (huart->Instance == USART2) {
 800dc60:	4a7a      	ldr	r2, [pc, #488]	; (800de4c <HAL_UART_MspInit+0x1fc>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d03f      	beq.n	800dce6 <HAL_UART_MspInit+0x96>

		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(USART2_IRQn);
#endif
	} else if (huart->Instance == USART3) {
 800dc66:	4a7a      	ldr	r2, [pc, #488]	; (800de50 <HAL_UART_MspInit+0x200>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d068      	beq.n	800dd3e <HAL_UART_MspInit+0xee>

		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
#endif
	} else if (huart->Instance == USART4) {
 800dc6c:	4a79      	ldr	r2, [pc, #484]	; (800de54 <HAL_UART_MspInit+0x204>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d007      	beq.n	800dc82 <HAL_UART_MspInit+0x32>

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
	} else if (huart->Instance == USART5) {
 800dc72:	4a79      	ldr	r2, [pc, #484]	; (800de58 <HAL_UART_MspInit+0x208>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d100      	bne.n	800dc7a <HAL_UART_MspInit+0x2a>
 800dc78:	e08e      	b.n	800dd98 <HAL_UART_MspInit+0x148>

		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
#endif
	} else if (huart->Instance == USART6) {
 800dc7a:	4a78      	ldr	r2, [pc, #480]	; (800de5c <HAL_UART_MspInit+0x20c>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d100      	bne.n	800dc82 <HAL_UART_MspInit+0x32>
 800dc80:	e0b5      	b.n	800ddee <HAL_UART_MspInit+0x19e>
		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
#endif
	}
}
 800dc82:	b00a      	add	sp, #40	; 0x28
 800dc84:	bc04      	pop	{r2}
 800dc86:	4691      	mov	r9, r2
 800dc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__USART1_CLK_ENABLE()
 800dc8a:	4a75      	ldr	r2, [pc, #468]	; (800de60 <HAL_UART_MspInit+0x210>)
 800dc8c:	6991      	ldr	r1, [r2, #24]
 800dc8e:	2080      	movs	r0, #128	; 0x80
 800dc90:	01c0      	lsls	r0, r0, #7
 800dc92:	4301      	orrs	r1, r0
 800dc94:	6191      	str	r1, [r2, #24]
 800dc96:	6993      	ldr	r3, [r2, #24]
 800dc98:	4003      	ands	r3, r0
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	9b00      	ldr	r3, [sp, #0]
		GPIO_InitStruct.Pin = USART1_TX_PIN;
 800dc9e:	2380      	movs	r3, #128	; 0x80
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dca4:	2702      	movs	r7, #2
 800dca6:	9706      	str	r7, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dca8:	2401      	movs	r4, #1
 800dcaa:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dcac:	2603      	movs	r6, #3
 800dcae:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART1_AF;
 800dcb0:	9409      	str	r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800dcb2:	2590      	movs	r5, #144	; 0x90
 800dcb4:	05ed      	lsls	r5, r5, #23
 800dcb6:	a905      	add	r1, sp, #20
 800dcb8:	0028      	movs	r0, r5
 800dcba:	f003 fd0b 	bl	80116d4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;
 800dcbe:	2380      	movs	r3, #128	; 0x80
 800dcc0:	00db      	lsls	r3, r3, #3
 800dcc2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcc4:	9706      	str	r7, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dcc6:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dcc8:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART1_AF;
 800dcca:	9409      	str	r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800dccc:	a905      	add	r1, sp, #20
 800dcce:	0028      	movs	r0, r5
 800dcd0:	f003 fd00 	bl	80116d4 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	201b      	movs	r0, #27
 800dcda:	f002 fd83 	bl	80107e4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 800dcde:	201b      	movs	r0, #27
 800dce0:	f002 fdb0 	bl	8010844 <HAL_NVIC_EnableIRQ>
 800dce4:	e7cd      	b.n	800dc82 <HAL_UART_MspInit+0x32>
		__USART2_CLK_ENABLE()
 800dce6:	4a5e      	ldr	r2, [pc, #376]	; (800de60 <HAL_UART_MspInit+0x210>)
 800dce8:	69d1      	ldr	r1, [r2, #28]
 800dcea:	2080      	movs	r0, #128	; 0x80
 800dcec:	0280      	lsls	r0, r0, #10
 800dcee:	4301      	orrs	r1, r0
 800dcf0:	61d1      	str	r1, [r2, #28]
 800dcf2:	69d3      	ldr	r3, [r2, #28]
 800dcf4:	4003      	ands	r3, r0
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = USART2_TX_PIN;
 800dcfa:	2304      	movs	r3, #4
 800dcfc:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcfe:	2702      	movs	r7, #2
 800dd00:	9706      	str	r7, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd02:	2401      	movs	r4, #1
 800dd04:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd06:	2603      	movs	r6, #3
 800dd08:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART2_AF;
 800dd0a:	9409      	str	r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800dd0c:	2590      	movs	r5, #144	; 0x90
 800dd0e:	05ed      	lsls	r5, r5, #23
 800dd10:	a905      	add	r1, sp, #20
 800dd12:	0028      	movs	r0, r5
 800dd14:	f003 fcde 	bl	80116d4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;
 800dd18:	2308      	movs	r3, #8
 800dd1a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd1c:	9706      	str	r7, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd1e:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd20:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART2_AF;
 800dd22:	9409      	str	r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800dd24:	a905      	add	r1, sp, #20
 800dd26:	0028      	movs	r0, r5
 800dd28:	f003 fcd4 	bl	80116d4 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	2101      	movs	r1, #1
 800dd30:	201c      	movs	r0, #28
 800dd32:	f002 fd57 	bl	80107e4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800dd36:	201c      	movs	r0, #28
 800dd38:	f002 fd84 	bl	8010844 <HAL_NVIC_EnableIRQ>
 800dd3c:	e7a1      	b.n	800dc82 <HAL_UART_MspInit+0x32>
		__USART3_CLK_ENABLE()
 800dd3e:	4a48      	ldr	r2, [pc, #288]	; (800de60 <HAL_UART_MspInit+0x210>)
 800dd40:	69d1      	ldr	r1, [r2, #28]
 800dd42:	2080      	movs	r0, #128	; 0x80
 800dd44:	02c0      	lsls	r0, r0, #11
 800dd46:	4301      	orrs	r1, r0
 800dd48:	61d1      	str	r1, [r2, #28]
 800dd4a:	69d3      	ldr	r3, [r2, #28]
 800dd4c:	4003      	ands	r3, r0
 800dd4e:	9302      	str	r3, [sp, #8]
 800dd50:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = USART3_TX_PIN;
 800dd52:	2380      	movs	r3, #128	; 0x80
 800dd54:	00db      	lsls	r3, r3, #3
 800dd56:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd58:	2402      	movs	r4, #2
 800dd5a:	9406      	str	r4, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd5c:	2701      	movs	r7, #1
 800dd5e:	9707      	str	r7, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd60:	2603      	movs	r6, #3
 800dd62:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART3_AF;
 800dd64:	2504      	movs	r5, #4
 800dd66:	9509      	str	r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800dd68:	a905      	add	r1, sp, #20
 800dd6a:	483e      	ldr	r0, [pc, #248]	; (800de64 <HAL_UART_MspInit+0x214>)
 800dd6c:	f003 fcb2 	bl	80116d4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;
 800dd70:	2380      	movs	r3, #128	; 0x80
 800dd72:	011b      	lsls	r3, r3, #4
 800dd74:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd76:	9406      	str	r4, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd78:	9707      	str	r7, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd7a:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART3_AF;
 800dd7c:	9509      	str	r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800dd7e:	a905      	add	r1, sp, #20
 800dd80:	4838      	ldr	r0, [pc, #224]	; (800de64 <HAL_UART_MspInit+0x214>)
 800dd82:	f003 fca7 	bl	80116d4 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dd86:	2200      	movs	r2, #0
 800dd88:	2101      	movs	r1, #1
 800dd8a:	201d      	movs	r0, #29
 800dd8c:	f002 fd2a 	bl	80107e4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dd90:	201d      	movs	r0, #29
 800dd92:	f002 fd57 	bl	8010844 <HAL_NVIC_EnableIRQ>
 800dd96:	e774      	b.n	800dc82 <HAL_UART_MspInit+0x32>
		__USART5_CLK_ENABLE()
 800dd98:	4a31      	ldr	r2, [pc, #196]	; (800de60 <HAL_UART_MspInit+0x210>)
 800dd9a:	69d1      	ldr	r1, [r2, #28]
 800dd9c:	2080      	movs	r0, #128	; 0x80
 800dd9e:	0340      	lsls	r0, r0, #13
 800dda0:	4301      	orrs	r1, r0
 800dda2:	61d1      	str	r1, [r2, #28]
 800dda4:	69d3      	ldr	r3, [r2, #28]
 800dda6:	4003      	ands	r3, r0
 800dda8:	9303      	str	r3, [sp, #12]
 800ddaa:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin = USART5_TX_PIN;
 800ddac:	2308      	movs	r3, #8
 800ddae:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddb0:	2402      	movs	r4, #2
 800ddb2:	9406      	str	r4, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddb4:	2701      	movs	r7, #1
 800ddb6:	9707      	str	r7, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ddb8:	2603      	movs	r6, #3
 800ddba:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART5_AF;
 800ddbc:	2504      	movs	r5, #4
 800ddbe:	9509      	str	r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800ddc0:	a905      	add	r1, sp, #20
 800ddc2:	4828      	ldr	r0, [pc, #160]	; (800de64 <HAL_UART_MspInit+0x214>)
 800ddc4:	f003 fc86 	bl	80116d4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;
 800ddc8:	2310      	movs	r3, #16
 800ddca:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddcc:	9406      	str	r4, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddce:	9707      	str	r7, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ddd0:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART5_AF;
 800ddd2:	9509      	str	r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800ddd4:	a905      	add	r1, sp, #20
 800ddd6:	4823      	ldr	r0, [pc, #140]	; (800de64 <HAL_UART_MspInit+0x214>)
 800ddd8:	f003 fc7c 	bl	80116d4 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dddc:	2200      	movs	r2, #0
 800ddde:	2101      	movs	r1, #1
 800dde0:	201d      	movs	r0, #29
 800dde2:	f002 fcff 	bl	80107e4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dde6:	201d      	movs	r0, #29
 800dde8:	f002 fd2c 	bl	8010844 <HAL_NVIC_EnableIRQ>
 800ddec:	e749      	b.n	800dc82 <HAL_UART_MspInit+0x32>
		__USART6_CLK_ENABLE()
 800ddee:	4b1c      	ldr	r3, [pc, #112]	; (800de60 <HAL_UART_MspInit+0x210>)
 800ddf0:	699a      	ldr	r2, [r3, #24]
 800ddf2:	2420      	movs	r4, #32
 800ddf4:	4322      	orrs	r2, r4
 800ddf6:	619a      	str	r2, [r3, #24]
 800ddf8:	699b      	ldr	r3, [r3, #24]
 800ddfa:	4023      	ands	r3, r4
 800ddfc:	9304      	str	r3, [sp, #16]
 800ddfe:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Pin = USART6_TX_PIN;
 800de00:	2310      	movs	r3, #16
 800de02:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de04:	3b0e      	subs	r3, #14
 800de06:	4699      	mov	r9, r3
 800de08:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de0a:	2501      	movs	r5, #1
 800de0c:	9507      	str	r5, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de0e:	2703      	movs	r7, #3
 800de10:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Alternate = USART6_AF;
 800de12:	2605      	movs	r6, #5
 800de14:	9609      	str	r6, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800de16:	a905      	add	r1, sp, #20
 800de18:	2090      	movs	r0, #144	; 0x90
 800de1a:	05c0      	lsls	r0, r0, #23
 800de1c:	f003 fc5a 	bl	80116d4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;
 800de20:	9405      	str	r4, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de22:	464b      	mov	r3, r9
 800de24:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de26:	9507      	str	r5, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de28:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Alternate = USART6_AF;
 800de2a:	9609      	str	r6, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800de2c:	a905      	add	r1, sp, #20
 800de2e:	2090      	movs	r0, #144	; 0x90
 800de30:	05c0      	lsls	r0, r0, #23
 800de32:	f003 fc4f 	bl	80116d4 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800de36:	2200      	movs	r2, #0
 800de38:	2101      	movs	r1, #1
 800de3a:	201d      	movs	r0, #29
 800de3c:	f002 fcd2 	bl	80107e4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800de40:	201d      	movs	r0, #29
 800de42:	f002 fcff 	bl	8010844 <HAL_NVIC_EnableIRQ>
}
 800de46:	e71c      	b.n	800dc82 <HAL_UART_MspInit+0x32>
 800de48:	40013800 	.word	0x40013800
 800de4c:	40004400 	.word	0x40004400
 800de50:	40004800 	.word	0x40004800
 800de54:	40004c00 	.word	0x40004c00
 800de58:	40005000 	.word	0x40005000
 800de5c:	40011400 	.word	0x40011400
 800de60:	40021000 	.word	0x40021000
 800de64:	48000400 	.word	0x48000400

0800de68 <GetUart>:
}

/* --- Get the UART for a given port. 
 */
UART_HandleTypeDef* GetUart(uint8_t port) {
	switch (port) {
 800de68:	2805      	cmp	r0, #5
 800de6a:	d80b      	bhi.n	800de84 <GetUart+0x1c>
 800de6c:	0080      	lsls	r0, r0, #2
 800de6e:	4b07      	ldr	r3, [pc, #28]	; (800de8c <GetUart+0x24>)
 800de70:	581b      	ldr	r3, [r3, r0]
 800de72:	469f      	mov	pc, r3
#ifdef _P1
	case P1:
		return P1uart;
 800de74:	4806      	ldr	r0, [pc, #24]	; (800de90 <GetUart+0x28>)
 800de76:	e008      	b.n	800de8a <GetUart+0x22>
	case P2:
		return P2uart;
#endif
#ifdef _P3
	case P3:
		return P3uart;
 800de78:	4806      	ldr	r0, [pc, #24]	; (800de94 <GetUart+0x2c>)
 800de7a:	e006      	b.n	800de8a <GetUart+0x22>
#endif
#ifdef _P4
	case P4:
		return P4uart;
 800de7c:	4806      	ldr	r0, [pc, #24]	; (800de98 <GetUart+0x30>)
 800de7e:	e004      	b.n	800de8a <GetUart+0x22>
#endif
#ifdef _P5
	case P5:
		return P5uart;
 800de80:	4806      	ldr	r0, [pc, #24]	; (800de9c <GetUart+0x34>)
 800de82:	e002      	b.n	800de8a <GetUart+0x22>
#ifdef _P10
		case P10 :
			return P10uart;
	#endif
	default:
		return 0;
 800de84:	2000      	movs	r0, #0
 800de86:	e000      	b.n	800de8a <GetUart+0x22>
		return P2uart;
 800de88:	4805      	ldr	r0, [pc, #20]	; (800dea0 <GetUart+0x38>)
	}
}
 800de8a:	4770      	bx	lr
 800de8c:	0801a330 	.word	0x0801a330
 800de90:	200062f0 	.word	0x200062f0
 800de94:	200063dc 	.word	0x200063dc
 800de98:	20006228 	.word	0x20006228
 800de9c:	20006364 	.word	0x20006364
 800dea0:	2000644c 	.word	0x2000644c

0800dea4 <writePxMutex>:
		uint32_t mutexTimeout, uint32_t portTimeout) {
 800dea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dea6:	b083      	sub	sp, #12
 800dea8:	0005      	movs	r5, r0
 800deaa:	9101      	str	r1, [sp, #4]
 800deac:	0017      	movs	r7, r2
 800deae:	001e      	movs	r6, r3
	if (GetUart(port) != NULL) {
 800deb0:	f7ff ffda 	bl	800de68 <GetUart>
 800deb4:	1e04      	subs	r4, r0, #0
 800deb6:	d01c      	beq.n	800def2 <writePxMutex+0x4e>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800deb8:	00ab      	lsls	r3, r5, #2
 800deba:	4a10      	ldr	r2, [pc, #64]	; (800defc <writePxMutex+0x58>)
 800debc:	5898      	ldr	r0, [r3, r2]
 800debe:	0031      	movs	r1, r6
 800dec0:	f000 f942 	bl	800e148 <osSemaphoreWait>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d101      	bne.n	800decc <writePxMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR;
 800dec8:	2601      	movs	r6, #1
 800deca:	e008      	b.n	800dede <writePxMutex+0x3a>
 800decc:	2601      	movs	r6, #1
 800dece:	e011      	b.n	800def4 <writePxMutex+0x50>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t*) buffer, n,
 800ded0:	9b08      	ldr	r3, [sp, #32]
 800ded2:	003a      	movs	r2, r7
 800ded4:	9901      	ldr	r1, [sp, #4]
 800ded6:	0020      	movs	r0, r4
 800ded8:	f004 fff0 	bl	8012ebc <HAL_UART_Transmit>
 800dedc:	0006      	movs	r6, r0
			while (result != HAL_OK && result != HAL_TIMEOUT) {
 800dede:	2e00      	cmp	r6, #0
 800dee0:	d001      	beq.n	800dee6 <writePxMutex+0x42>
 800dee2:	2e03      	cmp	r6, #3
 800dee4:	d1f4      	bne.n	800ded0 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800dee6:	00ad      	lsls	r5, r5, #2
 800dee8:	4b04      	ldr	r3, [pc, #16]	; (800defc <writePxMutex+0x58>)
 800deea:	58e8      	ldr	r0, [r5, r3]
 800deec:	f000 f962 	bl	800e1b4 <osSemaphoreRelease>
 800def0:	e000      	b.n	800def4 <writePxMutex+0x50>
	HAL_StatusTypeDef result = HAL_ERROR;
 800def2:	2601      	movs	r6, #1
}
 800def4:	0030      	movs	r0, r6
 800def6:	b003      	add	sp, #12
 800def8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800defa:	46c0      	nop			; (mov r8, r8)
 800defc:	200061c8 	.word	0x200061c8

0800df00 <writePxITMutex>:
		uint32_t mutexTimeout) {
 800df00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df02:	b083      	sub	sp, #12
 800df04:	0004      	movs	r4, r0
 800df06:	9101      	str	r1, [sp, #4]
 800df08:	0017      	movs	r7, r2
 800df0a:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {
 800df0c:	f7ff ffac 	bl	800de68 <GetUart>
 800df10:	1e06      	subs	r6, r0, #0
 800df12:	d00f      	beq.n	800df34 <writePxITMutex+0x34>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df14:	00a4      	lsls	r4, r4, #2
 800df16:	4b09      	ldr	r3, [pc, #36]	; (800df3c <writePxITMutex+0x3c>)
 800df18:	58e0      	ldr	r0, [r4, r3]
 800df1a:	0029      	movs	r1, r5
 800df1c:	f000 f914 	bl	800e148 <osSemaphoreWait>
 800df20:	2800      	cmp	r0, #0
 800df22:	d001      	beq.n	800df28 <writePxITMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR;
 800df24:	2001      	movs	r0, #1
 800df26:	e006      	b.n	800df36 <writePxITMutex+0x36>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t*) buffer, n);
 800df28:	003a      	movs	r2, r7
 800df2a:	9901      	ldr	r1, [sp, #4]
 800df2c:	0030      	movs	r0, r6
 800df2e:	f004 fc2c 	bl	801278a <HAL_UART_Transmit_IT>
 800df32:	e000      	b.n	800df36 <writePxITMutex+0x36>
	HAL_StatusTypeDef result = HAL_ERROR;
 800df34:	2001      	movs	r0, #1
}
 800df36:	b003      	add	sp, #12
 800df38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df3a:	46c0      	nop			; (mov r8, r8)
 800df3c:	200061c8 	.word	0x200061c8

0800df40 <writePxDMAMutex>:
		uint32_t mutexTimeout) {
 800df40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df42:	b083      	sub	sp, #12
 800df44:	0004      	movs	r4, r0
 800df46:	000f      	movs	r7, r1
 800df48:	9201      	str	r2, [sp, #4]
 800df4a:	001e      	movs	r6, r3
	UART_HandleTypeDef *hUart = GetUart(port);
 800df4c:	f7ff ff8c 	bl	800de68 <GetUart>
 800df50:	1e05      	subs	r5, r0, #0
	if (hUart != NULL) {
 800df52:	d012      	beq.n	800df7a <writePxDMAMutex+0x3a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df54:	00a4      	lsls	r4, r4, #2
 800df56:	4b0a      	ldr	r3, [pc, #40]	; (800df80 <writePxDMAMutex+0x40>)
 800df58:	58e0      	ldr	r0, [r4, r3]
 800df5a:	0031      	movs	r1, r6
 800df5c:	f000 f8f4 	bl	800e148 <osSemaphoreWait>
 800df60:	2800      	cmp	r0, #0
 800df62:	d001      	beq.n	800df68 <writePxDMAMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR;
 800df64:	2001      	movs	r0, #1
 800df66:	e009      	b.n	800df7c <writePxDMAMutex+0x3c>
			DMA_MSG_TX_Setup(hUart);
 800df68:	0028      	movs	r0, r5
 800df6a:	f7ff f963 	bl	800d234 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t*) buffer, n);
 800df6e:	9a01      	ldr	r2, [sp, #4]
 800df70:	0039      	movs	r1, r7
 800df72:	0028      	movs	r0, r5
 800df74:	f004 fcb8 	bl	80128e8 <HAL_UART_Transmit_DMA>
 800df78:	e000      	b.n	800df7c <writePxDMAMutex+0x3c>
	HAL_StatusTypeDef result = HAL_ERROR;
 800df7a:	2001      	movs	r0, #1
}
 800df7c:	b003      	add	sp, #12
 800df7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df80:	200061c8 	.word	0x200061c8

0800df84 <UpdateBaudrate>:
BOS_Status UpdateBaudrate(uint8_t port, uint32_t baudrate) {
 800df84:	b510      	push	{r4, lr}
 800df86:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800df88:	f7ff ff6e 	bl	800de68 <GetUart>
	huart->Init.BaudRate = baudrate;
 800df8c:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800df8e:	f005 f83f 	bl	8013010 <HAL_UART_Init>
}
 800df92:	2000      	movs	r0, #0
 800df94:	bd10      	pop	{r4, pc}
	...

0800df98 <SwapUartPins>:

/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
 */
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction) {
 800df98:	b570      	push	{r4, r5, r6, lr}
 800df9a:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800df9c:	d003      	beq.n	800dfa6 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800df9e:	2901      	cmp	r1, #1
 800dfa0:	d002      	beq.n	800dfa8 <SwapUartPins+0x10>
			arrayPortsDir[myID - 1] |= (0x8000 >> (GetPort(huart) - 1)); /* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800dfa2:	2900      	cmp	r1, #0
 800dfa4:	d016      	beq.n	800dfd4 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);
		}
	}
}
 800dfa6:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID - 1] |= (0x8000 >> (GetPort(huart) - 1)); /* Set bit to one */
 800dfa8:	f7fd f838 	bl	800b01c <GetPort>
 800dfac:	3801      	subs	r0, #1
 800dfae:	2180      	movs	r1, #128	; 0x80
 800dfb0:	0209      	lsls	r1, r1, #8
 800dfb2:	000d      	movs	r5, r1
 800dfb4:	4105      	asrs	r5, r0
 800dfb6:	4b12      	ldr	r3, [pc, #72]	; (800e000 <SwapUartPins+0x68>)
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	3b01      	subs	r3, #1
 800dfbc:	4811      	ldr	r0, [pc, #68]	; (800e004 <SwapUartPins+0x6c>)
 800dfbe:	005b      	lsls	r3, r3, #1
 800dfc0:	5a1a      	ldrh	r2, [r3, r0]
 800dfc2:	432a      	orrs	r2, r5
 800dfc4:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dfc6:	2308      	movs	r3, #8
 800dfc8:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800dfca:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800dfcc:	0020      	movs	r0, r4
 800dfce:	f005 f81f 	bl	8013010 <HAL_UART_Init>
 800dfd2:	e7e8      	b.n	800dfa6 <SwapUartPins+0xe>
			arrayPortsDir[myID - 1] &= (~(0x8000 >> (GetPort(huart) - 1))); /* Set bit to zero */
 800dfd4:	f7fd f822 	bl	800b01c <GetPort>
 800dfd8:	3801      	subs	r0, #1
 800dfda:	2180      	movs	r1, #128	; 0x80
 800dfdc:	0209      	lsls	r1, r1, #8
 800dfde:	4101      	asrs	r1, r0
 800dfe0:	4b07      	ldr	r3, [pc, #28]	; (800e000 <SwapUartPins+0x68>)
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	4807      	ldr	r0, [pc, #28]	; (800e004 <SwapUartPins+0x6c>)
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	5a1a      	ldrh	r2, [r3, r0]
 800dfec:	438a      	bics	r2, r1
 800dfee:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dff0:	2308      	movs	r3, #8
 800dff2:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800dff4:	2300      	movs	r3, #0
 800dff6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800dff8:	0020      	movs	r0, r4
 800dffa:	f005 f809 	bl	8013010 <HAL_UART_Init>
}
 800dffe:	e7d2      	b.n	800dfa6 <SwapUartPins+0xe>
 800e000:	20000896 	.word	0x20000896
 800e004:	200065d0 	.word	0x200065d0

0800e008 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e008:	4816      	ldr	r0, [pc, #88]	; (800e064 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e00a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e00c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e00e:	e003      	b.n	800e018 <LoopCopyDataInit>

0800e010 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e010:	4b15      	ldr	r3, [pc, #84]	; (800e068 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e012:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e014:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e016:	3104      	adds	r1, #4

0800e018 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e018:	4814      	ldr	r0, [pc, #80]	; (800e06c <LoopForever+0xc>)
  ldr r3, =_edata
 800e01a:	4b15      	ldr	r3, [pc, #84]	; (800e070 <LoopForever+0x10>)
  adds r2, r0, r1
 800e01c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e01e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e020:	d3f6      	bcc.n	800e010 <CopyDataInit>
  ldr r2, =_sbss
 800e022:	4a14      	ldr	r2, [pc, #80]	; (800e074 <LoopForever+0x14>)
  b LoopFillZerobss
 800e024:	e002      	b.n	800e02c <LoopFillZerobss>

0800e026 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e026:	2300      	movs	r3, #0
  str  r3, [r2]
 800e028:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e02a:	3204      	adds	r2, #4

0800e02c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e02c:	4b12      	ldr	r3, [pc, #72]	; (800e078 <LoopForever+0x18>)
  cmp r2, r3
 800e02e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e030:	d3f9      	bcc.n	800e026 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e032:	4812      	ldr	r0, [pc, #72]	; (800e07c <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e034:	4912      	ldr	r1, [pc, #72]	; (800e080 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e036:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e038:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e03a:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e03c:	d005      	beq.n	800e04a <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e03e:	f000 f82b 	bl	800e098 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e042:	f005 f95b 	bl	80132fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e046:	f005 f93a 	bl	80132be <main>

0800e04a <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e04a:	480e      	ldr	r0, [pc, #56]	; (800e084 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e04c:	490e      	ldr	r1, [pc, #56]	; (800e088 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e04e:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e050:	480e      	ldr	r0, [pc, #56]	; (800e08c <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e052:	490d      	ldr	r1, [pc, #52]	; (800e088 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e054:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e056:	480e      	ldr	r0, [pc, #56]	; (800e090 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e058:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e05a:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e05c:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e05e:	4700      	bx	r0

0800e060 <LoopForever>:


LoopForever:
    b LoopForever
 800e060:	e7fe      	b.n	800e060 <LoopForever>
 800e062:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e064:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e068:	0801a7d0 	.word	0x0801a7d0
  ldr r0, =_sdata
 800e06c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e070:	200002b0 	.word	0x200002b0
  ldr r2, =_sbss
 800e074:	200002b0 	.word	0x200002b0
  ldr r3, = _ebss
 800e078:	2000666c 	.word	0x2000666c
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e07c:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e080:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e084:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e088:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e08c:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e090:	1fffd800 	.word	0x1fffd800

0800e094 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e094:	e7fe      	b.n	800e094 <ADC1_COMP_IRQHandler>
	...

0800e098 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e098:	4b11      	ldr	r3, [pc, #68]	; (800e0e0 <SystemInit+0x48>)
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	2101      	movs	r1, #1
 800e09e:	430a      	orrs	r2, r1
 800e0a0:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e0a2:	685a      	ldr	r2, [r3, #4]
 800e0a4:	480f      	ldr	r0, [pc, #60]	; (800e0e4 <SystemInit+0x4c>)
 800e0a6:	4002      	ands	r2, r0
 800e0a8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	480e      	ldr	r0, [pc, #56]	; (800e0e8 <SystemInit+0x50>)
 800e0ae:	4002      	ands	r2, r0
 800e0b0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	480d      	ldr	r0, [pc, #52]	; (800e0ec <SystemInit+0x54>)
 800e0b6:	4002      	ands	r2, r0
 800e0b8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e0ba:	685a      	ldr	r2, [r3, #4]
 800e0bc:	480c      	ldr	r0, [pc, #48]	; (800e0f0 <SystemInit+0x58>)
 800e0be:	4002      	ands	r2, r0
 800e0c0:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c4:	200f      	movs	r0, #15
 800e0c6:	4382      	bics	r2, r0
 800e0c8:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e0ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0cc:	4809      	ldr	r0, [pc, #36]	; (800e0f4 <SystemInit+0x5c>)
 800e0ce:	4002      	ands	r2, r0
 800e0d0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e0d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0d4:	438a      	bics	r2, r1
 800e0d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e0d8:	2200      	movs	r2, #0
 800e0da:	609a      	str	r2, [r3, #8]

}
 800e0dc:	4770      	bx	lr
 800e0de:	46c0      	nop			; (mov r8, r8)
 800e0e0:	40021000 	.word	0x40021000
 800e0e4:	08ffb80c 	.word	0x08ffb80c
 800e0e8:	fef6ffff 	.word	0xfef6ffff
 800e0ec:	fffbffff 	.word	0xfffbffff
 800e0f0:	ffc0ffff 	.word	0xffc0ffff
 800e0f4:	fff0feac 	.word	0xfff0feac

0800e0f8 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0f8:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800e0fc:	1e43      	subs	r3, r0, #1
 800e0fe:	4198      	sbcs	r0, r3
}
 800e100:	4770      	bx	lr

0800e102 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e102:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e104:	f000 ff86 	bl	800f014 <vTaskStartScheduler>
  
  return osOK;
}
 800e108:	2000      	movs	r0, #0
 800e10a:	bd10      	pop	{r4, pc}

0800e10c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e10c:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e10e:	2800      	cmp	r0, #0
 800e110:	d100      	bne.n	800e114 <osDelay+0x8>
 800e112:	3001      	adds	r0, #1
 800e114:	f001 f8ba 	bl	800f28c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e118:	2000      	movs	r0, #0
 800e11a:	bd10      	pop	{r4, pc}

0800e11c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e11c:	b510      	push	{r4, lr}
 800e11e:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e120:	2901      	cmp	r1, #1
 800e122:	d005      	beq.n	800e130 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e124:	2100      	movs	r1, #0
 800e126:	f000 fb13 	bl	800e750 <xQueueCreateCountingSemaphore>
 800e12a:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e12c:	0020      	movs	r0, r4
 800e12e:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e130:	2203      	movs	r2, #3
 800e132:	2100      	movs	r1, #0
 800e134:	f000 fae5 	bl	800e702 <xQueueGenericCreate>
 800e138:	1e04      	subs	r4, r0, #0
 800e13a:	d0f7      	beq.n	800e12c <osSemaphoreCreate+0x10>
 800e13c:	2300      	movs	r3, #0
 800e13e:	2200      	movs	r2, #0
 800e140:	2100      	movs	r1, #0
 800e142:	f000 fb1b 	bl	800e77c <xQueueGenericSend>
 800e146:	e7f1      	b.n	800e12c <osSemaphoreCreate+0x10>

0800e148 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e148:	b530      	push	{r4, r5, lr}
 800e14a:	b083      	sub	sp, #12
 800e14c:	0005      	movs	r5, r0
 800e14e:	000c      	movs	r4, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e150:	2300      	movs	r3, #0
 800e152:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e154:	2800      	cmp	r0, #0
 800e156:	d025      	beq.n	800e1a4 <osSemaphoreWait+0x5c>
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800e158:	1c4b      	adds	r3, r1, #1
 800e15a:	d013      	beq.n	800e184 <osSemaphoreWait+0x3c>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e15c:	f7ff ffcc 	bl	800e0f8 <inHandlerMode>
 800e160:	2800      	cmp	r0, #0
 800e162:	d012      	beq.n	800e18a <osSemaphoreWait+0x42>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e164:	aa01      	add	r2, sp, #4
 800e166:	2100      	movs	r1, #0
 800e168:	0028      	movs	r0, r5
 800e16a:	f000 fcc2 	bl	800eaf2 <xQueueReceiveFromISR>
 800e16e:	2801      	cmp	r0, #1
 800e170:	d11a      	bne.n	800e1a8 <osSemaphoreWait+0x60>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e172:	9b01      	ldr	r3, [sp, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d019      	beq.n	800e1ac <osSemaphoreWait+0x64>
 800e178:	4b0d      	ldr	r3, [pc, #52]	; (800e1b0 <osSemaphoreWait+0x68>)
 800e17a:	2280      	movs	r2, #128	; 0x80
 800e17c:	0552      	lsls	r2, r2, #21
 800e17e:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e180:	2000      	movs	r0, #0
 800e182:	e00b      	b.n	800e19c <osSemaphoreWait+0x54>
    ticks = portMAX_DELAY;
 800e184:	2401      	movs	r4, #1
 800e186:	4264      	negs	r4, r4
 800e188:	e7e8      	b.n	800e15c <osSemaphoreWait+0x14>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e18a:	2300      	movs	r3, #0
 800e18c:	0022      	movs	r2, r4
 800e18e:	2100      	movs	r1, #0
 800e190:	0028      	movs	r0, r5
 800e192:	f000 fc0b 	bl	800e9ac <xQueueGenericReceive>
 800e196:	2801      	cmp	r0, #1
 800e198:	d102      	bne.n	800e1a0 <osSemaphoreWait+0x58>
  return osOK;
 800e19a:	2000      	movs	r0, #0
}
 800e19c:	b003      	add	sp, #12
 800e19e:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 800e1a0:	20ff      	movs	r0, #255	; 0xff
 800e1a2:	e7fb      	b.n	800e19c <osSemaphoreWait+0x54>
    return osErrorParameter;
 800e1a4:	2080      	movs	r0, #128	; 0x80
 800e1a6:	e7f9      	b.n	800e19c <osSemaphoreWait+0x54>
      return osErrorOS;
 800e1a8:	20ff      	movs	r0, #255	; 0xff
 800e1aa:	e7f7      	b.n	800e19c <osSemaphoreWait+0x54>
  return osOK;
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	e7f5      	b.n	800e19c <osSemaphoreWait+0x54>
 800e1b0:	e000ed04 	.word	0xe000ed04

0800e1b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e1b4:	b510      	push	{r4, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	0004      	movs	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800e1be:	f7ff ff9b 	bl	800e0f8 <inHandlerMode>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d00e      	beq.n	800e1e4 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e1c6:	a901      	add	r1, sp, #4
 800e1c8:	0020      	movs	r0, r4
 800e1ca:	f000 fbaf 	bl	800e92c <xQueueGiveFromISR>
 800e1ce:	2801      	cmp	r0, #1
 800e1d0:	d113      	bne.n	800e1fa <osSemaphoreRelease+0x46>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e1d2:	9b01      	ldr	r3, [sp, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d012      	beq.n	800e1fe <osSemaphoreRelease+0x4a>
 800e1d8:	4b0b      	ldr	r3, [pc, #44]	; (800e208 <osSemaphoreRelease+0x54>)
 800e1da:	2280      	movs	r2, #128	; 0x80
 800e1dc:	0552      	lsls	r2, r2, #21
 800e1de:	601a      	str	r2, [r3, #0]
  osStatus result = osOK;
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	e008      	b.n	800e1f6 <osSemaphoreRelease+0x42>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	0020      	movs	r0, r4
 800e1ec:	f000 fac6 	bl	800e77c <xQueueGenericSend>
 800e1f0:	2801      	cmp	r0, #1
 800e1f2:	d106      	bne.n	800e202 <osSemaphoreRelease+0x4e>
  osStatus result = osOK;
 800e1f4:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800e1f6:	b002      	add	sp, #8
 800e1f8:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800e1fa:	20ff      	movs	r0, #255	; 0xff
 800e1fc:	e7fb      	b.n	800e1f6 <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800e1fe:	2000      	movs	r0, #0
 800e200:	e7f9      	b.n	800e1f6 <osSemaphoreRelease+0x42>
      result = osErrorOS;
 800e202:	20ff      	movs	r0, #255	; 0xff
 800e204:	e7f7      	b.n	800e1f6 <osSemaphoreRelease+0x42>
 800e206:	46c0      	nop			; (mov r8, r8)
 800e208:	e000ed04 	.word	0xe000ed04

0800e20c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e20c:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e20e:	f001 fa2b 	bl	800f668 <xTaskGetSchedulerState>
 800e212:	2801      	cmp	r0, #1
 800e214:	d001      	beq.n	800e21a <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800e216:	f001 feb5 	bl	800ff84 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e21a:	bd10      	pop	{r4, pc}

0800e21c <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 800e21c:	0003      	movs	r3, r0
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e21e:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800e220:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e222:	e005      	b.n	800e230 <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800e224:	2901      	cmp	r1, #1
 800e226:	d002      	beq.n	800e22e <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 800e228:	3001      	adds	r0, #1
 800e22a:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800e22c:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800e22e:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800e230:	2200      	movs	r2, #0
 800e232:	569a      	ldrsb	r2, [r3, r2]
 800e234:	2a00      	cmp	r2, #0
 800e236:	d003      	beq.n	800e240 <prvGetNumberOfParameters+0x24>
		if( ( *pcCommandString ) == ' ' )
 800e238:	2a20      	cmp	r2, #32
 800e23a:	d0f3      	beq.n	800e224 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800e23c:	2100      	movs	r1, #0
 800e23e:	e7f6      	b.n	800e22e <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e240:	2901      	cmp	r1, #1
 800e242:	d000      	beq.n	800e246 <prvGetNumberOfParameters+0x2a>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800e244:	4770      	bx	lr
		cParameters--;
 800e246:	3801      	subs	r0, #1
 800e248:	b240      	sxtb	r0, r0
 800e24a:	e7fb      	b.n	800e244 <prvGetNumberOfParameters+0x28>

0800e24c <FreeRTOS_CLIRegisterCommand>:
{
 800e24c:	b570      	push	{r4, r5, r6, lr}
 800e24e:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
 800e250:	d101      	bne.n	800e256 <FreeRTOS_CLIRegisterCommand+0xa>
 800e252:	b672      	cpsid	i
 800e254:	e7fe      	b.n	800e254 <FreeRTOS_CLIRegisterCommand+0x8>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e256:	2008      	movs	r0, #8
 800e258:	f001 ff02 	bl	8010060 <pvPortMalloc>
 800e25c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800e25e:	d101      	bne.n	800e264 <FreeRTOS_CLIRegisterCommand+0x18>
 800e260:	b672      	cpsid	i
 800e262:	e7fe      	b.n	800e262 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
 800e264:	f001 fe48 	bl	800fef8 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e268:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800e26a:	2300      	movs	r3, #0
 800e26c:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800e26e:	4b04      	ldr	r3, [pc, #16]	; (800e280 <FreeRTOS_CLIRegisterCommand+0x34>)
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800e274:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800e276:	f001 fe4b 	bl	800ff10 <vPortExitCritical>
}
 800e27a:	2001      	movs	r0, #1
 800e27c:	bd70      	pop	{r4, r5, r6, pc}
 800e27e:	46c0      	nop			; (mov r8, r8)
 800e280:	200000cc 	.word	0x200000cc

0800e284 <FreeRTOS_CLIProcessCommand>:
{
 800e284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e286:	b083      	sub	sp, #12
 800e288:	0005      	movs	r5, r0
 800e28a:	9100      	str	r1, [sp, #0]
 800e28c:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
 800e28e:	4b2c      	ldr	r3, [pc, #176]	; (800e340 <FreeRTOS_CLIProcessCommand+0xbc>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d016      	beq.n	800e2c4 <FreeRTOS_CLIProcessCommand+0x40>
portBASE_TYPE xReturn = pdTRUE;
 800e296:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e298:	4b29      	ldr	r3, [pc, #164]	; (800e340 <FreeRTOS_CLIProcessCommand+0xbc>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <FreeRTOS_CLIProcessCommand+0x20>
 800e2a0:	2c00      	cmp	r4, #0
 800e2a2:	d03d      	beq.n	800e320 <FreeRTOS_CLIProcessCommand+0x9c>
	else if( pxCommand != NULL )
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d044      	beq.n	800e332 <FreeRTOS_CLIProcessCommand+0xae>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	002a      	movs	r2, r5
 800e2ae:	9901      	ldr	r1, [sp, #4]
 800e2b0:	9800      	ldr	r0, [sp, #0]
 800e2b2:	4798      	blx	r3
 800e2b4:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 800e2b6:	d102      	bne.n	800e2be <FreeRTOS_CLIProcessCommand+0x3a>
			pxCommand = NULL;
 800e2b8:	4b21      	ldr	r3, [pc, #132]	; (800e340 <FreeRTOS_CLIProcessCommand+0xbc>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	601a      	str	r2, [r3, #0]
}
 800e2be:	0020      	movs	r0, r4
 800e2c0:	b003      	add	sp, #12
 800e2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e2c4:	4b1e      	ldr	r3, [pc, #120]	; (800e340 <FreeRTOS_CLIProcessCommand+0xbc>)
 800e2c6:	4a1f      	ldr	r2, [pc, #124]	; (800e344 <FreeRTOS_CLIProcessCommand+0xc0>)
 800e2c8:	601a      	str	r2, [r3, #0]
 800e2ca:	e009      	b.n	800e2e0 <FreeRTOS_CLIProcessCommand+0x5c>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e2cc:	0002      	movs	r2, r0
 800e2ce:	0021      	movs	r1, r4
 800e2d0:	0028      	movs	r0, r5
 800e2d2:	f006 f829 	bl	8014328 <strncmp>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d011      	beq.n	800e2fe <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	4b18      	ldr	r3, [pc, #96]	; (800e340 <FreeRTOS_CLIProcessCommand+0xbc>)
 800e2de:	601a      	str	r2, [r3, #0]
 800e2e0:	4b17      	ldr	r3, [pc, #92]	; (800e340 <FreeRTOS_CLIProcessCommand+0xbc>)
 800e2e2:	681f      	ldr	r7, [r3, #0]
 800e2e4:	2f00      	cmp	r7, #0
 800e2e6:	d019      	beq.n	800e31c <FreeRTOS_CLIProcessCommand+0x98>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e2e8:	683e      	ldr	r6, [r7, #0]
 800e2ea:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e2ec:	0020      	movs	r0, r4
 800e2ee:	f7f1 ff13 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e2f2:	562b      	ldrsb	r3, [r5, r0]
 800e2f4:	2b20      	cmp	r3, #32
 800e2f6:	d0e9      	beq.n	800e2cc <FreeRTOS_CLIProcessCommand+0x48>
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1ee      	bne.n	800e2da <FreeRTOS_CLIProcessCommand+0x56>
 800e2fc:	e7e6      	b.n	800e2cc <FreeRTOS_CLIProcessCommand+0x48>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e2fe:	240c      	movs	r4, #12
 800e300:	5734      	ldrsb	r4, [r6, r4]
 800e302:	2c00      	cmp	r4, #0
 800e304:	da01      	bge.n	800e30a <FreeRTOS_CLIProcessCommand+0x86>
portBASE_TYPE xReturn = pdTRUE;
 800e306:	2401      	movs	r4, #1
 800e308:	e7c6      	b.n	800e298 <FreeRTOS_CLIProcessCommand+0x14>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800e30a:	0028      	movs	r0, r5
 800e30c:	f7ff ff86 	bl	800e21c <prvGetNumberOfParameters>
 800e310:	4284      	cmp	r4, r0
 800e312:	d001      	beq.n	800e318 <FreeRTOS_CLIProcessCommand+0x94>
							xReturn = pdFALSE;
 800e314:	2400      	movs	r4, #0
 800e316:	e7bf      	b.n	800e298 <FreeRTOS_CLIProcessCommand+0x14>
portBASE_TYPE xReturn = pdTRUE;
 800e318:	2401      	movs	r4, #1
 800e31a:	e7bd      	b.n	800e298 <FreeRTOS_CLIProcessCommand+0x14>
 800e31c:	2401      	movs	r4, #1
 800e31e:	e7bb      	b.n	800e298 <FreeRTOS_CLIProcessCommand+0x14>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e320:	9a01      	ldr	r2, [sp, #4]
 800e322:	4909      	ldr	r1, [pc, #36]	; (800e348 <FreeRTOS_CLIProcessCommand+0xc4>)
 800e324:	9800      	ldr	r0, [sp, #0]
 800e326:	f006 f810 	bl	801434a <strncpy>
		pxCommand = NULL;
 800e32a:	4b05      	ldr	r3, [pc, #20]	; (800e340 <FreeRTOS_CLIProcessCommand+0xbc>)
 800e32c:	2200      	movs	r2, #0
 800e32e:	601a      	str	r2, [r3, #0]
 800e330:	e7c5      	b.n	800e2be <FreeRTOS_CLIProcessCommand+0x3a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e332:	9a01      	ldr	r2, [sp, #4]
 800e334:	4905      	ldr	r1, [pc, #20]	; (800e34c <FreeRTOS_CLIProcessCommand+0xc8>)
 800e336:	9800      	ldr	r0, [sp, #0]
 800e338:	f006 f807 	bl	801434a <strncpy>
		xReturn = pdFALSE;
 800e33c:	2400      	movs	r4, #0
	return xReturn;
 800e33e:	e7be      	b.n	800e2be <FreeRTOS_CLIProcessCommand+0x3a>
 800e340:	20001500 	.word	0x20001500
 800e344:	200000d0 	.word	0x200000d0
 800e348:	0801a348 	.word	0x0801a348
 800e34c:	0801a3a0 	.word	0x0801a3a0

0800e350 <FreeRTOS_CLIGetOutputBuffer>:
}
 800e350:	4800      	ldr	r0, [pc, #0]	; (800e354 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e352:	4770      	bx	lr
 800e354:	20001298 	.word	0x20001298

0800e358 <FreeRTOS_CLIGetParameter>:
{
 800e358:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800e35a:	2300      	movs	r3, #0
 800e35c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e35e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e360:	e011      	b.n	800e386 <FreeRTOS_CLIGetParameter+0x2e>
			pcCommandString++;
 800e362:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e364:	2300      	movs	r3, #0
 800e366:	56c3      	ldrsb	r3, [r0, r3]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d003      	beq.n	800e374 <FreeRTOS_CLIGetParameter+0x1c>
 800e36c:	2b20      	cmp	r3, #32
 800e36e:	d1f8      	bne.n	800e362 <FreeRTOS_CLIGetParameter+0xa>
 800e370:	e000      	b.n	800e374 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800e372:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e374:	2300      	movs	r3, #0
 800e376:	56c3      	ldrsb	r3, [r0, r3]
 800e378:	2b20      	cmp	r3, #32
 800e37a:	d0fa      	beq.n	800e372 <FreeRTOS_CLIGetParameter+0x1a>
		if( *pcCommandString != 0x00 )
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d017      	beq.n	800e3b0 <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
 800e380:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e382:	42a1      	cmp	r1, r4
 800e384:	d012      	beq.n	800e3ac <FreeRTOS_CLIGetParameter+0x54>
	while( uxParametersFound < uxWantedParameter )
 800e386:	428c      	cmp	r4, r1
 800e388:	d3ec      	bcc.n	800e364 <FreeRTOS_CLIGetParameter+0xc>
const int8_t *pcReturn = NULL;
 800e38a:	2000      	movs	r0, #0
}
 800e38c:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800e38e:	6813      	ldr	r3, [r2, #0]
 800e390:	3301      	adds	r3, #1
 800e392:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e394:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e396:	2300      	movs	r3, #0
 800e398:	56cb      	ldrsb	r3, [r1, r3]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d001      	beq.n	800e3a2 <FreeRTOS_CLIGetParameter+0x4a>
 800e39e:	2b20      	cmp	r3, #32
 800e3a0:	d1f5      	bne.n	800e38e <FreeRTOS_CLIGetParameter+0x36>
				if( *pxParameterStringLength == 0 )
 800e3a2:	6813      	ldr	r3, [r2, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1f1      	bne.n	800e38c <FreeRTOS_CLIGetParameter+0x34>
					pcReturn = NULL;
 800e3a8:	2000      	movs	r0, #0
	return pcReturn;
 800e3aa:	e7ef      	b.n	800e38c <FreeRTOS_CLIGetParameter+0x34>
 800e3ac:	0001      	movs	r1, r0
 800e3ae:	e7f2      	b.n	800e396 <FreeRTOS_CLIGetParameter+0x3e>
const int8_t *pcReturn = NULL;
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	e7eb      	b.n	800e38c <FreeRTOS_CLIGetParameter+0x34>

0800e3b4 <prvHelpCommand>:
{
 800e3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	0005      	movs	r5, r0
 800e3ba:	000e      	movs	r6, r1
 800e3bc:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e3c2:	aa01      	add	r2, sp, #4
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	f7ff ffc7 	bl	800e358 <FreeRTOS_CLIGetParameter>
 800e3ca:	1e04      	subs	r4, r0, #0
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e3cc:	d022      	beq.n	800e414 <prvHelpCommand+0x60>
 800e3ce:	2206      	movs	r2, #6
 800e3d0:	4931      	ldr	r1, [pc, #196]	; (800e498 <prvHelpCommand+0xe4>)
 800e3d2:	f005 ffa9 	bl	8014328 <strncmp>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d11c      	bne.n	800e414 <prvHelpCommand+0x60>
		if( str == NumOfParamsHelpStrings )
 800e3da:	4b30      	ldr	r3, [pc, #192]	; (800e49c <prvHelpCommand+0xe8>)
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	2b07      	cmp	r3, #7
 800e3e0:	d00f      	beq.n	800e402 <prvHelpCommand+0x4e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e3e2:	4a2e      	ldr	r2, [pc, #184]	; (800e49c <prvHelpCommand+0xe8>)
 800e3e4:	7813      	ldrb	r3, [r2, #0]
 800e3e6:	1c5c      	adds	r4, r3, #1
 800e3e8:	b2e4      	uxtb	r4, r4
 800e3ea:	7014      	strb	r4, [r2, #0]
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	4a2c      	ldr	r2, [pc, #176]	; (800e4a0 <prvHelpCommand+0xec>)
 800e3f0:	5899      	ldr	r1, [r3, r2]
 800e3f2:	0032      	movs	r2, r6
 800e3f4:	0028      	movs	r0, r5
 800e3f6:	f005 ffa8 	bl	801434a <strncpy>
		if( str == NumOfParamsHelpStrings )
 800e3fa:	2c07      	cmp	r4, #7
 800e3fc:	d005      	beq.n	800e40a <prvHelpCommand+0x56>
			xReturn = pdTRUE;
 800e3fe:	2701      	movs	r7, #1
 800e400:	e00a      	b.n	800e418 <prvHelpCommand+0x64>
			str = 0;
 800e402:	4b26      	ldr	r3, [pc, #152]	; (800e49c <prvHelpCommand+0xe8>)
 800e404:	2200      	movs	r2, #0
 800e406:	701a      	strb	r2, [r3, #0]
 800e408:	e7eb      	b.n	800e3e2 <prvHelpCommand+0x2e>
			xReturn = pdFALSE; str = 0;
 800e40a:	4b24      	ldr	r3, [pc, #144]	; (800e49c <prvHelpCommand+0xe8>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	701a      	strb	r2, [r3, #0]
 800e410:	2700      	movs	r7, #0
 800e412:	e001      	b.n	800e418 <prvHelpCommand+0x64>
	else if (pcParameterString1 == NULL)
 800e414:	2c00      	cmp	r4, #0
 800e416:	d002      	beq.n	800e41e <prvHelpCommand+0x6a>
}
 800e418:	0038      	movs	r0, r7
 800e41a:	b003      	add	sp, #12
 800e41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800e41e:	4b21      	ldr	r3, [pc, #132]	; (800e4a4 <prvHelpCommand+0xf0>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d025      	beq.n	800e472 <prvHelpCommand+0xbe>
		if (counter > numOfBosCommands) {
 800e426:	4b20      	ldr	r3, [pc, #128]	; (800e4a8 <prvHelpCommand+0xf4>)
 800e428:	781a      	ldrb	r2, [r3, #0]
 800e42a:	4b20      	ldr	r3, [pc, #128]	; (800e4ac <prvHelpCommand+0xf8>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d926      	bls.n	800e480 <prvHelpCommand+0xcc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e432:	4b1c      	ldr	r3, [pc, #112]	; (800e4a4 <prvHelpCommand+0xf0>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	6859      	ldr	r1, [r3, #4]
 800e43a:	0032      	movs	r2, r6
 800e43c:	3a08      	subs	r2, #8
 800e43e:	0028      	movs	r0, r5
 800e440:	3008      	adds	r0, #8
 800e442:	f005 ff82 	bl	801434a <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e446:	1c68      	adds	r0, r5, #1
 800e448:	4919      	ldr	r1, [pc, #100]	; (800e4b0 <prvHelpCommand+0xfc>)
 800e44a:	f005 ff65 	bl	8014318 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e44e:	2328      	movs	r3, #40	; 0x28
 800e450:	702b      	strb	r3, [r5, #0]
 800e452:	3301      	adds	r3, #1
 800e454:	71ab      	strb	r3, [r5, #6]
 800e456:	3b09      	subs	r3, #9
 800e458:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800e45a:	4b12      	ldr	r3, [pc, #72]	; (800e4a4 <prvHelpCommand+0xf0>)
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	6852      	ldr	r2, [r2, #4]
 800e460:	601a      	str	r2, [r3, #0]
		counter++;
 800e462:	4911      	ldr	r1, [pc, #68]	; (800e4a8 <prvHelpCommand+0xf4>)
 800e464:	780b      	ldrb	r3, [r1, #0]
 800e466:	3301      	adds	r3, #1
 800e468:	700b      	strb	r3, [r1, #0]
		if( pxCommand == NULL )
 800e46a:	2a00      	cmp	r2, #0
 800e46c:	d011      	beq.n	800e492 <prvHelpCommand+0xde>
			xReturn = pdTRUE;
 800e46e:	2701      	movs	r7, #1
	return xReturn;
 800e470:	e7d2      	b.n	800e418 <prvHelpCommand+0x64>
			pxCommand = &xRegisteredCommands;
 800e472:	4b0c      	ldr	r3, [pc, #48]	; (800e4a4 <prvHelpCommand+0xf0>)
 800e474:	4a0f      	ldr	r2, [pc, #60]	; (800e4b4 <prvHelpCommand+0x100>)
 800e476:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e478:	4b0b      	ldr	r3, [pc, #44]	; (800e4a8 <prvHelpCommand+0xf4>)
 800e47a:	2201      	movs	r2, #1
 800e47c:	701a      	strb	r2, [r3, #0]
 800e47e:	e7d2      	b.n	800e426 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e480:	4b08      	ldr	r3, [pc, #32]	; (800e4a4 <prvHelpCommand+0xf0>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	6859      	ldr	r1, [r3, #4]
 800e488:	0032      	movs	r2, r6
 800e48a:	0028      	movs	r0, r5
 800e48c:	f005 ff5d 	bl	801434a <strncpy>
 800e490:	e7e3      	b.n	800e45a <prvHelpCommand+0xa6>
			xReturn = pdFALSE;
 800e492:	2700      	movs	r7, #0
 800e494:	e7c0      	b.n	800e418 <prvHelpCommand+0x64>
 800e496:	46c0      	nop			; (mov r8, r8)
 800e498:	08017de8 	.word	0x08017de8
 800e49c:	20001508 	.word	0x20001508
 800e4a0:	20000054 	.word	0x20000054
 800e4a4:	20001504 	.word	0x20001504
 800e4a8:	200014fc 	.word	0x200014fc
 800e4ac:	200060cc 	.word	0x200060cc
 800e4b0:	08017506 	.word	0x08017506
 800e4b4:	200000d0 	.word	0x200000d0

0800e4b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4b8:	0003      	movs	r3, r0
 800e4ba:	3308      	adds	r3, #8
 800e4bc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e4be:	2201      	movs	r2, #1
 800e4c0:	4252      	negs	r2, r2
 800e4c2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4c4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4c6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e4cc:	4770      	bx	lr

0800e4ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e4d2:	4770      	bx	lr

0800e4d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e4d4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e4d6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e4d8:	689a      	ldr	r2, [r3, #8]
 800e4da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e4dc:	689a      	ldr	r2, [r3, #8]
 800e4de:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e4e0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e4e2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e4e4:	6803      	ldr	r3, [r0, #0]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	6003      	str	r3, [r0, #0]
}
 800e4ea:	4770      	bx	lr

0800e4ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4ec:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e4ee:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e4f0:	1c63      	adds	r3, r4, #1
 800e4f2:	d002      	beq.n	800e4fa <vListInsert+0xe>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4f4:	0002      	movs	r2, r0
 800e4f6:	3208      	adds	r2, #8
 800e4f8:	e002      	b.n	800e500 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
 800e4fa:	6902      	ldr	r2, [r0, #16]
 800e4fc:	e004      	b.n	800e508 <vListInsert+0x1c>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4fe:	001a      	movs	r2, r3
 800e500:	6853      	ldr	r3, [r2, #4]
 800e502:	681d      	ldr	r5, [r3, #0]
 800e504:	42a5      	cmp	r5, r4
 800e506:	d9fa      	bls.n	800e4fe <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e508:	6853      	ldr	r3, [r2, #4]
 800e50a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e50c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e50e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e510:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e512:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e514:	6803      	ldr	r3, [r0, #0]
 800e516:	3301      	adds	r3, #1
 800e518:	6003      	str	r3, [r0, #0]
}
 800e51a:	bd30      	pop	{r4, r5, pc}

0800e51c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e51c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e51e:	6842      	ldr	r2, [r0, #4]
 800e520:	6881      	ldr	r1, [r0, #8]
 800e522:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e524:	6882      	ldr	r2, [r0, #8]
 800e526:	6841      	ldr	r1, [r0, #4]
 800e528:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e52a:	685a      	ldr	r2, [r3, #4]
 800e52c:	4282      	cmp	r2, r0
 800e52e:	d005      	beq.n	800e53c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e530:	2200      	movs	r2, #0
 800e532:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	1e50      	subs	r0, r2, #1
 800e538:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e53a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e53c:	6882      	ldr	r2, [r0, #8]
 800e53e:	605a      	str	r2, [r3, #4]
 800e540:	e7f6      	b.n	800e530 <uxListRemove+0x14>

0800e542 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e542:	b510      	push	{r4, lr}
 800e544:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e546:	f001 fcd7 	bl	800fef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e54a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e54c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e54e:	429a      	cmp	r2, r3
 800e550:	d004      	beq.n	800e55c <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800e552:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800e554:	f001 fcdc 	bl	800ff10 <vPortExitCritical>

	return xReturn;
}
 800e558:	0020      	movs	r0, r4
 800e55a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800e55c:	2401      	movs	r4, #1
 800e55e:	e7f9      	b.n	800e554 <prvIsQueueFull+0x12>

0800e560 <prvIsQueueEmpty>:
{
 800e560:	b510      	push	{r4, lr}
 800e562:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e564:	f001 fcc8 	bl	800fef8 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d004      	beq.n	800e578 <prvIsQueueEmpty+0x18>
			xReturn = pdFALSE;
 800e56e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e570:	f001 fcce 	bl	800ff10 <vPortExitCritical>
}
 800e574:	0020      	movs	r0, r4
 800e576:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800e578:	2401      	movs	r4, #1
 800e57a:	e7f9      	b.n	800e570 <prvIsQueueEmpty+0x10>

0800e57c <prvCopyDataToQueue>:
{
 800e57c:	b570      	push	{r4, r5, r6, lr}
 800e57e:	0004      	movs	r4, r0
 800e580:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e582:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e584:	2a00      	cmp	r2, #0
 800e586:	d10d      	bne.n	800e5a4 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e588:	6803      	ldr	r3, [r0, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d004      	beq.n	800e598 <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 800e58e:	2000      	movs	r0, #0
	++( pxQueue->uxMessagesWaiting );
 800e590:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e592:	3301      	adds	r3, #1
 800e594:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800e596:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e598:	6840      	ldr	r0, [r0, #4]
 800e59a:	f001 f8b5 	bl	800f708 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	6063      	str	r3, [r4, #4]
 800e5a2:	e7f5      	b.n	800e590 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e5a4:	2d00      	cmp	r5, #0
 800e5a6:	d10e      	bne.n	800e5c6 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e5a8:	6880      	ldr	r0, [r0, #8]
 800e5aa:	f004 ff12 	bl	80133d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e5ae:	68a3      	ldr	r3, [r4, #8]
 800e5b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e5b2:	4694      	mov	ip, r2
 800e5b4:	4463      	add	r3, ip
 800e5b6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e5b8:	6862      	ldr	r2, [r4, #4]
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d31e      	bcc.n	800e5fc <prvCopyDataToQueue+0x80>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e5c2:	2000      	movs	r0, #0
 800e5c4:	e7e4      	b.n	800e590 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5c6:	68c0      	ldr	r0, [r0, #12]
 800e5c8:	f004 ff03 	bl	80133d2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e5cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e5ce:	425a      	negs	r2, r3
 800e5d0:	68e3      	ldr	r3, [r4, #12]
 800e5d2:	189b      	adds	r3, r3, r2
 800e5d4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e5d6:	6821      	ldr	r1, [r4, #0]
 800e5d8:	428b      	cmp	r3, r1
 800e5da:	d203      	bcs.n	800e5e4 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e5dc:	6863      	ldr	r3, [r4, #4]
 800e5de:	469c      	mov	ip, r3
 800e5e0:	4462      	add	r2, ip
 800e5e2:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e5e4:	2d02      	cmp	r5, #2
 800e5e6:	d001      	beq.n	800e5ec <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	e7d1      	b.n	800e590 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d006      	beq.n	800e600 <prvCopyDataToQueue+0x84>
				--( pxQueue->uxMessagesWaiting );
 800e5f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e5f4:	3b01      	subs	r3, #1
 800e5f6:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	e7c9      	b.n	800e590 <prvCopyDataToQueue+0x14>
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	e7c7      	b.n	800e590 <prvCopyDataToQueue+0x14>
 800e600:	2000      	movs	r0, #0
 800e602:	e7c5      	b.n	800e590 <prvCopyDataToQueue+0x14>

0800e604 <prvCopyDataFromQueue>:
{
 800e604:	b510      	push	{r4, lr}
 800e606:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e608:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e60a:	2a00      	cmp	r2, #0
 800e60c:	d00b      	beq.n	800e626 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e60e:	68c3      	ldr	r3, [r0, #12]
 800e610:	189b      	adds	r3, r3, r2
 800e612:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e614:	6841      	ldr	r1, [r0, #4]
 800e616:	428b      	cmp	r3, r1
 800e618:	d301      	bcc.n	800e61e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e61a:	6803      	ldr	r3, [r0, #0]
 800e61c:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e61e:	68c1      	ldr	r1, [r0, #12]
 800e620:	0020      	movs	r0, r4
 800e622:	f004 fed6 	bl	80133d2 <memcpy>
}
 800e626:	bd10      	pop	{r4, pc}

0800e628 <prvUnlockQueue>:
{
 800e628:	b510      	push	{r4, lr}
 800e62a:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e62c:	f001 fc64 	bl	800fef8 <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e630:	e004      	b.n	800e63c <prvUnlockQueue+0x14>
						vTaskMissedYield();
 800e632:	f001 f813 	bl	800f65c <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800e636:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e638:	3b01      	subs	r3, #1
 800e63a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e63c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e63e:	2b00      	cmp	r3, #0
 800e640:	dd09      	ble.n	800e656 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e644:	2b00      	cmp	r3, #0
 800e646:	d006      	beq.n	800e656 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e648:	0020      	movs	r0, r4
 800e64a:	3024      	adds	r0, #36	; 0x24
 800e64c:	f000 ff80 	bl	800f550 <xTaskRemoveFromEventList>
 800e650:	2800      	cmp	r0, #0
 800e652:	d0f0      	beq.n	800e636 <prvUnlockQueue+0xe>
 800e654:	e7ed      	b.n	800e632 <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 800e656:	2301      	movs	r3, #1
 800e658:	425b      	negs	r3, r3
 800e65a:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 800e65c:	f001 fc58 	bl	800ff10 <vPortExitCritical>
	taskENTER_CRITICAL();
 800e660:	f001 fc4a 	bl	800fef8 <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e664:	e004      	b.n	800e670 <prvUnlockQueue+0x48>
					vTaskMissedYield();
 800e666:	f000 fff9 	bl	800f65c <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e66a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e66c:	3b01      	subs	r3, #1
 800e66e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e670:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e672:	2b00      	cmp	r3, #0
 800e674:	dd09      	ble.n	800e68a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e676:	6923      	ldr	r3, [r4, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d006      	beq.n	800e68a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e67c:	0020      	movs	r0, r4
 800e67e:	3010      	adds	r0, #16
 800e680:	f000 ff66 	bl	800f550 <xTaskRemoveFromEventList>
 800e684:	2800      	cmp	r0, #0
 800e686:	d0f0      	beq.n	800e66a <prvUnlockQueue+0x42>
 800e688:	e7ed      	b.n	800e666 <prvUnlockQueue+0x3e>
		pxQueue->xRxLock = queueUNLOCKED;
 800e68a:	2301      	movs	r3, #1
 800e68c:	425b      	negs	r3, r3
 800e68e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800e690:	f001 fc3e 	bl	800ff10 <vPortExitCritical>
}
 800e694:	bd10      	pop	{r4, pc}

0800e696 <xQueueGenericReset>:
{
 800e696:	b570      	push	{r4, r5, r6, lr}
 800e698:	0004      	movs	r4, r0
 800e69a:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800e69c:	2800      	cmp	r0, #0
 800e69e:	d101      	bne.n	800e6a4 <xQueueGenericReset+0xe>
 800e6a0:	b672      	cpsid	i
 800e6a2:	e7fe      	b.n	800e6a2 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800e6a4:	f001 fc28 	bl	800fef8 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e6a8:	6822      	ldr	r2, [r4, #0]
 800e6aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e6ac:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e6ae:	0001      	movs	r1, r0
 800e6b0:	4359      	muls	r1, r3
 800e6b2:	1851      	adds	r1, r2, r1
 800e6b4:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e6ba:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	4343      	muls	r3, r0
 800e6c0:	18d3      	adds	r3, r2, r3
 800e6c2:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	425b      	negs	r3, r3
 800e6c8:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e6ca:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e6cc:	2d00      	cmp	r5, #0
 800e6ce:	d10f      	bne.n	800e6f0 <xQueueGenericReset+0x5a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6d0:	6923      	ldr	r3, [r4, #16]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d103      	bne.n	800e6de <xQueueGenericReset+0x48>
	taskEXIT_CRITICAL();
 800e6d6:	f001 fc1b 	bl	800ff10 <vPortExitCritical>
}
 800e6da:	2001      	movs	r0, #1
 800e6dc:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e6de:	0020      	movs	r0, r4
 800e6e0:	3010      	adds	r0, #16
 800e6e2:	f000 ff35 	bl	800f550 <xTaskRemoveFromEventList>
 800e6e6:	2801      	cmp	r0, #1
 800e6e8:	d1f5      	bne.n	800e6d6 <xQueueGenericReset+0x40>
					queueYIELD_IF_USING_PREEMPTION();
 800e6ea:	f001 fbf9 	bl	800fee0 <vPortYield>
 800e6ee:	e7f2      	b.n	800e6d6 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e6f0:	0020      	movs	r0, r4
 800e6f2:	3010      	adds	r0, #16
 800e6f4:	f7ff fee0 	bl	800e4b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e6f8:	0020      	movs	r0, r4
 800e6fa:	3024      	adds	r0, #36	; 0x24
 800e6fc:	f7ff fedc 	bl	800e4b8 <vListInitialise>
 800e700:	e7e9      	b.n	800e6d6 <xQueueGenericReset+0x40>

0800e702 <xQueueGenericCreate>:
{
 800e702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e704:	0006      	movs	r6, r0
 800e706:	000d      	movs	r5, r1
 800e708:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d101      	bne.n	800e712 <xQueueGenericCreate+0x10>
 800e70e:	b672      	cpsid	i
 800e710:	e7fe      	b.n	800e710 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e712:	2900      	cmp	r1, #0
 800e714:	d003      	beq.n	800e71e <xQueueGenericCreate+0x1c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e716:	0008      	movs	r0, r1
 800e718:	4370      	muls	r0, r6
 800e71a:	3001      	adds	r0, #1
 800e71c:	e000      	b.n	800e720 <xQueueGenericCreate+0x1e>
		xQueueSizeInBytes = ( size_t ) 0;
 800e71e:	2000      	movs	r0, #0
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e720:	3054      	adds	r0, #84	; 0x54
 800e722:	f001 fc9d 	bl	8010060 <pvPortMalloc>
 800e726:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e728:	d005      	beq.n	800e736 <xQueueGenericCreate+0x34>
		if( uxItemSize == ( UBaseType_t ) 0 )
 800e72a:	2d00      	cmp	r5, #0
 800e72c:	d005      	beq.n	800e73a <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e72e:	0003      	movs	r3, r0
 800e730:	3354      	adds	r3, #84	; 0x54
 800e732:	6003      	str	r3, [r0, #0]
 800e734:	e002      	b.n	800e73c <xQueueGenericCreate+0x3a>
	configASSERT( xReturn );
 800e736:	b672      	cpsid	i
 800e738:	e7fe      	b.n	800e738 <xQueueGenericCreate+0x36>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e73a:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e73c:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e73e:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e740:	2101      	movs	r1, #1
 800e742:	0020      	movs	r0, r4
 800e744:	f7ff ffa7 	bl	800e696 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e748:	2350      	movs	r3, #80	; 0x50
 800e74a:	54e7      	strb	r7, [r4, r3]
}
 800e74c:	0020      	movs	r0, r4
 800e74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e750 <xQueueCreateCountingSemaphore>:
	{
 800e750:	b510      	push	{r4, lr}
 800e752:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e754:	2800      	cmp	r0, #0
 800e756:	d101      	bne.n	800e75c <xQueueCreateCountingSemaphore+0xc>
 800e758:	b672      	cpsid	i
 800e75a:	e7fe      	b.n	800e75a <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e75c:	4288      	cmp	r0, r1
 800e75e:	d201      	bcs.n	800e764 <xQueueCreateCountingSemaphore+0x14>
 800e760:	b672      	cpsid	i
 800e762:	e7fe      	b.n	800e762 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e764:	2202      	movs	r2, #2
 800e766:	2100      	movs	r1, #0
 800e768:	f7ff ffcb 	bl	800e702 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d000      	beq.n	800e772 <xQueueCreateCountingSemaphore+0x22>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e770:	6384      	str	r4, [r0, #56]	; 0x38
		configASSERT( xHandle );
 800e772:	2800      	cmp	r0, #0
 800e774:	d101      	bne.n	800e77a <xQueueCreateCountingSemaphore+0x2a>
 800e776:	b672      	cpsid	i
 800e778:	e7fe      	b.n	800e778 <xQueueCreateCountingSemaphore+0x28>
	}
 800e77a:	bd10      	pop	{r4, pc}

0800e77c <xQueueGenericSend>:
{
 800e77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e77e:	b085      	sub	sp, #20
 800e780:	0004      	movs	r4, r0
 800e782:	000f      	movs	r7, r1
 800e784:	9201      	str	r2, [sp, #4]
 800e786:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800e788:	2800      	cmp	r0, #0
 800e78a:	d006      	beq.n	800e79a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e78c:	2900      	cmp	r1, #0
 800e78e:	d106      	bne.n	800e79e <xQueueGenericSend+0x22>
 800e790:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e792:	2b00      	cmp	r3, #0
 800e794:	d003      	beq.n	800e79e <xQueueGenericSend+0x22>
 800e796:	b672      	cpsid	i
 800e798:	e7fe      	b.n	800e798 <xQueueGenericSend+0x1c>
	configASSERT( pxQueue );
 800e79a:	b672      	cpsid	i
 800e79c:	e7fe      	b.n	800e79c <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e79e:	2d02      	cmp	r5, #2
 800e7a0:	d104      	bne.n	800e7ac <xQueueGenericSend+0x30>
 800e7a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d001      	beq.n	800e7ac <xQueueGenericSend+0x30>
 800e7a8:	b672      	cpsid	i
 800e7aa:	e7fe      	b.n	800e7aa <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7ac:	f000 ff5c 	bl	800f668 <xTaskGetSchedulerState>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	d104      	bne.n	800e7be <xQueueGenericSend+0x42>
 800e7b4:	9b01      	ldr	r3, [sp, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d003      	beq.n	800e7c2 <xQueueGenericSend+0x46>
 800e7ba:	b672      	cpsid	i
 800e7bc:	e7fe      	b.n	800e7bc <xQueueGenericSend+0x40>
 800e7be:	2600      	movs	r6, #0
 800e7c0:	e02f      	b.n	800e822 <xQueueGenericSend+0xa6>
 800e7c2:	2600      	movs	r6, #0
 800e7c4:	e02d      	b.n	800e822 <xQueueGenericSend+0xa6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7c6:	002a      	movs	r2, r5
 800e7c8:	0039      	movs	r1, r7
 800e7ca:	0020      	movs	r0, r4
 800e7cc:	f7ff fed6 	bl	800e57c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d104      	bne.n	800e7e0 <xQueueGenericSend+0x64>
					else if( xYieldRequired != pdFALSE )
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d00a      	beq.n	800e7f0 <xQueueGenericSend+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 800e7da:	f001 fb81 	bl	800fee0 <vPortYield>
 800e7de:	e007      	b.n	800e7f0 <xQueueGenericSend+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e7e0:	0020      	movs	r0, r4
 800e7e2:	3024      	adds	r0, #36	; 0x24
 800e7e4:	f000 feb4 	bl	800f550 <xTaskRemoveFromEventList>
 800e7e8:	2801      	cmp	r0, #1
 800e7ea:	d101      	bne.n	800e7f0 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
 800e7ec:	f001 fb78 	bl	800fee0 <vPortYield>
				taskEXIT_CRITICAL();
 800e7f0:	f001 fb8e 	bl	800ff10 <vPortExitCritical>
				return pdPASS;
 800e7f4:	2001      	movs	r0, #1
}
 800e7f6:	b005      	add	sp, #20
 800e7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800e7fa:	f001 fb89 	bl	800ff10 <vPortExitCritical>
					return errQUEUE_FULL;
 800e7fe:	2000      	movs	r0, #0
 800e800:	e7f9      	b.n	800e7f6 <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 800e802:	a802      	add	r0, sp, #8
 800e804:	f000 fee6 	bl	800f5d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e808:	3601      	adds	r6, #1
 800e80a:	e017      	b.n	800e83c <xQueueGenericSend+0xc0>
		prvLockQueue( pxQueue );
 800e80c:	2300      	movs	r3, #0
 800e80e:	6463      	str	r3, [r4, #68]	; 0x44
 800e810:	e01d      	b.n	800e84e <xQueueGenericSend+0xd2>
 800e812:	2300      	movs	r3, #0
 800e814:	64a3      	str	r3, [r4, #72]	; 0x48
 800e816:	e01d      	b.n	800e854 <xQueueGenericSend+0xd8>
				prvUnlockQueue( pxQueue );
 800e818:	0020      	movs	r0, r4
 800e81a:	f7ff ff05 	bl	800e628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e81e:	f000 fcc3 	bl	800f1a8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e822:	f001 fb69 	bl	800fef8 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e826:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e828:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d3cb      	bcc.n	800e7c6 <xQueueGenericSend+0x4a>
 800e82e:	2d02      	cmp	r5, #2
 800e830:	d0c9      	beq.n	800e7c6 <xQueueGenericSend+0x4a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e832:	9b01      	ldr	r3, [sp, #4]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d0e0      	beq.n	800e7fa <xQueueGenericSend+0x7e>
				else if( xEntryTimeSet == pdFALSE )
 800e838:	2e00      	cmp	r6, #0
 800e83a:	d0e2      	beq.n	800e802 <xQueueGenericSend+0x86>
		taskEXIT_CRITICAL();
 800e83c:	f001 fb68 	bl	800ff10 <vPortExitCritical>
		vTaskSuspendAll();
 800e840:	f000 fc14 	bl	800f06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e844:	f001 fb58 	bl	800fef8 <vPortEnterCritical>
 800e848:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e84a:	3301      	adds	r3, #1
 800e84c:	d0de      	beq.n	800e80c <xQueueGenericSend+0x90>
 800e84e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e850:	3301      	adds	r3, #1
 800e852:	d0de      	beq.n	800e812 <xQueueGenericSend+0x96>
 800e854:	f001 fb5c 	bl	800ff10 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e858:	a901      	add	r1, sp, #4
 800e85a:	a802      	add	r0, sp, #8
 800e85c:	f000 feca 	bl	800f5f4 <xTaskCheckForTimeOut>
 800e860:	2800      	cmp	r0, #0
 800e862:	d113      	bne.n	800e88c <xQueueGenericSend+0x110>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e864:	0020      	movs	r0, r4
 800e866:	f7ff fe6c 	bl	800e542 <prvIsQueueFull>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d0d4      	beq.n	800e818 <xQueueGenericSend+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e86e:	0020      	movs	r0, r4
 800e870:	3010      	adds	r0, #16
 800e872:	9901      	ldr	r1, [sp, #4]
 800e874:	f000 fe2e 	bl	800f4d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e878:	0020      	movs	r0, r4
 800e87a:	f7ff fed5 	bl	800e628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e87e:	f000 fc93 	bl	800f1a8 <xTaskResumeAll>
 800e882:	2800      	cmp	r0, #0
 800e884:	d1cd      	bne.n	800e822 <xQueueGenericSend+0xa6>
					portYIELD_WITHIN_API();
 800e886:	f001 fb2b 	bl	800fee0 <vPortYield>
 800e88a:	e7ca      	b.n	800e822 <xQueueGenericSend+0xa6>
			prvUnlockQueue( pxQueue );
 800e88c:	0020      	movs	r0, r4
 800e88e:	f7ff fecb 	bl	800e628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e892:	f000 fc89 	bl	800f1a8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e896:	2000      	movs	r0, #0
 800e898:	e7ad      	b.n	800e7f6 <xQueueGenericSend+0x7a>

0800e89a <xQueueGenericSendFromISR>:
{
 800e89a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e89c:	b083      	sub	sp, #12
 800e89e:	0004      	movs	r4, r0
 800e8a0:	000f      	movs	r7, r1
 800e8a2:	0015      	movs	r5, r2
 800e8a4:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d006      	beq.n	800e8b8 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8aa:	2900      	cmp	r1, #0
 800e8ac:	d106      	bne.n	800e8bc <xQueueGenericSendFromISR+0x22>
 800e8ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d003      	beq.n	800e8bc <xQueueGenericSendFromISR+0x22>
 800e8b4:	b672      	cpsid	i
 800e8b6:	e7fe      	b.n	800e8b6 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800e8b8:	b672      	cpsid	i
 800e8ba:	e7fe      	b.n	800e8ba <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e8bc:	2e02      	cmp	r6, #2
 800e8be:	d104      	bne.n	800e8ca <xQueueGenericSendFromISR+0x30>
 800e8c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d001      	beq.n	800e8ca <xQueueGenericSendFromISR+0x30>
 800e8c6:	b672      	cpsid	i
 800e8c8:	e7fe      	b.n	800e8c8 <xQueueGenericSendFromISR+0x2e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8ca:	f001 fb31 	bl	800ff30 <ulSetInterruptMaskFromISR>
 800e8ce:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d303      	bcc.n	800e8e0 <xQueueGenericSendFromISR+0x46>
 800e8d8:	2e02      	cmp	r6, #2
 800e8da:	d001      	beq.n	800e8e0 <xQueueGenericSendFromISR+0x46>
			xReturn = errQUEUE_FULL;
 800e8dc:	2400      	movs	r4, #0
 800e8de:	e00b      	b.n	800e8f8 <xQueueGenericSendFromISR+0x5e>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8e0:	0032      	movs	r2, r6
 800e8e2:	0039      	movs	r1, r7
 800e8e4:	0020      	movs	r0, r4
 800e8e6:	f7ff fe49 	bl	800e57c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e8ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	d009      	beq.n	800e904 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
 800e8f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e8f6:	2401      	movs	r4, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e8f8:	9801      	ldr	r0, [sp, #4]
 800e8fa:	f001 fb1e 	bl	800ff3a <vClearInterruptMaskFromISR>
}
 800e8fe:	0020      	movs	r0, r4
 800e900:	b003      	add	sp, #12
 800e902:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e906:	2b00      	cmp	r3, #0
 800e908:	d00a      	beq.n	800e920 <xQueueGenericSendFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e90a:	0020      	movs	r0, r4
 800e90c:	3024      	adds	r0, #36	; 0x24
 800e90e:	f000 fe1f 	bl	800f550 <xTaskRemoveFromEventList>
 800e912:	2800      	cmp	r0, #0
 800e914:	d006      	beq.n	800e924 <xQueueGenericSendFromISR+0x8a>
							if( pxHigherPriorityTaskWoken != NULL )
 800e916:	2d00      	cmp	r5, #0
 800e918:	d006      	beq.n	800e928 <xQueueGenericSendFromISR+0x8e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e91a:	2401      	movs	r4, #1
 800e91c:	602c      	str	r4, [r5, #0]
 800e91e:	e7eb      	b.n	800e8f8 <xQueueGenericSendFromISR+0x5e>
			xReturn = pdPASS;
 800e920:	2401      	movs	r4, #1
 800e922:	e7e9      	b.n	800e8f8 <xQueueGenericSendFromISR+0x5e>
 800e924:	2401      	movs	r4, #1
 800e926:	e7e7      	b.n	800e8f8 <xQueueGenericSendFromISR+0x5e>
 800e928:	2401      	movs	r4, #1
 800e92a:	e7e5      	b.n	800e8f8 <xQueueGenericSendFromISR+0x5e>

0800e92c <xQueueGiveFromISR>:
{
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	0004      	movs	r4, r0
 800e930:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800e932:	2800      	cmp	r0, #0
 800e934:	d004      	beq.n	800e940 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e936:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d003      	beq.n	800e944 <xQueueGiveFromISR+0x18>
 800e93c:	b672      	cpsid	i
 800e93e:	e7fe      	b.n	800e93e <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800e940:	b672      	cpsid	i
 800e942:	e7fe      	b.n	800e942 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e944:	6803      	ldr	r3, [r0, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d01e      	beq.n	800e988 <xQueueGiveFromISR+0x5c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e94a:	f001 faf1 	bl	800ff30 <ulSetInterruptMaskFromISR>
 800e94e:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e950:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e952:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e954:	4293      	cmp	r3, r2
 800e956:	d221      	bcs.n	800e99c <xQueueGiveFromISR+0x70>
			++( pxQueue->uxMessagesWaiting );
 800e958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e95a:	3301      	adds	r3, #1
 800e95c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e95e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e960:	3301      	adds	r3, #1
 800e962:	d116      	bne.n	800e992 <xQueueGiveFromISR+0x66>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e966:	2b00      	cmp	r3, #0
 800e968:	d01a      	beq.n	800e9a0 <xQueueGiveFromISR+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e96a:	0020      	movs	r0, r4
 800e96c:	3024      	adds	r0, #36	; 0x24
 800e96e:	f000 fdef 	bl	800f550 <xTaskRemoveFromEventList>
 800e972:	2800      	cmp	r0, #0
 800e974:	d016      	beq.n	800e9a4 <xQueueGiveFromISR+0x78>
							if( pxHigherPriorityTaskWoken != NULL )
 800e976:	2e00      	cmp	r6, #0
 800e978:	d016      	beq.n	800e9a8 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e97a:	2401      	movs	r4, #1
 800e97c:	6034      	str	r4, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e97e:	0028      	movs	r0, r5
 800e980:	f001 fadb 	bl	800ff3a <vClearInterruptMaskFromISR>
}
 800e984:	0020      	movs	r0, r4
 800e986:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e988:	6843      	ldr	r3, [r0, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d0dd      	beq.n	800e94a <xQueueGiveFromISR+0x1e>
 800e98e:	b672      	cpsid	i
 800e990:	e7fe      	b.n	800e990 <xQueueGiveFromISR+0x64>
				++( pxQueue->xTxLock );
 800e992:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e994:	3301      	adds	r3, #1
 800e996:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e998:	2401      	movs	r4, #1
 800e99a:	e7f0      	b.n	800e97e <xQueueGiveFromISR+0x52>
			xReturn = errQUEUE_FULL;
 800e99c:	2400      	movs	r4, #0
 800e99e:	e7ee      	b.n	800e97e <xQueueGiveFromISR+0x52>
			xReturn = pdPASS;
 800e9a0:	2401      	movs	r4, #1
 800e9a2:	e7ec      	b.n	800e97e <xQueueGiveFromISR+0x52>
 800e9a4:	2401      	movs	r4, #1
 800e9a6:	e7ea      	b.n	800e97e <xQueueGiveFromISR+0x52>
 800e9a8:	2401      	movs	r4, #1
 800e9aa:	e7e8      	b.n	800e97e <xQueueGiveFromISR+0x52>

0800e9ac <xQueueGenericReceive>:
{
 800e9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	0004      	movs	r4, r0
 800e9b2:	000e      	movs	r6, r1
 800e9b4:	9201      	str	r2, [sp, #4]
 800e9b6:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d006      	beq.n	800e9ca <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9bc:	2900      	cmp	r1, #0
 800e9be:	d106      	bne.n	800e9ce <xQueueGenericReceive+0x22>
 800e9c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d003      	beq.n	800e9ce <xQueueGenericReceive+0x22>
 800e9c6:	b672      	cpsid	i
 800e9c8:	e7fe      	b.n	800e9c8 <xQueueGenericReceive+0x1c>
	configASSERT( pxQueue );
 800e9ca:	b672      	cpsid	i
 800e9cc:	e7fe      	b.n	800e9cc <xQueueGenericReceive+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9ce:	f000 fe4b 	bl	800f668 <xTaskGetSchedulerState>
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d104      	bne.n	800e9e0 <xQueueGenericReceive+0x34>
 800e9d6:	9b01      	ldr	r3, [sp, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d003      	beq.n	800e9e4 <xQueueGenericReceive+0x38>
 800e9dc:	b672      	cpsid	i
 800e9de:	e7fe      	b.n	800e9de <xQueueGenericReceive+0x32>
 800e9e0:	2500      	movs	r5, #0
 800e9e2:	e04a      	b.n	800ea7a <xQueueGenericReceive+0xce>
 800e9e4:	2500      	movs	r5, #0
 800e9e6:	e048      	b.n	800ea7a <xQueueGenericReceive+0xce>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e9e8:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e9ea:	0031      	movs	r1, r6
 800e9ec:	0020      	movs	r0, r4
 800e9ee:	f7ff fe09 	bl	800e604 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e9f2:	2f00      	cmp	r7, #0
 800e9f4:	d118      	bne.n	800ea28 <xQueueGenericReceive+0x7c>
					--( pxQueue->uxMessagesWaiting );
 800e9f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9fc:	6823      	ldr	r3, [r4, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d102      	bne.n	800ea08 <xQueueGenericReceive+0x5c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ea02:	f000 ff6b 	bl	800f8dc <pvTaskIncrementMutexHeldCount>
 800ea06:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea08:	6923      	ldr	r3, [r4, #16]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d007      	beq.n	800ea1e <xQueueGenericReceive+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ea0e:	0020      	movs	r0, r4
 800ea10:	3010      	adds	r0, #16
 800ea12:	f000 fd9d 	bl	800f550 <xTaskRemoveFromEventList>
 800ea16:	2801      	cmp	r0, #1
 800ea18:	d101      	bne.n	800ea1e <xQueueGenericReceive+0x72>
							queueYIELD_IF_USING_PREEMPTION();
 800ea1a:	f001 fa61 	bl	800fee0 <vPortYield>
				taskEXIT_CRITICAL();
 800ea1e:	f001 fa77 	bl	800ff10 <vPortExitCritical>
				return pdPASS;
 800ea22:	2001      	movs	r0, #1
}
 800ea24:	b005      	add	sp, #20
 800ea26:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800ea28:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d0f6      	beq.n	800ea1e <xQueueGenericReceive+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea30:	0020      	movs	r0, r4
 800ea32:	3024      	adds	r0, #36	; 0x24
 800ea34:	f000 fd8c 	bl	800f550 <xTaskRemoveFromEventList>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d0f0      	beq.n	800ea1e <xQueueGenericReceive+0x72>
							queueYIELD_IF_USING_PREEMPTION();
 800ea3c:	f001 fa50 	bl	800fee0 <vPortYield>
 800ea40:	e7ed      	b.n	800ea1e <xQueueGenericReceive+0x72>
					taskEXIT_CRITICAL();
 800ea42:	f001 fa65 	bl	800ff10 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ea46:	2000      	movs	r0, #0
 800ea48:	e7ec      	b.n	800ea24 <xQueueGenericReceive+0x78>
					vTaskSetTimeOutState( &xTimeOut );
 800ea4a:	a802      	add	r0, sp, #8
 800ea4c:	f000 fdc2 	bl	800f5d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea50:	3501      	adds	r5, #1
 800ea52:	e01c      	b.n	800ea8e <xQueueGenericReceive+0xe2>
		prvLockQueue( pxQueue );
 800ea54:	2300      	movs	r3, #0
 800ea56:	6463      	str	r3, [r4, #68]	; 0x44
 800ea58:	e022      	b.n	800eaa0 <xQueueGenericReceive+0xf4>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ea5e:	e022      	b.n	800eaa6 <xQueueGenericReceive+0xfa>
						taskENTER_CRITICAL();
 800ea60:	f001 fa4a 	bl	800fef8 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ea64:	6860      	ldr	r0, [r4, #4]
 800ea66:	f000 fe11 	bl	800f68c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800ea6a:	f001 fa51 	bl	800ff10 <vPortExitCritical>
 800ea6e:	e02a      	b.n	800eac6 <xQueueGenericReceive+0x11a>
				prvUnlockQueue( pxQueue );
 800ea70:	0020      	movs	r0, r4
 800ea72:	f7ff fdd9 	bl	800e628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea76:	f000 fb97 	bl	800f1a8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800ea7a:	f001 fa3d 	bl	800fef8 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d1b1      	bne.n	800e9e8 <xQueueGenericReceive+0x3c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea84:	9b01      	ldr	r3, [sp, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d0db      	beq.n	800ea42 <xQueueGenericReceive+0x96>
				else if( xEntryTimeSet == pdFALSE )
 800ea8a:	2d00      	cmp	r5, #0
 800ea8c:	d0dd      	beq.n	800ea4a <xQueueGenericReceive+0x9e>
		taskEXIT_CRITICAL();
 800ea8e:	f001 fa3f 	bl	800ff10 <vPortExitCritical>
		vTaskSuspendAll();
 800ea92:	f000 faeb 	bl	800f06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea96:	f001 fa2f 	bl	800fef8 <vPortEnterCritical>
 800ea9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	d0d9      	beq.n	800ea54 <xQueueGenericReceive+0xa8>
 800eaa0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	d0d9      	beq.n	800ea5a <xQueueGenericReceive+0xae>
 800eaa6:	f001 fa33 	bl	800ff10 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eaaa:	a901      	add	r1, sp, #4
 800eaac:	a802      	add	r0, sp, #8
 800eaae:	f000 fda1 	bl	800f5f4 <xTaskCheckForTimeOut>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d116      	bne.n	800eae4 <xQueueGenericReceive+0x138>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eab6:	0020      	movs	r0, r4
 800eab8:	f7ff fd52 	bl	800e560 <prvIsQueueEmpty>
 800eabc:	2800      	cmp	r0, #0
 800eabe:	d0d7      	beq.n	800ea70 <xQueueGenericReceive+0xc4>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d0cc      	beq.n	800ea60 <xQueueGenericReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eac6:	0020      	movs	r0, r4
 800eac8:	3024      	adds	r0, #36	; 0x24
 800eaca:	9901      	ldr	r1, [sp, #4]
 800eacc:	f000 fd02 	bl	800f4d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ead0:	0020      	movs	r0, r4
 800ead2:	f7ff fda9 	bl	800e628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ead6:	f000 fb67 	bl	800f1a8 <xTaskResumeAll>
 800eada:	2800      	cmp	r0, #0
 800eadc:	d1cd      	bne.n	800ea7a <xQueueGenericReceive+0xce>
					portYIELD_WITHIN_API();
 800eade:	f001 f9ff 	bl	800fee0 <vPortYield>
 800eae2:	e7ca      	b.n	800ea7a <xQueueGenericReceive+0xce>
			prvUnlockQueue( pxQueue );
 800eae4:	0020      	movs	r0, r4
 800eae6:	f7ff fd9f 	bl	800e628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eaea:	f000 fb5d 	bl	800f1a8 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800eaee:	2000      	movs	r0, #0
 800eaf0:	e798      	b.n	800ea24 <xQueueGenericReceive+0x78>

0800eaf2 <xQueueReceiveFromISR>:
{
 800eaf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf4:	0004      	movs	r4, r0
 800eaf6:	000f      	movs	r7, r1
 800eaf8:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800eafa:	2800      	cmp	r0, #0
 800eafc:	d006      	beq.n	800eb0c <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eafe:	2900      	cmp	r1, #0
 800eb00:	d106      	bne.n	800eb10 <xQueueReceiveFromISR+0x1e>
 800eb02:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d003      	beq.n	800eb10 <xQueueReceiveFromISR+0x1e>
 800eb08:	b672      	cpsid	i
 800eb0a:	e7fe      	b.n	800eb0a <xQueueReceiveFromISR+0x18>
	configASSERT( pxQueue );
 800eb0c:	b672      	cpsid	i
 800eb0e:	e7fe      	b.n	800eb0e <xQueueReceiveFromISR+0x1c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb10:	f001 fa0e 	bl	800ff30 <ulSetInterruptMaskFromISR>
 800eb14:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d01c      	beq.n	800eb56 <xQueueReceiveFromISR+0x64>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb1c:	0039      	movs	r1, r7
 800eb1e:	0020      	movs	r0, r4
 800eb20:	f7ff fd70 	bl	800e604 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800eb24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb26:	3b01      	subs	r3, #1
 800eb28:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800eb2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	d004      	beq.n	800eb3a <xQueueReceiveFromISR+0x48>
				++( pxQueue->xRxLock );
 800eb30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb32:	3301      	adds	r3, #1
 800eb34:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800eb36:	2401      	movs	r4, #1
 800eb38:	e00e      	b.n	800eb58 <xQueueReceiveFromISR+0x66>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb3a:	6923      	ldr	r3, [r4, #16]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d010      	beq.n	800eb62 <xQueueReceiveFromISR+0x70>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb40:	0020      	movs	r0, r4
 800eb42:	3010      	adds	r0, #16
 800eb44:	f000 fd04 	bl	800f550 <xTaskRemoveFromEventList>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d00c      	beq.n	800eb66 <xQueueReceiveFromISR+0x74>
						if( pxHigherPriorityTaskWoken != NULL )
 800eb4c:	2e00      	cmp	r6, #0
 800eb4e:	d00c      	beq.n	800eb6a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eb50:	2401      	movs	r4, #1
 800eb52:	6034      	str	r4, [r6, #0]
 800eb54:	e000      	b.n	800eb58 <xQueueReceiveFromISR+0x66>
			xReturn = pdFAIL;
 800eb56:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800eb58:	0028      	movs	r0, r5
 800eb5a:	f001 f9ee 	bl	800ff3a <vClearInterruptMaskFromISR>
}
 800eb5e:	0020      	movs	r0, r4
 800eb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800eb62:	2401      	movs	r4, #1
 800eb64:	e7f8      	b.n	800eb58 <xQueueReceiveFromISR+0x66>
 800eb66:	2401      	movs	r4, #1
 800eb68:	e7f6      	b.n	800eb58 <xQueueReceiveFromISR+0x66>
 800eb6a:	2401      	movs	r4, #1
 800eb6c:	e7f4      	b.n	800eb58 <xQueueReceiveFromISR+0x66>
	...

0800eb70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eb70:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb72:	2300      	movs	r3, #0
 800eb74:	2b07      	cmp	r3, #7
 800eb76:	d80a      	bhi.n	800eb8e <vQueueAddToRegistry+0x1e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eb78:	00da      	lsls	r2, r3, #3
 800eb7a:	4c05      	ldr	r4, [pc, #20]	; (800eb90 <vQueueAddToRegistry+0x20>)
 800eb7c:	5912      	ldr	r2, [r2, r4]
 800eb7e:	2a00      	cmp	r2, #0
 800eb80:	d001      	beq.n	800eb86 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb82:	3301      	adds	r3, #1
 800eb84:	e7f6      	b.n	800eb74 <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eb86:	00db      	lsls	r3, r3, #3
 800eb88:	5119      	str	r1, [r3, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eb8a:	18e3      	adds	r3, r4, r3
 800eb8c:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb8e:	bd10      	pop	{r4, pc}
 800eb90:	20006604 	.word	0x20006604

0800eb94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800eb94:	b570      	push	{r4, r5, r6, lr}
 800eb96:	0004      	movs	r4, r0
 800eb98:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb9a:	f001 f9ad 	bl	800fef8 <vPortEnterCritical>
 800eb9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eba0:	3301      	adds	r3, #1
 800eba2:	d00b      	beq.n	800ebbc <vQueueWaitForMessageRestricted+0x28>
 800eba4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eba6:	3301      	adds	r3, #1
 800eba8:	d00b      	beq.n	800ebc2 <vQueueWaitForMessageRestricted+0x2e>
 800ebaa:	f001 f9b1 	bl	800ff10 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ebae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d009      	beq.n	800ebc8 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ebb4:	0020      	movs	r0, r4
 800ebb6:	f7ff fd37 	bl	800e628 <prvUnlockQueue>
	}
 800ebba:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	6463      	str	r3, [r4, #68]	; 0x44
 800ebc0:	e7f0      	b.n	800eba4 <vQueueWaitForMessageRestricted+0x10>
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	64a3      	str	r3, [r4, #72]	; 0x48
 800ebc6:	e7f0      	b.n	800ebaa <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebc8:	0020      	movs	r0, r4
 800ebca:	3024      	adds	r0, #36	; 0x24
 800ebcc:	0029      	movs	r1, r5
 800ebce:	f000 fca5 	bl	800f51c <vTaskPlaceOnEventListRestricted>
 800ebd2:	e7ef      	b.n	800ebb4 <vQueueWaitForMessageRestricted+0x20>

0800ebd4 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800ebd4:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ebd6:	e001      	b.n	800ebdc <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ebd8:	3001      	adds	r0, #1
			ulCount++;
 800ebda:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ebdc:	7802      	ldrb	r2, [r0, #0]
 800ebde:	2aa5      	cmp	r2, #165	; 0xa5
 800ebe0:	d0fa      	beq.n	800ebd8 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ebe2:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800ebe4:	b298      	uxth	r0, r3
	}
 800ebe6:	4770      	bx	lr

0800ebe8 <prvListTaskWithinSingleList>:
	{
 800ebe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebea:	46de      	mov	lr, fp
 800ebec:	4657      	mov	r7, sl
 800ebee:	464e      	mov	r6, r9
 800ebf0:	4645      	mov	r5, r8
 800ebf2:	b5e0      	push	{r5, r6, r7, lr}
 800ebf4:	4682      	mov	sl, r0
 800ebf6:	000e      	movs	r6, r1
 800ebf8:	4690      	mov	r8, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ebfa:	680f      	ldr	r7, [r1, #0]
 800ebfc:	2f00      	cmp	r7, #0
 800ebfe:	d039      	beq.n	800ec74 <prvListTaskWithinSingleList+0x8c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ec00:	684b      	ldr	r3, [r1, #4]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	604b      	str	r3, [r1, #4]
 800ec06:	2208      	movs	r2, #8
 800ec08:	4691      	mov	r9, r2
 800ec0a:	4489      	add	r9, r1
 800ec0c:	454b      	cmp	r3, r9
 800ec0e:	d004      	beq.n	800ec1a <prvListTaskWithinSingleList+0x32>
 800ec10:	6873      	ldr	r3, [r6, #4]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	469b      	mov	fp, r3
	UBaseType_t uxTask = 0;
 800ec16:	2700      	movs	r7, #0
 800ec18:	e010      	b.n	800ec3c <prvListTaskWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	604b      	str	r3, [r1, #4]
 800ec1e:	e7f7      	b.n	800ec10 <prvListTaskWithinSingleList+0x28>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	6073      	str	r3, [r6, #4]
 800ec24:	e00f      	b.n	800ec46 <prvListTaskWithinSingleList+0x5e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800ec26:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ec28:	6163      	str	r3, [r4, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800ec2a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ec2c:	61a3      	str	r3, [r4, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800ec2e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800ec30:	f7ff ffd0 	bl	800ebd4 <prvTaskCheckFreeStackSpace>
 800ec34:	83a0      	strh	r0, [r4, #28]
				uxTask++;
 800ec36:	3701      	adds	r7, #1
			} while( pxNextTCB != pxFirstTCB );
 800ec38:	45ab      	cmp	fp, r5
 800ec3a:	d01b      	beq.n	800ec74 <prvListTaskWithinSingleList+0x8c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ec3c:	6873      	ldr	r3, [r6, #4]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	6073      	str	r3, [r6, #4]
 800ec42:	4599      	cmp	r9, r3
 800ec44:	d0ec      	beq.n	800ec20 <prvListTaskWithinSingleList+0x38>
 800ec46:	6873      	ldr	r3, [r6, #4]
 800ec48:	68dd      	ldr	r5, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800ec4a:	017c      	lsls	r4, r7, #5
 800ec4c:	4454      	add	r4, sl
 800ec4e:	6025      	str	r5, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800ec50:	002b      	movs	r3, r5
 800ec52:	3334      	adds	r3, #52	; 0x34
 800ec54:	6063      	str	r3, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800ec56:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ec58:	60a3      	str	r3, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800ec5a:	4643      	mov	r3, r8
 800ec5c:	7323      	strb	r3, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800ec5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ec60:	6123      	str	r3, [r4, #16]
					if( eState == eSuspended )
 800ec62:	4643      	mov	r3, r8
 800ec64:	2b03      	cmp	r3, #3
 800ec66:	d1de      	bne.n	800ec26 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800ec68:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d0db      	beq.n	800ec26 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ec6e:	2302      	movs	r3, #2
 800ec70:	7323      	strb	r3, [r4, #12]
 800ec72:	e7d8      	b.n	800ec26 <prvListTaskWithinSingleList+0x3e>
	}
 800ec74:	0038      	movs	r0, r7
 800ec76:	bc3c      	pop	{r2, r3, r4, r5}
 800ec78:	4690      	mov	r8, r2
 800ec7a:	4699      	mov	r9, r3
 800ec7c:	46a2      	mov	sl, r4
 800ec7e:	46ab      	mov	fp, r5
 800ec80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec84 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec84:	4b08      	ldr	r3, [pc, #32]	; (800eca8 <prvResetNextTaskUnblockTime+0x24>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d007      	beq.n	800ec9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ec8e:	4b06      	ldr	r3, [pc, #24]	; (800eca8 <prvResetNextTaskUnblockTime+0x24>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800ec96:	685a      	ldr	r2, [r3, #4]
 800ec98:	4b04      	ldr	r3, [pc, #16]	; (800ecac <prvResetNextTaskUnblockTime+0x28>)
 800ec9a:	601a      	str	r2, [r3, #0]
	}
}
 800ec9c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec9e:	4b03      	ldr	r3, [pc, #12]	; (800ecac <prvResetNextTaskUnblockTime+0x28>)
 800eca0:	2201      	movs	r2, #1
 800eca2:	4252      	negs	r2, r2
 800eca4:	601a      	str	r2, [r3, #0]
 800eca6:	e7f9      	b.n	800ec9c <prvResetNextTaskUnblockTime+0x18>
 800eca8:	20001510 	.word	0x20001510
 800ecac:	200000d8 	.word	0x200000d8

0800ecb0 <prvDeleteTCB>:
	{
 800ecb0:	b510      	push	{r4, lr}
 800ecb2:	0004      	movs	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 800ecb4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800ecb6:	f001 fa4b 	bl	8010150 <vPortFree>
		vPortFree( pxTCB );
 800ecba:	0020      	movs	r0, r4
 800ecbc:	f001 fa48 	bl	8010150 <vPortFree>
	}
 800ecc0:	bd10      	pop	{r4, pc}

0800ecc2 <prvAllocateTCBAndStack>:
{
 800ecc2:	b570      	push	{r4, r5, r6, lr}
 800ecc4:	0006      	movs	r6, r0
 800ecc6:	1e0d      	subs	r5, r1, #0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecc8:	d103      	bne.n	800ecd2 <prvAllocateTCBAndStack+0x10>
 800ecca:	0080      	lsls	r0, r0, #2
 800eccc:	f001 f9c8 	bl	8010060 <pvPortMalloc>
 800ecd0:	0005      	movs	r5, r0
		if( pxStack != NULL )
 800ecd2:	2d00      	cmp	r5, #0
 800ecd4:	d012      	beq.n	800ecfc <prvAllocateTCBAndStack+0x3a>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800ecd6:	2060      	movs	r0, #96	; 0x60
 800ecd8:	f001 f9c2 	bl	8010060 <pvPortMalloc>
 800ecdc:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800ecde:	d009      	beq.n	800ecf4 <prvAllocateTCBAndStack+0x32>
				pxNewTCB->pxStack = pxStack;
 800ece0:	6305      	str	r5, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 800ece2:	2c00      	cmp	r4, #0
 800ece4:	d004      	beq.n	800ecf0 <prvAllocateTCBAndStack+0x2e>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800ece6:	00b2      	lsls	r2, r6, #2
 800ece8:	21a5      	movs	r1, #165	; 0xa5
 800ecea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ecec:	f004 fb7a 	bl	80133e4 <memset>
}
 800ecf0:	0020      	movs	r0, r4
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
 800ecf4:	0028      	movs	r0, r5
 800ecf6:	f001 fa2b 	bl	8010150 <vPortFree>
 800ecfa:	e7f2      	b.n	800ece2 <prvAllocateTCBAndStack+0x20>
			pxNewTCB = NULL;
 800ecfc:	2400      	movs	r4, #0
	return pxNewTCB;
 800ecfe:	e7f7      	b.n	800ecf0 <prvAllocateTCBAndStack+0x2e>

0800ed00 <prvInitialiseTCBVariables>:
{
 800ed00:	b570      	push	{r4, r5, r6, lr}
 800ed02:	0004      	movs	r4, r0
 800ed04:	0015      	movs	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed06:	2300      	movs	r3, #0
 800ed08:	2b0c      	cmp	r3, #12
 800ed0a:	d91a      	bls.n	800ed42 <prvInitialiseTCBVariables+0x42>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed0c:	2340      	movs	r3, #64	; 0x40
 800ed0e:	2200      	movs	r2, #0
 800ed10:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed12:	2d06      	cmp	r5, #6
 800ed14:	d900      	bls.n	800ed18 <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed16:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800ed18:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800ed1a:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800ed1c:	2600      	movs	r6, #0
 800ed1e:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800ed20:	1d20      	adds	r0, r4, #4
 800ed22:	f7ff fbd4 	bl	800e4ce <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800ed26:	0020      	movs	r0, r4
 800ed28:	3018      	adds	r0, #24
 800ed2a:	f7ff fbd0 	bl	800e4ce <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800ed2e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed30:	2307      	movs	r3, #7
 800ed32:	1b5d      	subs	r5, r3, r5
 800ed34:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800ed36:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800ed38:	6566      	str	r6, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800ed3a:	65a6      	str	r6, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800ed3c:	3355      	adds	r3, #85	; 0x55
 800ed3e:	54e6      	strb	r6, [r4, r3]
}
 800ed40:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800ed42:	18c8      	adds	r0, r1, r3
 800ed44:	7806      	ldrb	r6, [r0, #0]
 800ed46:	18e2      	adds	r2, r4, r3
 800ed48:	3234      	adds	r2, #52	; 0x34
 800ed4a:	7016      	strb	r6, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800ed4c:	7802      	ldrb	r2, [r0, #0]
 800ed4e:	2a00      	cmp	r2, #0
 800ed50:	d0dc      	beq.n	800ed0c <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed52:	3301      	adds	r3, #1
 800ed54:	e7d8      	b.n	800ed08 <prvInitialiseTCBVariables+0x8>
	...

0800ed58 <prvInitialiseTaskLists>:
{
 800ed58:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed5a:	2400      	movs	r4, #0
 800ed5c:	2c06      	cmp	r4, #6
 800ed5e:	d915      	bls.n	800ed8c <prvInitialiseTaskLists+0x34>
	vListInitialise( &xDelayedTaskList1 );
 800ed60:	4d0e      	ldr	r5, [pc, #56]	; (800ed9c <prvInitialiseTaskLists+0x44>)
 800ed62:	0028      	movs	r0, r5
 800ed64:	f7ff fba8 	bl	800e4b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed68:	4c0d      	ldr	r4, [pc, #52]	; (800eda0 <prvInitialiseTaskLists+0x48>)
 800ed6a:	0020      	movs	r0, r4
 800ed6c:	f7ff fba4 	bl	800e4b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed70:	480c      	ldr	r0, [pc, #48]	; (800eda4 <prvInitialiseTaskLists+0x4c>)
 800ed72:	f7ff fba1 	bl	800e4b8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ed76:	480c      	ldr	r0, [pc, #48]	; (800eda8 <prvInitialiseTaskLists+0x50>)
 800ed78:	f7ff fb9e 	bl	800e4b8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ed7c:	480b      	ldr	r0, [pc, #44]	; (800edac <prvInitialiseTaskLists+0x54>)
 800ed7e:	f7ff fb9b 	bl	800e4b8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed82:	4b0b      	ldr	r3, [pc, #44]	; (800edb0 <prvInitialiseTaskLists+0x58>)
 800ed84:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed86:	4b0b      	ldr	r3, [pc, #44]	; (800edb4 <prvInitialiseTaskLists+0x5c>)
 800ed88:	601c      	str	r4, [r3, #0]
}
 800ed8a:	bd70      	pop	{r4, r5, r6, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ed8c:	2014      	movs	r0, #20
 800ed8e:	4360      	muls	r0, r4
 800ed90:	4b09      	ldr	r3, [pc, #36]	; (800edb8 <prvInitialiseTaskLists+0x60>)
 800ed92:	18c0      	adds	r0, r0, r3
 800ed94:	f7ff fb90 	bl	800e4b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed98:	3401      	adds	r4, #1
 800ed9a:	e7df      	b.n	800ed5c <prvInitialiseTaskLists+0x4>
 800ed9c:	200015c0 	.word	0x200015c0
 800eda0:	200015d4 	.word	0x200015d4
 800eda4:	200015ec 	.word	0x200015ec
 800eda8:	20001618 	.word	0x20001618
 800edac:	20001604 	.word	0x20001604
 800edb0:	20001510 	.word	0x20001510
 800edb4:	20001514 	.word	0x20001514
 800edb8:	20001518 	.word	0x20001518

0800edbc <prvAddCurrentTaskToDelayedList>:
{
 800edbc:	b510      	push	{r4, lr}
 800edbe:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800edc0:	4b0e      	ldr	r3, [pc, #56]	; (800edfc <prvAddCurrentTaskToDelayedList+0x40>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800edc6:	4b0e      	ldr	r3, [pc, #56]	; (800ee00 <prvAddCurrentTaskToDelayedList+0x44>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4283      	cmp	r3, r0
 800edcc:	d80d      	bhi.n	800edea <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800edce:	4b0d      	ldr	r3, [pc, #52]	; (800ee04 <prvAddCurrentTaskToDelayedList+0x48>)
 800edd0:	6818      	ldr	r0, [r3, #0]
 800edd2:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <prvAddCurrentTaskToDelayedList+0x40>)
 800edd4:	6819      	ldr	r1, [r3, #0]
 800edd6:	3104      	adds	r1, #4
 800edd8:	f7ff fb88 	bl	800e4ec <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800eddc:	4b0a      	ldr	r3, [pc, #40]	; (800ee08 <prvAddCurrentTaskToDelayedList+0x4c>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	42a3      	cmp	r3, r4
 800ede2:	d909      	bls.n	800edf8 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800ede4:	4b08      	ldr	r3, [pc, #32]	; (800ee08 <prvAddCurrentTaskToDelayedList+0x4c>)
 800ede6:	601c      	str	r4, [r3, #0]
}
 800ede8:	e006      	b.n	800edf8 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800edea:	4b08      	ldr	r3, [pc, #32]	; (800ee0c <prvAddCurrentTaskToDelayedList+0x50>)
 800edec:	6818      	ldr	r0, [r3, #0]
 800edee:	4b03      	ldr	r3, [pc, #12]	; (800edfc <prvAddCurrentTaskToDelayedList+0x40>)
 800edf0:	6819      	ldr	r1, [r3, #0]
 800edf2:	3104      	adds	r1, #4
 800edf4:	f7ff fb7a 	bl	800e4ec <vListInsert>
}
 800edf8:	bd10      	pop	{r4, pc}
 800edfa:	46c0      	nop			; (mov r8, r8)
 800edfc:	2000150c 	.word	0x2000150c
 800ee00:	2000162c 	.word	0x2000162c
 800ee04:	20001510 	.word	0x20001510
 800ee08:	200000d8 	.word	0x200000d8
 800ee0c:	20001514 	.word	0x20001514

0800ee10 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ee10:	b510      	push	{r4, lr}
 800ee12:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ee14:	f005 fa80 	bl	8014318 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ee18:	0020      	movs	r0, r4
 800ee1a:	f7f1 f97d 	bl	8000118 <strlen>
 800ee1e:	e002      	b.n	800ee26 <prvWriteNameToBuffer+0x16>
		{
			pcBuffer[ x ] = ' ';
 800ee20:	2320      	movs	r3, #32
 800ee22:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ee24:	3001      	adds	r0, #1
 800ee26:	280b      	cmp	r0, #11
 800ee28:	ddfa      	ble.n	800ee20 <prvWriteNameToBuffer+0x10>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800ee2a:	1820      	adds	r0, r4, r0
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800ee30:	bd10      	pop	{r4, pc}
	...

0800ee34 <xTaskGenericCreate>:
{
 800ee34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee36:	46ce      	mov	lr, r9
 800ee38:	b500      	push	{lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	0006      	movs	r6, r0
 800ee3e:	9102      	str	r1, [sp, #8]
 800ee40:	0015      	movs	r5, r2
 800ee42:	9303      	str	r3, [sp, #12]
 800ee44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	configASSERT( pxTaskCode );
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d101      	bne.n	800ee4e <xTaskGenericCreate+0x1a>
 800ee4a:	b672      	cpsid	i
 800ee4c:	e7fe      	b.n	800ee4c <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800ee4e:	2c06      	cmp	r4, #6
 800ee50:	d901      	bls.n	800ee56 <xTaskGenericCreate+0x22>
 800ee52:	b672      	cpsid	i
 800ee54:	e7fe      	b.n	800ee54 <xTaskGenericCreate+0x20>
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800ee56:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ee58:	0010      	movs	r0, r2
 800ee5a:	f7ff ff32 	bl	800ecc2 <prvAllocateTCBAndStack>
 800ee5e:	1e07      	subs	r7, r0, #0
	if( pxNewTCB != NULL )
 800ee60:	d05a      	beq.n	800ef18 <xTaskGenericCreate+0xe4>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800ee62:	4b31      	ldr	r3, [pc, #196]	; (800ef28 <xTaskGenericCreate+0xf4>)
 800ee64:	18eb      	adds	r3, r5, r3
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800ee6a:	4694      	mov	ip, r2
 800ee6c:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ee6e:	2207      	movs	r2, #7
 800ee70:	4393      	bics	r3, r2
 800ee72:	4699      	mov	r9, r3
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800ee74:	9500      	str	r5, [sp, #0]
 800ee76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee78:	0022      	movs	r2, r4
 800ee7a:	9902      	ldr	r1, [sp, #8]
 800ee7c:	f7ff ff40 	bl	800ed00 <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee80:	9a03      	ldr	r2, [sp, #12]
 800ee82:	0031      	movs	r1, r6
 800ee84:	4648      	mov	r0, r9
 800ee86:	f000 ffff 	bl	800fe88 <pxPortInitialiseStack>
 800ee8a:	6038      	str	r0, [r7, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800ee8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d000      	beq.n	800ee94 <xTaskGenericCreate+0x60>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee92:	601f      	str	r7, [r3, #0]
		taskENTER_CRITICAL();
 800ee94:	f001 f830 	bl	800fef8 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800ee98:	4a24      	ldr	r2, [pc, #144]	; (800ef2c <xTaskGenericCreate+0xf8>)
 800ee9a:	6813      	ldr	r3, [r2, #0]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800eea0:	4b23      	ldr	r3, [pc, #140]	; (800ef30 <xTaskGenericCreate+0xfc>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d12b      	bne.n	800ef00 <xTaskGenericCreate+0xcc>
				pxCurrentTCB =  pxNewTCB;
 800eea8:	4b21      	ldr	r3, [pc, #132]	; (800ef30 <xTaskGenericCreate+0xfc>)
 800eeaa:	601f      	str	r7, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eeac:	6813      	ldr	r3, [r2, #0]
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d101      	bne.n	800eeb6 <xTaskGenericCreate+0x82>
					prvInitialiseTaskLists();
 800eeb2:	f7ff ff51 	bl	800ed58 <prvInitialiseTaskLists>
			uxTaskNumber++;
 800eeb6:	4a1f      	ldr	r2, [pc, #124]	; (800ef34 <xTaskGenericCreate+0x100>)
 800eeb8:	6813      	ldr	r3, [r2, #0]
 800eeba:	3301      	adds	r3, #1
 800eebc:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eebe:	647b      	str	r3, [r7, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	4a1d      	ldr	r2, [pc, #116]	; (800ef38 <xTaskGenericCreate+0x104>)
 800eec4:	6812      	ldr	r2, [r2, #0]
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d901      	bls.n	800eece <xTaskGenericCreate+0x9a>
 800eeca:	4a1b      	ldr	r2, [pc, #108]	; (800ef38 <xTaskGenericCreate+0x104>)
 800eecc:	6013      	str	r3, [r2, #0]
 800eece:	1d39      	adds	r1, r7, #4
 800eed0:	2014      	movs	r0, #20
 800eed2:	4358      	muls	r0, r3
 800eed4:	4b19      	ldr	r3, [pc, #100]	; (800ef3c <xTaskGenericCreate+0x108>)
 800eed6:	18c0      	adds	r0, r0, r3
 800eed8:	f7ff fafc 	bl	800e4d4 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800eedc:	f001 f818 	bl	800ff10 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800eee0:	4b17      	ldr	r3, [pc, #92]	; (800ef40 <xTaskGenericCreate+0x10c>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d01a      	beq.n	800ef1e <xTaskGenericCreate+0xea>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800eee8:	4b11      	ldr	r3, [pc, #68]	; (800ef30 <xTaskGenericCreate+0xfc>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeee:	42a3      	cmp	r3, r4
 800eef0:	d217      	bcs.n	800ef22 <xTaskGenericCreate+0xee>
				taskYIELD_IF_USING_PREEMPTION();
 800eef2:	f000 fff5 	bl	800fee0 <vPortYield>
			xReturn = pdPASS;
 800eef6:	2001      	movs	r0, #1
}
 800eef8:	b004      	add	sp, #16
 800eefa:	bc04      	pop	{r2}
 800eefc:	4691      	mov	r9, r2
 800eefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xSchedulerRunning == pdFALSE )
 800ef00:	4b0f      	ldr	r3, [pc, #60]	; (800ef40 <xTaskGenericCreate+0x10c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d1d6      	bne.n	800eeb6 <xTaskGenericCreate+0x82>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800ef08:	4b09      	ldr	r3, [pc, #36]	; (800ef30 <xTaskGenericCreate+0xfc>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0e:	42a3      	cmp	r3, r4
 800ef10:	d8d1      	bhi.n	800eeb6 <xTaskGenericCreate+0x82>
						pxCurrentTCB = pxNewTCB;
 800ef12:	4b07      	ldr	r3, [pc, #28]	; (800ef30 <xTaskGenericCreate+0xfc>)
 800ef14:	601f      	str	r7, [r3, #0]
 800ef16:	e7ce      	b.n	800eeb6 <xTaskGenericCreate+0x82>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef18:	2001      	movs	r0, #1
 800ef1a:	4240      	negs	r0, r0
 800ef1c:	e7ec      	b.n	800eef8 <xTaskGenericCreate+0xc4>
			xReturn = pdPASS;
 800ef1e:	2001      	movs	r0, #1
 800ef20:	e7ea      	b.n	800eef8 <xTaskGenericCreate+0xc4>
 800ef22:	2001      	movs	r0, #1
	return xReturn;
 800ef24:	e7e8      	b.n	800eef8 <xTaskGenericCreate+0xc4>
 800ef26:	46c0      	nop			; (mov r8, r8)
 800ef28:	3fffffff 	.word	0x3fffffff
 800ef2c:	200015a8 	.word	0x200015a8
 800ef30:	2000150c 	.word	0x2000150c
 800ef34:	200015b4 	.word	0x200015b4
 800ef38:	200015bc 	.word	0x200015bc
 800ef3c:	20001518 	.word	0x20001518
 800ef40:	20001600 	.word	0x20001600

0800ef44 <uxTaskPriorityGet>:
	{
 800ef44:	b510      	push	{r4, lr}
 800ef46:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800ef48:	f000 ffd6 	bl	800fef8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ef4c:	2c00      	cmp	r4, #0
 800ef4e:	d004      	beq.n	800ef5a <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800ef50:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800ef52:	f000 ffdd 	bl	800ff10 <vPortExitCritical>
	}
 800ef56:	0020      	movs	r0, r4
 800ef58:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800ef5a:	4b01      	ldr	r3, [pc, #4]	; (800ef60 <uxTaskPriorityGet+0x1c>)
 800ef5c:	681c      	ldr	r4, [r3, #0]
 800ef5e:	e7f7      	b.n	800ef50 <uxTaskPriorityGet+0xc>
 800ef60:	2000150c 	.word	0x2000150c

0800ef64 <vTaskPrioritySet>:
	{
 800ef64:	b570      	push	{r4, r5, r6, lr}
 800ef66:	0004      	movs	r4, r0
 800ef68:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800ef6a:	2906      	cmp	r1, #6
 800ef6c:	d901      	bls.n	800ef72 <vTaskPrioritySet+0xe>
 800ef6e:	b672      	cpsid	i
 800ef70:	e7fe      	b.n	800ef70 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800ef72:	f000 ffc1 	bl	800fef8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ef76:	2c00      	cmp	r4, #0
 800ef78:	d101      	bne.n	800ef7e <vTaskPrioritySet+0x1a>
 800ef7a:	4b23      	ldr	r3, [pc, #140]	; (800f008 <vTaskPrioritySet+0xa4>)
 800ef7c:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800ef7e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800ef80:	4295      	cmp	r5, r2
 800ef82:	d032      	beq.n	800efea <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800ef84:	d934      	bls.n	800eff0 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800ef86:	4b20      	ldr	r3, [pc, #128]	; (800f008 <vTaskPrioritySet+0xa4>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	42a3      	cmp	r3, r4
 800ef8c:	d036      	beq.n	800effc <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ef8e:	4b1e      	ldr	r3, [pc, #120]	; (800f008 <vTaskPrioritySet+0xa4>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef94:	42ab      	cmp	r3, r5
 800ef96:	d933      	bls.n	800f000 <vTaskPrioritySet+0x9c>
	BaseType_t xYieldRequired = pdFALSE;
 800ef98:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ef9c:	428a      	cmp	r2, r1
 800ef9e:	d100      	bne.n	800efa2 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800efa0:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800efa2:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800efa4:	69a3      	ldr	r3, [r4, #24]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	db02      	blt.n	800efb0 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efaa:	2207      	movs	r2, #7
 800efac:	1b55      	subs	r5, r2, r5
 800efae:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800efb0:	2314      	movs	r3, #20
 800efb2:	434b      	muls	r3, r1
 800efb4:	4a15      	ldr	r2, [pc, #84]	; (800f00c <vTaskPrioritySet+0xa8>)
 800efb6:	189b      	adds	r3, r3, r2
 800efb8:	6962      	ldr	r2, [r4, #20]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d111      	bne.n	800efe2 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800efbe:	1d25      	adds	r5, r4, #4
 800efc0:	0028      	movs	r0, r5
 800efc2:	f7ff faab 	bl	800e51c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800efc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800efc8:	4a11      	ldr	r2, [pc, #68]	; (800f010 <vTaskPrioritySet+0xac>)
 800efca:	6812      	ldr	r2, [r2, #0]
 800efcc:	4293      	cmp	r3, r2
 800efce:	d901      	bls.n	800efd4 <vTaskPrioritySet+0x70>
 800efd0:	4a0f      	ldr	r2, [pc, #60]	; (800f010 <vTaskPrioritySet+0xac>)
 800efd2:	6013      	str	r3, [r2, #0]
 800efd4:	2014      	movs	r0, #20
 800efd6:	4358      	muls	r0, r3
 800efd8:	4b0c      	ldr	r3, [pc, #48]	; (800f00c <vTaskPrioritySet+0xa8>)
 800efda:	18c0      	adds	r0, r0, r3
 800efdc:	0029      	movs	r1, r5
 800efde:	f7ff fa79 	bl	800e4d4 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800efe2:	2e01      	cmp	r6, #1
 800efe4:	d101      	bne.n	800efea <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800efe6:	f000 ff7b 	bl	800fee0 <vPortYield>
		taskEXIT_CRITICAL();
 800efea:	f000 ff91 	bl	800ff10 <vPortExitCritical>
	}
 800efee:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800eff0:	4b05      	ldr	r3, [pc, #20]	; (800f008 <vTaskPrioritySet+0xa4>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	42a3      	cmp	r3, r4
 800eff6:	d005      	beq.n	800f004 <vTaskPrioritySet+0xa0>
	BaseType_t xYieldRequired = pdFALSE;
 800eff8:	2600      	movs	r6, #0
 800effa:	e7ce      	b.n	800ef9a <vTaskPrioritySet+0x36>
 800effc:	2600      	movs	r6, #0
 800effe:	e7cc      	b.n	800ef9a <vTaskPrioritySet+0x36>
							xYieldRequired = pdTRUE;
 800f000:	2601      	movs	r6, #1
 800f002:	e7ca      	b.n	800ef9a <vTaskPrioritySet+0x36>
					xYieldRequired = pdTRUE;
 800f004:	2601      	movs	r6, #1
 800f006:	e7c8      	b.n	800ef9a <vTaskPrioritySet+0x36>
 800f008:	2000150c 	.word	0x2000150c
 800f00c:	20001518 	.word	0x20001518
 800f010:	200015bc 	.word	0x200015bc

0800f014 <vTaskStartScheduler>:
{
 800f014:	b500      	push	{lr}
 800f016:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f018:	2300      	movs	r3, #0
 800f01a:	9303      	str	r3, [sp, #12]
 800f01c:	9302      	str	r3, [sp, #8]
 800f01e:	9301      	str	r3, [sp, #4]
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	22a0      	movs	r2, #160	; 0xa0
 800f024:	490d      	ldr	r1, [pc, #52]	; (800f05c <vTaskStartScheduler+0x48>)
 800f026:	480e      	ldr	r0, [pc, #56]	; (800f060 <vTaskStartScheduler+0x4c>)
 800f028:	f7ff ff04 	bl	800ee34 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f02c:	2801      	cmp	r0, #1
 800f02e:	d005      	beq.n	800f03c <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
 800f030:	2801      	cmp	r0, #1
 800f032:	d006      	beq.n	800f042 <vTaskStartScheduler+0x2e>
		configASSERT( xReturn );
 800f034:	2800      	cmp	r0, #0
 800f036:	d10f      	bne.n	800f058 <vTaskStartScheduler+0x44>
 800f038:	b672      	cpsid	i
 800f03a:	e7fe      	b.n	800f03a <vTaskStartScheduler+0x26>
			xReturn = xTimerCreateTimerTask();
 800f03c:	f000 fd6c 	bl	800fb18 <xTimerCreateTimerTask>
 800f040:	e7f6      	b.n	800f030 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f042:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f044:	4b07      	ldr	r3, [pc, #28]	; (800f064 <vTaskStartScheduler+0x50>)
 800f046:	2201      	movs	r2, #1
 800f048:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f04a:	4b07      	ldr	r3, [pc, #28]	; (800f068 <vTaskStartScheduler+0x54>)
 800f04c:	2200      	movs	r2, #0
 800f04e:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f050:	f7f8 fa12 	bl	8007478 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f054:	f000 ff2a 	bl	800feac <xPortStartScheduler>
}
 800f058:	b005      	add	sp, #20
 800f05a:	bd00      	pop	{pc}
 800f05c:	0801a4c0 	.word	0x0801a4c0
 800f060:	0800f329 	.word	0x0800f329
 800f064:	20001600 	.word	0x20001600
 800f068:	2000162c 	.word	0x2000162c

0800f06c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f06c:	4a02      	ldr	r2, [pc, #8]	; (800f078 <vTaskSuspendAll+0xc>)
 800f06e:	6813      	ldr	r3, [r2, #0]
 800f070:	3301      	adds	r3, #1
 800f072:	6013      	str	r3, [r2, #0]
}
 800f074:	4770      	bx	lr
 800f076:	46c0      	nop			; (mov r8, r8)
 800f078:	200015b0 	.word	0x200015b0

0800f07c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f07c:	4b01      	ldr	r3, [pc, #4]	; (800f084 <xTaskGetTickCount+0x8>)
 800f07e:	6818      	ldr	r0, [r3, #0]
}
 800f080:	4770      	bx	lr
 800f082:	46c0      	nop			; (mov r8, r8)
 800f084:	2000162c 	.word	0x2000162c

0800f088 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f088:	4b01      	ldr	r3, [pc, #4]	; (800f090 <xTaskGetTickCountFromISR+0x8>)
 800f08a:	6818      	ldr	r0, [r3, #0]
}
 800f08c:	4770      	bx	lr
 800f08e:	46c0      	nop			; (mov r8, r8)
 800f090:	2000162c 	.word	0x2000162c

0800f094 <xTaskIncrementTick>:
{
 800f094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f096:	4b39      	ldr	r3, [pc, #228]	; (800f17c <xTaskIncrementTick+0xe8>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d162      	bne.n	800f164 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800f09e:	4b38      	ldr	r3, [pc, #224]	; (800f180 <xTaskIncrementTick+0xec>)
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	3201      	adds	r2, #1
 800f0a4:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f0a6:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f0a8:	2f00      	cmp	r7, #0
 800f0aa:	d112      	bne.n	800f0d2 <xTaskIncrementTick+0x3e>
				taskSWITCH_DELAYED_LISTS();
 800f0ac:	4b35      	ldr	r3, [pc, #212]	; (800f184 <xTaskIncrementTick+0xf0>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d001      	beq.n	800f0ba <xTaskIncrementTick+0x26>
 800f0b6:	b672      	cpsid	i
 800f0b8:	e7fe      	b.n	800f0b8 <xTaskIncrementTick+0x24>
 800f0ba:	4a32      	ldr	r2, [pc, #200]	; (800f184 <xTaskIncrementTick+0xf0>)
 800f0bc:	6811      	ldr	r1, [r2, #0]
 800f0be:	4b32      	ldr	r3, [pc, #200]	; (800f188 <xTaskIncrementTick+0xf4>)
 800f0c0:	6818      	ldr	r0, [r3, #0]
 800f0c2:	6010      	str	r0, [r2, #0]
 800f0c4:	6019      	str	r1, [r3, #0]
 800f0c6:	4a31      	ldr	r2, [pc, #196]	; (800f18c <xTaskIncrementTick+0xf8>)
 800f0c8:	6813      	ldr	r3, [r2, #0]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	6013      	str	r3, [r2, #0]
 800f0ce:	f7ff fdd9 	bl	800ec84 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f0d2:	4b2f      	ldr	r3, [pc, #188]	; (800f190 <xTaskIncrementTick+0xfc>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	42bb      	cmp	r3, r7
 800f0d8:	d93a      	bls.n	800f150 <xTaskIncrementTick+0xbc>
BaseType_t xSwitchRequired = pdFALSE;
 800f0da:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f0dc:	4b2d      	ldr	r3, [pc, #180]	; (800f194 <xTaskIncrementTick+0x100>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0e2:	0093      	lsls	r3, r2, #2
 800f0e4:	189b      	adds	r3, r3, r2
 800f0e6:	009a      	lsls	r2, r3, #2
 800f0e8:	4b2b      	ldr	r3, [pc, #172]	; (800f198 <xTaskIncrementTick+0x104>)
 800f0ea:	58d3      	ldr	r3, [r2, r3]
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d93e      	bls.n	800f16e <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800f0f0:	2401      	movs	r4, #1
 800f0f2:	e03c      	b.n	800f16e <xTaskIncrementTick+0xda>
								xSwitchRequired = pdTRUE;
 800f0f4:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0f6:	4b23      	ldr	r3, [pc, #140]	; (800f184 <xTaskIncrementTick+0xf0>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d029      	beq.n	800f154 <xTaskIncrementTick+0xc0>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f100:	4b20      	ldr	r3, [pc, #128]	; (800f184 <xTaskIncrementTick+0xf0>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	68db      	ldr	r3, [r3, #12]
 800f106:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f108:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800f10a:	429f      	cmp	r7, r3
 800f10c:	d327      	bcc.n	800f15e <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f10e:	1d2e      	adds	r6, r5, #4
 800f110:	0030      	movs	r0, r6
 800f112:	f7ff fa03 	bl	800e51c <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f116:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d003      	beq.n	800f124 <xTaskIncrementTick+0x90>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f11c:	0028      	movs	r0, r5
 800f11e:	3018      	adds	r0, #24
 800f120:	f7ff f9fc 	bl	800e51c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f124:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f126:	4b1d      	ldr	r3, [pc, #116]	; (800f19c <xTaskIncrementTick+0x108>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d901      	bls.n	800f132 <xTaskIncrementTick+0x9e>
 800f12e:	4b1b      	ldr	r3, [pc, #108]	; (800f19c <xTaskIncrementTick+0x108>)
 800f130:	601a      	str	r2, [r3, #0]
 800f132:	0093      	lsls	r3, r2, #2
 800f134:	189b      	adds	r3, r3, r2
 800f136:	0098      	lsls	r0, r3, #2
 800f138:	4b17      	ldr	r3, [pc, #92]	; (800f198 <xTaskIncrementTick+0x104>)
 800f13a:	18c0      	adds	r0, r0, r3
 800f13c:	0031      	movs	r1, r6
 800f13e:	f7ff f9c9 	bl	800e4d4 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f142:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f144:	4b13      	ldr	r3, [pc, #76]	; (800f194 <xTaskIncrementTick+0x100>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d2d2      	bcs.n	800f0f4 <xTaskIncrementTick+0x60>
 800f14e:	e7d2      	b.n	800f0f6 <xTaskIncrementTick+0x62>
BaseType_t xSwitchRequired = pdFALSE;
 800f150:	2400      	movs	r4, #0
 800f152:	e7d0      	b.n	800f0f6 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f154:	4b0e      	ldr	r3, [pc, #56]	; (800f190 <xTaskIncrementTick+0xfc>)
 800f156:	2201      	movs	r2, #1
 800f158:	4252      	negs	r2, r2
 800f15a:	601a      	str	r2, [r3, #0]
						break;
 800f15c:	e7be      	b.n	800f0dc <xTaskIncrementTick+0x48>
							xNextTaskUnblockTime = xItemValue;
 800f15e:	4a0c      	ldr	r2, [pc, #48]	; (800f190 <xTaskIncrementTick+0xfc>)
 800f160:	6013      	str	r3, [r2, #0]
							break;
 800f162:	e7bb      	b.n	800f0dc <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 800f164:	4a0e      	ldr	r2, [pc, #56]	; (800f1a0 <xTaskIncrementTick+0x10c>)
 800f166:	6813      	ldr	r3, [r2, #0]
 800f168:	3301      	adds	r3, #1
 800f16a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f16c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800f16e:	4b0d      	ldr	r3, [pc, #52]	; (800f1a4 <xTaskIncrementTick+0x110>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d000      	beq.n	800f178 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800f176:	2401      	movs	r4, #1
}
 800f178:	0020      	movs	r0, r4
 800f17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f17c:	200015b0 	.word	0x200015b0
 800f180:	2000162c 	.word	0x2000162c
 800f184:	20001510 	.word	0x20001510
 800f188:	20001514 	.word	0x20001514
 800f18c:	200015e8 	.word	0x200015e8
 800f190:	200000d8 	.word	0x200000d8
 800f194:	2000150c 	.word	0x2000150c
 800f198:	20001518 	.word	0x20001518
 800f19c:	200015bc 	.word	0x200015bc
 800f1a0:	200015ac 	.word	0x200015ac
 800f1a4:	20001630 	.word	0x20001630

0800f1a8 <xTaskResumeAll>:
{
 800f1a8:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 800f1aa:	4b30      	ldr	r3, [pc, #192]	; (800f26c <xTaskResumeAll+0xc4>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <xTaskResumeAll+0xe>
 800f1b2:	b672      	cpsid	i
 800f1b4:	e7fe      	b.n	800f1b4 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800f1b6:	f000 fe9f 	bl	800fef8 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f1ba:	4b2c      	ldr	r3, [pc, #176]	; (800f26c <xTaskResumeAll+0xc4>)
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	3a01      	subs	r2, #1
 800f1c0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d14d      	bne.n	800f264 <xTaskResumeAll+0xbc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f1c8:	4b29      	ldr	r3, [pc, #164]	; (800f270 <xTaskResumeAll+0xc8>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d112      	bne.n	800f1f6 <xTaskResumeAll+0x4e>
BaseType_t xAlreadyYielded = pdFALSE;
 800f1d0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f1d2:	f000 fe9d 	bl	800ff10 <vPortExitCritical>
}
 800f1d6:	0020      	movs	r0, r4
 800f1d8:	bd70      	pop	{r4, r5, r6, pc}
					prvAddTaskToReadyList( pxTCB );
 800f1da:	0093      	lsls	r3, r2, #2
 800f1dc:	189b      	adds	r3, r3, r2
 800f1de:	0098      	lsls	r0, r3, #2
 800f1e0:	4b24      	ldr	r3, [pc, #144]	; (800f274 <xTaskResumeAll+0xcc>)
 800f1e2:	18c0      	adds	r0, r0, r3
 800f1e4:	0029      	movs	r1, r5
 800f1e6:	f7ff f975 	bl	800e4d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f1ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f1ec:	4b22      	ldr	r3, [pc, #136]	; (800f278 <xTaskResumeAll+0xd0>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d216      	bcs.n	800f224 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1f6:	4b21      	ldr	r3, [pc, #132]	; (800f27c <xTaskResumeAll+0xd4>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d016      	beq.n	800f22c <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f1fe:	4b1f      	ldr	r3, [pc, #124]	; (800f27c <xTaskResumeAll+0xd4>)
 800f200:	68db      	ldr	r3, [r3, #12]
 800f202:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f204:	0020      	movs	r0, r4
 800f206:	3018      	adds	r0, #24
 800f208:	f7ff f988 	bl	800e51c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f20c:	1d25      	adds	r5, r4, #4
 800f20e:	0028      	movs	r0, r5
 800f210:	f7ff f984 	bl	800e51c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f214:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f216:	4b1a      	ldr	r3, [pc, #104]	; (800f280 <xTaskResumeAll+0xd8>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d9dd      	bls.n	800f1da <xTaskResumeAll+0x32>
 800f21e:	4b18      	ldr	r3, [pc, #96]	; (800f280 <xTaskResumeAll+0xd8>)
 800f220:	601a      	str	r2, [r3, #0]
 800f222:	e7da      	b.n	800f1da <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 800f224:	4b17      	ldr	r3, [pc, #92]	; (800f284 <xTaskResumeAll+0xdc>)
 800f226:	2201      	movs	r2, #1
 800f228:	601a      	str	r2, [r3, #0]
 800f22a:	e7e4      	b.n	800f1f6 <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f22c:	4b16      	ldr	r3, [pc, #88]	; (800f288 <xTaskResumeAll+0xe0>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d112      	bne.n	800f25a <xTaskResumeAll+0xb2>
				if( xYieldPending == pdTRUE )
 800f234:	4b13      	ldr	r3, [pc, #76]	; (800f284 <xTaskResumeAll+0xdc>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d115      	bne.n	800f268 <xTaskResumeAll+0xc0>
					taskYIELD_IF_USING_PREEMPTION();
 800f23c:	f000 fe50 	bl	800fee0 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800f240:	2401      	movs	r4, #1
 800f242:	e7c6      	b.n	800f1d2 <xTaskResumeAll+0x2a>
						if( xTaskIncrementTick() != pdFALSE )
 800f244:	f7ff ff26 	bl	800f094 <xTaskIncrementTick>
 800f248:	2800      	cmp	r0, #0
 800f24a:	d002      	beq.n	800f252 <xTaskResumeAll+0xaa>
							xYieldPending = pdTRUE;
 800f24c:	4b0d      	ldr	r3, [pc, #52]	; (800f284 <xTaskResumeAll+0xdc>)
 800f24e:	2201      	movs	r2, #1
 800f250:	601a      	str	r2, [r3, #0]
						--uxPendedTicks;
 800f252:	4a0d      	ldr	r2, [pc, #52]	; (800f288 <xTaskResumeAll+0xe0>)
 800f254:	6813      	ldr	r3, [r2, #0]
 800f256:	3b01      	subs	r3, #1
 800f258:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f25a:	4b0b      	ldr	r3, [pc, #44]	; (800f288 <xTaskResumeAll+0xe0>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d1f0      	bne.n	800f244 <xTaskResumeAll+0x9c>
 800f262:	e7e7      	b.n	800f234 <xTaskResumeAll+0x8c>
BaseType_t xAlreadyYielded = pdFALSE;
 800f264:	2400      	movs	r4, #0
 800f266:	e7b4      	b.n	800f1d2 <xTaskResumeAll+0x2a>
 800f268:	2400      	movs	r4, #0
 800f26a:	e7b2      	b.n	800f1d2 <xTaskResumeAll+0x2a>
 800f26c:	200015b0 	.word	0x200015b0
 800f270:	200015a8 	.word	0x200015a8
 800f274:	20001518 	.word	0x20001518
 800f278:	2000150c 	.word	0x2000150c
 800f27c:	200015ec 	.word	0x200015ec
 800f280:	200015bc 	.word	0x200015bc
 800f284:	20001630 	.word	0x20001630
 800f288:	200015ac 	.word	0x200015ac

0800f28c <vTaskDelay>:
	{
 800f28c:	b570      	push	{r4, r5, r6, lr}
 800f28e:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f290:	d016      	beq.n	800f2c0 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800f292:	4b0d      	ldr	r3, [pc, #52]	; (800f2c8 <vTaskDelay+0x3c>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d001      	beq.n	800f29e <vTaskDelay+0x12>
 800f29a:	b672      	cpsid	i
 800f29c:	e7fe      	b.n	800f29c <vTaskDelay+0x10>
			vTaskSuspendAll();
 800f29e:	f7ff fee5 	bl	800f06c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f2a2:	4b0a      	ldr	r3, [pc, #40]	; (800f2cc <vTaskDelay+0x40>)
 800f2a4:	681c      	ldr	r4, [r3, #0]
 800f2a6:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f2a8:	4b09      	ldr	r3, [pc, #36]	; (800f2d0 <vTaskDelay+0x44>)
 800f2aa:	6818      	ldr	r0, [r3, #0]
 800f2ac:	3004      	adds	r0, #4
 800f2ae:	f7ff f935 	bl	800e51c <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f2b2:	0020      	movs	r0, r4
 800f2b4:	f7ff fd82 	bl	800edbc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f2b8:	f7ff ff76 	bl	800f1a8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	d101      	bne.n	800f2c4 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800f2c0:	f000 fe0e 	bl	800fee0 <vPortYield>
	}
 800f2c4:	bd70      	pop	{r4, r5, r6, pc}
 800f2c6:	46c0      	nop			; (mov r8, r8)
 800f2c8:	200015b0 	.word	0x200015b0
 800f2cc:	2000162c 	.word	0x2000162c
 800f2d0:	2000150c 	.word	0x2000150c

0800f2d4 <prvCheckTasksWaitingTermination>:
{
 800f2d4:	b510      	push	{r4, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f2d6:	4b11      	ldr	r3, [pc, #68]	; (800f31c <prvCheckTasksWaitingTermination+0x48>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d01d      	beq.n	800f31a <prvCheckTasksWaitingTermination+0x46>
			vTaskSuspendAll();
 800f2de:	f7ff fec5 	bl	800f06c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f2e2:	4b0f      	ldr	r3, [pc, #60]	; (800f320 <prvCheckTasksWaitingTermination+0x4c>)
 800f2e4:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 800f2e6:	f7ff ff5f 	bl	800f1a8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f2ea:	2c00      	cmp	r4, #0
 800f2ec:	d0f3      	beq.n	800f2d6 <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 800f2ee:	f000 fe03 	bl	800fef8 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f2f2:	4b0b      	ldr	r3, [pc, #44]	; (800f320 <prvCheckTasksWaitingTermination+0x4c>)
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f2f8:	1d20      	adds	r0, r4, #4
 800f2fa:	f7ff f90f 	bl	800e51c <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f2fe:	4a09      	ldr	r2, [pc, #36]	; (800f324 <prvCheckTasksWaitingTermination+0x50>)
 800f300:	6813      	ldr	r3, [r2, #0]
 800f302:	3b01      	subs	r3, #1
 800f304:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f306:	4a05      	ldr	r2, [pc, #20]	; (800f31c <prvCheckTasksWaitingTermination+0x48>)
 800f308:	6813      	ldr	r3, [r2, #0]
 800f30a:	3b01      	subs	r3, #1
 800f30c:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f30e:	f000 fdff 	bl	800ff10 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 800f312:	0020      	movs	r0, r4
 800f314:	f7ff fccc 	bl	800ecb0 <prvDeleteTCB>
 800f318:	e7dd      	b.n	800f2d6 <prvCheckTasksWaitingTermination+0x2>
}
 800f31a:	bd10      	pop	{r4, pc}
 800f31c:	200015b8 	.word	0x200015b8
 800f320:	20001618 	.word	0x20001618
 800f324:	200015a8 	.word	0x200015a8

0800f328 <prvIdleTask>:
{
 800f328:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 800f32a:	f7ff ffd3 	bl	800f2d4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f32e:	4b03      	ldr	r3, [pc, #12]	; (800f33c <prvIdleTask+0x14>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2b01      	cmp	r3, #1
 800f334:	d9f9      	bls.n	800f32a <prvIdleTask+0x2>
				taskYIELD();
 800f336:	f000 fdd3 	bl	800fee0 <vPortYield>
 800f33a:	e7f6      	b.n	800f32a <prvIdleTask+0x2>
 800f33c:	20001518 	.word	0x20001518

0800f340 <uxTaskGetSystemState>:
	{
 800f340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f342:	0007      	movs	r7, r0
 800f344:	000c      	movs	r4, r1
 800f346:	0016      	movs	r6, r2
		vTaskSuspendAll();
 800f348:	f7ff fe90 	bl	800f06c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f34c:	4b1e      	ldr	r3, [pc, #120]	; (800f3c8 <uxTaskGetSystemState+0x88>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	42a3      	cmp	r3, r4
 800f352:	d833      	bhi.n	800f3bc <uxTaskGetSystemState+0x7c>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f354:	2507      	movs	r5, #7
 800f356:	2400      	movs	r4, #0
					uxQueue--;
 800f358:	3d01      	subs	r5, #1
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f35a:	0160      	lsls	r0, r4, #5
 800f35c:	00ab      	lsls	r3, r5, #2
 800f35e:	195b      	adds	r3, r3, r5
 800f360:	0099      	lsls	r1, r3, #2
 800f362:	4b1a      	ldr	r3, [pc, #104]	; (800f3cc <uxTaskGetSystemState+0x8c>)
 800f364:	18c9      	adds	r1, r1, r3
 800f366:	1838      	adds	r0, r7, r0
 800f368:	2201      	movs	r2, #1
 800f36a:	f7ff fc3d 	bl	800ebe8 <prvListTaskWithinSingleList>
 800f36e:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f370:	2d00      	cmp	r5, #0
 800f372:	d1f1      	bne.n	800f358 <uxTaskGetSystemState+0x18>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f374:	0160      	lsls	r0, r4, #5
 800f376:	4b16      	ldr	r3, [pc, #88]	; (800f3d0 <uxTaskGetSystemState+0x90>)
 800f378:	6819      	ldr	r1, [r3, #0]
 800f37a:	1838      	adds	r0, r7, r0
 800f37c:	2202      	movs	r2, #2
 800f37e:	f7ff fc33 	bl	800ebe8 <prvListTaskWithinSingleList>
 800f382:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f384:	0160      	lsls	r0, r4, #5
 800f386:	4b13      	ldr	r3, [pc, #76]	; (800f3d4 <uxTaskGetSystemState+0x94>)
 800f388:	6819      	ldr	r1, [r3, #0]
 800f38a:	1838      	adds	r0, r7, r0
 800f38c:	2202      	movs	r2, #2
 800f38e:	f7ff fc2b 	bl	800ebe8 <prvListTaskWithinSingleList>
 800f392:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f394:	0160      	lsls	r0, r4, #5
 800f396:	1838      	adds	r0, r7, r0
 800f398:	2204      	movs	r2, #4
 800f39a:	490f      	ldr	r1, [pc, #60]	; (800f3d8 <uxTaskGetSystemState+0x98>)
 800f39c:	f7ff fc24 	bl	800ebe8 <prvListTaskWithinSingleList>
 800f3a0:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f3a2:	0160      	lsls	r0, r4, #5
 800f3a4:	1838      	adds	r0, r7, r0
 800f3a6:	2203      	movs	r2, #3
 800f3a8:	490c      	ldr	r1, [pc, #48]	; (800f3dc <uxTaskGetSystemState+0x9c>)
 800f3aa:	f7ff fc1d 	bl	800ebe8 <prvListTaskWithinSingleList>
 800f3ae:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f3b0:	2e00      	cmp	r6, #0
 800f3b2:	d004      	beq.n	800f3be <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f3b4:	f7f8 f870 	bl	8007498 <ulMainGetRunTimeCounterValue>
 800f3b8:	6030      	str	r0, [r6, #0]
 800f3ba:	e000      	b.n	800f3be <uxTaskGetSystemState+0x7e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f3bc:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800f3be:	f7ff fef3 	bl	800f1a8 <xTaskResumeAll>
	}
 800f3c2:	0020      	movs	r0, r4
 800f3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3c6:	46c0      	nop			; (mov r8, r8)
 800f3c8:	200015a8 	.word	0x200015a8
 800f3cc:	20001518 	.word	0x20001518
 800f3d0:	20001510 	.word	0x20001510
 800f3d4:	20001514 	.word	0x20001514
 800f3d8:	20001618 	.word	0x20001618
 800f3dc:	20001604 	.word	0x20001604

0800f3e0 <vTaskSwitchContext>:
{
 800f3e0:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f3e2:	4b35      	ldr	r3, [pc, #212]	; (800f4b8 <vTaskSwitchContext+0xd8>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d003      	beq.n	800f3f2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f3ea:	4b34      	ldr	r3, [pc, #208]	; (800f4bc <vTaskSwitchContext+0xdc>)
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	601a      	str	r2, [r3, #0]
}
 800f3f0:	bd70      	pop	{r4, r5, r6, pc}
		xYieldPending = pdFALSE;
 800f3f2:	4b32      	ldr	r3, [pc, #200]	; (800f4bc <vTaskSwitchContext+0xdc>)
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f3f8:	f7f8 f84e 	bl	8007498 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f3fc:	4b30      	ldr	r3, [pc, #192]	; (800f4c0 <vTaskSwitchContext+0xe0>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4298      	cmp	r0, r3
 800f402:	d906      	bls.n	800f412 <vTaskSwitchContext+0x32>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f404:	4a2f      	ldr	r2, [pc, #188]	; (800f4c4 <vTaskSwitchContext+0xe4>)
 800f406:	6812      	ldr	r2, [r2, #0]
 800f408:	1ac3      	subs	r3, r0, r3
 800f40a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f40c:	468c      	mov	ip, r1
 800f40e:	4463      	add	r3, ip
 800f410:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f412:	4b2b      	ldr	r3, [pc, #172]	; (800f4c0 <vTaskSwitchContext+0xe0>)
 800f414:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f416:	4b2b      	ldr	r3, [pc, #172]	; (800f4c4 <vTaskSwitchContext+0xe4>)
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	6812      	ldr	r2, [r2, #0]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f420:	429a      	cmp	r2, r3
 800f422:	d805      	bhi.n	800f430 <vTaskSwitchContext+0x50>
 800f424:	4b27      	ldr	r3, [pc, #156]	; (800f4c4 <vTaskSwitchContext+0xe4>)
 800f426:	6818      	ldr	r0, [r3, #0]
 800f428:	6819      	ldr	r1, [r3, #0]
 800f42a:	3134      	adds	r1, #52	; 0x34
 800f42c:	f7fe f9b2 	bl	800d794 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f430:	4b24      	ldr	r3, [pc, #144]	; (800f4c4 <vTaskSwitchContext+0xe4>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f436:	2214      	movs	r2, #20
 800f438:	4923      	ldr	r1, [pc, #140]	; (800f4c8 <vTaskSwitchContext+0xe8>)
 800f43a:	f003 ffbb 	bl	80133b4 <memcmp>
 800f43e:	2800      	cmp	r0, #0
 800f440:	d005      	beq.n	800f44e <vTaskSwitchContext+0x6e>
 800f442:	4b20      	ldr	r3, [pc, #128]	; (800f4c4 <vTaskSwitchContext+0xe4>)
 800f444:	6818      	ldr	r0, [r3, #0]
 800f446:	6819      	ldr	r1, [r3, #0]
 800f448:	3134      	adds	r1, #52	; 0x34
 800f44a:	f7fe f9a3 	bl	800d794 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f44e:	4b1f      	ldr	r3, [pc, #124]	; (800f4cc <vTaskSwitchContext+0xec>)
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	0093      	lsls	r3, r2, #2
 800f454:	189b      	adds	r3, r3, r2
 800f456:	009a      	lsls	r2, r3, #2
 800f458:	4b1d      	ldr	r3, [pc, #116]	; (800f4d0 <vTaskSwitchContext+0xf0>)
 800f45a:	58d3      	ldr	r3, [r2, r3]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10a      	bne.n	800f476 <vTaskSwitchContext+0x96>
 800f460:	4b1a      	ldr	r3, [pc, #104]	; (800f4cc <vTaskSwitchContext+0xec>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d004      	beq.n	800f472 <vTaskSwitchContext+0x92>
 800f468:	4a18      	ldr	r2, [pc, #96]	; (800f4cc <vTaskSwitchContext+0xec>)
 800f46a:	6813      	ldr	r3, [r2, #0]
 800f46c:	3b01      	subs	r3, #1
 800f46e:	6013      	str	r3, [r2, #0]
 800f470:	e7ed      	b.n	800f44e <vTaskSwitchContext+0x6e>
 800f472:	b672      	cpsid	i
 800f474:	e7fe      	b.n	800f474 <vTaskSwitchContext+0x94>
 800f476:	4b15      	ldr	r3, [pc, #84]	; (800f4cc <vTaskSwitchContext+0xec>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	4d15      	ldr	r5, [pc, #84]	; (800f4d0 <vTaskSwitchContext+0xf0>)
 800f47c:	0099      	lsls	r1, r3, #2
 800f47e:	18ca      	adds	r2, r1, r3
 800f480:	0090      	lsls	r0, r2, #2
 800f482:	1828      	adds	r0, r5, r0
 800f484:	6842      	ldr	r2, [r0, #4]
 800f486:	6854      	ldr	r4, [r2, #4]
 800f488:	6044      	str	r4, [r0, #4]
 800f48a:	18c9      	adds	r1, r1, r3
 800f48c:	008a      	lsls	r2, r1, #2
 800f48e:	3208      	adds	r2, #8
 800f490:	1952      	adds	r2, r2, r5
 800f492:	4294      	cmp	r4, r2
 800f494:	d009      	beq.n	800f4aa <vTaskSwitchContext+0xca>
 800f496:	009a      	lsls	r2, r3, #2
 800f498:	18d3      	adds	r3, r2, r3
 800f49a:	009a      	lsls	r2, r3, #2
 800f49c:	4b0c      	ldr	r3, [pc, #48]	; (800f4d0 <vTaskSwitchContext+0xf0>)
 800f49e:	189b      	adds	r3, r3, r2
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	68da      	ldr	r2, [r3, #12]
 800f4a4:	4b07      	ldr	r3, [pc, #28]	; (800f4c4 <vTaskSwitchContext+0xe4>)
 800f4a6:	601a      	str	r2, [r3, #0]
}
 800f4a8:	e7a2      	b.n	800f3f0 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f4aa:	6860      	ldr	r0, [r4, #4]
 800f4ac:	2114      	movs	r1, #20
 800f4ae:	4359      	muls	r1, r3
 800f4b0:	186a      	adds	r2, r5, r1
 800f4b2:	6050      	str	r0, [r2, #4]
 800f4b4:	e7ef      	b.n	800f496 <vTaskSwitchContext+0xb6>
 800f4b6:	46c0      	nop			; (mov r8, r8)
 800f4b8:	200015b0 	.word	0x200015b0
 800f4bc:	20001630 	.word	0x20001630
 800f4c0:	200015a4 	.word	0x200015a4
 800f4c4:	2000150c 	.word	0x2000150c
 800f4c8:	0801a484 	.word	0x0801a484
 800f4cc:	200015bc 	.word	0x200015bc
 800f4d0:	20001518 	.word	0x20001518

0800f4d4 <vTaskPlaceOnEventList>:
{
 800f4d4:	b570      	push	{r4, r5, r6, lr}
 800f4d6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	d101      	bne.n	800f4e0 <vTaskPlaceOnEventList+0xc>
 800f4dc:	b672      	cpsid	i
 800f4de:	e7fe      	b.n	800f4de <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f4e0:	4d0b      	ldr	r5, [pc, #44]	; (800f510 <vTaskPlaceOnEventList+0x3c>)
 800f4e2:	6829      	ldr	r1, [r5, #0]
 800f4e4:	3118      	adds	r1, #24
 800f4e6:	f7ff f801 	bl	800e4ec <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f4ea:	6828      	ldr	r0, [r5, #0]
 800f4ec:	3004      	adds	r0, #4
 800f4ee:	f7ff f815 	bl	800e51c <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f4f2:	1c63      	adds	r3, r4, #1
 800f4f4:	d005      	beq.n	800f502 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800f4f6:	4b07      	ldr	r3, [pc, #28]	; (800f514 <vTaskPlaceOnEventList+0x40>)
 800f4f8:	6818      	ldr	r0, [r3, #0]
 800f4fa:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f4fc:	f7ff fc5e 	bl	800edbc <prvAddCurrentTaskToDelayedList>
}
 800f500:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f502:	4b03      	ldr	r3, [pc, #12]	; (800f510 <vTaskPlaceOnEventList+0x3c>)
 800f504:	6819      	ldr	r1, [r3, #0]
 800f506:	3104      	adds	r1, #4
 800f508:	4803      	ldr	r0, [pc, #12]	; (800f518 <vTaskPlaceOnEventList+0x44>)
 800f50a:	f7fe ffe3 	bl	800e4d4 <vListInsertEnd>
 800f50e:	e7f7      	b.n	800f500 <vTaskPlaceOnEventList+0x2c>
 800f510:	2000150c 	.word	0x2000150c
 800f514:	2000162c 	.word	0x2000162c
 800f518:	20001604 	.word	0x20001604

0800f51c <vTaskPlaceOnEventListRestricted>:
	{
 800f51c:	b570      	push	{r4, r5, r6, lr}
 800f51e:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800f520:	2800      	cmp	r0, #0
 800f522:	d101      	bne.n	800f528 <vTaskPlaceOnEventListRestricted+0xc>
 800f524:	b672      	cpsid	i
 800f526:	e7fe      	b.n	800f526 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f528:	4c07      	ldr	r4, [pc, #28]	; (800f548 <vTaskPlaceOnEventListRestricted+0x2c>)
 800f52a:	6821      	ldr	r1, [r4, #0]
 800f52c:	3118      	adds	r1, #24
 800f52e:	f7fe ffd1 	bl	800e4d4 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f532:	6820      	ldr	r0, [r4, #0]
 800f534:	3004      	adds	r0, #4
 800f536:	f7fe fff1 	bl	800e51c <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f53a:	4b04      	ldr	r3, [pc, #16]	; (800f54c <vTaskPlaceOnEventListRestricted+0x30>)
 800f53c:	6818      	ldr	r0, [r3, #0]
 800f53e:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f540:	f7ff fc3c 	bl	800edbc <prvAddCurrentTaskToDelayedList>
	}
 800f544:	bd70      	pop	{r4, r5, r6, pc}
 800f546:	46c0      	nop			; (mov r8, r8)
 800f548:	2000150c 	.word	0x2000150c
 800f54c:	2000162c 	.word	0x2000162c

0800f550 <xTaskRemoveFromEventList>:
{
 800f550:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f552:	68c3      	ldr	r3, [r0, #12]
 800f554:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f556:	2c00      	cmp	r4, #0
 800f558:	d101      	bne.n	800f55e <xTaskRemoveFromEventList+0xe>
 800f55a:	b672      	cpsid	i
 800f55c:	e7fe      	b.n	800f55c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f55e:	0025      	movs	r5, r4
 800f560:	3518      	adds	r5, #24
 800f562:	0028      	movs	r0, r5
 800f564:	f7fe ffda 	bl	800e51c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f568:	4b14      	ldr	r3, [pc, #80]	; (800f5bc <xTaskRemoveFromEventList+0x6c>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d11d      	bne.n	800f5ac <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f570:	1d25      	adds	r5, r4, #4
 800f572:	0028      	movs	r0, r5
 800f574:	f7fe ffd2 	bl	800e51c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f578:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f57a:	4b11      	ldr	r3, [pc, #68]	; (800f5c0 <xTaskRemoveFromEventList+0x70>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d901      	bls.n	800f586 <xTaskRemoveFromEventList+0x36>
 800f582:	4b0f      	ldr	r3, [pc, #60]	; (800f5c0 <xTaskRemoveFromEventList+0x70>)
 800f584:	601a      	str	r2, [r3, #0]
 800f586:	0093      	lsls	r3, r2, #2
 800f588:	189b      	adds	r3, r3, r2
 800f58a:	0098      	lsls	r0, r3, #2
 800f58c:	4b0d      	ldr	r3, [pc, #52]	; (800f5c4 <xTaskRemoveFromEventList+0x74>)
 800f58e:	18c0      	adds	r0, r0, r3
 800f590:	0029      	movs	r1, r5
 800f592:	f7fe ff9f 	bl	800e4d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f596:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f598:	4b0b      	ldr	r3, [pc, #44]	; (800f5c8 <xTaskRemoveFromEventList+0x78>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d909      	bls.n	800f5b6 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800f5a2:	4b0a      	ldr	r3, [pc, #40]	; (800f5cc <xTaskRemoveFromEventList+0x7c>)
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800f5a8:	2001      	movs	r0, #1
}
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f5ac:	0029      	movs	r1, r5
 800f5ae:	4808      	ldr	r0, [pc, #32]	; (800f5d0 <xTaskRemoveFromEventList+0x80>)
 800f5b0:	f7fe ff90 	bl	800e4d4 <vListInsertEnd>
 800f5b4:	e7ef      	b.n	800f596 <xTaskRemoveFromEventList+0x46>
		xReturn = pdFALSE;
 800f5b6:	2000      	movs	r0, #0
	return xReturn;
 800f5b8:	e7f7      	b.n	800f5aa <xTaskRemoveFromEventList+0x5a>
 800f5ba:	46c0      	nop			; (mov r8, r8)
 800f5bc:	200015b0 	.word	0x200015b0
 800f5c0:	200015bc 	.word	0x200015bc
 800f5c4:	20001518 	.word	0x20001518
 800f5c8:	2000150c 	.word	0x2000150c
 800f5cc:	20001630 	.word	0x20001630
 800f5d0:	200015ec 	.word	0x200015ec

0800f5d4 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	d006      	beq.n	800f5e6 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f5d8:	4b04      	ldr	r3, [pc, #16]	; (800f5ec <vTaskSetTimeOutState+0x18>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f5de:	4b04      	ldr	r3, [pc, #16]	; (800f5f0 <vTaskSetTimeOutState+0x1c>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	6043      	str	r3, [r0, #4]
}
 800f5e4:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800f5e6:	b672      	cpsid	i
 800f5e8:	e7fe      	b.n	800f5e8 <vTaskSetTimeOutState+0x14>
 800f5ea:	46c0      	nop			; (mov r8, r8)
 800f5ec:	200015e8 	.word	0x200015e8
 800f5f0:	2000162c 	.word	0x2000162c

0800f5f4 <xTaskCheckForTimeOut>:
{
 800f5f4:	b570      	push	{r4, r5, r6, lr}
 800f5f6:	0004      	movs	r4, r0
 800f5f8:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	d003      	beq.n	800f606 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800f5fe:	2900      	cmp	r1, #0
 800f600:	d103      	bne.n	800f60a <xTaskCheckForTimeOut+0x16>
 800f602:	b672      	cpsid	i
 800f604:	e7fe      	b.n	800f604 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800f606:	b672      	cpsid	i
 800f608:	e7fe      	b.n	800f608 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800f60a:	f000 fc75 	bl	800fef8 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f60e:	4b11      	ldr	r3, [pc, #68]	; (800f654 <xTaskCheckForTimeOut+0x60>)
 800f610:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f612:	682b      	ldr	r3, [r5, #0]
 800f614:	1c5a      	adds	r2, r3, #1
 800f616:	d018      	beq.n	800f64a <xTaskCheckForTimeOut+0x56>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f618:	4a0f      	ldr	r2, [pc, #60]	; (800f658 <xTaskCheckForTimeOut+0x64>)
 800f61a:	6812      	ldr	r2, [r2, #0]
 800f61c:	6820      	ldr	r0, [r4, #0]
 800f61e:	4290      	cmp	r0, r2
 800f620:	d002      	beq.n	800f628 <xTaskCheckForTimeOut+0x34>
 800f622:	6862      	ldr	r2, [r4, #4]
 800f624:	428a      	cmp	r2, r1
 800f626:	d912      	bls.n	800f64e <xTaskCheckForTimeOut+0x5a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f628:	6862      	ldr	r2, [r4, #4]
 800f62a:	1a88      	subs	r0, r1, r2
 800f62c:	4283      	cmp	r3, r0
 800f62e:	d804      	bhi.n	800f63a <xTaskCheckForTimeOut+0x46>
			xReturn = pdTRUE;
 800f630:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800f632:	f000 fc6d 	bl	800ff10 <vPortExitCritical>
}
 800f636:	0020      	movs	r0, r4
 800f638:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f63a:	1a52      	subs	r2, r2, r1
 800f63c:	189b      	adds	r3, r3, r2
 800f63e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f640:	0020      	movs	r0, r4
 800f642:	f7ff ffc7 	bl	800f5d4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f646:	2400      	movs	r4, #0
 800f648:	e7f3      	b.n	800f632 <xTaskCheckForTimeOut+0x3e>
				xReturn = pdFALSE;
 800f64a:	2400      	movs	r4, #0
 800f64c:	e7f1      	b.n	800f632 <xTaskCheckForTimeOut+0x3e>
			xReturn = pdTRUE;
 800f64e:	2401      	movs	r4, #1
 800f650:	e7ef      	b.n	800f632 <xTaskCheckForTimeOut+0x3e>
 800f652:	46c0      	nop			; (mov r8, r8)
 800f654:	2000162c 	.word	0x2000162c
 800f658:	200015e8 	.word	0x200015e8

0800f65c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f65c:	4b01      	ldr	r3, [pc, #4]	; (800f664 <vTaskMissedYield+0x8>)
 800f65e:	2201      	movs	r2, #1
 800f660:	601a      	str	r2, [r3, #0]
}
 800f662:	4770      	bx	lr
 800f664:	20001630 	.word	0x20001630

0800f668 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f668:	4b06      	ldr	r3, [pc, #24]	; (800f684 <xTaskGetSchedulerState+0x1c>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d007      	beq.n	800f680 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f670:	4b05      	ldr	r3, [pc, #20]	; (800f688 <xTaskGetSchedulerState+0x20>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d001      	beq.n	800f67c <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 800f678:	2000      	movs	r0, #0
		return xReturn;
 800f67a:	e002      	b.n	800f682 <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 800f67c:	2002      	movs	r0, #2
 800f67e:	e000      	b.n	800f682 <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f680:	2001      	movs	r0, #1
	}
 800f682:	4770      	bx	lr
 800f684:	20001600 	.word	0x20001600
 800f688:	200015b0 	.word	0x200015b0

0800f68c <vTaskPriorityInherit>:
	{
 800f68c:	b570      	push	{r4, r5, r6, lr}
 800f68e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f690:	d01a      	beq.n	800f6c8 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f692:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f694:	4a19      	ldr	r2, [pc, #100]	; (800f6fc <vTaskPriorityInherit+0x70>)
 800f696:	6812      	ldr	r2, [r2, #0]
 800f698:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d214      	bcs.n	800f6c8 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f69e:	6982      	ldr	r2, [r0, #24]
 800f6a0:	2a00      	cmp	r2, #0
 800f6a2:	db05      	blt.n	800f6b0 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6a4:	4a15      	ldr	r2, [pc, #84]	; (800f6fc <vTaskPriorityInherit+0x70>)
 800f6a6:	6812      	ldr	r2, [r2, #0]
 800f6a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800f6aa:	2207      	movs	r2, #7
 800f6ac:	1a52      	subs	r2, r2, r1
 800f6ae:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f6b0:	009a      	lsls	r2, r3, #2
 800f6b2:	18d3      	adds	r3, r2, r3
 800f6b4:	009a      	lsls	r2, r3, #2
 800f6b6:	4b12      	ldr	r3, [pc, #72]	; (800f700 <vTaskPriorityInherit+0x74>)
 800f6b8:	18d2      	adds	r2, r2, r3
 800f6ba:	6963      	ldr	r3, [r4, #20]
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d004      	beq.n	800f6ca <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f6c0:	4b0e      	ldr	r3, [pc, #56]	; (800f6fc <vTaskPriorityInherit+0x70>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c6:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f6c8:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f6ca:	1d25      	adds	r5, r4, #4
 800f6cc:	0028      	movs	r0, r5
 800f6ce:	f7fe ff25 	bl	800e51c <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f6d2:	4b0a      	ldr	r3, [pc, #40]	; (800f6fc <vTaskPriorityInherit+0x70>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f6da:	4a0a      	ldr	r2, [pc, #40]	; (800f704 <vTaskPriorityInherit+0x78>)
 800f6dc:	6812      	ldr	r2, [r2, #0]
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d808      	bhi.n	800f6f4 <vTaskPriorityInherit+0x68>
 800f6e2:	009a      	lsls	r2, r3, #2
 800f6e4:	18d3      	adds	r3, r2, r3
 800f6e6:	0098      	lsls	r0, r3, #2
 800f6e8:	4b05      	ldr	r3, [pc, #20]	; (800f700 <vTaskPriorityInherit+0x74>)
 800f6ea:	18c0      	adds	r0, r0, r3
 800f6ec:	0029      	movs	r1, r5
 800f6ee:	f7fe fef1 	bl	800e4d4 <vListInsertEnd>
	}
 800f6f2:	e7e9      	b.n	800f6c8 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f6f4:	4a03      	ldr	r2, [pc, #12]	; (800f704 <vTaskPriorityInherit+0x78>)
 800f6f6:	6013      	str	r3, [r2, #0]
 800f6f8:	e7f3      	b.n	800f6e2 <vTaskPriorityInherit+0x56>
 800f6fa:	46c0      	nop			; (mov r8, r8)
 800f6fc:	2000150c 	.word	0x2000150c
 800f700:	20001518 	.word	0x20001518
 800f704:	200015bc 	.word	0x200015bc

0800f708 <xTaskPriorityDisinherit>:
	{
 800f708:	b570      	push	{r4, r5, r6, lr}
 800f70a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f70c:	d02a      	beq.n	800f764 <xTaskPriorityDisinherit+0x5c>
			configASSERT( pxTCB == pxCurrentTCB );
 800f70e:	4b18      	ldr	r3, [pc, #96]	; (800f770 <xTaskPriorityDisinherit+0x68>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4283      	cmp	r3, r0
 800f714:	d001      	beq.n	800f71a <xTaskPriorityDisinherit+0x12>
 800f716:	b672      	cpsid	i
 800f718:	e7fe      	b.n	800f718 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800f71a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d101      	bne.n	800f724 <xTaskPriorityDisinherit+0x1c>
 800f720:	b672      	cpsid	i
 800f722:	e7fe      	b.n	800f722 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800f724:	3b01      	subs	r3, #1
 800f726:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f728:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f72a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f72c:	428a      	cmp	r2, r1
 800f72e:	d01b      	beq.n	800f768 <xTaskPriorityDisinherit+0x60>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f730:	2b00      	cmp	r3, #0
 800f732:	d11b      	bne.n	800f76c <xTaskPriorityDisinherit+0x64>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f734:	1d05      	adds	r5, r0, #4
 800f736:	0028      	movs	r0, r5
 800f738:	f7fe fef0 	bl	800e51c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f73c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f73e:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f740:	2207      	movs	r2, #7
 800f742:	1ad2      	subs	r2, r2, r3
 800f744:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f746:	4a0b      	ldr	r2, [pc, #44]	; (800f774 <xTaskPriorityDisinherit+0x6c>)
 800f748:	6812      	ldr	r2, [r2, #0]
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d901      	bls.n	800f752 <xTaskPriorityDisinherit+0x4a>
 800f74e:	4a09      	ldr	r2, [pc, #36]	; (800f774 <xTaskPriorityDisinherit+0x6c>)
 800f750:	6013      	str	r3, [r2, #0]
 800f752:	2014      	movs	r0, #20
 800f754:	4358      	muls	r0, r3
 800f756:	4b08      	ldr	r3, [pc, #32]	; (800f778 <xTaskPriorityDisinherit+0x70>)
 800f758:	18c0      	adds	r0, r0, r3
 800f75a:	0029      	movs	r1, r5
 800f75c:	f7fe feba 	bl	800e4d4 <vListInsertEnd>
					xReturn = pdTRUE;
 800f760:	2001      	movs	r0, #1
 800f762:	e000      	b.n	800f766 <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
 800f764:	2000      	movs	r0, #0
	}
 800f766:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800f768:	2000      	movs	r0, #0
 800f76a:	e7fc      	b.n	800f766 <xTaskPriorityDisinherit+0x5e>
 800f76c:	2000      	movs	r0, #0
		return xReturn;
 800f76e:	e7fa      	b.n	800f766 <xTaskPriorityDisinherit+0x5e>
 800f770:	2000150c 	.word	0x2000150c
 800f774:	200015bc 	.word	0x200015bc
 800f778:	20001518 	.word	0x20001518

0800f77c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f77c:	b570      	push	{r4, r5, r6, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f782:	2300      	movs	r3, #0
 800f784:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f786:	4b28      	ldr	r3, [pc, #160]	; (800f828 <vTaskList+0xac>)
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f78c:	6818      	ldr	r0, [r3, #0]
 800f78e:	0140      	lsls	r0, r0, #5
 800f790:	f000 fc66 	bl	8010060 <pvPortMalloc>
 800f794:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800f796:	d045      	beq.n	800f824 <vTaskList+0xa8>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f798:	9903      	ldr	r1, [sp, #12]
 800f79a:	2200      	movs	r2, #0
 800f79c:	f7ff fdd0 	bl	800f340 <uxTaskGetSystemState>
 800f7a0:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	9302      	str	r3, [sp, #8]
 800f7a6:	e023      	b.n	800f7f0 <vTaskList+0x74>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d134      	bne.n	800f816 <vTaskList+0x9a>
				{
					case eReady:		cStatus = tskREADY_CHAR;
 800f7ac:	2552      	movs	r5, #82	; 0x52
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f7ae:	9b02      	ldr	r3, [sp, #8]
 800f7b0:	015b      	lsls	r3, r3, #5
 800f7b2:	18f3      	adds	r3, r6, r3
 800f7b4:	6859      	ldr	r1, [r3, #4]
 800f7b6:	0020      	movs	r0, r4
 800f7b8:	f7ff fb2a 	bl	800ee10 <prvWriteNameToBuffer>
 800f7bc:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f7be:	9b02      	ldr	r3, [sp, #8]
 800f7c0:	015b      	lsls	r3, r3, #5
 800f7c2:	18f3      	adds	r3, r6, r3
 800f7c4:	691b      	ldr	r3, [r3, #16]
 800f7c6:	9a02      	ldr	r2, [sp, #8]
 800f7c8:	0152      	lsls	r2, r2, #5
 800f7ca:	18b2      	adds	r2, r6, r2
 800f7cc:	8b91      	ldrh	r1, [r2, #28]
 800f7ce:	9a02      	ldr	r2, [sp, #8]
 800f7d0:	0152      	lsls	r2, r2, #5
 800f7d2:	18b2      	adds	r2, r6, r2
 800f7d4:	6892      	ldr	r2, [r2, #8]
 800f7d6:	9201      	str	r2, [sp, #4]
 800f7d8:	9100      	str	r1, [sp, #0]
 800f7da:	002a      	movs	r2, r5
 800f7dc:	4913      	ldr	r1, [pc, #76]	; (800f82c <vTaskList+0xb0>)
 800f7de:	f004 fd5f 	bl	80142a0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f7e2:	0020      	movs	r0, r4
 800f7e4:	f7f0 fc98 	bl	8000118 <strlen>
 800f7e8:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800f7ea:	9b02      	ldr	r3, [sp, #8]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	9302      	str	r3, [sp, #8]
 800f7f0:	9a02      	ldr	r2, [sp, #8]
 800f7f2:	9b03      	ldr	r3, [sp, #12]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d212      	bcs.n	800f81e <vTaskList+0xa2>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f7f8:	9b02      	ldr	r3, [sp, #8]
 800f7fa:	015b      	lsls	r3, r3, #5
 800f7fc:	18f3      	adds	r3, r6, r3
 800f7fe:	7b1b      	ldrb	r3, [r3, #12]
 800f800:	2b02      	cmp	r3, #2
 800f802:	d00a      	beq.n	800f81a <vTaskList+0x9e>
 800f804:	d9d0      	bls.n	800f7a8 <vTaskList+0x2c>
 800f806:	2b03      	cmp	r3, #3
 800f808:	d003      	beq.n	800f812 <vTaskList+0x96>
 800f80a:	2b04      	cmp	r3, #4
 800f80c:	d103      	bne.n	800f816 <vTaskList+0x9a>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f80e:	2544      	movs	r5, #68	; 0x44
										break;
 800f810:	e7cd      	b.n	800f7ae <vTaskList+0x32>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f812:	2553      	movs	r5, #83	; 0x53
										break;
 800f814:	e7cb      	b.n	800f7ae <vTaskList+0x32>
										cStatus = 0x00;
 800f816:	2500      	movs	r5, #0
										break;
 800f818:	e7c9      	b.n	800f7ae <vTaskList+0x32>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f81a:	2542      	movs	r5, #66	; 0x42
 800f81c:	e7c7      	b.n	800f7ae <vTaskList+0x32>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f81e:	0030      	movs	r0, r6
 800f820:	f000 fc96 	bl	8010150 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f824:	b004      	add	sp, #16
 800f826:	bd70      	pop	{r4, r5, r6, pc}
 800f828:	200015a8 	.word	0x200015a8
 800f82c:	0801a4b0 	.word	0x0801a4b0

0800f830 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f830:	b570      	push	{r4, r5, r6, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f836:	2300      	movs	r3, #0
 800f838:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f83a:	4b25      	ldr	r3, [pc, #148]	; (800f8d0 <vTaskGetRunTimeStats+0xa0>)
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f840:	6818      	ldr	r0, [r3, #0]
 800f842:	0140      	lsls	r0, r0, #5
 800f844:	f000 fc0c 	bl	8010060 <pvPortMalloc>
 800f848:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800f84a:	d03e      	beq.n	800f8ca <vTaskGetRunTimeStats+0x9a>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f84c:	9903      	ldr	r1, [sp, #12]
 800f84e:	aa01      	add	r2, sp, #4
 800f850:	f7ff fd76 	bl	800f340 <uxTaskGetSystemState>
 800f854:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f856:	2164      	movs	r1, #100	; 0x64
 800f858:	9801      	ldr	r0, [sp, #4]
 800f85a:	f7f0 fc6f 	bl	800013c <__udivsi3>
 800f85e:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f860:	2800      	cmp	r0, #0
 800f862:	d02f      	beq.n	800f8c4 <vTaskGetRunTimeStats+0x94>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f864:	2300      	movs	r3, #0
 800f866:	9302      	str	r3, [sp, #8]
 800f868:	e00d      	b.n	800f886 <vTaskGetRunTimeStats+0x56>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f86a:	9b02      	ldr	r3, [sp, #8]
 800f86c:	015b      	lsls	r3, r3, #5
 800f86e:	18f3      	adds	r3, r6, r3
 800f870:	699a      	ldr	r2, [r3, #24]
 800f872:	4918      	ldr	r1, [pc, #96]	; (800f8d4 <vTaskGetRunTimeStats+0xa4>)
 800f874:	f004 fd14 	bl	80142a0 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800f878:	0020      	movs	r0, r4
 800f87a:	f7f0 fc4d 	bl	8000118 <strlen>
 800f87e:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f880:	9b02      	ldr	r3, [sp, #8]
 800f882:	3301      	adds	r3, #1
 800f884:	9302      	str	r3, [sp, #8]
 800f886:	9a02      	ldr	r2, [sp, #8]
 800f888:	9b03      	ldr	r3, [sp, #12]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d21a      	bcs.n	800f8c4 <vTaskGetRunTimeStats+0x94>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f88e:	9b02      	ldr	r3, [sp, #8]
 800f890:	015b      	lsls	r3, r3, #5
 800f892:	18f3      	adds	r3, r6, r3
 800f894:	6998      	ldr	r0, [r3, #24]
 800f896:	9901      	ldr	r1, [sp, #4]
 800f898:	f7f0 fc50 	bl	800013c <__udivsi3>
 800f89c:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f89e:	9b02      	ldr	r3, [sp, #8]
 800f8a0:	015b      	lsls	r3, r3, #5
 800f8a2:	18f3      	adds	r3, r6, r3
 800f8a4:	6859      	ldr	r1, [r3, #4]
 800f8a6:	0020      	movs	r0, r4
 800f8a8:	f7ff fab2 	bl	800ee10 <prvWriteNameToBuffer>
 800f8ac:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800f8ae:	2d00      	cmp	r5, #0
 800f8b0:	d0db      	beq.n	800f86a <vTaskGetRunTimeStats+0x3a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f8b2:	9b02      	ldr	r3, [sp, #8]
 800f8b4:	015b      	lsls	r3, r3, #5
 800f8b6:	18f3      	adds	r3, r6, r3
 800f8b8:	699a      	ldr	r2, [r3, #24]
 800f8ba:	002b      	movs	r3, r5
 800f8bc:	4906      	ldr	r1, [pc, #24]	; (800f8d8 <vTaskGetRunTimeStats+0xa8>)
 800f8be:	f004 fcef 	bl	80142a0 <siprintf>
 800f8c2:	e7d9      	b.n	800f878 <vTaskGetRunTimeStats+0x48>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f8c4:	0030      	movs	r0, r6
 800f8c6:	f000 fc43 	bl	8010150 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8ca:	b004      	add	sp, #16
 800f8cc:	bd70      	pop	{r4, r5, r6, pc}
 800f8ce:	46c0      	nop			; (mov r8, r8)
 800f8d0:	200015a8 	.word	0x200015a8
 800f8d4:	0801a4a4 	.word	0x0801a4a4
 800f8d8:	0801a498 	.word	0x0801a498

0800f8dc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f8dc:	4b05      	ldr	r3, [pc, #20]	; (800f8f4 <pvTaskIncrementMutexHeldCount+0x18>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d004      	beq.n	800f8ee <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f8e4:	4b03      	ldr	r3, [pc, #12]	; (800f8f4 <pvTaskIncrementMutexHeldCount+0x18>)
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f8ee:	4b01      	ldr	r3, [pc, #4]	; (800f8f4 <pvTaskIncrementMutexHeldCount+0x18>)
 800f8f0:	6818      	ldr	r0, [r3, #0]
	}
 800f8f2:	4770      	bx	lr
 800f8f4:	2000150c 	.word	0x2000150c

0800f8f8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f8f8:	b570      	push	{r4, r5, r6, lr}
 800f8fa:	0005      	movs	r5, r0
 800f8fc:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f8fe:	f000 fafb 	bl	800fef8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f902:	4b20      	ldr	r3, [pc, #128]	; (800f984 <ulTaskNotifyTake+0x8c>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d106      	bne.n	800f91a <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f90c:	4b1d      	ldr	r3, [pc, #116]	; (800f984 <ulTaskNotifyTake+0x8c>)
 800f90e:	681a      	ldr	r2, [r3, #0]
 800f910:	235c      	movs	r3, #92	; 0x5c
 800f912:	2101      	movs	r1, #1
 800f914:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f916:	2c00      	cmp	r4, #0
 800f918:	d118      	bne.n	800f94c <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f91a:	f000 faf9 	bl	800ff10 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f91e:	f000 faeb 	bl	800fef8 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f922:	4b18      	ldr	r3, [pc, #96]	; (800f984 <ulTaskNotifyTake+0x8c>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f928:	2c00      	cmp	r4, #0
 800f92a:	d006      	beq.n	800f93a <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800f92c:	2d00      	cmp	r5, #0
 800f92e:	d123      	bne.n	800f978 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800f930:	4b14      	ldr	r3, [pc, #80]	; (800f984 <ulTaskNotifyTake+0x8c>)
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f936:	3b01      	subs	r3, #1
 800f938:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f93a:	4b12      	ldr	r3, [pc, #72]	; (800f984 <ulTaskNotifyTake+0x8c>)
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	235c      	movs	r3, #92	; 0x5c
 800f940:	2100      	movs	r1, #0
 800f942:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f944:	f000 fae4 	bl	800ff10 <vPortExitCritical>

		return ulReturn;
	}
 800f948:	0020      	movs	r0, r4
 800f94a:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f94c:	4b0d      	ldr	r3, [pc, #52]	; (800f984 <ulTaskNotifyTake+0x8c>)
 800f94e:	6818      	ldr	r0, [r3, #0]
 800f950:	3004      	adds	r0, #4
 800f952:	f7fe fde3 	bl	800e51c <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f956:	1c63      	adds	r3, r4, #1
 800f958:	d007      	beq.n	800f96a <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800f95a:	4b0b      	ldr	r3, [pc, #44]	; (800f988 <ulTaskNotifyTake+0x90>)
 800f95c:	6818      	ldr	r0, [r3, #0]
 800f95e:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f960:	f7ff fa2c 	bl	800edbc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f964:	f000 fabc 	bl	800fee0 <vPortYield>
 800f968:	e7d7      	b.n	800f91a <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f96a:	4b06      	ldr	r3, [pc, #24]	; (800f984 <ulTaskNotifyTake+0x8c>)
 800f96c:	6819      	ldr	r1, [r3, #0]
 800f96e:	3104      	adds	r1, #4
 800f970:	4806      	ldr	r0, [pc, #24]	; (800f98c <ulTaskNotifyTake+0x94>)
 800f972:	f7fe fdaf 	bl	800e4d4 <vListInsertEnd>
 800f976:	e7f5      	b.n	800f964 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f978:	4b02      	ldr	r3, [pc, #8]	; (800f984 <ulTaskNotifyTake+0x8c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2200      	movs	r2, #0
 800f97e:	659a      	str	r2, [r3, #88]	; 0x58
 800f980:	e7db      	b.n	800f93a <ulTaskNotifyTake+0x42>
 800f982:	46c0      	nop			; (mov r8, r8)
 800f984:	2000150c 	.word	0x2000150c
 800f988:	2000162c 	.word	0x2000162c
 800f98c:	20001604 	.word	0x20001604

0800f990 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f992:	0004      	movs	r4, r0
 800f994:	000e      	movs	r6, r1
 800f996:	0015      	movs	r5, r2
 800f998:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800f99a:	2800      	cmp	r0, #0
 800f99c:	d101      	bne.n	800f9a2 <xTaskGenericNotify+0x12>
 800f99e:	b672      	cpsid	i
 800f9a0:	e7fe      	b.n	800f9a0 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f9a2:	f000 faa9 	bl	800fef8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f9a6:	2f00      	cmp	r7, #0
 800f9a8:	d001      	beq.n	800f9ae <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f9aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f9ac:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f9ae:	225c      	movs	r2, #92	; 0x5c
 800f9b0:	5ca3      	ldrb	r3, [r4, r2]
 800f9b2:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800f9b4:	2102      	movs	r1, #2
 800f9b6:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800f9b8:	2d02      	cmp	r5, #2
 800f9ba:	d017      	beq.n	800f9ec <xTaskGenericNotify+0x5c>
 800f9bc:	d908      	bls.n	800f9d0 <xTaskGenericNotify+0x40>
 800f9be:	2d03      	cmp	r5, #3
 800f9c0:	d019      	beq.n	800f9f6 <xTaskGenericNotify+0x66>
 800f9c2:	2d04      	cmp	r5, #4
 800f9c4:	d106      	bne.n	800f9d4 <xTaskGenericNotify+0x44>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f9c6:	2b02      	cmp	r3, #2
 800f9c8:	d018      	beq.n	800f9fc <xTaskGenericNotify+0x6c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f9ca:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f9cc:	2501      	movs	r5, #1
 800f9ce:	e007      	b.n	800f9e0 <xTaskGenericNotify+0x50>
			switch( eAction )
 800f9d0:	2d01      	cmp	r5, #1
 800f9d2:	d001      	beq.n	800f9d8 <xTaskGenericNotify+0x48>
	BaseType_t xReturn = pdPASS;
 800f9d4:	2501      	movs	r5, #1
 800f9d6:	e003      	b.n	800f9e0 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 800f9d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f9da:	4316      	orrs	r6, r2
 800f9dc:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f9de:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d00d      	beq.n	800fa00 <xTaskGenericNotify+0x70>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f9e4:	f000 fa94 	bl	800ff10 <vPortExitCritical>

		return xReturn;
	}
 800f9e8:	0028      	movs	r0, r5
 800f9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800f9ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f9ee:	3201      	adds	r2, #1
 800f9f0:	65a2      	str	r2, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f9f2:	2501      	movs	r5, #1
					break;
 800f9f4:	e7f4      	b.n	800f9e0 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue = ulValue;
 800f9f6:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f9f8:	2501      	movs	r5, #1
					break;
 800f9fa:	e7f1      	b.n	800f9e0 <xTaskGenericNotify+0x50>
						xReturn = pdFAIL;
 800f9fc:	2500      	movs	r5, #0
 800f9fe:	e7ef      	b.n	800f9e0 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fa00:	1d26      	adds	r6, r4, #4
 800fa02:	0030      	movs	r0, r6
 800fa04:	f7fe fd8a 	bl	800e51c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fa08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fa0a:	4a0d      	ldr	r2, [pc, #52]	; (800fa40 <xTaskGenericNotify+0xb0>)
 800fa0c:	6812      	ldr	r2, [r2, #0]
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d901      	bls.n	800fa16 <xTaskGenericNotify+0x86>
 800fa12:	4a0b      	ldr	r2, [pc, #44]	; (800fa40 <xTaskGenericNotify+0xb0>)
 800fa14:	6013      	str	r3, [r2, #0]
 800fa16:	2014      	movs	r0, #20
 800fa18:	4358      	muls	r0, r3
 800fa1a:	4b0a      	ldr	r3, [pc, #40]	; (800fa44 <xTaskGenericNotify+0xb4>)
 800fa1c:	18c0      	adds	r0, r0, r3
 800fa1e:	0031      	movs	r1, r6
 800fa20:	f7fe fd58 	bl	800e4d4 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fa24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d001      	beq.n	800fa2e <xTaskGenericNotify+0x9e>
 800fa2a:	b672      	cpsid	i
 800fa2c:	e7fe      	b.n	800fa2c <xTaskGenericNotify+0x9c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fa30:	4b05      	ldr	r3, [pc, #20]	; (800fa48 <xTaskGenericNotify+0xb8>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d9d4      	bls.n	800f9e4 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 800fa3a:	f000 fa51 	bl	800fee0 <vPortYield>
 800fa3e:	e7d1      	b.n	800f9e4 <xTaskGenericNotify+0x54>
 800fa40:	200015bc 	.word	0x200015bc
 800fa44:	20001518 	.word	0x20001518
 800fa48:	2000150c 	.word	0x2000150c

0800fa4c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa4c:	4b06      	ldr	r3, [pc, #24]	; (800fa68 <prvGetNextExpireTime+0x1c>)
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	6813      	ldr	r3, [r2, #0]
 800fa52:	4259      	negs	r1, r3
 800fa54:	414b      	adcs	r3, r1
 800fa56:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d102      	bne.n	800fa62 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa5c:	68d3      	ldr	r3, [r2, #12]
 800fa5e:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
	}

	return xNextExpireTime;
}
 800fa60:	4770      	bx	lr
		xNextExpireTime = ( TickType_t ) 0U;
 800fa62:	2000      	movs	r0, #0
	return xNextExpireTime;
 800fa64:	e7fc      	b.n	800fa60 <prvGetNextExpireTime+0x14>
 800fa66:	46c0      	nop			; (mov r8, r8)
 800fa68:	20001634 	.word	0x20001634

0800fa6c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fa6c:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fa6e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa70:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fa72:	4291      	cmp	r1, r2
 800fa74:	d80c      	bhi.n	800fa90 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fa76:	1ad2      	subs	r2, r2, r3
 800fa78:	6983      	ldr	r3, [r0, #24]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d301      	bcc.n	800fa82 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fa7e:	2001      	movs	r0, #1
 800fa80:	e010      	b.n	800faa4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fa82:	1d01      	adds	r1, r0, #4
 800fa84:	4b09      	ldr	r3, [pc, #36]	; (800faac <prvInsertTimerInActiveList+0x40>)
 800fa86:	6818      	ldr	r0, [r3, #0]
 800fa88:	f7fe fd30 	bl	800e4ec <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	e009      	b.n	800faa4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d201      	bcs.n	800fa98 <prvInsertTimerInActiveList+0x2c>
 800fa94:	4299      	cmp	r1, r3
 800fa96:	d206      	bcs.n	800faa6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa98:	1d01      	adds	r1, r0, #4
 800fa9a:	4b05      	ldr	r3, [pc, #20]	; (800fab0 <prvInsertTimerInActiveList+0x44>)
 800fa9c:	6818      	ldr	r0, [r3, #0]
 800fa9e:	f7fe fd25 	bl	800e4ec <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800faa2:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800faa4:	bd10      	pop	{r4, pc}
			xProcessTimerNow = pdTRUE;
 800faa6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800faa8:	e7fc      	b.n	800faa4 <prvInsertTimerInActiveList+0x38>
 800faaa:	46c0      	nop			; (mov r8, r8)
 800faac:	20001638 	.word	0x20001638
 800fab0:	20001634 	.word	0x20001634

0800fab4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fab4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fab6:	f000 fa1f 	bl	800fef8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800faba:	4b11      	ldr	r3, [pc, #68]	; (800fb00 <prvCheckForValidListAndQueue+0x4c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d002      	beq.n	800fac8 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fac2:	f000 fa25 	bl	800ff10 <vPortExitCritical>
}
 800fac6:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800fac8:	4d0e      	ldr	r5, [pc, #56]	; (800fb04 <prvCheckForValidListAndQueue+0x50>)
 800faca:	0028      	movs	r0, r5
 800facc:	f7fe fcf4 	bl	800e4b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fad0:	4c0d      	ldr	r4, [pc, #52]	; (800fb08 <prvCheckForValidListAndQueue+0x54>)
 800fad2:	0020      	movs	r0, r4
 800fad4:	f7fe fcf0 	bl	800e4b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fad8:	4b0c      	ldr	r3, [pc, #48]	; (800fb0c <prvCheckForValidListAndQueue+0x58>)
 800fada:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fadc:	4b0c      	ldr	r3, [pc, #48]	; (800fb10 <prvCheckForValidListAndQueue+0x5c>)
 800fade:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800fae0:	2200      	movs	r2, #0
 800fae2:	2110      	movs	r1, #16
 800fae4:	2004      	movs	r0, #4
 800fae6:	f7fe fe0c 	bl	800e702 <xQueueGenericCreate>
 800faea:	4b05      	ldr	r3, [pc, #20]	; (800fb00 <prvCheckForValidListAndQueue+0x4c>)
 800faec:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800faee:	2800      	cmp	r0, #0
 800faf0:	d101      	bne.n	800faf6 <prvCheckForValidListAndQueue+0x42>
 800faf2:	b672      	cpsid	i
 800faf4:	e7fe      	b.n	800faf4 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800faf6:	4907      	ldr	r1, [pc, #28]	; (800fb14 <prvCheckForValidListAndQueue+0x60>)
 800faf8:	f7ff f83a 	bl	800eb70 <vQueueAddToRegistry>
 800fafc:	e7e1      	b.n	800fac2 <prvCheckForValidListAndQueue+0xe>
 800fafe:	46c0      	nop			; (mov r8, r8)
 800fb00:	20001668 	.word	0x20001668
 800fb04:	2000163c 	.word	0x2000163c
 800fb08:	20001650 	.word	0x20001650
 800fb0c:	20001634 	.word	0x20001634
 800fb10:	20001638 	.word	0x20001638
 800fb14:	0801a4f0 	.word	0x0801a4f0

0800fb18 <xTimerCreateTimerTask>:
{
 800fb18:	b500      	push	{lr}
 800fb1a:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800fb1c:	f7ff ffca 	bl	800fab4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800fb20:	4b0a      	ldr	r3, [pc, #40]	; (800fb4c <xTimerCreateTimerTask+0x34>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00d      	beq.n	800fb44 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800fb28:	2300      	movs	r3, #0
 800fb2a:	9303      	str	r3, [sp, #12]
 800fb2c:	9302      	str	r3, [sp, #8]
 800fb2e:	9301      	str	r3, [sp, #4]
 800fb30:	3303      	adds	r3, #3
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	2300      	movs	r3, #0
 800fb36:	22a0      	movs	r2, #160	; 0xa0
 800fb38:	4905      	ldr	r1, [pc, #20]	; (800fb50 <xTimerCreateTimerTask+0x38>)
 800fb3a:	4806      	ldr	r0, [pc, #24]	; (800fb54 <xTimerCreateTimerTask+0x3c>)
 800fb3c:	f7ff f97a 	bl	800ee34 <xTaskGenericCreate>
	configASSERT( xReturn );
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d101      	bne.n	800fb48 <xTimerCreateTimerTask+0x30>
 800fb44:	b672      	cpsid	i
 800fb46:	e7fe      	b.n	800fb46 <xTimerCreateTimerTask+0x2e>
}
 800fb48:	b005      	add	sp, #20
 800fb4a:	bd00      	pop	{pc}
 800fb4c:	20001668 	.word	0x20001668
 800fb50:	0801a4f8 	.word	0x0801a4f8
 800fb54:	0800fdfd 	.word	0x0800fdfd

0800fb58 <xTimerCreate>:
{
 800fb58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb5a:	46c6      	mov	lr, r8
 800fb5c:	b500      	push	{lr}
 800fb5e:	4680      	mov	r8, r0
 800fb60:	000d      	movs	r5, r1
 800fb62:	0017      	movs	r7, r2
 800fb64:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800fb66:	2900      	cmp	r1, #0
 800fb68:	d014      	beq.n	800fb94 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800fb6a:	202c      	movs	r0, #44	; 0x2c
 800fb6c:	f000 fa78 	bl	8010060 <pvPortMalloc>
 800fb70:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800fb72:	d00b      	beq.n	800fb8c <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800fb74:	f7ff ff9e 	bl	800fab4 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800fb78:	4643      	mov	r3, r8
 800fb7a:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fb7c:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800fb7e:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800fb80:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fb82:	9b06      	ldr	r3, [sp, #24]
 800fb84:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fb86:	1d20      	adds	r0, r4, #4
 800fb88:	f7fe fca1 	bl	800e4ce <vListInitialiseItem>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800fb8c:	2d00      	cmp	r5, #0
 800fb8e:	d103      	bne.n	800fb98 <xTimerCreate+0x40>
 800fb90:	b672      	cpsid	i
 800fb92:	e7fe      	b.n	800fb92 <xTimerCreate+0x3a>
		pxNewTimer = NULL;
 800fb94:	2400      	movs	r4, #0
 800fb96:	e7f9      	b.n	800fb8c <xTimerCreate+0x34>
}
 800fb98:	0020      	movs	r0, r4
 800fb9a:	bc04      	pop	{r2}
 800fb9c:	4690      	mov	r8, r2
 800fb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fba0 <xTimerGenericCommand>:
{
 800fba0:	b530      	push	{r4, r5, lr}
 800fba2:	b085      	sub	sp, #20
 800fba4:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800fba6:	4b13      	ldr	r3, [pc, #76]	; (800fbf4 <xTimerGenericCommand+0x54>)
 800fba8:	681c      	ldr	r4, [r3, #0]
 800fbaa:	2c00      	cmp	r4, #0
 800fbac:	d020      	beq.n	800fbf0 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800fbae:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fbb0:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fbb2:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fbb4:	2905      	cmp	r1, #5
 800fbb6:	dc13      	bgt.n	800fbe0 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fbb8:	f7ff fd56 	bl	800f668 <xTaskGetSchedulerState>
 800fbbc:	2802      	cmp	r0, #2
 800fbbe:	d007      	beq.n	800fbd0 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fbc0:	4b0c      	ldr	r3, [pc, #48]	; (800fbf4 <xTimerGenericCommand+0x54>)
 800fbc2:	6818      	ldr	r0, [r3, #0]
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	4669      	mov	r1, sp
 800fbca:	f7fe fdd7 	bl	800e77c <xQueueGenericSend>
 800fbce:	e00d      	b.n	800fbec <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fbd0:	4b08      	ldr	r3, [pc, #32]	; (800fbf4 <xTimerGenericCommand+0x54>)
 800fbd2:	6818      	ldr	r0, [r3, #0]
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	9a08      	ldr	r2, [sp, #32]
 800fbd8:	4669      	mov	r1, sp
 800fbda:	f7fe fdcf 	bl	800e77c <xQueueGenericSend>
 800fbde:	e005      	b.n	800fbec <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	002a      	movs	r2, r5
 800fbe4:	4669      	mov	r1, sp
 800fbe6:	0020      	movs	r0, r4
 800fbe8:	f7fe fe57 	bl	800e89a <xQueueGenericSendFromISR>
}
 800fbec:	b005      	add	sp, #20
 800fbee:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800fbf0:	2000      	movs	r0, #0
	return xReturn;
 800fbf2:	e7fb      	b.n	800fbec <xTimerGenericCommand+0x4c>
 800fbf4:	20001668 	.word	0x20001668

0800fbf8 <prvSwitchTimerLists>:
{
 800fbf8:	b570      	push	{r4, r5, r6, lr}
 800fbfa:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbfc:	4b17      	ldr	r3, [pc, #92]	; (800fc5c <prvSwitchTimerLists+0x64>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	2a00      	cmp	r2, #0
 800fc04:	d023      	beq.n	800fc4e <prvSwitchTimerLists+0x56>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc0a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc0c:	1d25      	adds	r5, r4, #4
 800fc0e:	0028      	movs	r0, r5
 800fc10:	f7fe fc84 	bl	800e51c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc14:	0020      	movs	r0, r4
 800fc16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc18:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fc1a:	69e3      	ldr	r3, [r4, #28]
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d1ed      	bne.n	800fbfc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fc20:	69a3      	ldr	r3, [r4, #24]
 800fc22:	199b      	adds	r3, r3, r6
			if( xReloadTime > xNextExpireTime )
 800fc24:	429e      	cmp	r6, r3
 800fc26:	d207      	bcs.n	800fc38 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fc28:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc2a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc2c:	4b0b      	ldr	r3, [pc, #44]	; (800fc5c <prvSwitchTimerLists+0x64>)
 800fc2e:	6818      	ldr	r0, [r3, #0]
 800fc30:	0029      	movs	r1, r5
 800fc32:	f7fe fc5b 	bl	800e4ec <vListInsert>
 800fc36:	e7e1      	b.n	800fbfc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc38:	2300      	movs	r3, #0
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	0032      	movs	r2, r6
 800fc3e:	2100      	movs	r1, #0
 800fc40:	0020      	movs	r0, r4
 800fc42:	f7ff ffad 	bl	800fba0 <xTimerGenericCommand>
				configASSERT( xResult );
 800fc46:	2800      	cmp	r0, #0
 800fc48:	d1d8      	bne.n	800fbfc <prvSwitchTimerLists+0x4>
 800fc4a:	b672      	cpsid	i
 800fc4c:	e7fe      	b.n	800fc4c <prvSwitchTimerLists+0x54>
	pxCurrentTimerList = pxOverflowTimerList;
 800fc4e:	4a04      	ldr	r2, [pc, #16]	; (800fc60 <prvSwitchTimerLists+0x68>)
 800fc50:	4902      	ldr	r1, [pc, #8]	; (800fc5c <prvSwitchTimerLists+0x64>)
 800fc52:	6810      	ldr	r0, [r2, #0]
 800fc54:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800fc56:	6013      	str	r3, [r2, #0]
}
 800fc58:	b002      	add	sp, #8
 800fc5a:	bd70      	pop	{r4, r5, r6, pc}
 800fc5c:	20001634 	.word	0x20001634
 800fc60:	20001638 	.word	0x20001638

0800fc64 <prvSampleTimeNow>:
{
 800fc64:	b570      	push	{r4, r5, r6, lr}
 800fc66:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
 800fc68:	f7ff fa08 	bl	800f07c <xTaskGetTickCount>
 800fc6c:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800fc6e:	4b07      	ldr	r3, [pc, #28]	; (800fc8c <prvSampleTimeNow+0x28>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4283      	cmp	r3, r0
 800fc74:	d805      	bhi.n	800fc82 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800fc76:	2300      	movs	r3, #0
 800fc78:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800fc7a:	4b04      	ldr	r3, [pc, #16]	; (800fc8c <prvSampleTimeNow+0x28>)
 800fc7c:	601c      	str	r4, [r3, #0]
}
 800fc7e:	0020      	movs	r0, r4
 800fc80:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
 800fc82:	f7ff ffb9 	bl	800fbf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fc86:	2301      	movs	r3, #1
 800fc88:	602b      	str	r3, [r5, #0]
 800fc8a:	e7f6      	b.n	800fc7a <prvSampleTimeNow+0x16>
 800fc8c:	20001664 	.word	0x20001664

0800fc90 <prvProcessExpiredTimer>:
{
 800fc90:	b570      	push	{r4, r5, r6, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	0005      	movs	r5, r0
 800fc96:	000e      	movs	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc98:	4b11      	ldr	r3, [pc, #68]	; (800fce0 <prvProcessExpiredTimer+0x50>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fca0:	1d20      	adds	r0, r4, #4
 800fca2:	f7fe fc3b 	bl	800e51c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fca6:	69e3      	ldr	r3, [r4, #28]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d004      	beq.n	800fcb6 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fcac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcae:	0020      	movs	r0, r4
 800fcb0:	4798      	blx	r3
}
 800fcb2:	b002      	add	sp, #8
 800fcb4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800fcb6:	69a3      	ldr	r3, [r4, #24]
 800fcb8:	1959      	adds	r1, r3, r5
 800fcba:	002b      	movs	r3, r5
 800fcbc:	0032      	movs	r2, r6
 800fcbe:	0020      	movs	r0, r4
 800fcc0:	f7ff fed4 	bl	800fa6c <prvInsertTimerInActiveList>
 800fcc4:	2801      	cmp	r0, #1
 800fcc6:	d1f1      	bne.n	800fcac <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fcc8:	2300      	movs	r3, #0
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	002a      	movs	r2, r5
 800fcce:	2100      	movs	r1, #0
 800fcd0:	0020      	movs	r0, r4
 800fcd2:	f7ff ff65 	bl	800fba0 <xTimerGenericCommand>
			configASSERT( xResult );
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d1e8      	bne.n	800fcac <prvProcessExpiredTimer+0x1c>
 800fcda:	b672      	cpsid	i
 800fcdc:	e7fe      	b.n	800fcdc <prvProcessExpiredTimer+0x4c>
 800fcde:	46c0      	nop			; (mov r8, r8)
 800fce0:	20001634 	.word	0x20001634

0800fce4 <prvProcessTimerOrBlockTask>:
{
 800fce4:	b570      	push	{r4, r5, r6, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	0004      	movs	r4, r0
 800fcea:	000e      	movs	r6, r1
	vTaskSuspendAll();
 800fcec:	f7ff f9be 	bl	800f06c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fcf0:	a801      	add	r0, sp, #4
 800fcf2:	f7ff ffb7 	bl	800fc64 <prvSampleTimeNow>
 800fcf6:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fcf8:	9b01      	ldr	r3, [sp, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d118      	bne.n	800fd30 <prvProcessTimerOrBlockTask+0x4c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fcfe:	2e00      	cmp	r6, #0
 800fd00:	d101      	bne.n	800fd06 <prvProcessTimerOrBlockTask+0x22>
 800fd02:	42a0      	cmp	r0, r4
 800fd04:	d20a      	bcs.n	800fd1c <prvProcessTimerOrBlockTask+0x38>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fd06:	1b61      	subs	r1, r4, r5
 800fd08:	4b0b      	ldr	r3, [pc, #44]	; (800fd38 <prvProcessTimerOrBlockTask+0x54>)
 800fd0a:	6818      	ldr	r0, [r3, #0]
 800fd0c:	f7fe ff42 	bl	800eb94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fd10:	f7ff fa4a 	bl	800f1a8 <xTaskResumeAll>
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d008      	beq.n	800fd2a <prvProcessTimerOrBlockTask+0x46>
}
 800fd18:	b002      	add	sp, #8
 800fd1a:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 800fd1c:	f7ff fa44 	bl	800f1a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fd20:	0029      	movs	r1, r5
 800fd22:	0020      	movs	r0, r4
 800fd24:	f7ff ffb4 	bl	800fc90 <prvProcessExpiredTimer>
 800fd28:	e7f6      	b.n	800fd18 <prvProcessTimerOrBlockTask+0x34>
					portYIELD_WITHIN_API();
 800fd2a:	f000 f8d9 	bl	800fee0 <vPortYield>
 800fd2e:	e7f3      	b.n	800fd18 <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 800fd30:	f7ff fa3a 	bl	800f1a8 <xTaskResumeAll>
}
 800fd34:	e7f0      	b.n	800fd18 <prvProcessTimerOrBlockTask+0x34>
 800fd36:	46c0      	nop			; (mov r8, r8)
 800fd38:	20001668 	.word	0x20001668

0800fd3c <prvProcessReceivedCommands>:
{
 800fd3c:	b510      	push	{r4, lr}
 800fd3e:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd40:	e002      	b.n	800fd48 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd42:	9b04      	ldr	r3, [sp, #16]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	da10      	bge.n	800fd6a <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd48:	4b2a      	ldr	r3, [pc, #168]	; (800fdf4 <prvProcessReceivedCommands+0xb8>)
 800fd4a:	6818      	ldr	r0, [r3, #0]
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	2200      	movs	r2, #0
 800fd50:	a904      	add	r1, sp, #16
 800fd52:	f7fe fe2b 	bl	800e9ac <xQueueGenericReceive>
 800fd56:	2800      	cmp	r0, #0
 800fd58:	d04a      	beq.n	800fdf0 <prvProcessReceivedCommands+0xb4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fd5a:	9b04      	ldr	r3, [sp, #16]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	daf0      	bge.n	800fd42 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd60:	9b05      	ldr	r3, [sp, #20]
 800fd62:	9907      	ldr	r1, [sp, #28]
 800fd64:	9806      	ldr	r0, [sp, #24]
 800fd66:	4798      	blx	r3
 800fd68:	e7eb      	b.n	800fd42 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd6a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800fd6c:	6963      	ldr	r3, [r4, #20]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d002      	beq.n	800fd78 <prvProcessReceivedCommands+0x3c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd72:	1d20      	adds	r0, r4, #4
 800fd74:	f7fe fbd2 	bl	800e51c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd78:	a803      	add	r0, sp, #12
 800fd7a:	f7ff ff73 	bl	800fc64 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800fd7e:	9b04      	ldr	r3, [sp, #16]
 800fd80:	2b09      	cmp	r3, #9
 800fd82:	d8e1      	bhi.n	800fd48 <prvProcessReceivedCommands+0xc>
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	491c      	ldr	r1, [pc, #112]	; (800fdf8 <prvProcessReceivedCommands+0xbc>)
 800fd88:	58cb      	ldr	r3, [r1, r3]
 800fd8a:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800fd8c:	9b05      	ldr	r3, [sp, #20]
 800fd8e:	69a2      	ldr	r2, [r4, #24]
 800fd90:	4694      	mov	ip, r2
 800fd92:	4463      	add	r3, ip
 800fd94:	0019      	movs	r1, r3
 800fd96:	9b05      	ldr	r3, [sp, #20]
 800fd98:	0002      	movs	r2, r0
 800fd9a:	0020      	movs	r0, r4
 800fd9c:	f7ff fe66 	bl	800fa6c <prvInsertTimerInActiveList>
 800fda0:	2801      	cmp	r0, #1
 800fda2:	d1d1      	bne.n	800fd48 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fda4:	0020      	movs	r0, r4
 800fda6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fda8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fdaa:	69e3      	ldr	r3, [r4, #28]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d1cb      	bne.n	800fd48 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fdb0:	9b05      	ldr	r3, [sp, #20]
 800fdb2:	69a1      	ldr	r1, [r4, #24]
 800fdb4:	468c      	mov	ip, r1
 800fdb6:	4463      	add	r3, ip
 800fdb8:	001a      	movs	r2, r3
 800fdba:	2300      	movs	r3, #0
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	2100      	movs	r1, #0
 800fdc0:	0020      	movs	r0, r4
 800fdc2:	f7ff feed 	bl	800fba0 <xTimerGenericCommand>
							configASSERT( xResult );
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d1be      	bne.n	800fd48 <prvProcessReceivedCommands+0xc>
 800fdca:	b672      	cpsid	i
 800fdcc:	e7fe      	b.n	800fdcc <prvProcessReceivedCommands+0x90>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fdce:	9905      	ldr	r1, [sp, #20]
 800fdd0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fdd2:	2900      	cmp	r1, #0
 800fdd4:	d006      	beq.n	800fde4 <prvProcessReceivedCommands+0xa8>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fdd6:	1809      	adds	r1, r1, r0
 800fdd8:	0003      	movs	r3, r0
 800fdda:	0002      	movs	r2, r0
 800fddc:	0020      	movs	r0, r4
 800fdde:	f7ff fe45 	bl	800fa6c <prvInsertTimerInActiveList>
					break;
 800fde2:	e7b1      	b.n	800fd48 <prvProcessReceivedCommands+0xc>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fde4:	b672      	cpsid	i
 800fde6:	e7fe      	b.n	800fde6 <prvProcessReceivedCommands+0xaa>
					vPortFree( pxTimer );
 800fde8:	0020      	movs	r0, r4
 800fdea:	f000 f9b1 	bl	8010150 <vPortFree>
					break;
 800fdee:	e7ab      	b.n	800fd48 <prvProcessReceivedCommands+0xc>
}
 800fdf0:	b008      	add	sp, #32
 800fdf2:	bd10      	pop	{r4, pc}
 800fdf4:	20001668 	.word	0x20001668
 800fdf8:	0801a4c8 	.word	0x0801a4c8

0800fdfc <prvTimerTask>:
{
 800fdfc:	b500      	push	{lr}
 800fdfe:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fe00:	a801      	add	r0, sp, #4
 800fe02:	f7ff fe23 	bl	800fa4c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fe06:	9901      	ldr	r1, [sp, #4]
 800fe08:	f7ff ff6c 	bl	800fce4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800fe0c:	f7ff ff96 	bl	800fd3c <prvProcessReceivedCommands>
 800fe10:	e7f6      	b.n	800fe00 <prvTimerTask+0x4>

0800fe12 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fe12:	b510      	push	{r4, lr}
 800fe14:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800fe16:	d101      	bne.n	800fe1c <pvTimerGetTimerID+0xa>
 800fe18:	b672      	cpsid	i
 800fe1a:	e7fe      	b.n	800fe1a <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800fe1c:	f000 f86c 	bl	800fef8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fe20:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800fe22:	f000 f875 	bl	800ff10 <vPortExitCritical>

	return pvReturn;
}
 800fe26:	0020      	movs	r0, r4
 800fe28:	bd10      	pop	{r4, pc}
	...

0800fe2c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fe2c:	4b03      	ldr	r3, [pc, #12]	; (800fe3c <prvTaskExitError+0x10>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	3301      	adds	r3, #1
 800fe32:	d001      	beq.n	800fe38 <prvTaskExitError+0xc>
 800fe34:	b672      	cpsid	i
 800fe36:	e7fe      	b.n	800fe36 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800fe38:	b672      	cpsid	i
 800fe3a:	e7fe      	b.n	800fe3a <prvTaskExitError+0xe>
 800fe3c:	200000dc 	.word	0x200000dc

0800fe40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800fe40:	4a06      	ldr	r2, [pc, #24]	; (800fe5c <pxCurrentTCBConst2>)
 800fe42:	6813      	ldr	r3, [r2, #0]
 800fe44:	6818      	ldr	r0, [r3, #0]
 800fe46:	3020      	adds	r0, #32
 800fe48:	f380 8809 	msr	PSP, r0
 800fe4c:	2002      	movs	r0, #2
 800fe4e:	f380 8814 	msr	CONTROL, r0
 800fe52:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800fe54:	46ae      	mov	lr, r5
 800fe56:	b662      	cpsie	i
 800fe58:	bd00      	pop	{pc}
 800fe5a:	46c0      	nop			; (mov r8, r8)

0800fe5c <pxCurrentTCBConst2>:
 800fe5c:	2000150c 	.word	0x2000150c

0800fe60 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800fe60:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe62:	4b06      	ldr	r3, [pc, #24]	; (800fe7c <prvSetupTimerInterrupt+0x1c>)
 800fe64:	6818      	ldr	r0, [r3, #0]
 800fe66:	21fa      	movs	r1, #250	; 0xfa
 800fe68:	0089      	lsls	r1, r1, #2
 800fe6a:	f7f0 f967 	bl	800013c <__udivsi3>
 800fe6e:	3801      	subs	r0, #1
 800fe70:	4b03      	ldr	r3, [pc, #12]	; (800fe80 <prvSetupTimerInterrupt+0x20>)
 800fe72:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800fe74:	4b03      	ldr	r3, [pc, #12]	; (800fe84 <prvSetupTimerInterrupt+0x24>)
 800fe76:	2207      	movs	r2, #7
 800fe78:	601a      	str	r2, [r3, #0]
}
 800fe7a:	bd10      	pop	{r4, pc}
 800fe7c:	200000c8 	.word	0x200000c8
 800fe80:	e000e014 	.word	0xe000e014
 800fe84:	e000e010 	.word	0xe000e010

0800fe88 <pxPortInitialiseStack>:
{
 800fe88:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fe8a:	1f03      	subs	r3, r0, #4
 800fe8c:	2480      	movs	r4, #128	; 0x80
 800fe8e:	0464      	lsls	r4, r4, #17
 800fe90:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800fe92:	3b04      	subs	r3, #4
 800fe94:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe96:	3b04      	subs	r3, #4
 800fe98:	4902      	ldr	r1, [pc, #8]	; (800fea4 <pxPortInitialiseStack+0x1c>)
 800fe9a:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe9c:	3b14      	subs	r3, #20
 800fe9e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800fea0:	3840      	subs	r0, #64	; 0x40
}
 800fea2:	bd10      	pop	{r4, pc}
 800fea4:	0800fe2d 	.word	0x0800fe2d

0800fea8 <SVC_Handler>:
}
 800fea8:	4770      	bx	lr
	...

0800feac <xPortStartScheduler>:
{
 800feac:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800feae:	4b0a      	ldr	r3, [pc, #40]	; (800fed8 <xPortStartScheduler+0x2c>)
 800feb0:	6819      	ldr	r1, [r3, #0]
 800feb2:	22ff      	movs	r2, #255	; 0xff
 800feb4:	0412      	lsls	r2, r2, #16
 800feb6:	430a      	orrs	r2, r1
 800feb8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800feba:	6819      	ldr	r1, [r3, #0]
 800febc:	22ff      	movs	r2, #255	; 0xff
 800febe:	0612      	lsls	r2, r2, #24
 800fec0:	430a      	orrs	r2, r1
 800fec2:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 800fec4:	f7ff ffcc 	bl	800fe60 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800fec8:	4b04      	ldr	r3, [pc, #16]	; (800fedc <xPortStartScheduler+0x30>)
 800feca:	2200      	movs	r2, #0
 800fecc:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800fece:	f7ff ffb7 	bl	800fe40 <vPortStartFirstTask>
	prvTaskExitError();
 800fed2:	f7ff ffab 	bl	800fe2c <prvTaskExitError>
 800fed6:	46c0      	nop			; (mov r8, r8)
 800fed8:	e000ed20 	.word	0xe000ed20
 800fedc:	200000dc 	.word	0x200000dc

0800fee0 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800fee0:	4b04      	ldr	r3, [pc, #16]	; (800fef4 <vPortYield+0x14>)
 800fee2:	2280      	movs	r2, #128	; 0x80
 800fee4:	0552      	lsls	r2, r2, #21
 800fee6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800fee8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800feec:	f3bf 8f6f 	isb	sy
}
 800fef0:	4770      	bx	lr
 800fef2:	46c0      	nop			; (mov r8, r8)
 800fef4:	e000ed04 	.word	0xe000ed04

0800fef8 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800fef8:	b672      	cpsid	i
    uxCriticalNesting++;
 800fefa:	4a04      	ldr	r2, [pc, #16]	; (800ff0c <vPortEnterCritical+0x14>)
 800fefc:	6813      	ldr	r3, [r2, #0]
 800fefe:	3301      	adds	r3, #1
 800ff00:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800ff02:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ff06:	f3bf 8f6f 	isb	sy
}
 800ff0a:	4770      	bx	lr
 800ff0c:	200000dc 	.word	0x200000dc

0800ff10 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ff10:	4b06      	ldr	r3, [pc, #24]	; (800ff2c <vPortExitCritical+0x1c>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d101      	bne.n	800ff1c <vPortExitCritical+0xc>
 800ff18:	b672      	cpsid	i
 800ff1a:	e7fe      	b.n	800ff1a <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	4a03      	ldr	r2, [pc, #12]	; (800ff2c <vPortExitCritical+0x1c>)
 800ff20:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d100      	bne.n	800ff28 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800ff26:	b662      	cpsie	i
}
 800ff28:	4770      	bx	lr
 800ff2a:	46c0      	nop			; (mov r8, r8)
 800ff2c:	200000dc 	.word	0x200000dc

0800ff30 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800ff30:	f3ef 8010 	mrs	r0, PRIMASK
 800ff34:	b672      	cpsid	i
 800ff36:	4770      	bx	lr
}
 800ff38:	2000      	movs	r0, #0

0800ff3a <vClearInterruptMaskFromISR>:
	__asm volatile(
 800ff3a:	f380 8810 	msr	PRIMASK, r0
 800ff3e:	4770      	bx	lr

0800ff40 <PendSV_Handler>:
	__asm volatile
 800ff40:	f3ef 8009 	mrs	r0, PSP
 800ff44:	4b0e      	ldr	r3, [pc, #56]	; (800ff80 <pxCurrentTCBConst>)
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	3820      	subs	r0, #32
 800ff4a:	6010      	str	r0, [r2, #0]
 800ff4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ff4e:	4644      	mov	r4, r8
 800ff50:	464d      	mov	r5, r9
 800ff52:	4656      	mov	r6, sl
 800ff54:	465f      	mov	r7, fp
 800ff56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ff58:	b508      	push	{r3, lr}
 800ff5a:	b672      	cpsid	i
 800ff5c:	f7ff fa40 	bl	800f3e0 <vTaskSwitchContext>
 800ff60:	b662      	cpsie	i
 800ff62:	bc0c      	pop	{r2, r3}
 800ff64:	6811      	ldr	r1, [r2, #0]
 800ff66:	6808      	ldr	r0, [r1, #0]
 800ff68:	3010      	adds	r0, #16
 800ff6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ff6c:	46a0      	mov	r8, r4
 800ff6e:	46a9      	mov	r9, r5
 800ff70:	46b2      	mov	sl, r6
 800ff72:	46bb      	mov	fp, r7
 800ff74:	f380 8809 	msr	PSP, r0
 800ff78:	3820      	subs	r0, #32
 800ff7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ff7c:	4718      	bx	r3
 800ff7e:	46c0      	nop			; (mov r8, r8)

0800ff80 <pxCurrentTCBConst>:
 800ff80:	2000150c 	.word	0x2000150c

0800ff84 <xPortSysTickHandler>:
{
 800ff84:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff86:	f7ff ffd3 	bl	800ff30 <ulSetInterruptMaskFromISR>
 800ff8a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800ff8c:	f7ff f882 	bl	800f094 <xTaskIncrementTick>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d003      	beq.n	800ff9c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800ff94:	4b03      	ldr	r3, [pc, #12]	; (800ffa4 <xPortSysTickHandler+0x20>)
 800ff96:	2280      	movs	r2, #128	; 0x80
 800ff98:	0552      	lsls	r2, r2, #21
 800ff9a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ff9c:	0020      	movs	r0, r4
 800ff9e:	f7ff ffcc 	bl	800ff3a <vClearInterruptMaskFromISR>
}
 800ffa2:	bd10      	pop	{r4, pc}
 800ffa4:	e000ed04 	.word	0xe000ed04

0800ffa8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 800ffa8:	4a11      	ldr	r2, [pc, #68]	; (800fff0 <prvHeapInit+0x48>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ffaa:	0753      	lsls	r3, r2, #29
 800ffac:	d01e      	beq.n	800ffec <prvHeapInit+0x44>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800ffae:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ffb0:	2307      	movs	r3, #7
 800ffb2:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800ffb4:	4b0f      	ldr	r3, [pc, #60]	; (800fff4 <prvHeapInit+0x4c>)
 800ffb6:	1a5b      	subs	r3, r3, r1
 800ffb8:	189b      	adds	r3, r3, r2
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ffba:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ffbc:	480e      	ldr	r0, [pc, #56]	; (800fff8 <prvHeapInit+0x50>)
 800ffbe:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ffc4:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800ffc6:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800ffc8:	2007      	movs	r0, #7
 800ffca:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800ffcc:	480b      	ldr	r0, [pc, #44]	; (800fffc <prvHeapInit+0x54>)
 800ffce:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800ffd0:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ffd2:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800ffd4:	1a99      	subs	r1, r3, r2
 800ffd6:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ffd8:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ffda:	4b09      	ldr	r3, [pc, #36]	; (8010000 <prvHeapInit+0x58>)
 800ffdc:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ffde:	4b09      	ldr	r3, [pc, #36]	; (8010004 <prvHeapInit+0x5c>)
 800ffe0:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ffe2:	4b09      	ldr	r3, [pc, #36]	; (8010008 <prvHeapInit+0x60>)
 800ffe4:	2280      	movs	r2, #128	; 0x80
 800ffe6:	0612      	lsls	r2, r2, #24
 800ffe8:	601a      	str	r2, [r3, #0]
}
 800ffea:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ffec:	4b01      	ldr	r3, [pc, #4]	; (800fff4 <prvHeapInit+0x4c>)
 800ffee:	e7e5      	b.n	800ffbc <prvHeapInit+0x14>
 800fff0:	20001670 	.word	0x20001670
 800fff4:	00004a38 	.word	0x00004a38
 800fff8:	200060b4 	.word	0x200060b4
 800fffc:	2000166c 	.word	0x2000166c
 8010000:	200060b0 	.word	0x200060b0
 8010004:	200060ac 	.word	0x200060ac
 8010008:	200060a8 	.word	0x200060a8

0801000c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801000c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801000e:	4b12      	ldr	r3, [pc, #72]	; (8010058 <prvInsertBlockIntoFreeList+0x4c>)
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	4282      	cmp	r2, r0
 8010014:	d319      	bcc.n	801004a <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010016:	6859      	ldr	r1, [r3, #4]
 8010018:	185c      	adds	r4, r3, r1
 801001a:	4284      	cmp	r4, r0
 801001c:	d103      	bne.n	8010026 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801001e:	6840      	ldr	r0, [r0, #4]
 8010020:	1809      	adds	r1, r1, r0
 8010022:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010024:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010026:	6841      	ldr	r1, [r0, #4]
 8010028:	1844      	adds	r4, r0, r1
 801002a:	42a2      	cmp	r2, r4
 801002c:	d111      	bne.n	8010052 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801002e:	4c0b      	ldr	r4, [pc, #44]	; (801005c <prvInsertBlockIntoFreeList+0x50>)
 8010030:	6824      	ldr	r4, [r4, #0]
 8010032:	42a2      	cmp	r2, r4
 8010034:	d00b      	beq.n	801004e <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010036:	6852      	ldr	r2, [r2, #4]
 8010038:	1889      	adds	r1, r1, r2
 801003a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	6812      	ldr	r2, [r2, #0]
 8010040:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010042:	4298      	cmp	r0, r3
 8010044:	d000      	beq.n	8010048 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010046:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010048:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801004a:	0013      	movs	r3, r2
 801004c:	e7e0      	b.n	8010010 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801004e:	6004      	str	r4, [r0, #0]
 8010050:	e7f7      	b.n	8010042 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010052:	6002      	str	r2, [r0, #0]
 8010054:	e7f5      	b.n	8010042 <prvInsertBlockIntoFreeList+0x36>
 8010056:	46c0      	nop			; (mov r8, r8)
 8010058:	200060b4 	.word	0x200060b4
 801005c:	2000166c 	.word	0x2000166c

08010060 <pvPortMalloc>:
{
 8010060:	b570      	push	{r4, r5, r6, lr}
 8010062:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010064:	f7ff f802 	bl	800f06c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010068:	4b34      	ldr	r3, [pc, #208]	; (801013c <pvPortMalloc+0xdc>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d00c      	beq.n	801008a <pvPortMalloc+0x2a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010070:	4b33      	ldr	r3, [pc, #204]	; (8010140 <pvPortMalloc+0xe0>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4223      	tst	r3, r4
 8010076:	d00b      	beq.n	8010090 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 8010078:	f7ff f896 	bl	800f1a8 <xTaskResumeAll>
void *pvReturn = NULL;
 801007c:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 801007e:	f7fd fb8b 	bl	800d798 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010082:	0773      	lsls	r3, r6, #29
 8010084:	d058      	beq.n	8010138 <pvPortMalloc+0xd8>
 8010086:	b672      	cpsid	i
 8010088:	e7fe      	b.n	8010088 <pvPortMalloc+0x28>
			prvHeapInit();
 801008a:	f7ff ff8d 	bl	800ffa8 <prvHeapInit>
 801008e:	e7ef      	b.n	8010070 <pvPortMalloc+0x10>
			if( xWantedSize > 0 )
 8010090:	2c00      	cmp	r4, #0
 8010092:	d009      	beq.n	80100a8 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8010094:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010096:	0763      	lsls	r3, r4, #29
 8010098:	d006      	beq.n	80100a8 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801009a:	2307      	movs	r3, #7
 801009c:	439c      	bics	r4, r3
 801009e:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100a0:	421c      	tst	r4, r3
 80100a2:	d001      	beq.n	80100a8 <pvPortMalloc+0x48>
 80100a4:	b672      	cpsid	i
 80100a6:	e7fe      	b.n	80100a6 <pvPortMalloc+0x46>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80100a8:	2c00      	cmp	r4, #0
 80100aa:	d006      	beq.n	80100ba <pvPortMalloc+0x5a>
 80100ac:	4b25      	ldr	r3, [pc, #148]	; (8010144 <pvPortMalloc+0xe4>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	42a3      	cmp	r3, r4
 80100b2:	d306      	bcc.n	80100c2 <pvPortMalloc+0x62>
				pxBlock = xStart.pxNextFreeBlock;
 80100b4:	4b24      	ldr	r3, [pc, #144]	; (8010148 <pvPortMalloc+0xe8>)
 80100b6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100b8:	e009      	b.n	80100ce <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 80100ba:	f7ff f875 	bl	800f1a8 <xTaskResumeAll>
void *pvReturn = NULL;
 80100be:	2600      	movs	r6, #0
 80100c0:	e7dd      	b.n	801007e <pvPortMalloc+0x1e>
	( void ) xTaskResumeAll();
 80100c2:	f7ff f871 	bl	800f1a8 <xTaskResumeAll>
void *pvReturn = NULL;
 80100c6:	2600      	movs	r6, #0
 80100c8:	e7d9      	b.n	801007e <pvPortMalloc+0x1e>
					pxPreviousBlock = pxBlock;
 80100ca:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80100cc:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100ce:	686a      	ldr	r2, [r5, #4]
 80100d0:	42a2      	cmp	r2, r4
 80100d2:	d202      	bcs.n	80100da <pvPortMalloc+0x7a>
 80100d4:	682a      	ldr	r2, [r5, #0]
 80100d6:	2a00      	cmp	r2, #0
 80100d8:	d1f7      	bne.n	80100ca <pvPortMalloc+0x6a>
				if( pxBlock != pxEnd )
 80100da:	4a18      	ldr	r2, [pc, #96]	; (801013c <pvPortMalloc+0xdc>)
 80100dc:	6812      	ldr	r2, [r2, #0]
 80100de:	42aa      	cmp	r2, r5
 80100e0:	d00c      	beq.n	80100fc <pvPortMalloc+0x9c>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80100e2:	681e      	ldr	r6, [r3, #0]
 80100e4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80100e6:	682a      	ldr	r2, [r5, #0]
 80100e8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80100ea:	686b      	ldr	r3, [r5, #4]
 80100ec:	1b1b      	subs	r3, r3, r4
 80100ee:	2b10      	cmp	r3, #16
 80100f0:	d90c      	bls.n	801010c <pvPortMalloc+0xac>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80100f2:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100f4:	0742      	lsls	r2, r0, #29
 80100f6:	d005      	beq.n	8010104 <pvPortMalloc+0xa4>
 80100f8:	b672      	cpsid	i
 80100fa:	e7fe      	b.n	80100fa <pvPortMalloc+0x9a>
	( void ) xTaskResumeAll();
 80100fc:	f7ff f854 	bl	800f1a8 <xTaskResumeAll>
void *pvReturn = NULL;
 8010100:	2600      	movs	r6, #0
 8010102:	e7bc      	b.n	801007e <pvPortMalloc+0x1e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010104:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010106:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010108:	f7ff ff80 	bl	801000c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801010c:	686a      	ldr	r2, [r5, #4]
 801010e:	490d      	ldr	r1, [pc, #52]	; (8010144 <pvPortMalloc+0xe4>)
 8010110:	680b      	ldr	r3, [r1, #0]
 8010112:	1a9b      	subs	r3, r3, r2
 8010114:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010116:	490d      	ldr	r1, [pc, #52]	; (801014c <pvPortMalloc+0xec>)
 8010118:	6809      	ldr	r1, [r1, #0]
 801011a:	428b      	cmp	r3, r1
 801011c:	d201      	bcs.n	8010122 <pvPortMalloc+0xc2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801011e:	490b      	ldr	r1, [pc, #44]	; (801014c <pvPortMalloc+0xec>)
 8010120:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010122:	4b07      	ldr	r3, [pc, #28]	; (8010140 <pvPortMalloc+0xe0>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4313      	orrs	r3, r2
 8010128:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801012a:	2300      	movs	r3, #0
 801012c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 801012e:	f7ff f83b 	bl	800f1a8 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010132:	2e00      	cmp	r6, #0
 8010134:	d1a5      	bne.n	8010082 <pvPortMalloc+0x22>
 8010136:	e7a2      	b.n	801007e <pvPortMalloc+0x1e>
}
 8010138:	0030      	movs	r0, r6
 801013a:	bd70      	pop	{r4, r5, r6, pc}
 801013c:	2000166c 	.word	0x2000166c
 8010140:	200060a8 	.word	0x200060a8
 8010144:	200060ac 	.word	0x200060ac
 8010148:	200060b4 	.word	0x200060b4
 801014c:	200060b0 	.word	0x200060b0

08010150 <vPortFree>:
{
 8010150:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 8010152:	2800      	cmp	r0, #0
 8010154:	d020      	beq.n	8010198 <vPortFree+0x48>
		puc -= xHeapStructSize;
 8010156:	0005      	movs	r5, r0
 8010158:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801015a:	686b      	ldr	r3, [r5, #4]
 801015c:	4a0f      	ldr	r2, [pc, #60]	; (801019c <vPortFree+0x4c>)
 801015e:	6812      	ldr	r2, [r2, #0]
 8010160:	421a      	tst	r2, r3
 8010162:	d101      	bne.n	8010168 <vPortFree+0x18>
 8010164:	b672      	cpsid	i
 8010166:	e7fe      	b.n	8010166 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010168:	0001      	movs	r1, r0
 801016a:	3908      	subs	r1, #8
 801016c:	6809      	ldr	r1, [r1, #0]
 801016e:	2900      	cmp	r1, #0
 8010170:	d001      	beq.n	8010176 <vPortFree+0x26>
 8010172:	b672      	cpsid	i
 8010174:	e7fe      	b.n	8010174 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010176:	3808      	subs	r0, #8
 8010178:	0004      	movs	r4, r0
 801017a:	4393      	bics	r3, r2
 801017c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 801017e:	f7fe ff75 	bl	800f06c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010182:	6863      	ldr	r3, [r4, #4]
 8010184:	4a06      	ldr	r2, [pc, #24]	; (80101a0 <vPortFree+0x50>)
 8010186:	6811      	ldr	r1, [r2, #0]
 8010188:	468c      	mov	ip, r1
 801018a:	4463      	add	r3, ip
 801018c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801018e:	0028      	movs	r0, r5
 8010190:	f7ff ff3c 	bl	801000c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8010194:	f7ff f808 	bl	800f1a8 <xTaskResumeAll>
}
 8010198:	bd70      	pop	{r4, r5, r6, pc}
 801019a:	46c0      	nop			; (mov r8, r8)
 801019c:	200060a8 	.word	0x200060a8
 80101a0:	200060ac 	.word	0x200060ac

080101a4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80101a4:	4770      	bx	lr

080101a6 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80101a6:	b510      	push	{r4, lr}
 80101a8:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80101aa:	f001 ff99 	bl	80120e0 <HAL_RCC_GetHCLKFreq>
 80101ae:	21fa      	movs	r1, #250	; 0xfa
 80101b0:	0089      	lsls	r1, r1, #2
 80101b2:	f7ef ffc3 	bl	800013c <__udivsi3>
 80101b6:	f000 fb59 	bl	801086c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80101ba:	2001      	movs	r0, #1
 80101bc:	2200      	movs	r2, #0
 80101be:	0021      	movs	r1, r4
 80101c0:	4240      	negs	r0, r0
 80101c2:	f000 fb0f 	bl	80107e4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80101c6:	2000      	movs	r0, #0
 80101c8:	bd10      	pop	{r4, pc}
	...

080101cc <HAL_Init>:
{
 80101cc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80101ce:	4a06      	ldr	r2, [pc, #24]	; (80101e8 <HAL_Init+0x1c>)
 80101d0:	6813      	ldr	r3, [r2, #0]
 80101d2:	2110      	movs	r1, #16
 80101d4:	430b      	orrs	r3, r1
 80101d6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80101d8:	2000      	movs	r0, #0
 80101da:	f7ff ffe4 	bl	80101a6 <HAL_InitTick>
  HAL_MspInit();
 80101de:	f7ff ffe1 	bl	80101a4 <HAL_MspInit>
}
 80101e2:	2000      	movs	r0, #0
 80101e4:	bd10      	pop	{r4, pc}
 80101e6:	46c0      	nop			; (mov r8, r8)
 80101e8:	40022000 	.word	0x40022000

080101ec <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80101ec:	4a02      	ldr	r2, [pc, #8]	; (80101f8 <HAL_IncTick+0xc>)
 80101ee:	6813      	ldr	r3, [r2, #0]
 80101f0:	3301      	adds	r3, #1
 80101f2:	6013      	str	r3, [r2, #0]
}
 80101f4:	4770      	bx	lr
 80101f6:	46c0      	nop			; (mov r8, r8)
 80101f8:	200060bc 	.word	0x200060bc

080101fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80101fc:	4b01      	ldr	r3, [pc, #4]	; (8010204 <HAL_GetTick+0x8>)
 80101fe:	6818      	ldr	r0, [r3, #0]
}
 8010200:	4770      	bx	lr
 8010202:	46c0      	nop			; (mov r8, r8)
 8010204:	200060bc 	.word	0x200060bc

08010208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010208:	b510      	push	{r4, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 801020e:	f7ff fff5 	bl	80101fc <HAL_GetTick>
 8010212:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010214:	f7ff fff2 	bl	80101fc <HAL_GetTick>
 8010218:	1b00      	subs	r0, r0, r4
 801021a:	9b01      	ldr	r3, [sp, #4]
 801021c:	4298      	cmp	r0, r3
 801021e:	d3f9      	bcc.n	8010214 <HAL_Delay+0xc>
  {
  }
}
 8010220:	b002      	add	sp, #8
 8010222:	bd10      	pop	{r4, pc}

08010224 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010224:	4b01      	ldr	r3, [pc, #4]	; (801022c <HAL_GetREVID+0x8>)
 8010226:	6818      	ldr	r0, [r3, #0]
 8010228:	0c00      	lsrs	r0, r0, #16
}
 801022a:	4770      	bx	lr
 801022c:	40015800 	.word	0x40015800

08010230 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010230:	4b02      	ldr	r3, [pc, #8]	; (801023c <HAL_GetDEVID+0xc>)
 8010232:	6818      	ldr	r0, [r3, #0]
 8010234:	0500      	lsls	r0, r0, #20
 8010236:	0d00      	lsrs	r0, r0, #20
}
 8010238:	4770      	bx	lr
 801023a:	46c0      	nop			; (mov r8, r8)
 801023c:	40015800 	.word	0x40015800

08010240 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8010240:	b570      	push	{r4, r5, r6, lr}
 8010242:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010244:	6803      	ldr	r3, [r0, #0]
 8010246:	689a      	ldr	r2, [r3, #8]
 8010248:	0752      	lsls	r2, r2, #29
 801024a:	d521      	bpl.n	8010290 <ADC_ConversionStop+0x50>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 801024c:	689a      	ldr	r2, [r3, #8]
 801024e:	0752      	lsls	r2, r2, #29
 8010250:	d506      	bpl.n	8010260 <ADC_ConversionStop+0x20>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010252:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010254:	0792      	lsls	r2, r2, #30
 8010256:	d403      	bmi.n	8010260 <ADC_ConversionStop+0x20>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8010258:	689a      	ldr	r2, [r3, #8]
 801025a:	2110      	movs	r1, #16
 801025c:	430a      	orrs	r2, r1
 801025e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8010260:	f7ff ffcc 	bl	80101fc <HAL_GetTick>
 8010264:	0005      	movs	r5, r0
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010266:	6823      	ldr	r3, [r4, #0]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	075b      	lsls	r3, r3, #29
 801026c:	d50e      	bpl.n	801028c <ADC_ConversionStop+0x4c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801026e:	f7ff ffc5 	bl	80101fc <HAL_GetTick>
 8010272:	1b40      	subs	r0, r0, r5
 8010274:	2802      	cmp	r0, #2
 8010276:	d9f6      	bls.n	8010266 <ADC_ConversionStop+0x26>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010278:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801027a:	2210      	movs	r2, #16
 801027c:	4313      	orrs	r3, r2
 801027e:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010280:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010282:	3a0f      	subs	r2, #15
 8010284:	4313      	orrs	r3, r2
 8010286:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8010288:	2001      	movs	r0, #1
 801028a:	e002      	b.n	8010292 <ADC_ConversionStop+0x52>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 801028c:	2000      	movs	r0, #0
 801028e:	e000      	b.n	8010292 <ADC_ConversionStop+0x52>
 8010290:	2000      	movs	r0, #0
}
 8010292:	bd70      	pop	{r4, r5, r6, pc}

08010294 <ADC_Disable>:
{
 8010294:	b570      	push	{r4, r5, r6, lr}
 8010296:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010298:	6802      	ldr	r2, [r0, #0]
 801029a:	6891      	ldr	r1, [r2, #8]
 801029c:	2303      	movs	r3, #3
 801029e:	400b      	ands	r3, r1
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d001      	beq.n	80102a8 <ADC_Disable+0x14>
  return HAL_OK;
 80102a4:	2000      	movs	r0, #0
}
 80102a6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80102a8:	6813      	ldr	r3, [r2, #0]
 80102aa:	07db      	lsls	r3, r3, #31
 80102ac:	d402      	bmi.n	80102b4 <ADC_Disable+0x20>
 80102ae:	68d3      	ldr	r3, [r2, #12]
 80102b0:	041b      	lsls	r3, r3, #16
 80102b2:	d52d      	bpl.n	8010310 <ADC_Disable+0x7c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80102b4:	6891      	ldr	r1, [r2, #8]
 80102b6:	2305      	movs	r3, #5
 80102b8:	400b      	ands	r3, r1
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d009      	beq.n	80102d2 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80102be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102c0:	2210      	movs	r2, #16
 80102c2:	4313      	orrs	r3, r2
 80102c4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80102c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80102c8:	3a0f      	subs	r2, #15
 80102ca:	4313      	orrs	r3, r2
 80102cc:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80102ce:	2001      	movs	r0, #1
 80102d0:	e7e9      	b.n	80102a6 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 80102d2:	6893      	ldr	r3, [r2, #8]
 80102d4:	2102      	movs	r1, #2
 80102d6:	430b      	orrs	r3, r1
 80102d8:	6093      	str	r3, [r2, #8]
 80102da:	6823      	ldr	r3, [r4, #0]
 80102dc:	2203      	movs	r2, #3
 80102de:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80102e0:	f7ff ff8c 	bl	80101fc <HAL_GetTick>
 80102e4:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80102e6:	6823      	ldr	r3, [r4, #0]
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	07db      	lsls	r3, r3, #31
 80102ec:	d50e      	bpl.n	801030c <ADC_Disable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80102ee:	f7ff ff85 	bl	80101fc <HAL_GetTick>
 80102f2:	1b40      	subs	r0, r0, r5
 80102f4:	2802      	cmp	r0, #2
 80102f6:	d9f6      	bls.n	80102e6 <ADC_Disable+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80102f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102fa:	2210      	movs	r2, #16
 80102fc:	4313      	orrs	r3, r2
 80102fe:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010300:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010302:	3a0f      	subs	r2, #15
 8010304:	4313      	orrs	r3, r2
 8010306:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010308:	2001      	movs	r0, #1
 801030a:	e7cc      	b.n	80102a6 <ADC_Disable+0x12>
  return HAL_OK;
 801030c:	2000      	movs	r0, #0
 801030e:	e7ca      	b.n	80102a6 <ADC_Disable+0x12>
 8010310:	2000      	movs	r0, #0
 8010312:	e7c8      	b.n	80102a6 <ADC_Disable+0x12>

08010314 <ADC_Enable>:
{
 8010314:	b530      	push	{r4, r5, lr}
 8010316:	b083      	sub	sp, #12
 8010318:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 801031a:	2300      	movs	r3, #0
 801031c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 801031e:	6803      	ldr	r3, [r0, #0]
 8010320:	6899      	ldr	r1, [r3, #8]
 8010322:	2203      	movs	r2, #3
 8010324:	400a      	ands	r2, r1
 8010326:	2a01      	cmp	r2, #1
 8010328:	d00e      	beq.n	8010348 <ADC_Enable+0x34>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801032a:	6899      	ldr	r1, [r3, #8]
 801032c:	4a20      	ldr	r2, [pc, #128]	; (80103b0 <ADC_Enable+0x9c>)
 801032e:	4211      	tst	r1, r2
 8010330:	d112      	bne.n	8010358 <ADC_Enable+0x44>
    __HAL_ADC_ENABLE(hadc);
 8010332:	689a      	ldr	r2, [r3, #8]
 8010334:	2101      	movs	r1, #1
 8010336:	430a      	orrs	r2, r1
 8010338:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 801033a:	4b1e      	ldr	r3, [pc, #120]	; (80103b4 <ADC_Enable+0xa0>)
 801033c:	6818      	ldr	r0, [r3, #0]
 801033e:	491e      	ldr	r1, [pc, #120]	; (80103b8 <ADC_Enable+0xa4>)
 8010340:	f7ef fefc 	bl	800013c <__udivsi3>
 8010344:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010346:	e015      	b.n	8010374 <ADC_Enable+0x60>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	07d2      	lsls	r2, r2, #31
 801034c:	d42d      	bmi.n	80103aa <ADC_Enable+0x96>
 801034e:	68da      	ldr	r2, [r3, #12]
 8010350:	0412      	lsls	r2, r2, #16
 8010352:	d5ea      	bpl.n	801032a <ADC_Enable+0x16>
  return HAL_OK;
 8010354:	2000      	movs	r0, #0
 8010356:	e008      	b.n	801036a <ADC_Enable+0x56>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010358:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801035a:	2210      	movs	r2, #16
 801035c:	4313      	orrs	r3, r2
 801035e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010360:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010362:	3a0f      	subs	r2, #15
 8010364:	4313      	orrs	r3, r2
 8010366:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010368:	2001      	movs	r0, #1
}
 801036a:	b003      	add	sp, #12
 801036c:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 801036e:	9b01      	ldr	r3, [sp, #4]
 8010370:	3b01      	subs	r3, #1
 8010372:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8010374:	9b01      	ldr	r3, [sp, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d1f9      	bne.n	801036e <ADC_Enable+0x5a>
    tickstart = HAL_GetTick();
 801037a:	f7ff ff3f 	bl	80101fc <HAL_GetTick>
 801037e:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010380:	6823      	ldr	r3, [r4, #0]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	07db      	lsls	r3, r3, #31
 8010386:	d40e      	bmi.n	80103a6 <ADC_Enable+0x92>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010388:	f7ff ff38 	bl	80101fc <HAL_GetTick>
 801038c:	1b40      	subs	r0, r0, r5
 801038e:	2802      	cmp	r0, #2
 8010390:	d9f6      	bls.n	8010380 <ADC_Enable+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010392:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010394:	2210      	movs	r2, #16
 8010396:	4313      	orrs	r3, r2
 8010398:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801039a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801039c:	3a0f      	subs	r2, #15
 801039e:	4313      	orrs	r3, r2
 80103a0:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80103a2:	2001      	movs	r0, #1
 80103a4:	e7e1      	b.n	801036a <ADC_Enable+0x56>
  return HAL_OK;
 80103a6:	2000      	movs	r0, #0
 80103a8:	e7df      	b.n	801036a <ADC_Enable+0x56>
 80103aa:	2000      	movs	r0, #0
 80103ac:	e7dd      	b.n	801036a <ADC_Enable+0x56>
 80103ae:	46c0      	nop			; (mov r8, r8)
 80103b0:	80000017 	.word	0x80000017
 80103b4:	200000c8 	.word	0x200000c8
 80103b8:	000f4240 	.word	0x000f4240

080103bc <HAL_ADC_Init>:
{
 80103bc:	b570      	push	{r4, r5, r6, lr}
 80103be:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80103c0:	d100      	bne.n	80103c4 <HAL_ADC_Init+0x8>
 80103c2:	e0a7      	b.n	8010514 <HAL_ADC_Init+0x158>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80103c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d07d      	beq.n	80104c6 <HAL_ADC_Init+0x10a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80103ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80103cc:	06db      	lsls	r3, r3, #27
 80103ce:	d500      	bpl.n	80103d2 <HAL_ADC_Init+0x16>
 80103d0:	e09a      	b.n	8010508 <HAL_ADC_Init+0x14c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80103d2:	6821      	ldr	r1, [r4, #0]
 80103d4:	688b      	ldr	r3, [r1, #8]
 80103d6:	2204      	movs	r2, #4
 80103d8:	401a      	ands	r2, r3
      (tmp_hal_status == HAL_OK)                                &&
 80103da:	d000      	beq.n	80103de <HAL_ADC_Init+0x22>
 80103dc:	e094      	b.n	8010508 <HAL_ADC_Init+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 80103de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80103e0:	484d      	ldr	r0, [pc, #308]	; (8010518 <HAL_ADC_Init+0x15c>)
 80103e2:	4003      	ands	r3, r0
 80103e4:	3006      	adds	r0, #6
 80103e6:	30ff      	adds	r0, #255	; 0xff
 80103e8:	4303      	orrs	r3, r0
 80103ea:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80103ec:	6888      	ldr	r0, [r1, #8]
 80103ee:	2303      	movs	r3, #3
 80103f0:	4003      	ands	r3, r0
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	d06d      	beq.n	80104d2 <HAL_ADC_Init+0x116>
      MODIFY_REG(hadc->Instance->CFGR1,
 80103f6:	68cb      	ldr	r3, [r1, #12]
 80103f8:	2018      	movs	r0, #24
 80103fa:	4383      	bics	r3, r0
 80103fc:	68a0      	ldr	r0, [r4, #8]
 80103fe:	4303      	orrs	r3, r0
 8010400:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8010402:	6821      	ldr	r1, [r4, #0]
 8010404:	690b      	ldr	r3, [r1, #16]
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	089b      	lsrs	r3, r3, #2
 801040a:	6860      	ldr	r0, [r4, #4]
 801040c:	4303      	orrs	r3, r0
 801040e:	610b      	str	r3, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8010410:	6821      	ldr	r1, [r4, #0]
 8010412:	68cb      	ldr	r3, [r1, #12]
 8010414:	4841      	ldr	r0, [pc, #260]	; (801051c <HAL_ADC_Init+0x160>)
 8010416:	4003      	ands	r3, r0
 8010418:	60cb      	str	r3, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 801041a:	69a3      	ldr	r3, [r4, #24]
 801041c:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 801041e:	69e1      	ldr	r1, [r4, #28]
 8010420:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010422:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010424:	6a21      	ldr	r1, [r4, #32]
 8010426:	0348      	lsls	r0, r1, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8010428:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 801042a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801042c:	2801      	cmp	r0, #1
 801042e:	d057      	beq.n	80104e0 <HAL_ADC_Init+0x124>
 8010430:	2080      	movs	r0, #128	; 0x80
 8010432:	0140      	lsls	r0, r0, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010434:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010436:	68e0      	ldr	r0, [r4, #12]
 8010438:	4303      	orrs	r3, r0
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801043a:	6920      	ldr	r0, [r4, #16]
 801043c:	2802      	cmp	r0, #2
 801043e:	d051      	beq.n	80104e4 <HAL_ADC_Init+0x128>
                 hadc->Init.DataAlign                                   |
 8010440:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8010442:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010444:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010446:	4313      	orrs	r3, r2
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010448:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801044a:	2a01      	cmp	r2, #1
 801044c:	d04c      	beq.n	80104e8 <HAL_ADC_Init+0x12c>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801044e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010450:	21c2      	movs	r1, #194	; 0xc2
 8010452:	31ff      	adds	r1, #255	; 0xff
 8010454:	428a      	cmp	r2, r1
 8010456:	d002      	beq.n	801045e <HAL_ADC_Init+0xa2>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8010458:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801045a:	430a      	orrs	r2, r1
 801045c:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 801045e:	6821      	ldr	r1, [r4, #0]
 8010460:	68ca      	ldr	r2, [r1, #12]
 8010462:	431a      	orrs	r2, r3
 8010464:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010466:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010468:	2180      	movs	r1, #128	; 0x80
 801046a:	0549      	lsls	r1, r1, #21
 801046c:	428a      	cmp	r2, r1
 801046e:	d00d      	beq.n	801048c <HAL_ADC_Init+0xd0>
 8010470:	2a01      	cmp	r2, #1
 8010472:	d00b      	beq.n	801048c <HAL_ADC_Init+0xd0>
 8010474:	2a02      	cmp	r2, #2
 8010476:	d009      	beq.n	801048c <HAL_ADC_Init+0xd0>
 8010478:	2a03      	cmp	r2, #3
 801047a:	d007      	beq.n	801048c <HAL_ADC_Init+0xd0>
 801047c:	2a04      	cmp	r2, #4
 801047e:	d005      	beq.n	801048c <HAL_ADC_Init+0xd0>
 8010480:	2a05      	cmp	r2, #5
 8010482:	d003      	beq.n	801048c <HAL_ADC_Init+0xd0>
 8010484:	2a06      	cmp	r2, #6
 8010486:	d001      	beq.n	801048c <HAL_ADC_Init+0xd0>
 8010488:	2a07      	cmp	r2, #7
 801048a:	d10a      	bne.n	80104a2 <HAL_ADC_Init+0xe6>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 801048c:	6820      	ldr	r0, [r4, #0]
 801048e:	6941      	ldr	r1, [r0, #20]
 8010490:	2207      	movs	r2, #7
 8010492:	4391      	bics	r1, r2
 8010494:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8010496:	6820      	ldr	r0, [r4, #0]
 8010498:	6941      	ldr	r1, [r0, #20]
 801049a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801049c:	402a      	ands	r2, r5
 801049e:	430a      	orrs	r2, r1
 80104a0:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80104a2:	6822      	ldr	r2, [r4, #0]
 80104a4:	68d2      	ldr	r2, [r2, #12]
 80104a6:	491e      	ldr	r1, [pc, #120]	; (8010520 <HAL_ADC_Init+0x164>)
 80104a8:	400a      	ands	r2, r1
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d022      	beq.n	80104f4 <HAL_ADC_Init+0x138>
      ADC_STATE_CLR_SET(hadc->State,
 80104ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104b0:	2212      	movs	r2, #18
 80104b2:	4393      	bics	r3, r2
 80104b4:	3a02      	subs	r2, #2
 80104b6:	4313      	orrs	r3, r2
 80104b8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80104ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80104bc:	3a0f      	subs	r2, #15
 80104be:	4313      	orrs	r3, r2
 80104c0:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80104c2:	2001      	movs	r0, #1
 80104c4:	e025      	b.n	8010512 <HAL_ADC_Init+0x156>
    ADC_CLEAR_ERRORCODE(hadc);
 80104c6:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80104c8:	2240      	movs	r2, #64	; 0x40
 80104ca:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80104cc:	f7fb fc60 	bl	800bd90 <HAL_ADC_MspInit>
 80104d0:	e77b      	b.n	80103ca <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80104d2:	680b      	ldr	r3, [r1, #0]
 80104d4:	07db      	lsls	r3, r3, #31
 80104d6:	d49b      	bmi.n	8010410 <HAL_ADC_Init+0x54>
 80104d8:	68cb      	ldr	r3, [r1, #12]
 80104da:	041b      	lsls	r3, r3, #16
 80104dc:	d498      	bmi.n	8010410 <HAL_ADC_Init+0x54>
 80104de:	e78a      	b.n	80103f6 <HAL_ADC_Init+0x3a>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80104e0:	0010      	movs	r0, r2
 80104e2:	e7a7      	b.n	8010434 <HAL_ADC_Init+0x78>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80104e4:	2204      	movs	r2, #4
 80104e6:	e7ab      	b.n	8010440 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80104e8:	2900      	cmp	r1, #0
 80104ea:	d1b0      	bne.n	801044e <HAL_ADC_Init+0x92>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80104ec:	2280      	movs	r2, #128	; 0x80
 80104ee:	0252      	lsls	r2, r2, #9
 80104f0:	4313      	orrs	r3, r2
 80104f2:	e7ac      	b.n	801044e <HAL_ADC_Init+0x92>
      ADC_CLEAR_ERRORCODE(hadc);
 80104f4:	2300      	movs	r3, #0
 80104f6:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80104f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104fa:	2203      	movs	r2, #3
 80104fc:	4393      	bics	r3, r2
 80104fe:	3a02      	subs	r2, #2
 8010500:	4313      	orrs	r3, r2
 8010502:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010504:	2000      	movs	r0, #0
 8010506:	e004      	b.n	8010512 <HAL_ADC_Init+0x156>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010508:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801050a:	2210      	movs	r2, #16
 801050c:	4313      	orrs	r3, r2
 801050e:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010510:	2001      	movs	r0, #1
}
 8010512:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010514:	2001      	movs	r0, #1
 8010516:	e7fc      	b.n	8010512 <HAL_ADC_Init+0x156>
 8010518:	fffffefd 	.word	0xfffffefd
 801051c:	fffe0219 	.word	0xfffe0219
 8010520:	833fffe7 	.word	0x833fffe7

08010524 <HAL_ADC_Start>:
{
 8010524:	b510      	push	{r4, lr}
 8010526:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010528:	6803      	ldr	r3, [r0, #0]
 801052a:	689b      	ldr	r3, [r3, #8]
 801052c:	075b      	lsls	r3, r3, #29
 801052e:	d423      	bmi.n	8010578 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010530:	2340      	movs	r3, #64	; 0x40
 8010532:	5cc3      	ldrb	r3, [r0, r3]
 8010534:	2b01      	cmp	r3, #1
 8010536:	d021      	beq.n	801057c <HAL_ADC_Start+0x58>
 8010538:	2340      	movs	r3, #64	; 0x40
 801053a:	2201      	movs	r2, #1
 801053c:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 801053e:	69c3      	ldr	r3, [r0, #28]
 8010540:	2b01      	cmp	r3, #1
 8010542:	d114      	bne.n	801056e <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010544:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8010546:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010548:	4a0d      	ldr	r2, [pc, #52]	; (8010580 <HAL_ADC_Start+0x5c>)
 801054a:	401a      	ands	r2, r3
 801054c:	2380      	movs	r3, #128	; 0x80
 801054e:	005b      	lsls	r3, r3, #1
 8010550:	4313      	orrs	r3, r2
 8010552:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010554:	2300      	movs	r3, #0
 8010556:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010558:	2240      	movs	r2, #64	; 0x40
 801055a:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801055c:	6823      	ldr	r3, [r4, #0]
 801055e:	3a24      	subs	r2, #36	; 0x24
 8010560:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010562:	6822      	ldr	r2, [r4, #0]
 8010564:	6893      	ldr	r3, [r2, #8]
 8010566:	2104      	movs	r1, #4
 8010568:	430b      	orrs	r3, r1
 801056a:	6093      	str	r3, [r2, #8]
}
 801056c:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 801056e:	f7ff fed1 	bl	8010314 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010572:	2800      	cmp	r0, #0
 8010574:	d0e7      	beq.n	8010546 <HAL_ADC_Start+0x22>
 8010576:	e7f9      	b.n	801056c <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 8010578:	2002      	movs	r0, #2
 801057a:	e7f7      	b.n	801056c <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 801057c:	2002      	movs	r0, #2
 801057e:	e7f5      	b.n	801056c <HAL_ADC_Start+0x48>
 8010580:	fffff0fe 	.word	0xfffff0fe

08010584 <HAL_ADC_Stop>:
{ 
 8010584:	b510      	push	{r4, lr}
 8010586:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010588:	2340      	movs	r3, #64	; 0x40
 801058a:	5cc3      	ldrb	r3, [r0, r3]
 801058c:	2b01      	cmp	r3, #1
 801058e:	d017      	beq.n	80105c0 <HAL_ADC_Stop+0x3c>
 8010590:	2340      	movs	r3, #64	; 0x40
 8010592:	2201      	movs	r2, #1
 8010594:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010596:	f7ff fe53 	bl	8010240 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 801059a:	2800      	cmp	r0, #0
 801059c:	d003      	beq.n	80105a6 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 801059e:	2340      	movs	r3, #64	; 0x40
 80105a0:	2200      	movs	r2, #0
 80105a2:	54e2      	strb	r2, [r4, r3]
}
 80105a4:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80105a6:	0020      	movs	r0, r4
 80105a8:	f7ff fe74 	bl	8010294 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d1f6      	bne.n	801059e <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80105b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80105b2:	4a04      	ldr	r2, [pc, #16]	; (80105c4 <HAL_ADC_Stop+0x40>)
 80105b4:	4013      	ands	r3, r2
 80105b6:	3204      	adds	r2, #4
 80105b8:	32ff      	adds	r2, #255	; 0xff
 80105ba:	4313      	orrs	r3, r2
 80105bc:	6463      	str	r3, [r4, #68]	; 0x44
 80105be:	e7ee      	b.n	801059e <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80105c0:	2002      	movs	r0, #2
 80105c2:	e7ef      	b.n	80105a4 <HAL_ADC_Stop+0x20>
 80105c4:	fffffefe 	.word	0xfffffefe

080105c8 <HAL_ADC_PollForConversion>:
{
 80105c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ca:	0004      	movs	r4, r0
 80105cc:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80105ce:	6943      	ldr	r3, [r0, #20]
 80105d0:	2b08      	cmp	r3, #8
 80105d2:	d026      	beq.n	8010622 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80105d4:	6803      	ldr	r3, [r0, #0]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	07db      	lsls	r3, r3, #31
 80105da:	d419      	bmi.n	8010610 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80105dc:	260c      	movs	r6, #12
  tickstart = HAL_GetTick();
 80105de:	f7ff fe0d 	bl	80101fc <HAL_GetTick>
 80105e2:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80105e4:	6823      	ldr	r3, [r4, #0]
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	4216      	tst	r6, r2
 80105ea:	d11c      	bne.n	8010626 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80105ec:	1c6b      	adds	r3, r5, #1
 80105ee:	d0f9      	beq.n	80105e4 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80105f0:	2d00      	cmp	r5, #0
 80105f2:	d004      	beq.n	80105fe <HAL_ADC_PollForConversion+0x36>
 80105f4:	f7ff fe02 	bl	80101fc <HAL_GetTick>
 80105f8:	1bc0      	subs	r0, r0, r7
 80105fa:	42a8      	cmp	r0, r5
 80105fc:	d9f2      	bls.n	80105e4 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80105fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010600:	2204      	movs	r2, #4
 8010602:	4313      	orrs	r3, r2
 8010604:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8010606:	2340      	movs	r3, #64	; 0x40
 8010608:	2200      	movs	r2, #0
 801060a:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 801060c:	2003      	movs	r0, #3
 801060e:	e007      	b.n	8010620 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010610:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010612:	2220      	movs	r2, #32
 8010614:	4313      	orrs	r3, r2
 8010616:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010618:	2340      	movs	r3, #64	; 0x40
 801061a:	2200      	movs	r2, #0
 801061c:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 801061e:	2001      	movs	r0, #1
}
 8010620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8010622:	2608      	movs	r6, #8
 8010624:	e7db      	b.n	80105de <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010626:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010628:	2280      	movs	r2, #128	; 0x80
 801062a:	0092      	lsls	r2, r2, #2
 801062c:	430a      	orrs	r2, r1
 801062e:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010630:	68d9      	ldr	r1, [r3, #12]
 8010632:	22c0      	movs	r2, #192	; 0xc0
 8010634:	0112      	lsls	r2, r2, #4
 8010636:	4211      	tst	r1, r2
 8010638:	d113      	bne.n	8010662 <HAL_ADC_PollForConversion+0x9a>
 801063a:	6a22      	ldr	r2, [r4, #32]
 801063c:	2a00      	cmp	r2, #0
 801063e:	d110      	bne.n	8010662 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	0712      	lsls	r2, r2, #28
 8010644:	d50d      	bpl.n	8010662 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010646:	689a      	ldr	r2, [r3, #8]
 8010648:	0752      	lsls	r2, r2, #29
 801064a:	d412      	bmi.n	8010672 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801064c:	685a      	ldr	r2, [r3, #4]
 801064e:	210c      	movs	r1, #12
 8010650:	438a      	bics	r2, r1
 8010652:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010654:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010656:	4a0c      	ldr	r2, [pc, #48]	; (8010688 <HAL_ADC_PollForConversion+0xc0>)
 8010658:	4013      	ands	r3, r2
 801065a:	3204      	adds	r2, #4
 801065c:	32ff      	adds	r2, #255	; 0xff
 801065e:	4313      	orrs	r3, r2
 8010660:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010662:	69a3      	ldr	r3, [r4, #24]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d10d      	bne.n	8010684 <HAL_ADC_PollForConversion+0xbc>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010668:	6823      	ldr	r3, [r4, #0]
 801066a:	220c      	movs	r2, #12
 801066c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 801066e:	2000      	movs	r0, #0
 8010670:	e7d6      	b.n	8010620 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010672:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010674:	2220      	movs	r2, #32
 8010676:	4313      	orrs	r3, r2
 8010678:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801067a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801067c:	3a1f      	subs	r2, #31
 801067e:	4313      	orrs	r3, r2
 8010680:	64a3      	str	r3, [r4, #72]	; 0x48
 8010682:	e7ee      	b.n	8010662 <HAL_ADC_PollForConversion+0x9a>
  return HAL_OK;
 8010684:	2000      	movs	r0, #0
 8010686:	e7cb      	b.n	8010620 <HAL_ADC_PollForConversion+0x58>
 8010688:	fffffefe 	.word	0xfffffefe

0801068c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801068c:	6803      	ldr	r3, [r0, #0]
 801068e:	2208      	movs	r2, #8
 8010690:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010692:	6803      	ldr	r3, [r0, #0]
 8010694:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8010696:	4770      	bx	lr

08010698 <HAL_ADC_ConfigChannel>:
{
 8010698:	b530      	push	{r4, r5, lr}
 801069a:	b083      	sub	sp, #12
 801069c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 801069e:	2300      	movs	r3, #0
 80106a0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80106a2:	3340      	adds	r3, #64	; 0x40
 80106a4:	5cc3      	ldrb	r3, [r0, r3]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d100      	bne.n	80106ac <HAL_ADC_ConfigChannel+0x14>
 80106aa:	e08a      	b.n	80107c2 <HAL_ADC_ConfigChannel+0x12a>
 80106ac:	2340      	movs	r3, #64	; 0x40
 80106ae:	2201      	movs	r2, #1
 80106b0:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80106b2:	6803      	ldr	r3, [r0, #0]
 80106b4:	689a      	ldr	r2, [r3, #8]
 80106b6:	0752      	lsls	r2, r2, #29
 80106b8:	d475      	bmi.n	80107a6 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 80106ba:	4a43      	ldr	r2, [pc, #268]	; (80107c8 <HAL_ADC_ConfigChannel+0x130>)
 80106bc:	6848      	ldr	r0, [r1, #4]
 80106be:	4290      	cmp	r0, r2
 80106c0:	d056      	beq.n	8010770 <HAL_ADC_ConfigChannel+0xd8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80106c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80106c4:	2001      	movs	r0, #1
 80106c6:	680d      	ldr	r5, [r1, #0]
 80106c8:	40a8      	lsls	r0, r5
 80106ca:	4302      	orrs	r2, r0
 80106cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80106ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80106d0:	2280      	movs	r2, #128	; 0x80
 80106d2:	0552      	lsls	r2, r2, #21
 80106d4:	4293      	cmp	r3, r2
 80106d6:	d01e      	beq.n	8010716 <HAL_ADC_ConfigChannel+0x7e>
 80106d8:	2b01      	cmp	r3, #1
 80106da:	d01c      	beq.n	8010716 <HAL_ADC_ConfigChannel+0x7e>
 80106dc:	2b02      	cmp	r3, #2
 80106de:	d01a      	beq.n	8010716 <HAL_ADC_ConfigChannel+0x7e>
 80106e0:	2b03      	cmp	r3, #3
 80106e2:	d018      	beq.n	8010716 <HAL_ADC_ConfigChannel+0x7e>
 80106e4:	2b04      	cmp	r3, #4
 80106e6:	d016      	beq.n	8010716 <HAL_ADC_ConfigChannel+0x7e>
 80106e8:	2b05      	cmp	r3, #5
 80106ea:	d014      	beq.n	8010716 <HAL_ADC_ConfigChannel+0x7e>
 80106ec:	2b06      	cmp	r3, #6
 80106ee:	d012      	beq.n	8010716 <HAL_ADC_ConfigChannel+0x7e>
 80106f0:	2b07      	cmp	r3, #7
 80106f2:	d010      	beq.n	8010716 <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80106f4:	6822      	ldr	r2, [r4, #0]
 80106f6:	6950      	ldr	r0, [r2, #20]
 80106f8:	2307      	movs	r3, #7
 80106fa:	4003      	ands	r3, r0
 80106fc:	6888      	ldr	r0, [r1, #8]
 80106fe:	4298      	cmp	r0, r3
 8010700:	d009      	beq.n	8010716 <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010702:	6950      	ldr	r0, [r2, #20]
 8010704:	2307      	movs	r3, #7
 8010706:	4398      	bics	r0, r3
 8010708:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 801070a:	6820      	ldr	r0, [r4, #0]
 801070c:	6942      	ldr	r2, [r0, #20]
 801070e:	688d      	ldr	r5, [r1, #8]
 8010710:	402b      	ands	r3, r5
 8010712:	4313      	orrs	r3, r2
 8010714:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010716:	680b      	ldr	r3, [r1, #0]
 8010718:	001a      	movs	r2, r3
 801071a:	3a10      	subs	r2, #16
 801071c:	2a02      	cmp	r2, #2
 801071e:	d84c      	bhi.n	80107ba <HAL_ADC_ConfigChannel+0x122>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010720:	4a2a      	ldr	r2, [pc, #168]	; (80107cc <HAL_ADC_ConfigChannel+0x134>)
 8010722:	6812      	ldr	r2, [r2, #0]
 8010724:	2b10      	cmp	r3, #16
 8010726:	d00e      	beq.n	8010746 <HAL_ADC_ConfigChannel+0xae>
 8010728:	2b11      	cmp	r3, #17
 801072a:	d009      	beq.n	8010740 <HAL_ADC_ConfigChannel+0xa8>
 801072c:	2380      	movs	r3, #128	; 0x80
 801072e:	045b      	lsls	r3, r3, #17
 8010730:	4313      	orrs	r3, r2
 8010732:	4a26      	ldr	r2, [pc, #152]	; (80107cc <HAL_ADC_ConfigChannel+0x134>)
 8010734:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010736:	680b      	ldr	r3, [r1, #0]
 8010738:	2b10      	cmp	r3, #16
 801073a:	d007      	beq.n	801074c <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801073c:	2000      	movs	r0, #0
 801073e:	e037      	b.n	80107b0 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010740:	2380      	movs	r3, #128	; 0x80
 8010742:	03db      	lsls	r3, r3, #15
 8010744:	e7f4      	b.n	8010730 <HAL_ADC_ConfigChannel+0x98>
 8010746:	2380      	movs	r3, #128	; 0x80
 8010748:	041b      	lsls	r3, r3, #16
 801074a:	e7f1      	b.n	8010730 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 801074c:	4b20      	ldr	r3, [pc, #128]	; (80107d0 <HAL_ADC_ConfigChannel+0x138>)
 801074e:	6818      	ldr	r0, [r3, #0]
 8010750:	4920      	ldr	r1, [pc, #128]	; (80107d4 <HAL_ADC_ConfigChannel+0x13c>)
 8010752:	f7ef fcf3 	bl	800013c <__udivsi3>
 8010756:	0083      	lsls	r3, r0, #2
 8010758:	1818      	adds	r0, r3, r0
 801075a:	0043      	lsls	r3, r0, #1
 801075c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 801075e:	e002      	b.n	8010766 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8010760:	9b01      	ldr	r3, [sp, #4]
 8010762:	3b01      	subs	r3, #1
 8010764:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010766:	9b01      	ldr	r3, [sp, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d1f9      	bne.n	8010760 <HAL_ADC_ConfigChannel+0xc8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801076c:	2000      	movs	r0, #0
 801076e:	e01f      	b.n	80107b0 <HAL_ADC_ConfigChannel+0x118>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010772:	2001      	movs	r0, #1
 8010774:	680d      	ldr	r5, [r1, #0]
 8010776:	40a8      	lsls	r0, r5
 8010778:	4382      	bics	r2, r0
 801077a:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801077c:	680b      	ldr	r3, [r1, #0]
 801077e:	001a      	movs	r2, r3
 8010780:	3a10      	subs	r2, #16
 8010782:	2a02      	cmp	r2, #2
 8010784:	d81b      	bhi.n	80107be <HAL_ADC_ConfigChannel+0x126>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010786:	4a11      	ldr	r2, [pc, #68]	; (80107cc <HAL_ADC_ConfigChannel+0x134>)
 8010788:	6812      	ldr	r2, [r2, #0]
 801078a:	2b10      	cmp	r3, #16
 801078c:	d009      	beq.n	80107a2 <HAL_ADC_ConfigChannel+0x10a>
 801078e:	2b11      	cmp	r3, #17
 8010790:	d005      	beq.n	801079e <HAL_ADC_ConfigChannel+0x106>
 8010792:	4b11      	ldr	r3, [pc, #68]	; (80107d8 <HAL_ADC_ConfigChannel+0x140>)
 8010794:	4013      	ands	r3, r2
 8010796:	4a0d      	ldr	r2, [pc, #52]	; (80107cc <HAL_ADC_ConfigChannel+0x134>)
 8010798:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801079a:	2000      	movs	r0, #0
 801079c:	e008      	b.n	80107b0 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801079e:	4b0f      	ldr	r3, [pc, #60]	; (80107dc <HAL_ADC_ConfigChannel+0x144>)
 80107a0:	e7f8      	b.n	8010794 <HAL_ADC_ConfigChannel+0xfc>
 80107a2:	4b0f      	ldr	r3, [pc, #60]	; (80107e0 <HAL_ADC_ConfigChannel+0x148>)
 80107a4:	e7f6      	b.n	8010794 <HAL_ADC_ConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80107a6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80107a8:	2220      	movs	r2, #32
 80107aa:	4313      	orrs	r3, r2
 80107ac:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80107ae:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80107b0:	2340      	movs	r3, #64	; 0x40
 80107b2:	2200      	movs	r2, #0
 80107b4:	54e2      	strb	r2, [r4, r3]
}
 80107b6:	b003      	add	sp, #12
 80107b8:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80107ba:	2000      	movs	r0, #0
 80107bc:	e7f8      	b.n	80107b0 <HAL_ADC_ConfigChannel+0x118>
 80107be:	2000      	movs	r0, #0
 80107c0:	e7f6      	b.n	80107b0 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 80107c2:	2002      	movs	r0, #2
 80107c4:	e7f7      	b.n	80107b6 <HAL_ADC_ConfigChannel+0x11e>
 80107c6:	46c0      	nop			; (mov r8, r8)
 80107c8:	00001001 	.word	0x00001001
 80107cc:	40012708 	.word	0x40012708
 80107d0:	200000c8 	.word	0x200000c8
 80107d4:	000f4240 	.word	0x000f4240
 80107d8:	feffffff 	.word	0xfeffffff
 80107dc:	ffbfffff 	.word	0xffbfffff
 80107e0:	ff7fffff 	.word	0xff7fffff

080107e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80107e4:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 80107e6:	2800      	cmp	r0, #0
 80107e8:	db11      	blt.n	801080e <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80107ea:	0884      	lsrs	r4, r0, #2
 80107ec:	4d13      	ldr	r5, [pc, #76]	; (801083c <HAL_NVIC_SetPriority+0x58>)
 80107ee:	34c0      	adds	r4, #192	; 0xc0
 80107f0:	00a4      	lsls	r4, r4, #2
 80107f2:	5962      	ldr	r2, [r4, r5]
 80107f4:	2303      	movs	r3, #3
 80107f6:	4018      	ands	r0, r3
 80107f8:	00c0      	lsls	r0, r0, #3
 80107fa:	33fc      	adds	r3, #252	; 0xfc
 80107fc:	001e      	movs	r6, r3
 80107fe:	4086      	lsls	r6, r0
 8010800:	43b2      	bics	r2, r6
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010802:	0189      	lsls	r1, r1, #6
 8010804:	400b      	ands	r3, r1
 8010806:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010808:	4313      	orrs	r3, r2
 801080a:	5163      	str	r3, [r4, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 801080c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801080e:	b2c0      	uxtb	r0, r0
 8010810:	220f      	movs	r2, #15
 8010812:	4002      	ands	r2, r0
 8010814:	3a08      	subs	r2, #8
 8010816:	0892      	lsrs	r2, r2, #2
 8010818:	3206      	adds	r2, #6
 801081a:	0092      	lsls	r2, r2, #2
 801081c:	4b08      	ldr	r3, [pc, #32]	; (8010840 <HAL_NVIC_SetPriority+0x5c>)
 801081e:	18d3      	adds	r3, r2, r3
 8010820:	685d      	ldr	r5, [r3, #4]
 8010822:	2403      	movs	r4, #3
 8010824:	4020      	ands	r0, r4
 8010826:	00c0      	lsls	r0, r0, #3
 8010828:	22ff      	movs	r2, #255	; 0xff
 801082a:	0014      	movs	r4, r2
 801082c:	4084      	lsls	r4, r0
 801082e:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010830:	0189      	lsls	r1, r1, #6
 8010832:	400a      	ands	r2, r1
 8010834:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010836:	432a      	orrs	r2, r5
 8010838:	605a      	str	r2, [r3, #4]
 801083a:	e7e7      	b.n	801080c <HAL_NVIC_SetPriority+0x28>
 801083c:	e000e100 	.word	0xe000e100
 8010840:	e000ed00 	.word	0xe000ed00

08010844 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010844:	231f      	movs	r3, #31
 8010846:	4018      	ands	r0, r3
 8010848:	3b1e      	subs	r3, #30
 801084a:	4083      	lsls	r3, r0
 801084c:	4a01      	ldr	r2, [pc, #4]	; (8010854 <HAL_NVIC_EnableIRQ+0x10>)
 801084e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010850:	4770      	bx	lr
 8010852:	46c0      	nop			; (mov r8, r8)
 8010854:	e000e100 	.word	0xe000e100

08010858 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010858:	231f      	movs	r3, #31
 801085a:	4018      	ands	r0, r3
 801085c:	3b1e      	subs	r3, #30
 801085e:	4083      	lsls	r3, r0
 8010860:	4901      	ldr	r1, [pc, #4]	; (8010868 <HAL_NVIC_DisableIRQ+0x10>)
 8010862:	2280      	movs	r2, #128	; 0x80
 8010864:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010866:	4770      	bx	lr
 8010868:	e000e100 	.word	0xe000e100

0801086c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 801086c:	3801      	subs	r0, #1
 801086e:	4b0a      	ldr	r3, [pc, #40]	; (8010898 <HAL_SYSTICK_Config+0x2c>)
 8010870:	4298      	cmp	r0, r3
 8010872:	d80f      	bhi.n	8010894 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010874:	4a09      	ldr	r2, [pc, #36]	; (801089c <HAL_SYSTICK_Config+0x30>)
 8010876:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010878:	4809      	ldr	r0, [pc, #36]	; (80108a0 <HAL_SYSTICK_Config+0x34>)
 801087a:	6a03      	ldr	r3, [r0, #32]
 801087c:	021b      	lsls	r3, r3, #8
 801087e:	0a1b      	lsrs	r3, r3, #8
 8010880:	21c0      	movs	r1, #192	; 0xc0
 8010882:	0609      	lsls	r1, r1, #24
 8010884:	430b      	orrs	r3, r1
 8010886:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010888:	2300      	movs	r3, #0
 801088a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801088c:	3307      	adds	r3, #7
 801088e:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010890:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010892:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010894:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8010896:	e7fc      	b.n	8010892 <HAL_SYSTICK_Config+0x26>
 8010898:	00ffffff 	.word	0x00ffffff
 801089c:	e000e010 	.word	0xe000e010
 80108a0:	e000ed00 	.word	0xe000ed00

080108a4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80108a4:	2804      	cmp	r0, #4
 80108a6:	d005      	beq.n	80108b4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80108a8:	4a05      	ldr	r2, [pc, #20]	; (80108c0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80108aa:	6813      	ldr	r3, [r2, #0]
 80108ac:	2104      	movs	r1, #4
 80108ae:	438b      	bics	r3, r1
 80108b0:	6013      	str	r3, [r2, #0]
  }
}
 80108b2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80108b4:	4a02      	ldr	r2, [pc, #8]	; (80108c0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80108b6:	6813      	ldr	r3, [r2, #0]
 80108b8:	2104      	movs	r1, #4
 80108ba:	430b      	orrs	r3, r1
 80108bc:	6013      	str	r3, [r2, #0]
 80108be:	e7f8      	b.n	80108b2 <HAL_SYSTICK_CLKSourceConfig+0xe>
 80108c0:	e000e010 	.word	0xe000e010

080108c4 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80108c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 80108c6:	2500      	movs	r5, #0
 80108c8:	e00e      	b.n	80108e8 <CRC_Handle_8+0x24>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 80108ca:	00ac      	lsls	r4, r5, #2
 80108cc:	5d0b      	ldrb	r3, [r1, r4]
 80108ce:	061b      	lsls	r3, r3, #24
 80108d0:	190c      	adds	r4, r1, r4
 80108d2:	7866      	ldrb	r6, [r4, #1]
 80108d4:	0436      	lsls	r6, r6, #16
 80108d6:	4333      	orrs	r3, r6
 80108d8:	78a6      	ldrb	r6, [r4, #2]
 80108da:	0236      	lsls	r6, r6, #8
 80108dc:	4333      	orrs	r3, r6
 80108de:	78e6      	ldrb	r6, [r4, #3]
 80108e0:	6804      	ldr	r4, [r0, #0]
 80108e2:	4333      	orrs	r3, r6
 80108e4:	6023      	str	r3, [r4, #0]
   for(i = 0; i < (BufferLength/4); i++)
 80108e6:	3501      	adds	r5, #1
 80108e8:	0893      	lsrs	r3, r2, #2
 80108ea:	42ab      	cmp	r3, r5
 80108ec:	d8ed      	bhi.n	80108ca <CRC_Handle_8+0x6>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 80108ee:	2303      	movs	r3, #3
 80108f0:	401a      	ands	r2, r3
 80108f2:	d005      	beq.n	8010900 <CRC_Handle_8+0x3c>
   {
     if  (BufferLength%4 == 1)
 80108f4:	2a01      	cmp	r2, #1
 80108f6:	d006      	beq.n	8010906 <CRC_Handle_8+0x42>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 80108f8:	2a02      	cmp	r2, #2
 80108fa:	d009      	beq.n	8010910 <CRC_Handle_8+0x4c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
     }
     if  (BufferLength%4 == 3)
 80108fc:	2a03      	cmp	r2, #3
 80108fe:	d010      	beq.n	8010922 <CRC_Handle_8+0x5e>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010900:	6803      	ldr	r3, [r0, #0]
 8010902:	6818      	ldr	r0, [r3, #0]
}
 8010904:	bd70      	pop	{r4, r5, r6, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010906:	00ab      	lsls	r3, r5, #2
 8010908:	5ccb      	ldrb	r3, [r1, r3]
 801090a:	6804      	ldr	r4, [r0, #0]
 801090c:	7023      	strb	r3, [r4, #0]
 801090e:	e7f3      	b.n	80108f8 <CRC_Handle_8+0x34>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010910:	00ab      	lsls	r3, r5, #2
 8010912:	5ccc      	ldrb	r4, [r1, r3]
 8010914:	0224      	lsls	r4, r4, #8
 8010916:	18cb      	adds	r3, r1, r3
 8010918:	785b      	ldrb	r3, [r3, #1]
 801091a:	4323      	orrs	r3, r4
 801091c:	6804      	ldr	r4, [r0, #0]
 801091e:	8023      	strh	r3, [r4, #0]
 8010920:	e7ec      	b.n	80108fc <CRC_Handle_8+0x38>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010922:	00ad      	lsls	r5, r5, #2
 8010924:	5d4a      	ldrb	r2, [r1, r5]
 8010926:	0212      	lsls	r2, r2, #8
 8010928:	194d      	adds	r5, r1, r5
 801092a:	786b      	ldrb	r3, [r5, #1]
 801092c:	4313      	orrs	r3, r2
 801092e:	6802      	ldr	r2, [r0, #0]
 8010930:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010932:	78ab      	ldrb	r3, [r5, #2]
 8010934:	6802      	ldr	r2, [r0, #0]
 8010936:	7013      	strb	r3, [r2, #0]
 8010938:	e7e2      	b.n	8010900 <CRC_Handle_8+0x3c>

0801093a <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 801093a:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 801093c:	2500      	movs	r5, #0
 801093e:	e008      	b.n	8010952 <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010940:	00ac      	lsls	r4, r5, #2
 8010942:	5b0b      	ldrh	r3, [r1, r4]
 8010944:	041b      	lsls	r3, r3, #16
 8010946:	190c      	adds	r4, r1, r4
 8010948:	8866      	ldrh	r6, [r4, #2]
 801094a:	6804      	ldr	r4, [r0, #0]
 801094c:	4333      	orrs	r3, r6
 801094e:	6023      	str	r3, [r4, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8010950:	3501      	adds	r5, #1
 8010952:	0853      	lsrs	r3, r2, #1
 8010954:	42ab      	cmp	r3, r5
 8010956:	d8f3      	bhi.n	8010940 <CRC_Handle_16+0x6>
  }
  if ((BufferLength%2) != 0)
 8010958:	07d3      	lsls	r3, r2, #31
 801095a:	d503      	bpl.n	8010964 <CRC_Handle_16+0x2a>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 801095c:	00ad      	lsls	r5, r5, #2
 801095e:	5a6b      	ldrh	r3, [r5, r1]
 8010960:	6802      	ldr	r2, [r0, #0]
 8010962:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010964:	6803      	ldr	r3, [r0, #0]
 8010966:	6818      	ldr	r0, [r3, #0]
}
 8010968:	bd70      	pop	{r4, r5, r6, pc}

0801096a <HAL_CRC_Init>:
{
 801096a:	b510      	push	{r4, lr}
 801096c:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 801096e:	d029      	beq.n	80109c4 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010970:	7f43      	ldrb	r3, [r0, #29]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d01e      	beq.n	80109b4 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010976:	2302      	movs	r3, #2
 8010978:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 801097a:	0020      	movs	r0, r4
 801097c:	f000 f8a8 	bl	8010ad0 <HAL_CRCEx_Init>
 8010980:	2800      	cmp	r0, #0
 8010982:	d121      	bne.n	80109c8 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010984:	7963      	ldrb	r3, [r4, #5]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d118      	bne.n	80109bc <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 801098a:	6823      	ldr	r3, [r4, #0]
 801098c:	2201      	movs	r2, #1
 801098e:	4252      	negs	r2, r2
 8010990:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010992:	6822      	ldr	r2, [r4, #0]
 8010994:	6893      	ldr	r3, [r2, #8]
 8010996:	2160      	movs	r1, #96	; 0x60
 8010998:	438b      	bics	r3, r1
 801099a:	6961      	ldr	r1, [r4, #20]
 801099c:	430b      	orrs	r3, r1
 801099e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80109a0:	6822      	ldr	r2, [r4, #0]
 80109a2:	6893      	ldr	r3, [r2, #8]
 80109a4:	2180      	movs	r1, #128	; 0x80
 80109a6:	438b      	bics	r3, r1
 80109a8:	69a1      	ldr	r1, [r4, #24]
 80109aa:	430b      	orrs	r3, r1
 80109ac:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80109ae:	2301      	movs	r3, #1
 80109b0:	7763      	strb	r3, [r4, #29]
}
 80109b2:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80109b4:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80109b6:	f7fc fc73 	bl	800d2a0 <HAL_CRC_MspInit>
 80109ba:	e7dc      	b.n	8010976 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80109bc:	6823      	ldr	r3, [r4, #0]
 80109be:	6922      	ldr	r2, [r4, #16]
 80109c0:	611a      	str	r2, [r3, #16]
 80109c2:	e7e6      	b.n	8010992 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 80109c4:	2001      	movs	r0, #1
 80109c6:	e7f4      	b.n	80109b2 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 80109c8:	2001      	movs	r0, #1
 80109ca:	e7f2      	b.n	80109b2 <HAL_CRC_Init+0x48>

080109cc <HAL_CRC_Accumulate>:
{
 80109cc:	b570      	push	{r4, r5, r6, lr}
 80109ce:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80109d0:	7f03      	ldrb	r3, [r0, #28]
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d022      	beq.n	8010a1c <HAL_CRC_Accumulate+0x50>
 80109d6:	2301      	movs	r3, #1
 80109d8:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80109da:	3301      	adds	r3, #1
 80109dc:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80109de:	6a03      	ldr	r3, [r0, #32]
 80109e0:	2b02      	cmp	r3, #2
 80109e2:	d018      	beq.n	8010a16 <HAL_CRC_Accumulate+0x4a>
 80109e4:	2b03      	cmp	r3, #3
 80109e6:	d011      	beq.n	8010a0c <HAL_CRC_Accumulate+0x40>
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d011      	beq.n	8010a10 <HAL_CRC_Accumulate+0x44>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80109ec:	2000      	movs	r0, #0
 80109ee:	e008      	b.n	8010a02 <HAL_CRC_Accumulate+0x36>
        hcrc->Instance->DR = pBuffer[index];
 80109f0:	6820      	ldr	r0, [r4, #0]
 80109f2:	009d      	lsls	r5, r3, #2
 80109f4:	586d      	ldr	r5, [r5, r1]
 80109f6:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 80109f8:	3301      	adds	r3, #1
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d3f8      	bcc.n	80109f0 <HAL_CRC_Accumulate+0x24>
      temp = hcrc->Instance->DR;
 80109fe:	6823      	ldr	r3, [r4, #0]
 8010a00:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 8010a02:	2301      	movs	r3, #1
 8010a04:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010a06:	2300      	movs	r3, #0
 8010a08:	7723      	strb	r3, [r4, #28]
}
 8010a0a:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	e7f4      	b.n	80109fa <HAL_CRC_Accumulate+0x2e>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010a10:	f7ff ff58 	bl	80108c4 <CRC_Handle_8>
      break;
 8010a14:	e7f5      	b.n	8010a02 <HAL_CRC_Accumulate+0x36>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010a16:	f7ff ff90 	bl	801093a <CRC_Handle_16>
      break;
 8010a1a:	e7f2      	b.n	8010a02 <HAL_CRC_Accumulate+0x36>
  __HAL_LOCK(hcrc); 
 8010a1c:	2002      	movs	r0, #2
 8010a1e:	e7f4      	b.n	8010a0a <HAL_CRC_Accumulate+0x3e>

08010a20 <HAL_CRC_Calculate>:
{
 8010a20:	b570      	push	{r4, r5, r6, lr}
 8010a22:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010a24:	7f03      	ldrb	r3, [r0, #28]
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d028      	beq.n	8010a7c <HAL_CRC_Calculate+0x5c>
 8010a2a:	2501      	movs	r5, #1
 8010a2c:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010a2e:	2302      	movs	r3, #2
 8010a30:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010a32:	6800      	ldr	r0, [r0, #0]
 8010a34:	6883      	ldr	r3, [r0, #8]
 8010a36:	432b      	orrs	r3, r5
 8010a38:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010a3a:	6a23      	ldr	r3, [r4, #32]
 8010a3c:	2b02      	cmp	r3, #2
 8010a3e:	d019      	beq.n	8010a74 <HAL_CRC_Calculate+0x54>
 8010a40:	2b03      	cmp	r3, #3
 8010a42:	d011      	beq.n	8010a68 <HAL_CRC_Calculate+0x48>
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d011      	beq.n	8010a6c <HAL_CRC_Calculate+0x4c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010a48:	2000      	movs	r0, #0
 8010a4a:	e008      	b.n	8010a5e <HAL_CRC_Calculate+0x3e>
        hcrc->Instance->DR = pBuffer[index];
 8010a4c:	6820      	ldr	r0, [r4, #0]
 8010a4e:	009d      	lsls	r5, r3, #2
 8010a50:	586d      	ldr	r5, [r5, r1]
 8010a52:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010a54:	3301      	adds	r3, #1
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d3f8      	bcc.n	8010a4c <HAL_CRC_Calculate+0x2c>
      temp = hcrc->Instance->DR;
 8010a5a:	6823      	ldr	r3, [r4, #0]
 8010a5c:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 8010a5e:	2301      	movs	r3, #1
 8010a60:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010a62:	2300      	movs	r3, #0
 8010a64:	7723      	strb	r3, [r4, #28]
}
 8010a66:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010a68:	2300      	movs	r3, #0
 8010a6a:	e7f4      	b.n	8010a56 <HAL_CRC_Calculate+0x36>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010a6c:	0020      	movs	r0, r4
 8010a6e:	f7ff ff29 	bl	80108c4 <CRC_Handle_8>
      break;
 8010a72:	e7f4      	b.n	8010a5e <HAL_CRC_Calculate+0x3e>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010a74:	0020      	movs	r0, r4
 8010a76:	f7ff ff60 	bl	801093a <CRC_Handle_16>
      break;
 8010a7a:	e7f0      	b.n	8010a5e <HAL_CRC_Calculate+0x3e>
  __HAL_LOCK(hcrc); 
 8010a7c:	2002      	movs	r0, #2
 8010a7e:	e7f2      	b.n	8010a66 <HAL_CRC_Calculate+0x46>

08010a80 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010a80:	b510      	push	{r4, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010a82:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010a84:	e000      	b.n	8010a88 <HAL_CRCEx_Polynomial_Set+0x8>
 8010a86:	001c      	movs	r4, r3
 8010a88:	2301      	movs	r3, #1
 8010a8a:	40a3      	lsls	r3, r4
 8010a8c:	4219      	tst	r1, r3
 8010a8e:	d103      	bne.n	8010a98 <HAL_CRCEx_Polynomial_Set+0x18>
 8010a90:	1e63      	subs	r3, r4, #1
 8010a92:	2c00      	cmp	r4, #0
 8010a94:	d1f7      	bne.n	8010a86 <HAL_CRCEx_Polynomial_Set+0x6>
 8010a96:	001c      	movs	r4, r3
  {}

  switch (PolyLength)
 8010a98:	2a10      	cmp	r2, #16
 8010a9a:	d011      	beq.n	8010ac0 <HAL_CRCEx_Polynomial_Set+0x40>
 8010a9c:	2a18      	cmp	r2, #24
 8010a9e:	d00b      	beq.n	8010ab8 <HAL_CRCEx_Polynomial_Set+0x38>
 8010aa0:	2a08      	cmp	r2, #8
 8010aa2:	d011      	beq.n	8010ac8 <HAL_CRCEx_Polynomial_Set+0x48>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010aa4:	6803      	ldr	r3, [r0, #0]
 8010aa6:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010aa8:	6801      	ldr	r1, [r0, #0]
 8010aaa:	688b      	ldr	r3, [r1, #8]
 8010aac:	2018      	movs	r0, #24
 8010aae:	4383      	bics	r3, r0
 8010ab0:	431a      	orrs	r2, r3
 8010ab2:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010ab4:	2000      	movs	r0, #0
}
 8010ab6:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010ab8:	2c06      	cmp	r4, #6
 8010aba:	d9f3      	bls.n	8010aa4 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8010abc:	2001      	movs	r0, #1
 8010abe:	e7fa      	b.n	8010ab6 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 8010ac0:	2c07      	cmp	r4, #7
 8010ac2:	d9ef      	bls.n	8010aa4 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8010ac4:	2001      	movs	r0, #1
 8010ac6:	e7f6      	b.n	8010ab6 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 8010ac8:	2c0f      	cmp	r4, #15
 8010aca:	d9eb      	bls.n	8010aa4 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8010acc:	2001      	movs	r0, #1
 8010ace:	e7f2      	b.n	8010ab6 <HAL_CRCEx_Polynomial_Set+0x36>

08010ad0 <HAL_CRCEx_Init>:
{
 8010ad0:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010ad2:	7903      	ldrb	r3, [r0, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d109      	bne.n	8010aec <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010ad8:	6803      	ldr	r3, [r0, #0]
 8010ada:	4a08      	ldr	r2, [pc, #32]	; (8010afc <HAL_CRCEx_Init+0x2c>)
 8010adc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010ade:	6802      	ldr	r2, [r0, #0]
 8010ae0:	6893      	ldr	r3, [r2, #8]
 8010ae2:	2118      	movs	r1, #24
 8010ae4:	438b      	bics	r3, r1
 8010ae6:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010ae8:	2000      	movs	r0, #0
}
 8010aea:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010aec:	68c2      	ldr	r2, [r0, #12]
 8010aee:	6881      	ldr	r1, [r0, #8]
 8010af0:	f7ff ffc6 	bl	8010a80 <HAL_CRCEx_Polynomial_Set>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d0f8      	beq.n	8010aea <HAL_CRCEx_Init+0x1a>
      return HAL_ERROR;
 8010af8:	2001      	movs	r0, #1
 8010afa:	e7f6      	b.n	8010aea <HAL_CRCEx_Init+0x1a>
 8010afc:	04c11db7 	.word	0x04c11db7

08010b00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8010b00:	b510      	push	{r4, lr}
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010b02:	6804      	ldr	r4, [r0, #0]
 8010b04:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010b06:	6843      	ldr	r3, [r0, #4]
 8010b08:	2b10      	cmp	r3, #16
 8010b0a:	d004      	beq.n	8010b16 <DMA_SetConfig+0x16>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010b0c:	6803      	ldr	r3, [r0, #0]
 8010b0e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010b10:	6803      	ldr	r3, [r0, #0]
 8010b12:	60da      	str	r2, [r3, #12]
  }
}
 8010b14:	bd10      	pop	{r4, pc}
    hdma->Instance->CPAR = DstAddress;
 8010b16:	6803      	ldr	r3, [r0, #0]
 8010b18:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010b1a:	6803      	ldr	r3, [r0, #0]
 8010b1c:	60d9      	str	r1, [r3, #12]
 8010b1e:	e7f9      	b.n	8010b14 <DMA_SetConfig+0x14>

08010b20 <HAL_DMA_Init>:
{ 
 8010b20:	b530      	push	{r4, r5, lr}
  if(hdma == NULL)
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d022      	beq.n	8010b6c <HAL_DMA_Init+0x4c>
  if(hdma->State == HAL_DMA_STATE_RESET)
 8010b26:	2321      	movs	r3, #33	; 0x21
 8010b28:	5cc3      	ldrb	r3, [r0, r3]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d102      	bne.n	8010b34 <HAL_DMA_Init+0x14>
    hdma->Lock = HAL_UNLOCKED;
 8010b2e:	3320      	adds	r3, #32
 8010b30:	2200      	movs	r2, #0
 8010b32:	54c2      	strb	r2, [r0, r3]
  hdma->State = HAL_DMA_STATE_BUSY;
 8010b34:	2121      	movs	r1, #33	; 0x21
 8010b36:	2302      	movs	r3, #2
 8010b38:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 8010b3a:	6804      	ldr	r4, [r0, #0]
 8010b3c:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010b3e:	4a0c      	ldr	r2, [pc, #48]	; (8010b70 <HAL_DMA_Init+0x50>)
 8010b40:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8010b42:	6843      	ldr	r3, [r0, #4]
 8010b44:	6885      	ldr	r5, [r0, #8]
 8010b46:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010b48:	68c5      	ldr	r5, [r0, #12]
 8010b4a:	432b      	orrs	r3, r5
 8010b4c:	6905      	ldr	r5, [r0, #16]
 8010b4e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010b50:	6945      	ldr	r5, [r0, #20]
 8010b52:	432b      	orrs	r3, r5
 8010b54:	6985      	ldr	r5, [r0, #24]
 8010b56:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010b58:	69c5      	ldr	r5, [r0, #28]
 8010b5a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010b5c:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8010b5e:	6023      	str	r3, [r4, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010b60:	2300      	movs	r3, #0
 8010b62:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State  = HAL_DMA_STATE_READY;
 8010b64:	3301      	adds	r3, #1
 8010b66:	5443      	strb	r3, [r0, r1]
  return HAL_OK;
 8010b68:	2000      	movs	r0, #0
}  
 8010b6a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010b6c:	2001      	movs	r0, #1
 8010b6e:	e7fc      	b.n	8010b6a <HAL_DMA_Init+0x4a>
 8010b70:	ffffc00f 	.word	0xffffc00f

08010b74 <HAL_DMA_Start_IT>:
{
 8010b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b76:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8010b78:	2020      	movs	r0, #32
 8010b7a:	5c20      	ldrb	r0, [r4, r0]
 8010b7c:	2801      	cmp	r0, #1
 8010b7e:	d020      	beq.n	8010bc2 <HAL_DMA_Start_IT+0x4e>
 8010b80:	2501      	movs	r5, #1
 8010b82:	2020      	movs	r0, #32
 8010b84:	5425      	strb	r5, [r4, r0]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010b86:	2602      	movs	r6, #2
 8010b88:	3001      	adds	r0, #1
 8010b8a:	5426      	strb	r6, [r4, r0]
  __HAL_DMA_DISABLE(hdma);
 8010b8c:	6827      	ldr	r7, [r4, #0]
 8010b8e:	6838      	ldr	r0, [r7, #0]
 8010b90:	43a8      	bics	r0, r5
 8010b92:	6038      	str	r0, [r7, #0]
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010b94:	0020      	movs	r0, r4
 8010b96:	f7ff ffb3 	bl	8010b00 <DMA_SetConfig>
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010b9a:	6822      	ldr	r2, [r4, #0]
 8010b9c:	6813      	ldr	r3, [r2, #0]
 8010b9e:	4333      	orrs	r3, r6
 8010ba0:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010ba2:	6822      	ldr	r2, [r4, #0]
 8010ba4:	6813      	ldr	r3, [r2, #0]
 8010ba6:	2104      	movs	r1, #4
 8010ba8:	430b      	orrs	r3, r1
 8010baa:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010bac:	6822      	ldr	r2, [r4, #0]
 8010bae:	6813      	ldr	r3, [r2, #0]
 8010bb0:	3104      	adds	r1, #4
 8010bb2:	430b      	orrs	r3, r1
 8010bb4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010bb6:	6822      	ldr	r2, [r4, #0]
 8010bb8:	6813      	ldr	r3, [r2, #0]
 8010bba:	432b      	orrs	r3, r5
 8010bbc:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010bbe:	2000      	movs	r0, #0
} 
 8010bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8010bc2:	2002      	movs	r0, #2
 8010bc4:	e7fc      	b.n	8010bc0 <HAL_DMA_Start_IT+0x4c>

08010bc6 <HAL_DMA_Abort>:
{
 8010bc6:	b570      	push	{r4, r5, r6, lr}
 8010bc8:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010bca:	6802      	ldr	r2, [r0, #0]
 8010bcc:	6813      	ldr	r3, [r2, #0]
 8010bce:	2101      	movs	r1, #1
 8010bd0:	438b      	bics	r3, r1
 8010bd2:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010bd4:	f7ff fb12 	bl	80101fc <HAL_GetTick>
 8010bd8:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010bda:	6823      	ldr	r3, [r4, #0]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	07db      	lsls	r3, r3, #31
 8010be0:	d511      	bpl.n	8010c06 <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010be2:	f7ff fb0b 	bl	80101fc <HAL_GetTick>
 8010be6:	1b40      	subs	r0, r0, r5
 8010be8:	23fa      	movs	r3, #250	; 0xfa
 8010bea:	009b      	lsls	r3, r3, #2
 8010bec:	4298      	cmp	r0, r3
 8010bee:	d9f4      	bls.n	8010bda <HAL_DMA_Abort+0x14>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010bf2:	2220      	movs	r2, #32
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010bf8:	2321      	movs	r3, #33	; 0x21
 8010bfa:	2103      	movs	r1, #3
 8010bfc:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010bfe:	2300      	movs	r3, #0
 8010c00:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010c02:	2003      	movs	r0, #3
 8010c04:	e006      	b.n	8010c14 <HAL_DMA_Abort+0x4e>
  hdma->State = HAL_DMA_STATE_READY; 
 8010c06:	2321      	movs	r3, #33	; 0x21
 8010c08:	2201      	movs	r2, #1
 8010c0a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010c0c:	3b01      	subs	r3, #1
 8010c0e:	2200      	movs	r2, #0
 8010c10:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010c12:	2000      	movs	r0, #0
}
 8010c14:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c18 <HAL_DMA_IRQHandler>:
{        
 8010c18:	b510      	push	{r4, lr}
 8010c1a:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010c1c:	6802      	ldr	r2, [r0, #0]
 8010c1e:	4bb6      	ldr	r3, [pc, #728]	; (8010ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d800      	bhi.n	8010c26 <HAL_DMA_IRQHandler+0xe>
 8010c24:	e083      	b.n	8010d2e <HAL_DMA_IRQHandler+0x116>
 8010c26:	4bb5      	ldr	r3, [pc, #724]	; (8010efc <HAL_DMA_IRQHandler+0x2e4>)
 8010c28:	6819      	ldr	r1, [r3, #0]
 8010c2a:	4bb5      	ldr	r3, [pc, #724]	; (8010f00 <HAL_DMA_IRQHandler+0x2e8>)
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d023      	beq.n	8010c78 <HAL_DMA_IRQHandler+0x60>
 8010c30:	4bb4      	ldr	r3, [pc, #720]	; (8010f04 <HAL_DMA_IRQHandler+0x2ec>)
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d063      	beq.n	8010cfe <HAL_DMA_IRQHandler+0xe6>
 8010c36:	4bb4      	ldr	r3, [pc, #720]	; (8010f08 <HAL_DMA_IRQHandler+0x2f0>)
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d062      	beq.n	8010d02 <HAL_DMA_IRQHandler+0xea>
 8010c3c:	4bb3      	ldr	r3, [pc, #716]	; (8010f0c <HAL_DMA_IRQHandler+0x2f4>)
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d062      	beq.n	8010d08 <HAL_DMA_IRQHandler+0xf0>
 8010c42:	4bb3      	ldr	r3, [pc, #716]	; (8010f10 <HAL_DMA_IRQHandler+0x2f8>)
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d062      	beq.n	8010d0e <HAL_DMA_IRQHandler+0xf6>
 8010c48:	4bb2      	ldr	r3, [pc, #712]	; (8010f14 <HAL_DMA_IRQHandler+0x2fc>)
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d062      	beq.n	8010d14 <HAL_DMA_IRQHandler+0xfc>
 8010c4e:	4baa      	ldr	r3, [pc, #680]	; (8010ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d062      	beq.n	8010d1a <HAL_DMA_IRQHandler+0x102>
 8010c54:	4bb0      	ldr	r3, [pc, #704]	; (8010f18 <HAL_DMA_IRQHandler+0x300>)
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d062      	beq.n	8010d20 <HAL_DMA_IRQHandler+0x108>
 8010c5a:	4bb0      	ldr	r3, [pc, #704]	; (8010f1c <HAL_DMA_IRQHandler+0x304>)
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d061      	beq.n	8010d24 <HAL_DMA_IRQHandler+0x10c>
 8010c60:	4baf      	ldr	r3, [pc, #700]	; (8010f20 <HAL_DMA_IRQHandler+0x308>)
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d060      	beq.n	8010d28 <HAL_DMA_IRQHandler+0x110>
 8010c66:	4baf      	ldr	r3, [pc, #700]	; (8010f24 <HAL_DMA_IRQHandler+0x30c>)
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d002      	beq.n	8010c72 <HAL_DMA_IRQHandler+0x5a>
 8010c6c:	2380      	movs	r3, #128	; 0x80
 8010c6e:	031b      	lsls	r3, r3, #12
 8010c70:	e003      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010c72:	2380      	movs	r3, #128	; 0x80
 8010c74:	021b      	lsls	r3, r3, #8
 8010c76:	e000      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010c78:	2308      	movs	r3, #8
 8010c7a:	400b      	ands	r3, r1
 8010c7c:	1e59      	subs	r1, r3, #1
 8010c7e:	418b      	sbcs	r3, r1
 8010c80:	b2db      	uxtb	r3, r3
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d100      	bne.n	8010c88 <HAL_DMA_IRQHandler+0x70>
 8010c86:	e0ae      	b.n	8010de6 <HAL_DMA_IRQHandler+0x1ce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010c88:	6813      	ldr	r3, [r2, #0]
 8010c8a:	071b      	lsls	r3, r3, #28
 8010c8c:	d400      	bmi.n	8010c90 <HAL_DMA_IRQHandler+0x78>
 8010c8e:	e0aa      	b.n	8010de6 <HAL_DMA_IRQHandler+0x1ce>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010c90:	6813      	ldr	r3, [r2, #0]
 8010c92:	2108      	movs	r1, #8
 8010c94:	438b      	bics	r3, r1
 8010c96:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010c98:	6823      	ldr	r3, [r4, #0]
 8010c9a:	4a97      	ldr	r2, [pc, #604]	; (8010ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d800      	bhi.n	8010ca2 <HAL_DMA_IRQHandler+0x8a>
 8010ca0:	e0ee      	b.n	8010e80 <HAL_DMA_IRQHandler+0x268>
 8010ca2:	4a97      	ldr	r2, [pc, #604]	; (8010f00 <HAL_DMA_IRQHandler+0x2e8>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d100      	bne.n	8010caa <HAL_DMA_IRQHandler+0x92>
 8010ca8:	e08b      	b.n	8010dc2 <HAL_DMA_IRQHandler+0x1aa>
 8010caa:	4a96      	ldr	r2, [pc, #600]	; (8010f04 <HAL_DMA_IRQHandler+0x2ec>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d100      	bne.n	8010cb2 <HAL_DMA_IRQHandler+0x9a>
 8010cb0:	e0ce      	b.n	8010e50 <HAL_DMA_IRQHandler+0x238>
 8010cb2:	4a95      	ldr	r2, [pc, #596]	; (8010f08 <HAL_DMA_IRQHandler+0x2f0>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d100      	bne.n	8010cba <HAL_DMA_IRQHandler+0xa2>
 8010cb8:	e0cc      	b.n	8010e54 <HAL_DMA_IRQHandler+0x23c>
 8010cba:	4a94      	ldr	r2, [pc, #592]	; (8010f0c <HAL_DMA_IRQHandler+0x2f4>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d100      	bne.n	8010cc2 <HAL_DMA_IRQHandler+0xaa>
 8010cc0:	e0cb      	b.n	8010e5a <HAL_DMA_IRQHandler+0x242>
 8010cc2:	4a93      	ldr	r2, [pc, #588]	; (8010f10 <HAL_DMA_IRQHandler+0x2f8>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d100      	bne.n	8010cca <HAL_DMA_IRQHandler+0xb2>
 8010cc8:	e0ca      	b.n	8010e60 <HAL_DMA_IRQHandler+0x248>
 8010cca:	4a92      	ldr	r2, [pc, #584]	; (8010f14 <HAL_DMA_IRQHandler+0x2fc>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d100      	bne.n	8010cd2 <HAL_DMA_IRQHandler+0xba>
 8010cd0:	e0c9      	b.n	8010e66 <HAL_DMA_IRQHandler+0x24e>
 8010cd2:	4a89      	ldr	r2, [pc, #548]	; (8010ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d100      	bne.n	8010cda <HAL_DMA_IRQHandler+0xc2>
 8010cd8:	e0c8      	b.n	8010e6c <HAL_DMA_IRQHandler+0x254>
 8010cda:	4a8f      	ldr	r2, [pc, #572]	; (8010f18 <HAL_DMA_IRQHandler+0x300>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d100      	bne.n	8010ce2 <HAL_DMA_IRQHandler+0xca>
 8010ce0:	e0c7      	b.n	8010e72 <HAL_DMA_IRQHandler+0x25a>
 8010ce2:	4a8e      	ldr	r2, [pc, #568]	; (8010f1c <HAL_DMA_IRQHandler+0x304>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d100      	bne.n	8010cea <HAL_DMA_IRQHandler+0xd2>
 8010ce8:	e0c5      	b.n	8010e76 <HAL_DMA_IRQHandler+0x25e>
 8010cea:	4a8d      	ldr	r2, [pc, #564]	; (8010f20 <HAL_DMA_IRQHandler+0x308>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d100      	bne.n	8010cf2 <HAL_DMA_IRQHandler+0xda>
 8010cf0:	e0c3      	b.n	8010e7a <HAL_DMA_IRQHandler+0x262>
 8010cf2:	4a8c      	ldr	r2, [pc, #560]	; (8010f24 <HAL_DMA_IRQHandler+0x30c>)
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d061      	beq.n	8010dbc <HAL_DMA_IRQHandler+0x1a4>
 8010cf8:	2280      	movs	r2, #128	; 0x80
 8010cfa:	0312      	lsls	r2, r2, #12
 8010cfc:	e062      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010cfe:	2380      	movs	r3, #128	; 0x80
 8010d00:	e7bb      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010d02:	2380      	movs	r3, #128	; 0x80
 8010d04:	011b      	lsls	r3, r3, #4
 8010d06:	e7b8      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010d08:	2380      	movs	r3, #128	; 0x80
 8010d0a:	021b      	lsls	r3, r3, #8
 8010d0c:	e7b5      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010d0e:	2380      	movs	r3, #128	; 0x80
 8010d10:	031b      	lsls	r3, r3, #12
 8010d12:	e7b2      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010d14:	2380      	movs	r3, #128	; 0x80
 8010d16:	041b      	lsls	r3, r3, #16
 8010d18:	e7af      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010d1a:	2380      	movs	r3, #128	; 0x80
 8010d1c:	051b      	lsls	r3, r3, #20
 8010d1e:	e7ac      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010d20:	2308      	movs	r3, #8
 8010d22:	e7aa      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010d24:	2380      	movs	r3, #128	; 0x80
 8010d26:	e7a8      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010d28:	2380      	movs	r3, #128	; 0x80
 8010d2a:	011b      	lsls	r3, r3, #4
 8010d2c:	e7a5      	b.n	8010c7a <HAL_DMA_IRQHandler+0x62>
 8010d2e:	4b7e      	ldr	r3, [pc, #504]	; (8010f28 <HAL_DMA_IRQHandler+0x310>)
 8010d30:	6819      	ldr	r1, [r3, #0]
 8010d32:	4b73      	ldr	r3, [pc, #460]	; (8010f00 <HAL_DMA_IRQHandler+0x2e8>)
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d023      	beq.n	8010d80 <HAL_DMA_IRQHandler+0x168>
 8010d38:	4b72      	ldr	r3, [pc, #456]	; (8010f04 <HAL_DMA_IRQHandler+0x2ec>)
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d026      	beq.n	8010d8c <HAL_DMA_IRQHandler+0x174>
 8010d3e:	4b72      	ldr	r3, [pc, #456]	; (8010f08 <HAL_DMA_IRQHandler+0x2f0>)
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d025      	beq.n	8010d90 <HAL_DMA_IRQHandler+0x178>
 8010d44:	4b71      	ldr	r3, [pc, #452]	; (8010f0c <HAL_DMA_IRQHandler+0x2f4>)
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d025      	beq.n	8010d96 <HAL_DMA_IRQHandler+0x17e>
 8010d4a:	4b71      	ldr	r3, [pc, #452]	; (8010f10 <HAL_DMA_IRQHandler+0x2f8>)
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d025      	beq.n	8010d9c <HAL_DMA_IRQHandler+0x184>
 8010d50:	4b70      	ldr	r3, [pc, #448]	; (8010f14 <HAL_DMA_IRQHandler+0x2fc>)
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d025      	beq.n	8010da2 <HAL_DMA_IRQHandler+0x18a>
 8010d56:	4b68      	ldr	r3, [pc, #416]	; (8010ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d025      	beq.n	8010da8 <HAL_DMA_IRQHandler+0x190>
 8010d5c:	4b6e      	ldr	r3, [pc, #440]	; (8010f18 <HAL_DMA_IRQHandler+0x300>)
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d025      	beq.n	8010dae <HAL_DMA_IRQHandler+0x196>
 8010d62:	4b6e      	ldr	r3, [pc, #440]	; (8010f1c <HAL_DMA_IRQHandler+0x304>)
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d024      	beq.n	8010db2 <HAL_DMA_IRQHandler+0x19a>
 8010d68:	4b6d      	ldr	r3, [pc, #436]	; (8010f20 <HAL_DMA_IRQHandler+0x308>)
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d023      	beq.n	8010db6 <HAL_DMA_IRQHandler+0x19e>
 8010d6e:	4b6d      	ldr	r3, [pc, #436]	; (8010f24 <HAL_DMA_IRQHandler+0x30c>)
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d002      	beq.n	8010d7a <HAL_DMA_IRQHandler+0x162>
 8010d74:	2380      	movs	r3, #128	; 0x80
 8010d76:	031b      	lsls	r3, r3, #12
 8010d78:	e003      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
 8010d7a:	2380      	movs	r3, #128	; 0x80
 8010d7c:	021b      	lsls	r3, r3, #8
 8010d7e:	e000      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
 8010d80:	2308      	movs	r3, #8
 8010d82:	400b      	ands	r3, r1
 8010d84:	1e59      	subs	r1, r3, #1
 8010d86:	418b      	sbcs	r3, r1
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	e77a      	b.n	8010c82 <HAL_DMA_IRQHandler+0x6a>
 8010d8c:	2380      	movs	r3, #128	; 0x80
 8010d8e:	e7f8      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
 8010d90:	2380      	movs	r3, #128	; 0x80
 8010d92:	011b      	lsls	r3, r3, #4
 8010d94:	e7f5      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
 8010d96:	2380      	movs	r3, #128	; 0x80
 8010d98:	021b      	lsls	r3, r3, #8
 8010d9a:	e7f2      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
 8010d9c:	2380      	movs	r3, #128	; 0x80
 8010d9e:	031b      	lsls	r3, r3, #12
 8010da0:	e7ef      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
 8010da2:	2380      	movs	r3, #128	; 0x80
 8010da4:	041b      	lsls	r3, r3, #16
 8010da6:	e7ec      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
 8010da8:	2380      	movs	r3, #128	; 0x80
 8010daa:	051b      	lsls	r3, r3, #20
 8010dac:	e7e9      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
 8010dae:	2308      	movs	r3, #8
 8010db0:	e7e7      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
 8010db2:	2380      	movs	r3, #128	; 0x80
 8010db4:	e7e5      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
 8010db6:	2380      	movs	r3, #128	; 0x80
 8010db8:	011b      	lsls	r3, r3, #4
 8010dba:	e7e2      	b.n	8010d82 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010dbc:	2280      	movs	r2, #128	; 0x80
 8010dbe:	0212      	lsls	r2, r2, #8
 8010dc0:	e000      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
 8010dc2:	2208      	movs	r2, #8
 8010dc4:	4b4d      	ldr	r3, [pc, #308]	; (8010efc <HAL_DMA_IRQHandler+0x2e4>)
 8010dc6:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010dca:	2201      	movs	r2, #1
 8010dcc:	4313      	orrs	r3, r2
 8010dce:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010dd0:	2321      	movs	r3, #33	; 0x21
 8010dd2:	3203      	adds	r2, #3
 8010dd4:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	2200      	movs	r2, #0
 8010dda:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010ddc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d001      	beq.n	8010de6 <HAL_DMA_IRQHandler+0x1ce>
        hdma->XferErrorCallback(hdma);
 8010de2:	0020      	movs	r0, r4
 8010de4:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010de6:	6822      	ldr	r2, [r4, #0]
 8010de8:	4b43      	ldr	r3, [pc, #268]	; (8010ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d800      	bhi.n	8010df0 <HAL_DMA_IRQHandler+0x1d8>
 8010dee:	e105      	b.n	8010ffc <HAL_DMA_IRQHandler+0x3e4>
 8010df0:	4b42      	ldr	r3, [pc, #264]	; (8010efc <HAL_DMA_IRQHandler+0x2e4>)
 8010df2:	6819      	ldr	r1, [r3, #0]
 8010df4:	4b42      	ldr	r3, [pc, #264]	; (8010f00 <HAL_DMA_IRQHandler+0x2e8>)
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d100      	bne.n	8010dfc <HAL_DMA_IRQHandler+0x1e4>
 8010dfa:	e0a1      	b.n	8010f40 <HAL_DMA_IRQHandler+0x328>
 8010dfc:	4b41      	ldr	r3, [pc, #260]	; (8010f04 <HAL_DMA_IRQHandler+0x2ec>)
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d100      	bne.n	8010e04 <HAL_DMA_IRQHandler+0x1ec>
 8010e02:	e0e3      	b.n	8010fcc <HAL_DMA_IRQHandler+0x3b4>
 8010e04:	4b40      	ldr	r3, [pc, #256]	; (8010f08 <HAL_DMA_IRQHandler+0x2f0>)
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d100      	bne.n	8010e0c <HAL_DMA_IRQHandler+0x1f4>
 8010e0a:	e0e1      	b.n	8010fd0 <HAL_DMA_IRQHandler+0x3b8>
 8010e0c:	4b3f      	ldr	r3, [pc, #252]	; (8010f0c <HAL_DMA_IRQHandler+0x2f4>)
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d100      	bne.n	8010e14 <HAL_DMA_IRQHandler+0x1fc>
 8010e12:	e0e0      	b.n	8010fd6 <HAL_DMA_IRQHandler+0x3be>
 8010e14:	4b3e      	ldr	r3, [pc, #248]	; (8010f10 <HAL_DMA_IRQHandler+0x2f8>)
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d100      	bne.n	8010e1c <HAL_DMA_IRQHandler+0x204>
 8010e1a:	e0df      	b.n	8010fdc <HAL_DMA_IRQHandler+0x3c4>
 8010e1c:	4b3d      	ldr	r3, [pc, #244]	; (8010f14 <HAL_DMA_IRQHandler+0x2fc>)
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d100      	bne.n	8010e24 <HAL_DMA_IRQHandler+0x20c>
 8010e22:	e0de      	b.n	8010fe2 <HAL_DMA_IRQHandler+0x3ca>
 8010e24:	4b34      	ldr	r3, [pc, #208]	; (8010ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d100      	bne.n	8010e2c <HAL_DMA_IRQHandler+0x214>
 8010e2a:	e0dd      	b.n	8010fe8 <HAL_DMA_IRQHandler+0x3d0>
 8010e2c:	4b3a      	ldr	r3, [pc, #232]	; (8010f18 <HAL_DMA_IRQHandler+0x300>)
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d100      	bne.n	8010e34 <HAL_DMA_IRQHandler+0x21c>
 8010e32:	e0dc      	b.n	8010fee <HAL_DMA_IRQHandler+0x3d6>
 8010e34:	4b39      	ldr	r3, [pc, #228]	; (8010f1c <HAL_DMA_IRQHandler+0x304>)
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d100      	bne.n	8010e3c <HAL_DMA_IRQHandler+0x224>
 8010e3a:	e0da      	b.n	8010ff2 <HAL_DMA_IRQHandler+0x3da>
 8010e3c:	4b38      	ldr	r3, [pc, #224]	; (8010f20 <HAL_DMA_IRQHandler+0x308>)
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d100      	bne.n	8010e44 <HAL_DMA_IRQHandler+0x22c>
 8010e42:	e0d8      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x3de>
 8010e44:	4b37      	ldr	r3, [pc, #220]	; (8010f24 <HAL_DMA_IRQHandler+0x30c>)
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d077      	beq.n	8010f3a <HAL_DMA_IRQHandler+0x322>
 8010e4a:	2380      	movs	r3, #128	; 0x80
 8010e4c:	02db      	lsls	r3, r3, #11
 8010e4e:	e078      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010e50:	2280      	movs	r2, #128	; 0x80
 8010e52:	e7b7      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
 8010e54:	2280      	movs	r2, #128	; 0x80
 8010e56:	0112      	lsls	r2, r2, #4
 8010e58:	e7b4      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
 8010e5a:	2280      	movs	r2, #128	; 0x80
 8010e5c:	0212      	lsls	r2, r2, #8
 8010e5e:	e7b1      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
 8010e60:	2280      	movs	r2, #128	; 0x80
 8010e62:	0312      	lsls	r2, r2, #12
 8010e64:	e7ae      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
 8010e66:	2280      	movs	r2, #128	; 0x80
 8010e68:	0412      	lsls	r2, r2, #16
 8010e6a:	e7ab      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
 8010e6c:	2280      	movs	r2, #128	; 0x80
 8010e6e:	0512      	lsls	r2, r2, #20
 8010e70:	e7a8      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
 8010e72:	2208      	movs	r2, #8
 8010e74:	e7a6      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
 8010e76:	2280      	movs	r2, #128	; 0x80
 8010e78:	e7a4      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
 8010e7a:	2280      	movs	r2, #128	; 0x80
 8010e7c:	0112      	lsls	r2, r2, #4
 8010e7e:	e7a1      	b.n	8010dc4 <HAL_DMA_IRQHandler+0x1ac>
 8010e80:	4a1f      	ldr	r2, [pc, #124]	; (8010f00 <HAL_DMA_IRQHandler+0x2e8>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d023      	beq.n	8010ece <HAL_DMA_IRQHandler+0x2b6>
 8010e86:	4a1f      	ldr	r2, [pc, #124]	; (8010f04 <HAL_DMA_IRQHandler+0x2ec>)
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d024      	beq.n	8010ed6 <HAL_DMA_IRQHandler+0x2be>
 8010e8c:	4a1e      	ldr	r2, [pc, #120]	; (8010f08 <HAL_DMA_IRQHandler+0x2f0>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d023      	beq.n	8010eda <HAL_DMA_IRQHandler+0x2c2>
 8010e92:	4a1e      	ldr	r2, [pc, #120]	; (8010f0c <HAL_DMA_IRQHandler+0x2f4>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d023      	beq.n	8010ee0 <HAL_DMA_IRQHandler+0x2c8>
 8010e98:	4a1d      	ldr	r2, [pc, #116]	; (8010f10 <HAL_DMA_IRQHandler+0x2f8>)
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d023      	beq.n	8010ee6 <HAL_DMA_IRQHandler+0x2ce>
 8010e9e:	4a1d      	ldr	r2, [pc, #116]	; (8010f14 <HAL_DMA_IRQHandler+0x2fc>)
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	d023      	beq.n	8010eec <HAL_DMA_IRQHandler+0x2d4>
 8010ea4:	4a14      	ldr	r2, [pc, #80]	; (8010ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d023      	beq.n	8010ef2 <HAL_DMA_IRQHandler+0x2da>
 8010eaa:	4a1b      	ldr	r2, [pc, #108]	; (8010f18 <HAL_DMA_IRQHandler+0x300>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d03d      	beq.n	8010f2c <HAL_DMA_IRQHandler+0x314>
 8010eb0:	4a1a      	ldr	r2, [pc, #104]	; (8010f1c <HAL_DMA_IRQHandler+0x304>)
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d03c      	beq.n	8010f30 <HAL_DMA_IRQHandler+0x318>
 8010eb6:	4a1a      	ldr	r2, [pc, #104]	; (8010f20 <HAL_DMA_IRQHandler+0x308>)
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d03b      	beq.n	8010f34 <HAL_DMA_IRQHandler+0x31c>
 8010ebc:	4a19      	ldr	r2, [pc, #100]	; (8010f24 <HAL_DMA_IRQHandler+0x30c>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d002      	beq.n	8010ec8 <HAL_DMA_IRQHandler+0x2b0>
 8010ec2:	2280      	movs	r2, #128	; 0x80
 8010ec4:	0312      	lsls	r2, r2, #12
 8010ec6:	e003      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
 8010ec8:	2280      	movs	r2, #128	; 0x80
 8010eca:	0212      	lsls	r2, r2, #8
 8010ecc:	e000      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
 8010ece:	2208      	movs	r2, #8
 8010ed0:	4b15      	ldr	r3, [pc, #84]	; (8010f28 <HAL_DMA_IRQHandler+0x310>)
 8010ed2:	605a      	str	r2, [r3, #4]
 8010ed4:	e778      	b.n	8010dc8 <HAL_DMA_IRQHandler+0x1b0>
 8010ed6:	2280      	movs	r2, #128	; 0x80
 8010ed8:	e7fa      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
 8010eda:	2280      	movs	r2, #128	; 0x80
 8010edc:	0112      	lsls	r2, r2, #4
 8010ede:	e7f7      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
 8010ee0:	2280      	movs	r2, #128	; 0x80
 8010ee2:	0212      	lsls	r2, r2, #8
 8010ee4:	e7f4      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
 8010ee6:	2280      	movs	r2, #128	; 0x80
 8010ee8:	0312      	lsls	r2, r2, #12
 8010eea:	e7f1      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
 8010eec:	2280      	movs	r2, #128	; 0x80
 8010eee:	0412      	lsls	r2, r2, #16
 8010ef0:	e7ee      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
 8010ef2:	2280      	movs	r2, #128	; 0x80
 8010ef4:	0512      	lsls	r2, r2, #20
 8010ef6:	e7eb      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
 8010ef8:	40020080 	.word	0x40020080
 8010efc:	40020400 	.word	0x40020400
 8010f00:	40020008 	.word	0x40020008
 8010f04:	4002001c 	.word	0x4002001c
 8010f08:	40020030 	.word	0x40020030
 8010f0c:	40020044 	.word	0x40020044
 8010f10:	40020058 	.word	0x40020058
 8010f14:	4002006c 	.word	0x4002006c
 8010f18:	40020408 	.word	0x40020408
 8010f1c:	4002041c 	.word	0x4002041c
 8010f20:	40020430 	.word	0x40020430
 8010f24:	40020444 	.word	0x40020444
 8010f28:	40020000 	.word	0x40020000
 8010f2c:	2208      	movs	r2, #8
 8010f2e:	e7cf      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
 8010f30:	2280      	movs	r2, #128	; 0x80
 8010f32:	e7cd      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
 8010f34:	2280      	movs	r2, #128	; 0x80
 8010f36:	0112      	lsls	r2, r2, #4
 8010f38:	e7ca      	b.n	8010ed0 <HAL_DMA_IRQHandler+0x2b8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010f3a:	2380      	movs	r3, #128	; 0x80
 8010f3c:	01db      	lsls	r3, r3, #7
 8010f3e:	e000      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
 8010f40:	2304      	movs	r3, #4
 8010f42:	400b      	ands	r3, r1
 8010f44:	1e59      	subs	r1, r3, #1
 8010f46:	418b      	sbcs	r3, r1
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d100      	bne.n	8010f50 <HAL_DMA_IRQHandler+0x338>
 8010f4e:	e0aa      	b.n	80110a6 <HAL_DMA_IRQHandler+0x48e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010f50:	6813      	ldr	r3, [r2, #0]
 8010f52:	075b      	lsls	r3, r3, #29
 8010f54:	d400      	bmi.n	8010f58 <HAL_DMA_IRQHandler+0x340>
 8010f56:	e0a6      	b.n	80110a6 <HAL_DMA_IRQHandler+0x48e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010f58:	6813      	ldr	r3, [r2, #0]
 8010f5a:	069b      	lsls	r3, r3, #26
 8010f5c:	d403      	bmi.n	8010f66 <HAL_DMA_IRQHandler+0x34e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010f5e:	6813      	ldr	r3, [r2, #0]
 8010f60:	2104      	movs	r1, #4
 8010f62:	438b      	bics	r3, r1
 8010f64:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010f66:	6823      	ldr	r3, [r4, #0]
 8010f68:	4a98      	ldr	r2, [pc, #608]	; (80111cc <HAL_DMA_IRQHandler+0x5b4>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d800      	bhi.n	8010f70 <HAL_DMA_IRQHandler+0x358>
 8010f6e:	e0e7      	b.n	8011140 <HAL_DMA_IRQHandler+0x528>
 8010f70:	4a97      	ldr	r2, [pc, #604]	; (80111d0 <HAL_DMA_IRQHandler+0x5b8>)
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d100      	bne.n	8010f78 <HAL_DMA_IRQHandler+0x360>
 8010f76:	e08b      	b.n	8011090 <HAL_DMA_IRQHandler+0x478>
 8010f78:	4a96      	ldr	r2, [pc, #600]	; (80111d4 <HAL_DMA_IRQHandler+0x5bc>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d100      	bne.n	8010f80 <HAL_DMA_IRQHandler+0x368>
 8010f7e:	e0c7      	b.n	8011110 <HAL_DMA_IRQHandler+0x4f8>
 8010f80:	4a95      	ldr	r2, [pc, #596]	; (80111d8 <HAL_DMA_IRQHandler+0x5c0>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d100      	bne.n	8010f88 <HAL_DMA_IRQHandler+0x370>
 8010f86:	e0c5      	b.n	8011114 <HAL_DMA_IRQHandler+0x4fc>
 8010f88:	4a94      	ldr	r2, [pc, #592]	; (80111dc <HAL_DMA_IRQHandler+0x5c4>)
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	d100      	bne.n	8010f90 <HAL_DMA_IRQHandler+0x378>
 8010f8e:	e0c4      	b.n	801111a <HAL_DMA_IRQHandler+0x502>
 8010f90:	4a93      	ldr	r2, [pc, #588]	; (80111e0 <HAL_DMA_IRQHandler+0x5c8>)
 8010f92:	4293      	cmp	r3, r2
 8010f94:	d100      	bne.n	8010f98 <HAL_DMA_IRQHandler+0x380>
 8010f96:	e0c3      	b.n	8011120 <HAL_DMA_IRQHandler+0x508>
 8010f98:	4a92      	ldr	r2, [pc, #584]	; (80111e4 <HAL_DMA_IRQHandler+0x5cc>)
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	d100      	bne.n	8010fa0 <HAL_DMA_IRQHandler+0x388>
 8010f9e:	e0c2      	b.n	8011126 <HAL_DMA_IRQHandler+0x50e>
 8010fa0:	4a8a      	ldr	r2, [pc, #552]	; (80111cc <HAL_DMA_IRQHandler+0x5b4>)
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	d100      	bne.n	8010fa8 <HAL_DMA_IRQHandler+0x390>
 8010fa6:	e0c1      	b.n	801112c <HAL_DMA_IRQHandler+0x514>
 8010fa8:	4a8f      	ldr	r2, [pc, #572]	; (80111e8 <HAL_DMA_IRQHandler+0x5d0>)
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d100      	bne.n	8010fb0 <HAL_DMA_IRQHandler+0x398>
 8010fae:	e0c0      	b.n	8011132 <HAL_DMA_IRQHandler+0x51a>
 8010fb0:	4a8e      	ldr	r2, [pc, #568]	; (80111ec <HAL_DMA_IRQHandler+0x5d4>)
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d100      	bne.n	8010fb8 <HAL_DMA_IRQHandler+0x3a0>
 8010fb6:	e0be      	b.n	8011136 <HAL_DMA_IRQHandler+0x51e>
 8010fb8:	4a8d      	ldr	r2, [pc, #564]	; (80111f0 <HAL_DMA_IRQHandler+0x5d8>)
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	d100      	bne.n	8010fc0 <HAL_DMA_IRQHandler+0x3a8>
 8010fbe:	e0bc      	b.n	801113a <HAL_DMA_IRQHandler+0x522>
 8010fc0:	4a8c      	ldr	r2, [pc, #560]	; (80111f4 <HAL_DMA_IRQHandler+0x5dc>)
 8010fc2:	4293      	cmp	r3, r2
 8010fc4:	d061      	beq.n	801108a <HAL_DMA_IRQHandler+0x472>
 8010fc6:	2280      	movs	r2, #128	; 0x80
 8010fc8:	02d2      	lsls	r2, r2, #11
 8010fca:	e062      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010fcc:	2340      	movs	r3, #64	; 0x40
 8010fce:	e7b8      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
 8010fd0:	2380      	movs	r3, #128	; 0x80
 8010fd2:	00db      	lsls	r3, r3, #3
 8010fd4:	e7b5      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
 8010fd6:	2380      	movs	r3, #128	; 0x80
 8010fd8:	01db      	lsls	r3, r3, #7
 8010fda:	e7b2      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
 8010fdc:	2380      	movs	r3, #128	; 0x80
 8010fde:	02db      	lsls	r3, r3, #11
 8010fe0:	e7af      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
 8010fe2:	2380      	movs	r3, #128	; 0x80
 8010fe4:	03db      	lsls	r3, r3, #15
 8010fe6:	e7ac      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
 8010fe8:	2380      	movs	r3, #128	; 0x80
 8010fea:	04db      	lsls	r3, r3, #19
 8010fec:	e7a9      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
 8010fee:	2304      	movs	r3, #4
 8010ff0:	e7a7      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
 8010ff2:	2340      	movs	r3, #64	; 0x40
 8010ff4:	e7a5      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
 8010ff6:	2380      	movs	r3, #128	; 0x80
 8010ff8:	00db      	lsls	r3, r3, #3
 8010ffa:	e7a2      	b.n	8010f42 <HAL_DMA_IRQHandler+0x32a>
 8010ffc:	4b7e      	ldr	r3, [pc, #504]	; (80111f8 <HAL_DMA_IRQHandler+0x5e0>)
 8010ffe:	6819      	ldr	r1, [r3, #0]
 8011000:	4b73      	ldr	r3, [pc, #460]	; (80111d0 <HAL_DMA_IRQHandler+0x5b8>)
 8011002:	429a      	cmp	r2, r3
 8011004:	d023      	beq.n	801104e <HAL_DMA_IRQHandler+0x436>
 8011006:	4b73      	ldr	r3, [pc, #460]	; (80111d4 <HAL_DMA_IRQHandler+0x5bc>)
 8011008:	429a      	cmp	r2, r3
 801100a:	d026      	beq.n	801105a <HAL_DMA_IRQHandler+0x442>
 801100c:	4b72      	ldr	r3, [pc, #456]	; (80111d8 <HAL_DMA_IRQHandler+0x5c0>)
 801100e:	429a      	cmp	r2, r3
 8011010:	d025      	beq.n	801105e <HAL_DMA_IRQHandler+0x446>
 8011012:	4b72      	ldr	r3, [pc, #456]	; (80111dc <HAL_DMA_IRQHandler+0x5c4>)
 8011014:	429a      	cmp	r2, r3
 8011016:	d025      	beq.n	8011064 <HAL_DMA_IRQHandler+0x44c>
 8011018:	4b71      	ldr	r3, [pc, #452]	; (80111e0 <HAL_DMA_IRQHandler+0x5c8>)
 801101a:	429a      	cmp	r2, r3
 801101c:	d025      	beq.n	801106a <HAL_DMA_IRQHandler+0x452>
 801101e:	4b71      	ldr	r3, [pc, #452]	; (80111e4 <HAL_DMA_IRQHandler+0x5cc>)
 8011020:	429a      	cmp	r2, r3
 8011022:	d025      	beq.n	8011070 <HAL_DMA_IRQHandler+0x458>
 8011024:	4b69      	ldr	r3, [pc, #420]	; (80111cc <HAL_DMA_IRQHandler+0x5b4>)
 8011026:	429a      	cmp	r2, r3
 8011028:	d025      	beq.n	8011076 <HAL_DMA_IRQHandler+0x45e>
 801102a:	4b6f      	ldr	r3, [pc, #444]	; (80111e8 <HAL_DMA_IRQHandler+0x5d0>)
 801102c:	429a      	cmp	r2, r3
 801102e:	d025      	beq.n	801107c <HAL_DMA_IRQHandler+0x464>
 8011030:	4b6e      	ldr	r3, [pc, #440]	; (80111ec <HAL_DMA_IRQHandler+0x5d4>)
 8011032:	429a      	cmp	r2, r3
 8011034:	d024      	beq.n	8011080 <HAL_DMA_IRQHandler+0x468>
 8011036:	4b6e      	ldr	r3, [pc, #440]	; (80111f0 <HAL_DMA_IRQHandler+0x5d8>)
 8011038:	429a      	cmp	r2, r3
 801103a:	d023      	beq.n	8011084 <HAL_DMA_IRQHandler+0x46c>
 801103c:	4b6d      	ldr	r3, [pc, #436]	; (80111f4 <HAL_DMA_IRQHandler+0x5dc>)
 801103e:	429a      	cmp	r2, r3
 8011040:	d002      	beq.n	8011048 <HAL_DMA_IRQHandler+0x430>
 8011042:	2380      	movs	r3, #128	; 0x80
 8011044:	02db      	lsls	r3, r3, #11
 8011046:	e003      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
 8011048:	2380      	movs	r3, #128	; 0x80
 801104a:	01db      	lsls	r3, r3, #7
 801104c:	e000      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
 801104e:	2304      	movs	r3, #4
 8011050:	400b      	ands	r3, r1
 8011052:	1e59      	subs	r1, r3, #1
 8011054:	418b      	sbcs	r3, r1
 8011056:	b2db      	uxtb	r3, r3
 8011058:	e777      	b.n	8010f4a <HAL_DMA_IRQHandler+0x332>
 801105a:	2340      	movs	r3, #64	; 0x40
 801105c:	e7f8      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
 801105e:	2380      	movs	r3, #128	; 0x80
 8011060:	00db      	lsls	r3, r3, #3
 8011062:	e7f5      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
 8011064:	2380      	movs	r3, #128	; 0x80
 8011066:	01db      	lsls	r3, r3, #7
 8011068:	e7f2      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
 801106a:	2380      	movs	r3, #128	; 0x80
 801106c:	02db      	lsls	r3, r3, #11
 801106e:	e7ef      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
 8011070:	2380      	movs	r3, #128	; 0x80
 8011072:	03db      	lsls	r3, r3, #15
 8011074:	e7ec      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
 8011076:	2380      	movs	r3, #128	; 0x80
 8011078:	04db      	lsls	r3, r3, #19
 801107a:	e7e9      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
 801107c:	2304      	movs	r3, #4
 801107e:	e7e7      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
 8011080:	2340      	movs	r3, #64	; 0x40
 8011082:	e7e5      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
 8011084:	2380      	movs	r3, #128	; 0x80
 8011086:	00db      	lsls	r3, r3, #3
 8011088:	e7e2      	b.n	8011050 <HAL_DMA_IRQHandler+0x438>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801108a:	2280      	movs	r2, #128	; 0x80
 801108c:	01d2      	lsls	r2, r2, #7
 801108e:	e000      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
 8011090:	2204      	movs	r2, #4
 8011092:	4b5a      	ldr	r3, [pc, #360]	; (80111fc <HAL_DMA_IRQHandler+0x5e4>)
 8011094:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8011096:	2321      	movs	r3, #33	; 0x21
 8011098:	2211      	movs	r2, #17
 801109a:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801109c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d001      	beq.n	80110a6 <HAL_DMA_IRQHandler+0x48e>
        hdma->XferHalfCpltCallback(hdma);
 80110a2:	0020      	movs	r0, r4
 80110a4:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80110a6:	6822      	ldr	r2, [r4, #0]
 80110a8:	4b48      	ldr	r3, [pc, #288]	; (80111cc <HAL_DMA_IRQHandler+0x5b4>)
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d800      	bhi.n	80110b0 <HAL_DMA_IRQHandler+0x498>
 80110ae:	e105      	b.n	80112bc <HAL_DMA_IRQHandler+0x6a4>
 80110b0:	4b52      	ldr	r3, [pc, #328]	; (80111fc <HAL_DMA_IRQHandler+0x5e4>)
 80110b2:	6819      	ldr	r1, [r3, #0]
 80110b4:	4b46      	ldr	r3, [pc, #280]	; (80111d0 <HAL_DMA_IRQHandler+0x5b8>)
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d100      	bne.n	80110bc <HAL_DMA_IRQHandler+0x4a4>
 80110ba:	e0a1      	b.n	8011200 <HAL_DMA_IRQHandler+0x5e8>
 80110bc:	4b45      	ldr	r3, [pc, #276]	; (80111d4 <HAL_DMA_IRQHandler+0x5bc>)
 80110be:	429a      	cmp	r2, r3
 80110c0:	d100      	bne.n	80110c4 <HAL_DMA_IRQHandler+0x4ac>
 80110c2:	e0e3      	b.n	801128c <HAL_DMA_IRQHandler+0x674>
 80110c4:	4b44      	ldr	r3, [pc, #272]	; (80111d8 <HAL_DMA_IRQHandler+0x5c0>)
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d100      	bne.n	80110cc <HAL_DMA_IRQHandler+0x4b4>
 80110ca:	e0e1      	b.n	8011290 <HAL_DMA_IRQHandler+0x678>
 80110cc:	4b43      	ldr	r3, [pc, #268]	; (80111dc <HAL_DMA_IRQHandler+0x5c4>)
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d100      	bne.n	80110d4 <HAL_DMA_IRQHandler+0x4bc>
 80110d2:	e0e0      	b.n	8011296 <HAL_DMA_IRQHandler+0x67e>
 80110d4:	4b42      	ldr	r3, [pc, #264]	; (80111e0 <HAL_DMA_IRQHandler+0x5c8>)
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d100      	bne.n	80110dc <HAL_DMA_IRQHandler+0x4c4>
 80110da:	e0df      	b.n	801129c <HAL_DMA_IRQHandler+0x684>
 80110dc:	4b41      	ldr	r3, [pc, #260]	; (80111e4 <HAL_DMA_IRQHandler+0x5cc>)
 80110de:	429a      	cmp	r2, r3
 80110e0:	d100      	bne.n	80110e4 <HAL_DMA_IRQHandler+0x4cc>
 80110e2:	e0de      	b.n	80112a2 <HAL_DMA_IRQHandler+0x68a>
 80110e4:	4b39      	ldr	r3, [pc, #228]	; (80111cc <HAL_DMA_IRQHandler+0x5b4>)
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d100      	bne.n	80110ec <HAL_DMA_IRQHandler+0x4d4>
 80110ea:	e0dd      	b.n	80112a8 <HAL_DMA_IRQHandler+0x690>
 80110ec:	4b3e      	ldr	r3, [pc, #248]	; (80111e8 <HAL_DMA_IRQHandler+0x5d0>)
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d100      	bne.n	80110f4 <HAL_DMA_IRQHandler+0x4dc>
 80110f2:	e0dc      	b.n	80112ae <HAL_DMA_IRQHandler+0x696>
 80110f4:	4b3d      	ldr	r3, [pc, #244]	; (80111ec <HAL_DMA_IRQHandler+0x5d4>)
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d100      	bne.n	80110fc <HAL_DMA_IRQHandler+0x4e4>
 80110fa:	e0da      	b.n	80112b2 <HAL_DMA_IRQHandler+0x69a>
 80110fc:	4b3c      	ldr	r3, [pc, #240]	; (80111f0 <HAL_DMA_IRQHandler+0x5d8>)
 80110fe:	429a      	cmp	r2, r3
 8011100:	d100      	bne.n	8011104 <HAL_DMA_IRQHandler+0x4ec>
 8011102:	e0d8      	b.n	80112b6 <HAL_DMA_IRQHandler+0x69e>
 8011104:	4b3b      	ldr	r3, [pc, #236]	; (80111f4 <HAL_DMA_IRQHandler+0x5dc>)
 8011106:	429a      	cmp	r2, r3
 8011108:	d05d      	beq.n	80111c6 <HAL_DMA_IRQHandler+0x5ae>
 801110a:	2380      	movs	r3, #128	; 0x80
 801110c:	029b      	lsls	r3, r3, #10
 801110e:	e078      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011110:	2240      	movs	r2, #64	; 0x40
 8011112:	e7be      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
 8011114:	2280      	movs	r2, #128	; 0x80
 8011116:	00d2      	lsls	r2, r2, #3
 8011118:	e7bb      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
 801111a:	2280      	movs	r2, #128	; 0x80
 801111c:	01d2      	lsls	r2, r2, #7
 801111e:	e7b8      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
 8011120:	2280      	movs	r2, #128	; 0x80
 8011122:	02d2      	lsls	r2, r2, #11
 8011124:	e7b5      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
 8011126:	2280      	movs	r2, #128	; 0x80
 8011128:	03d2      	lsls	r2, r2, #15
 801112a:	e7b2      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
 801112c:	2280      	movs	r2, #128	; 0x80
 801112e:	04d2      	lsls	r2, r2, #19
 8011130:	e7af      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
 8011132:	2204      	movs	r2, #4
 8011134:	e7ad      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
 8011136:	2240      	movs	r2, #64	; 0x40
 8011138:	e7ab      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
 801113a:	2280      	movs	r2, #128	; 0x80
 801113c:	00d2      	lsls	r2, r2, #3
 801113e:	e7a8      	b.n	8011092 <HAL_DMA_IRQHandler+0x47a>
 8011140:	4a23      	ldr	r2, [pc, #140]	; (80111d0 <HAL_DMA_IRQHandler+0x5b8>)
 8011142:	4293      	cmp	r3, r2
 8011144:	d023      	beq.n	801118e <HAL_DMA_IRQHandler+0x576>
 8011146:	4a23      	ldr	r2, [pc, #140]	; (80111d4 <HAL_DMA_IRQHandler+0x5bc>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d024      	beq.n	8011196 <HAL_DMA_IRQHandler+0x57e>
 801114c:	4a22      	ldr	r2, [pc, #136]	; (80111d8 <HAL_DMA_IRQHandler+0x5c0>)
 801114e:	4293      	cmp	r3, r2
 8011150:	d023      	beq.n	801119a <HAL_DMA_IRQHandler+0x582>
 8011152:	4a22      	ldr	r2, [pc, #136]	; (80111dc <HAL_DMA_IRQHandler+0x5c4>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d023      	beq.n	80111a0 <HAL_DMA_IRQHandler+0x588>
 8011158:	4a21      	ldr	r2, [pc, #132]	; (80111e0 <HAL_DMA_IRQHandler+0x5c8>)
 801115a:	4293      	cmp	r3, r2
 801115c:	d023      	beq.n	80111a6 <HAL_DMA_IRQHandler+0x58e>
 801115e:	4a21      	ldr	r2, [pc, #132]	; (80111e4 <HAL_DMA_IRQHandler+0x5cc>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d023      	beq.n	80111ac <HAL_DMA_IRQHandler+0x594>
 8011164:	4a19      	ldr	r2, [pc, #100]	; (80111cc <HAL_DMA_IRQHandler+0x5b4>)
 8011166:	4293      	cmp	r3, r2
 8011168:	d023      	beq.n	80111b2 <HAL_DMA_IRQHandler+0x59a>
 801116a:	4a1f      	ldr	r2, [pc, #124]	; (80111e8 <HAL_DMA_IRQHandler+0x5d0>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d023      	beq.n	80111b8 <HAL_DMA_IRQHandler+0x5a0>
 8011170:	4a1e      	ldr	r2, [pc, #120]	; (80111ec <HAL_DMA_IRQHandler+0x5d4>)
 8011172:	4293      	cmp	r3, r2
 8011174:	d022      	beq.n	80111bc <HAL_DMA_IRQHandler+0x5a4>
 8011176:	4a1e      	ldr	r2, [pc, #120]	; (80111f0 <HAL_DMA_IRQHandler+0x5d8>)
 8011178:	4293      	cmp	r3, r2
 801117a:	d021      	beq.n	80111c0 <HAL_DMA_IRQHandler+0x5a8>
 801117c:	4a1d      	ldr	r2, [pc, #116]	; (80111f4 <HAL_DMA_IRQHandler+0x5dc>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d002      	beq.n	8011188 <HAL_DMA_IRQHandler+0x570>
 8011182:	2280      	movs	r2, #128	; 0x80
 8011184:	02d2      	lsls	r2, r2, #11
 8011186:	e003      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
 8011188:	2280      	movs	r2, #128	; 0x80
 801118a:	01d2      	lsls	r2, r2, #7
 801118c:	e000      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
 801118e:	2204      	movs	r2, #4
 8011190:	4b19      	ldr	r3, [pc, #100]	; (80111f8 <HAL_DMA_IRQHandler+0x5e0>)
 8011192:	605a      	str	r2, [r3, #4]
 8011194:	e77f      	b.n	8011096 <HAL_DMA_IRQHandler+0x47e>
 8011196:	2240      	movs	r2, #64	; 0x40
 8011198:	e7fa      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
 801119a:	2280      	movs	r2, #128	; 0x80
 801119c:	00d2      	lsls	r2, r2, #3
 801119e:	e7f7      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
 80111a0:	2280      	movs	r2, #128	; 0x80
 80111a2:	01d2      	lsls	r2, r2, #7
 80111a4:	e7f4      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
 80111a6:	2280      	movs	r2, #128	; 0x80
 80111a8:	02d2      	lsls	r2, r2, #11
 80111aa:	e7f1      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
 80111ac:	2280      	movs	r2, #128	; 0x80
 80111ae:	03d2      	lsls	r2, r2, #15
 80111b0:	e7ee      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
 80111b2:	2280      	movs	r2, #128	; 0x80
 80111b4:	04d2      	lsls	r2, r2, #19
 80111b6:	e7eb      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
 80111b8:	2204      	movs	r2, #4
 80111ba:	e7e9      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
 80111bc:	2240      	movs	r2, #64	; 0x40
 80111be:	e7e7      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
 80111c0:	2280      	movs	r2, #128	; 0x80
 80111c2:	00d2      	lsls	r2, r2, #3
 80111c4:	e7e4      	b.n	8011190 <HAL_DMA_IRQHandler+0x578>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80111c6:	2380      	movs	r3, #128	; 0x80
 80111c8:	019b      	lsls	r3, r3, #6
 80111ca:	e01a      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
 80111cc:	40020080 	.word	0x40020080
 80111d0:	40020008 	.word	0x40020008
 80111d4:	4002001c 	.word	0x4002001c
 80111d8:	40020030 	.word	0x40020030
 80111dc:	40020044 	.word	0x40020044
 80111e0:	40020058 	.word	0x40020058
 80111e4:	4002006c 	.word	0x4002006c
 80111e8:	40020408 	.word	0x40020408
 80111ec:	4002041c 	.word	0x4002041c
 80111f0:	40020430 	.word	0x40020430
 80111f4:	40020444 	.word	0x40020444
 80111f8:	40020000 	.word	0x40020000
 80111fc:	40020400 	.word	0x40020400
 8011200:	2302      	movs	r3, #2
 8011202:	400b      	ands	r3, r1
 8011204:	1e59      	subs	r1, r3, #1
 8011206:	418b      	sbcs	r3, r1
 8011208:	b2db      	uxtb	r3, r3
 801120a:	2b00      	cmp	r3, #0
 801120c:	d100      	bne.n	8011210 <HAL_DMA_IRQHandler+0x5f8>
 801120e:	e0af      	b.n	8011370 <HAL_DMA_IRQHandler+0x758>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011210:	6813      	ldr	r3, [r2, #0]
 8011212:	079b      	lsls	r3, r3, #30
 8011214:	d400      	bmi.n	8011218 <HAL_DMA_IRQHandler+0x600>
 8011216:	e0ab      	b.n	8011370 <HAL_DMA_IRQHandler+0x758>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011218:	6813      	ldr	r3, [r2, #0]
 801121a:	069b      	lsls	r3, r3, #26
 801121c:	d403      	bmi.n	8011226 <HAL_DMA_IRQHandler+0x60e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 801121e:	6813      	ldr	r3, [r2, #0]
 8011220:	2102      	movs	r1, #2
 8011222:	438b      	bics	r3, r1
 8011224:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011226:	6823      	ldr	r3, [r4, #0]
 8011228:	4a7f      	ldr	r2, [pc, #508]	; (8011428 <HAL_DMA_IRQHandler+0x810>)
 801122a:	4293      	cmp	r3, r2
 801122c:	d800      	bhi.n	8011230 <HAL_DMA_IRQHandler+0x618>
 801122e:	e0b8      	b.n	80113a2 <HAL_DMA_IRQHandler+0x78a>
 8011230:	4a7e      	ldr	r2, [pc, #504]	; (801142c <HAL_DMA_IRQHandler+0x814>)
 8011232:	4293      	cmp	r3, r2
 8011234:	d100      	bne.n	8011238 <HAL_DMA_IRQHandler+0x620>
 8011236:	e08b      	b.n	8011350 <HAL_DMA_IRQHandler+0x738>
 8011238:	4a7d      	ldr	r2, [pc, #500]	; (8011430 <HAL_DMA_IRQHandler+0x818>)
 801123a:	4293      	cmp	r3, r2
 801123c:	d100      	bne.n	8011240 <HAL_DMA_IRQHandler+0x628>
 801123e:	e098      	b.n	8011372 <HAL_DMA_IRQHandler+0x75a>
 8011240:	4a7c      	ldr	r2, [pc, #496]	; (8011434 <HAL_DMA_IRQHandler+0x81c>)
 8011242:	4293      	cmp	r3, r2
 8011244:	d100      	bne.n	8011248 <HAL_DMA_IRQHandler+0x630>
 8011246:	e096      	b.n	8011376 <HAL_DMA_IRQHandler+0x75e>
 8011248:	4a7b      	ldr	r2, [pc, #492]	; (8011438 <HAL_DMA_IRQHandler+0x820>)
 801124a:	4293      	cmp	r3, r2
 801124c:	d100      	bne.n	8011250 <HAL_DMA_IRQHandler+0x638>
 801124e:	e095      	b.n	801137c <HAL_DMA_IRQHandler+0x764>
 8011250:	4a7a      	ldr	r2, [pc, #488]	; (801143c <HAL_DMA_IRQHandler+0x824>)
 8011252:	4293      	cmp	r3, r2
 8011254:	d100      	bne.n	8011258 <HAL_DMA_IRQHandler+0x640>
 8011256:	e094      	b.n	8011382 <HAL_DMA_IRQHandler+0x76a>
 8011258:	4a79      	ldr	r2, [pc, #484]	; (8011440 <HAL_DMA_IRQHandler+0x828>)
 801125a:	4293      	cmp	r3, r2
 801125c:	d100      	bne.n	8011260 <HAL_DMA_IRQHandler+0x648>
 801125e:	e093      	b.n	8011388 <HAL_DMA_IRQHandler+0x770>
 8011260:	4a71      	ldr	r2, [pc, #452]	; (8011428 <HAL_DMA_IRQHandler+0x810>)
 8011262:	4293      	cmp	r3, r2
 8011264:	d100      	bne.n	8011268 <HAL_DMA_IRQHandler+0x650>
 8011266:	e092      	b.n	801138e <HAL_DMA_IRQHandler+0x776>
 8011268:	4a76      	ldr	r2, [pc, #472]	; (8011444 <HAL_DMA_IRQHandler+0x82c>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d100      	bne.n	8011270 <HAL_DMA_IRQHandler+0x658>
 801126e:	e091      	b.n	8011394 <HAL_DMA_IRQHandler+0x77c>
 8011270:	4a75      	ldr	r2, [pc, #468]	; (8011448 <HAL_DMA_IRQHandler+0x830>)
 8011272:	4293      	cmp	r3, r2
 8011274:	d100      	bne.n	8011278 <HAL_DMA_IRQHandler+0x660>
 8011276:	e08f      	b.n	8011398 <HAL_DMA_IRQHandler+0x780>
 8011278:	4a74      	ldr	r2, [pc, #464]	; (801144c <HAL_DMA_IRQHandler+0x834>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d100      	bne.n	8011280 <HAL_DMA_IRQHandler+0x668>
 801127e:	e08d      	b.n	801139c <HAL_DMA_IRQHandler+0x784>
 8011280:	4a73      	ldr	r2, [pc, #460]	; (8011450 <HAL_DMA_IRQHandler+0x838>)
 8011282:	4293      	cmp	r3, r2
 8011284:	d061      	beq.n	801134a <HAL_DMA_IRQHandler+0x732>
 8011286:	2280      	movs	r2, #128	; 0x80
 8011288:	0292      	lsls	r2, r2, #10
 801128a:	e062      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801128c:	2320      	movs	r3, #32
 801128e:	e7b8      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
 8011290:	2380      	movs	r3, #128	; 0x80
 8011292:	009b      	lsls	r3, r3, #2
 8011294:	e7b5      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
 8011296:	2380      	movs	r3, #128	; 0x80
 8011298:	019b      	lsls	r3, r3, #6
 801129a:	e7b2      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
 801129c:	2380      	movs	r3, #128	; 0x80
 801129e:	029b      	lsls	r3, r3, #10
 80112a0:	e7af      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
 80112a2:	2380      	movs	r3, #128	; 0x80
 80112a4:	039b      	lsls	r3, r3, #14
 80112a6:	e7ac      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
 80112a8:	2380      	movs	r3, #128	; 0x80
 80112aa:	049b      	lsls	r3, r3, #18
 80112ac:	e7a9      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
 80112ae:	2302      	movs	r3, #2
 80112b0:	e7a7      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
 80112b2:	2320      	movs	r3, #32
 80112b4:	e7a5      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
 80112b6:	2380      	movs	r3, #128	; 0x80
 80112b8:	009b      	lsls	r3, r3, #2
 80112ba:	e7a2      	b.n	8011202 <HAL_DMA_IRQHandler+0x5ea>
 80112bc:	4b65      	ldr	r3, [pc, #404]	; (8011454 <HAL_DMA_IRQHandler+0x83c>)
 80112be:	6819      	ldr	r1, [r3, #0]
 80112c0:	4b5a      	ldr	r3, [pc, #360]	; (801142c <HAL_DMA_IRQHandler+0x814>)
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d023      	beq.n	801130e <HAL_DMA_IRQHandler+0x6f6>
 80112c6:	4b5a      	ldr	r3, [pc, #360]	; (8011430 <HAL_DMA_IRQHandler+0x818>)
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d026      	beq.n	801131a <HAL_DMA_IRQHandler+0x702>
 80112cc:	4b59      	ldr	r3, [pc, #356]	; (8011434 <HAL_DMA_IRQHandler+0x81c>)
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d025      	beq.n	801131e <HAL_DMA_IRQHandler+0x706>
 80112d2:	4b59      	ldr	r3, [pc, #356]	; (8011438 <HAL_DMA_IRQHandler+0x820>)
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d025      	beq.n	8011324 <HAL_DMA_IRQHandler+0x70c>
 80112d8:	4b58      	ldr	r3, [pc, #352]	; (801143c <HAL_DMA_IRQHandler+0x824>)
 80112da:	429a      	cmp	r2, r3
 80112dc:	d025      	beq.n	801132a <HAL_DMA_IRQHandler+0x712>
 80112de:	4b58      	ldr	r3, [pc, #352]	; (8011440 <HAL_DMA_IRQHandler+0x828>)
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d025      	beq.n	8011330 <HAL_DMA_IRQHandler+0x718>
 80112e4:	4b50      	ldr	r3, [pc, #320]	; (8011428 <HAL_DMA_IRQHandler+0x810>)
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d025      	beq.n	8011336 <HAL_DMA_IRQHandler+0x71e>
 80112ea:	4b56      	ldr	r3, [pc, #344]	; (8011444 <HAL_DMA_IRQHandler+0x82c>)
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d025      	beq.n	801133c <HAL_DMA_IRQHandler+0x724>
 80112f0:	4b55      	ldr	r3, [pc, #340]	; (8011448 <HAL_DMA_IRQHandler+0x830>)
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d024      	beq.n	8011340 <HAL_DMA_IRQHandler+0x728>
 80112f6:	4b55      	ldr	r3, [pc, #340]	; (801144c <HAL_DMA_IRQHandler+0x834>)
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d023      	beq.n	8011344 <HAL_DMA_IRQHandler+0x72c>
 80112fc:	4b54      	ldr	r3, [pc, #336]	; (8011450 <HAL_DMA_IRQHandler+0x838>)
 80112fe:	429a      	cmp	r2, r3
 8011300:	d002      	beq.n	8011308 <HAL_DMA_IRQHandler+0x6f0>
 8011302:	2380      	movs	r3, #128	; 0x80
 8011304:	029b      	lsls	r3, r3, #10
 8011306:	e003      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
 8011308:	2380      	movs	r3, #128	; 0x80
 801130a:	019b      	lsls	r3, r3, #6
 801130c:	e000      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
 801130e:	2302      	movs	r3, #2
 8011310:	400b      	ands	r3, r1
 8011312:	1e59      	subs	r1, r3, #1
 8011314:	418b      	sbcs	r3, r1
 8011316:	b2db      	uxtb	r3, r3
 8011318:	e777      	b.n	801120a <HAL_DMA_IRQHandler+0x5f2>
 801131a:	2320      	movs	r3, #32
 801131c:	e7f8      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
 801131e:	2380      	movs	r3, #128	; 0x80
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	e7f5      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
 8011324:	2380      	movs	r3, #128	; 0x80
 8011326:	019b      	lsls	r3, r3, #6
 8011328:	e7f2      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
 801132a:	2380      	movs	r3, #128	; 0x80
 801132c:	029b      	lsls	r3, r3, #10
 801132e:	e7ef      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
 8011330:	2380      	movs	r3, #128	; 0x80
 8011332:	039b      	lsls	r3, r3, #14
 8011334:	e7ec      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
 8011336:	2380      	movs	r3, #128	; 0x80
 8011338:	049b      	lsls	r3, r3, #18
 801133a:	e7e9      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
 801133c:	2302      	movs	r3, #2
 801133e:	e7e7      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
 8011340:	2320      	movs	r3, #32
 8011342:	e7e5      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
 8011344:	2380      	movs	r3, #128	; 0x80
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	e7e2      	b.n	8011310 <HAL_DMA_IRQHandler+0x6f8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801134a:	2280      	movs	r2, #128	; 0x80
 801134c:	0192      	lsls	r2, r2, #6
 801134e:	e000      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
 8011350:	2202      	movs	r2, #2
 8011352:	4b41      	ldr	r3, [pc, #260]	; (8011458 <HAL_DMA_IRQHandler+0x840>)
 8011354:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011358:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 801135a:	2321      	movs	r3, #33	; 0x21
 801135c:	2201      	movs	r2, #1
 801135e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011360:	3b01      	subs	r3, #1
 8011362:	2200      	movs	r2, #0
 8011364:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011366:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011368:	2b00      	cmp	r3, #0
 801136a:	d001      	beq.n	8011370 <HAL_DMA_IRQHandler+0x758>
        hdma->XferCpltCallback(hdma);
 801136c:	0020      	movs	r0, r4
 801136e:	4798      	blx	r3
}  
 8011370:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011372:	2220      	movs	r2, #32
 8011374:	e7ed      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
 8011376:	2280      	movs	r2, #128	; 0x80
 8011378:	0092      	lsls	r2, r2, #2
 801137a:	e7ea      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
 801137c:	2280      	movs	r2, #128	; 0x80
 801137e:	0192      	lsls	r2, r2, #6
 8011380:	e7e7      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
 8011382:	2280      	movs	r2, #128	; 0x80
 8011384:	0292      	lsls	r2, r2, #10
 8011386:	e7e4      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
 8011388:	2280      	movs	r2, #128	; 0x80
 801138a:	0392      	lsls	r2, r2, #14
 801138c:	e7e1      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
 801138e:	2280      	movs	r2, #128	; 0x80
 8011390:	0492      	lsls	r2, r2, #18
 8011392:	e7de      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
 8011394:	2202      	movs	r2, #2
 8011396:	e7dc      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
 8011398:	2220      	movs	r2, #32
 801139a:	e7da      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
 801139c:	2280      	movs	r2, #128	; 0x80
 801139e:	0092      	lsls	r2, r2, #2
 80113a0:	e7d7      	b.n	8011352 <HAL_DMA_IRQHandler+0x73a>
 80113a2:	4a22      	ldr	r2, [pc, #136]	; (801142c <HAL_DMA_IRQHandler+0x814>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d023      	beq.n	80113f0 <HAL_DMA_IRQHandler+0x7d8>
 80113a8:	4a21      	ldr	r2, [pc, #132]	; (8011430 <HAL_DMA_IRQHandler+0x818>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d024      	beq.n	80113f8 <HAL_DMA_IRQHandler+0x7e0>
 80113ae:	4a21      	ldr	r2, [pc, #132]	; (8011434 <HAL_DMA_IRQHandler+0x81c>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d023      	beq.n	80113fc <HAL_DMA_IRQHandler+0x7e4>
 80113b4:	4a20      	ldr	r2, [pc, #128]	; (8011438 <HAL_DMA_IRQHandler+0x820>)
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d023      	beq.n	8011402 <HAL_DMA_IRQHandler+0x7ea>
 80113ba:	4a20      	ldr	r2, [pc, #128]	; (801143c <HAL_DMA_IRQHandler+0x824>)
 80113bc:	4293      	cmp	r3, r2
 80113be:	d023      	beq.n	8011408 <HAL_DMA_IRQHandler+0x7f0>
 80113c0:	4a1f      	ldr	r2, [pc, #124]	; (8011440 <HAL_DMA_IRQHandler+0x828>)
 80113c2:	4293      	cmp	r3, r2
 80113c4:	d023      	beq.n	801140e <HAL_DMA_IRQHandler+0x7f6>
 80113c6:	4a18      	ldr	r2, [pc, #96]	; (8011428 <HAL_DMA_IRQHandler+0x810>)
 80113c8:	4293      	cmp	r3, r2
 80113ca:	d023      	beq.n	8011414 <HAL_DMA_IRQHandler+0x7fc>
 80113cc:	4a1d      	ldr	r2, [pc, #116]	; (8011444 <HAL_DMA_IRQHandler+0x82c>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d023      	beq.n	801141a <HAL_DMA_IRQHandler+0x802>
 80113d2:	4a1d      	ldr	r2, [pc, #116]	; (8011448 <HAL_DMA_IRQHandler+0x830>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d022      	beq.n	801141e <HAL_DMA_IRQHandler+0x806>
 80113d8:	4a1c      	ldr	r2, [pc, #112]	; (801144c <HAL_DMA_IRQHandler+0x834>)
 80113da:	4293      	cmp	r3, r2
 80113dc:	d021      	beq.n	8011422 <HAL_DMA_IRQHandler+0x80a>
 80113de:	4a1c      	ldr	r2, [pc, #112]	; (8011450 <HAL_DMA_IRQHandler+0x838>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d002      	beq.n	80113ea <HAL_DMA_IRQHandler+0x7d2>
 80113e4:	2280      	movs	r2, #128	; 0x80
 80113e6:	0292      	lsls	r2, r2, #10
 80113e8:	e003      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 80113ea:	2280      	movs	r2, #128	; 0x80
 80113ec:	0192      	lsls	r2, r2, #6
 80113ee:	e000      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 80113f0:	2202      	movs	r2, #2
 80113f2:	4b18      	ldr	r3, [pc, #96]	; (8011454 <HAL_DMA_IRQHandler+0x83c>)
 80113f4:	605a      	str	r2, [r3, #4]
 80113f6:	e7ae      	b.n	8011356 <HAL_DMA_IRQHandler+0x73e>
 80113f8:	2220      	movs	r2, #32
 80113fa:	e7fa      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 80113fc:	2280      	movs	r2, #128	; 0x80
 80113fe:	0092      	lsls	r2, r2, #2
 8011400:	e7f7      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 8011402:	2280      	movs	r2, #128	; 0x80
 8011404:	0192      	lsls	r2, r2, #6
 8011406:	e7f4      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 8011408:	2280      	movs	r2, #128	; 0x80
 801140a:	0292      	lsls	r2, r2, #10
 801140c:	e7f1      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 801140e:	2280      	movs	r2, #128	; 0x80
 8011410:	0392      	lsls	r2, r2, #14
 8011412:	e7ee      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 8011414:	2280      	movs	r2, #128	; 0x80
 8011416:	0492      	lsls	r2, r2, #18
 8011418:	e7eb      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 801141a:	2202      	movs	r2, #2
 801141c:	e7e9      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 801141e:	2220      	movs	r2, #32
 8011420:	e7e7      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 8011422:	2280      	movs	r2, #128	; 0x80
 8011424:	0092      	lsls	r2, r2, #2
 8011426:	e7e4      	b.n	80113f2 <HAL_DMA_IRQHandler+0x7da>
 8011428:	40020080 	.word	0x40020080
 801142c:	40020008 	.word	0x40020008
 8011430:	4002001c 	.word	0x4002001c
 8011434:	40020030 	.word	0x40020030
 8011438:	40020044 	.word	0x40020044
 801143c:	40020058 	.word	0x40020058
 8011440:	4002006c 	.word	0x4002006c
 8011444:	40020408 	.word	0x40020408
 8011448:	4002041c 	.word	0x4002041c
 801144c:	40020430 	.word	0x40020430
 8011450:	40020444 	.word	0x40020444
 8011454:	40020000 	.word	0x40020000
 8011458:	40020400 	.word	0x40020400

0801145c <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 801145c:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801145e:	4b05      	ldr	r3, [pc, #20]	; (8011474 <FLASH_Program_HalfWord+0x18>)
 8011460:	2200      	movs	r2, #0
 8011462:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011464:	4a04      	ldr	r2, [pc, #16]	; (8011478 <FLASH_Program_HalfWord+0x1c>)
 8011466:	6913      	ldr	r3, [r2, #16]
 8011468:	2401      	movs	r4, #1
 801146a:	4323      	orrs	r3, r4
 801146c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 801146e:	8001      	strh	r1, [r0, #0]
}
 8011470:	bd10      	pop	{r4, pc}
 8011472:	46c0      	nop			; (mov r8, r8)
 8011474:	20006648 	.word	0x20006648
 8011478:	40022000 	.word	0x40022000

0801147c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801147c:	4b0a      	ldr	r3, [pc, #40]	; (80114a8 <FLASH_SetErrorCode+0x2c>)
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	06db      	lsls	r3, r3, #27
 8011482:	d504      	bpl.n	801148e <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011484:	4a09      	ldr	r2, [pc, #36]	; (80114ac <FLASH_SetErrorCode+0x30>)
 8011486:	69d3      	ldr	r3, [r2, #28]
 8011488:	2102      	movs	r1, #2
 801148a:	430b      	orrs	r3, r1
 801148c:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801148e:	4b06      	ldr	r3, [pc, #24]	; (80114a8 <FLASH_SetErrorCode+0x2c>)
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	075b      	lsls	r3, r3, #29
 8011494:	d504      	bpl.n	80114a0 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011496:	4a05      	ldr	r2, [pc, #20]	; (80114ac <FLASH_SetErrorCode+0x30>)
 8011498:	69d3      	ldr	r3, [r2, #28]
 801149a:	2101      	movs	r1, #1
 801149c:	430b      	orrs	r3, r1
 801149e:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80114a0:	4b01      	ldr	r3, [pc, #4]	; (80114a8 <FLASH_SetErrorCode+0x2c>)
 80114a2:	2214      	movs	r2, #20
 80114a4:	60da      	str	r2, [r3, #12]
}  
 80114a6:	4770      	bx	lr
 80114a8:	40022000 	.word	0x40022000
 80114ac:	20006648 	.word	0x20006648

080114b0 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80114b0:	4b06      	ldr	r3, [pc, #24]	; (80114cc <HAL_FLASH_Unlock+0x1c>)
 80114b2:	691b      	ldr	r3, [r3, #16]
 80114b4:	061b      	lsls	r3, r3, #24
 80114b6:	d506      	bpl.n	80114c6 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80114b8:	4b04      	ldr	r3, [pc, #16]	; (80114cc <HAL_FLASH_Unlock+0x1c>)
 80114ba:	4a05      	ldr	r2, [pc, #20]	; (80114d0 <HAL_FLASH_Unlock+0x20>)
 80114bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80114be:	4a05      	ldr	r2, [pc, #20]	; (80114d4 <HAL_FLASH_Unlock+0x24>)
 80114c0:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80114c2:	2000      	movs	r0, #0
}
 80114c4:	4770      	bx	lr
    return HAL_ERROR;
 80114c6:	2001      	movs	r0, #1
 80114c8:	e7fc      	b.n	80114c4 <HAL_FLASH_Unlock+0x14>
 80114ca:	46c0      	nop			; (mov r8, r8)
 80114cc:	40022000 	.word	0x40022000
 80114d0:	45670123 	.word	0x45670123
 80114d4:	cdef89ab 	.word	0xcdef89ab

080114d8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80114d8:	4a03      	ldr	r2, [pc, #12]	; (80114e8 <HAL_FLASH_Lock+0x10>)
 80114da:	6913      	ldr	r3, [r2, #16]
 80114dc:	2180      	movs	r1, #128	; 0x80
 80114de:	430b      	orrs	r3, r1
 80114e0:	6113      	str	r3, [r2, #16]
}
 80114e2:	2000      	movs	r0, #0
 80114e4:	4770      	bx	lr
 80114e6:	46c0      	nop			; (mov r8, r8)
 80114e8:	40022000 	.word	0x40022000

080114ec <FLASH_WaitForLastOperation>:
{
 80114ec:	b570      	push	{r4, r5, r6, lr}
 80114ee:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80114f0:	f7fe fe84 	bl	80101fc <HAL_GetTick>
 80114f4:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80114f6:	4b13      	ldr	r3, [pc, #76]	; (8011544 <FLASH_WaitForLastOperation+0x58>)
 80114f8:	68db      	ldr	r3, [r3, #12]
 80114fa:	07db      	lsls	r3, r3, #31
 80114fc:	d50a      	bpl.n	8011514 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 80114fe:	1c63      	adds	r3, r4, #1
 8011500:	d0f9      	beq.n	80114f6 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011502:	2c00      	cmp	r4, #0
 8011504:	d019      	beq.n	801153a <FLASH_WaitForLastOperation+0x4e>
 8011506:	f7fe fe79 	bl	80101fc <HAL_GetTick>
 801150a:	1b40      	subs	r0, r0, r5
 801150c:	42a0      	cmp	r0, r4
 801150e:	d9f2      	bls.n	80114f6 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8011510:	2003      	movs	r0, #3
 8011512:	e011      	b.n	8011538 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011514:	4b0b      	ldr	r3, [pc, #44]	; (8011544 <FLASH_WaitForLastOperation+0x58>)
 8011516:	68db      	ldr	r3, [r3, #12]
 8011518:	069b      	lsls	r3, r3, #26
 801151a:	d502      	bpl.n	8011522 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801151c:	4b09      	ldr	r3, [pc, #36]	; (8011544 <FLASH_WaitForLastOperation+0x58>)
 801151e:	2220      	movs	r2, #32
 8011520:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011522:	4b08      	ldr	r3, [pc, #32]	; (8011544 <FLASH_WaitForLastOperation+0x58>)
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	06db      	lsls	r3, r3, #27
 8011528:	d403      	bmi.n	8011532 <FLASH_WaitForLastOperation+0x46>
 801152a:	4b06      	ldr	r3, [pc, #24]	; (8011544 <FLASH_WaitForLastOperation+0x58>)
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	075b      	lsls	r3, r3, #29
 8011530:	d505      	bpl.n	801153e <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 8011532:	f7ff ffa3 	bl	801147c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011536:	2001      	movs	r0, #1
}
 8011538:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 801153a:	2003      	movs	r0, #3
 801153c:	e7fc      	b.n	8011538 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 801153e:	2000      	movs	r0, #0
 8011540:	e7fa      	b.n	8011538 <FLASH_WaitForLastOperation+0x4c>
 8011542:	46c0      	nop			; (mov r8, r8)
 8011544:	40022000 	.word	0x40022000

08011548 <HAL_FLASH_Program>:
{
 8011548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801154a:	46c6      	mov	lr, r8
 801154c:	b500      	push	{lr}
 801154e:	0004      	movs	r4, r0
 8011550:	000d      	movs	r5, r1
 8011552:	4690      	mov	r8, r2
 8011554:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 8011556:	4b21      	ldr	r3, [pc, #132]	; (80115dc <HAL_FLASH_Program+0x94>)
 8011558:	7e1b      	ldrb	r3, [r3, #24]
 801155a:	2b01      	cmp	r3, #1
 801155c:	d03b      	beq.n	80115d6 <HAL_FLASH_Program+0x8e>
 801155e:	4b1f      	ldr	r3, [pc, #124]	; (80115dc <HAL_FLASH_Program+0x94>)
 8011560:	2201      	movs	r2, #1
 8011562:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011564:	481e      	ldr	r0, [pc, #120]	; (80115e0 <HAL_FLASH_Program+0x98>)
 8011566:	f7ff ffc1 	bl	80114ec <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801156a:	2800      	cmp	r0, #0
 801156c:	d12d      	bne.n	80115ca <HAL_FLASH_Program+0x82>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801156e:	2c01      	cmp	r4, #1
 8011570:	d006      	beq.n	8011580 <HAL_FLASH_Program+0x38>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011572:	2c02      	cmp	r4, #2
 8011574:	d002      	beq.n	801157c <HAL_FLASH_Program+0x34>
      nbiterations = 4;
 8011576:	2704      	movs	r7, #4
    for (index = 0; index < nbiterations; index++)
 8011578:	2400      	movs	r4, #0
 801157a:	e01b      	b.n	80115b4 <HAL_FLASH_Program+0x6c>
      nbiterations = 2;
 801157c:	2702      	movs	r7, #2
 801157e:	e7fb      	b.n	8011578 <HAL_FLASH_Program+0x30>
      nbiterations = 1;
 8011580:	2701      	movs	r7, #1
 8011582:	e7f9      	b.n	8011578 <HAL_FLASH_Program+0x30>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011584:	2220      	movs	r2, #32
 8011586:	1ad2      	subs	r2, r2, r3
 8011588:	0031      	movs	r1, r6
 801158a:	4091      	lsls	r1, r2
 801158c:	000a      	movs	r2, r1
 801158e:	4641      	mov	r1, r8
 8011590:	40d9      	lsrs	r1, r3
 8011592:	4311      	orrs	r1, r2
 8011594:	b289      	uxth	r1, r1
 8011596:	1940      	adds	r0, r0, r5
 8011598:	f7ff ff60 	bl	801145c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801159c:	4810      	ldr	r0, [pc, #64]	; (80115e0 <HAL_FLASH_Program+0x98>)
 801159e:	f7ff ffa5 	bl	80114ec <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80115a2:	4a10      	ldr	r2, [pc, #64]	; (80115e4 <HAL_FLASH_Program+0x9c>)
 80115a4:	6913      	ldr	r3, [r2, #16]
 80115a6:	2101      	movs	r1, #1
 80115a8:	438b      	bics	r3, r1
 80115aa:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 80115ac:	2800      	cmp	r0, #0
 80115ae:	d10c      	bne.n	80115ca <HAL_FLASH_Program+0x82>
    for (index = 0; index < nbiterations; index++)
 80115b0:	3401      	adds	r4, #1
 80115b2:	b2e4      	uxtb	r4, r4
 80115b4:	42bc      	cmp	r4, r7
 80115b6:	d208      	bcs.n	80115ca <HAL_FLASH_Program+0x82>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80115b8:	0060      	lsls	r0, r4, #1
 80115ba:	0123      	lsls	r3, r4, #4
 80115bc:	2220      	movs	r2, #32
 80115be:	4252      	negs	r2, r2
 80115c0:	189a      	adds	r2, r3, r2
 80115c2:	d4df      	bmi.n	8011584 <HAL_FLASH_Program+0x3c>
 80115c4:	0031      	movs	r1, r6
 80115c6:	40d1      	lsrs	r1, r2
 80115c8:	e7e4      	b.n	8011594 <HAL_FLASH_Program+0x4c>
  __HAL_UNLOCK(&pFlash);
 80115ca:	4b04      	ldr	r3, [pc, #16]	; (80115dc <HAL_FLASH_Program+0x94>)
 80115cc:	2200      	movs	r2, #0
 80115ce:	761a      	strb	r2, [r3, #24]
}
 80115d0:	bc04      	pop	{r2}
 80115d2:	4690      	mov	r8, r2
 80115d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80115d6:	2002      	movs	r0, #2
 80115d8:	e7fa      	b.n	80115d0 <HAL_FLASH_Program+0x88>
 80115da:	46c0      	nop			; (mov r8, r8)
 80115dc:	20006648 	.word	0x20006648
 80115e0:	0000c350 	.word	0x0000c350
 80115e4:	40022000 	.word	0x40022000

080115e8 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80115e8:	4b06      	ldr	r3, [pc, #24]	; (8011604 <FLASH_MassErase+0x1c>)
 80115ea:	2200      	movs	r2, #0
 80115ec:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80115ee:	4b06      	ldr	r3, [pc, #24]	; (8011608 <FLASH_MassErase+0x20>)
 80115f0:	691a      	ldr	r2, [r3, #16]
 80115f2:	2104      	movs	r1, #4
 80115f4:	430a      	orrs	r2, r1
 80115f6:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80115f8:	691a      	ldr	r2, [r3, #16]
 80115fa:	313c      	adds	r1, #60	; 0x3c
 80115fc:	430a      	orrs	r2, r1
 80115fe:	611a      	str	r2, [r3, #16]
}
 8011600:	4770      	bx	lr
 8011602:	46c0      	nop			; (mov r8, r8)
 8011604:	20006648 	.word	0x20006648
 8011608:	40022000 	.word	0x40022000

0801160c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801160c:	4b06      	ldr	r3, [pc, #24]	; (8011628 <FLASH_PageErase+0x1c>)
 801160e:	2200      	movs	r2, #0
 8011610:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011612:	4b06      	ldr	r3, [pc, #24]	; (801162c <FLASH_PageErase+0x20>)
 8011614:	691a      	ldr	r2, [r3, #16]
 8011616:	2102      	movs	r1, #2
 8011618:	430a      	orrs	r2, r1
 801161a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 801161c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801161e:	691a      	ldr	r2, [r3, #16]
 8011620:	313e      	adds	r1, #62	; 0x3e
 8011622:	430a      	orrs	r2, r1
 8011624:	611a      	str	r2, [r3, #16]
}
 8011626:	4770      	bx	lr
 8011628:	20006648 	.word	0x20006648
 801162c:	40022000 	.word	0x40022000

08011630 <HAL_FLASHEx_Erase>:
{
 8011630:	b570      	push	{r4, r5, r6, lr}
 8011632:	0005      	movs	r5, r0
 8011634:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8011636:	4b24      	ldr	r3, [pc, #144]	; (80116c8 <HAL_FLASHEx_Erase+0x98>)
 8011638:	7e1b      	ldrb	r3, [r3, #24]
 801163a:	2b01      	cmp	r3, #1
 801163c:	d041      	beq.n	80116c2 <HAL_FLASHEx_Erase+0x92>
 801163e:	4b22      	ldr	r3, [pc, #136]	; (80116c8 <HAL_FLASHEx_Erase+0x98>)
 8011640:	2201      	movs	r2, #1
 8011642:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011644:	6803      	ldr	r3, [r0, #0]
 8011646:	2b01      	cmp	r3, #1
 8011648:	d022      	beq.n	8011690 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801164a:	4820      	ldr	r0, [pc, #128]	; (80116cc <HAL_FLASHEx_Erase+0x9c>)
 801164c:	f7ff ff4e 	bl	80114ec <FLASH_WaitForLastOperation>
 8011650:	2800      	cmp	r0, #0
 8011652:	d131      	bne.n	80116b8 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFF;
 8011654:	2301      	movs	r3, #1
 8011656:	425b      	negs	r3, r3
 8011658:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 801165a:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801165c:	3001      	adds	r0, #1
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801165e:	68ab      	ldr	r3, [r5, #8]
 8011660:	02db      	lsls	r3, r3, #11
 8011662:	686a      	ldr	r2, [r5, #4]
 8011664:	4694      	mov	ip, r2
 8011666:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011668:	42a3      	cmp	r3, r4
 801166a:	d926      	bls.n	80116ba <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 801166c:	0020      	movs	r0, r4
 801166e:	f7ff ffcd 	bl	801160c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011672:	4816      	ldr	r0, [pc, #88]	; (80116cc <HAL_FLASHEx_Erase+0x9c>)
 8011674:	f7ff ff3a 	bl	80114ec <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011678:	4a15      	ldr	r2, [pc, #84]	; (80116d0 <HAL_FLASHEx_Erase+0xa0>)
 801167a:	6913      	ldr	r3, [r2, #16]
 801167c:	2102      	movs	r1, #2
 801167e:	438b      	bics	r3, r1
 8011680:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8011682:	2800      	cmp	r0, #0
 8011684:	d116      	bne.n	80116b4 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8011686:	2380      	movs	r3, #128	; 0x80
 8011688:	011b      	lsls	r3, r3, #4
 801168a:	469c      	mov	ip, r3
 801168c:	4464      	add	r4, ip
 801168e:	e7e6      	b.n	801165e <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011690:	480e      	ldr	r0, [pc, #56]	; (80116cc <HAL_FLASHEx_Erase+0x9c>)
 8011692:	f7ff ff2b 	bl	80114ec <FLASH_WaitForLastOperation>
 8011696:	2800      	cmp	r0, #0
 8011698:	d001      	beq.n	801169e <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 801169a:	2001      	movs	r0, #1
 801169c:	e00d      	b.n	80116ba <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 801169e:	f7ff ffa3 	bl	80115e8 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116a2:	480a      	ldr	r0, [pc, #40]	; (80116cc <HAL_FLASHEx_Erase+0x9c>)
 80116a4:	f7ff ff22 	bl	80114ec <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80116a8:	4a09      	ldr	r2, [pc, #36]	; (80116d0 <HAL_FLASHEx_Erase+0xa0>)
 80116aa:	6913      	ldr	r3, [r2, #16]
 80116ac:	2104      	movs	r1, #4
 80116ae:	438b      	bics	r3, r1
 80116b0:	6113      	str	r3, [r2, #16]
 80116b2:	e002      	b.n	80116ba <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 80116b4:	6034      	str	r4, [r6, #0]
            break;
 80116b6:	e000      	b.n	80116ba <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80116b8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80116ba:	4b03      	ldr	r3, [pc, #12]	; (80116c8 <HAL_FLASHEx_Erase+0x98>)
 80116bc:	2200      	movs	r2, #0
 80116be:	761a      	strb	r2, [r3, #24]
}
 80116c0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80116c2:	2002      	movs	r0, #2
 80116c4:	e7fc      	b.n	80116c0 <HAL_FLASHEx_Erase+0x90>
 80116c6:	46c0      	nop			; (mov r8, r8)
 80116c8:	20006648 	.word	0x20006648
 80116cc:	0000c350 	.word	0x0000c350
 80116d0:	40022000 	.word	0x40022000

080116d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80116d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116d6:	46c6      	mov	lr, r8
 80116d8:	b500      	push	{lr}
 80116da:	b082      	sub	sp, #8
  uint32_t position = 0x00;
 80116dc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80116de:	e033      	b.n	8011748 <HAL_GPIO_Init+0x74>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80116e0:	2604      	movs	r6, #4
 80116e2:	e000      	b.n	80116e6 <HAL_GPIO_Init+0x12>
 80116e4:	2600      	movs	r6, #0
 80116e6:	40ae      	lsls	r6, r5
 80116e8:	0035      	movs	r5, r6
 80116ea:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80116ec:	3402      	adds	r4, #2
 80116ee:	00a4      	lsls	r4, r4, #2
 80116f0:	4e55      	ldr	r6, [pc, #340]	; (8011848 <HAL_GPIO_Init+0x174>)
 80116f2:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80116f4:	4c55      	ldr	r4, [pc, #340]	; (801184c <HAL_GPIO_Init+0x178>)
 80116f6:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80116f8:	43d4      	mvns	r4, r2
 80116fa:	002e      	movs	r6, r5
 80116fc:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80116fe:	684f      	ldr	r7, [r1, #4]
 8011700:	03ff      	lsls	r7, r7, #15
 8011702:	d501      	bpl.n	8011708 <HAL_GPIO_Init+0x34>
        {
          SET_BIT(temp, iocurrent); 
 8011704:	4315      	orrs	r5, r2
 8011706:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8011708:	4d50      	ldr	r5, [pc, #320]	; (801184c <HAL_GPIO_Init+0x178>)
 801170a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 801170c:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 801170e:	002e      	movs	r6, r5
 8011710:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011712:	684f      	ldr	r7, [r1, #4]
 8011714:	03bf      	lsls	r7, r7, #14
 8011716:	d501      	bpl.n	801171c <HAL_GPIO_Init+0x48>
        { 
          SET_BIT(temp, iocurrent); 
 8011718:	4315      	orrs	r5, r2
 801171a:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 801171c:	4d4b      	ldr	r5, [pc, #300]	; (801184c <HAL_GPIO_Init+0x178>)
 801171e:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011720:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011722:	002e      	movs	r6, r5
 8011724:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011726:	684f      	ldr	r7, [r1, #4]
 8011728:	02ff      	lsls	r7, r7, #11
 801172a:	d501      	bpl.n	8011730 <HAL_GPIO_Init+0x5c>
        {
          SET_BIT(temp, iocurrent); 
 801172c:	4315      	orrs	r5, r2
 801172e:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8011730:	4d46      	ldr	r5, [pc, #280]	; (801184c <HAL_GPIO_Init+0x178>)
 8011732:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8011734:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011736:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011738:	684e      	ldr	r6, [r1, #4]
 801173a:	02b6      	lsls	r6, r6, #10
 801173c:	d501      	bpl.n	8011742 <HAL_GPIO_Init+0x6e>
        {
          SET_BIT(temp, iocurrent); 
 801173e:	432a      	orrs	r2, r5
 8011740:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8011742:	4a42      	ldr	r2, [pc, #264]	; (801184c <HAL_GPIO_Init+0x178>)
 8011744:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8011746:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011748:	680a      	ldr	r2, [r1, #0]
 801174a:	0014      	movs	r4, r2
 801174c:	40dc      	lsrs	r4, r3
 801174e:	d076      	beq.n	801183e <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011750:	2401      	movs	r4, #1
 8011752:	409c      	lsls	r4, r3
 8011754:	4022      	ands	r2, r4
    if(iocurrent)
 8011756:	d0f6      	beq.n	8011746 <HAL_GPIO_Init+0x72>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011758:	684c      	ldr	r4, [r1, #4]
 801175a:	2c02      	cmp	r4, #2
 801175c:	d001      	beq.n	8011762 <HAL_GPIO_Init+0x8e>
 801175e:	2c12      	cmp	r4, #18
 8011760:	d10e      	bne.n	8011780 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8011762:	08dc      	lsrs	r4, r3, #3
 8011764:	3408      	adds	r4, #8
 8011766:	00a4      	lsls	r4, r4, #2
 8011768:	5826      	ldr	r6, [r4, r0]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801176a:	2507      	movs	r5, #7
 801176c:	401d      	ands	r5, r3
 801176e:	00ad      	lsls	r5, r5, #2
 8011770:	270f      	movs	r7, #15
 8011772:	40af      	lsls	r7, r5
 8011774:	43be      	bics	r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011776:	690f      	ldr	r7, [r1, #16]
 8011778:	40af      	lsls	r7, r5
 801177a:	003d      	movs	r5, r7
 801177c:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3] = temp;
 801177e:	5025      	str	r5, [r4, r0]
      temp = GPIOx->MODER;
 8011780:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011782:	005e      	lsls	r6, r3, #1
 8011784:	2403      	movs	r4, #3
 8011786:	0025      	movs	r5, r4
 8011788:	40b5      	lsls	r5, r6
 801178a:	43ed      	mvns	r5, r5
 801178c:	46a8      	mov	r8, r5
 801178e:	402f      	ands	r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011790:	684d      	ldr	r5, [r1, #4]
 8011792:	402c      	ands	r4, r5
 8011794:	40b4      	lsls	r4, r6
 8011796:	433c      	orrs	r4, r7
      GPIOx->MODER = temp;
 8011798:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801179a:	684c      	ldr	r4, [r1, #4]
 801179c:	1e67      	subs	r7, r4, #1
 801179e:	2f01      	cmp	r7, #1
 80117a0:	d903      	bls.n	80117aa <HAL_GPIO_Init+0xd6>
 80117a2:	2c11      	cmp	r4, #17
 80117a4:	d001      	beq.n	80117aa <HAL_GPIO_Init+0xd6>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80117a6:	2c12      	cmp	r4, #18
 80117a8:	d111      	bne.n	80117ce <HAL_GPIO_Init+0xfa>
        temp = GPIOx->OSPEEDR; 
 80117aa:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80117ac:	4644      	mov	r4, r8
 80117ae:	4027      	ands	r7, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80117b0:	68cc      	ldr	r4, [r1, #12]
 80117b2:	40b4      	lsls	r4, r6
 80117b4:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 80117b6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80117b8:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80117ba:	2401      	movs	r4, #1
 80117bc:	0025      	movs	r5, r4
 80117be:	409d      	lsls	r5, r3
 80117c0:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80117c2:	684d      	ldr	r5, [r1, #4]
 80117c4:	092d      	lsrs	r5, r5, #4
 80117c6:	402c      	ands	r4, r5
 80117c8:	409c      	lsls	r4, r3
 80117ca:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 80117cc:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80117ce:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80117d0:	4645      	mov	r5, r8
 80117d2:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80117d4:	688d      	ldr	r5, [r1, #8]
 80117d6:	40b5      	lsls	r5, r6
 80117d8:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 80117da:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80117dc:	684c      	ldr	r4, [r1, #4]
 80117de:	00e4      	lsls	r4, r4, #3
 80117e0:	d5b1      	bpl.n	8011746 <HAL_GPIO_Init+0x72>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80117e2:	4d1b      	ldr	r5, [pc, #108]	; (8011850 <HAL_GPIO_Init+0x17c>)
 80117e4:	69ae      	ldr	r6, [r5, #24]
 80117e6:	2401      	movs	r4, #1
 80117e8:	4326      	orrs	r6, r4
 80117ea:	61ae      	str	r6, [r5, #24]
 80117ec:	69ad      	ldr	r5, [r5, #24]
 80117ee:	402c      	ands	r4, r5
 80117f0:	9401      	str	r4, [sp, #4]
 80117f2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80117f4:	089c      	lsrs	r4, r3, #2
 80117f6:	1ca5      	adds	r5, r4, #2
 80117f8:	00ad      	lsls	r5, r5, #2
 80117fa:	4e13      	ldr	r6, [pc, #76]	; (8011848 <HAL_GPIO_Init+0x174>)
 80117fc:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80117fe:	2603      	movs	r6, #3
 8011800:	401e      	ands	r6, r3
 8011802:	00b5      	lsls	r5, r6, #2
 8011804:	260f      	movs	r6, #15
 8011806:	40ae      	lsls	r6, r5
 8011808:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801180a:	2690      	movs	r6, #144	; 0x90
 801180c:	05f6      	lsls	r6, r6, #23
 801180e:	42b0      	cmp	r0, r6
 8011810:	d100      	bne.n	8011814 <HAL_GPIO_Init+0x140>
 8011812:	e767      	b.n	80116e4 <HAL_GPIO_Init+0x10>
 8011814:	4e0f      	ldr	r6, [pc, #60]	; (8011854 <HAL_GPIO_Init+0x180>)
 8011816:	42b0      	cmp	r0, r6
 8011818:	d00b      	beq.n	8011832 <HAL_GPIO_Init+0x15e>
 801181a:	4e0f      	ldr	r6, [pc, #60]	; (8011858 <HAL_GPIO_Init+0x184>)
 801181c:	42b0      	cmp	r0, r6
 801181e:	d00a      	beq.n	8011836 <HAL_GPIO_Init+0x162>
 8011820:	4e0e      	ldr	r6, [pc, #56]	; (801185c <HAL_GPIO_Init+0x188>)
 8011822:	42b0      	cmp	r0, r6
 8011824:	d009      	beq.n	801183a <HAL_GPIO_Init+0x166>
 8011826:	4e0e      	ldr	r6, [pc, #56]	; (8011860 <HAL_GPIO_Init+0x18c>)
 8011828:	42b0      	cmp	r0, r6
 801182a:	d100      	bne.n	801182e <HAL_GPIO_Init+0x15a>
 801182c:	e758      	b.n	80116e0 <HAL_GPIO_Init+0xc>
 801182e:	2605      	movs	r6, #5
 8011830:	e759      	b.n	80116e6 <HAL_GPIO_Init+0x12>
 8011832:	2601      	movs	r6, #1
 8011834:	e757      	b.n	80116e6 <HAL_GPIO_Init+0x12>
 8011836:	2602      	movs	r6, #2
 8011838:	e755      	b.n	80116e6 <HAL_GPIO_Init+0x12>
 801183a:	2603      	movs	r6, #3
 801183c:	e753      	b.n	80116e6 <HAL_GPIO_Init+0x12>
  } 
}
 801183e:	b002      	add	sp, #8
 8011840:	bc04      	pop	{r2}
 8011842:	4690      	mov	r8, r2
 8011844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011846:	46c0      	nop			; (mov r8, r8)
 8011848:	40010000 	.word	0x40010000
 801184c:	40010400 	.word	0x40010400
 8011850:	40021000 	.word	0x40021000
 8011854:	48000400 	.word	0x48000400
 8011858:	48000800 	.word	0x48000800
 801185c:	48000c00 	.word	0x48000c00
 8011860:	48001000 	.word	0x48001000

08011864 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011864:	6903      	ldr	r3, [r0, #16]
 8011866:	420b      	tst	r3, r1
 8011868:	d101      	bne.n	801186e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801186a:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 801186c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 801186e:	2001      	movs	r0, #1
 8011870:	e7fc      	b.n	801186c <HAL_GPIO_ReadPin+0x8>

08011872 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011872:	2a00      	cmp	r2, #0
 8011874:	d101      	bne.n	801187a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011876:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8011878:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801187a:	6181      	str	r1, [r0, #24]
 801187c:	e7fc      	b.n	8011878 <HAL_GPIO_WritePin+0x6>

0801187e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 801187e:	6943      	ldr	r3, [r0, #20]
 8011880:	4059      	eors	r1, r3
 8011882:	6141      	str	r1, [r0, #20]
}
 8011884:	4770      	bx	lr
	...

08011888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011888:	b510      	push	{r4, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 801188a:	4b05      	ldr	r3, [pc, #20]	; (80118a0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 801188c:	695b      	ldr	r3, [r3, #20]
 801188e:	4218      	tst	r0, r3
 8011890:	d100      	bne.n	8011894 <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8011892:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011894:	4b02      	ldr	r3, [pc, #8]	; (80118a0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8011896:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011898:	f7f9 fbe6 	bl	800b068 <HAL_GPIO_EXTI_Callback>
}
 801189c:	e7f9      	b.n	8011892 <HAL_GPIO_EXTI_IRQHandler+0xa>
 801189e:	46c0      	nop			; (mov r8, r8)
 80118a0:	40010400 	.word	0x40010400

080118a4 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80118a4:	4a03      	ldr	r2, [pc, #12]	; (80118b4 <HAL_PWR_EnableBkUpAccess+0x10>)
 80118a6:	6811      	ldr	r1, [r2, #0]
 80118a8:	2380      	movs	r3, #128	; 0x80
 80118aa:	005b      	lsls	r3, r3, #1
 80118ac:	430b      	orrs	r3, r1
 80118ae:	6013      	str	r3, [r2, #0]
}
 80118b0:	4770      	bx	lr
 80118b2:	46c0      	nop			; (mov r8, r8)
 80118b4:	40007000 	.word	0x40007000

080118b8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80118b8:	b530      	push	{r4, r5, lr}
 80118ba:	b083      	sub	sp, #12
 80118bc:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80118be:	6803      	ldr	r3, [r0, #0]
 80118c0:	07db      	lsls	r3, r3, #31
 80118c2:	d534      	bpl.n	801192e <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80118c4:	4bc1      	ldr	r3, [pc, #772]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 80118c6:	685a      	ldr	r2, [r3, #4]
 80118c8:	230c      	movs	r3, #12
 80118ca:	4013      	ands	r3, r2
 80118cc:	2b04      	cmp	r3, #4
 80118ce:	d026      	beq.n	801191e <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80118d0:	4bbe      	ldr	r3, [pc, #760]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 80118d2:	685a      	ldr	r2, [r3, #4]
 80118d4:	230c      	movs	r3, #12
 80118d6:	4013      	ands	r3, r2
 80118d8:	2b08      	cmp	r3, #8
 80118da:	d108      	bne.n	80118ee <HAL_RCC_OscConfig+0x36>
 80118dc:	4bbb      	ldr	r3, [pc, #748]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	22c0      	movs	r2, #192	; 0xc0
 80118e2:	0252      	lsls	r2, r2, #9
 80118e4:	4013      	ands	r3, r2
 80118e6:	2280      	movs	r2, #128	; 0x80
 80118e8:	0252      	lsls	r2, r2, #9
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d017      	beq.n	801191e <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80118ee:	4bb7      	ldr	r3, [pc, #732]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	49b7      	ldr	r1, [pc, #732]	; (8011bd0 <HAL_RCC_OscConfig+0x318>)
 80118f4:	400a      	ands	r2, r1
 80118f6:	601a      	str	r2, [r3, #0]
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	49b6      	ldr	r1, [pc, #728]	; (8011bd4 <HAL_RCC_OscConfig+0x31c>)
 80118fc:	400a      	ands	r2, r1
 80118fe:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011900:	f7fe fc7c 	bl	80101fc <HAL_GetTick>
 8011904:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011906:	4bb1      	ldr	r3, [pc, #708]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	039b      	lsls	r3, r3, #14
 801190c:	d536      	bpl.n	801197c <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801190e:	f7fe fc75 	bl	80101fc <HAL_GetTick>
 8011912:	1b40      	subs	r0, r0, r5
 8011914:	2864      	cmp	r0, #100	; 0x64
 8011916:	d9f6      	bls.n	8011906 <HAL_RCC_OscConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8011918:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 801191a:	b003      	add	sp, #12
 801191c:	bd30      	pop	{r4, r5, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801191e:	4bab      	ldr	r3, [pc, #684]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	039b      	lsls	r3, r3, #14
 8011924:	d503      	bpl.n	801192e <HAL_RCC_OscConfig+0x76>
 8011926:	6863      	ldr	r3, [r4, #4]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d100      	bne.n	801192e <HAL_RCC_OscConfig+0x76>
 801192c:	e258      	b.n	8011de0 <HAL_RCC_OscConfig+0x528>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801192e:	6823      	ldr	r3, [r4, #0]
 8011930:	079b      	lsls	r3, r3, #30
 8011932:	d400      	bmi.n	8011936 <HAL_RCC_OscConfig+0x7e>
 8011934:	e088      	b.n	8011a48 <HAL_RCC_OscConfig+0x190>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011936:	4ba5      	ldr	r3, [pc, #660]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	220c      	movs	r2, #12
 801193c:	421a      	tst	r2, r3
 801193e:	d072      	beq.n	8011a26 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011940:	4ba2      	ldr	r3, [pc, #648]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011942:	685a      	ldr	r2, [r3, #4]
 8011944:	230c      	movs	r3, #12
 8011946:	4013      	ands	r3, r2
 8011948:	2b08      	cmp	r3, #8
 801194a:	d063      	beq.n	8011a14 <HAL_RCC_OscConfig+0x15c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801194c:	68e3      	ldr	r3, [r4, #12]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d100      	bne.n	8011954 <HAL_RCC_OscConfig+0x9c>
 8011952:	e09b      	b.n	8011a8c <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_ENABLE();
 8011954:	4a9d      	ldr	r2, [pc, #628]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011956:	6813      	ldr	r3, [r2, #0]
 8011958:	2101      	movs	r1, #1
 801195a:	430b      	orrs	r3, r1
 801195c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801195e:	f7fe fc4d 	bl	80101fc <HAL_GetTick>
 8011962:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011964:	4b99      	ldr	r3, [pc, #612]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	079b      	lsls	r3, r3, #30
 801196a:	d500      	bpl.n	801196e <HAL_RCC_OscConfig+0xb6>
 801196c:	e085      	b.n	8011a7a <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801196e:	f7fe fc45 	bl	80101fc <HAL_GetTick>
 8011972:	1b40      	subs	r0, r0, r5
 8011974:	2864      	cmp	r0, #100	; 0x64
 8011976:	d9f5      	bls.n	8011964 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
 8011978:	2003      	movs	r0, #3
 801197a:	e7ce      	b.n	801191a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801197c:	6863      	ldr	r3, [r4, #4]
 801197e:	2b01      	cmp	r3, #1
 8011980:	d00b      	beq.n	801199a <HAL_RCC_OscConfig+0xe2>
 8011982:	2b00      	cmp	r3, #0
 8011984:	d120      	bne.n	80119c8 <HAL_RCC_OscConfig+0x110>
 8011986:	4b91      	ldr	r3, [pc, #580]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	4991      	ldr	r1, [pc, #580]	; (8011bd0 <HAL_RCC_OscConfig+0x318>)
 801198c:	400a      	ands	r2, r1
 801198e:	601a      	str	r2, [r3, #0]
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	4990      	ldr	r1, [pc, #576]	; (8011bd4 <HAL_RCC_OscConfig+0x31c>)
 8011994:	400a      	ands	r2, r1
 8011996:	601a      	str	r2, [r3, #0]
 8011998:	e005      	b.n	80119a6 <HAL_RCC_OscConfig+0xee>
 801199a:	4a8c      	ldr	r2, [pc, #560]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 801199c:	6811      	ldr	r1, [r2, #0]
 801199e:	2380      	movs	r3, #128	; 0x80
 80119a0:	025b      	lsls	r3, r3, #9
 80119a2:	430b      	orrs	r3, r1
 80119a4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80119a6:	6863      	ldr	r3, [r4, #4]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d025      	beq.n	80119f8 <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
 80119ac:	f7fe fc26 	bl	80101fc <HAL_GetTick>
 80119b0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80119b2:	4b86      	ldr	r3, [pc, #536]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	039b      	lsls	r3, r3, #14
 80119b8:	d4b9      	bmi.n	801192e <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80119ba:	f7fe fc1f 	bl	80101fc <HAL_GetTick>
 80119be:	1b40      	subs	r0, r0, r5
 80119c0:	2864      	cmp	r0, #100	; 0x64
 80119c2:	d9f6      	bls.n	80119b2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80119c4:	2003      	movs	r0, #3
 80119c6:	e7a8      	b.n	801191a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80119c8:	2b05      	cmp	r3, #5
 80119ca:	d009      	beq.n	80119e0 <HAL_RCC_OscConfig+0x128>
 80119cc:	4b7f      	ldr	r3, [pc, #508]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	497f      	ldr	r1, [pc, #508]	; (8011bd0 <HAL_RCC_OscConfig+0x318>)
 80119d2:	400a      	ands	r2, r1
 80119d4:	601a      	str	r2, [r3, #0]
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	497e      	ldr	r1, [pc, #504]	; (8011bd4 <HAL_RCC_OscConfig+0x31c>)
 80119da:	400a      	ands	r2, r1
 80119dc:	601a      	str	r2, [r3, #0]
 80119de:	e7e2      	b.n	80119a6 <HAL_RCC_OscConfig+0xee>
 80119e0:	4b7a      	ldr	r3, [pc, #488]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 80119e2:	6819      	ldr	r1, [r3, #0]
 80119e4:	2280      	movs	r2, #128	; 0x80
 80119e6:	02d2      	lsls	r2, r2, #11
 80119e8:	430a      	orrs	r2, r1
 80119ea:	601a      	str	r2, [r3, #0]
 80119ec:	6819      	ldr	r1, [r3, #0]
 80119ee:	2280      	movs	r2, #128	; 0x80
 80119f0:	0252      	lsls	r2, r2, #9
 80119f2:	430a      	orrs	r2, r1
 80119f4:	601a      	str	r2, [r3, #0]
 80119f6:	e7d6      	b.n	80119a6 <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 80119f8:	f7fe fc00 	bl	80101fc <HAL_GetTick>
 80119fc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80119fe:	4b73      	ldr	r3, [pc, #460]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	039b      	lsls	r3, r3, #14
 8011a04:	d593      	bpl.n	801192e <HAL_RCC_OscConfig+0x76>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011a06:	f7fe fbf9 	bl	80101fc <HAL_GetTick>
 8011a0a:	1b40      	subs	r0, r0, r5
 8011a0c:	2864      	cmp	r0, #100	; 0x64
 8011a0e:	d9f6      	bls.n	80119fe <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8011a10:	2003      	movs	r0, #3
 8011a12:	e782      	b.n	801191a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011a14:	4b6d      	ldr	r3, [pc, #436]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	22c0      	movs	r2, #192	; 0xc0
 8011a1a:	0252      	lsls	r2, r2, #9
 8011a1c:	4013      	ands	r3, r2
 8011a1e:	2280      	movs	r2, #128	; 0x80
 8011a20:	0212      	lsls	r2, r2, #8
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d192      	bne.n	801194c <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011a26:	4b69      	ldr	r3, [pc, #420]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	079b      	lsls	r3, r3, #30
 8011a2c:	d504      	bpl.n	8011a38 <HAL_RCC_OscConfig+0x180>
 8011a2e:	68e3      	ldr	r3, [r4, #12]
 8011a30:	2b01      	cmp	r3, #1
 8011a32:	d001      	beq.n	8011a38 <HAL_RCC_OscConfig+0x180>
        return HAL_ERROR;
 8011a34:	2001      	movs	r0, #1
 8011a36:	e770      	b.n	801191a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a38:	4964      	ldr	r1, [pc, #400]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011a3a:	680b      	ldr	r3, [r1, #0]
 8011a3c:	22f8      	movs	r2, #248	; 0xf8
 8011a3e:	4393      	bics	r3, r2
 8011a40:	6922      	ldr	r2, [r4, #16]
 8011a42:	00d2      	lsls	r2, r2, #3
 8011a44:	4313      	orrs	r3, r2
 8011a46:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011a48:	6823      	ldr	r3, [r4, #0]
 8011a4a:	071b      	lsls	r3, r3, #28
 8011a4c:	d544      	bpl.n	8011ad8 <HAL_RCC_OscConfig+0x220>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011a4e:	6a23      	ldr	r3, [r4, #32]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d02e      	beq.n	8011ab2 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8011a54:	4a5d      	ldr	r2, [pc, #372]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011a56:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011a58:	2101      	movs	r1, #1
 8011a5a:	430b      	orrs	r3, r1
 8011a5c:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011a5e:	f7fe fbcd 	bl	80101fc <HAL_GetTick>
 8011a62:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011a64:	4b59      	ldr	r3, [pc, #356]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a68:	079b      	lsls	r3, r3, #30
 8011a6a:	d435      	bmi.n	8011ad8 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011a6c:	f7fe fbc6 	bl	80101fc <HAL_GetTick>
 8011a70:	1b40      	subs	r0, r0, r5
 8011a72:	2864      	cmp	r0, #100	; 0x64
 8011a74:	d9f6      	bls.n	8011a64 <HAL_RCC_OscConfig+0x1ac>
          return HAL_TIMEOUT;
 8011a76:	2003      	movs	r0, #3
 8011a78:	e74f      	b.n	801191a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a7a:	4954      	ldr	r1, [pc, #336]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011a7c:	680b      	ldr	r3, [r1, #0]
 8011a7e:	22f8      	movs	r2, #248	; 0xf8
 8011a80:	4393      	bics	r3, r2
 8011a82:	6922      	ldr	r2, [r4, #16]
 8011a84:	00d2      	lsls	r2, r2, #3
 8011a86:	4313      	orrs	r3, r2
 8011a88:	600b      	str	r3, [r1, #0]
 8011a8a:	e7dd      	b.n	8011a48 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_DISABLE();
 8011a8c:	4a4f      	ldr	r2, [pc, #316]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011a8e:	6813      	ldr	r3, [r2, #0]
 8011a90:	2101      	movs	r1, #1
 8011a92:	438b      	bics	r3, r1
 8011a94:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011a96:	f7fe fbb1 	bl	80101fc <HAL_GetTick>
 8011a9a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011a9c:	4b4b      	ldr	r3, [pc, #300]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	079b      	lsls	r3, r3, #30
 8011aa2:	d5d1      	bpl.n	8011a48 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011aa4:	f7fe fbaa 	bl	80101fc <HAL_GetTick>
 8011aa8:	1b40      	subs	r0, r0, r5
 8011aaa:	2864      	cmp	r0, #100	; 0x64
 8011aac:	d9f6      	bls.n	8011a9c <HAL_RCC_OscConfig+0x1e4>
            return HAL_TIMEOUT;
 8011aae:	2003      	movs	r0, #3
 8011ab0:	e733      	b.n	801191a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSI_DISABLE();
 8011ab2:	4a46      	ldr	r2, [pc, #280]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011ab4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011ab6:	2101      	movs	r1, #1
 8011ab8:	438b      	bics	r3, r1
 8011aba:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011abc:	f7fe fb9e 	bl	80101fc <HAL_GetTick>
 8011ac0:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011ac2:	4b42      	ldr	r3, [pc, #264]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac6:	079b      	lsls	r3, r3, #30
 8011ac8:	d506      	bpl.n	8011ad8 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011aca:	f7fe fb97 	bl	80101fc <HAL_GetTick>
 8011ace:	1b40      	subs	r0, r0, r5
 8011ad0:	2864      	cmp	r0, #100	; 0x64
 8011ad2:	d9f6      	bls.n	8011ac2 <HAL_RCC_OscConfig+0x20a>
          return HAL_TIMEOUT;
 8011ad4:	2003      	movs	r0, #3
 8011ad6:	e720      	b.n	801191a <HAL_RCC_OscConfig+0x62>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011ad8:	6823      	ldr	r3, [r4, #0]
 8011ada:	075b      	lsls	r3, r3, #29
 8011adc:	d440      	bmi.n	8011b60 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011ade:	6823      	ldr	r3, [r4, #0]
 8011ae0:	06db      	lsls	r3, r3, #27
 8011ae2:	d512      	bpl.n	8011b0a <HAL_RCC_OscConfig+0x252>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8011ae4:	6963      	ldr	r3, [r4, #20]
 8011ae6:	2b01      	cmp	r3, #1
 8011ae8:	d100      	bne.n	8011aec <HAL_RCC_OscConfig+0x234>
 8011aea:	e0c6      	b.n	8011c7a <HAL_RCC_OscConfig+0x3c2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011aec:	3305      	adds	r3, #5
 8011aee:	d000      	beq.n	8011af2 <HAL_RCC_OscConfig+0x23a>
 8011af0:	e0e3      	b.n	8011cba <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_HSI14ADC_ENABLE();
 8011af2:	4a36      	ldr	r2, [pc, #216]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011af4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011af6:	2104      	movs	r1, #4
 8011af8:	438b      	bics	r3, r1
 8011afa:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011afc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011afe:	31f4      	adds	r1, #244	; 0xf4
 8011b00:	438b      	bics	r3, r1
 8011b02:	69a1      	ldr	r1, [r4, #24]
 8011b04:	00c9      	lsls	r1, r1, #3
 8011b06:	430b      	orrs	r3, r1
 8011b08:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011b0a:	6823      	ldr	r3, [r4, #0]
 8011b0c:	069b      	lsls	r3, r3, #26
 8011b0e:	d400      	bmi.n	8011b12 <HAL_RCC_OscConfig+0x25a>
 8011b10:	e10f      	b.n	8011d32 <HAL_RCC_OscConfig+0x47a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011b12:	4b2e      	ldr	r3, [pc, #184]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011b14:	685a      	ldr	r2, [r3, #4]
 8011b16:	230c      	movs	r3, #12
 8011b18:	4013      	ands	r3, r2
 8011b1a:	2b0c      	cmp	r3, #12
 8011b1c:	d100      	bne.n	8011b20 <HAL_RCC_OscConfig+0x268>
 8011b1e:	e0ec      	b.n	8011cfa <HAL_RCC_OscConfig+0x442>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011b20:	4b2a      	ldr	r3, [pc, #168]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011b22:	685a      	ldr	r2, [r3, #4]
 8011b24:	230c      	movs	r3, #12
 8011b26:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011b28:	2b08      	cmp	r3, #8
 8011b2a:	d100      	bne.n	8011b2e <HAL_RCC_OscConfig+0x276>
 8011b2c:	e0dd      	b.n	8011cea <HAL_RCC_OscConfig+0x432>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011b2e:	69e3      	ldr	r3, [r4, #28]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d100      	bne.n	8011b36 <HAL_RCC_OscConfig+0x27e>
 8011b34:	e0ea      	b.n	8011d0c <HAL_RCC_OscConfig+0x454>
        __HAL_RCC_HSI48_ENABLE();
 8011b36:	4a25      	ldr	r2, [pc, #148]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011b38:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011b3a:	2380      	movs	r3, #128	; 0x80
 8011b3c:	025b      	lsls	r3, r3, #9
 8011b3e:	430b      	orrs	r3, r1
 8011b40:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011b42:	f7fe fb5b 	bl	80101fc <HAL_GetTick>
 8011b46:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011b48:	4b20      	ldr	r3, [pc, #128]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b4c:	03db      	lsls	r3, r3, #15
 8011b4e:	d500      	bpl.n	8011b52 <HAL_RCC_OscConfig+0x29a>
 8011b50:	e0ef      	b.n	8011d32 <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011b52:	f7fe fb53 	bl	80101fc <HAL_GetTick>
 8011b56:	1b40      	subs	r0, r0, r5
 8011b58:	2864      	cmp	r0, #100	; 0x64
 8011b5a:	d9f5      	bls.n	8011b48 <HAL_RCC_OscConfig+0x290>
            return HAL_TIMEOUT;
 8011b5c:	2003      	movs	r0, #3
 8011b5e:	e6dc      	b.n	801191a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011b60:	4a1a      	ldr	r2, [pc, #104]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011b62:	69d1      	ldr	r1, [r2, #28]
 8011b64:	2080      	movs	r0, #128	; 0x80
 8011b66:	0540      	lsls	r0, r0, #21
 8011b68:	4301      	orrs	r1, r0
 8011b6a:	61d1      	str	r1, [r2, #28]
 8011b6c:	69d3      	ldr	r3, [r2, #28]
 8011b6e:	4003      	ands	r3, r0
 8011b70:	9301      	str	r3, [sp, #4]
 8011b72:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011b74:	4a18      	ldr	r2, [pc, #96]	; (8011bd8 <HAL_RCC_OscConfig+0x320>)
 8011b76:	6811      	ldr	r1, [r2, #0]
 8011b78:	2380      	movs	r3, #128	; 0x80
 8011b7a:	005b      	lsls	r3, r3, #1
 8011b7c:	430b      	orrs	r3, r1
 8011b7e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8011b80:	f7fe fb3c 	bl	80101fc <HAL_GetTick>
 8011b84:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011b86:	4b14      	ldr	r3, [pc, #80]	; (8011bd8 <HAL_RCC_OscConfig+0x320>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	05db      	lsls	r3, r3, #23
 8011b8c:	d406      	bmi.n	8011b9c <HAL_RCC_OscConfig+0x2e4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011b8e:	f7fe fb35 	bl	80101fc <HAL_GetTick>
 8011b92:	1b40      	subs	r0, r0, r5
 8011b94:	2864      	cmp	r0, #100	; 0x64
 8011b96:	d9f6      	bls.n	8011b86 <HAL_RCC_OscConfig+0x2ce>
        return HAL_TIMEOUT;
 8011b98:	2003      	movs	r0, #3
 8011b9a:	e6be      	b.n	801191a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011b9c:	4b0b      	ldr	r3, [pc, #44]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011b9e:	6a1a      	ldr	r2, [r3, #32]
 8011ba0:	2101      	movs	r1, #1
 8011ba2:	438a      	bics	r2, r1
 8011ba4:	621a      	str	r2, [r3, #32]
 8011ba6:	6a1a      	ldr	r2, [r3, #32]
 8011ba8:	3103      	adds	r1, #3
 8011baa:	438a      	bics	r2, r1
 8011bac:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8011bae:	f7fe fb25 	bl	80101fc <HAL_GetTick>
 8011bb2:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011bb4:	4b05      	ldr	r3, [pc, #20]	; (8011bcc <HAL_RCC_OscConfig+0x314>)
 8011bb6:	6a1b      	ldr	r3, [r3, #32]
 8011bb8:	079b      	lsls	r3, r3, #30
 8011bba:	d511      	bpl.n	8011be0 <HAL_RCC_OscConfig+0x328>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011bbc:	f7fe fb1e 	bl	80101fc <HAL_GetTick>
 8011bc0:	1b40      	subs	r0, r0, r5
 8011bc2:	4b06      	ldr	r3, [pc, #24]	; (8011bdc <HAL_RCC_OscConfig+0x324>)
 8011bc4:	4298      	cmp	r0, r3
 8011bc6:	d9f5      	bls.n	8011bb4 <HAL_RCC_OscConfig+0x2fc>
        return HAL_TIMEOUT;
 8011bc8:	2003      	movs	r0, #3
 8011bca:	e6a6      	b.n	801191a <HAL_RCC_OscConfig+0x62>
 8011bcc:	40021000 	.word	0x40021000
 8011bd0:	fffeffff 	.word	0xfffeffff
 8011bd4:	fffbffff 	.word	0xfffbffff
 8011bd8:	40007000 	.word	0x40007000
 8011bdc:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011be0:	68a3      	ldr	r3, [r4, #8]
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	d00b      	beq.n	8011bfe <HAL_RCC_OscConfig+0x346>
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d121      	bne.n	8011c2e <HAL_RCC_OscConfig+0x376>
 8011bea:	4b80      	ldr	r3, [pc, #512]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011bec:	6a1a      	ldr	r2, [r3, #32]
 8011bee:	2101      	movs	r1, #1
 8011bf0:	438a      	bics	r2, r1
 8011bf2:	621a      	str	r2, [r3, #32]
 8011bf4:	6a1a      	ldr	r2, [r3, #32]
 8011bf6:	3103      	adds	r1, #3
 8011bf8:	438a      	bics	r2, r1
 8011bfa:	621a      	str	r2, [r3, #32]
 8011bfc:	e004      	b.n	8011c08 <HAL_RCC_OscConfig+0x350>
 8011bfe:	4a7b      	ldr	r2, [pc, #492]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011c00:	6a13      	ldr	r3, [r2, #32]
 8011c02:	2101      	movs	r1, #1
 8011c04:	430b      	orrs	r3, r1
 8011c06:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011c08:	68a3      	ldr	r3, [r4, #8]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d025      	beq.n	8011c5a <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();
 8011c0e:	f7fe faf5 	bl	80101fc <HAL_GetTick>
 8011c12:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c14:	4b75      	ldr	r3, [pc, #468]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011c16:	6a1b      	ldr	r3, [r3, #32]
 8011c18:	079b      	lsls	r3, r3, #30
 8011c1a:	d500      	bpl.n	8011c1e <HAL_RCC_OscConfig+0x366>
 8011c1c:	e75f      	b.n	8011ade <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011c1e:	f7fe faed 	bl	80101fc <HAL_GetTick>
 8011c22:	1b40      	subs	r0, r0, r5
 8011c24:	4b72      	ldr	r3, [pc, #456]	; (8011df0 <HAL_RCC_OscConfig+0x538>)
 8011c26:	4298      	cmp	r0, r3
 8011c28:	d9f4      	bls.n	8011c14 <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 8011c2a:	2003      	movs	r0, #3
 8011c2c:	e675      	b.n	801191a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011c2e:	2b05      	cmp	r3, #5
 8011c30:	d009      	beq.n	8011c46 <HAL_RCC_OscConfig+0x38e>
 8011c32:	4b6e      	ldr	r3, [pc, #440]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011c34:	6a1a      	ldr	r2, [r3, #32]
 8011c36:	2101      	movs	r1, #1
 8011c38:	438a      	bics	r2, r1
 8011c3a:	621a      	str	r2, [r3, #32]
 8011c3c:	6a1a      	ldr	r2, [r3, #32]
 8011c3e:	3103      	adds	r1, #3
 8011c40:	438a      	bics	r2, r1
 8011c42:	621a      	str	r2, [r3, #32]
 8011c44:	e7e0      	b.n	8011c08 <HAL_RCC_OscConfig+0x350>
 8011c46:	4b69      	ldr	r3, [pc, #420]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011c48:	6a1a      	ldr	r2, [r3, #32]
 8011c4a:	2104      	movs	r1, #4
 8011c4c:	430a      	orrs	r2, r1
 8011c4e:	621a      	str	r2, [r3, #32]
 8011c50:	6a1a      	ldr	r2, [r3, #32]
 8011c52:	3903      	subs	r1, #3
 8011c54:	430a      	orrs	r2, r1
 8011c56:	621a      	str	r2, [r3, #32]
 8011c58:	e7d6      	b.n	8011c08 <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 8011c5a:	f7fe facf 	bl	80101fc <HAL_GetTick>
 8011c5e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011c60:	4b62      	ldr	r3, [pc, #392]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011c62:	6a1b      	ldr	r3, [r3, #32]
 8011c64:	079b      	lsls	r3, r3, #30
 8011c66:	d400      	bmi.n	8011c6a <HAL_RCC_OscConfig+0x3b2>
 8011c68:	e739      	b.n	8011ade <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011c6a:	f7fe fac7 	bl	80101fc <HAL_GetTick>
 8011c6e:	1b40      	subs	r0, r0, r5
 8011c70:	4b5f      	ldr	r3, [pc, #380]	; (8011df0 <HAL_RCC_OscConfig+0x538>)
 8011c72:	4298      	cmp	r0, r3
 8011c74:	d9f4      	bls.n	8011c60 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8011c76:	2003      	movs	r0, #3
 8011c78:	e64f      	b.n	801191a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011c7a:	4b5c      	ldr	r3, [pc, #368]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c7e:	2104      	movs	r1, #4
 8011c80:	430a      	orrs	r2, r1
 8011c82:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c86:	3903      	subs	r1, #3
 8011c88:	430a      	orrs	r2, r1
 8011c8a:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011c8c:	f7fe fab6 	bl	80101fc <HAL_GetTick>
 8011c90:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011c92:	4b56      	ldr	r3, [pc, #344]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c96:	079b      	lsls	r3, r3, #30
 8011c98:	d406      	bmi.n	8011ca8 <HAL_RCC_OscConfig+0x3f0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011c9a:	f7fe faaf 	bl	80101fc <HAL_GetTick>
 8011c9e:	1b40      	subs	r0, r0, r5
 8011ca0:	2864      	cmp	r0, #100	; 0x64
 8011ca2:	d9f6      	bls.n	8011c92 <HAL_RCC_OscConfig+0x3da>
          return HAL_TIMEOUT;
 8011ca4:	2003      	movs	r0, #3
 8011ca6:	e638      	b.n	801191a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011ca8:	4950      	ldr	r1, [pc, #320]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011caa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011cac:	22f8      	movs	r2, #248	; 0xf8
 8011cae:	4393      	bics	r3, r2
 8011cb0:	69a2      	ldr	r2, [r4, #24]
 8011cb2:	00d2      	lsls	r2, r2, #3
 8011cb4:	4313      	orrs	r3, r2
 8011cb6:	634b      	str	r3, [r1, #52]	; 0x34
 8011cb8:	e727      	b.n	8011b0a <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011cba:	4b4c      	ldr	r3, [pc, #304]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011cbe:	2104      	movs	r1, #4
 8011cc0:	430a      	orrs	r2, r1
 8011cc2:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011cc6:	3903      	subs	r1, #3
 8011cc8:	438a      	bics	r2, r1
 8011cca:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011ccc:	f7fe fa96 	bl	80101fc <HAL_GetTick>
 8011cd0:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011cd2:	4b46      	ldr	r3, [pc, #280]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cd6:	079b      	lsls	r3, r3, #30
 8011cd8:	d400      	bmi.n	8011cdc <HAL_RCC_OscConfig+0x424>
 8011cda:	e716      	b.n	8011b0a <HAL_RCC_OscConfig+0x252>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011cdc:	f7fe fa8e 	bl	80101fc <HAL_GetTick>
 8011ce0:	1b40      	subs	r0, r0, r5
 8011ce2:	2864      	cmp	r0, #100	; 0x64
 8011ce4:	d9f5      	bls.n	8011cd2 <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 8011ce6:	2003      	movs	r0, #3
 8011ce8:	e617      	b.n	801191a <HAL_RCC_OscConfig+0x62>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011cea:	4b40      	ldr	r3, [pc, #256]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	22c0      	movs	r2, #192	; 0xc0
 8011cf0:	0252      	lsls	r2, r2, #9
 8011cf2:	4013      	ands	r3, r2
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d000      	beq.n	8011cfa <HAL_RCC_OscConfig+0x442>
 8011cf8:	e719      	b.n	8011b2e <HAL_RCC_OscConfig+0x276>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011cfa:	4b3c      	ldr	r3, [pc, #240]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cfe:	03db      	lsls	r3, r3, #15
 8011d00:	d517      	bpl.n	8011d32 <HAL_RCC_OscConfig+0x47a>
 8011d02:	69e3      	ldr	r3, [r4, #28]
 8011d04:	2b01      	cmp	r3, #1
 8011d06:	d014      	beq.n	8011d32 <HAL_RCC_OscConfig+0x47a>
        return HAL_ERROR;
 8011d08:	2001      	movs	r0, #1
 8011d0a:	e606      	b.n	801191a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI48_DISABLE();
 8011d0c:	4a37      	ldr	r2, [pc, #220]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011d0e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011d10:	4938      	ldr	r1, [pc, #224]	; (8011df4 <HAL_RCC_OscConfig+0x53c>)
 8011d12:	400b      	ands	r3, r1
 8011d14:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011d16:	f7fe fa71 	bl	80101fc <HAL_GetTick>
 8011d1a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011d1c:	4b33      	ldr	r3, [pc, #204]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d20:	03db      	lsls	r3, r3, #15
 8011d22:	d506      	bpl.n	8011d32 <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011d24:	f7fe fa6a 	bl	80101fc <HAL_GetTick>
 8011d28:	1b40      	subs	r0, r0, r5
 8011d2a:	2864      	cmp	r0, #100	; 0x64
 8011d2c:	d9f6      	bls.n	8011d1c <HAL_RCC_OscConfig+0x464>
            return HAL_TIMEOUT;
 8011d2e:	2003      	movs	r0, #3
 8011d30:	e5f3      	b.n	801191a <HAL_RCC_OscConfig+0x62>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d055      	beq.n	8011de4 <HAL_RCC_OscConfig+0x52c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d38:	4a2c      	ldr	r2, [pc, #176]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011d3a:	6851      	ldr	r1, [r2, #4]
 8011d3c:	220c      	movs	r2, #12
 8011d3e:	400a      	ands	r2, r1
 8011d40:	2a08      	cmp	r2, #8
 8011d42:	d051      	beq.n	8011de8 <HAL_RCC_OscConfig+0x530>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011d44:	2b02      	cmp	r3, #2
 8011d46:	d012      	beq.n	8011d6e <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 8011d48:	4a28      	ldr	r2, [pc, #160]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011d4a:	6813      	ldr	r3, [r2, #0]
 8011d4c:	492a      	ldr	r1, [pc, #168]	; (8011df8 <HAL_RCC_OscConfig+0x540>)
 8011d4e:	400b      	ands	r3, r1
 8011d50:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011d52:	f7fe fa53 	bl	80101fc <HAL_GetTick>
 8011d56:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011d58:	4b24      	ldr	r3, [pc, #144]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	019b      	lsls	r3, r3, #6
 8011d5e:	d53d      	bpl.n	8011ddc <HAL_RCC_OscConfig+0x524>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d60:	f7fe fa4c 	bl	80101fc <HAL_GetTick>
 8011d64:	1b00      	subs	r0, r0, r4
 8011d66:	2864      	cmp	r0, #100	; 0x64
 8011d68:	d9f6      	bls.n	8011d58 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8011d6a:	2003      	movs	r0, #3
 8011d6c:	e5d5      	b.n	801191a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_DISABLE();
 8011d6e:	4a1f      	ldr	r2, [pc, #124]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011d70:	6813      	ldr	r3, [r2, #0]
 8011d72:	4921      	ldr	r1, [pc, #132]	; (8011df8 <HAL_RCC_OscConfig+0x540>)
 8011d74:	400b      	ands	r3, r1
 8011d76:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011d78:	f7fe fa40 	bl	80101fc <HAL_GetTick>
 8011d7c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011d7e:	4b1b      	ldr	r3, [pc, #108]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	019b      	lsls	r3, r3, #6
 8011d84:	d506      	bpl.n	8011d94 <HAL_RCC_OscConfig+0x4dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d86:	f7fe fa39 	bl	80101fc <HAL_GetTick>
 8011d8a:	1b40      	subs	r0, r0, r5
 8011d8c:	2864      	cmp	r0, #100	; 0x64
 8011d8e:	d9f6      	bls.n	8011d7e <HAL_RCC_OscConfig+0x4c6>
            return HAL_TIMEOUT;
 8011d90:	2003      	movs	r0, #3
 8011d92:	e5c2      	b.n	801191a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011d94:	4b15      	ldr	r3, [pc, #84]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d98:	210f      	movs	r1, #15
 8011d9a:	438a      	bics	r2, r1
 8011d9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011d9e:	430a      	orrs	r2, r1
 8011da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8011da2:	685a      	ldr	r2, [r3, #4]
 8011da4:	4915      	ldr	r1, [pc, #84]	; (8011dfc <HAL_RCC_OscConfig+0x544>)
 8011da6:	400a      	ands	r2, r1
 8011da8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011daa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011dac:	4301      	orrs	r1, r0
 8011dae:	430a      	orrs	r2, r1
 8011db0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8011db2:	6819      	ldr	r1, [r3, #0]
 8011db4:	2280      	movs	r2, #128	; 0x80
 8011db6:	0452      	lsls	r2, r2, #17
 8011db8:	430a      	orrs	r2, r1
 8011dba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011dbc:	f7fe fa1e 	bl	80101fc <HAL_GetTick>
 8011dc0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011dc2:	4b0a      	ldr	r3, [pc, #40]	; (8011dec <HAL_RCC_OscConfig+0x534>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	019b      	lsls	r3, r3, #6
 8011dc8:	d406      	bmi.n	8011dd8 <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011dca:	f7fe fa17 	bl	80101fc <HAL_GetTick>
 8011dce:	1b00      	subs	r0, r0, r4
 8011dd0:	2864      	cmp	r0, #100	; 0x64
 8011dd2:	d9f6      	bls.n	8011dc2 <HAL_RCC_OscConfig+0x50a>
            return HAL_TIMEOUT;
 8011dd4:	2003      	movs	r0, #3
 8011dd6:	e5a0      	b.n	801191a <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8011dd8:	2000      	movs	r0, #0
 8011dda:	e59e      	b.n	801191a <HAL_RCC_OscConfig+0x62>
 8011ddc:	2000      	movs	r0, #0
 8011dde:	e59c      	b.n	801191a <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011de0:	2001      	movs	r0, #1
 8011de2:	e59a      	b.n	801191a <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8011de4:	2000      	movs	r0, #0
 8011de6:	e598      	b.n	801191a <HAL_RCC_OscConfig+0x62>
      return HAL_ERROR;
 8011de8:	2001      	movs	r0, #1
 8011dea:	e596      	b.n	801191a <HAL_RCC_OscConfig+0x62>
 8011dec:	40021000 	.word	0x40021000
 8011df0:	00001388 	.word	0x00001388
 8011df4:	fffeffff 	.word	0xfffeffff
 8011df8:	feffffff 	.word	0xfeffffff
 8011dfc:	ffc27fff 	.word	0xffc27fff

08011e00 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011e00:	b570      	push	{r4, r5, r6, lr}
 8011e02:	0005      	movs	r5, r0
 8011e04:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011e06:	4b8d      	ldr	r3, [pc, #564]	; (801203c <HAL_RCC_ClockConfig+0x23c>)
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	4013      	ands	r3, r2
 8011e0e:	428b      	cmp	r3, r1
 8011e10:	d300      	bcc.n	8011e14 <HAL_RCC_ClockConfig+0x14>
 8011e12:	e082      	b.n	8011f1a <HAL_RCC_ClockConfig+0x11a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011e14:	4989      	ldr	r1, [pc, #548]	; (801203c <HAL_RCC_ClockConfig+0x23c>)
 8011e16:	680b      	ldr	r3, [r1, #0]
 8011e18:	2201      	movs	r2, #1
 8011e1a:	4393      	bics	r3, r2
 8011e1c:	4323      	orrs	r3, r4
 8011e1e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011e20:	680b      	ldr	r3, [r1, #0]
 8011e22:	401a      	ands	r2, r3
 8011e24:	42a2      	cmp	r2, r4
 8011e26:	d001      	beq.n	8011e2c <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8011e28:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8011e2a:	bd70      	pop	{r4, r5, r6, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011e2c:	6803      	ldr	r3, [r0, #0]
 8011e2e:	079b      	lsls	r3, r3, #30
 8011e30:	d506      	bpl.n	8011e40 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011e32:	4a83      	ldr	r2, [pc, #524]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011e34:	6853      	ldr	r3, [r2, #4]
 8011e36:	21f0      	movs	r1, #240	; 0xf0
 8011e38:	438b      	bics	r3, r1
 8011e3a:	6881      	ldr	r1, [r0, #8]
 8011e3c:	430b      	orrs	r3, r1
 8011e3e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	07db      	lsls	r3, r3, #31
 8011e44:	d400      	bmi.n	8011e48 <HAL_RCC_ClockConfig+0x48>
 8011e46:	e0e5      	b.n	8012014 <HAL_RCC_ClockConfig+0x214>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011e48:	686b      	ldr	r3, [r5, #4]
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d009      	beq.n	8011e62 <HAL_RCC_ClockConfig+0x62>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011e4e:	2b02      	cmp	r3, #2
 8011e50:	d02a      	beq.n	8011ea8 <HAL_RCC_ClockConfig+0xa8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011e52:	2b03      	cmp	r3, #3
 8011e54:	d02e      	beq.n	8011eb4 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011e56:	4a7a      	ldr	r2, [pc, #488]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011e58:	6812      	ldr	r2, [r2, #0]
 8011e5a:	0792      	lsls	r2, r2, #30
 8011e5c:	d406      	bmi.n	8011e6c <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8011e5e:	2001      	movs	r0, #1
 8011e60:	e7e3      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011e62:	4a77      	ldr	r2, [pc, #476]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011e64:	6812      	ldr	r2, [r2, #0]
 8011e66:	0392      	lsls	r2, r2, #14
 8011e68:	d400      	bmi.n	8011e6c <HAL_RCC_ClockConfig+0x6c>
 8011e6a:	e0e2      	b.n	8012032 <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011e6c:	4974      	ldr	r1, [pc, #464]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011e6e:	684a      	ldr	r2, [r1, #4]
 8011e70:	2003      	movs	r0, #3
 8011e72:	4382      	bics	r2, r0
 8011e74:	4313      	orrs	r3, r2
 8011e76:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8011e78:	f7fe f9c0 	bl	80101fc <HAL_GetTick>
 8011e7c:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011e7e:	686b      	ldr	r3, [r5, #4]
 8011e80:	2b01      	cmp	r3, #1
 8011e82:	d01d      	beq.n	8011ec0 <HAL_RCC_ClockConfig+0xc0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011e84:	2b02      	cmp	r3, #2
 8011e86:	d02a      	beq.n	8011ede <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011e88:	2b03      	cmp	r3, #3
 8011e8a:	d037      	beq.n	8011efc <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011e8c:	4b6c      	ldr	r3, [pc, #432]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	220c      	movs	r2, #12
 8011e92:	421a      	tst	r2, r3
 8011e94:	d100      	bne.n	8011e98 <HAL_RCC_ClockConfig+0x98>
 8011e96:	e0bd      	b.n	8012014 <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e98:	f7fe f9b0 	bl	80101fc <HAL_GetTick>
 8011e9c:	1b00      	subs	r0, r0, r4
 8011e9e:	4b69      	ldr	r3, [pc, #420]	; (8012044 <HAL_RCC_ClockConfig+0x244>)
 8011ea0:	4298      	cmp	r0, r3
 8011ea2:	d9f3      	bls.n	8011e8c <HAL_RCC_ClockConfig+0x8c>
            return HAL_TIMEOUT;
 8011ea4:	2003      	movs	r0, #3
 8011ea6:	e7c0      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011ea8:	4a65      	ldr	r2, [pc, #404]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011eaa:	6812      	ldr	r2, [r2, #0]
 8011eac:	0192      	lsls	r2, r2, #6
 8011eae:	d4dd      	bmi.n	8011e6c <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8011eb0:	2001      	movs	r0, #1
 8011eb2:	e7ba      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011eb4:	4a62      	ldr	r2, [pc, #392]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011eb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011eb8:	03d2      	lsls	r2, r2, #15
 8011eba:	d4d7      	bmi.n	8011e6c <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8011ebc:	2001      	movs	r0, #1
 8011ebe:	e7b4      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011ec0:	4b5f      	ldr	r3, [pc, #380]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011ec2:	685a      	ldr	r2, [r3, #4]
 8011ec4:	230c      	movs	r3, #12
 8011ec6:	4013      	ands	r3, r2
 8011ec8:	2b04      	cmp	r3, #4
 8011eca:	d100      	bne.n	8011ece <HAL_RCC_ClockConfig+0xce>
 8011ecc:	e0a2      	b.n	8012014 <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ece:	f7fe f995 	bl	80101fc <HAL_GetTick>
 8011ed2:	1b00      	subs	r0, r0, r4
 8011ed4:	4b5b      	ldr	r3, [pc, #364]	; (8012044 <HAL_RCC_ClockConfig+0x244>)
 8011ed6:	4298      	cmp	r0, r3
 8011ed8:	d9f2      	bls.n	8011ec0 <HAL_RCC_ClockConfig+0xc0>
            return HAL_TIMEOUT;
 8011eda:	2003      	movs	r0, #3
 8011edc:	e7a5      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011ede:	4b58      	ldr	r3, [pc, #352]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011ee0:	685a      	ldr	r2, [r3, #4]
 8011ee2:	230c      	movs	r3, #12
 8011ee4:	4013      	ands	r3, r2
 8011ee6:	2b08      	cmp	r3, #8
 8011ee8:	d100      	bne.n	8011eec <HAL_RCC_ClockConfig+0xec>
 8011eea:	e093      	b.n	8012014 <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011eec:	f7fe f986 	bl	80101fc <HAL_GetTick>
 8011ef0:	1b00      	subs	r0, r0, r4
 8011ef2:	4b54      	ldr	r3, [pc, #336]	; (8012044 <HAL_RCC_ClockConfig+0x244>)
 8011ef4:	4298      	cmp	r0, r3
 8011ef6:	d9f2      	bls.n	8011ede <HAL_RCC_ClockConfig+0xde>
            return HAL_TIMEOUT;
 8011ef8:	2003      	movs	r0, #3
 8011efa:	e796      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011efc:	4b50      	ldr	r3, [pc, #320]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011efe:	685a      	ldr	r2, [r3, #4]
 8011f00:	230c      	movs	r3, #12
 8011f02:	4013      	ands	r3, r2
 8011f04:	2b0c      	cmp	r3, #12
 8011f06:	d100      	bne.n	8011f0a <HAL_RCC_ClockConfig+0x10a>
 8011f08:	e084      	b.n	8012014 <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f0a:	f7fe f977 	bl	80101fc <HAL_GetTick>
 8011f0e:	1b00      	subs	r0, r0, r4
 8011f10:	4b4c      	ldr	r3, [pc, #304]	; (8012044 <HAL_RCC_ClockConfig+0x244>)
 8011f12:	4298      	cmp	r0, r3
 8011f14:	d9f2      	bls.n	8011efc <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 8011f16:	2003      	movs	r0, #3
 8011f18:	e787      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011f1a:	6803      	ldr	r3, [r0, #0]
 8011f1c:	079b      	lsls	r3, r3, #30
 8011f1e:	d506      	bpl.n	8011f2e <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011f20:	4a47      	ldr	r2, [pc, #284]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011f22:	6853      	ldr	r3, [r2, #4]
 8011f24:	21f0      	movs	r1, #240	; 0xf0
 8011f26:	438b      	bics	r3, r1
 8011f28:	6881      	ldr	r1, [r0, #8]
 8011f2a:	430b      	orrs	r3, r1
 8011f2c:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011f2e:	682b      	ldr	r3, [r5, #0]
 8011f30:	07db      	lsls	r3, r3, #31
 8011f32:	d563      	bpl.n	8011ffc <HAL_RCC_ClockConfig+0x1fc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011f34:	686b      	ldr	r3, [r5, #4]
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d009      	beq.n	8011f4e <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	d028      	beq.n	8011f90 <HAL_RCC_ClockConfig+0x190>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011f3e:	2b03      	cmp	r3, #3
 8011f40:	d02c      	beq.n	8011f9c <HAL_RCC_ClockConfig+0x19c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011f42:	4a3f      	ldr	r2, [pc, #252]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011f44:	6812      	ldr	r2, [r2, #0]
 8011f46:	0792      	lsls	r2, r2, #30
 8011f48:	d405      	bmi.n	8011f56 <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8011f4a:	2001      	movs	r0, #1
 8011f4c:	e76d      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011f4e:	4a3c      	ldr	r2, [pc, #240]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011f50:	6812      	ldr	r2, [r2, #0]
 8011f52:	0392      	lsls	r2, r2, #14
 8011f54:	d56f      	bpl.n	8012036 <HAL_RCC_ClockConfig+0x236>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011f56:	493a      	ldr	r1, [pc, #232]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011f58:	684a      	ldr	r2, [r1, #4]
 8011f5a:	2003      	movs	r0, #3
 8011f5c:	4382      	bics	r2, r0
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8011f62:	f7fe f94b 	bl	80101fc <HAL_GetTick>
 8011f66:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011f68:	686b      	ldr	r3, [r5, #4]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d01c      	beq.n	8011fa8 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011f6e:	2b02      	cmp	r3, #2
 8011f70:	d028      	beq.n	8011fc4 <HAL_RCC_ClockConfig+0x1c4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011f72:	2b03      	cmp	r3, #3
 8011f74:	d034      	beq.n	8011fe0 <HAL_RCC_ClockConfig+0x1e0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011f76:	4b32      	ldr	r3, [pc, #200]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011f78:	685b      	ldr	r3, [r3, #4]
 8011f7a:	220c      	movs	r2, #12
 8011f7c:	421a      	tst	r2, r3
 8011f7e:	d03d      	beq.n	8011ffc <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f80:	f7fe f93c 	bl	80101fc <HAL_GetTick>
 8011f84:	1b80      	subs	r0, r0, r6
 8011f86:	4b2f      	ldr	r3, [pc, #188]	; (8012044 <HAL_RCC_ClockConfig+0x244>)
 8011f88:	4298      	cmp	r0, r3
 8011f8a:	d9f4      	bls.n	8011f76 <HAL_RCC_ClockConfig+0x176>
            return HAL_TIMEOUT;
 8011f8c:	2003      	movs	r0, #3
 8011f8e:	e74c      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011f90:	4a2b      	ldr	r2, [pc, #172]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011f92:	6812      	ldr	r2, [r2, #0]
 8011f94:	0192      	lsls	r2, r2, #6
 8011f96:	d4de      	bmi.n	8011f56 <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8011f98:	2001      	movs	r0, #1
 8011f9a:	e746      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011f9c:	4a28      	ldr	r2, [pc, #160]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011f9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011fa0:	03d2      	lsls	r2, r2, #15
 8011fa2:	d4d8      	bmi.n	8011f56 <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8011fa4:	2001      	movs	r0, #1
 8011fa6:	e740      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011fa8:	4b25      	ldr	r3, [pc, #148]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011faa:	685a      	ldr	r2, [r3, #4]
 8011fac:	230c      	movs	r3, #12
 8011fae:	4013      	ands	r3, r2
 8011fb0:	2b04      	cmp	r3, #4
 8011fb2:	d023      	beq.n	8011ffc <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011fb4:	f7fe f922 	bl	80101fc <HAL_GetTick>
 8011fb8:	1b80      	subs	r0, r0, r6
 8011fba:	4b22      	ldr	r3, [pc, #136]	; (8012044 <HAL_RCC_ClockConfig+0x244>)
 8011fbc:	4298      	cmp	r0, r3
 8011fbe:	d9f3      	bls.n	8011fa8 <HAL_RCC_ClockConfig+0x1a8>
            return HAL_TIMEOUT;
 8011fc0:	2003      	movs	r0, #3
 8011fc2:	e732      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011fc4:	4b1e      	ldr	r3, [pc, #120]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011fc6:	685a      	ldr	r2, [r3, #4]
 8011fc8:	230c      	movs	r3, #12
 8011fca:	4013      	ands	r3, r2
 8011fcc:	2b08      	cmp	r3, #8
 8011fce:	d015      	beq.n	8011ffc <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011fd0:	f7fe f914 	bl	80101fc <HAL_GetTick>
 8011fd4:	1b80      	subs	r0, r0, r6
 8011fd6:	4b1b      	ldr	r3, [pc, #108]	; (8012044 <HAL_RCC_ClockConfig+0x244>)
 8011fd8:	4298      	cmp	r0, r3
 8011fda:	d9f3      	bls.n	8011fc4 <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
 8011fdc:	2003      	movs	r0, #3
 8011fde:	e724      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011fe0:	4b17      	ldr	r3, [pc, #92]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 8011fe2:	685a      	ldr	r2, [r3, #4]
 8011fe4:	230c      	movs	r3, #12
 8011fe6:	4013      	ands	r3, r2
 8011fe8:	2b0c      	cmp	r3, #12
 8011fea:	d007      	beq.n	8011ffc <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011fec:	f7fe f906 	bl	80101fc <HAL_GetTick>
 8011ff0:	1b80      	subs	r0, r0, r6
 8011ff2:	4b14      	ldr	r3, [pc, #80]	; (8012044 <HAL_RCC_ClockConfig+0x244>)
 8011ff4:	4298      	cmp	r0, r3
 8011ff6:	d9f3      	bls.n	8011fe0 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
 8011ff8:	2003      	movs	r0, #3
 8011ffa:	e716      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011ffc:	490f      	ldr	r1, [pc, #60]	; (801203c <HAL_RCC_ClockConfig+0x23c>)
 8011ffe:	680b      	ldr	r3, [r1, #0]
 8012000:	2201      	movs	r2, #1
 8012002:	4393      	bics	r3, r2
 8012004:	4323      	orrs	r3, r4
 8012006:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012008:	680b      	ldr	r3, [r1, #0]
 801200a:	401a      	ands	r2, r3
 801200c:	42a2      	cmp	r2, r4
 801200e:	d001      	beq.n	8012014 <HAL_RCC_ClockConfig+0x214>
      return HAL_ERROR;
 8012010:	2001      	movs	r0, #1
 8012012:	e70a      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012014:	682b      	ldr	r3, [r5, #0]
 8012016:	075b      	lsls	r3, r3, #29
 8012018:	d506      	bpl.n	8012028 <HAL_RCC_ClockConfig+0x228>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801201a:	4a09      	ldr	r2, [pc, #36]	; (8012040 <HAL_RCC_ClockConfig+0x240>)
 801201c:	6853      	ldr	r3, [r2, #4]
 801201e:	490a      	ldr	r1, [pc, #40]	; (8012048 <HAL_RCC_ClockConfig+0x248>)
 8012020:	400b      	ands	r3, r1
 8012022:	68e9      	ldr	r1, [r5, #12]
 8012024:	430b      	orrs	r3, r1
 8012026:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012028:	2000      	movs	r0, #0
 801202a:	f7fe f8bc 	bl	80101a6 <HAL_InitTick>
  return HAL_OK;
 801202e:	2000      	movs	r0, #0
 8012030:	e6fb      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 8012032:	2001      	movs	r0, #1
 8012034:	e6f9      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 8012036:	2001      	movs	r0, #1
 8012038:	e6f7      	b.n	8011e2a <HAL_RCC_ClockConfig+0x2a>
 801203a:	46c0      	nop			; (mov r8, r8)
 801203c:	40022000 	.word	0x40022000
 8012040:	40021000 	.word	0x40021000
 8012044:	00001388 	.word	0x00001388
 8012048:	fffff8ff 	.word	0xfffff8ff

0801204c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801204c:	b530      	push	{r4, r5, lr}
 801204e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012050:	aa04      	add	r2, sp, #16
 8012052:	4b1f      	ldr	r3, [pc, #124]	; (80120d0 <HAL_RCC_GetSysClockFreq+0x84>)
 8012054:	0018      	movs	r0, r3
 8012056:	c832      	ldmia	r0!, {r1, r4, r5}
 8012058:	c232      	stmia	r2!, {r1, r4, r5}
 801205a:	0011      	movs	r1, r2
 801205c:	6802      	ldr	r2, [r0, #0]
 801205e:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012060:	466a      	mov	r2, sp
 8012062:	3310      	adds	r3, #16
 8012064:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012066:	c213      	stmia	r2!, {r0, r1, r4}
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 801206c:	4b19      	ldr	r3, [pc, #100]	; (80120d4 <HAL_RCC_GetSysClockFreq+0x88>)
 801206e:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012070:	230c      	movs	r3, #12
 8012072:	4013      	ands	r3, r2
 8012074:	2b08      	cmp	r3, #8
 8012076:	d004      	beq.n	8012082 <HAL_RCC_GetSysClockFreq+0x36>
 8012078:	2b0c      	cmp	r3, #12
 801207a:	d026      	beq.n	80120ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801207c:	4816      	ldr	r0, [pc, #88]	; (80120d8 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801207e:	b009      	add	sp, #36	; 0x24
 8012080:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8012082:	0c91      	lsrs	r1, r2, #18
 8012084:	230f      	movs	r3, #15
 8012086:	4019      	ands	r1, r3
 8012088:	a804      	add	r0, sp, #16
 801208a:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 801208c:	4911      	ldr	r1, [pc, #68]	; (80120d4 <HAL_RCC_GetSysClockFreq+0x88>)
 801208e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012090:	400b      	ands	r3, r1
 8012092:	4669      	mov	r1, sp
 8012094:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012096:	23c0      	movs	r3, #192	; 0xc0
 8012098:	025b      	lsls	r3, r3, #9
 801209a:	401a      	ands	r2, r3
 801209c:	2380      	movs	r3, #128	; 0x80
 801209e:	025b      	lsls	r3, r3, #9
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d008      	beq.n	80120b6 <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80120a4:	23c0      	movs	r3, #192	; 0xc0
 80120a6:	025b      	lsls	r3, r3, #9
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d009      	beq.n	80120c0 <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80120ac:	480a      	ldr	r0, [pc, #40]	; (80120d8 <HAL_RCC_GetSysClockFreq+0x8c>)
 80120ae:	f7ee f845 	bl	800013c <__udivsi3>
 80120b2:	4360      	muls	r0, r4
 80120b4:	e7e3      	b.n	801207e <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80120b6:	4808      	ldr	r0, [pc, #32]	; (80120d8 <HAL_RCC_GetSysClockFreq+0x8c>)
 80120b8:	f7ee f840 	bl	800013c <__udivsi3>
 80120bc:	4360      	muls	r0, r4
 80120be:	e7de      	b.n	801207e <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80120c0:	4806      	ldr	r0, [pc, #24]	; (80120dc <HAL_RCC_GetSysClockFreq+0x90>)
 80120c2:	f7ee f83b 	bl	800013c <__udivsi3>
 80120c6:	4360      	muls	r0, r4
 80120c8:	e7d9      	b.n	801207e <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI48_VALUE;
 80120ca:	4804      	ldr	r0, [pc, #16]	; (80120dc <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 80120cc:	e7d7      	b.n	801207e <HAL_RCC_GetSysClockFreq+0x32>
 80120ce:	46c0      	nop			; (mov r8, r8)
 80120d0:	08017144 	.word	0x08017144
 80120d4:	40021000 	.word	0x40021000
 80120d8:	007a1200 	.word	0x007a1200
 80120dc:	02dc6c00 	.word	0x02dc6c00

080120e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80120e0:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80120e2:	f7ff ffb3 	bl	801204c <HAL_RCC_GetSysClockFreq>
 80120e6:	4b05      	ldr	r3, [pc, #20]	; (80120fc <HAL_RCC_GetHCLKFreq+0x1c>)
 80120e8:	685a      	ldr	r2, [r3, #4]
 80120ea:	0912      	lsrs	r2, r2, #4
 80120ec:	230f      	movs	r3, #15
 80120ee:	4013      	ands	r3, r2
 80120f0:	4a03      	ldr	r2, [pc, #12]	; (8012100 <HAL_RCC_GetHCLKFreq+0x20>)
 80120f2:	5cd3      	ldrb	r3, [r2, r3]
 80120f4:	40d8      	lsrs	r0, r3
 80120f6:	4b03      	ldr	r3, [pc, #12]	; (8012104 <HAL_RCC_GetHCLKFreq+0x24>)
 80120f8:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80120fa:	bd10      	pop	{r4, pc}
 80120fc:	40021000 	.word	0x40021000
 8012100:	0801a500 	.word	0x0801a500
 8012104:	200000c8 	.word	0x200000c8

08012108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012108:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 801210a:	f7ff ffe9 	bl	80120e0 <HAL_RCC_GetHCLKFreq>
 801210e:	4b04      	ldr	r3, [pc, #16]	; (8012120 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012110:	685a      	ldr	r2, [r3, #4]
 8012112:	0a12      	lsrs	r2, r2, #8
 8012114:	2307      	movs	r3, #7
 8012116:	4013      	ands	r3, r2
 8012118:	4a02      	ldr	r2, [pc, #8]	; (8012124 <HAL_RCC_GetPCLK1Freq+0x1c>)
 801211a:	5cd3      	ldrb	r3, [r2, r3]
 801211c:	40d8      	lsrs	r0, r3
}    
 801211e:	bd10      	pop	{r4, pc}
 8012120:	40021000 	.word	0x40021000
 8012124:	0801a500 	.word	0x0801a500

08012128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012128:	b530      	push	{r4, r5, lr}
 801212a:	b083      	sub	sp, #12
 801212c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801212e:	6803      	ldr	r3, [r0, #0]
 8012130:	03db      	lsls	r3, r3, #15
 8012132:	d507      	bpl.n	8012144 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012134:	4b41      	ldr	r3, [pc, #260]	; (801223c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012136:	6a1b      	ldr	r3, [r3, #32]
 8012138:	6842      	ldr	r2, [r0, #4]
 801213a:	4053      	eors	r3, r2
 801213c:	22c0      	movs	r2, #192	; 0xc0
 801213e:	0092      	lsls	r2, r2, #2
 8012140:	4213      	tst	r3, r2
 8012142:	d134      	bne.n	80121ae <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012144:	6823      	ldr	r3, [r4, #0]
 8012146:	07db      	lsls	r3, r3, #31
 8012148:	d506      	bpl.n	8012158 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801214a:	4a3c      	ldr	r2, [pc, #240]	; (801223c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801214c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801214e:	2103      	movs	r1, #3
 8012150:	438b      	bics	r3, r1
 8012152:	68a1      	ldr	r1, [r4, #8]
 8012154:	430b      	orrs	r3, r1
 8012156:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012158:	6823      	ldr	r3, [r4, #0]
 801215a:	079b      	lsls	r3, r3, #30
 801215c:	d506      	bpl.n	801216c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801215e:	4a37      	ldr	r2, [pc, #220]	; (801223c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012160:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012162:	4937      	ldr	r1, [pc, #220]	; (8012240 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8012164:	400b      	ands	r3, r1
 8012166:	68e1      	ldr	r1, [r4, #12]
 8012168:	430b      	orrs	r3, r1
 801216a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801216c:	6823      	ldr	r3, [r4, #0]
 801216e:	035b      	lsls	r3, r3, #13
 8012170:	d506      	bpl.n	8012180 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012172:	4a32      	ldr	r2, [pc, #200]	; (801223c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012174:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012176:	4933      	ldr	r1, [pc, #204]	; (8012244 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8012178:	400b      	ands	r3, r1
 801217a:	6921      	ldr	r1, [r4, #16]
 801217c:	430b      	orrs	r3, r1
 801217e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012180:	6823      	ldr	r3, [r4, #0]
 8012182:	069b      	lsls	r3, r3, #26
 8012184:	d506      	bpl.n	8012194 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012186:	4a2d      	ldr	r2, [pc, #180]	; (801223c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012188:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801218a:	2110      	movs	r1, #16
 801218c:	438b      	bics	r3, r1
 801218e:	6961      	ldr	r1, [r4, #20]
 8012190:	430b      	orrs	r3, r1
 8012192:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012194:	6823      	ldr	r3, [r4, #0]
 8012196:	055b      	lsls	r3, r3, #21
 8012198:	d54e      	bpl.n	8012238 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801219a:	4a28      	ldr	r2, [pc, #160]	; (801223c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801219c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801219e:	2140      	movs	r1, #64	; 0x40
 80121a0:	438b      	bics	r3, r1
 80121a2:	69a1      	ldr	r1, [r4, #24]
 80121a4:	430b      	orrs	r3, r1
 80121a6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80121a8:	2000      	movs	r0, #0
}
 80121aa:	b003      	add	sp, #12
 80121ac:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80121ae:	4a23      	ldr	r2, [pc, #140]	; (801223c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80121b0:	69d1      	ldr	r1, [r2, #28]
 80121b2:	2080      	movs	r0, #128	; 0x80
 80121b4:	0540      	lsls	r0, r0, #21
 80121b6:	4301      	orrs	r1, r0
 80121b8:	61d1      	str	r1, [r2, #28]
 80121ba:	69d3      	ldr	r3, [r2, #28]
 80121bc:	4003      	ands	r3, r0
 80121be:	9301      	str	r3, [sp, #4]
 80121c0:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80121c2:	4a21      	ldr	r2, [pc, #132]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80121c4:	6811      	ldr	r1, [r2, #0]
 80121c6:	2380      	movs	r3, #128	; 0x80
 80121c8:	005b      	lsls	r3, r3, #1
 80121ca:	430b      	orrs	r3, r1
 80121cc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80121ce:	f7fe f815 	bl	80101fc <HAL_GetTick>
 80121d2:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80121d4:	4b1c      	ldr	r3, [pc, #112]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	05db      	lsls	r3, r3, #23
 80121da:	d406      	bmi.n	80121ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80121dc:	f7fe f80e 	bl	80101fc <HAL_GetTick>
 80121e0:	1b40      	subs	r0, r0, r5
 80121e2:	2864      	cmp	r0, #100	; 0x64
 80121e4:	d9f6      	bls.n	80121d4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 80121e6:	2003      	movs	r0, #3
 80121e8:	e7df      	b.n	80121aa <HAL_RCCEx_PeriphCLKConfig+0x82>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80121ea:	4b14      	ldr	r3, [pc, #80]	; (801223c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80121ec:	6a18      	ldr	r0, [r3, #32]
 80121ee:	4a17      	ldr	r2, [pc, #92]	; (801224c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80121f0:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 80121f2:	6a1d      	ldr	r5, [r3, #32]
 80121f4:	2180      	movs	r1, #128	; 0x80
 80121f6:	0249      	lsls	r1, r1, #9
 80121f8:	4329      	orrs	r1, r5
 80121fa:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80121fc:	6a19      	ldr	r1, [r3, #32]
 80121fe:	4d14      	ldr	r5, [pc, #80]	; (8012250 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012200:	4029      	ands	r1, r5
 8012202:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012204:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012206:	0783      	lsls	r3, r0, #30
 8012208:	d407      	bmi.n	801221a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801220a:	4a0c      	ldr	r2, [pc, #48]	; (801223c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801220c:	6a13      	ldr	r3, [r2, #32]
 801220e:	490f      	ldr	r1, [pc, #60]	; (801224c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012210:	400b      	ands	r3, r1
 8012212:	6861      	ldr	r1, [r4, #4]
 8012214:	430b      	orrs	r3, r1
 8012216:	6213      	str	r3, [r2, #32]
 8012218:	e794      	b.n	8012144 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        tickstart = HAL_GetTick();
 801221a:	f7fd ffef 	bl	80101fc <HAL_GetTick>
 801221e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012220:	4b06      	ldr	r3, [pc, #24]	; (801223c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012222:	6a1b      	ldr	r3, [r3, #32]
 8012224:	079b      	lsls	r3, r3, #30
 8012226:	d4f0      	bmi.n	801220a <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012228:	f7fd ffe8 	bl	80101fc <HAL_GetTick>
 801222c:	1b40      	subs	r0, r0, r5
 801222e:	4b09      	ldr	r3, [pc, #36]	; (8012254 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012230:	4298      	cmp	r0, r3
 8012232:	d9f5      	bls.n	8012220 <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
 8012234:	2003      	movs	r0, #3
 8012236:	e7b8      	b.n	80121aa <HAL_RCCEx_PeriphCLKConfig+0x82>
  return HAL_OK;
 8012238:	2000      	movs	r0, #0
 801223a:	e7b6      	b.n	80121aa <HAL_RCCEx_PeriphCLKConfig+0x82>
 801223c:	40021000 	.word	0x40021000
 8012240:	fffcffff 	.word	0xfffcffff
 8012244:	fff3ffff 	.word	0xfff3ffff
 8012248:	40007000 	.word	0x40007000
 801224c:	fffffcff 	.word	0xfffffcff
 8012250:	fffeffff 	.word	0xfffeffff
 8012254:	00001388 	.word	0x00001388

08012258 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012258:	4770      	bx	lr

0801225a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 801225a:	b570      	push	{r4, r5, r6, lr}
 801225c:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801225e:	6802      	ldr	r2, [r0, #0]
 8012260:	68d3      	ldr	r3, [r2, #12]
 8012262:	21a0      	movs	r1, #160	; 0xa0
 8012264:	438b      	bics	r3, r1
 8012266:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012268:	f7fd ffc8 	bl	80101fc <HAL_GetTick>
 801226c:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801226e:	6823      	ldr	r3, [r4, #0]
 8012270:	68db      	ldr	r3, [r3, #12]
 8012272:	069b      	lsls	r3, r3, #26
 8012274:	d408      	bmi.n	8012288 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012276:	f7fd ffc1 	bl	80101fc <HAL_GetTick>
 801227a:	1b40      	subs	r0, r0, r5
 801227c:	23fa      	movs	r3, #250	; 0xfa
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	4298      	cmp	r0, r3
 8012282:	d9f4      	bls.n	801226e <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8012284:	2003      	movs	r0, #3
 8012286:	e000      	b.n	801228a <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 8012288:	2000      	movs	r0, #0
}
 801228a:	bd70      	pop	{r4, r5, r6, pc}

0801228c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 801228c:	b570      	push	{r4, r5, r6, lr}
 801228e:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012290:	6803      	ldr	r3, [r0, #0]
 8012292:	68da      	ldr	r2, [r3, #12]
 8012294:	0652      	lsls	r2, r2, #25
 8012296:	d501      	bpl.n	801229c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012298:	2000      	movs	r0, #0
}
 801229a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801229c:	2201      	movs	r2, #1
 801229e:	4252      	negs	r2, r2
 80122a0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80122a2:	f7fd ffab 	bl	80101fc <HAL_GetTick>
 80122a6:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80122a8:	6823      	ldr	r3, [r4, #0]
 80122aa:	68db      	ldr	r3, [r3, #12]
 80122ac:	065b      	lsls	r3, r3, #25
 80122ae:	d408      	bmi.n	80122c2 <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80122b0:	f7fd ffa4 	bl	80101fc <HAL_GetTick>
 80122b4:	1b40      	subs	r0, r0, r5
 80122b6:	23fa      	movs	r3, #250	; 0xfa
 80122b8:	009b      	lsls	r3, r3, #2
 80122ba:	4298      	cmp	r0, r3
 80122bc:	d9f4      	bls.n	80122a8 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80122be:	2003      	movs	r0, #3
 80122c0:	e7eb      	b.n	801229a <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80122c2:	2000      	movs	r0, #0
 80122c4:	e7e9      	b.n	801229a <RTC_EnterInitMode+0xe>
	...

080122c8 <HAL_RTC_Init>:
{
 80122c8:	b570      	push	{r4, r5, r6, lr}
 80122ca:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80122cc:	d046      	beq.n	801235c <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80122ce:	7f43      	ldrb	r3, [r0, #29]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d038      	beq.n	8012346 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80122d4:	2302      	movs	r3, #2
 80122d6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80122d8:	6823      	ldr	r3, [r4, #0]
 80122da:	22ca      	movs	r2, #202	; 0xca
 80122dc:	625a      	str	r2, [r3, #36]	; 0x24
 80122de:	6823      	ldr	r3, [r4, #0]
 80122e0:	3a77      	subs	r2, #119	; 0x77
 80122e2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80122e4:	0020      	movs	r0, r4
 80122e6:	f7ff ffd1 	bl	801228c <RTC_EnterInitMode>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d12f      	bne.n	801234e <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80122ee:	6822      	ldr	r2, [r4, #0]
 80122f0:	6893      	ldr	r3, [r2, #8]
 80122f2:	491b      	ldr	r1, [pc, #108]	; (8012360 <HAL_RTC_Init+0x98>)
 80122f4:	400b      	ands	r3, r1
 80122f6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80122f8:	6821      	ldr	r1, [r4, #0]
 80122fa:	688a      	ldr	r2, [r1, #8]
 80122fc:	6863      	ldr	r3, [r4, #4]
 80122fe:	6925      	ldr	r5, [r4, #16]
 8012300:	432b      	orrs	r3, r5
 8012302:	6965      	ldr	r5, [r4, #20]
 8012304:	432b      	orrs	r3, r5
 8012306:	4313      	orrs	r3, r2
 8012308:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801230a:	6823      	ldr	r3, [r4, #0]
 801230c:	68e2      	ldr	r2, [r4, #12]
 801230e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012310:	6821      	ldr	r1, [r4, #0]
 8012312:	690b      	ldr	r3, [r1, #16]
 8012314:	68a2      	ldr	r2, [r4, #8]
 8012316:	0412      	lsls	r2, r2, #16
 8012318:	4313      	orrs	r3, r2
 801231a:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801231c:	6822      	ldr	r2, [r4, #0]
 801231e:	68d3      	ldr	r3, [r2, #12]
 8012320:	2180      	movs	r1, #128	; 0x80
 8012322:	438b      	bics	r3, r1
 8012324:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012326:	6822      	ldr	r2, [r4, #0]
 8012328:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801232a:	490e      	ldr	r1, [pc, #56]	; (8012364 <HAL_RTC_Init+0x9c>)
 801232c:	400b      	ands	r3, r1
 801232e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012330:	6822      	ldr	r2, [r4, #0]
 8012332:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012334:	69a1      	ldr	r1, [r4, #24]
 8012336:	430b      	orrs	r3, r1
 8012338:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801233a:	6823      	ldr	r3, [r4, #0]
 801233c:	22ff      	movs	r2, #255	; 0xff
 801233e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012340:	2301      	movs	r3, #1
 8012342:	7763      	strb	r3, [r4, #29]
}
 8012344:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012346:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012348:	f7ff ff86 	bl	8012258 <HAL_RTC_MspInit>
 801234c:	e7c2      	b.n	80122d4 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801234e:	6823      	ldr	r3, [r4, #0]
 8012350:	22ff      	movs	r2, #255	; 0xff
 8012352:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012354:	2304      	movs	r3, #4
 8012356:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012358:	2001      	movs	r0, #1
 801235a:	e7f3      	b.n	8012344 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 801235c:	2001      	movs	r0, #1
 801235e:	e7f1      	b.n	8012344 <HAL_RTC_Init+0x7c>
 8012360:	ff8fffbf 	.word	0xff8fffbf
 8012364:	fffbffff 	.word	0xfffbffff

08012368 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8012368:	2300      	movs	r3, #0
  
  while(Value >= 10)
 801236a:	e002      	b.n	8012372 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 801236c:	3301      	adds	r3, #1
    Value -= 10;
 801236e:	380a      	subs	r0, #10
 8012370:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012372:	2809      	cmp	r0, #9
 8012374:	d8fa      	bhi.n	801236c <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012376:	011b      	lsls	r3, r3, #4
 8012378:	b2db      	uxtb	r3, r3
 801237a:	4318      	orrs	r0, r3
}
 801237c:	4770      	bx	lr
	...

08012380 <HAL_RTC_SetTime>:
{
 8012380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012382:	0004      	movs	r4, r0
 8012384:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012386:	7f03      	ldrb	r3, [r0, #28]
 8012388:	2b01      	cmp	r3, #1
 801238a:	d100      	bne.n	801238e <HAL_RTC_SetTime+0xe>
 801238c:	e070      	b.n	8012470 <HAL_RTC_SetTime+0xf0>
 801238e:	2301      	movs	r3, #1
 8012390:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012392:	3301      	adds	r3, #1
 8012394:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012396:	2a00      	cmp	r2, #0
 8012398:	d141      	bne.n	801241e <HAL_RTC_SetTime+0x9e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801239a:	6803      	ldr	r3, [r0, #0]
 801239c:	689b      	ldr	r3, [r3, #8]
 801239e:	065b      	lsls	r3, r3, #25
 80123a0:	d401      	bmi.n	80123a6 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 80123a2:	2300      	movs	r3, #0
 80123a4:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80123a6:	7830      	ldrb	r0, [r6, #0]
 80123a8:	f7ff ffde 	bl	8012368 <RTC_ByteToBcd2>
 80123ac:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80123ae:	7870      	ldrb	r0, [r6, #1]
 80123b0:	f7ff ffda 	bl	8012368 <RTC_ByteToBcd2>
 80123b4:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80123b6:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80123b8:	78b0      	ldrb	r0, [r6, #2]
 80123ba:	f7ff ffd5 	bl	8012368 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80123be:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80123c0:	7a30      	ldrb	r0, [r6, #8]
 80123c2:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80123c4:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80123c6:	6823      	ldr	r3, [r4, #0]
 80123c8:	22ca      	movs	r2, #202	; 0xca
 80123ca:	625a      	str	r2, [r3, #36]	; 0x24
 80123cc:	6823      	ldr	r3, [r4, #0]
 80123ce:	3a77      	subs	r2, #119	; 0x77
 80123d0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80123d2:	0020      	movs	r0, r4
 80123d4:	f7ff ff5a 	bl	801228c <RTC_EnterInitMode>
 80123d8:	1e07      	subs	r7, r0, #0
 80123da:	d131      	bne.n	8012440 <HAL_RTC_SetTime+0xc0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80123dc:	6823      	ldr	r3, [r4, #0]
 80123de:	4825      	ldr	r0, [pc, #148]	; (8012474 <HAL_RTC_SetTime+0xf4>)
 80123e0:	4005      	ands	r5, r0
 80123e2:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80123e4:	6822      	ldr	r2, [r4, #0]
 80123e6:	6893      	ldr	r3, [r2, #8]
 80123e8:	4923      	ldr	r1, [pc, #140]	; (8012478 <HAL_RTC_SetTime+0xf8>)
 80123ea:	400b      	ands	r3, r1
 80123ec:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80123ee:	6821      	ldr	r1, [r4, #0]
 80123f0:	688b      	ldr	r3, [r1, #8]
 80123f2:	68f2      	ldr	r2, [r6, #12]
 80123f4:	6930      	ldr	r0, [r6, #16]
 80123f6:	4302      	orrs	r2, r0
 80123f8:	4313      	orrs	r3, r2
 80123fa:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80123fc:	6822      	ldr	r2, [r4, #0]
 80123fe:	68d3      	ldr	r3, [r2, #12]
 8012400:	2180      	movs	r1, #128	; 0x80
 8012402:	438b      	bics	r3, r1
 8012404:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012406:	6823      	ldr	r3, [r4, #0]
 8012408:	689b      	ldr	r3, [r3, #8]
 801240a:	069b      	lsls	r3, r3, #26
 801240c:	d522      	bpl.n	8012454 <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801240e:	6823      	ldr	r3, [r4, #0]
 8012410:	22ff      	movs	r2, #255	; 0xff
 8012412:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012414:	2301      	movs	r3, #1
 8012416:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012418:	2300      	movs	r3, #0
 801241a:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 801241c:	e018      	b.n	8012450 <HAL_RTC_SetTime+0xd0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801241e:	6803      	ldr	r3, [r0, #0]
 8012420:	689b      	ldr	r3, [r3, #8]
 8012422:	065b      	lsls	r3, r3, #25
 8012424:	d401      	bmi.n	801242a <HAL_RTC_SetTime+0xaa>
      sTime->TimeFormat = 0x00;
 8012426:	2300      	movs	r3, #0
 8012428:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801242a:	7835      	ldrb	r5, [r6, #0]
 801242c:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 801242e:	7870      	ldrb	r0, [r6, #1]
 8012430:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012432:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012434:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012436:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012438:	7a30      	ldrb	r0, [r6, #8]
 801243a:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801243c:	4305      	orrs	r5, r0
 801243e:	e7c2      	b.n	80123c6 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012440:	6823      	ldr	r3, [r4, #0]
 8012442:	22ff      	movs	r2, #255	; 0xff
 8012444:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012446:	2304      	movs	r3, #4
 8012448:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 801244a:	2300      	movs	r3, #0
 801244c:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801244e:	2701      	movs	r7, #1
}
 8012450:	0038      	movs	r0, r7
 8012452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012454:	0020      	movs	r0, r4
 8012456:	f7ff ff00 	bl	801225a <HAL_RTC_WaitForSynchro>
 801245a:	2800      	cmp	r0, #0
 801245c:	d0d7      	beq.n	801240e <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801245e:	6823      	ldr	r3, [r4, #0]
 8012460:	22ff      	movs	r2, #255	; 0xff
 8012462:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012464:	2304      	movs	r3, #4
 8012466:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012468:	2300      	movs	r3, #0
 801246a:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 801246c:	2701      	movs	r7, #1
 801246e:	e7ef      	b.n	8012450 <HAL_RTC_SetTime+0xd0>
  __HAL_LOCK(hrtc);
 8012470:	2702      	movs	r7, #2
 8012472:	e7ed      	b.n	8012450 <HAL_RTC_SetTime+0xd0>
 8012474:	007f7f7f 	.word	0x007f7f7f
 8012478:	fffbffff 	.word	0xfffbffff

0801247c <HAL_RTC_SetDate>:
{
 801247c:	b570      	push	{r4, r5, r6, lr}
 801247e:	0004      	movs	r4, r0
 8012480:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012482:	7f03      	ldrb	r3, [r0, #28]
 8012484:	2b01      	cmp	r3, #1
 8012486:	d061      	beq.n	801254c <HAL_RTC_SetDate+0xd0>
 8012488:	2301      	movs	r3, #1
 801248a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 801248c:	3301      	adds	r3, #1
 801248e:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012490:	2a00      	cmp	r2, #0
 8012492:	d106      	bne.n	80124a2 <HAL_RTC_SetDate+0x26>
 8012494:	784b      	ldrb	r3, [r1, #1]
 8012496:	06d9      	lsls	r1, r3, #27
 8012498:	d503      	bpl.n	80124a2 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 801249a:	2110      	movs	r1, #16
 801249c:	438b      	bics	r3, r1
 801249e:	330a      	adds	r3, #10
 80124a0:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 80124a2:	2a00      	cmp	r2, #0
 80124a4:	d12f      	bne.n	8012506 <HAL_RTC_SetDate+0x8a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80124a6:	78f0      	ldrb	r0, [r6, #3]
 80124a8:	f7ff ff5e 	bl	8012368 <RTC_ByteToBcd2>
 80124ac:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80124ae:	7870      	ldrb	r0, [r6, #1]
 80124b0:	f7ff ff5a 	bl	8012368 <RTC_ByteToBcd2>
 80124b4:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80124b6:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80124b8:	78b0      	ldrb	r0, [r6, #2]
 80124ba:	f7ff ff55 	bl	8012368 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80124be:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 80124c0:	7830      	ldrb	r0, [r6, #0]
 80124c2:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80124c4:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80124c6:	6823      	ldr	r3, [r4, #0]
 80124c8:	22ca      	movs	r2, #202	; 0xca
 80124ca:	625a      	str	r2, [r3, #36]	; 0x24
 80124cc:	6823      	ldr	r3, [r4, #0]
 80124ce:	3a77      	subs	r2, #119	; 0x77
 80124d0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80124d2:	0020      	movs	r0, r4
 80124d4:	f7ff feda 	bl	801228c <RTC_EnterInitMode>
 80124d8:	1e06      	subs	r6, r0, #0
 80124da:	d11f      	bne.n	801251c <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80124dc:	6823      	ldr	r3, [r4, #0]
 80124de:	481c      	ldr	r0, [pc, #112]	; (8012550 <HAL_RTC_SetDate+0xd4>)
 80124e0:	4005      	ands	r5, r0
 80124e2:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80124e4:	6822      	ldr	r2, [r4, #0]
 80124e6:	68d3      	ldr	r3, [r2, #12]
 80124e8:	2180      	movs	r1, #128	; 0x80
 80124ea:	438b      	bics	r3, r1
 80124ec:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80124ee:	6823      	ldr	r3, [r4, #0]
 80124f0:	689b      	ldr	r3, [r3, #8]
 80124f2:	069b      	lsls	r3, r3, #26
 80124f4:	d51c      	bpl.n	8012530 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80124f6:	6823      	ldr	r3, [r4, #0]
 80124f8:	22ff      	movs	r2, #255	; 0xff
 80124fa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80124fc:	2301      	movs	r3, #1
 80124fe:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012500:	2300      	movs	r3, #0
 8012502:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8012504:	e012      	b.n	801252c <HAL_RTC_SetDate+0xb0>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8012506:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8012508:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801250a:	78f5      	ldrb	r5, [r6, #3]
 801250c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 801250e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012510:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8012512:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012514:	7830      	ldrb	r0, [r6, #0]
 8012516:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012518:	4305      	orrs	r5, r0
 801251a:	e7d4      	b.n	80124c6 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801251c:	6823      	ldr	r3, [r4, #0]
 801251e:	22ff      	movs	r2, #255	; 0xff
 8012520:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012522:	2304      	movs	r3, #4
 8012524:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012526:	2300      	movs	r3, #0
 8012528:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801252a:	2601      	movs	r6, #1
}
 801252c:	0030      	movs	r0, r6
 801252e:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012530:	0020      	movs	r0, r4
 8012532:	f7ff fe92 	bl	801225a <HAL_RTC_WaitForSynchro>
 8012536:	2800      	cmp	r0, #0
 8012538:	d0dd      	beq.n	80124f6 <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801253a:	6823      	ldr	r3, [r4, #0]
 801253c:	22ff      	movs	r2, #255	; 0xff
 801253e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012540:	2304      	movs	r3, #4
 8012542:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012544:	2300      	movs	r3, #0
 8012546:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012548:	2601      	movs	r6, #1
 801254a:	e7ef      	b.n	801252c <HAL_RTC_SetDate+0xb0>
 __HAL_LOCK(hrtc);
 801254c:	2602      	movs	r6, #2
 801254e:	e7ed      	b.n	801252c <HAL_RTC_SetDate+0xb0>
 8012550:	00ffff3f 	.word	0x00ffff3f

08012554 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012554:	0902      	lsrs	r2, r0, #4
 8012556:	0093      	lsls	r3, r2, #2
 8012558:	189b      	adds	r3, r3, r2
 801255a:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801255c:	230f      	movs	r3, #15
 801255e:	4018      	ands	r0, r3
 8012560:	1880      	adds	r0, r0, r2
 8012562:	b2c0      	uxtb	r0, r0
}
 8012564:	4770      	bx	lr
	...

08012568 <HAL_RTC_GetTime>:
{
 8012568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801256a:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801256c:	6803      	ldr	r3, [r0, #0]
 801256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012570:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012572:	6803      	ldr	r3, [r0, #0]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	490f      	ldr	r1, [pc, #60]	; (80125b4 <HAL_RTC_GetTime+0x4c>)
 8012578:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801257a:	0c1d      	lsrs	r5, r3, #16
 801257c:	203f      	movs	r0, #63	; 0x3f
 801257e:	4028      	ands	r0, r5
 8012580:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012582:	0a1e      	lsrs	r6, r3, #8
 8012584:	277f      	movs	r7, #127	; 0x7f
 8012586:	403e      	ands	r6, r7
 8012588:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801258a:	401f      	ands	r7, r3
 801258c:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 801258e:	2140      	movs	r1, #64	; 0x40
 8012590:	4029      	ands	r1, r5
 8012592:	7221      	strb	r1, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8012594:	2a00      	cmp	r2, #0
 8012596:	d10a      	bne.n	80125ae <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012598:	f7ff ffdc 	bl	8012554 <RTC_Bcd2ToByte>
 801259c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801259e:	0030      	movs	r0, r6
 80125a0:	f7ff ffd8 	bl	8012554 <RTC_Bcd2ToByte>
 80125a4:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80125a6:	0038      	movs	r0, r7
 80125a8:	f7ff ffd4 	bl	8012554 <RTC_Bcd2ToByte>
 80125ac:	70a0      	strb	r0, [r4, #2]
}
 80125ae:	2000      	movs	r0, #0
 80125b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125b2:	46c0      	nop			; (mov r8, r8)
 80125b4:	007f7f7f 	.word	0x007f7f7f

080125b8 <HAL_RTC_GetDate>:
{
 80125b8:	b570      	push	{r4, r5, r6, lr}
 80125ba:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80125bc:	6803      	ldr	r3, [r0, #0]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	490e      	ldr	r1, [pc, #56]	; (80125fc <HAL_RTC_GetDate+0x44>)
 80125c2:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80125c4:	0c18      	lsrs	r0, r3, #16
 80125c6:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80125c8:	0a19      	lsrs	r1, r3, #8
 80125ca:	261f      	movs	r6, #31
 80125cc:	400e      	ands	r6, r1
 80125ce:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80125d0:	253f      	movs	r5, #63	; 0x3f
 80125d2:	401d      	ands	r5, r3
 80125d4:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80125d6:	0b5b      	lsrs	r3, r3, #13
 80125d8:	2107      	movs	r1, #7
 80125da:	400b      	ands	r3, r1
 80125dc:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80125de:	2a00      	cmp	r2, #0
 80125e0:	d10a      	bne.n	80125f8 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80125e2:	f7ff ffb7 	bl	8012554 <RTC_Bcd2ToByte>
 80125e6:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80125e8:	0030      	movs	r0, r6
 80125ea:	f7ff ffb3 	bl	8012554 <RTC_Bcd2ToByte>
 80125ee:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80125f0:	0028      	movs	r0, r5
 80125f2:	f7ff ffaf 	bl	8012554 <RTC_Bcd2ToByte>
 80125f6:	70a0      	strb	r0, [r4, #2]
}
 80125f8:	2000      	movs	r0, #0
 80125fa:	bd70      	pop	{r4, r5, r6, pc}
 80125fc:	00ffff3f 	.word	0x00ffff3f

08012600 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012600:	6803      	ldr	r3, [r0, #0]
 8012602:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012604:	0089      	lsls	r1, r1, #2
 8012606:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012608:	600a      	str	r2, [r1, #0]
}
 801260a:	4770      	bx	lr

0801260c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801260c:	6803      	ldr	r3, [r0, #0]
 801260e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012610:	0089      	lsls	r1, r1, #2
 8012612:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012614:	6808      	ldr	r0, [r1, #0]
}
 8012616:	4770      	bx	lr

08012618 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012618:	4770      	bx	lr

0801261a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801261a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 801261c:	2239      	movs	r2, #57	; 0x39
 801261e:	2302      	movs	r3, #2
 8012620:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012622:	6804      	ldr	r4, [r0, #0]
 8012624:	6823      	ldr	r3, [r4, #0]
 8012626:	2101      	movs	r1, #1
 8012628:	430b      	orrs	r3, r1
 801262a:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 801262c:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 801262e:	2000      	movs	r0, #0
 8012630:	bd10      	pop	{r4, pc}
	...

08012634 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012634:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012636:	4a1f      	ldr	r2, [pc, #124]	; (80126b4 <TIM_Base_SetConfig+0x80>)
 8012638:	4290      	cmp	r0, r2
 801263a:	d006      	beq.n	801264a <TIM_Base_SetConfig+0x16>
 801263c:	2280      	movs	r2, #128	; 0x80
 801263e:	05d2      	lsls	r2, r2, #23
 8012640:	4290      	cmp	r0, r2
 8012642:	d002      	beq.n	801264a <TIM_Base_SetConfig+0x16>
 8012644:	4a1c      	ldr	r2, [pc, #112]	; (80126b8 <TIM_Base_SetConfig+0x84>)
 8012646:	4290      	cmp	r0, r2
 8012648:	d103      	bne.n	8012652 <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801264a:	2270      	movs	r2, #112	; 0x70
 801264c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801264e:	684a      	ldr	r2, [r1, #4]
 8012650:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012652:	4a18      	ldr	r2, [pc, #96]	; (80126b4 <TIM_Base_SetConfig+0x80>)
 8012654:	4290      	cmp	r0, r2
 8012656:	d012      	beq.n	801267e <TIM_Base_SetConfig+0x4a>
 8012658:	2280      	movs	r2, #128	; 0x80
 801265a:	05d2      	lsls	r2, r2, #23
 801265c:	4290      	cmp	r0, r2
 801265e:	d00e      	beq.n	801267e <TIM_Base_SetConfig+0x4a>
 8012660:	4a15      	ldr	r2, [pc, #84]	; (80126b8 <TIM_Base_SetConfig+0x84>)
 8012662:	4290      	cmp	r0, r2
 8012664:	d00b      	beq.n	801267e <TIM_Base_SetConfig+0x4a>
 8012666:	4a15      	ldr	r2, [pc, #84]	; (80126bc <TIM_Base_SetConfig+0x88>)
 8012668:	4290      	cmp	r0, r2
 801266a:	d008      	beq.n	801267e <TIM_Base_SetConfig+0x4a>
 801266c:	4a14      	ldr	r2, [pc, #80]	; (80126c0 <TIM_Base_SetConfig+0x8c>)
 801266e:	4290      	cmp	r0, r2
 8012670:	d005      	beq.n	801267e <TIM_Base_SetConfig+0x4a>
 8012672:	4a14      	ldr	r2, [pc, #80]	; (80126c4 <TIM_Base_SetConfig+0x90>)
 8012674:	4290      	cmp	r0, r2
 8012676:	d002      	beq.n	801267e <TIM_Base_SetConfig+0x4a>
 8012678:	4a13      	ldr	r2, [pc, #76]	; (80126c8 <TIM_Base_SetConfig+0x94>)
 801267a:	4290      	cmp	r0, r2
 801267c:	d103      	bne.n	8012686 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801267e:	4a13      	ldr	r2, [pc, #76]	; (80126cc <TIM_Base_SetConfig+0x98>)
 8012680:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012682:	68ca      	ldr	r2, [r1, #12]
 8012684:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8012686:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012688:	688b      	ldr	r3, [r1, #8]
 801268a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801268c:	680b      	ldr	r3, [r1, #0]
 801268e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012690:	4b08      	ldr	r3, [pc, #32]	; (80126b4 <TIM_Base_SetConfig+0x80>)
 8012692:	4298      	cmp	r0, r3
 8012694:	d008      	beq.n	80126a8 <TIM_Base_SetConfig+0x74>
 8012696:	4b0a      	ldr	r3, [pc, #40]	; (80126c0 <TIM_Base_SetConfig+0x8c>)
 8012698:	4298      	cmp	r0, r3
 801269a:	d005      	beq.n	80126a8 <TIM_Base_SetConfig+0x74>
 801269c:	4b09      	ldr	r3, [pc, #36]	; (80126c4 <TIM_Base_SetConfig+0x90>)
 801269e:	4298      	cmp	r0, r3
 80126a0:	d002      	beq.n	80126a8 <TIM_Base_SetConfig+0x74>
 80126a2:	4b09      	ldr	r3, [pc, #36]	; (80126c8 <TIM_Base_SetConfig+0x94>)
 80126a4:	4298      	cmp	r0, r3
 80126a6:	d101      	bne.n	80126ac <TIM_Base_SetConfig+0x78>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80126a8:	690b      	ldr	r3, [r1, #16]
 80126aa:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80126ac:	2301      	movs	r3, #1
 80126ae:	6143      	str	r3, [r0, #20]
}
 80126b0:	4770      	bx	lr
 80126b2:	46c0      	nop			; (mov r8, r8)
 80126b4:	40012c00 	.word	0x40012c00
 80126b8:	40000400 	.word	0x40000400
 80126bc:	40002000 	.word	0x40002000
 80126c0:	40014000 	.word	0x40014000
 80126c4:	40014400 	.word	0x40014400
 80126c8:	40014800 	.word	0x40014800
 80126cc:	fffffcff 	.word	0xfffffcff

080126d0 <HAL_TIM_Base_Init>:
{
 80126d0:	b570      	push	{r4, r5, r6, lr}
 80126d2:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80126d4:	d014      	beq.n	8012700 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80126d6:	2339      	movs	r3, #57	; 0x39
 80126d8:	5cc3      	ldrb	r3, [r0, r3]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00a      	beq.n	80126f4 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80126de:	2539      	movs	r5, #57	; 0x39
 80126e0:	2302      	movs	r3, #2
 80126e2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80126e4:	1d21      	adds	r1, r4, #4
 80126e6:	6820      	ldr	r0, [r4, #0]
 80126e8:	f7ff ffa4 	bl	8012634 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80126ec:	2301      	movs	r3, #1
 80126ee:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80126f0:	2000      	movs	r0, #0
}
 80126f2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80126f4:	3338      	adds	r3, #56	; 0x38
 80126f6:	2200      	movs	r2, #0
 80126f8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80126fa:	f7ff ff8d 	bl	8012618 <HAL_TIM_Base_MspInit>
 80126fe:	e7ee      	b.n	80126de <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012700:	2001      	movs	r0, #1
 8012702:	e7f6      	b.n	80126f2 <HAL_TIM_Base_Init+0x22>

08012704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012704:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012706:	2338      	movs	r3, #56	; 0x38
 8012708:	5cc3      	ldrb	r3, [r0, r3]
 801270a:	2b01      	cmp	r3, #1
 801270c:	d01e      	beq.n	801274c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 801270e:	2238      	movs	r2, #56	; 0x38
 8012710:	2501      	movs	r5, #1
 8012712:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012714:	2439      	movs	r4, #57	; 0x39
 8012716:	2302      	movs	r3, #2
 8012718:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801271a:	6806      	ldr	r6, [r0, #0]
 801271c:	6873      	ldr	r3, [r6, #4]
 801271e:	2770      	movs	r7, #112	; 0x70
 8012720:	43bb      	bics	r3, r7
 8012722:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012724:	6806      	ldr	r6, [r0, #0]
 8012726:	6873      	ldr	r3, [r6, #4]
 8012728:	680f      	ldr	r7, [r1, #0]
 801272a:	433b      	orrs	r3, r7
 801272c:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801272e:	6806      	ldr	r6, [r0, #0]
 8012730:	68b3      	ldr	r3, [r6, #8]
 8012732:	2780      	movs	r7, #128	; 0x80
 8012734:	43bb      	bics	r3, r7
 8012736:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012738:	6806      	ldr	r6, [r0, #0]
 801273a:	68b3      	ldr	r3, [r6, #8]
 801273c:	6849      	ldr	r1, [r1, #4]
 801273e:	430b      	orrs	r3, r1
 8012740:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012742:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012744:	2300      	movs	r3, #0
 8012746:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012748:	2000      	movs	r0, #0
}
 801274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 801274c:	2002      	movs	r0, #2
 801274e:	e7fc      	b.n	801274a <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012750 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012750:	4770      	bx	lr

08012752 <HAL_UART_DeInit>:
{
 8012752:	b570      	push	{r4, r5, r6, lr}
 8012754:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012756:	d016      	beq.n	8012786 <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8012758:	2669      	movs	r6, #105	; 0x69
 801275a:	2302      	movs	r3, #2
 801275c:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 801275e:	6802      	ldr	r2, [r0, #0]
 8012760:	6813      	ldr	r3, [r2, #0]
 8012762:	2101      	movs	r1, #1
 8012764:	438b      	bics	r3, r1
 8012766:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012768:	6803      	ldr	r3, [r0, #0]
 801276a:	2500      	movs	r5, #0
 801276c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 801276e:	6803      	ldr	r3, [r0, #0]
 8012770:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012772:	6803      	ldr	r3, [r0, #0]
 8012774:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012776:	f7ff ffeb 	bl	8012750 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801277a:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 801277c:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 801277e:	2368      	movs	r3, #104	; 0x68
 8012780:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012782:	2000      	movs	r0, #0
}
 8012784:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8012786:	2001      	movs	r0, #1
 8012788:	e7fc      	b.n	8012784 <HAL_UART_DeInit+0x32>

0801278a <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801278a:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801278c:	2369      	movs	r3, #105	; 0x69
 801278e:	5cc3      	ldrb	r3, [r0, r3]
 8012790:	2b01      	cmp	r3, #1
 8012792:	d003      	beq.n	801279c <HAL_UART_Transmit_IT+0x12>
 8012794:	2369      	movs	r3, #105	; 0x69
 8012796:	5cc3      	ldrb	r3, [r0, r3]
 8012798:	2b22      	cmp	r3, #34	; 0x22
 801279a:	d12b      	bne.n	80127f4 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 801279c:	2900      	cmp	r1, #0
 801279e:	d02b      	beq.n	80127f8 <HAL_UART_Transmit_IT+0x6e>
 80127a0:	2a00      	cmp	r2, #0
 80127a2:	d02b      	beq.n	80127fc <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80127a4:	2368      	movs	r3, #104	; 0x68
 80127a6:	5cc3      	ldrb	r3, [r0, r3]
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d029      	beq.n	8012800 <HAL_UART_Transmit_IT+0x76>
 80127ac:	2368      	movs	r3, #104	; 0x68
 80127ae:	2401      	movs	r4, #1
 80127b0:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 80127b2:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80127b4:	3b18      	subs	r3, #24
 80127b6:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80127b8:	3302      	adds	r3, #2
 80127ba:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127bc:	2300      	movs	r3, #0
 80127be:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80127c0:	3369      	adds	r3, #105	; 0x69
 80127c2:	5cc3      	ldrb	r3, [r0, r3]
 80127c4:	2b22      	cmp	r3, #34	; 0x22
 80127c6:	d011      	beq.n	80127ec <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80127c8:	2369      	movs	r3, #105	; 0x69
 80127ca:	2212      	movs	r2, #18
 80127cc:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80127ce:	6802      	ldr	r2, [r0, #0]
 80127d0:	6893      	ldr	r3, [r2, #8]
 80127d2:	2101      	movs	r1, #1
 80127d4:	430b      	orrs	r3, r1
 80127d6:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80127d8:	2368      	movs	r3, #104	; 0x68
 80127da:	2200      	movs	r2, #0
 80127dc:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80127de:	6802      	ldr	r2, [r0, #0]
 80127e0:	6813      	ldr	r3, [r2, #0]
 80127e2:	317f      	adds	r1, #127	; 0x7f
 80127e4:	430b      	orrs	r3, r1
 80127e6:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 80127e8:	2000      	movs	r0, #0
 80127ea:	e004      	b.n	80127f6 <HAL_UART_Transmit_IT+0x6c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80127ec:	3347      	adds	r3, #71	; 0x47
 80127ee:	2232      	movs	r2, #50	; 0x32
 80127f0:	54c2      	strb	r2, [r0, r3]
 80127f2:	e7ec      	b.n	80127ce <HAL_UART_Transmit_IT+0x44>
  }
  else
  {
    return HAL_BUSY;
 80127f4:	2002      	movs	r0, #2
  }
}
 80127f6:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80127f8:	2001      	movs	r0, #1
 80127fa:	e7fc      	b.n	80127f6 <HAL_UART_Transmit_IT+0x6c>
 80127fc:	2001      	movs	r0, #1
 80127fe:	e7fa      	b.n	80127f6 <HAL_UART_Transmit_IT+0x6c>
    __HAL_LOCK(huart);
 8012800:	2002      	movs	r0, #2
 8012802:	e7f8      	b.n	80127f6 <HAL_UART_Transmit_IT+0x6c>

08012804 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012804:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012806:	2369      	movs	r3, #105	; 0x69
 8012808:	5cc3      	ldrb	r3, [r0, r3]
 801280a:	2b01      	cmp	r3, #1
 801280c:	d003      	beq.n	8012816 <HAL_UART_Receive_IT+0x12>
 801280e:	2369      	movs	r3, #105	; 0x69
 8012810:	5cc3      	ldrb	r3, [r0, r3]
 8012812:	2b12      	cmp	r3, #18
 8012814:	d15d      	bne.n	80128d2 <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 8012816:	2900      	cmp	r1, #0
 8012818:	d05d      	beq.n	80128d6 <HAL_UART_Receive_IT+0xd2>
 801281a:	2a00      	cmp	r2, #0
 801281c:	d05d      	beq.n	80128da <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801281e:	2368      	movs	r3, #104	; 0x68
 8012820:	5cc3      	ldrb	r3, [r0, r3]
 8012822:	2b01      	cmp	r3, #1
 8012824:	d05b      	beq.n	80128de <HAL_UART_Receive_IT+0xda>
 8012826:	2368      	movs	r3, #104	; 0x68
 8012828:	2401      	movs	r4, #1
 801282a:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 801282c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 801282e:	3b10      	subs	r3, #16
 8012830:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8012832:	3302      	adds	r3, #2
 8012834:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012836:	6883      	ldr	r3, [r0, #8]
 8012838:	2280      	movs	r2, #128	; 0x80
 801283a:	0152      	lsls	r2, r2, #5
 801283c:	4293      	cmp	r3, r2
 801283e:	d008      	beq.n	8012852 <HAL_UART_Receive_IT+0x4e>
 8012840:	2b00      	cmp	r3, #0
 8012842:	d115      	bne.n	8012870 <HAL_UART_Receive_IT+0x6c>
 8012844:	6903      	ldr	r3, [r0, #16]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d10e      	bne.n	8012868 <HAL_UART_Receive_IT+0x64>
 801284a:	335c      	adds	r3, #92	; 0x5c
 801284c:	22ff      	movs	r2, #255	; 0xff
 801284e:	52c2      	strh	r2, [r0, r3]
 8012850:	e012      	b.n	8012878 <HAL_UART_Receive_IT+0x74>
 8012852:	6903      	ldr	r3, [r0, #16]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d103      	bne.n	8012860 <HAL_UART_Receive_IT+0x5c>
 8012858:	335c      	adds	r3, #92	; 0x5c
 801285a:	4a22      	ldr	r2, [pc, #136]	; (80128e4 <HAL_UART_Receive_IT+0xe0>)
 801285c:	52c2      	strh	r2, [r0, r3]
 801285e:	e00b      	b.n	8012878 <HAL_UART_Receive_IT+0x74>
 8012860:	235c      	movs	r3, #92	; 0x5c
 8012862:	22ff      	movs	r2, #255	; 0xff
 8012864:	52c2      	strh	r2, [r0, r3]
 8012866:	e007      	b.n	8012878 <HAL_UART_Receive_IT+0x74>
 8012868:	235c      	movs	r3, #92	; 0x5c
 801286a:	227f      	movs	r2, #127	; 0x7f
 801286c:	52c2      	strh	r2, [r0, r3]
 801286e:	e003      	b.n	8012878 <HAL_UART_Receive_IT+0x74>
 8012870:	2280      	movs	r2, #128	; 0x80
 8012872:	0552      	lsls	r2, r2, #21
 8012874:	4293      	cmp	r3, r2
 8012876:	d01d      	beq.n	80128b4 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012878:	2300      	movs	r3, #0
 801287a:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801287c:	3369      	adds	r3, #105	; 0x69
 801287e:	5cc3      	ldrb	r3, [r0, r3]
 8012880:	2b12      	cmp	r3, #18
 8012882:	d022      	beq.n	80128ca <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012884:	2369      	movs	r3, #105	; 0x69
 8012886:	2222      	movs	r2, #34	; 0x22
 8012888:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801288a:	6802      	ldr	r2, [r0, #0]
 801288c:	6811      	ldr	r1, [r2, #0]
 801288e:	2380      	movs	r3, #128	; 0x80
 8012890:	005b      	lsls	r3, r3, #1
 8012892:	430b      	orrs	r3, r1
 8012894:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012896:	6802      	ldr	r2, [r0, #0]
 8012898:	6893      	ldr	r3, [r2, #8]
 801289a:	2101      	movs	r1, #1
 801289c:	430b      	orrs	r3, r1
 801289e:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80128a0:	2368      	movs	r3, #104	; 0x68
 80128a2:	2200      	movs	r2, #0
 80128a4:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80128a6:	6802      	ldr	r2, [r0, #0]
 80128a8:	6813      	ldr	r3, [r2, #0]
 80128aa:	311f      	adds	r1, #31
 80128ac:	430b      	orrs	r3, r1
 80128ae:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 80128b0:	2000      	movs	r0, #0
 80128b2:	e00f      	b.n	80128d4 <HAL_UART_Receive_IT+0xd0>
    UART_MASK_COMPUTATION(huart);
 80128b4:	6903      	ldr	r3, [r0, #16]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d103      	bne.n	80128c2 <HAL_UART_Receive_IT+0xbe>
 80128ba:	335c      	adds	r3, #92	; 0x5c
 80128bc:	227f      	movs	r2, #127	; 0x7f
 80128be:	52c2      	strh	r2, [r0, r3]
 80128c0:	e7da      	b.n	8012878 <HAL_UART_Receive_IT+0x74>
 80128c2:	235c      	movs	r3, #92	; 0x5c
 80128c4:	223f      	movs	r2, #63	; 0x3f
 80128c6:	52c2      	strh	r2, [r0, r3]
 80128c8:	e7d6      	b.n	8012878 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80128ca:	3357      	adds	r3, #87	; 0x57
 80128cc:	2232      	movs	r2, #50	; 0x32
 80128ce:	54c2      	strb	r2, [r0, r3]
 80128d0:	e7db      	b.n	801288a <HAL_UART_Receive_IT+0x86>
  }
  else
  {
    return HAL_BUSY;
 80128d2:	2002      	movs	r0, #2
  }
}
 80128d4:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80128d6:	2001      	movs	r0, #1
 80128d8:	e7fc      	b.n	80128d4 <HAL_UART_Receive_IT+0xd0>
 80128da:	2001      	movs	r0, #1
 80128dc:	e7fa      	b.n	80128d4 <HAL_UART_Receive_IT+0xd0>
    __HAL_LOCK(huart);
 80128de:	2002      	movs	r0, #2
 80128e0:	e7f8      	b.n	80128d4 <HAL_UART_Receive_IT+0xd0>
 80128e2:	46c0      	nop			; (mov r8, r8)
 80128e4:	000001ff 	.word	0x000001ff

080128e8 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80128e8:	b510      	push	{r4, lr}
 80128ea:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80128ec:	2369      	movs	r3, #105	; 0x69
 80128ee:	5cc3      	ldrb	r3, [r0, r3]
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d003      	beq.n	80128fc <HAL_UART_Transmit_DMA+0x14>
 80128f4:	2369      	movs	r3, #105	; 0x69
 80128f6:	5cc3      	ldrb	r3, [r0, r3]
 80128f8:	2b22      	cmp	r3, #34	; 0x22
 80128fa:	d139      	bne.n	8012970 <HAL_UART_Transmit_DMA+0x88>
  {
    if((pData == NULL ) || (Size == 0))
 80128fc:	2900      	cmp	r1, #0
 80128fe:	d039      	beq.n	8012974 <HAL_UART_Transmit_DMA+0x8c>
 8012900:	2a00      	cmp	r2, #0
 8012902:	d039      	beq.n	8012978 <HAL_UART_Transmit_DMA+0x90>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012904:	2368      	movs	r3, #104	; 0x68
 8012906:	5ce3      	ldrb	r3, [r4, r3]
 8012908:	2b01      	cmp	r3, #1
 801290a:	d037      	beq.n	801297c <HAL_UART_Transmit_DMA+0x94>
 801290c:	2368      	movs	r3, #104	; 0x68
 801290e:	2001      	movs	r0, #1
 8012910:	54e0      	strb	r0, [r4, r3]

    huart->pTxBuffPtr = pData;
 8012912:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012914:	3b18      	subs	r3, #24
 8012916:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8012918:	3302      	adds	r3, #2
 801291a:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801291c:	2300      	movs	r3, #0
 801291e:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012920:	3369      	adds	r3, #105	; 0x69
 8012922:	5ce3      	ldrb	r3, [r4, r3]
 8012924:	2b22      	cmp	r3, #34	; 0x22
 8012926:	d01f      	beq.n	8012968 <HAL_UART_Transmit_DMA+0x80>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012928:	2369      	movs	r3, #105	; 0x69
 801292a:	2012      	movs	r0, #18
 801292c:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801292e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012930:	4813      	ldr	r0, [pc, #76]	; (8012980 <HAL_UART_Transmit_DMA+0x98>)
 8012932:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012934:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012936:	4813      	ldr	r0, [pc, #76]	; (8012984 <HAL_UART_Transmit_DMA+0x9c>)
 8012938:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 801293a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801293c:	4812      	ldr	r0, [pc, #72]	; (8012988 <HAL_UART_Transmit_DMA+0xa0>)
 801293e:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012940:	6820      	ldr	r0, [r4, #0]
 8012942:	3028      	adds	r0, #40	; 0x28
 8012944:	0013      	movs	r3, r2
 8012946:	0002      	movs	r2, r0
 8012948:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801294a:	f7fe f913 	bl	8010b74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801294e:	6823      	ldr	r3, [r4, #0]
 8012950:	2240      	movs	r2, #64	; 0x40
 8012952:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8012954:	6822      	ldr	r2, [r4, #0]
 8012956:	6893      	ldr	r3, [r2, #8]
 8012958:	2180      	movs	r1, #128	; 0x80
 801295a:	430b      	orrs	r3, r1
 801295c:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801295e:	2368      	movs	r3, #104	; 0x68
 8012960:	2200      	movs	r2, #0
 8012962:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8012964:	2000      	movs	r0, #0
 8012966:	e004      	b.n	8012972 <HAL_UART_Transmit_DMA+0x8a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012968:	3347      	adds	r3, #71	; 0x47
 801296a:	3031      	adds	r0, #49	; 0x31
 801296c:	54e0      	strb	r0, [r4, r3]
 801296e:	e7de      	b.n	801292e <HAL_UART_Transmit_DMA+0x46>
  }
  else
  {
    return HAL_BUSY;
 8012970:	2002      	movs	r0, #2
  }
}
 8012972:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8012974:	2001      	movs	r0, #1
 8012976:	e7fc      	b.n	8012972 <HAL_UART_Transmit_DMA+0x8a>
 8012978:	2001      	movs	r0, #1
 801297a:	e7fa      	b.n	8012972 <HAL_UART_Transmit_DMA+0x8a>
    __HAL_LOCK(huart);
 801297c:	2002      	movs	r0, #2
 801297e:	e7f8      	b.n	8012972 <HAL_UART_Transmit_DMA+0x8a>
 8012980:	08012a29 	.word	0x08012a29
 8012984:	08012a5b 	.word	0x08012a5b
 8012988:	08012aab 	.word	0x08012aab

0801298c <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801298c:	b510      	push	{r4, lr}
 801298e:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012990:	2069      	movs	r0, #105	; 0x69
 8012992:	5c20      	ldrb	r0, [r4, r0]
 8012994:	2801      	cmp	r0, #1
 8012996:	d003      	beq.n	80129a0 <HAL_UART_Receive_DMA+0x14>
 8012998:	2369      	movs	r3, #105	; 0x69
 801299a:	5ce3      	ldrb	r3, [r4, r3]
 801299c:	2b12      	cmp	r3, #18
 801299e:	d135      	bne.n	8012a0c <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 80129a0:	2900      	cmp	r1, #0
 80129a2:	d035      	beq.n	8012a10 <HAL_UART_Receive_DMA+0x84>
 80129a4:	2a00      	cmp	r2, #0
 80129a6:	d035      	beq.n	8012a14 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80129a8:	2368      	movs	r3, #104	; 0x68
 80129aa:	5ce3      	ldrb	r3, [r4, r3]
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d033      	beq.n	8012a18 <HAL_UART_Receive_DMA+0x8c>
 80129b0:	2368      	movs	r3, #104	; 0x68
 80129b2:	2001      	movs	r0, #1
 80129b4:	54e0      	strb	r0, [r4, r3]

    huart->pRxBuffPtr = pData;
 80129b6:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80129b8:	3b10      	subs	r3, #16
 80129ba:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129bc:	2300      	movs	r3, #0
 80129be:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80129c0:	3369      	adds	r3, #105	; 0x69
 80129c2:	5ce3      	ldrb	r3, [r4, r3]
 80129c4:	2b12      	cmp	r3, #18
 80129c6:	d01d      	beq.n	8012a04 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80129c8:	2369      	movs	r3, #105	; 0x69
 80129ca:	2022      	movs	r0, #34	; 0x22
 80129cc:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80129ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129d0:	4812      	ldr	r0, [pc, #72]	; (8012a1c <HAL_UART_Receive_DMA+0x90>)
 80129d2:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80129d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129d6:	4812      	ldr	r0, [pc, #72]	; (8012a20 <HAL_UART_Receive_DMA+0x94>)
 80129d8:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80129da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129dc:	4811      	ldr	r0, [pc, #68]	; (8012a24 <HAL_UART_Receive_DMA+0x98>)
 80129de:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80129e0:	6820      	ldr	r0, [r4, #0]
 80129e2:	3024      	adds	r0, #36	; 0x24
 80129e4:	0013      	movs	r3, r2
 80129e6:	000a      	movs	r2, r1
 80129e8:	0001      	movs	r1, r0
 80129ea:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80129ec:	f7fe f8c2 	bl	8010b74 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80129f0:	6822      	ldr	r2, [r4, #0]
 80129f2:	6893      	ldr	r3, [r2, #8]
 80129f4:	2140      	movs	r1, #64	; 0x40
 80129f6:	430b      	orrs	r3, r1
 80129f8:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 80129fa:	2368      	movs	r3, #104	; 0x68
 80129fc:	2200      	movs	r2, #0
 80129fe:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8012a00:	2000      	movs	r0, #0
 8012a02:	e004      	b.n	8012a0e <HAL_UART_Receive_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012a04:	3357      	adds	r3, #87	; 0x57
 8012a06:	3031      	adds	r0, #49	; 0x31
 8012a08:	54e0      	strb	r0, [r4, r3]
 8012a0a:	e7e0      	b.n	80129ce <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8012a0c:	2002      	movs	r0, #2
  }
}
 8012a0e:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8012a10:	2001      	movs	r0, #1
 8012a12:	e7fc      	b.n	8012a0e <HAL_UART_Receive_DMA+0x82>
 8012a14:	2001      	movs	r0, #1
 8012a16:	e7fa      	b.n	8012a0e <HAL_UART_Receive_DMA+0x82>
    __HAL_LOCK(huart);
 8012a18:	2002      	movs	r0, #2
 8012a1a:	e7f8      	b.n	8012a0e <HAL_UART_Receive_DMA+0x82>
 8012a1c:	08012a65 	.word	0x08012a65
 8012a20:	08012aa1 	.word	0x08012aa1
 8012a24:	08012aab 	.word	0x08012aab

08012a28 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012a28:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012a2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012a2c:	6802      	ldr	r2, [r0, #0]
 8012a2e:	6812      	ldr	r2, [r2, #0]
 8012a30:	0692      	lsls	r2, r2, #26
 8012a32:	d40d      	bmi.n	8012a50 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8012a34:	2252      	movs	r2, #82	; 0x52
 8012a36:	2100      	movs	r1, #0
 8012a38:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8012a3a:	6819      	ldr	r1, [r3, #0]
 8012a3c:	688a      	ldr	r2, [r1, #8]
 8012a3e:	2080      	movs	r0, #128	; 0x80
 8012a40:	4382      	bics	r2, r0
 8012a42:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	6813      	ldr	r3, [r2, #0]
 8012a48:	2140      	movs	r1, #64	; 0x40
 8012a4a:	430b      	orrs	r3, r1
 8012a4c:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8012a4e:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012a50:	0018      	movs	r0, r3
 8012a52:	f7fa fe31 	bl	800d6b8 <HAL_UART_TxCpltCallback>
}
 8012a56:	e7fa      	b.n	8012a4e <UART_DMATransmitCplt+0x26>

08012a58 <HAL_UART_TxHalfCpltCallback>:
}
 8012a58:	4770      	bx	lr

08012a5a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012a5a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8012a5c:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_TxHalfCpltCallback(huart);
 8012a5e:	f7ff fffb 	bl	8012a58 <HAL_UART_TxHalfCpltCallback>
}
 8012a62:	bd10      	pop	{r4, pc}

08012a64 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012a64:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012a66:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012a68:	6802      	ldr	r2, [r0, #0]
 8012a6a:	6812      	ldr	r2, [r2, #0]
 8012a6c:	0692      	lsls	r2, r2, #26
 8012a6e:	d40e      	bmi.n	8012a8e <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8012a70:	225a      	movs	r2, #90	; 0x5a
 8012a72:	2100      	movs	r1, #0
 8012a74:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012a76:	6819      	ldr	r1, [r3, #0]
 8012a78:	688a      	ldr	r2, [r1, #8]
 8012a7a:	2040      	movs	r0, #64	; 0x40
 8012a7c:	4382      	bics	r2, r0
 8012a7e:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012a80:	2269      	movs	r2, #105	; 0x69
 8012a82:	5c9a      	ldrb	r2, [r3, r2]
 8012a84:	2a32      	cmp	r2, #50	; 0x32
 8012a86:	d006      	beq.n	8012a96 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012a88:	2269      	movs	r2, #105	; 0x69
 8012a8a:	2101      	movs	r1, #1
 8012a8c:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012a8e:	0018      	movs	r0, r3
 8012a90:	f7fa fe4e 	bl	800d730 <HAL_UART_RxCpltCallback>
}
 8012a94:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012a96:	3237      	adds	r2, #55	; 0x37
 8012a98:	2112      	movs	r1, #18
 8012a9a:	5499      	strb	r1, [r3, r2]
 8012a9c:	e7f7      	b.n	8012a8e <UART_DMAReceiveCplt+0x2a>

08012a9e <HAL_UART_RxHalfCpltCallback>:
}
 8012a9e:	4770      	bx	lr

08012aa0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012aa0:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8012aa2:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_RxHalfCpltCallback(huart);
 8012aa4:	f7ff fffb 	bl	8012a9e <HAL_UART_RxHalfCpltCallback>
}
 8012aa8:	bd10      	pop	{r4, pc}

08012aaa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012aaa:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012aac:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	225a      	movs	r2, #90	; 0x5a
 8012ab2:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012ab4:	3a08      	subs	r2, #8
 8012ab6:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012ab8:	3369      	adds	r3, #105	; 0x69
 8012aba:	3a51      	subs	r2, #81	; 0x51
 8012abc:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012abe:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012ac0:	320f      	adds	r2, #15
 8012ac2:	4313      	orrs	r3, r2
 8012ac4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012ac6:	f7fa fe0f 	bl	800d6e8 <HAL_UART_ErrorCallback>
}
 8012aca:	bd10      	pop	{r4, pc}

08012acc <UART_SetConfig>:
{
 8012acc:	b570      	push	{r4, r5, r6, lr}
 8012ace:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012ad0:	6883      	ldr	r3, [r0, #8]
 8012ad2:	6902      	ldr	r2, [r0, #16]
 8012ad4:	4313      	orrs	r3, r2
 8012ad6:	6942      	ldr	r2, [r0, #20]
 8012ad8:	4313      	orrs	r3, r2
 8012ada:	69c2      	ldr	r2, [r0, #28]
 8012adc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012ade:	6801      	ldr	r1, [r0, #0]
 8012ae0:	680a      	ldr	r2, [r1, #0]
 8012ae2:	487c      	ldr	r0, [pc, #496]	; (8012cd4 <UART_SetConfig+0x208>)
 8012ae4:	4002      	ands	r2, r0
 8012ae6:	4313      	orrs	r3, r2
 8012ae8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012aea:	6822      	ldr	r2, [r4, #0]
 8012aec:	6853      	ldr	r3, [r2, #4]
 8012aee:	497a      	ldr	r1, [pc, #488]	; (8012cd8 <UART_SetConfig+0x20c>)
 8012af0:	400b      	ands	r3, r1
 8012af2:	68e1      	ldr	r1, [r4, #12]
 8012af4:	430b      	orrs	r3, r1
 8012af6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012af8:	69a2      	ldr	r2, [r4, #24]
 8012afa:	6a23      	ldr	r3, [r4, #32]
 8012afc:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012afe:	6821      	ldr	r1, [r4, #0]
 8012b00:	688b      	ldr	r3, [r1, #8]
 8012b02:	4876      	ldr	r0, [pc, #472]	; (8012cdc <UART_SetConfig+0x210>)
 8012b04:	4003      	ands	r3, r0
 8012b06:	4313      	orrs	r3, r2
 8012b08:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012b0a:	6825      	ldr	r5, [r4, #0]
 8012b0c:	4b74      	ldr	r3, [pc, #464]	; (8012ce0 <UART_SetConfig+0x214>)
 8012b0e:	429d      	cmp	r5, r3
 8012b10:	d016      	beq.n	8012b40 <UART_SetConfig+0x74>
 8012b12:	4b74      	ldr	r3, [pc, #464]	; (8012ce4 <UART_SetConfig+0x218>)
 8012b14:	429d      	cmp	r5, r3
 8012b16:	d027      	beq.n	8012b68 <UART_SetConfig+0x9c>
 8012b18:	4b73      	ldr	r3, [pc, #460]	; (8012ce8 <UART_SetConfig+0x21c>)
 8012b1a:	429d      	cmp	r5, r3
 8012b1c:	d042      	beq.n	8012ba4 <UART_SetConfig+0xd8>
 8012b1e:	4b73      	ldr	r3, [pc, #460]	; (8012cec <UART_SetConfig+0x220>)
 8012b20:	429d      	cmp	r5, r3
 8012b22:	d061      	beq.n	8012be8 <UART_SetConfig+0x11c>
 8012b24:	4b72      	ldr	r3, [pc, #456]	; (8012cf0 <UART_SetConfig+0x224>)
 8012b26:	429d      	cmp	r5, r3
 8012b28:	d075      	beq.n	8012c16 <UART_SetConfig+0x14a>
 8012b2a:	4b72      	ldr	r3, [pc, #456]	; (8012cf4 <UART_SetConfig+0x228>)
 8012b2c:	429d      	cmp	r5, r3
 8012b2e:	d074      	beq.n	8012c1a <UART_SetConfig+0x14e>
 8012b30:	4b71      	ldr	r3, [pc, #452]	; (8012cf8 <UART_SetConfig+0x22c>)
 8012b32:	429d      	cmp	r5, r3
 8012b34:	d073      	beq.n	8012c1e <UART_SetConfig+0x152>
 8012b36:	4b71      	ldr	r3, [pc, #452]	; (8012cfc <UART_SetConfig+0x230>)
 8012b38:	429d      	cmp	r5, r3
 8012b3a:	d051      	beq.n	8012be0 <UART_SetConfig+0x114>
 8012b3c:	2310      	movs	r3, #16
 8012b3e:	e054      	b.n	8012bea <UART_SetConfig+0x11e>
 8012b40:	4b6f      	ldr	r3, [pc, #444]	; (8012d00 <UART_SetConfig+0x234>)
 8012b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b44:	2303      	movs	r3, #3
 8012b46:	4013      	ands	r3, r2
 8012b48:	2b01      	cmp	r3, #1
 8012b4a:	d009      	beq.n	8012b60 <UART_SetConfig+0x94>
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d005      	beq.n	8012b5c <UART_SetConfig+0x90>
 8012b50:	2b02      	cmp	r3, #2
 8012b52:	d007      	beq.n	8012b64 <UART_SetConfig+0x98>
 8012b54:	2b03      	cmp	r3, #3
 8012b56:	d045      	beq.n	8012be4 <UART_SetConfig+0x118>
 8012b58:	2310      	movs	r3, #16
 8012b5a:	e046      	b.n	8012bea <UART_SetConfig+0x11e>
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	e044      	b.n	8012bea <UART_SetConfig+0x11e>
 8012b60:	2304      	movs	r3, #4
 8012b62:	e042      	b.n	8012bea <UART_SetConfig+0x11e>
 8012b64:	2308      	movs	r3, #8
 8012b66:	e040      	b.n	8012bea <UART_SetConfig+0x11e>
 8012b68:	4b65      	ldr	r3, [pc, #404]	; (8012d00 <UART_SetConfig+0x234>)
 8012b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b6c:	22c0      	movs	r2, #192	; 0xc0
 8012b6e:	0292      	lsls	r2, r2, #10
 8012b70:	4013      	ands	r3, r2
 8012b72:	2280      	movs	r2, #128	; 0x80
 8012b74:	0252      	lsls	r2, r2, #9
 8012b76:	4293      	cmp	r3, r2
 8012b78:	d00e      	beq.n	8012b98 <UART_SetConfig+0xcc>
 8012b7a:	d909      	bls.n	8012b90 <UART_SetConfig+0xc4>
 8012b7c:	2280      	movs	r2, #128	; 0x80
 8012b7e:	0292      	lsls	r2, r2, #10
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d00b      	beq.n	8012b9c <UART_SetConfig+0xd0>
 8012b84:	22c0      	movs	r2, #192	; 0xc0
 8012b86:	0292      	lsls	r2, r2, #10
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d109      	bne.n	8012ba0 <UART_SetConfig+0xd4>
 8012b8c:	2302      	movs	r3, #2
 8012b8e:	e02c      	b.n	8012bea <UART_SetConfig+0x11e>
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d105      	bne.n	8012ba0 <UART_SetConfig+0xd4>
 8012b94:	2300      	movs	r3, #0
 8012b96:	e028      	b.n	8012bea <UART_SetConfig+0x11e>
 8012b98:	2304      	movs	r3, #4
 8012b9a:	e026      	b.n	8012bea <UART_SetConfig+0x11e>
 8012b9c:	2308      	movs	r3, #8
 8012b9e:	e024      	b.n	8012bea <UART_SetConfig+0x11e>
 8012ba0:	2310      	movs	r3, #16
 8012ba2:	e022      	b.n	8012bea <UART_SetConfig+0x11e>
 8012ba4:	4b56      	ldr	r3, [pc, #344]	; (8012d00 <UART_SetConfig+0x234>)
 8012ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ba8:	22c0      	movs	r2, #192	; 0xc0
 8012baa:	0312      	lsls	r2, r2, #12
 8012bac:	4013      	ands	r3, r2
 8012bae:	2280      	movs	r2, #128	; 0x80
 8012bb0:	02d2      	lsls	r2, r2, #11
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d00e      	beq.n	8012bd4 <UART_SetConfig+0x108>
 8012bb6:	d909      	bls.n	8012bcc <UART_SetConfig+0x100>
 8012bb8:	2280      	movs	r2, #128	; 0x80
 8012bba:	0312      	lsls	r2, r2, #12
 8012bbc:	4293      	cmp	r3, r2
 8012bbe:	d00b      	beq.n	8012bd8 <UART_SetConfig+0x10c>
 8012bc0:	22c0      	movs	r2, #192	; 0xc0
 8012bc2:	0312      	lsls	r2, r2, #12
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	d109      	bne.n	8012bdc <UART_SetConfig+0x110>
 8012bc8:	2302      	movs	r3, #2
 8012bca:	e00e      	b.n	8012bea <UART_SetConfig+0x11e>
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d105      	bne.n	8012bdc <UART_SetConfig+0x110>
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	e00a      	b.n	8012bea <UART_SetConfig+0x11e>
 8012bd4:	2304      	movs	r3, #4
 8012bd6:	e008      	b.n	8012bea <UART_SetConfig+0x11e>
 8012bd8:	2308      	movs	r3, #8
 8012bda:	e006      	b.n	8012bea <UART_SetConfig+0x11e>
 8012bdc:	2310      	movs	r3, #16
 8012bde:	e004      	b.n	8012bea <UART_SetConfig+0x11e>
 8012be0:	2300      	movs	r3, #0
 8012be2:	e002      	b.n	8012bea <UART_SetConfig+0x11e>
 8012be4:	2302      	movs	r3, #2
 8012be6:	e000      	b.n	8012bea <UART_SetConfig+0x11e>
 8012be8:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012bea:	2280      	movs	r2, #128	; 0x80
 8012bec:	0212      	lsls	r2, r2, #8
 8012bee:	69e1      	ldr	r1, [r4, #28]
 8012bf0:	4291      	cmp	r1, r2
 8012bf2:	d016      	beq.n	8012c22 <UART_SetConfig+0x156>
    switch (clocksource)
 8012bf4:	2b02      	cmp	r3, #2
 8012bf6:	d057      	beq.n	8012ca8 <UART_SetConfig+0x1dc>
 8012bf8:	d949      	bls.n	8012c8e <UART_SetConfig+0x1c2>
 8012bfa:	2b04      	cmp	r3, #4
 8012bfc:	d05d      	beq.n	8012cba <UART_SetConfig+0x1ee>
 8012bfe:	2b08      	cmp	r3, #8
 8012c00:	d166      	bne.n	8012cd0 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012c02:	6861      	ldr	r1, [r4, #4]
 8012c04:	2080      	movs	r0, #128	; 0x80
 8012c06:	0200      	lsls	r0, r0, #8
 8012c08:	f7ed fa98 	bl	800013c <__udivsi3>
 8012c0c:	0400      	lsls	r0, r0, #16
 8012c0e:	0c00      	lsrs	r0, r0, #16
 8012c10:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012c12:	2000      	movs	r0, #0
        break;
 8012c14:	e027      	b.n	8012c66 <UART_SetConfig+0x19a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012c16:	2300      	movs	r3, #0
 8012c18:	e7e7      	b.n	8012bea <UART_SetConfig+0x11e>
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	e7e5      	b.n	8012bea <UART_SetConfig+0x11e>
 8012c1e:	2300      	movs	r3, #0
 8012c20:	e7e3      	b.n	8012bea <UART_SetConfig+0x11e>
    switch (clocksource)
 8012c22:	2b02      	cmp	r3, #2
 8012c24:	d020      	beq.n	8012c68 <UART_SetConfig+0x19c>
 8012c26:	d90b      	bls.n	8012c40 <UART_SetConfig+0x174>
 8012c28:	2b04      	cmp	r3, #4
 8012c2a:	d024      	beq.n	8012c76 <UART_SetConfig+0x1aa>
 8012c2c:	2b08      	cmp	r3, #8
 8012c2e:	d12b      	bne.n	8012c88 <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012c30:	6861      	ldr	r1, [r4, #4]
 8012c32:	2080      	movs	r0, #128	; 0x80
 8012c34:	0240      	lsls	r0, r0, #9
 8012c36:	f7ed fa81 	bl	800013c <__udivsi3>
 8012c3a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012c3c:	2000      	movs	r0, #0
        break;
 8012c3e:	e009      	b.n	8012c54 <UART_SetConfig+0x188>
    switch (clocksource)
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d121      	bne.n	8012c88 <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012c44:	f7ff fa60 	bl	8012108 <HAL_RCC_GetPCLK1Freq>
 8012c48:	0040      	lsls	r0, r0, #1
 8012c4a:	6861      	ldr	r1, [r4, #4]
 8012c4c:	f7ed fa76 	bl	800013c <__udivsi3>
 8012c50:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012c52:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8012c54:	220f      	movs	r2, #15
 8012c56:	0019      	movs	r1, r3
 8012c58:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8012c5a:	105b      	asrs	r3, r3, #1
 8012c5c:	3a08      	subs	r2, #8
 8012c5e:	4013      	ands	r3, r2
 8012c60:	430b      	orrs	r3, r1
    huart->Instance->BRR = brrtemp;
 8012c62:	6822      	ldr	r2, [r4, #0]
 8012c64:	60d3      	str	r3, [r2, #12]
}
 8012c66:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012c68:	6861      	ldr	r1, [r4, #4]
 8012c6a:	4826      	ldr	r0, [pc, #152]	; (8012d04 <UART_SetConfig+0x238>)
 8012c6c:	f7ed fa66 	bl	800013c <__udivsi3>
 8012c70:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012c72:	2000      	movs	r0, #0
        break;
 8012c74:	e7ee      	b.n	8012c54 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012c76:	f7ff f9e9 	bl	801204c <HAL_RCC_GetSysClockFreq>
 8012c7a:	0040      	lsls	r0, r0, #1
 8012c7c:	6861      	ldr	r1, [r4, #4]
 8012c7e:	f7ed fa5d 	bl	800013c <__udivsi3>
 8012c82:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012c84:	2000      	movs	r0, #0
        break;
 8012c86:	e7e5      	b.n	8012c54 <UART_SetConfig+0x188>
        ret = HAL_ERROR;
 8012c88:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	e7e2      	b.n	8012c54 <UART_SetConfig+0x188>
    switch (clocksource)
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d11e      	bne.n	8012cd0 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012c92:	f7ff fa39 	bl	8012108 <HAL_RCC_GetPCLK1Freq>
 8012c96:	6861      	ldr	r1, [r4, #4]
 8012c98:	f7ed fa50 	bl	800013c <__udivsi3>
 8012c9c:	6823      	ldr	r3, [r4, #0]
 8012c9e:	0400      	lsls	r0, r0, #16
 8012ca0:	0c00      	lsrs	r0, r0, #16
 8012ca2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ca4:	2000      	movs	r0, #0
        break;
 8012ca6:	e7de      	b.n	8012c66 <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012ca8:	6861      	ldr	r1, [r4, #4]
 8012caa:	4817      	ldr	r0, [pc, #92]	; (8012d08 <UART_SetConfig+0x23c>)
 8012cac:	f7ed fa46 	bl	800013c <__udivsi3>
 8012cb0:	0400      	lsls	r0, r0, #16
 8012cb2:	0c00      	lsrs	r0, r0, #16
 8012cb4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012cb6:	2000      	movs	r0, #0
        break;
 8012cb8:	e7d5      	b.n	8012c66 <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012cba:	f7ff f9c7 	bl	801204c <HAL_RCC_GetSysClockFreq>
 8012cbe:	6861      	ldr	r1, [r4, #4]
 8012cc0:	f7ed fa3c 	bl	800013c <__udivsi3>
 8012cc4:	6823      	ldr	r3, [r4, #0]
 8012cc6:	0400      	lsls	r0, r0, #16
 8012cc8:	0c00      	lsrs	r0, r0, #16
 8012cca:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ccc:	2000      	movs	r0, #0
        break;
 8012cce:	e7ca      	b.n	8012c66 <UART_SetConfig+0x19a>
        ret = HAL_ERROR;
 8012cd0:	2001      	movs	r0, #1
 8012cd2:	e7c8      	b.n	8012c66 <UART_SetConfig+0x19a>
 8012cd4:	efff69f3 	.word	0xefff69f3
 8012cd8:	ffffcfff 	.word	0xffffcfff
 8012cdc:	fffff4ff 	.word	0xfffff4ff
 8012ce0:	40013800 	.word	0x40013800
 8012ce4:	40004400 	.word	0x40004400
 8012ce8:	40004800 	.word	0x40004800
 8012cec:	40004c00 	.word	0x40004c00
 8012cf0:	40005000 	.word	0x40005000
 8012cf4:	40011400 	.word	0x40011400
 8012cf8:	40011800 	.word	0x40011800
 8012cfc:	40011c00 	.word	0x40011c00
 8012d00:	40021000 	.word	0x40021000
 8012d04:	00f42400 	.word	0x00f42400
 8012d08:	007a1200 	.word	0x007a1200

08012d0c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012d0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012d0e:	07db      	lsls	r3, r3, #31
 8012d10:	d506      	bpl.n	8012d20 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012d12:	6802      	ldr	r2, [r0, #0]
 8012d14:	6853      	ldr	r3, [r2, #4]
 8012d16:	492c      	ldr	r1, [pc, #176]	; (8012dc8 <UART_AdvFeatureConfig+0xbc>)
 8012d18:	400b      	ands	r3, r1
 8012d1a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012d1c:	430b      	orrs	r3, r1
 8012d1e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012d20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012d22:	079b      	lsls	r3, r3, #30
 8012d24:	d506      	bpl.n	8012d34 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012d26:	6802      	ldr	r2, [r0, #0]
 8012d28:	6853      	ldr	r3, [r2, #4]
 8012d2a:	4928      	ldr	r1, [pc, #160]	; (8012dcc <UART_AdvFeatureConfig+0xc0>)
 8012d2c:	400b      	ands	r3, r1
 8012d2e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8012d30:	430b      	orrs	r3, r1
 8012d32:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012d34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012d36:	075b      	lsls	r3, r3, #29
 8012d38:	d506      	bpl.n	8012d48 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012d3a:	6802      	ldr	r2, [r0, #0]
 8012d3c:	6853      	ldr	r3, [r2, #4]
 8012d3e:	4924      	ldr	r1, [pc, #144]	; (8012dd0 <UART_AdvFeatureConfig+0xc4>)
 8012d40:	400b      	ands	r3, r1
 8012d42:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012d44:	430b      	orrs	r3, r1
 8012d46:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012d48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012d4a:	071b      	lsls	r3, r3, #28
 8012d4c:	d506      	bpl.n	8012d5c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012d4e:	6802      	ldr	r2, [r0, #0]
 8012d50:	6853      	ldr	r3, [r2, #4]
 8012d52:	4920      	ldr	r1, [pc, #128]	; (8012dd4 <UART_AdvFeatureConfig+0xc8>)
 8012d54:	400b      	ands	r3, r1
 8012d56:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012d58:	430b      	orrs	r3, r1
 8012d5a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012d5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012d5e:	06db      	lsls	r3, r3, #27
 8012d60:	d506      	bpl.n	8012d70 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012d62:	6802      	ldr	r2, [r0, #0]
 8012d64:	6893      	ldr	r3, [r2, #8]
 8012d66:	491c      	ldr	r1, [pc, #112]	; (8012dd8 <UART_AdvFeatureConfig+0xcc>)
 8012d68:	400b      	ands	r3, r1
 8012d6a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012d6c:	430b      	orrs	r3, r1
 8012d6e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012d70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012d72:	069b      	lsls	r3, r3, #26
 8012d74:	d506      	bpl.n	8012d84 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012d76:	6802      	ldr	r2, [r0, #0]
 8012d78:	6893      	ldr	r3, [r2, #8]
 8012d7a:	4918      	ldr	r1, [pc, #96]	; (8012ddc <UART_AdvFeatureConfig+0xd0>)
 8012d7c:	400b      	ands	r3, r1
 8012d7e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012d80:	430b      	orrs	r3, r1
 8012d82:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012d84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012d86:	065b      	lsls	r3, r3, #25
 8012d88:	d50b      	bpl.n	8012da2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012d8a:	6802      	ldr	r2, [r0, #0]
 8012d8c:	6853      	ldr	r3, [r2, #4]
 8012d8e:	4914      	ldr	r1, [pc, #80]	; (8012de0 <UART_AdvFeatureConfig+0xd4>)
 8012d90:	400b      	ands	r3, r1
 8012d92:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012d94:	430b      	orrs	r3, r1
 8012d96:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012d98:	2380      	movs	r3, #128	; 0x80
 8012d9a:	035b      	lsls	r3, r3, #13
 8012d9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d00a      	beq.n	8012db8 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012da2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012da4:	061b      	lsls	r3, r3, #24
 8012da6:	d506      	bpl.n	8012db6 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012da8:	6802      	ldr	r2, [r0, #0]
 8012daa:	6853      	ldr	r3, [r2, #4]
 8012dac:	490d      	ldr	r1, [pc, #52]	; (8012de4 <UART_AdvFeatureConfig+0xd8>)
 8012dae:	400b      	ands	r3, r1
 8012db0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012db2:	430b      	orrs	r3, r1
 8012db4:	6053      	str	r3, [r2, #4]
}
 8012db6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012db8:	6802      	ldr	r2, [r0, #0]
 8012dba:	6853      	ldr	r3, [r2, #4]
 8012dbc:	490a      	ldr	r1, [pc, #40]	; (8012de8 <UART_AdvFeatureConfig+0xdc>)
 8012dbe:	400b      	ands	r3, r1
 8012dc0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012dc2:	430b      	orrs	r3, r1
 8012dc4:	6053      	str	r3, [r2, #4]
 8012dc6:	e7ec      	b.n	8012da2 <UART_AdvFeatureConfig+0x96>
 8012dc8:	fffdffff 	.word	0xfffdffff
 8012dcc:	fffeffff 	.word	0xfffeffff
 8012dd0:	fffbffff 	.word	0xfffbffff
 8012dd4:	ffff7fff 	.word	0xffff7fff
 8012dd8:	ffffefff 	.word	0xffffefff
 8012ddc:	ffffdfff 	.word	0xffffdfff
 8012de0:	ffefffff 	.word	0xffefffff
 8012de4:	fff7ffff 	.word	0xfff7ffff
 8012de8:	ff9fffff 	.word	0xff9fffff

08012dec <UART_WaitOnFlagUntilTimeout>:
{
 8012dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dee:	46c6      	mov	lr, r8
 8012df0:	b500      	push	{lr}
 8012df2:	0006      	movs	r6, r0
 8012df4:	000c      	movs	r4, r1
 8012df6:	0017      	movs	r7, r2
 8012df8:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8012dfa:	f7fd f9ff 	bl	80101fc <HAL_GetTick>
 8012dfe:	4680      	mov	r8, r0
  if(Status == RESET)
 8012e00:	2f00      	cmp	r7, #0
 8012e02:	d029      	beq.n	8012e58 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012e04:	6833      	ldr	r3, [r6, #0]
 8012e06:	69db      	ldr	r3, [r3, #28]
 8012e08:	4023      	ands	r3, r4
 8012e0a:	42a3      	cmp	r3, r4
 8012e0c:	d152      	bne.n	8012eb4 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8012e0e:	1c6b      	adds	r3, r5, #1
 8012e10:	d0f8      	beq.n	8012e04 <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012e12:	2d00      	cmp	r5, #0
 8012e14:	d005      	beq.n	8012e22 <UART_WaitOnFlagUntilTimeout+0x36>
 8012e16:	f7fd f9f1 	bl	80101fc <HAL_GetTick>
 8012e1a:	4643      	mov	r3, r8
 8012e1c:	1ac0      	subs	r0, r0, r3
 8012e1e:	42a8      	cmp	r0, r5
 8012e20:	d9f0      	bls.n	8012e04 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012e22:	6832      	ldr	r2, [r6, #0]
 8012e24:	6813      	ldr	r3, [r2, #0]
 8012e26:	2180      	movs	r1, #128	; 0x80
 8012e28:	438b      	bics	r3, r1
 8012e2a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012e2c:	6832      	ldr	r2, [r6, #0]
 8012e2e:	6813      	ldr	r3, [r2, #0]
 8012e30:	3960      	subs	r1, #96	; 0x60
 8012e32:	438b      	bics	r3, r1
 8012e34:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012e36:	6832      	ldr	r2, [r6, #0]
 8012e38:	6813      	ldr	r3, [r2, #0]
 8012e3a:	491f      	ldr	r1, [pc, #124]	; (8012eb8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012e3c:	400b      	ands	r3, r1
 8012e3e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012e40:	6831      	ldr	r1, [r6, #0]
 8012e42:	688b      	ldr	r3, [r1, #8]
 8012e44:	2201      	movs	r2, #1
 8012e46:	4393      	bics	r3, r2
 8012e48:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012e4a:	2369      	movs	r3, #105	; 0x69
 8012e4c:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012e4e:	3b01      	subs	r3, #1
 8012e50:	2200      	movs	r2, #0
 8012e52:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012e54:	2003      	movs	r0, #3
 8012e56:	e02a      	b.n	8012eae <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012e58:	6833      	ldr	r3, [r6, #0]
 8012e5a:	69db      	ldr	r3, [r3, #28]
 8012e5c:	4023      	ands	r3, r4
 8012e5e:	42a3      	cmp	r3, r4
 8012e60:	d024      	beq.n	8012eac <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8012e62:	1c6b      	adds	r3, r5, #1
 8012e64:	d0f8      	beq.n	8012e58 <UART_WaitOnFlagUntilTimeout+0x6c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012e66:	2d00      	cmp	r5, #0
 8012e68:	d005      	beq.n	8012e76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8012e6a:	f7fd f9c7 	bl	80101fc <HAL_GetTick>
 8012e6e:	4643      	mov	r3, r8
 8012e70:	1ac0      	subs	r0, r0, r3
 8012e72:	42a8      	cmp	r0, r5
 8012e74:	d9f0      	bls.n	8012e58 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012e76:	6832      	ldr	r2, [r6, #0]
 8012e78:	6813      	ldr	r3, [r2, #0]
 8012e7a:	2180      	movs	r1, #128	; 0x80
 8012e7c:	438b      	bics	r3, r1
 8012e7e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012e80:	6832      	ldr	r2, [r6, #0]
 8012e82:	6813      	ldr	r3, [r2, #0]
 8012e84:	3960      	subs	r1, #96	; 0x60
 8012e86:	438b      	bics	r3, r1
 8012e88:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012e8a:	6832      	ldr	r2, [r6, #0]
 8012e8c:	6813      	ldr	r3, [r2, #0]
 8012e8e:	490a      	ldr	r1, [pc, #40]	; (8012eb8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012e90:	400b      	ands	r3, r1
 8012e92:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012e94:	6831      	ldr	r1, [r6, #0]
 8012e96:	688b      	ldr	r3, [r1, #8]
 8012e98:	2201      	movs	r2, #1
 8012e9a:	4393      	bics	r3, r2
 8012e9c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012e9e:	2369      	movs	r3, #105	; 0x69
 8012ea0:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012ea2:	3b01      	subs	r3, #1
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012ea8:	2003      	movs	r0, #3
 8012eaa:	e000      	b.n	8012eae <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8012eac:	2000      	movs	r0, #0
}
 8012eae:	bc04      	pop	{r2}
 8012eb0:	4690      	mov	r8, r2
 8012eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8012eb4:	2000      	movs	r0, #0
 8012eb6:	e7fa      	b.n	8012eae <UART_WaitOnFlagUntilTimeout+0xc2>
 8012eb8:	fffffeff 	.word	0xfffffeff

08012ebc <HAL_UART_Transmit>:
{
 8012ebc:	b570      	push	{r4, r5, r6, lr}
 8012ebe:	0004      	movs	r4, r0
 8012ec0:	000e      	movs	r6, r1
 8012ec2:	001d      	movs	r5, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012ec4:	2369      	movs	r3, #105	; 0x69
 8012ec6:	5cc3      	ldrb	r3, [r0, r3]
 8012ec8:	2b01      	cmp	r3, #1
 8012eca:	d003      	beq.n	8012ed4 <HAL_UART_Transmit+0x18>
 8012ecc:	2369      	movs	r3, #105	; 0x69
 8012ece:	5cc3      	ldrb	r3, [r0, r3]
 8012ed0:	2b22      	cmp	r3, #34	; 0x22
 8012ed2:	d155      	bne.n	8012f80 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8012ed4:	2e00      	cmp	r6, #0
 8012ed6:	d055      	beq.n	8012f84 <HAL_UART_Transmit+0xc8>
 8012ed8:	2a00      	cmp	r2, #0
 8012eda:	d055      	beq.n	8012f88 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8012edc:	2368      	movs	r3, #104	; 0x68
 8012ede:	5ce3      	ldrb	r3, [r4, r3]
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d053      	beq.n	8012f8c <HAL_UART_Transmit+0xd0>
 8012ee4:	2368      	movs	r3, #104	; 0x68
 8012ee6:	2101      	movs	r1, #1
 8012ee8:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012eea:	2300      	movs	r3, #0
 8012eec:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012eee:	3369      	adds	r3, #105	; 0x69
 8012ef0:	5ce3      	ldrb	r3, [r4, r3]
 8012ef2:	2b22      	cmp	r3, #34	; 0x22
 8012ef4:	d007      	beq.n	8012f06 <HAL_UART_Transmit+0x4a>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012ef6:	2369      	movs	r3, #105	; 0x69
 8012ef8:	2112      	movs	r1, #18
 8012efa:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8012efc:	2350      	movs	r3, #80	; 0x50
 8012efe:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8012f00:	3302      	adds	r3, #2
 8012f02:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0)
 8012f04:	e007      	b.n	8012f16 <HAL_UART_Transmit+0x5a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012f06:	3347      	adds	r3, #71	; 0x47
 8012f08:	3131      	adds	r1, #49	; 0x31
 8012f0a:	54e1      	strb	r1, [r4, r3]
 8012f0c:	e7f6      	b.n	8012efc <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8012f0e:	7833      	ldrb	r3, [r6, #0]
 8012f10:	6822      	ldr	r2, [r4, #0]
 8012f12:	8513      	strh	r3, [r2, #40]	; 0x28
 8012f14:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8012f16:	2352      	movs	r3, #82	; 0x52
 8012f18:	5ae3      	ldrh	r3, [r4, r3]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d019      	beq.n	8012f52 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8012f1e:	3b01      	subs	r3, #1
 8012f20:	2252      	movs	r2, #82	; 0x52
 8012f22:	52a3      	strh	r3, [r4, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8012f24:	002b      	movs	r3, r5
 8012f26:	2200      	movs	r2, #0
 8012f28:	2180      	movs	r1, #128	; 0x80
 8012f2a:	0020      	movs	r0, r4
 8012f2c:	f7ff ff5e 	bl	8012dec <UART_WaitOnFlagUntilTimeout>
 8012f30:	2800      	cmp	r0, #0
 8012f32:	d12d      	bne.n	8012f90 <HAL_UART_Transmit+0xd4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012f34:	2380      	movs	r3, #128	; 0x80
 8012f36:	015b      	lsls	r3, r3, #5
 8012f38:	68a2      	ldr	r2, [r4, #8]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d1e7      	bne.n	8012f0e <HAL_UART_Transmit+0x52>
 8012f3e:	6923      	ldr	r3, [r4, #16]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d1e4      	bne.n	8012f0e <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012f44:	8833      	ldrh	r3, [r6, #0]
 8012f46:	05db      	lsls	r3, r3, #23
 8012f48:	0ddb      	lsrs	r3, r3, #23
 8012f4a:	6822      	ldr	r2, [r4, #0]
 8012f4c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8012f4e:	3602      	adds	r6, #2
 8012f50:	e7e1      	b.n	8012f16 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012f52:	002b      	movs	r3, r5
 8012f54:	2200      	movs	r2, #0
 8012f56:	2140      	movs	r1, #64	; 0x40
 8012f58:	0020      	movs	r0, r4
 8012f5a:	f7ff ff47 	bl	8012dec <UART_WaitOnFlagUntilTimeout>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d118      	bne.n	8012f94 <HAL_UART_Transmit+0xd8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012f62:	2369      	movs	r3, #105	; 0x69
 8012f64:	5ce3      	ldrb	r3, [r4, r3]
 8012f66:	2b32      	cmp	r3, #50	; 0x32
 8012f68:	d006      	beq.n	8012f78 <HAL_UART_Transmit+0xbc>
      huart->State = HAL_UART_STATE_READY;
 8012f6a:	2369      	movs	r3, #105	; 0x69
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012f70:	2368      	movs	r3, #104	; 0x68
 8012f72:	2200      	movs	r2, #0
 8012f74:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012f76:	e004      	b.n	8012f82 <HAL_UART_Transmit+0xc6>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012f78:	3337      	adds	r3, #55	; 0x37
 8012f7a:	2222      	movs	r2, #34	; 0x22
 8012f7c:	54e2      	strb	r2, [r4, r3]
 8012f7e:	e7f7      	b.n	8012f70 <HAL_UART_Transmit+0xb4>
    return HAL_BUSY;
 8012f80:	2002      	movs	r0, #2
}
 8012f82:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 8012f84:	2001      	movs	r0, #1
 8012f86:	e7fc      	b.n	8012f82 <HAL_UART_Transmit+0xc6>
 8012f88:	2001      	movs	r0, #1
 8012f8a:	e7fa      	b.n	8012f82 <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 8012f8c:	2002      	movs	r0, #2
 8012f8e:	e7f8      	b.n	8012f82 <HAL_UART_Transmit+0xc6>
        return HAL_TIMEOUT;
 8012f90:	2003      	movs	r0, #3
 8012f92:	e7f6      	b.n	8012f82 <HAL_UART_Transmit+0xc6>
      return HAL_TIMEOUT;
 8012f94:	2003      	movs	r0, #3
 8012f96:	e7f4      	b.n	8012f82 <HAL_UART_Transmit+0xc6>

08012f98 <UART_CheckIdleState>:
{
 8012f98:	b510      	push	{r4, lr}
 8012f9a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012fa0:	6803      	ldr	r3, [r0, #0]
 8012fa2:	4a18      	ldr	r2, [pc, #96]	; (8013004 <UART_CheckIdleState+0x6c>)
 8012fa4:	4293      	cmp	r3, r2
 8012fa6:	d005      	beq.n	8012fb4 <UART_CheckIdleState+0x1c>
 8012fa8:	4a17      	ldr	r2, [pc, #92]	; (8013008 <UART_CheckIdleState+0x70>)
 8012faa:	4293      	cmp	r3, r2
 8012fac:	d002      	beq.n	8012fb4 <UART_CheckIdleState+0x1c>
 8012fae:	4a17      	ldr	r2, [pc, #92]	; (801300c <UART_CheckIdleState+0x74>)
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d106      	bne.n	8012fc2 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	071b      	lsls	r3, r3, #28
 8012fb8:	d40b      	bmi.n	8012fd2 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012fba:	6823      	ldr	r3, [r4, #0]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	075b      	lsls	r3, r3, #29
 8012fc0:	d413      	bmi.n	8012fea <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8012fc2:	2369      	movs	r3, #105	; 0x69
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012fc8:	3b01      	subs	r3, #1
 8012fca:	2200      	movs	r2, #0
 8012fcc:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8012fce:	2000      	movs	r0, #0
}
 8012fd0:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012fd2:	23fa      	movs	r3, #250	; 0xfa
 8012fd4:	2180      	movs	r1, #128	; 0x80
 8012fd6:	009b      	lsls	r3, r3, #2
 8012fd8:	2200      	movs	r2, #0
 8012fda:	0389      	lsls	r1, r1, #14
 8012fdc:	0020      	movs	r0, r4
 8012fde:	f7ff ff05 	bl	8012dec <UART_WaitOnFlagUntilTimeout>
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	d0e9      	beq.n	8012fba <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8012fe6:	2003      	movs	r0, #3
 8012fe8:	e7f2      	b.n	8012fd0 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012fea:	23fa      	movs	r3, #250	; 0xfa
 8012fec:	2180      	movs	r1, #128	; 0x80
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	03c9      	lsls	r1, r1, #15
 8012ff4:	0020      	movs	r0, r4
 8012ff6:	f7ff fef9 	bl	8012dec <UART_WaitOnFlagUntilTimeout>
 8012ffa:	2800      	cmp	r0, #0
 8012ffc:	d0e1      	beq.n	8012fc2 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8012ffe:	2003      	movs	r0, #3
 8013000:	e7e6      	b.n	8012fd0 <UART_CheckIdleState+0x38>
 8013002:	46c0      	nop			; (mov r8, r8)
 8013004:	40013800 	.word	0x40013800
 8013008:	40004400 	.word	0x40004400
 801300c:	40004800 	.word	0x40004800

08013010 <HAL_UART_Init>:
{
 8013010:	b510      	push	{r4, lr}
 8013012:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013014:	d030      	beq.n	8013078 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8013016:	2369      	movs	r3, #105	; 0x69
 8013018:	5cc3      	ldrb	r3, [r0, r3]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d022      	beq.n	8013064 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 801301e:	2369      	movs	r3, #105	; 0x69
 8013020:	2202      	movs	r2, #2
 8013022:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013024:	6822      	ldr	r2, [r4, #0]
 8013026:	6813      	ldr	r3, [r2, #0]
 8013028:	2101      	movs	r1, #1
 801302a:	438b      	bics	r3, r1
 801302c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801302e:	0020      	movs	r0, r4
 8013030:	f7ff fd4c 	bl	8012acc <UART_SetConfig>
 8013034:	2801      	cmp	r0, #1
 8013036:	d014      	beq.n	8013062 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801303a:	2b00      	cmp	r3, #0
 801303c:	d118      	bne.n	8013070 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801303e:	6822      	ldr	r2, [r4, #0]
 8013040:	6853      	ldr	r3, [r2, #4]
 8013042:	490e      	ldr	r1, [pc, #56]	; (801307c <HAL_UART_Init+0x6c>)
 8013044:	400b      	ands	r3, r1
 8013046:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013048:	6822      	ldr	r2, [r4, #0]
 801304a:	6893      	ldr	r3, [r2, #8]
 801304c:	212a      	movs	r1, #42	; 0x2a
 801304e:	438b      	bics	r3, r1
 8013050:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013052:	6822      	ldr	r2, [r4, #0]
 8013054:	6813      	ldr	r3, [r2, #0]
 8013056:	3929      	subs	r1, #41	; 0x29
 8013058:	430b      	orrs	r3, r1
 801305a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801305c:	0020      	movs	r0, r4
 801305e:	f7ff ff9b 	bl	8012f98 <UART_CheckIdleState>
}
 8013062:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013064:	3368      	adds	r3, #104	; 0x68
 8013066:	2200      	movs	r2, #0
 8013068:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801306a:	f7fa fdf1 	bl	800dc50 <HAL_UART_MspInit>
 801306e:	e7d6      	b.n	801301e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013070:	0020      	movs	r0, r4
 8013072:	f7ff fe4b 	bl	8012d0c <UART_AdvFeatureConfig>
 8013076:	e7e2      	b.n	801303e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013078:	2001      	movs	r0, #1
 801307a:	e7f2      	b.n	8013062 <HAL_UART_Init+0x52>
 801307c:	ffffb7ff 	.word	0xffffb7ff

08013080 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013080:	2369      	movs	r3, #105	; 0x69
 8013082:	5cc3      	ldrb	r3, [r0, r3]
 8013084:	2b12      	cmp	r3, #18
 8013086:	d003      	beq.n	8013090 <UART_Transmit_IT+0x10>
 8013088:	2369      	movs	r3, #105	; 0x69
 801308a:	5cc3      	ldrb	r3, [r0, r3]
 801308c:	2b32      	cmp	r3, #50	; 0x32
 801308e:	d12d      	bne.n	80130ec <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8013090:	2352      	movs	r3, #82	; 0x52
 8013092:	5ac3      	ldrh	r3, [r0, r3]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d010      	beq.n	80130ba <UART_Transmit_IT+0x3a>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013098:	2380      	movs	r3, #128	; 0x80
 801309a:	015b      	lsls	r3, r3, #5
 801309c:	6882      	ldr	r2, [r0, #8]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d017      	beq.n	80130d2 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80130a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80130a4:	1c5a      	adds	r2, r3, #1
 80130a6:	64c2      	str	r2, [r0, #76]	; 0x4c
 80130a8:	781b      	ldrb	r3, [r3, #0]
 80130aa:	6802      	ldr	r2, [r0, #0]
 80130ac:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 80130ae:	2252      	movs	r2, #82	; 0x52
 80130b0:	5a83      	ldrh	r3, [r0, r2]
 80130b2:	3b01      	subs	r3, #1
 80130b4:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 80130b6:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80130b8:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80130ba:	6802      	ldr	r2, [r0, #0]
 80130bc:	6813      	ldr	r3, [r2, #0]
 80130be:	2180      	movs	r1, #128	; 0x80
 80130c0:	438b      	bics	r3, r1
 80130c2:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80130c4:	6802      	ldr	r2, [r0, #0]
 80130c6:	6813      	ldr	r3, [r2, #0]
 80130c8:	3940      	subs	r1, #64	; 0x40
 80130ca:	430b      	orrs	r3, r1
 80130cc:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80130ce:	2000      	movs	r0, #0
 80130d0:	e7f2      	b.n	80130b8 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80130d2:	6903      	ldr	r3, [r0, #16]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d1e4      	bne.n	80130a2 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80130d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80130da:	881b      	ldrh	r3, [r3, #0]
 80130dc:	05db      	lsls	r3, r3, #23
 80130de:	0ddb      	lsrs	r3, r3, #23
 80130e0:	6802      	ldr	r2, [r0, #0]
 80130e2:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80130e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80130e6:	3302      	adds	r3, #2
 80130e8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80130ea:	e7e0      	b.n	80130ae <UART_Transmit_IT+0x2e>
    return HAL_BUSY;
 80130ec:	2002      	movs	r0, #2
 80130ee:	e7e3      	b.n	80130b8 <UART_Transmit_IT+0x38>

080130f0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80130f0:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80130f2:	6802      	ldr	r2, [r0, #0]
 80130f4:	6813      	ldr	r3, [r2, #0]
 80130f6:	2140      	movs	r1, #64	; 0x40
 80130f8:	438b      	bics	r3, r1
 80130fa:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80130fc:	2369      	movs	r3, #105	; 0x69
 80130fe:	5cc3      	ldrb	r3, [r0, r3]
 8013100:	2b32      	cmp	r3, #50	; 0x32
 8013102:	d00a      	beq.n	801311a <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013104:	6801      	ldr	r1, [r0, #0]
 8013106:	688b      	ldr	r3, [r1, #8]
 8013108:	2201      	movs	r2, #1
 801310a:	4393      	bics	r3, r2
 801310c:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 801310e:	2369      	movs	r3, #105	; 0x69
 8013110:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8013112:	f7fa fad1 	bl	800d6b8 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8013116:	2000      	movs	r0, #0
 8013118:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 801311a:	3337      	adds	r3, #55	; 0x37
 801311c:	2222      	movs	r2, #34	; 0x22
 801311e:	54c2      	strb	r2, [r0, r3]
 8013120:	e7f7      	b.n	8013112 <UART_EndTransmit_IT+0x22>
	...

08013124 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013124:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8013126:	235c      	movs	r3, #92	; 0x5c
 8013128:	5ac3      	ldrh	r3, [r0, r3]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801312a:	2269      	movs	r2, #105	; 0x69
 801312c:	5c82      	ldrb	r2, [r0, r2]
 801312e:	2a22      	cmp	r2, #34	; 0x22
 8013130:	d003      	beq.n	801313a <UART_Receive_IT+0x16>
 8013132:	2269      	movs	r2, #105	; 0x69
 8013134:	5c82      	ldrb	r2, [r0, r2]
 8013136:	2a32      	cmp	r2, #50	; 0x32
 8013138:	d13c      	bne.n	80131b4 <UART_Receive_IT+0x90>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801313a:	2280      	movs	r2, #128	; 0x80
 801313c:	0152      	lsls	r2, r2, #5
 801313e:	6881      	ldr	r1, [r0, #8]
 8013140:	4291      	cmp	r1, r2
 8013142:	d027      	beq.n	8013194 <UART_Receive_IT+0x70>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013144:	6802      	ldr	r2, [r0, #0]
 8013146:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013148:	b2db      	uxtb	r3, r3
 801314a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801314c:	1c4c      	adds	r4, r1, #1
 801314e:	6544      	str	r4, [r0, #84]	; 0x54
 8013150:	4013      	ands	r3, r2
 8013152:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8013154:	225a      	movs	r2, #90	; 0x5a
 8013156:	5a83      	ldrh	r3, [r0, r2]
 8013158:	3b01      	subs	r3, #1
 801315a:	b29b      	uxth	r3, r3
 801315c:	5283      	strh	r3, [r0, r2]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d12a      	bne.n	80131b8 <UART_Receive_IT+0x94>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013162:	6802      	ldr	r2, [r0, #0]
 8013164:	6813      	ldr	r3, [r2, #0]
 8013166:	2120      	movs	r1, #32
 8013168:	438b      	bics	r3, r1
 801316a:	6013      	str	r3, [r2, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801316c:	2369      	movs	r3, #105	; 0x69
 801316e:	5cc3      	ldrb	r3, [r0, r3]
 8013170:	2b32      	cmp	r3, #50	; 0x32
 8013172:	d01b      	beq.n	80131ac <UART_Receive_IT+0x88>
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013174:	6802      	ldr	r2, [r0, #0]
 8013176:	6813      	ldr	r3, [r2, #0]
 8013178:	4910      	ldr	r1, [pc, #64]	; (80131bc <UART_Receive_IT+0x98>)
 801317a:	400b      	ands	r3, r1
 801317c:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801317e:	6801      	ldr	r1, [r0, #0]
 8013180:	688b      	ldr	r3, [r1, #8]
 8013182:	2201      	movs	r2, #1
 8013184:	4393      	bics	r3, r2
 8013186:	608b      	str	r3, [r1, #8]

        huart->State = HAL_UART_STATE_READY;
 8013188:	2369      	movs	r3, #105	; 0x69
 801318a:	54c2      	strb	r2, [r0, r3]
      }

      HAL_UART_RxCpltCallback(huart);
 801318c:	f7fa fad0 	bl	800d730 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8013190:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013192:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013194:	6902      	ldr	r2, [r0, #16]
 8013196:	2a00      	cmp	r2, #0
 8013198:	d1d4      	bne.n	8013144 <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801319a:	6802      	ldr	r2, [r0, #0]
 801319c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 801319e:	4013      	ands	r3, r2
 80131a0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80131a2:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 80131a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80131a6:	3302      	adds	r3, #2
 80131a8:	6543      	str	r3, [r0, #84]	; 0x54
 80131aa:	e7d3      	b.n	8013154 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80131ac:	3337      	adds	r3, #55	; 0x37
 80131ae:	2212      	movs	r2, #18
 80131b0:	54c2      	strb	r2, [r0, r3]
 80131b2:	e7eb      	b.n	801318c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80131b4:	2002      	movs	r0, #2
 80131b6:	e7ec      	b.n	8013192 <UART_Receive_IT+0x6e>
    return HAL_OK;
 80131b8:	2000      	movs	r0, #0
 80131ba:	e7ea      	b.n	8013192 <UART_Receive_IT+0x6e>
 80131bc:	fffffeff 	.word	0xfffffeff

080131c0 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80131c0:	4770      	bx	lr

080131c2 <HAL_UART_IRQHandler>:
{
 80131c2:	b510      	push	{r4, lr}
 80131c4:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80131c6:	6803      	ldr	r3, [r0, #0]
 80131c8:	69da      	ldr	r2, [r3, #28]
 80131ca:	07d2      	lsls	r2, r2, #31
 80131cc:	d509      	bpl.n	80131e2 <HAL_UART_IRQHandler+0x20>
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	05d2      	lsls	r2, r2, #23
 80131d2:	d506      	bpl.n	80131e2 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80131d4:	2201      	movs	r2, #1
 80131d6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80131d8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80131da:	4313      	orrs	r3, r2
 80131dc:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80131de:	2369      	movs	r3, #105	; 0x69
 80131e0:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80131e2:	6823      	ldr	r3, [r4, #0]
 80131e4:	69da      	ldr	r2, [r3, #28]
 80131e6:	0792      	lsls	r2, r2, #30
 80131e8:	d50b      	bpl.n	8013202 <HAL_UART_IRQHandler+0x40>
 80131ea:	689a      	ldr	r2, [r3, #8]
 80131ec:	07d2      	lsls	r2, r2, #31
 80131ee:	d508      	bpl.n	8013202 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80131f0:	2202      	movs	r2, #2
 80131f2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80131f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80131f6:	3202      	adds	r2, #2
 80131f8:	4313      	orrs	r3, r2
 80131fa:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80131fc:	2369      	movs	r3, #105	; 0x69
 80131fe:	3a03      	subs	r2, #3
 8013200:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013202:	6823      	ldr	r3, [r4, #0]
 8013204:	69da      	ldr	r2, [r3, #28]
 8013206:	0752      	lsls	r2, r2, #29
 8013208:	d50b      	bpl.n	8013222 <HAL_UART_IRQHandler+0x60>
 801320a:	689a      	ldr	r2, [r3, #8]
 801320c:	07d2      	lsls	r2, r2, #31
 801320e:	d508      	bpl.n	8013222 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013210:	2204      	movs	r2, #4
 8013212:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013214:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013216:	3a02      	subs	r2, #2
 8013218:	4313      	orrs	r3, r2
 801321a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801321c:	2369      	movs	r3, #105	; 0x69
 801321e:	3a01      	subs	r2, #1
 8013220:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013222:	6823      	ldr	r3, [r4, #0]
 8013224:	69da      	ldr	r2, [r3, #28]
 8013226:	0712      	lsls	r2, r2, #28
 8013228:	d50a      	bpl.n	8013240 <HAL_UART_IRQHandler+0x7e>
 801322a:	689a      	ldr	r2, [r3, #8]
 801322c:	07d2      	lsls	r2, r2, #31
 801322e:	d507      	bpl.n	8013240 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013230:	2208      	movs	r2, #8
 8013232:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013234:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013236:	4313      	orrs	r3, r2
 8013238:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801323a:	2369      	movs	r3, #105	; 0x69
 801323c:	3a07      	subs	r2, #7
 801323e:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013240:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013242:	2b00      	cmp	r3, #0
 8013244:	d11c      	bne.n	8013280 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013246:	6823      	ldr	r3, [r4, #0]
 8013248:	69da      	ldr	r2, [r3, #28]
 801324a:	02d2      	lsls	r2, r2, #11
 801324c:	d502      	bpl.n	8013254 <HAL_UART_IRQHandler+0x92>
 801324e:	689a      	ldr	r2, [r3, #8]
 8013250:	0252      	lsls	r2, r2, #9
 8013252:	d419      	bmi.n	8013288 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013254:	6823      	ldr	r3, [r4, #0]
 8013256:	69da      	ldr	r2, [r3, #28]
 8013258:	0692      	lsls	r2, r2, #26
 801325a:	d502      	bpl.n	8013262 <HAL_UART_IRQHandler+0xa0>
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	069b      	lsls	r3, r3, #26
 8013260:	d41c      	bmi.n	801329c <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013262:	6823      	ldr	r3, [r4, #0]
 8013264:	69da      	ldr	r2, [r3, #28]
 8013266:	0612      	lsls	r2, r2, #24
 8013268:	d502      	bpl.n	8013270 <HAL_UART_IRQHandler+0xae>
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	061b      	lsls	r3, r3, #24
 801326e:	d41e      	bmi.n	80132ae <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013270:	6823      	ldr	r3, [r4, #0]
 8013272:	69da      	ldr	r2, [r3, #28]
 8013274:	0652      	lsls	r2, r2, #25
 8013276:	d502      	bpl.n	801327e <HAL_UART_IRQHandler+0xbc>
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	065b      	lsls	r3, r3, #25
 801327c:	d41b      	bmi.n	80132b6 <HAL_UART_IRQHandler+0xf4>
}
 801327e:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013280:	0020      	movs	r0, r4
 8013282:	f7fa fa31 	bl	800d6e8 <HAL_UART_ErrorCallback>
 8013286:	e7de      	b.n	8013246 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013288:	2280      	movs	r2, #128	; 0x80
 801328a:	0352      	lsls	r2, r2, #13
 801328c:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 801328e:	2369      	movs	r3, #105	; 0x69
 8013290:	2201      	movs	r2, #1
 8013292:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013294:	0020      	movs	r0, r4
 8013296:	f7ff ff93 	bl	80131c0 <HAL_UARTEx_WakeupCallback>
 801329a:	e7db      	b.n	8013254 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 801329c:	0020      	movs	r0, r4
 801329e:	f7ff ff41 	bl	8013124 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80132a2:	6822      	ldr	r2, [r4, #0]
 80132a4:	6993      	ldr	r3, [r2, #24]
 80132a6:	2108      	movs	r1, #8
 80132a8:	430b      	orrs	r3, r1
 80132aa:	6193      	str	r3, [r2, #24]
 80132ac:	e7d9      	b.n	8013262 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 80132ae:	0020      	movs	r0, r4
 80132b0:	f7ff fee6 	bl	8013080 <UART_Transmit_IT>
 80132b4:	e7dc      	b.n	8013270 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 80132b6:	0020      	movs	r0, r4
 80132b8:	f7ff ff1a 	bl	80130f0 <UART_EndTransmit_IT>
}
 80132bc:	e7df      	b.n	801327e <HAL_UART_IRQHandler+0xbc>

080132be <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 80132be:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80132c0:	f7fc ff84 	bl	80101cc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80132c4:	f7f7 fcf8 	bl	800acb8 <SystemClock_Config>

  /* Initialize all user peripherals */

  /* Initialize BitzOS */
  BOS_Init();
 80132c8:	f7f0 fc64 	bl	8003b94 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80132cc:	f7f3 fff4 	bl	80072b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80132d0:	f7fa ff17 	bl	800e102 <osKernelStart>
 80132d4:	e7fe      	b.n	80132d4 <main+0x16>

080132d6 <UserTask>:

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void * argument)
{
 80132d6:	e7fe      	b.n	80132d6 <UserTask>

080132d8 <atof>:
 80132d8:	b510      	push	{r4, lr}
 80132da:	2100      	movs	r1, #0
 80132dc:	f001 fe98 	bl	8015010 <strtod>
 80132e0:	bd10      	pop	{r4, pc}

080132e2 <atoi>:
 80132e2:	b510      	push	{r4, lr}
 80132e4:	220a      	movs	r2, #10
 80132e6:	2100      	movs	r1, #0
 80132e8:	f001 ff8c 	bl	8015204 <strtol>
 80132ec:	bd10      	pop	{r4, pc}

080132ee <atol>:
 80132ee:	b510      	push	{r4, lr}
 80132f0:	220a      	movs	r2, #10
 80132f2:	2100      	movs	r1, #0
 80132f4:	f001 ff86 	bl	8015204 <strtol>
 80132f8:	bd10      	pop	{r4, pc}
	...

080132fc <__libc_init_array>:
 80132fc:	b570      	push	{r4, r5, r6, lr}
 80132fe:	2600      	movs	r6, #0
 8013300:	4d0c      	ldr	r5, [pc, #48]	; (8013334 <__libc_init_array+0x38>)
 8013302:	4c0d      	ldr	r4, [pc, #52]	; (8013338 <__libc_init_array+0x3c>)
 8013304:	1b64      	subs	r4, r4, r5
 8013306:	10a4      	asrs	r4, r4, #2
 8013308:	42a6      	cmp	r6, r4
 801330a:	d109      	bne.n	8013320 <__libc_init_array+0x24>
 801330c:	2600      	movs	r6, #0
 801330e:	f003 ff03 	bl	8017118 <_init>
 8013312:	4d0a      	ldr	r5, [pc, #40]	; (801333c <__libc_init_array+0x40>)
 8013314:	4c0a      	ldr	r4, [pc, #40]	; (8013340 <__libc_init_array+0x44>)
 8013316:	1b64      	subs	r4, r4, r5
 8013318:	10a4      	asrs	r4, r4, #2
 801331a:	42a6      	cmp	r6, r4
 801331c:	d105      	bne.n	801332a <__libc_init_array+0x2e>
 801331e:	bd70      	pop	{r4, r5, r6, pc}
 8013320:	00b3      	lsls	r3, r6, #2
 8013322:	58eb      	ldr	r3, [r5, r3]
 8013324:	4798      	blx	r3
 8013326:	3601      	adds	r6, #1
 8013328:	e7ee      	b.n	8013308 <__libc_init_array+0xc>
 801332a:	00b3      	lsls	r3, r6, #2
 801332c:	58eb      	ldr	r3, [r5, r3]
 801332e:	4798      	blx	r3
 8013330:	3601      	adds	r6, #1
 8013332:	e7f2      	b.n	801331a <__libc_init_array+0x1e>
 8013334:	0801a7c8 	.word	0x0801a7c8
 8013338:	0801a7c8 	.word	0x0801a7c8
 801333c:	0801a7c8 	.word	0x0801a7c8
 8013340:	0801a7cc 	.word	0x0801a7cc

08013344 <__locale_ctype_ptr_l>:
 8013344:	30ec      	adds	r0, #236	; 0xec
 8013346:	6800      	ldr	r0, [r0, #0]
 8013348:	4770      	bx	lr
	...

0801334c <__locale_ctype_ptr>:
 801334c:	4b04      	ldr	r3, [pc, #16]	; (8013360 <__locale_ctype_ptr+0x14>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	6a1b      	ldr	r3, [r3, #32]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d100      	bne.n	8013358 <__locale_ctype_ptr+0xc>
 8013356:	4b03      	ldr	r3, [pc, #12]	; (8013364 <__locale_ctype_ptr+0x18>)
 8013358:	33ec      	adds	r3, #236	; 0xec
 801335a:	6818      	ldr	r0, [r3, #0]
 801335c:	4770      	bx	lr
 801335e:	46c0      	nop			; (mov r8, r8)
 8013360:	200000e0 	.word	0x200000e0
 8013364:	20000144 	.word	0x20000144

08013368 <malloc>:
 8013368:	b510      	push	{r4, lr}
 801336a:	4b03      	ldr	r3, [pc, #12]	; (8013378 <malloc+0x10>)
 801336c:	0001      	movs	r1, r0
 801336e:	6818      	ldr	r0, [r3, #0]
 8013370:	f000 f88a 	bl	8013488 <_malloc_r>
 8013374:	bd10      	pop	{r4, pc}
 8013376:	46c0      	nop			; (mov r8, r8)
 8013378:	200000e0 	.word	0x200000e0

0801337c <free>:
 801337c:	b510      	push	{r4, lr}
 801337e:	4b03      	ldr	r3, [pc, #12]	; (801338c <free+0x10>)
 8013380:	0001      	movs	r1, r0
 8013382:	6818      	ldr	r0, [r3, #0]
 8013384:	f000 f836 	bl	80133f4 <_free_r>
 8013388:	bd10      	pop	{r4, pc}
 801338a:	46c0      	nop			; (mov r8, r8)
 801338c:	200000e0 	.word	0x200000e0

08013390 <__ascii_mbtowc>:
 8013390:	b082      	sub	sp, #8
 8013392:	2900      	cmp	r1, #0
 8013394:	d100      	bne.n	8013398 <__ascii_mbtowc+0x8>
 8013396:	a901      	add	r1, sp, #4
 8013398:	1e10      	subs	r0, r2, #0
 801339a:	d006      	beq.n	80133aa <__ascii_mbtowc+0x1a>
 801339c:	2b00      	cmp	r3, #0
 801339e:	d006      	beq.n	80133ae <__ascii_mbtowc+0x1e>
 80133a0:	7813      	ldrb	r3, [r2, #0]
 80133a2:	600b      	str	r3, [r1, #0]
 80133a4:	7810      	ldrb	r0, [r2, #0]
 80133a6:	1e43      	subs	r3, r0, #1
 80133a8:	4198      	sbcs	r0, r3
 80133aa:	b002      	add	sp, #8
 80133ac:	4770      	bx	lr
 80133ae:	2002      	movs	r0, #2
 80133b0:	4240      	negs	r0, r0
 80133b2:	e7fa      	b.n	80133aa <__ascii_mbtowc+0x1a>

080133b4 <memcmp>:
 80133b4:	b530      	push	{r4, r5, lr}
 80133b6:	2400      	movs	r4, #0
 80133b8:	42a2      	cmp	r2, r4
 80133ba:	d101      	bne.n	80133c0 <memcmp+0xc>
 80133bc:	2000      	movs	r0, #0
 80133be:	e005      	b.n	80133cc <memcmp+0x18>
 80133c0:	5d03      	ldrb	r3, [r0, r4]
 80133c2:	1c65      	adds	r5, r4, #1
 80133c4:	5d0c      	ldrb	r4, [r1, r4]
 80133c6:	42a3      	cmp	r3, r4
 80133c8:	d001      	beq.n	80133ce <memcmp+0x1a>
 80133ca:	1b18      	subs	r0, r3, r4
 80133cc:	bd30      	pop	{r4, r5, pc}
 80133ce:	002c      	movs	r4, r5
 80133d0:	e7f2      	b.n	80133b8 <memcmp+0x4>

080133d2 <memcpy>:
 80133d2:	2300      	movs	r3, #0
 80133d4:	b510      	push	{r4, lr}
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d100      	bne.n	80133dc <memcpy+0xa>
 80133da:	bd10      	pop	{r4, pc}
 80133dc:	5ccc      	ldrb	r4, [r1, r3]
 80133de:	54c4      	strb	r4, [r0, r3]
 80133e0:	3301      	adds	r3, #1
 80133e2:	e7f8      	b.n	80133d6 <memcpy+0x4>

080133e4 <memset>:
 80133e4:	0003      	movs	r3, r0
 80133e6:	1812      	adds	r2, r2, r0
 80133e8:	4293      	cmp	r3, r2
 80133ea:	d100      	bne.n	80133ee <memset+0xa>
 80133ec:	4770      	bx	lr
 80133ee:	7019      	strb	r1, [r3, #0]
 80133f0:	3301      	adds	r3, #1
 80133f2:	e7f9      	b.n	80133e8 <memset+0x4>

080133f4 <_free_r>:
 80133f4:	b570      	push	{r4, r5, r6, lr}
 80133f6:	0005      	movs	r5, r0
 80133f8:	2900      	cmp	r1, #0
 80133fa:	d010      	beq.n	801341e <_free_r+0x2a>
 80133fc:	1f0c      	subs	r4, r1, #4
 80133fe:	6823      	ldr	r3, [r4, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	da00      	bge.n	8013406 <_free_r+0x12>
 8013404:	18e4      	adds	r4, r4, r3
 8013406:	0028      	movs	r0, r5
 8013408:	f003 f8cd 	bl	80165a6 <__malloc_lock>
 801340c:	4a1d      	ldr	r2, [pc, #116]	; (8013484 <_free_r+0x90>)
 801340e:	6813      	ldr	r3, [r2, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d105      	bne.n	8013420 <_free_r+0x2c>
 8013414:	6063      	str	r3, [r4, #4]
 8013416:	6014      	str	r4, [r2, #0]
 8013418:	0028      	movs	r0, r5
 801341a:	f003 f8c5 	bl	80165a8 <__malloc_unlock>
 801341e:	bd70      	pop	{r4, r5, r6, pc}
 8013420:	42a3      	cmp	r3, r4
 8013422:	d909      	bls.n	8013438 <_free_r+0x44>
 8013424:	6821      	ldr	r1, [r4, #0]
 8013426:	1860      	adds	r0, r4, r1
 8013428:	4283      	cmp	r3, r0
 801342a:	d1f3      	bne.n	8013414 <_free_r+0x20>
 801342c:	6818      	ldr	r0, [r3, #0]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	1841      	adds	r1, r0, r1
 8013432:	6021      	str	r1, [r4, #0]
 8013434:	e7ee      	b.n	8013414 <_free_r+0x20>
 8013436:	0013      	movs	r3, r2
 8013438:	685a      	ldr	r2, [r3, #4]
 801343a:	2a00      	cmp	r2, #0
 801343c:	d001      	beq.n	8013442 <_free_r+0x4e>
 801343e:	42a2      	cmp	r2, r4
 8013440:	d9f9      	bls.n	8013436 <_free_r+0x42>
 8013442:	6819      	ldr	r1, [r3, #0]
 8013444:	1858      	adds	r0, r3, r1
 8013446:	42a0      	cmp	r0, r4
 8013448:	d10b      	bne.n	8013462 <_free_r+0x6e>
 801344a:	6820      	ldr	r0, [r4, #0]
 801344c:	1809      	adds	r1, r1, r0
 801344e:	1858      	adds	r0, r3, r1
 8013450:	6019      	str	r1, [r3, #0]
 8013452:	4282      	cmp	r2, r0
 8013454:	d1e0      	bne.n	8013418 <_free_r+0x24>
 8013456:	6810      	ldr	r0, [r2, #0]
 8013458:	6852      	ldr	r2, [r2, #4]
 801345a:	1841      	adds	r1, r0, r1
 801345c:	6019      	str	r1, [r3, #0]
 801345e:	605a      	str	r2, [r3, #4]
 8013460:	e7da      	b.n	8013418 <_free_r+0x24>
 8013462:	42a0      	cmp	r0, r4
 8013464:	d902      	bls.n	801346c <_free_r+0x78>
 8013466:	230c      	movs	r3, #12
 8013468:	602b      	str	r3, [r5, #0]
 801346a:	e7d5      	b.n	8013418 <_free_r+0x24>
 801346c:	6821      	ldr	r1, [r4, #0]
 801346e:	1860      	adds	r0, r4, r1
 8013470:	4282      	cmp	r2, r0
 8013472:	d103      	bne.n	801347c <_free_r+0x88>
 8013474:	6810      	ldr	r0, [r2, #0]
 8013476:	6852      	ldr	r2, [r2, #4]
 8013478:	1841      	adds	r1, r0, r1
 801347a:	6021      	str	r1, [r4, #0]
 801347c:	6062      	str	r2, [r4, #4]
 801347e:	605c      	str	r4, [r3, #4]
 8013480:	e7ca      	b.n	8013418 <_free_r+0x24>
 8013482:	46c0      	nop			; (mov r8, r8)
 8013484:	200060c0 	.word	0x200060c0

08013488 <_malloc_r>:
 8013488:	2303      	movs	r3, #3
 801348a:	b570      	push	{r4, r5, r6, lr}
 801348c:	1ccd      	adds	r5, r1, #3
 801348e:	439d      	bics	r5, r3
 8013490:	3508      	adds	r5, #8
 8013492:	0006      	movs	r6, r0
 8013494:	2d0c      	cmp	r5, #12
 8013496:	d21e      	bcs.n	80134d6 <_malloc_r+0x4e>
 8013498:	250c      	movs	r5, #12
 801349a:	42a9      	cmp	r1, r5
 801349c:	d81d      	bhi.n	80134da <_malloc_r+0x52>
 801349e:	0030      	movs	r0, r6
 80134a0:	f003 f881 	bl	80165a6 <__malloc_lock>
 80134a4:	4a25      	ldr	r2, [pc, #148]	; (801353c <_malloc_r+0xb4>)
 80134a6:	6814      	ldr	r4, [r2, #0]
 80134a8:	0021      	movs	r1, r4
 80134aa:	2900      	cmp	r1, #0
 80134ac:	d119      	bne.n	80134e2 <_malloc_r+0x5a>
 80134ae:	4c24      	ldr	r4, [pc, #144]	; (8013540 <_malloc_r+0xb8>)
 80134b0:	6823      	ldr	r3, [r4, #0]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d103      	bne.n	80134be <_malloc_r+0x36>
 80134b6:	0030      	movs	r0, r6
 80134b8:	f000 fedc 	bl	8014274 <_sbrk_r>
 80134bc:	6020      	str	r0, [r4, #0]
 80134be:	0029      	movs	r1, r5
 80134c0:	0030      	movs	r0, r6
 80134c2:	f000 fed7 	bl	8014274 <_sbrk_r>
 80134c6:	1c43      	adds	r3, r0, #1
 80134c8:	d12b      	bne.n	8013522 <_malloc_r+0x9a>
 80134ca:	230c      	movs	r3, #12
 80134cc:	0030      	movs	r0, r6
 80134ce:	6033      	str	r3, [r6, #0]
 80134d0:	f003 f86a 	bl	80165a8 <__malloc_unlock>
 80134d4:	e003      	b.n	80134de <_malloc_r+0x56>
 80134d6:	2d00      	cmp	r5, #0
 80134d8:	dadf      	bge.n	801349a <_malloc_r+0x12>
 80134da:	230c      	movs	r3, #12
 80134dc:	6033      	str	r3, [r6, #0]
 80134de:	2000      	movs	r0, #0
 80134e0:	bd70      	pop	{r4, r5, r6, pc}
 80134e2:	680b      	ldr	r3, [r1, #0]
 80134e4:	1b5b      	subs	r3, r3, r5
 80134e6:	d419      	bmi.n	801351c <_malloc_r+0x94>
 80134e8:	2b0b      	cmp	r3, #11
 80134ea:	d903      	bls.n	80134f4 <_malloc_r+0x6c>
 80134ec:	600b      	str	r3, [r1, #0]
 80134ee:	18cc      	adds	r4, r1, r3
 80134f0:	6025      	str	r5, [r4, #0]
 80134f2:	e003      	b.n	80134fc <_malloc_r+0x74>
 80134f4:	684b      	ldr	r3, [r1, #4]
 80134f6:	428c      	cmp	r4, r1
 80134f8:	d10d      	bne.n	8013516 <_malloc_r+0x8e>
 80134fa:	6013      	str	r3, [r2, #0]
 80134fc:	0030      	movs	r0, r6
 80134fe:	f003 f853 	bl	80165a8 <__malloc_unlock>
 8013502:	0020      	movs	r0, r4
 8013504:	2207      	movs	r2, #7
 8013506:	300b      	adds	r0, #11
 8013508:	1d23      	adds	r3, r4, #4
 801350a:	4390      	bics	r0, r2
 801350c:	1ac3      	subs	r3, r0, r3
 801350e:	d0e7      	beq.n	80134e0 <_malloc_r+0x58>
 8013510:	425a      	negs	r2, r3
 8013512:	50e2      	str	r2, [r4, r3]
 8013514:	e7e4      	b.n	80134e0 <_malloc_r+0x58>
 8013516:	6063      	str	r3, [r4, #4]
 8013518:	000c      	movs	r4, r1
 801351a:	e7ef      	b.n	80134fc <_malloc_r+0x74>
 801351c:	000c      	movs	r4, r1
 801351e:	6849      	ldr	r1, [r1, #4]
 8013520:	e7c3      	b.n	80134aa <_malloc_r+0x22>
 8013522:	2303      	movs	r3, #3
 8013524:	1cc4      	adds	r4, r0, #3
 8013526:	439c      	bics	r4, r3
 8013528:	42a0      	cmp	r0, r4
 801352a:	d0e1      	beq.n	80134f0 <_malloc_r+0x68>
 801352c:	1a21      	subs	r1, r4, r0
 801352e:	0030      	movs	r0, r6
 8013530:	f000 fea0 	bl	8014274 <_sbrk_r>
 8013534:	1c43      	adds	r3, r0, #1
 8013536:	d1db      	bne.n	80134f0 <_malloc_r+0x68>
 8013538:	e7c7      	b.n	80134ca <_malloc_r+0x42>
 801353a:	46c0      	nop			; (mov r8, r8)
 801353c:	200060c0 	.word	0x200060c0
 8013540:	200060c4 	.word	0x200060c4

08013544 <__cvt>:
 8013544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013546:	b08b      	sub	sp, #44	; 0x2c
 8013548:	0014      	movs	r4, r2
 801354a:	1e1d      	subs	r5, r3, #0
 801354c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801354e:	da53      	bge.n	80135f8 <__cvt+0xb4>
 8013550:	2480      	movs	r4, #128	; 0x80
 8013552:	0624      	lsls	r4, r4, #24
 8013554:	191b      	adds	r3, r3, r4
 8013556:	001d      	movs	r5, r3
 8013558:	0014      	movs	r4, r2
 801355a:	232d      	movs	r3, #45	; 0x2d
 801355c:	700b      	strb	r3, [r1, #0]
 801355e:	2320      	movs	r3, #32
 8013560:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013562:	2203      	movs	r2, #3
 8013564:	439e      	bics	r6, r3
 8013566:	2e46      	cmp	r6, #70	; 0x46
 8013568:	d007      	beq.n	801357a <__cvt+0x36>
 801356a:	0033      	movs	r3, r6
 801356c:	3b45      	subs	r3, #69	; 0x45
 801356e:	4259      	negs	r1, r3
 8013570:	414b      	adcs	r3, r1
 8013572:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013574:	3a01      	subs	r2, #1
 8013576:	18cb      	adds	r3, r1, r3
 8013578:	9310      	str	r3, [sp, #64]	; 0x40
 801357a:	ab09      	add	r3, sp, #36	; 0x24
 801357c:	9304      	str	r3, [sp, #16]
 801357e:	ab08      	add	r3, sp, #32
 8013580:	9303      	str	r3, [sp, #12]
 8013582:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013584:	9200      	str	r2, [sp, #0]
 8013586:	9302      	str	r3, [sp, #8]
 8013588:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801358a:	0022      	movs	r2, r4
 801358c:	9301      	str	r3, [sp, #4]
 801358e:	002b      	movs	r3, r5
 8013590:	f001 fede 	bl	8015350 <_dtoa_r>
 8013594:	0007      	movs	r7, r0
 8013596:	2e47      	cmp	r6, #71	; 0x47
 8013598:	d102      	bne.n	80135a0 <__cvt+0x5c>
 801359a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801359c:	07db      	lsls	r3, r3, #31
 801359e:	d524      	bpl.n	80135ea <__cvt+0xa6>
 80135a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80135a2:	18fb      	adds	r3, r7, r3
 80135a4:	9307      	str	r3, [sp, #28]
 80135a6:	2e46      	cmp	r6, #70	; 0x46
 80135a8:	d114      	bne.n	80135d4 <__cvt+0x90>
 80135aa:	783b      	ldrb	r3, [r7, #0]
 80135ac:	2b30      	cmp	r3, #48	; 0x30
 80135ae:	d10c      	bne.n	80135ca <__cvt+0x86>
 80135b0:	2200      	movs	r2, #0
 80135b2:	2300      	movs	r3, #0
 80135b4:	0020      	movs	r0, r4
 80135b6:	0029      	movs	r1, r5
 80135b8:	f7ec ff46 	bl	8000448 <__aeabi_dcmpeq>
 80135bc:	2800      	cmp	r0, #0
 80135be:	d104      	bne.n	80135ca <__cvt+0x86>
 80135c0:	2301      	movs	r3, #1
 80135c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80135c4:	1a9b      	subs	r3, r3, r2
 80135c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80135c8:	6013      	str	r3, [r2, #0]
 80135ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80135cc:	9a07      	ldr	r2, [sp, #28]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	18d3      	adds	r3, r2, r3
 80135d2:	9307      	str	r3, [sp, #28]
 80135d4:	2200      	movs	r2, #0
 80135d6:	2300      	movs	r3, #0
 80135d8:	0020      	movs	r0, r4
 80135da:	0029      	movs	r1, r5
 80135dc:	f7ec ff34 	bl	8000448 <__aeabi_dcmpeq>
 80135e0:	2230      	movs	r2, #48	; 0x30
 80135e2:	2800      	cmp	r0, #0
 80135e4:	d00d      	beq.n	8013602 <__cvt+0xbe>
 80135e6:	9b07      	ldr	r3, [sp, #28]
 80135e8:	9309      	str	r3, [sp, #36]	; 0x24
 80135ea:	0038      	movs	r0, r7
 80135ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80135f0:	1bdb      	subs	r3, r3, r7
 80135f2:	6013      	str	r3, [r2, #0]
 80135f4:	b00b      	add	sp, #44	; 0x2c
 80135f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135f8:	2300      	movs	r3, #0
 80135fa:	e7af      	b.n	801355c <__cvt+0x18>
 80135fc:	1c59      	adds	r1, r3, #1
 80135fe:	9109      	str	r1, [sp, #36]	; 0x24
 8013600:	701a      	strb	r2, [r3, #0]
 8013602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013604:	9907      	ldr	r1, [sp, #28]
 8013606:	428b      	cmp	r3, r1
 8013608:	d3f8      	bcc.n	80135fc <__cvt+0xb8>
 801360a:	e7ee      	b.n	80135ea <__cvt+0xa6>

0801360c <__exponent>:
 801360c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801360e:	1c83      	adds	r3, r0, #2
 8013610:	b085      	sub	sp, #20
 8013612:	9301      	str	r3, [sp, #4]
 8013614:	0006      	movs	r6, r0
 8013616:	000c      	movs	r4, r1
 8013618:	7002      	strb	r2, [r0, #0]
 801361a:	232b      	movs	r3, #43	; 0x2b
 801361c:	2900      	cmp	r1, #0
 801361e:	da01      	bge.n	8013624 <__exponent+0x18>
 8013620:	232d      	movs	r3, #45	; 0x2d
 8013622:	424c      	negs	r4, r1
 8013624:	7073      	strb	r3, [r6, #1]
 8013626:	2c09      	cmp	r4, #9
 8013628:	dd22      	ble.n	8013670 <__exponent+0x64>
 801362a:	ab02      	add	r3, sp, #8
 801362c:	1ddd      	adds	r5, r3, #7
 801362e:	0020      	movs	r0, r4
 8013630:	210a      	movs	r1, #10
 8013632:	f7ec fef3 	bl	800041c <__aeabi_idivmod>
 8013636:	1e6f      	subs	r7, r5, #1
 8013638:	3130      	adds	r1, #48	; 0x30
 801363a:	7039      	strb	r1, [r7, #0]
 801363c:	0020      	movs	r0, r4
 801363e:	210a      	movs	r1, #10
 8013640:	f7ec fe06 	bl	8000250 <__divsi3>
 8013644:	0004      	movs	r4, r0
 8013646:	2809      	cmp	r0, #9
 8013648:	dc0b      	bgt.n	8013662 <__exponent+0x56>
 801364a:	3d02      	subs	r5, #2
 801364c:	3430      	adds	r4, #48	; 0x30
 801364e:	9b01      	ldr	r3, [sp, #4]
 8013650:	702c      	strb	r4, [r5, #0]
 8013652:	aa02      	add	r2, sp, #8
 8013654:	3207      	adds	r2, #7
 8013656:	0018      	movs	r0, r3
 8013658:	42aa      	cmp	r2, r5
 801365a:	d804      	bhi.n	8013666 <__exponent+0x5a>
 801365c:	1b80      	subs	r0, r0, r6
 801365e:	b005      	add	sp, #20
 8013660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013662:	003d      	movs	r5, r7
 8013664:	e7e3      	b.n	801362e <__exponent+0x22>
 8013666:	782a      	ldrb	r2, [r5, #0]
 8013668:	3501      	adds	r5, #1
 801366a:	701a      	strb	r2, [r3, #0]
 801366c:	3301      	adds	r3, #1
 801366e:	e7f0      	b.n	8013652 <__exponent+0x46>
 8013670:	2330      	movs	r3, #48	; 0x30
 8013672:	18e4      	adds	r4, r4, r3
 8013674:	70b3      	strb	r3, [r6, #2]
 8013676:	1d30      	adds	r0, r6, #4
 8013678:	70f4      	strb	r4, [r6, #3]
 801367a:	e7ef      	b.n	801365c <__exponent+0x50>

0801367c <_printf_float>:
 801367c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801367e:	b095      	sub	sp, #84	; 0x54
 8013680:	000c      	movs	r4, r1
 8013682:	920a      	str	r2, [sp, #40]	; 0x28
 8013684:	930b      	str	r3, [sp, #44]	; 0x2c
 8013686:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013688:	9009      	str	r0, [sp, #36]	; 0x24
 801368a:	f002 ff75 	bl	8016578 <_localeconv_r>
 801368e:	6803      	ldr	r3, [r0, #0]
 8013690:	0018      	movs	r0, r3
 8013692:	930c      	str	r3, [sp, #48]	; 0x30
 8013694:	f7ec fd40 	bl	8000118 <strlen>
 8013698:	2300      	movs	r3, #0
 801369a:	9312      	str	r3, [sp, #72]	; 0x48
 801369c:	6823      	ldr	r3, [r4, #0]
 801369e:	900e      	str	r0, [sp, #56]	; 0x38
 80136a0:	930d      	str	r3, [sp, #52]	; 0x34
 80136a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80136a4:	7e27      	ldrb	r7, [r4, #24]
 80136a6:	682b      	ldr	r3, [r5, #0]
 80136a8:	2207      	movs	r2, #7
 80136aa:	05c9      	lsls	r1, r1, #23
 80136ac:	d545      	bpl.n	801373a <_printf_float+0xbe>
 80136ae:	189b      	adds	r3, r3, r2
 80136b0:	4393      	bics	r3, r2
 80136b2:	001a      	movs	r2, r3
 80136b4:	3208      	adds	r2, #8
 80136b6:	602a      	str	r2, [r5, #0]
 80136b8:	681a      	ldr	r2, [r3, #0]
 80136ba:	685b      	ldr	r3, [r3, #4]
 80136bc:	64a2      	str	r2, [r4, #72]	; 0x48
 80136be:	64e3      	str	r3, [r4, #76]	; 0x4c
 80136c0:	2201      	movs	r2, #1
 80136c2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80136c4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80136c6:	006b      	lsls	r3, r5, #1
 80136c8:	085b      	lsrs	r3, r3, #1
 80136ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80136cc:	4252      	negs	r2, r2
 80136ce:	4bac      	ldr	r3, [pc, #688]	; (8013980 <_printf_float+0x304>)
 80136d0:	0030      	movs	r0, r6
 80136d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80136d4:	f7ee fd58 	bl	8002188 <__aeabi_dcmpun>
 80136d8:	2800      	cmp	r0, #0
 80136da:	d130      	bne.n	801373e <_printf_float+0xc2>
 80136dc:	2201      	movs	r2, #1
 80136de:	4ba8      	ldr	r3, [pc, #672]	; (8013980 <_printf_float+0x304>)
 80136e0:	4252      	negs	r2, r2
 80136e2:	0030      	movs	r0, r6
 80136e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80136e6:	f7ec febf 	bl	8000468 <__aeabi_dcmple>
 80136ea:	2800      	cmp	r0, #0
 80136ec:	d127      	bne.n	801373e <_printf_float+0xc2>
 80136ee:	2200      	movs	r2, #0
 80136f0:	2300      	movs	r3, #0
 80136f2:	0030      	movs	r0, r6
 80136f4:	0029      	movs	r1, r5
 80136f6:	f7ec fead 	bl	8000454 <__aeabi_dcmplt>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d003      	beq.n	8013706 <_printf_float+0x8a>
 80136fe:	0023      	movs	r3, r4
 8013700:	222d      	movs	r2, #45	; 0x2d
 8013702:	3343      	adds	r3, #67	; 0x43
 8013704:	701a      	strb	r2, [r3, #0]
 8013706:	4d9f      	ldr	r5, [pc, #636]	; (8013984 <_printf_float+0x308>)
 8013708:	2f47      	cmp	r7, #71	; 0x47
 801370a:	d800      	bhi.n	801370e <_printf_float+0x92>
 801370c:	4d9e      	ldr	r5, [pc, #632]	; (8013988 <_printf_float+0x30c>)
 801370e:	2303      	movs	r3, #3
 8013710:	2600      	movs	r6, #0
 8013712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013714:	6123      	str	r3, [r4, #16]
 8013716:	3301      	adds	r3, #1
 8013718:	439a      	bics	r2, r3
 801371a:	6022      	str	r2, [r4, #0]
 801371c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801371e:	aa13      	add	r2, sp, #76	; 0x4c
 8013720:	9300      	str	r3, [sp, #0]
 8013722:	0021      	movs	r1, r4
 8013724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013726:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013728:	f000 f9f4 	bl	8013b14 <_printf_common>
 801372c:	1c43      	adds	r3, r0, #1
 801372e:	d000      	beq.n	8013732 <_printf_float+0xb6>
 8013730:	e093      	b.n	801385a <_printf_float+0x1de>
 8013732:	2001      	movs	r0, #1
 8013734:	4240      	negs	r0, r0
 8013736:	b015      	add	sp, #84	; 0x54
 8013738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801373a:	3307      	adds	r3, #7
 801373c:	e7b8      	b.n	80136b0 <_printf_float+0x34>
 801373e:	0032      	movs	r2, r6
 8013740:	002b      	movs	r3, r5
 8013742:	0030      	movs	r0, r6
 8013744:	0029      	movs	r1, r5
 8013746:	f7ee fd1f 	bl	8002188 <__aeabi_dcmpun>
 801374a:	2800      	cmp	r0, #0
 801374c:	d004      	beq.n	8013758 <_printf_float+0xdc>
 801374e:	4d8f      	ldr	r5, [pc, #572]	; (801398c <_printf_float+0x310>)
 8013750:	2f47      	cmp	r7, #71	; 0x47
 8013752:	d8dc      	bhi.n	801370e <_printf_float+0x92>
 8013754:	4d8e      	ldr	r5, [pc, #568]	; (8013990 <_printf_float+0x314>)
 8013756:	e7da      	b.n	801370e <_printf_float+0x92>
 8013758:	2380      	movs	r3, #128	; 0x80
 801375a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801375c:	6862      	ldr	r2, [r4, #4]
 801375e:	00db      	lsls	r3, r3, #3
 8013760:	430b      	orrs	r3, r1
 8013762:	1c51      	adds	r1, r2, #1
 8013764:	d143      	bne.n	80137ee <_printf_float+0x172>
 8013766:	3207      	adds	r2, #7
 8013768:	6062      	str	r2, [r4, #4]
 801376a:	aa12      	add	r2, sp, #72	; 0x48
 801376c:	2100      	movs	r1, #0
 801376e:	9205      	str	r2, [sp, #20]
 8013770:	aa11      	add	r2, sp, #68	; 0x44
 8013772:	9203      	str	r2, [sp, #12]
 8013774:	2223      	movs	r2, #35	; 0x23
 8013776:	6023      	str	r3, [r4, #0]
 8013778:	9106      	str	r1, [sp, #24]
 801377a:	9301      	str	r3, [sp, #4]
 801377c:	a908      	add	r1, sp, #32
 801377e:	6863      	ldr	r3, [r4, #4]
 8013780:	1852      	adds	r2, r2, r1
 8013782:	9202      	str	r2, [sp, #8]
 8013784:	9300      	str	r3, [sp, #0]
 8013786:	0032      	movs	r2, r6
 8013788:	002b      	movs	r3, r5
 801378a:	9704      	str	r7, [sp, #16]
 801378c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801378e:	f7ff fed9 	bl	8013544 <__cvt>
 8013792:	2320      	movs	r3, #32
 8013794:	003a      	movs	r2, r7
 8013796:	0005      	movs	r5, r0
 8013798:	439a      	bics	r2, r3
 801379a:	2a47      	cmp	r2, #71	; 0x47
 801379c:	d107      	bne.n	80137ae <_printf_float+0x132>
 801379e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80137a0:	1cda      	adds	r2, r3, #3
 80137a2:	db02      	blt.n	80137aa <_printf_float+0x12e>
 80137a4:	6862      	ldr	r2, [r4, #4]
 80137a6:	4293      	cmp	r3, r2
 80137a8:	dd45      	ble.n	8013836 <_printf_float+0x1ba>
 80137aa:	3f02      	subs	r7, #2
 80137ac:	b2ff      	uxtb	r7, r7
 80137ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80137b0:	2f65      	cmp	r7, #101	; 0x65
 80137b2:	d825      	bhi.n	8013800 <_printf_float+0x184>
 80137b4:	0020      	movs	r0, r4
 80137b6:	3901      	subs	r1, #1
 80137b8:	003a      	movs	r2, r7
 80137ba:	3050      	adds	r0, #80	; 0x50
 80137bc:	9111      	str	r1, [sp, #68]	; 0x44
 80137be:	f7ff ff25 	bl	801360c <__exponent>
 80137c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80137c4:	0006      	movs	r6, r0
 80137c6:	1813      	adds	r3, r2, r0
 80137c8:	6123      	str	r3, [r4, #16]
 80137ca:	2a01      	cmp	r2, #1
 80137cc:	dc02      	bgt.n	80137d4 <_printf_float+0x158>
 80137ce:	6822      	ldr	r2, [r4, #0]
 80137d0:	07d2      	lsls	r2, r2, #31
 80137d2:	d501      	bpl.n	80137d8 <_printf_float+0x15c>
 80137d4:	3301      	adds	r3, #1
 80137d6:	6123      	str	r3, [r4, #16]
 80137d8:	2323      	movs	r3, #35	; 0x23
 80137da:	aa08      	add	r2, sp, #32
 80137dc:	189b      	adds	r3, r3, r2
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d09b      	beq.n	801371c <_printf_float+0xa0>
 80137e4:	0023      	movs	r3, r4
 80137e6:	222d      	movs	r2, #45	; 0x2d
 80137e8:	3343      	adds	r3, #67	; 0x43
 80137ea:	701a      	strb	r2, [r3, #0]
 80137ec:	e796      	b.n	801371c <_printf_float+0xa0>
 80137ee:	2f67      	cmp	r7, #103	; 0x67
 80137f0:	d100      	bne.n	80137f4 <_printf_float+0x178>
 80137f2:	e176      	b.n	8013ae2 <_printf_float+0x466>
 80137f4:	2f47      	cmp	r7, #71	; 0x47
 80137f6:	d1b8      	bne.n	801376a <_printf_float+0xee>
 80137f8:	2a00      	cmp	r2, #0
 80137fa:	d1b6      	bne.n	801376a <_printf_float+0xee>
 80137fc:	2201      	movs	r2, #1
 80137fe:	e7b3      	b.n	8013768 <_printf_float+0xec>
 8013800:	2f66      	cmp	r7, #102	; 0x66
 8013802:	d119      	bne.n	8013838 <_printf_float+0x1bc>
 8013804:	6863      	ldr	r3, [r4, #4]
 8013806:	2900      	cmp	r1, #0
 8013808:	dd0c      	ble.n	8013824 <_printf_float+0x1a8>
 801380a:	6121      	str	r1, [r4, #16]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d102      	bne.n	8013816 <_printf_float+0x19a>
 8013810:	6822      	ldr	r2, [r4, #0]
 8013812:	07d2      	lsls	r2, r2, #31
 8013814:	d502      	bpl.n	801381c <_printf_float+0x1a0>
 8013816:	3301      	adds	r3, #1
 8013818:	185b      	adds	r3, r3, r1
 801381a:	6123      	str	r3, [r4, #16]
 801381c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801381e:	2600      	movs	r6, #0
 8013820:	65a3      	str	r3, [r4, #88]	; 0x58
 8013822:	e7d9      	b.n	80137d8 <_printf_float+0x15c>
 8013824:	2b00      	cmp	r3, #0
 8013826:	d103      	bne.n	8013830 <_printf_float+0x1b4>
 8013828:	2201      	movs	r2, #1
 801382a:	6821      	ldr	r1, [r4, #0]
 801382c:	4211      	tst	r1, r2
 801382e:	d000      	beq.n	8013832 <_printf_float+0x1b6>
 8013830:	1c9a      	adds	r2, r3, #2
 8013832:	6122      	str	r2, [r4, #16]
 8013834:	e7f2      	b.n	801381c <_printf_float+0x1a0>
 8013836:	2767      	movs	r7, #103	; 0x67
 8013838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801383a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801383c:	4293      	cmp	r3, r2
 801383e:	db05      	blt.n	801384c <_printf_float+0x1d0>
 8013840:	6822      	ldr	r2, [r4, #0]
 8013842:	6123      	str	r3, [r4, #16]
 8013844:	07d2      	lsls	r2, r2, #31
 8013846:	d5e9      	bpl.n	801381c <_printf_float+0x1a0>
 8013848:	3301      	adds	r3, #1
 801384a:	e7e6      	b.n	801381a <_printf_float+0x19e>
 801384c:	2101      	movs	r1, #1
 801384e:	2b00      	cmp	r3, #0
 8013850:	dc01      	bgt.n	8013856 <_printf_float+0x1da>
 8013852:	1849      	adds	r1, r1, r1
 8013854:	1ac9      	subs	r1, r1, r3
 8013856:	1852      	adds	r2, r2, r1
 8013858:	e7eb      	b.n	8013832 <_printf_float+0x1b6>
 801385a:	6822      	ldr	r2, [r4, #0]
 801385c:	0553      	lsls	r3, r2, #21
 801385e:	d408      	bmi.n	8013872 <_printf_float+0x1f6>
 8013860:	6923      	ldr	r3, [r4, #16]
 8013862:	002a      	movs	r2, r5
 8013864:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013866:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013868:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801386a:	47a8      	blx	r5
 801386c:	1c43      	adds	r3, r0, #1
 801386e:	d129      	bne.n	80138c4 <_printf_float+0x248>
 8013870:	e75f      	b.n	8013732 <_printf_float+0xb6>
 8013872:	2f65      	cmp	r7, #101	; 0x65
 8013874:	d800      	bhi.n	8013878 <_printf_float+0x1fc>
 8013876:	e0e0      	b.n	8013a3a <_printf_float+0x3be>
 8013878:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801387a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801387c:	2200      	movs	r2, #0
 801387e:	2300      	movs	r3, #0
 8013880:	f7ec fde2 	bl	8000448 <__aeabi_dcmpeq>
 8013884:	2800      	cmp	r0, #0
 8013886:	d034      	beq.n	80138f2 <_printf_float+0x276>
 8013888:	2301      	movs	r3, #1
 801388a:	4a42      	ldr	r2, [pc, #264]	; (8013994 <_printf_float+0x318>)
 801388c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801388e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013890:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013892:	47a8      	blx	r5
 8013894:	1c43      	adds	r3, r0, #1
 8013896:	d100      	bne.n	801389a <_printf_float+0x21e>
 8013898:	e74b      	b.n	8013732 <_printf_float+0xb6>
 801389a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801389c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801389e:	4293      	cmp	r3, r2
 80138a0:	db02      	blt.n	80138a8 <_printf_float+0x22c>
 80138a2:	6823      	ldr	r3, [r4, #0]
 80138a4:	07db      	lsls	r3, r3, #31
 80138a6:	d50d      	bpl.n	80138c4 <_printf_float+0x248>
 80138a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80138aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80138b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80138b2:	47a8      	blx	r5
 80138b4:	2500      	movs	r5, #0
 80138b6:	1c43      	adds	r3, r0, #1
 80138b8:	d100      	bne.n	80138bc <_printf_float+0x240>
 80138ba:	e73a      	b.n	8013732 <_printf_float+0xb6>
 80138bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80138be:	3b01      	subs	r3, #1
 80138c0:	42ab      	cmp	r3, r5
 80138c2:	dc0a      	bgt.n	80138da <_printf_float+0x25e>
 80138c4:	6823      	ldr	r3, [r4, #0]
 80138c6:	079b      	lsls	r3, r3, #30
 80138c8:	d500      	bpl.n	80138cc <_printf_float+0x250>
 80138ca:	e108      	b.n	8013ade <_printf_float+0x462>
 80138cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80138ce:	68e0      	ldr	r0, [r4, #12]
 80138d0:	4298      	cmp	r0, r3
 80138d2:	db00      	blt.n	80138d6 <_printf_float+0x25a>
 80138d4:	e72f      	b.n	8013736 <_printf_float+0xba>
 80138d6:	0018      	movs	r0, r3
 80138d8:	e72d      	b.n	8013736 <_printf_float+0xba>
 80138da:	0022      	movs	r2, r4
 80138dc:	2301      	movs	r3, #1
 80138de:	321a      	adds	r2, #26
 80138e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80138e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80138e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80138e6:	47b0      	blx	r6
 80138e8:	1c43      	adds	r3, r0, #1
 80138ea:	d100      	bne.n	80138ee <_printf_float+0x272>
 80138ec:	e721      	b.n	8013732 <_printf_float+0xb6>
 80138ee:	3501      	adds	r5, #1
 80138f0:	e7e4      	b.n	80138bc <_printf_float+0x240>
 80138f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	dc2d      	bgt.n	8013954 <_printf_float+0x2d8>
 80138f8:	2301      	movs	r3, #1
 80138fa:	4a26      	ldr	r2, [pc, #152]	; (8013994 <_printf_float+0x318>)
 80138fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80138fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013900:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013902:	47b0      	blx	r6
 8013904:	1c43      	adds	r3, r0, #1
 8013906:	d100      	bne.n	801390a <_printf_float+0x28e>
 8013908:	e713      	b.n	8013732 <_printf_float+0xb6>
 801390a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801390c:	2b00      	cmp	r3, #0
 801390e:	d105      	bne.n	801391c <_printf_float+0x2a0>
 8013910:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013912:	2b00      	cmp	r3, #0
 8013914:	d102      	bne.n	801391c <_printf_float+0x2a0>
 8013916:	6823      	ldr	r3, [r4, #0]
 8013918:	07db      	lsls	r3, r3, #31
 801391a:	d5d3      	bpl.n	80138c4 <_printf_float+0x248>
 801391c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801391e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013922:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013926:	47b0      	blx	r6
 8013928:	2600      	movs	r6, #0
 801392a:	1c43      	adds	r3, r0, #1
 801392c:	d100      	bne.n	8013930 <_printf_float+0x2b4>
 801392e:	e700      	b.n	8013732 <_printf_float+0xb6>
 8013930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013932:	425b      	negs	r3, r3
 8013934:	42b3      	cmp	r3, r6
 8013936:	dc01      	bgt.n	801393c <_printf_float+0x2c0>
 8013938:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801393a:	e792      	b.n	8013862 <_printf_float+0x1e6>
 801393c:	0022      	movs	r2, r4
 801393e:	2301      	movs	r3, #1
 8013940:	321a      	adds	r2, #26
 8013942:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013946:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013948:	47b8      	blx	r7
 801394a:	1c43      	adds	r3, r0, #1
 801394c:	d100      	bne.n	8013950 <_printf_float+0x2d4>
 801394e:	e6f0      	b.n	8013732 <_printf_float+0xb6>
 8013950:	3601      	adds	r6, #1
 8013952:	e7ed      	b.n	8013930 <_printf_float+0x2b4>
 8013954:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013956:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013958:	429f      	cmp	r7, r3
 801395a:	dd00      	ble.n	801395e <_printf_float+0x2e2>
 801395c:	001f      	movs	r7, r3
 801395e:	2f00      	cmp	r7, #0
 8013960:	dd08      	ble.n	8013974 <_printf_float+0x2f8>
 8013962:	003b      	movs	r3, r7
 8013964:	002a      	movs	r2, r5
 8013966:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013968:	9809      	ldr	r0, [sp, #36]	; 0x24
 801396a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801396c:	47b0      	blx	r6
 801396e:	1c43      	adds	r3, r0, #1
 8013970:	d100      	bne.n	8013974 <_printf_float+0x2f8>
 8013972:	e6de      	b.n	8013732 <_printf_float+0xb6>
 8013974:	2300      	movs	r3, #0
 8013976:	930d      	str	r3, [sp, #52]	; 0x34
 8013978:	43fb      	mvns	r3, r7
 801397a:	17db      	asrs	r3, r3, #31
 801397c:	930f      	str	r3, [sp, #60]	; 0x3c
 801397e:	e018      	b.n	80139b2 <_printf_float+0x336>
 8013980:	7fefffff 	.word	0x7fefffff
 8013984:	0801a51e 	.word	0x0801a51e
 8013988:	0801a51a 	.word	0x0801a51a
 801398c:	0801a526 	.word	0x0801a526
 8013990:	0801a522 	.word	0x0801a522
 8013994:	0801a52a 	.word	0x0801a52a
 8013998:	0022      	movs	r2, r4
 801399a:	2301      	movs	r3, #1
 801399c:	321a      	adds	r2, #26
 801399e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139a2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80139a4:	47b0      	blx	r6
 80139a6:	1c43      	adds	r3, r0, #1
 80139a8:	d100      	bne.n	80139ac <_printf_float+0x330>
 80139aa:	e6c2      	b.n	8013732 <_printf_float+0xb6>
 80139ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139ae:	3301      	adds	r3, #1
 80139b0:	930d      	str	r3, [sp, #52]	; 0x34
 80139b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139b4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80139b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80139b8:	403b      	ands	r3, r7
 80139ba:	1af3      	subs	r3, r6, r3
 80139bc:	4293      	cmp	r3, r2
 80139be:	dceb      	bgt.n	8013998 <_printf_float+0x31c>
 80139c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80139c4:	19ad      	adds	r5, r5, r6
 80139c6:	4293      	cmp	r3, r2
 80139c8:	db10      	blt.n	80139ec <_printf_float+0x370>
 80139ca:	6823      	ldr	r3, [r4, #0]
 80139cc:	07db      	lsls	r3, r3, #31
 80139ce:	d40d      	bmi.n	80139ec <_printf_float+0x370>
 80139d0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80139d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139d4:	1bbe      	subs	r6, r7, r6
 80139d6:	1aff      	subs	r7, r7, r3
 80139d8:	42b7      	cmp	r7, r6
 80139da:	dd00      	ble.n	80139de <_printf_float+0x362>
 80139dc:	0037      	movs	r7, r6
 80139de:	2f00      	cmp	r7, #0
 80139e0:	dc0d      	bgt.n	80139fe <_printf_float+0x382>
 80139e2:	43fe      	mvns	r6, r7
 80139e4:	17f3      	asrs	r3, r6, #31
 80139e6:	2500      	movs	r5, #0
 80139e8:	930c      	str	r3, [sp, #48]	; 0x30
 80139ea:	e01c      	b.n	8013a26 <_printf_float+0x3aa>
 80139ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80139ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80139f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80139f6:	47b8      	blx	r7
 80139f8:	1c43      	adds	r3, r0, #1
 80139fa:	d1e9      	bne.n	80139d0 <_printf_float+0x354>
 80139fc:	e699      	b.n	8013732 <_printf_float+0xb6>
 80139fe:	003b      	movs	r3, r7
 8013a00:	002a      	movs	r2, r5
 8013a02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a06:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013a08:	47a8      	blx	r5
 8013a0a:	1c43      	adds	r3, r0, #1
 8013a0c:	d1e9      	bne.n	80139e2 <_printf_float+0x366>
 8013a0e:	e690      	b.n	8013732 <_printf_float+0xb6>
 8013a10:	0022      	movs	r2, r4
 8013a12:	2301      	movs	r3, #1
 8013a14:	321a      	adds	r2, #26
 8013a16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a1a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013a1c:	47b0      	blx	r6
 8013a1e:	1c43      	adds	r3, r0, #1
 8013a20:	d100      	bne.n	8013a24 <_printf_float+0x3a8>
 8013a22:	e686      	b.n	8013732 <_printf_float+0xb6>
 8013a24:	3501      	adds	r5, #1
 8013a26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013a2c:	1a9b      	subs	r3, r3, r2
 8013a2e:	003a      	movs	r2, r7
 8013a30:	400a      	ands	r2, r1
 8013a32:	1a9b      	subs	r3, r3, r2
 8013a34:	42ab      	cmp	r3, r5
 8013a36:	dceb      	bgt.n	8013a10 <_printf_float+0x394>
 8013a38:	e744      	b.n	80138c4 <_printf_float+0x248>
 8013a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a3c:	2b01      	cmp	r3, #1
 8013a3e:	dc02      	bgt.n	8013a46 <_printf_float+0x3ca>
 8013a40:	2301      	movs	r3, #1
 8013a42:	421a      	tst	r2, r3
 8013a44:	d032      	beq.n	8013aac <_printf_float+0x430>
 8013a46:	2301      	movs	r3, #1
 8013a48:	002a      	movs	r2, r5
 8013a4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a4e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013a50:	47b8      	blx	r7
 8013a52:	1c43      	adds	r3, r0, #1
 8013a54:	d100      	bne.n	8013a58 <_printf_float+0x3dc>
 8013a56:	e66c      	b.n	8013732 <_printf_float+0xb6>
 8013a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a60:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013a62:	3501      	adds	r5, #1
 8013a64:	47b8      	blx	r7
 8013a66:	1c43      	adds	r3, r0, #1
 8013a68:	d100      	bne.n	8013a6c <_printf_float+0x3f0>
 8013a6a:	e662      	b.n	8013732 <_printf_float+0xb6>
 8013a6c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013a6e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a72:	2200      	movs	r2, #0
 8013a74:	1e5f      	subs	r7, r3, #1
 8013a76:	2300      	movs	r3, #0
 8013a78:	f7ec fce6 	bl	8000448 <__aeabi_dcmpeq>
 8013a7c:	003b      	movs	r3, r7
 8013a7e:	2800      	cmp	r0, #0
 8013a80:	d014      	beq.n	8013aac <_printf_float+0x430>
 8013a82:	2500      	movs	r5, #0
 8013a84:	e00a      	b.n	8013a9c <_printf_float+0x420>
 8013a86:	0022      	movs	r2, r4
 8013a88:	2301      	movs	r3, #1
 8013a8a:	321a      	adds	r2, #26
 8013a8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a90:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013a92:	47b8      	blx	r7
 8013a94:	1c43      	adds	r3, r0, #1
 8013a96:	d100      	bne.n	8013a9a <_printf_float+0x41e>
 8013a98:	e64b      	b.n	8013732 <_printf_float+0xb6>
 8013a9a:	3501      	adds	r5, #1
 8013a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a9e:	3b01      	subs	r3, #1
 8013aa0:	42ab      	cmp	r3, r5
 8013aa2:	dcf0      	bgt.n	8013a86 <_printf_float+0x40a>
 8013aa4:	0022      	movs	r2, r4
 8013aa6:	0033      	movs	r3, r6
 8013aa8:	3250      	adds	r2, #80	; 0x50
 8013aaa:	e6db      	b.n	8013864 <_printf_float+0x1e8>
 8013aac:	002a      	movs	r2, r5
 8013aae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ab2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013ab4:	47a8      	blx	r5
 8013ab6:	1c43      	adds	r3, r0, #1
 8013ab8:	d1f4      	bne.n	8013aa4 <_printf_float+0x428>
 8013aba:	e63a      	b.n	8013732 <_printf_float+0xb6>
 8013abc:	0022      	movs	r2, r4
 8013abe:	2301      	movs	r3, #1
 8013ac0:	3219      	adds	r2, #25
 8013ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ac6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013ac8:	47b0      	blx	r6
 8013aca:	1c43      	adds	r3, r0, #1
 8013acc:	d100      	bne.n	8013ad0 <_printf_float+0x454>
 8013ace:	e630      	b.n	8013732 <_printf_float+0xb6>
 8013ad0:	3501      	adds	r5, #1
 8013ad2:	68e3      	ldr	r3, [r4, #12]
 8013ad4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013ad6:	1a9b      	subs	r3, r3, r2
 8013ad8:	42ab      	cmp	r3, r5
 8013ada:	dcef      	bgt.n	8013abc <_printf_float+0x440>
 8013adc:	e6f6      	b.n	80138cc <_printf_float+0x250>
 8013ade:	2500      	movs	r5, #0
 8013ae0:	e7f7      	b.n	8013ad2 <_printf_float+0x456>
 8013ae2:	2a00      	cmp	r2, #0
 8013ae4:	d100      	bne.n	8013ae8 <_printf_float+0x46c>
 8013ae6:	e689      	b.n	80137fc <_printf_float+0x180>
 8013ae8:	2100      	movs	r1, #0
 8013aea:	9106      	str	r1, [sp, #24]
 8013aec:	a912      	add	r1, sp, #72	; 0x48
 8013aee:	9105      	str	r1, [sp, #20]
 8013af0:	a911      	add	r1, sp, #68	; 0x44
 8013af2:	9103      	str	r1, [sp, #12]
 8013af4:	2123      	movs	r1, #35	; 0x23
 8013af6:	a808      	add	r0, sp, #32
 8013af8:	1809      	adds	r1, r1, r0
 8013afa:	6023      	str	r3, [r4, #0]
 8013afc:	9301      	str	r3, [sp, #4]
 8013afe:	9200      	str	r2, [sp, #0]
 8013b00:	002b      	movs	r3, r5
 8013b02:	9704      	str	r7, [sp, #16]
 8013b04:	9102      	str	r1, [sp, #8]
 8013b06:	0032      	movs	r2, r6
 8013b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b0a:	f7ff fd1b 	bl	8013544 <__cvt>
 8013b0e:	0005      	movs	r5, r0
 8013b10:	e645      	b.n	801379e <_printf_float+0x122>
 8013b12:	46c0      	nop			; (mov r8, r8)

08013b14 <_printf_common>:
 8013b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b16:	0015      	movs	r5, r2
 8013b18:	9301      	str	r3, [sp, #4]
 8013b1a:	688a      	ldr	r2, [r1, #8]
 8013b1c:	690b      	ldr	r3, [r1, #16]
 8013b1e:	9000      	str	r0, [sp, #0]
 8013b20:	000c      	movs	r4, r1
 8013b22:	4293      	cmp	r3, r2
 8013b24:	da00      	bge.n	8013b28 <_printf_common+0x14>
 8013b26:	0013      	movs	r3, r2
 8013b28:	0022      	movs	r2, r4
 8013b2a:	602b      	str	r3, [r5, #0]
 8013b2c:	3243      	adds	r2, #67	; 0x43
 8013b2e:	7812      	ldrb	r2, [r2, #0]
 8013b30:	2a00      	cmp	r2, #0
 8013b32:	d001      	beq.n	8013b38 <_printf_common+0x24>
 8013b34:	3301      	adds	r3, #1
 8013b36:	602b      	str	r3, [r5, #0]
 8013b38:	6823      	ldr	r3, [r4, #0]
 8013b3a:	069b      	lsls	r3, r3, #26
 8013b3c:	d502      	bpl.n	8013b44 <_printf_common+0x30>
 8013b3e:	682b      	ldr	r3, [r5, #0]
 8013b40:	3302      	adds	r3, #2
 8013b42:	602b      	str	r3, [r5, #0]
 8013b44:	2706      	movs	r7, #6
 8013b46:	6823      	ldr	r3, [r4, #0]
 8013b48:	401f      	ands	r7, r3
 8013b4a:	d027      	beq.n	8013b9c <_printf_common+0x88>
 8013b4c:	0023      	movs	r3, r4
 8013b4e:	3343      	adds	r3, #67	; 0x43
 8013b50:	781b      	ldrb	r3, [r3, #0]
 8013b52:	1e5a      	subs	r2, r3, #1
 8013b54:	4193      	sbcs	r3, r2
 8013b56:	6822      	ldr	r2, [r4, #0]
 8013b58:	0692      	lsls	r2, r2, #26
 8013b5a:	d430      	bmi.n	8013bbe <_printf_common+0xaa>
 8013b5c:	0022      	movs	r2, r4
 8013b5e:	9901      	ldr	r1, [sp, #4]
 8013b60:	3243      	adds	r2, #67	; 0x43
 8013b62:	9800      	ldr	r0, [sp, #0]
 8013b64:	9e08      	ldr	r6, [sp, #32]
 8013b66:	47b0      	blx	r6
 8013b68:	1c43      	adds	r3, r0, #1
 8013b6a:	d025      	beq.n	8013bb8 <_printf_common+0xa4>
 8013b6c:	2306      	movs	r3, #6
 8013b6e:	6820      	ldr	r0, [r4, #0]
 8013b70:	682a      	ldr	r2, [r5, #0]
 8013b72:	68e1      	ldr	r1, [r4, #12]
 8013b74:	4003      	ands	r3, r0
 8013b76:	2500      	movs	r5, #0
 8013b78:	2b04      	cmp	r3, #4
 8013b7a:	d103      	bne.n	8013b84 <_printf_common+0x70>
 8013b7c:	1a8d      	subs	r5, r1, r2
 8013b7e:	43eb      	mvns	r3, r5
 8013b80:	17db      	asrs	r3, r3, #31
 8013b82:	401d      	ands	r5, r3
 8013b84:	68a3      	ldr	r3, [r4, #8]
 8013b86:	6922      	ldr	r2, [r4, #16]
 8013b88:	4293      	cmp	r3, r2
 8013b8a:	dd01      	ble.n	8013b90 <_printf_common+0x7c>
 8013b8c:	1a9b      	subs	r3, r3, r2
 8013b8e:	18ed      	adds	r5, r5, r3
 8013b90:	2700      	movs	r7, #0
 8013b92:	42bd      	cmp	r5, r7
 8013b94:	d120      	bne.n	8013bd8 <_printf_common+0xc4>
 8013b96:	2000      	movs	r0, #0
 8013b98:	e010      	b.n	8013bbc <_printf_common+0xa8>
 8013b9a:	3701      	adds	r7, #1
 8013b9c:	68e3      	ldr	r3, [r4, #12]
 8013b9e:	682a      	ldr	r2, [r5, #0]
 8013ba0:	1a9b      	subs	r3, r3, r2
 8013ba2:	42bb      	cmp	r3, r7
 8013ba4:	ddd2      	ble.n	8013b4c <_printf_common+0x38>
 8013ba6:	0022      	movs	r2, r4
 8013ba8:	2301      	movs	r3, #1
 8013baa:	3219      	adds	r2, #25
 8013bac:	9901      	ldr	r1, [sp, #4]
 8013bae:	9800      	ldr	r0, [sp, #0]
 8013bb0:	9e08      	ldr	r6, [sp, #32]
 8013bb2:	47b0      	blx	r6
 8013bb4:	1c43      	adds	r3, r0, #1
 8013bb6:	d1f0      	bne.n	8013b9a <_printf_common+0x86>
 8013bb8:	2001      	movs	r0, #1
 8013bba:	4240      	negs	r0, r0
 8013bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013bbe:	2030      	movs	r0, #48	; 0x30
 8013bc0:	18e1      	adds	r1, r4, r3
 8013bc2:	3143      	adds	r1, #67	; 0x43
 8013bc4:	7008      	strb	r0, [r1, #0]
 8013bc6:	0021      	movs	r1, r4
 8013bc8:	1c5a      	adds	r2, r3, #1
 8013bca:	3145      	adds	r1, #69	; 0x45
 8013bcc:	7809      	ldrb	r1, [r1, #0]
 8013bce:	18a2      	adds	r2, r4, r2
 8013bd0:	3243      	adds	r2, #67	; 0x43
 8013bd2:	3302      	adds	r3, #2
 8013bd4:	7011      	strb	r1, [r2, #0]
 8013bd6:	e7c1      	b.n	8013b5c <_printf_common+0x48>
 8013bd8:	0022      	movs	r2, r4
 8013bda:	2301      	movs	r3, #1
 8013bdc:	321a      	adds	r2, #26
 8013bde:	9901      	ldr	r1, [sp, #4]
 8013be0:	9800      	ldr	r0, [sp, #0]
 8013be2:	9e08      	ldr	r6, [sp, #32]
 8013be4:	47b0      	blx	r6
 8013be6:	1c43      	adds	r3, r0, #1
 8013be8:	d0e6      	beq.n	8013bb8 <_printf_common+0xa4>
 8013bea:	3701      	adds	r7, #1
 8013bec:	e7d1      	b.n	8013b92 <_printf_common+0x7e>
	...

08013bf0 <_printf_i>:
 8013bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bf2:	b089      	sub	sp, #36	; 0x24
 8013bf4:	9204      	str	r2, [sp, #16]
 8013bf6:	000a      	movs	r2, r1
 8013bf8:	3243      	adds	r2, #67	; 0x43
 8013bfa:	9305      	str	r3, [sp, #20]
 8013bfc:	9003      	str	r0, [sp, #12]
 8013bfe:	9202      	str	r2, [sp, #8]
 8013c00:	7e0a      	ldrb	r2, [r1, #24]
 8013c02:	000c      	movs	r4, r1
 8013c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c06:	2a6e      	cmp	r2, #110	; 0x6e
 8013c08:	d100      	bne.n	8013c0c <_printf_i+0x1c>
 8013c0a:	e086      	b.n	8013d1a <_printf_i+0x12a>
 8013c0c:	d81f      	bhi.n	8013c4e <_printf_i+0x5e>
 8013c0e:	2a63      	cmp	r2, #99	; 0x63
 8013c10:	d033      	beq.n	8013c7a <_printf_i+0x8a>
 8013c12:	d808      	bhi.n	8013c26 <_printf_i+0x36>
 8013c14:	2a00      	cmp	r2, #0
 8013c16:	d100      	bne.n	8013c1a <_printf_i+0x2a>
 8013c18:	e08c      	b.n	8013d34 <_printf_i+0x144>
 8013c1a:	2a58      	cmp	r2, #88	; 0x58
 8013c1c:	d04d      	beq.n	8013cba <_printf_i+0xca>
 8013c1e:	0025      	movs	r5, r4
 8013c20:	3542      	adds	r5, #66	; 0x42
 8013c22:	702a      	strb	r2, [r5, #0]
 8013c24:	e030      	b.n	8013c88 <_printf_i+0x98>
 8013c26:	2a64      	cmp	r2, #100	; 0x64
 8013c28:	d001      	beq.n	8013c2e <_printf_i+0x3e>
 8013c2a:	2a69      	cmp	r2, #105	; 0x69
 8013c2c:	d1f7      	bne.n	8013c1e <_printf_i+0x2e>
 8013c2e:	6819      	ldr	r1, [r3, #0]
 8013c30:	6825      	ldr	r5, [r4, #0]
 8013c32:	1d0a      	adds	r2, r1, #4
 8013c34:	0628      	lsls	r0, r5, #24
 8013c36:	d529      	bpl.n	8013c8c <_printf_i+0x9c>
 8013c38:	6808      	ldr	r0, [r1, #0]
 8013c3a:	601a      	str	r2, [r3, #0]
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	da03      	bge.n	8013c48 <_printf_i+0x58>
 8013c40:	232d      	movs	r3, #45	; 0x2d
 8013c42:	9a02      	ldr	r2, [sp, #8]
 8013c44:	4240      	negs	r0, r0
 8013c46:	7013      	strb	r3, [r2, #0]
 8013c48:	4e6b      	ldr	r6, [pc, #428]	; (8013df8 <_printf_i+0x208>)
 8013c4a:	270a      	movs	r7, #10
 8013c4c:	e04f      	b.n	8013cee <_printf_i+0xfe>
 8013c4e:	2a73      	cmp	r2, #115	; 0x73
 8013c50:	d074      	beq.n	8013d3c <_printf_i+0x14c>
 8013c52:	d808      	bhi.n	8013c66 <_printf_i+0x76>
 8013c54:	2a6f      	cmp	r2, #111	; 0x6f
 8013c56:	d01f      	beq.n	8013c98 <_printf_i+0xa8>
 8013c58:	2a70      	cmp	r2, #112	; 0x70
 8013c5a:	d1e0      	bne.n	8013c1e <_printf_i+0x2e>
 8013c5c:	2220      	movs	r2, #32
 8013c5e:	6809      	ldr	r1, [r1, #0]
 8013c60:	430a      	orrs	r2, r1
 8013c62:	6022      	str	r2, [r4, #0]
 8013c64:	e003      	b.n	8013c6e <_printf_i+0x7e>
 8013c66:	2a75      	cmp	r2, #117	; 0x75
 8013c68:	d016      	beq.n	8013c98 <_printf_i+0xa8>
 8013c6a:	2a78      	cmp	r2, #120	; 0x78
 8013c6c:	d1d7      	bne.n	8013c1e <_printf_i+0x2e>
 8013c6e:	0022      	movs	r2, r4
 8013c70:	2178      	movs	r1, #120	; 0x78
 8013c72:	3245      	adds	r2, #69	; 0x45
 8013c74:	7011      	strb	r1, [r2, #0]
 8013c76:	4e61      	ldr	r6, [pc, #388]	; (8013dfc <_printf_i+0x20c>)
 8013c78:	e022      	b.n	8013cc0 <_printf_i+0xd0>
 8013c7a:	0025      	movs	r5, r4
 8013c7c:	681a      	ldr	r2, [r3, #0]
 8013c7e:	3542      	adds	r5, #66	; 0x42
 8013c80:	1d11      	adds	r1, r2, #4
 8013c82:	6019      	str	r1, [r3, #0]
 8013c84:	6813      	ldr	r3, [r2, #0]
 8013c86:	702b      	strb	r3, [r5, #0]
 8013c88:	2301      	movs	r3, #1
 8013c8a:	e065      	b.n	8013d58 <_printf_i+0x168>
 8013c8c:	6808      	ldr	r0, [r1, #0]
 8013c8e:	601a      	str	r2, [r3, #0]
 8013c90:	0669      	lsls	r1, r5, #25
 8013c92:	d5d3      	bpl.n	8013c3c <_printf_i+0x4c>
 8013c94:	b200      	sxth	r0, r0
 8013c96:	e7d1      	b.n	8013c3c <_printf_i+0x4c>
 8013c98:	6819      	ldr	r1, [r3, #0]
 8013c9a:	6825      	ldr	r5, [r4, #0]
 8013c9c:	1d08      	adds	r0, r1, #4
 8013c9e:	6018      	str	r0, [r3, #0]
 8013ca0:	6808      	ldr	r0, [r1, #0]
 8013ca2:	062e      	lsls	r6, r5, #24
 8013ca4:	d505      	bpl.n	8013cb2 <_printf_i+0xc2>
 8013ca6:	4e54      	ldr	r6, [pc, #336]	; (8013df8 <_printf_i+0x208>)
 8013ca8:	2708      	movs	r7, #8
 8013caa:	2a6f      	cmp	r2, #111	; 0x6f
 8013cac:	d01b      	beq.n	8013ce6 <_printf_i+0xf6>
 8013cae:	270a      	movs	r7, #10
 8013cb0:	e019      	b.n	8013ce6 <_printf_i+0xf6>
 8013cb2:	066d      	lsls	r5, r5, #25
 8013cb4:	d5f7      	bpl.n	8013ca6 <_printf_i+0xb6>
 8013cb6:	b280      	uxth	r0, r0
 8013cb8:	e7f5      	b.n	8013ca6 <_printf_i+0xb6>
 8013cba:	3145      	adds	r1, #69	; 0x45
 8013cbc:	4e4e      	ldr	r6, [pc, #312]	; (8013df8 <_printf_i+0x208>)
 8013cbe:	700a      	strb	r2, [r1, #0]
 8013cc0:	6818      	ldr	r0, [r3, #0]
 8013cc2:	6822      	ldr	r2, [r4, #0]
 8013cc4:	1d01      	adds	r1, r0, #4
 8013cc6:	6800      	ldr	r0, [r0, #0]
 8013cc8:	6019      	str	r1, [r3, #0]
 8013cca:	0615      	lsls	r5, r2, #24
 8013ccc:	d521      	bpl.n	8013d12 <_printf_i+0x122>
 8013cce:	07d3      	lsls	r3, r2, #31
 8013cd0:	d502      	bpl.n	8013cd8 <_printf_i+0xe8>
 8013cd2:	2320      	movs	r3, #32
 8013cd4:	431a      	orrs	r2, r3
 8013cd6:	6022      	str	r2, [r4, #0]
 8013cd8:	2710      	movs	r7, #16
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	d103      	bne.n	8013ce6 <_printf_i+0xf6>
 8013cde:	2320      	movs	r3, #32
 8013ce0:	6822      	ldr	r2, [r4, #0]
 8013ce2:	439a      	bics	r2, r3
 8013ce4:	6022      	str	r2, [r4, #0]
 8013ce6:	0023      	movs	r3, r4
 8013ce8:	2200      	movs	r2, #0
 8013cea:	3343      	adds	r3, #67	; 0x43
 8013cec:	701a      	strb	r2, [r3, #0]
 8013cee:	6863      	ldr	r3, [r4, #4]
 8013cf0:	60a3      	str	r3, [r4, #8]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	db58      	blt.n	8013da8 <_printf_i+0x1b8>
 8013cf6:	2204      	movs	r2, #4
 8013cf8:	6821      	ldr	r1, [r4, #0]
 8013cfa:	4391      	bics	r1, r2
 8013cfc:	6021      	str	r1, [r4, #0]
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	d154      	bne.n	8013dac <_printf_i+0x1bc>
 8013d02:	9d02      	ldr	r5, [sp, #8]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d05a      	beq.n	8013dbe <_printf_i+0x1ce>
 8013d08:	0025      	movs	r5, r4
 8013d0a:	7833      	ldrb	r3, [r6, #0]
 8013d0c:	3542      	adds	r5, #66	; 0x42
 8013d0e:	702b      	strb	r3, [r5, #0]
 8013d10:	e055      	b.n	8013dbe <_printf_i+0x1ce>
 8013d12:	0655      	lsls	r5, r2, #25
 8013d14:	d5db      	bpl.n	8013cce <_printf_i+0xde>
 8013d16:	b280      	uxth	r0, r0
 8013d18:	e7d9      	b.n	8013cce <_printf_i+0xde>
 8013d1a:	681a      	ldr	r2, [r3, #0]
 8013d1c:	680d      	ldr	r5, [r1, #0]
 8013d1e:	1d10      	adds	r0, r2, #4
 8013d20:	6949      	ldr	r1, [r1, #20]
 8013d22:	6018      	str	r0, [r3, #0]
 8013d24:	6813      	ldr	r3, [r2, #0]
 8013d26:	062e      	lsls	r6, r5, #24
 8013d28:	d501      	bpl.n	8013d2e <_printf_i+0x13e>
 8013d2a:	6019      	str	r1, [r3, #0]
 8013d2c:	e002      	b.n	8013d34 <_printf_i+0x144>
 8013d2e:	066d      	lsls	r5, r5, #25
 8013d30:	d5fb      	bpl.n	8013d2a <_printf_i+0x13a>
 8013d32:	8019      	strh	r1, [r3, #0]
 8013d34:	2300      	movs	r3, #0
 8013d36:	9d02      	ldr	r5, [sp, #8]
 8013d38:	6123      	str	r3, [r4, #16]
 8013d3a:	e04f      	b.n	8013ddc <_printf_i+0x1ec>
 8013d3c:	681a      	ldr	r2, [r3, #0]
 8013d3e:	1d11      	adds	r1, r2, #4
 8013d40:	6019      	str	r1, [r3, #0]
 8013d42:	6815      	ldr	r5, [r2, #0]
 8013d44:	2100      	movs	r1, #0
 8013d46:	6862      	ldr	r2, [r4, #4]
 8013d48:	0028      	movs	r0, r5
 8013d4a:	f002 fc21 	bl	8016590 <memchr>
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	d001      	beq.n	8013d56 <_printf_i+0x166>
 8013d52:	1b40      	subs	r0, r0, r5
 8013d54:	6060      	str	r0, [r4, #4]
 8013d56:	6863      	ldr	r3, [r4, #4]
 8013d58:	6123      	str	r3, [r4, #16]
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	9a02      	ldr	r2, [sp, #8]
 8013d5e:	7013      	strb	r3, [r2, #0]
 8013d60:	e03c      	b.n	8013ddc <_printf_i+0x1ec>
 8013d62:	6923      	ldr	r3, [r4, #16]
 8013d64:	002a      	movs	r2, r5
 8013d66:	9904      	ldr	r1, [sp, #16]
 8013d68:	9803      	ldr	r0, [sp, #12]
 8013d6a:	9d05      	ldr	r5, [sp, #20]
 8013d6c:	47a8      	blx	r5
 8013d6e:	1c43      	adds	r3, r0, #1
 8013d70:	d03e      	beq.n	8013df0 <_printf_i+0x200>
 8013d72:	6823      	ldr	r3, [r4, #0]
 8013d74:	079b      	lsls	r3, r3, #30
 8013d76:	d415      	bmi.n	8013da4 <_printf_i+0x1b4>
 8013d78:	9b07      	ldr	r3, [sp, #28]
 8013d7a:	68e0      	ldr	r0, [r4, #12]
 8013d7c:	4298      	cmp	r0, r3
 8013d7e:	da39      	bge.n	8013df4 <_printf_i+0x204>
 8013d80:	0018      	movs	r0, r3
 8013d82:	e037      	b.n	8013df4 <_printf_i+0x204>
 8013d84:	0022      	movs	r2, r4
 8013d86:	2301      	movs	r3, #1
 8013d88:	3219      	adds	r2, #25
 8013d8a:	9904      	ldr	r1, [sp, #16]
 8013d8c:	9803      	ldr	r0, [sp, #12]
 8013d8e:	9e05      	ldr	r6, [sp, #20]
 8013d90:	47b0      	blx	r6
 8013d92:	1c43      	adds	r3, r0, #1
 8013d94:	d02c      	beq.n	8013df0 <_printf_i+0x200>
 8013d96:	3501      	adds	r5, #1
 8013d98:	68e3      	ldr	r3, [r4, #12]
 8013d9a:	9a07      	ldr	r2, [sp, #28]
 8013d9c:	1a9b      	subs	r3, r3, r2
 8013d9e:	42ab      	cmp	r3, r5
 8013da0:	dcf0      	bgt.n	8013d84 <_printf_i+0x194>
 8013da2:	e7e9      	b.n	8013d78 <_printf_i+0x188>
 8013da4:	2500      	movs	r5, #0
 8013da6:	e7f7      	b.n	8013d98 <_printf_i+0x1a8>
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d0ad      	beq.n	8013d08 <_printf_i+0x118>
 8013dac:	9d02      	ldr	r5, [sp, #8]
 8013dae:	0039      	movs	r1, r7
 8013db0:	f7ec fa4a 	bl	8000248 <__aeabi_uidivmod>
 8013db4:	5c73      	ldrb	r3, [r6, r1]
 8013db6:	3d01      	subs	r5, #1
 8013db8:	702b      	strb	r3, [r5, #0]
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	d1f7      	bne.n	8013dae <_printf_i+0x1be>
 8013dbe:	2f08      	cmp	r7, #8
 8013dc0:	d109      	bne.n	8013dd6 <_printf_i+0x1e6>
 8013dc2:	6823      	ldr	r3, [r4, #0]
 8013dc4:	07db      	lsls	r3, r3, #31
 8013dc6:	d506      	bpl.n	8013dd6 <_printf_i+0x1e6>
 8013dc8:	6863      	ldr	r3, [r4, #4]
 8013dca:	6922      	ldr	r2, [r4, #16]
 8013dcc:	4293      	cmp	r3, r2
 8013dce:	dc02      	bgt.n	8013dd6 <_printf_i+0x1e6>
 8013dd0:	2330      	movs	r3, #48	; 0x30
 8013dd2:	3d01      	subs	r5, #1
 8013dd4:	702b      	strb	r3, [r5, #0]
 8013dd6:	9b02      	ldr	r3, [sp, #8]
 8013dd8:	1b5b      	subs	r3, r3, r5
 8013dda:	6123      	str	r3, [r4, #16]
 8013ddc:	9b05      	ldr	r3, [sp, #20]
 8013dde:	aa07      	add	r2, sp, #28
 8013de0:	9300      	str	r3, [sp, #0]
 8013de2:	0021      	movs	r1, r4
 8013de4:	9b04      	ldr	r3, [sp, #16]
 8013de6:	9803      	ldr	r0, [sp, #12]
 8013de8:	f7ff fe94 	bl	8013b14 <_printf_common>
 8013dec:	1c43      	adds	r3, r0, #1
 8013dee:	d1b8      	bne.n	8013d62 <_printf_i+0x172>
 8013df0:	2001      	movs	r0, #1
 8013df2:	4240      	negs	r0, r0
 8013df4:	b009      	add	sp, #36	; 0x24
 8013df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013df8:	0801a52c 	.word	0x0801a52c
 8013dfc:	0801a53d 	.word	0x0801a53d

08013e00 <_scanf_float>:
 8013e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e02:	b08b      	sub	sp, #44	; 0x2c
 8013e04:	9002      	str	r0, [sp, #8]
 8013e06:	9200      	str	r2, [sp, #0]
 8013e08:	2000      	movs	r0, #0
 8013e0a:	22ae      	movs	r2, #174	; 0xae
 8013e0c:	9305      	str	r3, [sp, #20]
 8013e0e:	688b      	ldr	r3, [r1, #8]
 8013e10:	000e      	movs	r6, r1
 8013e12:	1e59      	subs	r1, r3, #1
 8013e14:	0052      	lsls	r2, r2, #1
 8013e16:	9004      	str	r0, [sp, #16]
 8013e18:	4291      	cmp	r1, r2
 8013e1a:	d905      	bls.n	8013e28 <_scanf_float+0x28>
 8013e1c:	3b5e      	subs	r3, #94	; 0x5e
 8013e1e:	3bff      	subs	r3, #255	; 0xff
 8013e20:	9304      	str	r3, [sp, #16]
 8013e22:	235e      	movs	r3, #94	; 0x5e
 8013e24:	33ff      	adds	r3, #255	; 0xff
 8013e26:	60b3      	str	r3, [r6, #8]
 8013e28:	23f0      	movs	r3, #240	; 0xf0
 8013e2a:	6832      	ldr	r2, [r6, #0]
 8013e2c:	00db      	lsls	r3, r3, #3
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	6033      	str	r3, [r6, #0]
 8013e32:	0033      	movs	r3, r6
 8013e34:	2700      	movs	r7, #0
 8013e36:	331c      	adds	r3, #28
 8013e38:	001d      	movs	r5, r3
 8013e3a:	003c      	movs	r4, r7
 8013e3c:	9303      	str	r3, [sp, #12]
 8013e3e:	9708      	str	r7, [sp, #32]
 8013e40:	9707      	str	r7, [sp, #28]
 8013e42:	9701      	str	r7, [sp, #4]
 8013e44:	9706      	str	r7, [sp, #24]
 8013e46:	68b2      	ldr	r2, [r6, #8]
 8013e48:	2a00      	cmp	r2, #0
 8013e4a:	d013      	beq.n	8013e74 <_scanf_float+0x74>
 8013e4c:	9b00      	ldr	r3, [sp, #0]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	9309      	str	r3, [sp, #36]	; 0x24
 8013e52:	781b      	ldrb	r3, [r3, #0]
 8013e54:	2b49      	cmp	r3, #73	; 0x49
 8013e56:	d100      	bne.n	8013e5a <_scanf_float+0x5a>
 8013e58:	e07c      	b.n	8013f54 <_scanf_float+0x154>
 8013e5a:	d854      	bhi.n	8013f06 <_scanf_float+0x106>
 8013e5c:	2b39      	cmp	r3, #57	; 0x39
 8013e5e:	d847      	bhi.n	8013ef0 <_scanf_float+0xf0>
 8013e60:	2b31      	cmp	r3, #49	; 0x31
 8013e62:	d300      	bcc.n	8013e66 <_scanf_float+0x66>
 8013e64:	e094      	b.n	8013f90 <_scanf_float+0x190>
 8013e66:	2b2d      	cmp	r3, #45	; 0x2d
 8013e68:	d100      	bne.n	8013e6c <_scanf_float+0x6c>
 8013e6a:	e09c      	b.n	8013fa6 <_scanf_float+0x1a6>
 8013e6c:	d817      	bhi.n	8013e9e <_scanf_float+0x9e>
 8013e6e:	2b2b      	cmp	r3, #43	; 0x2b
 8013e70:	d100      	bne.n	8013e74 <_scanf_float+0x74>
 8013e72:	e098      	b.n	8013fa6 <_scanf_float+0x1a6>
 8013e74:	9b01      	ldr	r3, [sp, #4]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d003      	beq.n	8013e82 <_scanf_float+0x82>
 8013e7a:	6832      	ldr	r2, [r6, #0]
 8013e7c:	4b9b      	ldr	r3, [pc, #620]	; (80140ec <_scanf_float+0x2ec>)
 8013e7e:	4013      	ands	r3, r2
 8013e80:	6033      	str	r3, [r6, #0]
 8013e82:	3c01      	subs	r4, #1
 8013e84:	2c01      	cmp	r4, #1
 8013e86:	d900      	bls.n	8013e8a <_scanf_float+0x8a>
 8013e88:	e0ee      	b.n	8014068 <_scanf_float+0x268>
 8013e8a:	24be      	movs	r4, #190	; 0xbe
 8013e8c:	0064      	lsls	r4, r4, #1
 8013e8e:	9b03      	ldr	r3, [sp, #12]
 8013e90:	429d      	cmp	r5, r3
 8013e92:	d900      	bls.n	8013e96 <_scanf_float+0x96>
 8013e94:	e0de      	b.n	8014054 <_scanf_float+0x254>
 8013e96:	2701      	movs	r7, #1
 8013e98:	0038      	movs	r0, r7
 8013e9a:	b00b      	add	sp, #44	; 0x2c
 8013e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8013ea0:	d100      	bne.n	8013ea4 <_scanf_float+0xa4>
 8013ea2:	e0a2      	b.n	8013fea <_scanf_float+0x1ea>
 8013ea4:	2b30      	cmp	r3, #48	; 0x30
 8013ea6:	d1e5      	bne.n	8013e74 <_scanf_float+0x74>
 8013ea8:	6831      	ldr	r1, [r6, #0]
 8013eaa:	05c8      	lsls	r0, r1, #23
 8013eac:	d570      	bpl.n	8013f90 <_scanf_float+0x190>
 8013eae:	2380      	movs	r3, #128	; 0x80
 8013eb0:	4399      	bics	r1, r3
 8013eb2:	9b01      	ldr	r3, [sp, #4]
 8013eb4:	6031      	str	r1, [r6, #0]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	9301      	str	r3, [sp, #4]
 8013eba:	9b04      	ldr	r3, [sp, #16]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d003      	beq.n	8013ec8 <_scanf_float+0xc8>
 8013ec0:	3b01      	subs	r3, #1
 8013ec2:	3201      	adds	r2, #1
 8013ec4:	9304      	str	r3, [sp, #16]
 8013ec6:	60b2      	str	r2, [r6, #8]
 8013ec8:	68b3      	ldr	r3, [r6, #8]
 8013eca:	9a00      	ldr	r2, [sp, #0]
 8013ecc:	3b01      	subs	r3, #1
 8013ece:	60b3      	str	r3, [r6, #8]
 8013ed0:	6933      	ldr	r3, [r6, #16]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	6133      	str	r3, [r6, #16]
 8013ed6:	9b00      	ldr	r3, [sp, #0]
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	9309      	str	r3, [sp, #36]	; 0x24
 8013edc:	3b01      	subs	r3, #1
 8013ede:	6053      	str	r3, [r2, #4]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	dc00      	bgt.n	8013ee6 <_scanf_float+0xe6>
 8013ee4:	e0ac      	b.n	8014040 <_scanf_float+0x240>
 8013ee6:	6813      	ldr	r3, [r2, #0]
 8013ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8013eea:	3301      	adds	r3, #1
 8013eec:	6013      	str	r3, [r2, #0]
 8013eee:	e7aa      	b.n	8013e46 <_scanf_float+0x46>
 8013ef0:	2b45      	cmp	r3, #69	; 0x45
 8013ef2:	d100      	bne.n	8013ef6 <_scanf_float+0xf6>
 8013ef4:	e083      	b.n	8013ffe <_scanf_float+0x1fe>
 8013ef6:	2b46      	cmp	r3, #70	; 0x46
 8013ef8:	d06d      	beq.n	8013fd6 <_scanf_float+0x1d6>
 8013efa:	2b41      	cmp	r3, #65	; 0x41
 8013efc:	d1ba      	bne.n	8013e74 <_scanf_float+0x74>
 8013efe:	2c01      	cmp	r4, #1
 8013f00:	d1b8      	bne.n	8013e74 <_scanf_float+0x74>
 8013f02:	2402      	movs	r4, #2
 8013f04:	e04c      	b.n	8013fa0 <_scanf_float+0x1a0>
 8013f06:	2b65      	cmp	r3, #101	; 0x65
 8013f08:	d079      	beq.n	8013ffe <_scanf_float+0x1fe>
 8013f0a:	d81b      	bhi.n	8013f44 <_scanf_float+0x144>
 8013f0c:	2b54      	cmp	r3, #84	; 0x54
 8013f0e:	d067      	beq.n	8013fe0 <_scanf_float+0x1e0>
 8013f10:	d813      	bhi.n	8013f3a <_scanf_float+0x13a>
 8013f12:	2b4e      	cmp	r3, #78	; 0x4e
 8013f14:	d1ae      	bne.n	8013e74 <_scanf_float+0x74>
 8013f16:	2c00      	cmp	r4, #0
 8013f18:	d14c      	bne.n	8013fb4 <_scanf_float+0x1b4>
 8013f1a:	9a01      	ldr	r2, [sp, #4]
 8013f1c:	2a00      	cmp	r2, #0
 8013f1e:	d14b      	bne.n	8013fb8 <_scanf_float+0x1b8>
 8013f20:	21e0      	movs	r1, #224	; 0xe0
 8013f22:	20e0      	movs	r0, #224	; 0xe0
 8013f24:	6832      	ldr	r2, [r6, #0]
 8013f26:	00c9      	lsls	r1, r1, #3
 8013f28:	4011      	ands	r1, r2
 8013f2a:	00c0      	lsls	r0, r0, #3
 8013f2c:	4281      	cmp	r1, r0
 8013f2e:	d143      	bne.n	8013fb8 <_scanf_float+0x1b8>
 8013f30:	496f      	ldr	r1, [pc, #444]	; (80140f0 <_scanf_float+0x2f0>)
 8013f32:	3401      	adds	r4, #1
 8013f34:	400a      	ands	r2, r1
 8013f36:	6032      	str	r2, [r6, #0]
 8013f38:	e032      	b.n	8013fa0 <_scanf_float+0x1a0>
 8013f3a:	2b59      	cmp	r3, #89	; 0x59
 8013f3c:	d023      	beq.n	8013f86 <_scanf_float+0x186>
 8013f3e:	2b61      	cmp	r3, #97	; 0x61
 8013f40:	d0dd      	beq.n	8013efe <_scanf_float+0xfe>
 8013f42:	e797      	b.n	8013e74 <_scanf_float+0x74>
 8013f44:	2b6e      	cmp	r3, #110	; 0x6e
 8013f46:	d0e6      	beq.n	8013f16 <_scanf_float+0x116>
 8013f48:	d818      	bhi.n	8013f7c <_scanf_float+0x17c>
 8013f4a:	2b66      	cmp	r3, #102	; 0x66
 8013f4c:	d043      	beq.n	8013fd6 <_scanf_float+0x1d6>
 8013f4e:	2b69      	cmp	r3, #105	; 0x69
 8013f50:	d000      	beq.n	8013f54 <_scanf_float+0x154>
 8013f52:	e78f      	b.n	8013e74 <_scanf_float+0x74>
 8013f54:	2f00      	cmp	r7, #0
 8013f56:	d137      	bne.n	8013fc8 <_scanf_float+0x1c8>
 8013f58:	9a01      	ldr	r2, [sp, #4]
 8013f5a:	2a00      	cmp	r2, #0
 8013f5c:	d000      	beq.n	8013f60 <_scanf_float+0x160>
 8013f5e:	e78c      	b.n	8013e7a <_scanf_float+0x7a>
 8013f60:	21e0      	movs	r1, #224	; 0xe0
 8013f62:	20e0      	movs	r0, #224	; 0xe0
 8013f64:	6832      	ldr	r2, [r6, #0]
 8013f66:	00c9      	lsls	r1, r1, #3
 8013f68:	4011      	ands	r1, r2
 8013f6a:	00c0      	lsls	r0, r0, #3
 8013f6c:	4281      	cmp	r1, r0
 8013f6e:	d000      	beq.n	8013f72 <_scanf_float+0x172>
 8013f70:	e787      	b.n	8013e82 <_scanf_float+0x82>
 8013f72:	495f      	ldr	r1, [pc, #380]	; (80140f0 <_scanf_float+0x2f0>)
 8013f74:	3701      	adds	r7, #1
 8013f76:	400a      	ands	r2, r1
 8013f78:	6032      	str	r2, [r6, #0]
 8013f7a:	e011      	b.n	8013fa0 <_scanf_float+0x1a0>
 8013f7c:	2b74      	cmp	r3, #116	; 0x74
 8013f7e:	d02f      	beq.n	8013fe0 <_scanf_float+0x1e0>
 8013f80:	2b79      	cmp	r3, #121	; 0x79
 8013f82:	d000      	beq.n	8013f86 <_scanf_float+0x186>
 8013f84:	e776      	b.n	8013e74 <_scanf_float+0x74>
 8013f86:	2f07      	cmp	r7, #7
 8013f88:	d000      	beq.n	8013f8c <_scanf_float+0x18c>
 8013f8a:	e773      	b.n	8013e74 <_scanf_float+0x74>
 8013f8c:	2708      	movs	r7, #8
 8013f8e:	e007      	b.n	8013fa0 <_scanf_float+0x1a0>
 8013f90:	19e2      	adds	r2, r4, r7
 8013f92:	2a00      	cmp	r2, #0
 8013f94:	d000      	beq.n	8013f98 <_scanf_float+0x198>
 8013f96:	e76d      	b.n	8013e74 <_scanf_float+0x74>
 8013f98:	4a56      	ldr	r2, [pc, #344]	; (80140f4 <_scanf_float+0x2f4>)
 8013f9a:	6831      	ldr	r1, [r6, #0]
 8013f9c:	400a      	ands	r2, r1
 8013f9e:	6032      	str	r2, [r6, #0]
 8013fa0:	702b      	strb	r3, [r5, #0]
 8013fa2:	3501      	adds	r5, #1
 8013fa4:	e790      	b.n	8013ec8 <_scanf_float+0xc8>
 8013fa6:	2180      	movs	r1, #128	; 0x80
 8013fa8:	6832      	ldr	r2, [r6, #0]
 8013faa:	420a      	tst	r2, r1
 8013fac:	d100      	bne.n	8013fb0 <_scanf_float+0x1b0>
 8013fae:	e761      	b.n	8013e74 <_scanf_float+0x74>
 8013fb0:	438a      	bics	r2, r1
 8013fb2:	e7f4      	b.n	8013f9e <_scanf_float+0x19e>
 8013fb4:	2c02      	cmp	r4, #2
 8013fb6:	d041      	beq.n	801403c <_scanf_float+0x23c>
 8013fb8:	2f01      	cmp	r7, #1
 8013fba:	d002      	beq.n	8013fc2 <_scanf_float+0x1c2>
 8013fbc:	2f04      	cmp	r7, #4
 8013fbe:	d000      	beq.n	8013fc2 <_scanf_float+0x1c2>
 8013fc0:	e758      	b.n	8013e74 <_scanf_float+0x74>
 8013fc2:	3701      	adds	r7, #1
 8013fc4:	b2ff      	uxtb	r7, r7
 8013fc6:	e7eb      	b.n	8013fa0 <_scanf_float+0x1a0>
 8013fc8:	2102      	movs	r1, #2
 8013fca:	1efa      	subs	r2, r7, #3
 8013fcc:	438a      	bics	r2, r1
 8013fce:	b2d2      	uxtb	r2, r2
 8013fd0:	2a00      	cmp	r2, #0
 8013fd2:	d0f6      	beq.n	8013fc2 <_scanf_float+0x1c2>
 8013fd4:	e74e      	b.n	8013e74 <_scanf_float+0x74>
 8013fd6:	2f02      	cmp	r7, #2
 8013fd8:	d000      	beq.n	8013fdc <_scanf_float+0x1dc>
 8013fda:	e74b      	b.n	8013e74 <_scanf_float+0x74>
 8013fdc:	2703      	movs	r7, #3
 8013fde:	e7df      	b.n	8013fa0 <_scanf_float+0x1a0>
 8013fe0:	2f06      	cmp	r7, #6
 8013fe2:	d000      	beq.n	8013fe6 <_scanf_float+0x1e6>
 8013fe4:	e746      	b.n	8013e74 <_scanf_float+0x74>
 8013fe6:	2707      	movs	r7, #7
 8013fe8:	e7da      	b.n	8013fa0 <_scanf_float+0x1a0>
 8013fea:	6832      	ldr	r2, [r6, #0]
 8013fec:	0591      	lsls	r1, r2, #22
 8013fee:	d400      	bmi.n	8013ff2 <_scanf_float+0x1f2>
 8013ff0:	e740      	b.n	8013e74 <_scanf_float+0x74>
 8013ff2:	4941      	ldr	r1, [pc, #260]	; (80140f8 <_scanf_float+0x2f8>)
 8013ff4:	400a      	ands	r2, r1
 8013ff6:	6032      	str	r2, [r6, #0]
 8013ff8:	9a01      	ldr	r2, [sp, #4]
 8013ffa:	9206      	str	r2, [sp, #24]
 8013ffc:	e7d0      	b.n	8013fa0 <_scanf_float+0x1a0>
 8013ffe:	21a0      	movs	r1, #160	; 0xa0
 8014000:	2080      	movs	r0, #128	; 0x80
 8014002:	6832      	ldr	r2, [r6, #0]
 8014004:	00c9      	lsls	r1, r1, #3
 8014006:	4011      	ands	r1, r2
 8014008:	00c0      	lsls	r0, r0, #3
 801400a:	4281      	cmp	r1, r0
 801400c:	d006      	beq.n	801401c <_scanf_float+0x21c>
 801400e:	4202      	tst	r2, r0
 8014010:	d100      	bne.n	8014014 <_scanf_float+0x214>
 8014012:	e72f      	b.n	8013e74 <_scanf_float+0x74>
 8014014:	9901      	ldr	r1, [sp, #4]
 8014016:	2900      	cmp	r1, #0
 8014018:	d100      	bne.n	801401c <_scanf_float+0x21c>
 801401a:	e732      	b.n	8013e82 <_scanf_float+0x82>
 801401c:	0591      	lsls	r1, r2, #22
 801401e:	d404      	bmi.n	801402a <_scanf_float+0x22a>
 8014020:	9901      	ldr	r1, [sp, #4]
 8014022:	9806      	ldr	r0, [sp, #24]
 8014024:	9508      	str	r5, [sp, #32]
 8014026:	1a09      	subs	r1, r1, r0
 8014028:	9107      	str	r1, [sp, #28]
 801402a:	4931      	ldr	r1, [pc, #196]	; (80140f0 <_scanf_float+0x2f0>)
 801402c:	400a      	ands	r2, r1
 801402e:	21c0      	movs	r1, #192	; 0xc0
 8014030:	0049      	lsls	r1, r1, #1
 8014032:	430a      	orrs	r2, r1
 8014034:	6032      	str	r2, [r6, #0]
 8014036:	2200      	movs	r2, #0
 8014038:	9201      	str	r2, [sp, #4]
 801403a:	e7b1      	b.n	8013fa0 <_scanf_float+0x1a0>
 801403c:	2403      	movs	r4, #3
 801403e:	e7af      	b.n	8013fa0 <_scanf_float+0x1a0>
 8014040:	23c0      	movs	r3, #192	; 0xc0
 8014042:	005b      	lsls	r3, r3, #1
 8014044:	58f3      	ldr	r3, [r6, r3]
 8014046:	9900      	ldr	r1, [sp, #0]
 8014048:	9802      	ldr	r0, [sp, #8]
 801404a:	4798      	blx	r3
 801404c:	2800      	cmp	r0, #0
 801404e:	d100      	bne.n	8014052 <_scanf_float+0x252>
 8014050:	e6f9      	b.n	8013e46 <_scanf_float+0x46>
 8014052:	e70f      	b.n	8013e74 <_scanf_float+0x74>
 8014054:	3d01      	subs	r5, #1
 8014056:	5933      	ldr	r3, [r6, r4]
 8014058:	7829      	ldrb	r1, [r5, #0]
 801405a:	9a00      	ldr	r2, [sp, #0]
 801405c:	9802      	ldr	r0, [sp, #8]
 801405e:	4798      	blx	r3
 8014060:	6933      	ldr	r3, [r6, #16]
 8014062:	3b01      	subs	r3, #1
 8014064:	6133      	str	r3, [r6, #16]
 8014066:	e712      	b.n	8013e8e <_scanf_float+0x8e>
 8014068:	1e7b      	subs	r3, r7, #1
 801406a:	2b06      	cmp	r3, #6
 801406c:	d826      	bhi.n	80140bc <_scanf_float+0x2bc>
 801406e:	2f02      	cmp	r7, #2
 8014070:	d839      	bhi.n	80140e6 <_scanf_float+0x2e6>
 8014072:	24be      	movs	r4, #190	; 0xbe
 8014074:	0064      	lsls	r4, r4, #1
 8014076:	9b03      	ldr	r3, [sp, #12]
 8014078:	429d      	cmp	r5, r3
 801407a:	d800      	bhi.n	801407e <_scanf_float+0x27e>
 801407c:	e70b      	b.n	8013e96 <_scanf_float+0x96>
 801407e:	3d01      	subs	r5, #1
 8014080:	5933      	ldr	r3, [r6, r4]
 8014082:	7829      	ldrb	r1, [r5, #0]
 8014084:	9a00      	ldr	r2, [sp, #0]
 8014086:	9802      	ldr	r0, [sp, #8]
 8014088:	4798      	blx	r3
 801408a:	6933      	ldr	r3, [r6, #16]
 801408c:	3b01      	subs	r3, #1
 801408e:	6133      	str	r3, [r6, #16]
 8014090:	e7f1      	b.n	8014076 <_scanf_float+0x276>
 8014092:	9b04      	ldr	r3, [sp, #16]
 8014094:	9a00      	ldr	r2, [sp, #0]
 8014096:	3b01      	subs	r3, #1
 8014098:	9304      	str	r3, [sp, #16]
 801409a:	7819      	ldrb	r1, [r3, #0]
 801409c:	23be      	movs	r3, #190	; 0xbe
 801409e:	005b      	lsls	r3, r3, #1
 80140a0:	58f3      	ldr	r3, [r6, r3]
 80140a2:	9802      	ldr	r0, [sp, #8]
 80140a4:	9309      	str	r3, [sp, #36]	; 0x24
 80140a6:	4798      	blx	r3
 80140a8:	6933      	ldr	r3, [r6, #16]
 80140aa:	3b01      	subs	r3, #1
 80140ac:	6133      	str	r3, [r6, #16]
 80140ae:	3c01      	subs	r4, #1
 80140b0:	b2e4      	uxtb	r4, r4
 80140b2:	2c02      	cmp	r4, #2
 80140b4:	d1ed      	bne.n	8014092 <_scanf_float+0x292>
 80140b6:	3f03      	subs	r7, #3
 80140b8:	b2ff      	uxtb	r7, r7
 80140ba:	1bed      	subs	r5, r5, r7
 80140bc:	6833      	ldr	r3, [r6, #0]
 80140be:	05da      	lsls	r2, r3, #23
 80140c0:	d537      	bpl.n	8014132 <_scanf_float+0x332>
 80140c2:	055b      	lsls	r3, r3, #21
 80140c4:	d51a      	bpl.n	80140fc <_scanf_float+0x2fc>
 80140c6:	24be      	movs	r4, #190	; 0xbe
 80140c8:	0064      	lsls	r4, r4, #1
 80140ca:	9b03      	ldr	r3, [sp, #12]
 80140cc:	429d      	cmp	r5, r3
 80140ce:	d800      	bhi.n	80140d2 <_scanf_float+0x2d2>
 80140d0:	e6e1      	b.n	8013e96 <_scanf_float+0x96>
 80140d2:	3d01      	subs	r5, #1
 80140d4:	5933      	ldr	r3, [r6, r4]
 80140d6:	7829      	ldrb	r1, [r5, #0]
 80140d8:	9a00      	ldr	r2, [sp, #0]
 80140da:	9802      	ldr	r0, [sp, #8]
 80140dc:	4798      	blx	r3
 80140de:	6933      	ldr	r3, [r6, #16]
 80140e0:	3b01      	subs	r3, #1
 80140e2:	6133      	str	r3, [r6, #16]
 80140e4:	e7f1      	b.n	80140ca <_scanf_float+0x2ca>
 80140e6:	003c      	movs	r4, r7
 80140e8:	9504      	str	r5, [sp, #16]
 80140ea:	e7e0      	b.n	80140ae <_scanf_float+0x2ae>
 80140ec:	fffffeff 	.word	0xfffffeff
 80140f0:	fffff87f 	.word	0xfffff87f
 80140f4:	fffffe7f 	.word	0xfffffe7f
 80140f8:	fffffd7f 	.word	0xfffffd7f
 80140fc:	6933      	ldr	r3, [r6, #16]
 80140fe:	1e6c      	subs	r4, r5, #1
 8014100:	7821      	ldrb	r1, [r4, #0]
 8014102:	3b01      	subs	r3, #1
 8014104:	6133      	str	r3, [r6, #16]
 8014106:	2965      	cmp	r1, #101	; 0x65
 8014108:	d00c      	beq.n	8014124 <_scanf_float+0x324>
 801410a:	2945      	cmp	r1, #69	; 0x45
 801410c:	d00a      	beq.n	8014124 <_scanf_float+0x324>
 801410e:	23be      	movs	r3, #190	; 0xbe
 8014110:	005b      	lsls	r3, r3, #1
 8014112:	58f3      	ldr	r3, [r6, r3]
 8014114:	9a00      	ldr	r2, [sp, #0]
 8014116:	9802      	ldr	r0, [sp, #8]
 8014118:	4798      	blx	r3
 801411a:	6933      	ldr	r3, [r6, #16]
 801411c:	1eac      	subs	r4, r5, #2
 801411e:	3b01      	subs	r3, #1
 8014120:	7821      	ldrb	r1, [r4, #0]
 8014122:	6133      	str	r3, [r6, #16]
 8014124:	23be      	movs	r3, #190	; 0xbe
 8014126:	005b      	lsls	r3, r3, #1
 8014128:	58f3      	ldr	r3, [r6, r3]
 801412a:	9a00      	ldr	r2, [sp, #0]
 801412c:	9802      	ldr	r0, [sp, #8]
 801412e:	4798      	blx	r3
 8014130:	0025      	movs	r5, r4
 8014132:	2710      	movs	r7, #16
 8014134:	6833      	ldr	r3, [r6, #0]
 8014136:	401f      	ands	r7, r3
 8014138:	d15b      	bne.n	80141f2 <_scanf_float+0x3f2>
 801413a:	23c0      	movs	r3, #192	; 0xc0
 801413c:	702f      	strb	r7, [r5, #0]
 801413e:	6832      	ldr	r2, [r6, #0]
 8014140:	00db      	lsls	r3, r3, #3
 8014142:	4013      	ands	r3, r2
 8014144:	2280      	movs	r2, #128	; 0x80
 8014146:	00d2      	lsls	r2, r2, #3
 8014148:	4293      	cmp	r3, r2
 801414a:	d11b      	bne.n	8014184 <_scanf_float+0x384>
 801414c:	9a06      	ldr	r2, [sp, #24]
 801414e:	9b01      	ldr	r3, [sp, #4]
 8014150:	1a9b      	subs	r3, r3, r2
 8014152:	425a      	negs	r2, r3
 8014154:	2b00      	cmp	r3, #0
 8014156:	d122      	bne.n	801419e <_scanf_float+0x39e>
 8014158:	2200      	movs	r2, #0
 801415a:	9903      	ldr	r1, [sp, #12]
 801415c:	9802      	ldr	r0, [sp, #8]
 801415e:	f000 ff49 	bl	8014ff4 <_strtod_r>
 8014162:	9b05      	ldr	r3, [sp, #20]
 8014164:	0004      	movs	r4, r0
 8014166:	6830      	ldr	r0, [r6, #0]
 8014168:	000d      	movs	r5, r1
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	0782      	lsls	r2, r0, #30
 801416e:	d523      	bpl.n	80141b8 <_scanf_float+0x3b8>
 8014170:	1d1a      	adds	r2, r3, #4
 8014172:	9905      	ldr	r1, [sp, #20]
 8014174:	600a      	str	r2, [r1, #0]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	601c      	str	r4, [r3, #0]
 801417a:	605d      	str	r5, [r3, #4]
 801417c:	68f3      	ldr	r3, [r6, #12]
 801417e:	3301      	adds	r3, #1
 8014180:	60f3      	str	r3, [r6, #12]
 8014182:	e689      	b.n	8013e98 <_scanf_float+0x98>
 8014184:	9b07      	ldr	r3, [sp, #28]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d0e6      	beq.n	8014158 <_scanf_float+0x358>
 801418a:	9b08      	ldr	r3, [sp, #32]
 801418c:	003a      	movs	r2, r7
 801418e:	1c59      	adds	r1, r3, #1
 8014190:	9802      	ldr	r0, [sp, #8]
 8014192:	230a      	movs	r3, #10
 8014194:	f001 f826 	bl	80151e4 <_strtol_r>
 8014198:	9b07      	ldr	r3, [sp, #28]
 801419a:	9d08      	ldr	r5, [sp, #32]
 801419c:	1ac2      	subs	r2, r0, r3
 801419e:	0033      	movs	r3, r6
 80141a0:	3370      	adds	r3, #112	; 0x70
 80141a2:	33ff      	adds	r3, #255	; 0xff
 80141a4:	429d      	cmp	r5, r3
 80141a6:	d302      	bcc.n	80141ae <_scanf_float+0x3ae>
 80141a8:	0035      	movs	r5, r6
 80141aa:	356f      	adds	r5, #111	; 0x6f
 80141ac:	35ff      	adds	r5, #255	; 0xff
 80141ae:	4912      	ldr	r1, [pc, #72]	; (80141f8 <_scanf_float+0x3f8>)
 80141b0:	0028      	movs	r0, r5
 80141b2:	f000 f875 	bl	80142a0 <siprintf>
 80141b6:	e7cf      	b.n	8014158 <_scanf_float+0x358>
 80141b8:	2104      	movs	r1, #4
 80141ba:	4008      	ands	r0, r1
 80141bc:	1d1a      	adds	r2, r3, #4
 80141be:	9001      	str	r0, [sp, #4]
 80141c0:	2800      	cmp	r0, #0
 80141c2:	d1d6      	bne.n	8014172 <_scanf_float+0x372>
 80141c4:	9905      	ldr	r1, [sp, #20]
 80141c6:	0020      	movs	r0, r4
 80141c8:	600a      	str	r2, [r1, #0]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	0022      	movs	r2, r4
 80141ce:	9300      	str	r3, [sp, #0]
 80141d0:	0029      	movs	r1, r5
 80141d2:	002b      	movs	r3, r5
 80141d4:	f7ed ffd8 	bl	8002188 <__aeabi_dcmpun>
 80141d8:	2800      	cmp	r0, #0
 80141da:	d005      	beq.n	80141e8 <_scanf_float+0x3e8>
 80141dc:	9801      	ldr	r0, [sp, #4]
 80141de:	f000 f85b 	bl	8014298 <nanf>
 80141e2:	9b00      	ldr	r3, [sp, #0]
 80141e4:	6018      	str	r0, [r3, #0]
 80141e6:	e7c9      	b.n	801417c <_scanf_float+0x37c>
 80141e8:	0020      	movs	r0, r4
 80141ea:	0029      	movs	r1, r5
 80141ec:	f7ee f8dc 	bl	80023a8 <__aeabi_d2f>
 80141f0:	e7f7      	b.n	80141e2 <_scanf_float+0x3e2>
 80141f2:	2700      	movs	r7, #0
 80141f4:	e650      	b.n	8013e98 <_scanf_float+0x98>
 80141f6:	46c0      	nop			; (mov r8, r8)
 80141f8:	0801a54e 	.word	0x0801a54e

080141fc <rand>:
 80141fc:	4b12      	ldr	r3, [pc, #72]	; (8014248 <rand+0x4c>)
 80141fe:	b510      	push	{r4, lr}
 8014200:	681c      	ldr	r4, [r3, #0]
 8014202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014204:	2b00      	cmp	r3, #0
 8014206:	d10f      	bne.n	8014228 <rand+0x2c>
 8014208:	2018      	movs	r0, #24
 801420a:	f7ff f8ad 	bl	8013368 <malloc>
 801420e:	4b0f      	ldr	r3, [pc, #60]	; (801424c <rand+0x50>)
 8014210:	63a0      	str	r0, [r4, #56]	; 0x38
 8014212:	6003      	str	r3, [r0, #0]
 8014214:	4b0e      	ldr	r3, [pc, #56]	; (8014250 <rand+0x54>)
 8014216:	2201      	movs	r2, #1
 8014218:	6043      	str	r3, [r0, #4]
 801421a:	4b0e      	ldr	r3, [pc, #56]	; (8014254 <rand+0x58>)
 801421c:	6083      	str	r3, [r0, #8]
 801421e:	230b      	movs	r3, #11
 8014220:	8183      	strh	r3, [r0, #12]
 8014222:	2300      	movs	r3, #0
 8014224:	6102      	str	r2, [r0, #16]
 8014226:	6143      	str	r3, [r0, #20]
 8014228:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801422a:	4a0b      	ldr	r2, [pc, #44]	; (8014258 <rand+0x5c>)
 801422c:	6920      	ldr	r0, [r4, #16]
 801422e:	6961      	ldr	r1, [r4, #20]
 8014230:	4b0a      	ldr	r3, [pc, #40]	; (801425c <rand+0x60>)
 8014232:	f7ec f97b 	bl	800052c <__aeabi_lmul>
 8014236:	2201      	movs	r2, #1
 8014238:	2300      	movs	r3, #0
 801423a:	1880      	adds	r0, r0, r2
 801423c:	4159      	adcs	r1, r3
 801423e:	6120      	str	r0, [r4, #16]
 8014240:	6161      	str	r1, [r4, #20]
 8014242:	0048      	lsls	r0, r1, #1
 8014244:	0840      	lsrs	r0, r0, #1
 8014246:	bd10      	pop	{r4, pc}
 8014248:	200000e0 	.word	0x200000e0
 801424c:	abcd330e 	.word	0xabcd330e
 8014250:	e66d1234 	.word	0xe66d1234
 8014254:	0005deec 	.word	0x0005deec
 8014258:	4c957f2d 	.word	0x4c957f2d
 801425c:	5851f42d 	.word	0x5851f42d

08014260 <realloc>:
 8014260:	b510      	push	{r4, lr}
 8014262:	4b03      	ldr	r3, [pc, #12]	; (8014270 <realloc+0x10>)
 8014264:	000a      	movs	r2, r1
 8014266:	0001      	movs	r1, r0
 8014268:	6818      	ldr	r0, [r3, #0]
 801426a:	f002 fda2 	bl	8016db2 <_realloc_r>
 801426e:	bd10      	pop	{r4, pc}
 8014270:	200000e0 	.word	0x200000e0

08014274 <_sbrk_r>:
 8014274:	2300      	movs	r3, #0
 8014276:	b570      	push	{r4, r5, r6, lr}
 8014278:	4c06      	ldr	r4, [pc, #24]	; (8014294 <_sbrk_r+0x20>)
 801427a:	0005      	movs	r5, r0
 801427c:	0008      	movs	r0, r1
 801427e:	6023      	str	r3, [r4, #0]
 8014280:	f002 ff3a 	bl	80170f8 <_sbrk>
 8014284:	1c43      	adds	r3, r0, #1
 8014286:	d103      	bne.n	8014290 <_sbrk_r+0x1c>
 8014288:	6823      	ldr	r3, [r4, #0]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d000      	beq.n	8014290 <_sbrk_r+0x1c>
 801428e:	602b      	str	r3, [r5, #0]
 8014290:	bd70      	pop	{r4, r5, r6, pc}
 8014292:	46c0      	nop			; (mov r8, r8)
 8014294:	20006668 	.word	0x20006668

08014298 <nanf>:
 8014298:	4800      	ldr	r0, [pc, #0]	; (801429c <nanf+0x4>)
 801429a:	4770      	bx	lr
 801429c:	7fc00000 	.word	0x7fc00000

080142a0 <siprintf>:
 80142a0:	b40e      	push	{r1, r2, r3}
 80142a2:	b500      	push	{lr}
 80142a4:	490b      	ldr	r1, [pc, #44]	; (80142d4 <siprintf+0x34>)
 80142a6:	b09c      	sub	sp, #112	; 0x70
 80142a8:	ab1d      	add	r3, sp, #116	; 0x74
 80142aa:	9002      	str	r0, [sp, #8]
 80142ac:	9006      	str	r0, [sp, #24]
 80142ae:	9107      	str	r1, [sp, #28]
 80142b0:	9104      	str	r1, [sp, #16]
 80142b2:	4809      	ldr	r0, [pc, #36]	; (80142d8 <siprintf+0x38>)
 80142b4:	4909      	ldr	r1, [pc, #36]	; (80142dc <siprintf+0x3c>)
 80142b6:	cb04      	ldmia	r3!, {r2}
 80142b8:	9105      	str	r1, [sp, #20]
 80142ba:	6800      	ldr	r0, [r0, #0]
 80142bc:	a902      	add	r1, sp, #8
 80142be:	9301      	str	r3, [sp, #4]
 80142c0:	f002 fe00 	bl	8016ec4 <_svfiprintf_r>
 80142c4:	2300      	movs	r3, #0
 80142c6:	9a02      	ldr	r2, [sp, #8]
 80142c8:	7013      	strb	r3, [r2, #0]
 80142ca:	b01c      	add	sp, #112	; 0x70
 80142cc:	bc08      	pop	{r3}
 80142ce:	b003      	add	sp, #12
 80142d0:	4718      	bx	r3
 80142d2:	46c0      	nop			; (mov r8, r8)
 80142d4:	7fffffff 	.word	0x7fffffff
 80142d8:	200000e0 	.word	0x200000e0
 80142dc:	ffff0208 	.word	0xffff0208

080142e0 <strcat>:
 80142e0:	0002      	movs	r2, r0
 80142e2:	b510      	push	{r4, lr}
 80142e4:	7813      	ldrb	r3, [r2, #0]
 80142e6:	1c54      	adds	r4, r2, #1
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d105      	bne.n	80142f8 <strcat+0x18>
 80142ec:	5ccc      	ldrb	r4, [r1, r3]
 80142ee:	54d4      	strb	r4, [r2, r3]
 80142f0:	3301      	adds	r3, #1
 80142f2:	2c00      	cmp	r4, #0
 80142f4:	d1fa      	bne.n	80142ec <strcat+0xc>
 80142f6:	bd10      	pop	{r4, pc}
 80142f8:	0022      	movs	r2, r4
 80142fa:	e7f3      	b.n	80142e4 <strcat+0x4>

080142fc <strchr>:
 80142fc:	b2c9      	uxtb	r1, r1
 80142fe:	7803      	ldrb	r3, [r0, #0]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d004      	beq.n	801430e <strchr+0x12>
 8014304:	428b      	cmp	r3, r1
 8014306:	d100      	bne.n	801430a <strchr+0xe>
 8014308:	4770      	bx	lr
 801430a:	3001      	adds	r0, #1
 801430c:	e7f7      	b.n	80142fe <strchr+0x2>
 801430e:	424b      	negs	r3, r1
 8014310:	4159      	adcs	r1, r3
 8014312:	4249      	negs	r1, r1
 8014314:	4008      	ands	r0, r1
 8014316:	e7f7      	b.n	8014308 <strchr+0xc>

08014318 <strcpy>:
 8014318:	0003      	movs	r3, r0
 801431a:	780a      	ldrb	r2, [r1, #0]
 801431c:	3101      	adds	r1, #1
 801431e:	701a      	strb	r2, [r3, #0]
 8014320:	3301      	adds	r3, #1
 8014322:	2a00      	cmp	r2, #0
 8014324:	d1f9      	bne.n	801431a <strcpy+0x2>
 8014326:	4770      	bx	lr

08014328 <strncmp>:
 8014328:	2300      	movs	r3, #0
 801432a:	b530      	push	{r4, r5, lr}
 801432c:	429a      	cmp	r2, r3
 801432e:	d00a      	beq.n	8014346 <strncmp+0x1e>
 8014330:	3a01      	subs	r2, #1
 8014332:	5cc4      	ldrb	r4, [r0, r3]
 8014334:	5ccd      	ldrb	r5, [r1, r3]
 8014336:	42ac      	cmp	r4, r5
 8014338:	d104      	bne.n	8014344 <strncmp+0x1c>
 801433a:	4293      	cmp	r3, r2
 801433c:	d002      	beq.n	8014344 <strncmp+0x1c>
 801433e:	3301      	adds	r3, #1
 8014340:	2c00      	cmp	r4, #0
 8014342:	d1f6      	bne.n	8014332 <strncmp+0xa>
 8014344:	1b63      	subs	r3, r4, r5
 8014346:	0018      	movs	r0, r3
 8014348:	bd30      	pop	{r4, r5, pc}

0801434a <strncpy>:
 801434a:	b530      	push	{r4, r5, lr}
 801434c:	0005      	movs	r5, r0
 801434e:	2a00      	cmp	r2, #0
 8014350:	d100      	bne.n	8014354 <strncpy+0xa>
 8014352:	bd30      	pop	{r4, r5, pc}
 8014354:	780c      	ldrb	r4, [r1, #0]
 8014356:	3a01      	subs	r2, #1
 8014358:	1c6b      	adds	r3, r5, #1
 801435a:	702c      	strb	r4, [r5, #0]
 801435c:	3101      	adds	r1, #1
 801435e:	2c00      	cmp	r4, #0
 8014360:	d105      	bne.n	801436e <strncpy+0x24>
 8014362:	189a      	adds	r2, r3, r2
 8014364:	429a      	cmp	r2, r3
 8014366:	d0f4      	beq.n	8014352 <strncpy+0x8>
 8014368:	701c      	strb	r4, [r3, #0]
 801436a:	3301      	adds	r3, #1
 801436c:	e7fa      	b.n	8014364 <strncpy+0x1a>
 801436e:	001d      	movs	r5, r3
 8014370:	e7ed      	b.n	801434e <strncpy+0x4>
	...

08014374 <sulp>:
 8014374:	b570      	push	{r4, r5, r6, lr}
 8014376:	0016      	movs	r6, r2
 8014378:	000d      	movs	r5, r1
 801437a:	f002 fbe7 	bl	8016b4c <__ulp>
 801437e:	2e00      	cmp	r6, #0
 8014380:	d00d      	beq.n	801439e <sulp+0x2a>
 8014382:	236b      	movs	r3, #107	; 0x6b
 8014384:	006a      	lsls	r2, r5, #1
 8014386:	0d52      	lsrs	r2, r2, #21
 8014388:	1a9b      	subs	r3, r3, r2
 801438a:	2b00      	cmp	r3, #0
 801438c:	dd07      	ble.n	801439e <sulp+0x2a>
 801438e:	2400      	movs	r4, #0
 8014390:	4a03      	ldr	r2, [pc, #12]	; (80143a0 <sulp+0x2c>)
 8014392:	051b      	lsls	r3, r3, #20
 8014394:	189d      	adds	r5, r3, r2
 8014396:	002b      	movs	r3, r5
 8014398:	0022      	movs	r2, r4
 801439a:	f7ed f93b 	bl	8001614 <__aeabi_dmul>
 801439e:	bd70      	pop	{r4, r5, r6, pc}
 80143a0:	3ff00000 	.word	0x3ff00000

080143a4 <_strtod_l>:
 80143a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143a6:	b0a7      	sub	sp, #156	; 0x9c
 80143a8:	9307      	str	r3, [sp, #28]
 80143aa:	2300      	movs	r3, #0
 80143ac:	9004      	str	r0, [sp, #16]
 80143ae:	9807      	ldr	r0, [sp, #28]
 80143b0:	9322      	str	r3, [sp, #136]	; 0x88
 80143b2:	9106      	str	r1, [sp, #24]
 80143b4:	921d      	str	r2, [sp, #116]	; 0x74
 80143b6:	f002 f8dc 	bl	8016572 <__localeconv_l>
 80143ba:	0005      	movs	r5, r0
 80143bc:	6800      	ldr	r0, [r0, #0]
 80143be:	f7eb feab 	bl	8000118 <strlen>
 80143c2:	2600      	movs	r6, #0
 80143c4:	2700      	movs	r7, #0
 80143c6:	9b06      	ldr	r3, [sp, #24]
 80143c8:	9005      	str	r0, [sp, #20]
 80143ca:	9321      	str	r3, [sp, #132]	; 0x84
 80143cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80143ce:	781a      	ldrb	r2, [r3, #0]
 80143d0:	2a0d      	cmp	r2, #13
 80143d2:	d839      	bhi.n	8014448 <_strtod_l+0xa4>
 80143d4:	2a09      	cmp	r2, #9
 80143d6:	d23d      	bcs.n	8014454 <_strtod_l+0xb0>
 80143d8:	2a00      	cmp	r2, #0
 80143da:	d044      	beq.n	8014466 <_strtod_l+0xc2>
 80143dc:	2300      	movs	r3, #0
 80143de:	9313      	str	r3, [sp, #76]	; 0x4c
 80143e0:	2200      	movs	r2, #0
 80143e2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80143e4:	920c      	str	r2, [sp, #48]	; 0x30
 80143e6:	7823      	ldrb	r3, [r4, #0]
 80143e8:	2b30      	cmp	r3, #48	; 0x30
 80143ea:	d000      	beq.n	80143ee <_strtod_l+0x4a>
 80143ec:	e07e      	b.n	80144ec <_strtod_l+0x148>
 80143ee:	7863      	ldrb	r3, [r4, #1]
 80143f0:	2b58      	cmp	r3, #88	; 0x58
 80143f2:	d002      	beq.n	80143fa <_strtod_l+0x56>
 80143f4:	2b78      	cmp	r3, #120	; 0x78
 80143f6:	d000      	beq.n	80143fa <_strtod_l+0x56>
 80143f8:	e06e      	b.n	80144d8 <_strtod_l+0x134>
 80143fa:	9b07      	ldr	r3, [sp, #28]
 80143fc:	4a96      	ldr	r2, [pc, #600]	; (8014658 <_strtod_l+0x2b4>)
 80143fe:	9302      	str	r3, [sp, #8]
 8014400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014402:	a921      	add	r1, sp, #132	; 0x84
 8014404:	9301      	str	r3, [sp, #4]
 8014406:	ab22      	add	r3, sp, #136	; 0x88
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	9804      	ldr	r0, [sp, #16]
 801440c:	ab23      	add	r3, sp, #140	; 0x8c
 801440e:	f001 fdc8 	bl	8015fa2 <__gethex>
 8014412:	2507      	movs	r5, #7
 8014414:	9005      	str	r0, [sp, #20]
 8014416:	4005      	ands	r5, r0
 8014418:	d005      	beq.n	8014426 <_strtod_l+0x82>
 801441a:	2d06      	cmp	r5, #6
 801441c:	d12f      	bne.n	801447e <_strtod_l+0xda>
 801441e:	2300      	movs	r3, #0
 8014420:	3401      	adds	r4, #1
 8014422:	9421      	str	r4, [sp, #132]	; 0x84
 8014424:	9313      	str	r3, [sp, #76]	; 0x4c
 8014426:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014428:	2b00      	cmp	r3, #0
 801442a:	d002      	beq.n	8014432 <_strtod_l+0x8e>
 801442c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801442e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014430:	601a      	str	r2, [r3, #0]
 8014432:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014434:	2b00      	cmp	r3, #0
 8014436:	d01d      	beq.n	8014474 <_strtod_l+0xd0>
 8014438:	2380      	movs	r3, #128	; 0x80
 801443a:	0032      	movs	r2, r6
 801443c:	061b      	lsls	r3, r3, #24
 801443e:	18fb      	adds	r3, r7, r3
 8014440:	0010      	movs	r0, r2
 8014442:	0019      	movs	r1, r3
 8014444:	b027      	add	sp, #156	; 0x9c
 8014446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014448:	2a2b      	cmp	r2, #43	; 0x2b
 801444a:	d016      	beq.n	801447a <_strtod_l+0xd6>
 801444c:	2a2d      	cmp	r2, #45	; 0x2d
 801444e:	d003      	beq.n	8014458 <_strtod_l+0xb4>
 8014450:	2a20      	cmp	r2, #32
 8014452:	d1c3      	bne.n	80143dc <_strtod_l+0x38>
 8014454:	3301      	adds	r3, #1
 8014456:	e7b8      	b.n	80143ca <_strtod_l+0x26>
 8014458:	2201      	movs	r2, #1
 801445a:	9213      	str	r2, [sp, #76]	; 0x4c
 801445c:	1c5a      	adds	r2, r3, #1
 801445e:	9221      	str	r2, [sp, #132]	; 0x84
 8014460:	785b      	ldrb	r3, [r3, #1]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d1bc      	bne.n	80143e0 <_strtod_l+0x3c>
 8014466:	9b06      	ldr	r3, [sp, #24]
 8014468:	9321      	str	r3, [sp, #132]	; 0x84
 801446a:	2300      	movs	r3, #0
 801446c:	9313      	str	r3, [sp, #76]	; 0x4c
 801446e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014470:	2b00      	cmp	r3, #0
 8014472:	d1db      	bne.n	801442c <_strtod_l+0x88>
 8014474:	0032      	movs	r2, r6
 8014476:	003b      	movs	r3, r7
 8014478:	e7e2      	b.n	8014440 <_strtod_l+0x9c>
 801447a:	2200      	movs	r2, #0
 801447c:	e7ed      	b.n	801445a <_strtod_l+0xb6>
 801447e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014480:	2a00      	cmp	r2, #0
 8014482:	d007      	beq.n	8014494 <_strtod_l+0xf0>
 8014484:	2135      	movs	r1, #53	; 0x35
 8014486:	a824      	add	r0, sp, #144	; 0x90
 8014488:	f002 fc4d 	bl	8016d26 <__copybits>
 801448c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801448e:	9804      	ldr	r0, [sp, #16]
 8014490:	f002 f8c3 	bl	801661a <_Bfree>
 8014494:	1e68      	subs	r0, r5, #1
 8014496:	2804      	cmp	r0, #4
 8014498:	d806      	bhi.n	80144a8 <_strtod_l+0x104>
 801449a:	f7eb fe45 	bl	8000128 <__gnu_thumb1_case_uqi>
 801449e:	030c      	.short	0x030c
 80144a0:	1917      	.short	0x1917
 80144a2:	0c          	.byte	0x0c
 80144a3:	00          	.byte	0x00
 80144a4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80144a6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80144a8:	9b05      	ldr	r3, [sp, #20]
 80144aa:	071b      	lsls	r3, r3, #28
 80144ac:	d5bb      	bpl.n	8014426 <_strtod_l+0x82>
 80144ae:	2380      	movs	r3, #128	; 0x80
 80144b0:	061b      	lsls	r3, r3, #24
 80144b2:	431f      	orrs	r7, r3
 80144b4:	e7b7      	b.n	8014426 <_strtod_l+0x82>
 80144b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80144b8:	4a68      	ldr	r2, [pc, #416]	; (801465c <_strtod_l+0x2b8>)
 80144ba:	4969      	ldr	r1, [pc, #420]	; (8014660 <_strtod_l+0x2bc>)
 80144bc:	401a      	ands	r2, r3
 80144be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80144c0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80144c2:	185b      	adds	r3, r3, r1
 80144c4:	051b      	lsls	r3, r3, #20
 80144c6:	431a      	orrs	r2, r3
 80144c8:	0017      	movs	r7, r2
 80144ca:	e7ed      	b.n	80144a8 <_strtod_l+0x104>
 80144cc:	4f65      	ldr	r7, [pc, #404]	; (8014664 <_strtod_l+0x2c0>)
 80144ce:	e7eb      	b.n	80144a8 <_strtod_l+0x104>
 80144d0:	2601      	movs	r6, #1
 80144d2:	4f65      	ldr	r7, [pc, #404]	; (8014668 <_strtod_l+0x2c4>)
 80144d4:	4276      	negs	r6, r6
 80144d6:	e7e7      	b.n	80144a8 <_strtod_l+0x104>
 80144d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144da:	1c5a      	adds	r2, r3, #1
 80144dc:	9221      	str	r2, [sp, #132]	; 0x84
 80144de:	785b      	ldrb	r3, [r3, #1]
 80144e0:	2b30      	cmp	r3, #48	; 0x30
 80144e2:	d0f9      	beq.n	80144d8 <_strtod_l+0x134>
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d09e      	beq.n	8014426 <_strtod_l+0x82>
 80144e8:	2301      	movs	r3, #1
 80144ea:	930c      	str	r3, [sp, #48]	; 0x30
 80144ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144ee:	220a      	movs	r2, #10
 80144f0:	9312      	str	r3, [sp, #72]	; 0x48
 80144f2:	2300      	movs	r3, #0
 80144f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80144f6:	9308      	str	r3, [sp, #32]
 80144f8:	930a      	str	r3, [sp, #40]	; 0x28
 80144fa:	9821      	ldr	r0, [sp, #132]	; 0x84
 80144fc:	7804      	ldrb	r4, [r0, #0]
 80144fe:	0023      	movs	r3, r4
 8014500:	3b30      	subs	r3, #48	; 0x30
 8014502:	b2d9      	uxtb	r1, r3
 8014504:	2909      	cmp	r1, #9
 8014506:	d934      	bls.n	8014572 <_strtod_l+0x1ce>
 8014508:	9a05      	ldr	r2, [sp, #20]
 801450a:	6829      	ldr	r1, [r5, #0]
 801450c:	f7ff ff0c 	bl	8014328 <strncmp>
 8014510:	2800      	cmp	r0, #0
 8014512:	d040      	beq.n	8014596 <_strtod_l+0x1f2>
 8014514:	2000      	movs	r0, #0
 8014516:	0023      	movs	r3, r4
 8014518:	4684      	mov	ip, r0
 801451a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801451c:	9007      	str	r0, [sp, #28]
 801451e:	9205      	str	r2, [sp, #20]
 8014520:	2220      	movs	r2, #32
 8014522:	0019      	movs	r1, r3
 8014524:	4391      	bics	r1, r2
 8014526:	000a      	movs	r2, r1
 8014528:	2100      	movs	r1, #0
 801452a:	2a45      	cmp	r2, #69	; 0x45
 801452c:	d000      	beq.n	8014530 <_strtod_l+0x18c>
 801452e:	e0bf      	b.n	80146b0 <_strtod_l+0x30c>
 8014530:	9b05      	ldr	r3, [sp, #20]
 8014532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014534:	4303      	orrs	r3, r0
 8014536:	4313      	orrs	r3, r2
 8014538:	428b      	cmp	r3, r1
 801453a:	d094      	beq.n	8014466 <_strtod_l+0xc2>
 801453c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801453e:	9306      	str	r3, [sp, #24]
 8014540:	3301      	adds	r3, #1
 8014542:	9321      	str	r3, [sp, #132]	; 0x84
 8014544:	9b06      	ldr	r3, [sp, #24]
 8014546:	785b      	ldrb	r3, [r3, #1]
 8014548:	2b2b      	cmp	r3, #43	; 0x2b
 801454a:	d100      	bne.n	801454e <_strtod_l+0x1aa>
 801454c:	e082      	b.n	8014654 <_strtod_l+0x2b0>
 801454e:	000c      	movs	r4, r1
 8014550:	2b2d      	cmp	r3, #45	; 0x2d
 8014552:	d105      	bne.n	8014560 <_strtod_l+0x1bc>
 8014554:	2401      	movs	r4, #1
 8014556:	9b06      	ldr	r3, [sp, #24]
 8014558:	3302      	adds	r3, #2
 801455a:	9321      	str	r3, [sp, #132]	; 0x84
 801455c:	9b06      	ldr	r3, [sp, #24]
 801455e:	789b      	ldrb	r3, [r3, #2]
 8014560:	001a      	movs	r2, r3
 8014562:	3a30      	subs	r2, #48	; 0x30
 8014564:	2a09      	cmp	r2, #9
 8014566:	d800      	bhi.n	801456a <_strtod_l+0x1c6>
 8014568:	e084      	b.n	8014674 <_strtod_l+0x2d0>
 801456a:	9a06      	ldr	r2, [sp, #24]
 801456c:	2100      	movs	r1, #0
 801456e:	9221      	str	r2, [sp, #132]	; 0x84
 8014570:	e09e      	b.n	80146b0 <_strtod_l+0x30c>
 8014572:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014574:	2908      	cmp	r1, #8
 8014576:	dc09      	bgt.n	801458c <_strtod_l+0x1e8>
 8014578:	9908      	ldr	r1, [sp, #32]
 801457a:	4351      	muls	r1, r2
 801457c:	18cb      	adds	r3, r1, r3
 801457e:	9308      	str	r3, [sp, #32]
 8014580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014582:	3001      	adds	r0, #1
 8014584:	3301      	adds	r3, #1
 8014586:	930a      	str	r3, [sp, #40]	; 0x28
 8014588:	9021      	str	r0, [sp, #132]	; 0x84
 801458a:	e7b6      	b.n	80144fa <_strtod_l+0x156>
 801458c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801458e:	4351      	muls	r1, r2
 8014590:	18cb      	adds	r3, r1, r3
 8014592:	930b      	str	r3, [sp, #44]	; 0x2c
 8014594:	e7f4      	b.n	8014580 <_strtod_l+0x1dc>
 8014596:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014598:	9b05      	ldr	r3, [sp, #20]
 801459a:	4694      	mov	ip, r2
 801459c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801459e:	4463      	add	r3, ip
 80145a0:	9321      	str	r3, [sp, #132]	; 0x84
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	2a00      	cmp	r2, #0
 80145a6:	d036      	beq.n	8014616 <_strtod_l+0x272>
 80145a8:	4684      	mov	ip, r0
 80145aa:	9205      	str	r2, [sp, #20]
 80145ac:	001a      	movs	r2, r3
 80145ae:	3a30      	subs	r2, #48	; 0x30
 80145b0:	2a09      	cmp	r2, #9
 80145b2:	d912      	bls.n	80145da <_strtod_l+0x236>
 80145b4:	2201      	movs	r2, #1
 80145b6:	9207      	str	r2, [sp, #28]
 80145b8:	e7b2      	b.n	8014520 <_strtod_l+0x17c>
 80145ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145bc:	3001      	adds	r0, #1
 80145be:	1c5a      	adds	r2, r3, #1
 80145c0:	9221      	str	r2, [sp, #132]	; 0x84
 80145c2:	785b      	ldrb	r3, [r3, #1]
 80145c4:	2b30      	cmp	r3, #48	; 0x30
 80145c6:	d0f8      	beq.n	80145ba <_strtod_l+0x216>
 80145c8:	001a      	movs	r2, r3
 80145ca:	3a31      	subs	r2, #49	; 0x31
 80145cc:	2a08      	cmp	r2, #8
 80145ce:	d83c      	bhi.n	801464a <_strtod_l+0x2a6>
 80145d0:	4684      	mov	ip, r0
 80145d2:	2000      	movs	r0, #0
 80145d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80145d6:	9005      	str	r0, [sp, #20]
 80145d8:	9212      	str	r2, [sp, #72]	; 0x48
 80145da:	3b30      	subs	r3, #48	; 0x30
 80145dc:	1c42      	adds	r2, r0, #1
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d013      	beq.n	801460a <_strtod_l+0x266>
 80145e2:	210a      	movs	r1, #10
 80145e4:	4494      	add	ip, r2
 80145e6:	9a05      	ldr	r2, [sp, #20]
 80145e8:	1885      	adds	r5, r0, r2
 80145ea:	42aa      	cmp	r2, r5
 80145ec:	d115      	bne.n	801461a <_strtod_l+0x276>
 80145ee:	9905      	ldr	r1, [sp, #20]
 80145f0:	9a05      	ldr	r2, [sp, #20]
 80145f2:	3101      	adds	r1, #1
 80145f4:	1809      	adds	r1, r1, r0
 80145f6:	1812      	adds	r2, r2, r0
 80145f8:	9105      	str	r1, [sp, #20]
 80145fa:	2a08      	cmp	r2, #8
 80145fc:	dc1b      	bgt.n	8014636 <_strtod_l+0x292>
 80145fe:	220a      	movs	r2, #10
 8014600:	9908      	ldr	r1, [sp, #32]
 8014602:	434a      	muls	r2, r1
 8014604:	189b      	adds	r3, r3, r2
 8014606:	2200      	movs	r2, #0
 8014608:	9308      	str	r3, [sp, #32]
 801460a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801460c:	0010      	movs	r0, r2
 801460e:	1c59      	adds	r1, r3, #1
 8014610:	9121      	str	r1, [sp, #132]	; 0x84
 8014612:	785b      	ldrb	r3, [r3, #1]
 8014614:	e7ca      	b.n	80145ac <_strtod_l+0x208>
 8014616:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014618:	e7d4      	b.n	80145c4 <_strtod_l+0x220>
 801461a:	1c54      	adds	r4, r2, #1
 801461c:	2a08      	cmp	r2, #8
 801461e:	dc04      	bgt.n	801462a <_strtod_l+0x286>
 8014620:	9a08      	ldr	r2, [sp, #32]
 8014622:	434a      	muls	r2, r1
 8014624:	9208      	str	r2, [sp, #32]
 8014626:	0022      	movs	r2, r4
 8014628:	e7df      	b.n	80145ea <_strtod_l+0x246>
 801462a:	2c10      	cmp	r4, #16
 801462c:	dcfb      	bgt.n	8014626 <_strtod_l+0x282>
 801462e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014630:	434a      	muls	r2, r1
 8014632:	920b      	str	r2, [sp, #44]	; 0x2c
 8014634:	e7f7      	b.n	8014626 <_strtod_l+0x282>
 8014636:	9905      	ldr	r1, [sp, #20]
 8014638:	2200      	movs	r2, #0
 801463a:	2910      	cmp	r1, #16
 801463c:	dce5      	bgt.n	801460a <_strtod_l+0x266>
 801463e:	210a      	movs	r1, #10
 8014640:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014642:	4341      	muls	r1, r0
 8014644:	185b      	adds	r3, r3, r1
 8014646:	930b      	str	r3, [sp, #44]	; 0x2c
 8014648:	e7df      	b.n	801460a <_strtod_l+0x266>
 801464a:	2200      	movs	r2, #0
 801464c:	4694      	mov	ip, r2
 801464e:	9205      	str	r2, [sp, #20]
 8014650:	3201      	adds	r2, #1
 8014652:	e7b0      	b.n	80145b6 <_strtod_l+0x212>
 8014654:	000c      	movs	r4, r1
 8014656:	e77e      	b.n	8014556 <_strtod_l+0x1b2>
 8014658:	0801a554 	.word	0x0801a554
 801465c:	ffefffff 	.word	0xffefffff
 8014660:	00000433 	.word	0x00000433
 8014664:	7ff00000 	.word	0x7ff00000
 8014668:	7fffffff 	.word	0x7fffffff
 801466c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801466e:	1c5a      	adds	r2, r3, #1
 8014670:	9221      	str	r2, [sp, #132]	; 0x84
 8014672:	785b      	ldrb	r3, [r3, #1]
 8014674:	2b30      	cmp	r3, #48	; 0x30
 8014676:	d0f9      	beq.n	801466c <_strtod_l+0x2c8>
 8014678:	001a      	movs	r2, r3
 801467a:	3a31      	subs	r2, #49	; 0x31
 801467c:	2100      	movs	r1, #0
 801467e:	2a08      	cmp	r2, #8
 8014680:	d816      	bhi.n	80146b0 <_strtod_l+0x30c>
 8014682:	3b30      	subs	r3, #48	; 0x30
 8014684:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8014686:	930e      	str	r3, [sp, #56]	; 0x38
 8014688:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801468a:	1c59      	adds	r1, r3, #1
 801468c:	9121      	str	r1, [sp, #132]	; 0x84
 801468e:	785b      	ldrb	r3, [r3, #1]
 8014690:	001a      	movs	r2, r3
 8014692:	3a30      	subs	r2, #48	; 0x30
 8014694:	2a09      	cmp	r2, #9
 8014696:	d932      	bls.n	80146fe <_strtod_l+0x35a>
 8014698:	1b4a      	subs	r2, r1, r5
 801469a:	4dad      	ldr	r5, [pc, #692]	; (8014950 <_strtod_l+0x5ac>)
 801469c:	0029      	movs	r1, r5
 801469e:	2a08      	cmp	r2, #8
 80146a0:	dc03      	bgt.n	80146aa <_strtod_l+0x306>
 80146a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80146a4:	42a9      	cmp	r1, r5
 80146a6:	dd00      	ble.n	80146aa <_strtod_l+0x306>
 80146a8:	0029      	movs	r1, r5
 80146aa:	2c00      	cmp	r4, #0
 80146ac:	d000      	beq.n	80146b0 <_strtod_l+0x30c>
 80146ae:	4249      	negs	r1, r1
 80146b0:	9a05      	ldr	r2, [sp, #20]
 80146b2:	2a00      	cmp	r2, #0
 80146b4:	d149      	bne.n	801474a <_strtod_l+0x3a6>
 80146b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80146b8:	4310      	orrs	r0, r2
 80146ba:	d000      	beq.n	80146be <_strtod_l+0x31a>
 80146bc:	e6b3      	b.n	8014426 <_strtod_l+0x82>
 80146be:	9a07      	ldr	r2, [sp, #28]
 80146c0:	2a00      	cmp	r2, #0
 80146c2:	d000      	beq.n	80146c6 <_strtod_l+0x322>
 80146c4:	e6cf      	b.n	8014466 <_strtod_l+0xc2>
 80146c6:	2b4e      	cmp	r3, #78	; 0x4e
 80146c8:	d025      	beq.n	8014716 <_strtod_l+0x372>
 80146ca:	dc1f      	bgt.n	801470c <_strtod_l+0x368>
 80146cc:	2b49      	cmp	r3, #73	; 0x49
 80146ce:	d000      	beq.n	80146d2 <_strtod_l+0x32e>
 80146d0:	e6c9      	b.n	8014466 <_strtod_l+0xc2>
 80146d2:	49a0      	ldr	r1, [pc, #640]	; (8014954 <_strtod_l+0x5b0>)
 80146d4:	a821      	add	r0, sp, #132	; 0x84
 80146d6:	f001 fea1 	bl	801641c <__match>
 80146da:	2800      	cmp	r0, #0
 80146dc:	d100      	bne.n	80146e0 <_strtod_l+0x33c>
 80146de:	e6c2      	b.n	8014466 <_strtod_l+0xc2>
 80146e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146e2:	499d      	ldr	r1, [pc, #628]	; (8014958 <_strtod_l+0x5b4>)
 80146e4:	3b01      	subs	r3, #1
 80146e6:	a821      	add	r0, sp, #132	; 0x84
 80146e8:	9321      	str	r3, [sp, #132]	; 0x84
 80146ea:	f001 fe97 	bl	801641c <__match>
 80146ee:	2800      	cmp	r0, #0
 80146f0:	d102      	bne.n	80146f8 <_strtod_l+0x354>
 80146f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146f4:	3301      	adds	r3, #1
 80146f6:	9321      	str	r3, [sp, #132]	; 0x84
 80146f8:	4f98      	ldr	r7, [pc, #608]	; (801495c <_strtod_l+0x5b8>)
 80146fa:	2600      	movs	r6, #0
 80146fc:	e693      	b.n	8014426 <_strtod_l+0x82>
 80146fe:	220a      	movs	r2, #10
 8014700:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014702:	434a      	muls	r2, r1
 8014704:	18d2      	adds	r2, r2, r3
 8014706:	3a30      	subs	r2, #48	; 0x30
 8014708:	920e      	str	r2, [sp, #56]	; 0x38
 801470a:	e7bd      	b.n	8014688 <_strtod_l+0x2e4>
 801470c:	2b69      	cmp	r3, #105	; 0x69
 801470e:	d0e0      	beq.n	80146d2 <_strtod_l+0x32e>
 8014710:	2b6e      	cmp	r3, #110	; 0x6e
 8014712:	d000      	beq.n	8014716 <_strtod_l+0x372>
 8014714:	e6a7      	b.n	8014466 <_strtod_l+0xc2>
 8014716:	4992      	ldr	r1, [pc, #584]	; (8014960 <_strtod_l+0x5bc>)
 8014718:	a821      	add	r0, sp, #132	; 0x84
 801471a:	f001 fe7f 	bl	801641c <__match>
 801471e:	2800      	cmp	r0, #0
 8014720:	d100      	bne.n	8014724 <_strtod_l+0x380>
 8014722:	e6a0      	b.n	8014466 <_strtod_l+0xc2>
 8014724:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	2b28      	cmp	r3, #40	; 0x28
 801472a:	d10c      	bne.n	8014746 <_strtod_l+0x3a2>
 801472c:	aa24      	add	r2, sp, #144	; 0x90
 801472e:	498d      	ldr	r1, [pc, #564]	; (8014964 <_strtod_l+0x5c0>)
 8014730:	a821      	add	r0, sp, #132	; 0x84
 8014732:	f001 fe87 	bl	8016444 <__hexnan>
 8014736:	2805      	cmp	r0, #5
 8014738:	d105      	bne.n	8014746 <_strtod_l+0x3a2>
 801473a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801473c:	4a87      	ldr	r2, [pc, #540]	; (801495c <_strtod_l+0x5b8>)
 801473e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014740:	431a      	orrs	r2, r3
 8014742:	0017      	movs	r7, r2
 8014744:	e66f      	b.n	8014426 <_strtod_l+0x82>
 8014746:	4f88      	ldr	r7, [pc, #544]	; (8014968 <_strtod_l+0x5c4>)
 8014748:	e7d7      	b.n	80146fa <_strtod_l+0x356>
 801474a:	4663      	mov	r3, ip
 801474c:	1acb      	subs	r3, r1, r3
 801474e:	9307      	str	r3, [sp, #28]
 8014750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014752:	2b00      	cmp	r3, #0
 8014754:	d101      	bne.n	801475a <_strtod_l+0x3b6>
 8014756:	9b05      	ldr	r3, [sp, #20]
 8014758:	930a      	str	r3, [sp, #40]	; 0x28
 801475a:	9c05      	ldr	r4, [sp, #20]
 801475c:	2c10      	cmp	r4, #16
 801475e:	dd00      	ble.n	8014762 <_strtod_l+0x3be>
 8014760:	2410      	movs	r4, #16
 8014762:	9808      	ldr	r0, [sp, #32]
 8014764:	f7ed fd9c 	bl	80022a0 <__aeabi_ui2d>
 8014768:	9b05      	ldr	r3, [sp, #20]
 801476a:	0006      	movs	r6, r0
 801476c:	000f      	movs	r7, r1
 801476e:	2b09      	cmp	r3, #9
 8014770:	dc15      	bgt.n	801479e <_strtod_l+0x3fa>
 8014772:	9b07      	ldr	r3, [sp, #28]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d100      	bne.n	801477a <_strtod_l+0x3d6>
 8014778:	e655      	b.n	8014426 <_strtod_l+0x82>
 801477a:	9b07      	ldr	r3, [sp, #28]
 801477c:	2b00      	cmp	r3, #0
 801477e:	dc00      	bgt.n	8014782 <_strtod_l+0x3de>
 8014780:	e07d      	b.n	801487e <_strtod_l+0x4da>
 8014782:	2b16      	cmp	r3, #22
 8014784:	dc62      	bgt.n	801484c <_strtod_l+0x4a8>
 8014786:	00dc      	lsls	r4, r3, #3
 8014788:	4b78      	ldr	r3, [pc, #480]	; (801496c <_strtod_l+0x5c8>)
 801478a:	0032      	movs	r2, r6
 801478c:	1919      	adds	r1, r3, r4
 801478e:	003b      	movs	r3, r7
 8014790:	6808      	ldr	r0, [r1, #0]
 8014792:	6849      	ldr	r1, [r1, #4]
 8014794:	f7ec ff3e 	bl	8001614 <__aeabi_dmul>
 8014798:	0006      	movs	r6, r0
 801479a:	000f      	movs	r7, r1
 801479c:	e643      	b.n	8014426 <_strtod_l+0x82>
 801479e:	0022      	movs	r2, r4
 80147a0:	4b72      	ldr	r3, [pc, #456]	; (801496c <_strtod_l+0x5c8>)
 80147a2:	3a09      	subs	r2, #9
 80147a4:	00d2      	lsls	r2, r2, #3
 80147a6:	189b      	adds	r3, r3, r2
 80147a8:	681a      	ldr	r2, [r3, #0]
 80147aa:	685b      	ldr	r3, [r3, #4]
 80147ac:	f7ec ff32 	bl	8001614 <__aeabi_dmul>
 80147b0:	0006      	movs	r6, r0
 80147b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80147b4:	000f      	movs	r7, r1
 80147b6:	f7ed fd73 	bl	80022a0 <__aeabi_ui2d>
 80147ba:	000b      	movs	r3, r1
 80147bc:	0002      	movs	r2, r0
 80147be:	0039      	movs	r1, r7
 80147c0:	0030      	movs	r0, r6
 80147c2:	f7ec f801 	bl	80007c8 <__aeabi_dadd>
 80147c6:	9b05      	ldr	r3, [sp, #20]
 80147c8:	0006      	movs	r6, r0
 80147ca:	000f      	movs	r7, r1
 80147cc:	2b0f      	cmp	r3, #15
 80147ce:	ddd0      	ble.n	8014772 <_strtod_l+0x3ce>
 80147d0:	9b05      	ldr	r3, [sp, #20]
 80147d2:	1b1c      	subs	r4, r3, r4
 80147d4:	9b07      	ldr	r3, [sp, #28]
 80147d6:	18e4      	adds	r4, r4, r3
 80147d8:	2c00      	cmp	r4, #0
 80147da:	dc00      	bgt.n	80147de <_strtod_l+0x43a>
 80147dc:	e094      	b.n	8014908 <_strtod_l+0x564>
 80147de:	230f      	movs	r3, #15
 80147e0:	4023      	ands	r3, r4
 80147e2:	d00a      	beq.n	80147fa <_strtod_l+0x456>
 80147e4:	4961      	ldr	r1, [pc, #388]	; (801496c <_strtod_l+0x5c8>)
 80147e6:	00db      	lsls	r3, r3, #3
 80147e8:	18c9      	adds	r1, r1, r3
 80147ea:	0032      	movs	r2, r6
 80147ec:	6808      	ldr	r0, [r1, #0]
 80147ee:	6849      	ldr	r1, [r1, #4]
 80147f0:	003b      	movs	r3, r7
 80147f2:	f7ec ff0f 	bl	8001614 <__aeabi_dmul>
 80147f6:	0006      	movs	r6, r0
 80147f8:	000f      	movs	r7, r1
 80147fa:	230f      	movs	r3, #15
 80147fc:	439c      	bics	r4, r3
 80147fe:	d06e      	beq.n	80148de <_strtod_l+0x53a>
 8014800:	3326      	adds	r3, #38	; 0x26
 8014802:	33ff      	adds	r3, #255	; 0xff
 8014804:	429c      	cmp	r4, r3
 8014806:	dd48      	ble.n	801489a <_strtod_l+0x4f6>
 8014808:	2400      	movs	r4, #0
 801480a:	9405      	str	r4, [sp, #20]
 801480c:	940b      	str	r4, [sp, #44]	; 0x2c
 801480e:	940a      	str	r4, [sp, #40]	; 0x28
 8014810:	2322      	movs	r3, #34	; 0x22
 8014812:	2600      	movs	r6, #0
 8014814:	9a04      	ldr	r2, [sp, #16]
 8014816:	4f51      	ldr	r7, [pc, #324]	; (801495c <_strtod_l+0x5b8>)
 8014818:	6013      	str	r3, [r2, #0]
 801481a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801481c:	42b3      	cmp	r3, r6
 801481e:	d100      	bne.n	8014822 <_strtod_l+0x47e>
 8014820:	e601      	b.n	8014426 <_strtod_l+0x82>
 8014822:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014824:	9804      	ldr	r0, [sp, #16]
 8014826:	f001 fef8 	bl	801661a <_Bfree>
 801482a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801482c:	9804      	ldr	r0, [sp, #16]
 801482e:	f001 fef4 	bl	801661a <_Bfree>
 8014832:	9905      	ldr	r1, [sp, #20]
 8014834:	9804      	ldr	r0, [sp, #16]
 8014836:	f001 fef0 	bl	801661a <_Bfree>
 801483a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801483c:	9804      	ldr	r0, [sp, #16]
 801483e:	f001 feec 	bl	801661a <_Bfree>
 8014842:	0021      	movs	r1, r4
 8014844:	9804      	ldr	r0, [sp, #16]
 8014846:	f001 fee8 	bl	801661a <_Bfree>
 801484a:	e5ec      	b.n	8014426 <_strtod_l+0x82>
 801484c:	2325      	movs	r3, #37	; 0x25
 801484e:	9a05      	ldr	r2, [sp, #20]
 8014850:	1a9b      	subs	r3, r3, r2
 8014852:	9a07      	ldr	r2, [sp, #28]
 8014854:	4293      	cmp	r3, r2
 8014856:	dbbb      	blt.n	80147d0 <_strtod_l+0x42c>
 8014858:	230f      	movs	r3, #15
 801485a:	9a05      	ldr	r2, [sp, #20]
 801485c:	4c43      	ldr	r4, [pc, #268]	; (801496c <_strtod_l+0x5c8>)
 801485e:	1a9d      	subs	r5, r3, r2
 8014860:	00e9      	lsls	r1, r5, #3
 8014862:	1861      	adds	r1, r4, r1
 8014864:	0032      	movs	r2, r6
 8014866:	6808      	ldr	r0, [r1, #0]
 8014868:	6849      	ldr	r1, [r1, #4]
 801486a:	003b      	movs	r3, r7
 801486c:	f7ec fed2 	bl	8001614 <__aeabi_dmul>
 8014870:	9b07      	ldr	r3, [sp, #28]
 8014872:	1b5e      	subs	r6, r3, r5
 8014874:	00f6      	lsls	r6, r6, #3
 8014876:	19a6      	adds	r6, r4, r6
 8014878:	6832      	ldr	r2, [r6, #0]
 801487a:	6873      	ldr	r3, [r6, #4]
 801487c:	e78a      	b.n	8014794 <_strtod_l+0x3f0>
 801487e:	9b07      	ldr	r3, [sp, #28]
 8014880:	3316      	adds	r3, #22
 8014882:	dba5      	blt.n	80147d0 <_strtod_l+0x42c>
 8014884:	9b07      	ldr	r3, [sp, #28]
 8014886:	0030      	movs	r0, r6
 8014888:	00da      	lsls	r2, r3, #3
 801488a:	4b38      	ldr	r3, [pc, #224]	; (801496c <_strtod_l+0x5c8>)
 801488c:	0039      	movs	r1, r7
 801488e:	1a9b      	subs	r3, r3, r2
 8014890:	681a      	ldr	r2, [r3, #0]
 8014892:	685b      	ldr	r3, [r3, #4]
 8014894:	f7ec fab4 	bl	8000e00 <__aeabi_ddiv>
 8014898:	e77e      	b.n	8014798 <_strtod_l+0x3f4>
 801489a:	2300      	movs	r3, #0
 801489c:	0030      	movs	r0, r6
 801489e:	0039      	movs	r1, r7
 80148a0:	001d      	movs	r5, r3
 80148a2:	1124      	asrs	r4, r4, #4
 80148a4:	2c01      	cmp	r4, #1
 80148a6:	dc1d      	bgt.n	80148e4 <_strtod_l+0x540>
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d001      	beq.n	80148b0 <_strtod_l+0x50c>
 80148ac:	0006      	movs	r6, r0
 80148ae:	000f      	movs	r7, r1
 80148b0:	4b2f      	ldr	r3, [pc, #188]	; (8014970 <_strtod_l+0x5cc>)
 80148b2:	00ed      	lsls	r5, r5, #3
 80148b4:	18ff      	adds	r7, r7, r3
 80148b6:	4b2f      	ldr	r3, [pc, #188]	; (8014974 <_strtod_l+0x5d0>)
 80148b8:	0032      	movs	r2, r6
 80148ba:	195d      	adds	r5, r3, r5
 80148bc:	6828      	ldr	r0, [r5, #0]
 80148be:	6869      	ldr	r1, [r5, #4]
 80148c0:	003b      	movs	r3, r7
 80148c2:	f7ec fea7 	bl	8001614 <__aeabi_dmul>
 80148c6:	4b25      	ldr	r3, [pc, #148]	; (801495c <_strtod_l+0x5b8>)
 80148c8:	4a2b      	ldr	r2, [pc, #172]	; (8014978 <_strtod_l+0x5d4>)
 80148ca:	0006      	movs	r6, r0
 80148cc:	400b      	ands	r3, r1
 80148ce:	4293      	cmp	r3, r2
 80148d0:	d89a      	bhi.n	8014808 <_strtod_l+0x464>
 80148d2:	4a2a      	ldr	r2, [pc, #168]	; (801497c <_strtod_l+0x5d8>)
 80148d4:	4293      	cmp	r3, r2
 80148d6:	d913      	bls.n	8014900 <_strtod_l+0x55c>
 80148d8:	2601      	movs	r6, #1
 80148da:	4f29      	ldr	r7, [pc, #164]	; (8014980 <_strtod_l+0x5dc>)
 80148dc:	4276      	negs	r6, r6
 80148de:	2300      	movs	r3, #0
 80148e0:	9306      	str	r3, [sp, #24]
 80148e2:	e07b      	b.n	80149dc <_strtod_l+0x638>
 80148e4:	2201      	movs	r2, #1
 80148e6:	4214      	tst	r4, r2
 80148e8:	d007      	beq.n	80148fa <_strtod_l+0x556>
 80148ea:	4a22      	ldr	r2, [pc, #136]	; (8014974 <_strtod_l+0x5d0>)
 80148ec:	00eb      	lsls	r3, r5, #3
 80148ee:	189b      	adds	r3, r3, r2
 80148f0:	681a      	ldr	r2, [r3, #0]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	f7ec fe8e 	bl	8001614 <__aeabi_dmul>
 80148f8:	2301      	movs	r3, #1
 80148fa:	3501      	adds	r5, #1
 80148fc:	1064      	asrs	r4, r4, #1
 80148fe:	e7d1      	b.n	80148a4 <_strtod_l+0x500>
 8014900:	23d4      	movs	r3, #212	; 0xd4
 8014902:	049b      	lsls	r3, r3, #18
 8014904:	18cf      	adds	r7, r1, r3
 8014906:	e7ea      	b.n	80148de <_strtod_l+0x53a>
 8014908:	2c00      	cmp	r4, #0
 801490a:	d0e8      	beq.n	80148de <_strtod_l+0x53a>
 801490c:	230f      	movs	r3, #15
 801490e:	4264      	negs	r4, r4
 8014910:	4023      	ands	r3, r4
 8014912:	d00a      	beq.n	801492a <_strtod_l+0x586>
 8014914:	4a15      	ldr	r2, [pc, #84]	; (801496c <_strtod_l+0x5c8>)
 8014916:	00db      	lsls	r3, r3, #3
 8014918:	18d3      	adds	r3, r2, r3
 801491a:	0030      	movs	r0, r6
 801491c:	681a      	ldr	r2, [r3, #0]
 801491e:	685b      	ldr	r3, [r3, #4]
 8014920:	0039      	movs	r1, r7
 8014922:	f7ec fa6d 	bl	8000e00 <__aeabi_ddiv>
 8014926:	0006      	movs	r6, r0
 8014928:	000f      	movs	r7, r1
 801492a:	1124      	asrs	r4, r4, #4
 801492c:	d0d7      	beq.n	80148de <_strtod_l+0x53a>
 801492e:	2c1f      	cmp	r4, #31
 8014930:	dd28      	ble.n	8014984 <_strtod_l+0x5e0>
 8014932:	2400      	movs	r4, #0
 8014934:	9405      	str	r4, [sp, #20]
 8014936:	940b      	str	r4, [sp, #44]	; 0x2c
 8014938:	940a      	str	r4, [sp, #40]	; 0x28
 801493a:	2322      	movs	r3, #34	; 0x22
 801493c:	9a04      	ldr	r2, [sp, #16]
 801493e:	2600      	movs	r6, #0
 8014940:	6013      	str	r3, [r2, #0]
 8014942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014944:	2700      	movs	r7, #0
 8014946:	2b00      	cmp	r3, #0
 8014948:	d000      	beq.n	801494c <_strtod_l+0x5a8>
 801494a:	e76a      	b.n	8014822 <_strtod_l+0x47e>
 801494c:	e56b      	b.n	8014426 <_strtod_l+0x82>
 801494e:	46c0      	nop			; (mov r8, r8)
 8014950:	00004e1f 	.word	0x00004e1f
 8014954:	0801a51f 	.word	0x0801a51f
 8014958:	0801a6ac 	.word	0x0801a6ac
 801495c:	7ff00000 	.word	0x7ff00000
 8014960:	0801a527 	.word	0x0801a527
 8014964:	0801a568 	.word	0x0801a568
 8014968:	fff80000 	.word	0xfff80000
 801496c:	0801a6e0 	.word	0x0801a6e0
 8014970:	fcb00000 	.word	0xfcb00000
 8014974:	0801a6b8 	.word	0x0801a6b8
 8014978:	7ca00000 	.word	0x7ca00000
 801497c:	7c900000 	.word	0x7c900000
 8014980:	7fefffff 	.word	0x7fefffff
 8014984:	2310      	movs	r3, #16
 8014986:	4023      	ands	r3, r4
 8014988:	9306      	str	r3, [sp, #24]
 801498a:	d001      	beq.n	8014990 <_strtod_l+0x5ec>
 801498c:	236a      	movs	r3, #106	; 0x6a
 801498e:	9306      	str	r3, [sp, #24]
 8014990:	2300      	movs	r3, #0
 8014992:	0030      	movs	r0, r6
 8014994:	0039      	movs	r1, r7
 8014996:	001d      	movs	r5, r3
 8014998:	2c00      	cmp	r4, #0
 801499a:	dd00      	ble.n	801499e <_strtod_l+0x5fa>
 801499c:	e10e      	b.n	8014bbc <_strtod_l+0x818>
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d001      	beq.n	80149a6 <_strtod_l+0x602>
 80149a2:	0006      	movs	r6, r0
 80149a4:	000f      	movs	r7, r1
 80149a6:	9b06      	ldr	r3, [sp, #24]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d00f      	beq.n	80149cc <_strtod_l+0x628>
 80149ac:	236b      	movs	r3, #107	; 0x6b
 80149ae:	0079      	lsls	r1, r7, #1
 80149b0:	0d49      	lsrs	r1, r1, #21
 80149b2:	003a      	movs	r2, r7
 80149b4:	1a5b      	subs	r3, r3, r1
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	dd08      	ble.n	80149cc <_strtod_l+0x628>
 80149ba:	2b1f      	cmp	r3, #31
 80149bc:	dc00      	bgt.n	80149c0 <_strtod_l+0x61c>
 80149be:	e112      	b.n	8014be6 <_strtod_l+0x842>
 80149c0:	2600      	movs	r6, #0
 80149c2:	2b34      	cmp	r3, #52	; 0x34
 80149c4:	dc00      	bgt.n	80149c8 <_strtod_l+0x624>
 80149c6:	e107      	b.n	8014bd8 <_strtod_l+0x834>
 80149c8:	27dc      	movs	r7, #220	; 0xdc
 80149ca:	04bf      	lsls	r7, r7, #18
 80149cc:	2200      	movs	r2, #0
 80149ce:	2300      	movs	r3, #0
 80149d0:	0030      	movs	r0, r6
 80149d2:	0039      	movs	r1, r7
 80149d4:	f7eb fd38 	bl	8000448 <__aeabi_dcmpeq>
 80149d8:	2800      	cmp	r0, #0
 80149da:	d1aa      	bne.n	8014932 <_strtod_l+0x58e>
 80149dc:	9b08      	ldr	r3, [sp, #32]
 80149de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149e0:	9300      	str	r3, [sp, #0]
 80149e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80149e4:	9b05      	ldr	r3, [sp, #20]
 80149e6:	9804      	ldr	r0, [sp, #16]
 80149e8:	f001 fe6e 	bl	80166c8 <__s2b>
 80149ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d100      	bne.n	80149f4 <_strtod_l+0x650>
 80149f2:	e709      	b.n	8014808 <_strtod_l+0x464>
 80149f4:	9b07      	ldr	r3, [sp, #28]
 80149f6:	9a07      	ldr	r2, [sp, #28]
 80149f8:	17db      	asrs	r3, r3, #31
 80149fa:	4252      	negs	r2, r2
 80149fc:	4013      	ands	r3, r2
 80149fe:	9315      	str	r3, [sp, #84]	; 0x54
 8014a00:	9b07      	ldr	r3, [sp, #28]
 8014a02:	2400      	movs	r4, #0
 8014a04:	43db      	mvns	r3, r3
 8014a06:	9a07      	ldr	r2, [sp, #28]
 8014a08:	17db      	asrs	r3, r3, #31
 8014a0a:	401a      	ands	r2, r3
 8014a0c:	921c      	str	r2, [sp, #112]	; 0x70
 8014a0e:	9405      	str	r4, [sp, #20]
 8014a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a12:	9804      	ldr	r0, [sp, #16]
 8014a14:	6859      	ldr	r1, [r3, #4]
 8014a16:	f001 fdc8 	bl	80165aa <_Balloc>
 8014a1a:	900a      	str	r0, [sp, #40]	; 0x28
 8014a1c:	2800      	cmp	r0, #0
 8014a1e:	d100      	bne.n	8014a22 <_strtod_l+0x67e>
 8014a20:	e6f6      	b.n	8014810 <_strtod_l+0x46c>
 8014a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a26:	691b      	ldr	r3, [r3, #16]
 8014a28:	310c      	adds	r1, #12
 8014a2a:	1c9a      	adds	r2, r3, #2
 8014a2c:	0092      	lsls	r2, r2, #2
 8014a2e:	300c      	adds	r0, #12
 8014a30:	9308      	str	r3, [sp, #32]
 8014a32:	f7fe fcce 	bl	80133d2 <memcpy>
 8014a36:	ab24      	add	r3, sp, #144	; 0x90
 8014a38:	9301      	str	r3, [sp, #4]
 8014a3a:	ab23      	add	r3, sp, #140	; 0x8c
 8014a3c:	9300      	str	r3, [sp, #0]
 8014a3e:	0032      	movs	r2, r6
 8014a40:	003b      	movs	r3, r7
 8014a42:	9804      	ldr	r0, [sp, #16]
 8014a44:	960e      	str	r6, [sp, #56]	; 0x38
 8014a46:	970f      	str	r7, [sp, #60]	; 0x3c
 8014a48:	f002 f8f2 	bl	8016c30 <__d2b>
 8014a4c:	9022      	str	r0, [sp, #136]	; 0x88
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	d100      	bne.n	8014a54 <_strtod_l+0x6b0>
 8014a52:	e6dd      	b.n	8014810 <_strtod_l+0x46c>
 8014a54:	2101      	movs	r1, #1
 8014a56:	9804      	ldr	r0, [sp, #16]
 8014a58:	f001 febd 	bl	80167d6 <__i2b>
 8014a5c:	9005      	str	r0, [sp, #20]
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d100      	bne.n	8014a64 <_strtod_l+0x6c0>
 8014a62:	e6d5      	b.n	8014810 <_strtod_l+0x46c>
 8014a64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	da00      	bge.n	8014a6c <_strtod_l+0x6c8>
 8014a6a:	e0c1      	b.n	8014bf0 <_strtod_l+0x84c>
 8014a6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014a6e:	189d      	adds	r5, r3, r2
 8014a70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014a72:	4694      	mov	ip, r2
 8014a74:	9906      	ldr	r1, [sp, #24]
 8014a76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014a78:	1a5b      	subs	r3, r3, r1
 8014a7a:	2136      	movs	r1, #54	; 0x36
 8014a7c:	189b      	adds	r3, r3, r2
 8014a7e:	1a8a      	subs	r2, r1, r2
 8014a80:	49b2      	ldr	r1, [pc, #712]	; (8014d4c <_strtod_l+0x9a8>)
 8014a82:	3b01      	subs	r3, #1
 8014a84:	2001      	movs	r0, #1
 8014a86:	428b      	cmp	r3, r1
 8014a88:	db00      	blt.n	8014a8c <_strtod_l+0x6e8>
 8014a8a:	e0bd      	b.n	8014c08 <_strtod_l+0x864>
 8014a8c:	1ac9      	subs	r1, r1, r3
 8014a8e:	1a52      	subs	r2, r2, r1
 8014a90:	291f      	cmp	r1, #31
 8014a92:	dd00      	ble.n	8014a96 <_strtod_l+0x6f2>
 8014a94:	e0b1      	b.n	8014bfa <_strtod_l+0x856>
 8014a96:	4088      	lsls	r0, r1
 8014a98:	2300      	movs	r3, #0
 8014a9a:	9014      	str	r0, [sp, #80]	; 0x50
 8014a9c:	9310      	str	r3, [sp, #64]	; 0x40
 8014a9e:	18ab      	adds	r3, r5, r2
 8014aa0:	9308      	str	r3, [sp, #32]
 8014aa2:	0013      	movs	r3, r2
 8014aa4:	9a06      	ldr	r2, [sp, #24]
 8014aa6:	4463      	add	r3, ip
 8014aa8:	18d3      	adds	r3, r2, r3
 8014aaa:	9a08      	ldr	r2, [sp, #32]
 8014aac:	930c      	str	r3, [sp, #48]	; 0x30
 8014aae:	002b      	movs	r3, r5
 8014ab0:	4295      	cmp	r5, r2
 8014ab2:	dd00      	ble.n	8014ab6 <_strtod_l+0x712>
 8014ab4:	0013      	movs	r3, r2
 8014ab6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ab8:	4293      	cmp	r3, r2
 8014aba:	dd00      	ble.n	8014abe <_strtod_l+0x71a>
 8014abc:	0013      	movs	r3, r2
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	dd06      	ble.n	8014ad0 <_strtod_l+0x72c>
 8014ac2:	9a08      	ldr	r2, [sp, #32]
 8014ac4:	1aed      	subs	r5, r5, r3
 8014ac6:	1ad2      	subs	r2, r2, r3
 8014ac8:	9208      	str	r2, [sp, #32]
 8014aca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014acc:	1ad2      	subs	r2, r2, r3
 8014ace:	920c      	str	r2, [sp, #48]	; 0x30
 8014ad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d017      	beq.n	8014b06 <_strtod_l+0x762>
 8014ad6:	001a      	movs	r2, r3
 8014ad8:	9905      	ldr	r1, [sp, #20]
 8014ada:	9804      	ldr	r0, [sp, #16]
 8014adc:	f001 ff14 	bl	8016908 <__pow5mult>
 8014ae0:	9005      	str	r0, [sp, #20]
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	d100      	bne.n	8014ae8 <_strtod_l+0x744>
 8014ae6:	e693      	b.n	8014810 <_strtod_l+0x46c>
 8014ae8:	0001      	movs	r1, r0
 8014aea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014aec:	9804      	ldr	r0, [sp, #16]
 8014aee:	f001 fe7b 	bl	80167e8 <__multiply>
 8014af2:	9012      	str	r0, [sp, #72]	; 0x48
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d100      	bne.n	8014afa <_strtod_l+0x756>
 8014af8:	e68a      	b.n	8014810 <_strtod_l+0x46c>
 8014afa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014afc:	9804      	ldr	r0, [sp, #16]
 8014afe:	f001 fd8c 	bl	801661a <_Bfree>
 8014b02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014b04:	9322      	str	r3, [sp, #136]	; 0x88
 8014b06:	9b08      	ldr	r3, [sp, #32]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	dd00      	ble.n	8014b0e <_strtod_l+0x76a>
 8014b0c:	e07f      	b.n	8014c0e <_strtod_l+0x86a>
 8014b0e:	9b07      	ldr	r3, [sp, #28]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	dd08      	ble.n	8014b26 <_strtod_l+0x782>
 8014b14:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014b16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014b18:	9804      	ldr	r0, [sp, #16]
 8014b1a:	f001 fef5 	bl	8016908 <__pow5mult>
 8014b1e:	900a      	str	r0, [sp, #40]	; 0x28
 8014b20:	2800      	cmp	r0, #0
 8014b22:	d100      	bne.n	8014b26 <_strtod_l+0x782>
 8014b24:	e674      	b.n	8014810 <_strtod_l+0x46c>
 8014b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	dd08      	ble.n	8014b3e <_strtod_l+0x79a>
 8014b2c:	001a      	movs	r2, r3
 8014b2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014b30:	9804      	ldr	r0, [sp, #16]
 8014b32:	f001 ff3b 	bl	80169ac <__lshift>
 8014b36:	900a      	str	r0, [sp, #40]	; 0x28
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	d100      	bne.n	8014b3e <_strtod_l+0x79a>
 8014b3c:	e668      	b.n	8014810 <_strtod_l+0x46c>
 8014b3e:	2d00      	cmp	r5, #0
 8014b40:	dd08      	ble.n	8014b54 <_strtod_l+0x7b0>
 8014b42:	002a      	movs	r2, r5
 8014b44:	9905      	ldr	r1, [sp, #20]
 8014b46:	9804      	ldr	r0, [sp, #16]
 8014b48:	f001 ff30 	bl	80169ac <__lshift>
 8014b4c:	9005      	str	r0, [sp, #20]
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d100      	bne.n	8014b54 <_strtod_l+0x7b0>
 8014b52:	e65d      	b.n	8014810 <_strtod_l+0x46c>
 8014b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b56:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014b58:	9804      	ldr	r0, [sp, #16]
 8014b5a:	f001 ff93 	bl	8016a84 <__mdiff>
 8014b5e:	1e04      	subs	r4, r0, #0
 8014b60:	d100      	bne.n	8014b64 <_strtod_l+0x7c0>
 8014b62:	e655      	b.n	8014810 <_strtod_l+0x46c>
 8014b64:	2500      	movs	r5, #0
 8014b66:	68c3      	ldr	r3, [r0, #12]
 8014b68:	9905      	ldr	r1, [sp, #20]
 8014b6a:	60c5      	str	r5, [r0, #12]
 8014b6c:	9312      	str	r3, [sp, #72]	; 0x48
 8014b6e:	f001 ff6f 	bl	8016a50 <__mcmp>
 8014b72:	42a8      	cmp	r0, r5
 8014b74:	da55      	bge.n	8014c22 <_strtod_l+0x87e>
 8014b76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014b78:	42ab      	cmp	r3, r5
 8014b7a:	d11b      	bne.n	8014bb4 <_strtod_l+0x810>
 8014b7c:	42ae      	cmp	r6, r5
 8014b7e:	d119      	bne.n	8014bb4 <_strtod_l+0x810>
 8014b80:	033b      	lsls	r3, r7, #12
 8014b82:	42ab      	cmp	r3, r5
 8014b84:	d116      	bne.n	8014bb4 <_strtod_l+0x810>
 8014b86:	22d6      	movs	r2, #214	; 0xd6
 8014b88:	4b71      	ldr	r3, [pc, #452]	; (8014d50 <_strtod_l+0x9ac>)
 8014b8a:	04d2      	lsls	r2, r2, #19
 8014b8c:	403b      	ands	r3, r7
 8014b8e:	4293      	cmp	r3, r2
 8014b90:	d910      	bls.n	8014bb4 <_strtod_l+0x810>
 8014b92:	6963      	ldr	r3, [r4, #20]
 8014b94:	42ab      	cmp	r3, r5
 8014b96:	d102      	bne.n	8014b9e <_strtod_l+0x7fa>
 8014b98:	6923      	ldr	r3, [r4, #16]
 8014b9a:	2b01      	cmp	r3, #1
 8014b9c:	dd0a      	ble.n	8014bb4 <_strtod_l+0x810>
 8014b9e:	0021      	movs	r1, r4
 8014ba0:	2201      	movs	r2, #1
 8014ba2:	9804      	ldr	r0, [sp, #16]
 8014ba4:	f001 ff02 	bl	80169ac <__lshift>
 8014ba8:	9905      	ldr	r1, [sp, #20]
 8014baa:	0004      	movs	r4, r0
 8014bac:	f001 ff50 	bl	8016a50 <__mcmp>
 8014bb0:	2800      	cmp	r0, #0
 8014bb2:	dc6b      	bgt.n	8014c8c <_strtod_l+0x8e8>
 8014bb4:	9b06      	ldr	r3, [sp, #24]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d178      	bne.n	8014cac <_strtod_l+0x908>
 8014bba:	e632      	b.n	8014822 <_strtod_l+0x47e>
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	4214      	tst	r4, r2
 8014bc0:	d007      	beq.n	8014bd2 <_strtod_l+0x82e>
 8014bc2:	4a64      	ldr	r2, [pc, #400]	; (8014d54 <_strtod_l+0x9b0>)
 8014bc4:	00eb      	lsls	r3, r5, #3
 8014bc6:	18d3      	adds	r3, r2, r3
 8014bc8:	681a      	ldr	r2, [r3, #0]
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	f7ec fd22 	bl	8001614 <__aeabi_dmul>
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	3501      	adds	r5, #1
 8014bd4:	1064      	asrs	r4, r4, #1
 8014bd6:	e6df      	b.n	8014998 <_strtod_l+0x5f4>
 8014bd8:	2101      	movs	r1, #1
 8014bda:	3b20      	subs	r3, #32
 8014bdc:	4249      	negs	r1, r1
 8014bde:	4099      	lsls	r1, r3
 8014be0:	400a      	ands	r2, r1
 8014be2:	0017      	movs	r7, r2
 8014be4:	e6f2      	b.n	80149cc <_strtod_l+0x628>
 8014be6:	2201      	movs	r2, #1
 8014be8:	4252      	negs	r2, r2
 8014bea:	409a      	lsls	r2, r3
 8014bec:	4016      	ands	r6, r2
 8014bee:	e6ed      	b.n	80149cc <_strtod_l+0x628>
 8014bf0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014bf2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014bf4:	1ad2      	subs	r2, r2, r3
 8014bf6:	4694      	mov	ip, r2
 8014bf8:	e73c      	b.n	8014a74 <_strtod_l+0x6d0>
 8014bfa:	4957      	ldr	r1, [pc, #348]	; (8014d58 <_strtod_l+0x9b4>)
 8014bfc:	1acb      	subs	r3, r1, r3
 8014bfe:	0001      	movs	r1, r0
 8014c00:	4099      	lsls	r1, r3
 8014c02:	9110      	str	r1, [sp, #64]	; 0x40
 8014c04:	9014      	str	r0, [sp, #80]	; 0x50
 8014c06:	e74a      	b.n	8014a9e <_strtod_l+0x6fa>
 8014c08:	2300      	movs	r3, #0
 8014c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8014c0c:	e7fa      	b.n	8014c04 <_strtod_l+0x860>
 8014c0e:	9a08      	ldr	r2, [sp, #32]
 8014c10:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014c12:	9804      	ldr	r0, [sp, #16]
 8014c14:	f001 feca 	bl	80169ac <__lshift>
 8014c18:	9022      	str	r0, [sp, #136]	; 0x88
 8014c1a:	2800      	cmp	r0, #0
 8014c1c:	d000      	beq.n	8014c20 <_strtod_l+0x87c>
 8014c1e:	e776      	b.n	8014b0e <_strtod_l+0x76a>
 8014c20:	e5f6      	b.n	8014810 <_strtod_l+0x46c>
 8014c22:	970c      	str	r7, [sp, #48]	; 0x30
 8014c24:	2800      	cmp	r0, #0
 8014c26:	d000      	beq.n	8014c2a <_strtod_l+0x886>
 8014c28:	e0a0      	b.n	8014d6c <_strtod_l+0x9c8>
 8014c2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c2c:	033b      	lsls	r3, r7, #12
 8014c2e:	0b1b      	lsrs	r3, r3, #12
 8014c30:	2a00      	cmp	r2, #0
 8014c32:	d027      	beq.n	8014c84 <_strtod_l+0x8e0>
 8014c34:	4a49      	ldr	r2, [pc, #292]	; (8014d5c <_strtod_l+0x9b8>)
 8014c36:	4293      	cmp	r3, r2
 8014c38:	d157      	bne.n	8014cea <_strtod_l+0x946>
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	9b06      	ldr	r3, [sp, #24]
 8014c3e:	4252      	negs	r2, r2
 8014c40:	0031      	movs	r1, r6
 8014c42:	0010      	movs	r0, r2
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d00b      	beq.n	8014c60 <_strtod_l+0x8bc>
 8014c48:	25d4      	movs	r5, #212	; 0xd4
 8014c4a:	4b41      	ldr	r3, [pc, #260]	; (8014d50 <_strtod_l+0x9ac>)
 8014c4c:	04ed      	lsls	r5, r5, #19
 8014c4e:	403b      	ands	r3, r7
 8014c50:	0010      	movs	r0, r2
 8014c52:	42ab      	cmp	r3, r5
 8014c54:	d804      	bhi.n	8014c60 <_strtod_l+0x8bc>
 8014c56:	306c      	adds	r0, #108	; 0x6c
 8014c58:	0d1b      	lsrs	r3, r3, #20
 8014c5a:	1ac3      	subs	r3, r0, r3
 8014c5c:	409a      	lsls	r2, r3
 8014c5e:	0010      	movs	r0, r2
 8014c60:	4281      	cmp	r1, r0
 8014c62:	d142      	bne.n	8014cea <_strtod_l+0x946>
 8014c64:	4b3e      	ldr	r3, [pc, #248]	; (8014d60 <_strtod_l+0x9bc>)
 8014c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c68:	429a      	cmp	r2, r3
 8014c6a:	d102      	bne.n	8014c72 <_strtod_l+0x8ce>
 8014c6c:	1c4b      	adds	r3, r1, #1
 8014c6e:	d100      	bne.n	8014c72 <_strtod_l+0x8ce>
 8014c70:	e5ce      	b.n	8014810 <_strtod_l+0x46c>
 8014c72:	4b37      	ldr	r3, [pc, #220]	; (8014d50 <_strtod_l+0x9ac>)
 8014c74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c76:	2600      	movs	r6, #0
 8014c78:	401a      	ands	r2, r3
 8014c7a:	0013      	movs	r3, r2
 8014c7c:	2280      	movs	r2, #128	; 0x80
 8014c7e:	0352      	lsls	r2, r2, #13
 8014c80:	189f      	adds	r7, r3, r2
 8014c82:	e797      	b.n	8014bb4 <_strtod_l+0x810>
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d130      	bne.n	8014cea <_strtod_l+0x946>
 8014c88:	2e00      	cmp	r6, #0
 8014c8a:	d12e      	bne.n	8014cea <_strtod_l+0x946>
 8014c8c:	9906      	ldr	r1, [sp, #24]
 8014c8e:	003b      	movs	r3, r7
 8014c90:	4a2f      	ldr	r2, [pc, #188]	; (8014d50 <_strtod_l+0x9ac>)
 8014c92:	2900      	cmp	r1, #0
 8014c94:	d020      	beq.n	8014cd8 <_strtod_l+0x934>
 8014c96:	0011      	movs	r1, r2
 8014c98:	20d6      	movs	r0, #214	; 0xd6
 8014c9a:	4039      	ands	r1, r7
 8014c9c:	04c0      	lsls	r0, r0, #19
 8014c9e:	4281      	cmp	r1, r0
 8014ca0:	dc1a      	bgt.n	8014cd8 <_strtod_l+0x934>
 8014ca2:	23dc      	movs	r3, #220	; 0xdc
 8014ca4:	049b      	lsls	r3, r3, #18
 8014ca6:	4299      	cmp	r1, r3
 8014ca8:	dc00      	bgt.n	8014cac <_strtod_l+0x908>
 8014caa:	e646      	b.n	801493a <_strtod_l+0x596>
 8014cac:	4b2d      	ldr	r3, [pc, #180]	; (8014d64 <_strtod_l+0x9c0>)
 8014cae:	0030      	movs	r0, r6
 8014cb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8014cb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014cb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014cba:	0039      	movs	r1, r7
 8014cbc:	f7ec fcaa 	bl	8001614 <__aeabi_dmul>
 8014cc0:	0006      	movs	r6, r0
 8014cc2:	000f      	movs	r7, r1
 8014cc4:	1e0b      	subs	r3, r1, #0
 8014cc6:	d000      	beq.n	8014cca <_strtod_l+0x926>
 8014cc8:	e5ab      	b.n	8014822 <_strtod_l+0x47e>
 8014cca:	2800      	cmp	r0, #0
 8014ccc:	d000      	beq.n	8014cd0 <_strtod_l+0x92c>
 8014cce:	e5a8      	b.n	8014822 <_strtod_l+0x47e>
 8014cd0:	9a04      	ldr	r2, [sp, #16]
 8014cd2:	3322      	adds	r3, #34	; 0x22
 8014cd4:	6013      	str	r3, [r2, #0]
 8014cd6:	e5a4      	b.n	8014822 <_strtod_l+0x47e>
 8014cd8:	2601      	movs	r6, #1
 8014cda:	4013      	ands	r3, r2
 8014cdc:	4a22      	ldr	r2, [pc, #136]	; (8014d68 <_strtod_l+0x9c4>)
 8014cde:	4276      	negs	r6, r6
 8014ce0:	189b      	adds	r3, r3, r2
 8014ce2:	4a1e      	ldr	r2, [pc, #120]	; (8014d5c <_strtod_l+0x9b8>)
 8014ce4:	431a      	orrs	r2, r3
 8014ce6:	0017      	movs	r7, r2
 8014ce8:	e764      	b.n	8014bb4 <_strtod_l+0x810>
 8014cea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d015      	beq.n	8014d1c <_strtod_l+0x978>
 8014cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cf2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014cf4:	4213      	tst	r3, r2
 8014cf6:	d100      	bne.n	8014cfa <_strtod_l+0x956>
 8014cf8:	e75c      	b.n	8014bb4 <_strtod_l+0x810>
 8014cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cfc:	9a06      	ldr	r2, [sp, #24]
 8014cfe:	0030      	movs	r0, r6
 8014d00:	0039      	movs	r1, r7
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d00f      	beq.n	8014d26 <_strtod_l+0x982>
 8014d06:	f7ff fb35 	bl	8014374 <sulp>
 8014d0a:	0002      	movs	r2, r0
 8014d0c:	000b      	movs	r3, r1
 8014d0e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014d10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014d12:	f7eb fd59 	bl	80007c8 <__aeabi_dadd>
 8014d16:	0006      	movs	r6, r0
 8014d18:	000f      	movs	r7, r1
 8014d1a:	e74b      	b.n	8014bb4 <_strtod_l+0x810>
 8014d1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d1e:	4233      	tst	r3, r6
 8014d20:	d100      	bne.n	8014d24 <_strtod_l+0x980>
 8014d22:	e747      	b.n	8014bb4 <_strtod_l+0x810>
 8014d24:	e7e9      	b.n	8014cfa <_strtod_l+0x956>
 8014d26:	f7ff fb25 	bl	8014374 <sulp>
 8014d2a:	0002      	movs	r2, r0
 8014d2c:	000b      	movs	r3, r1
 8014d2e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014d30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014d32:	f7ec fee1 	bl	8001af8 <__aeabi_dsub>
 8014d36:	2200      	movs	r2, #0
 8014d38:	2300      	movs	r3, #0
 8014d3a:	0006      	movs	r6, r0
 8014d3c:	000f      	movs	r7, r1
 8014d3e:	f7eb fb83 	bl	8000448 <__aeabi_dcmpeq>
 8014d42:	2800      	cmp	r0, #0
 8014d44:	d000      	beq.n	8014d48 <_strtod_l+0x9a4>
 8014d46:	e5f8      	b.n	801493a <_strtod_l+0x596>
 8014d48:	e734      	b.n	8014bb4 <_strtod_l+0x810>
 8014d4a:	46c0      	nop			; (mov r8, r8)
 8014d4c:	fffffc02 	.word	0xfffffc02
 8014d50:	7ff00000 	.word	0x7ff00000
 8014d54:	0801a580 	.word	0x0801a580
 8014d58:	fffffbe2 	.word	0xfffffbe2
 8014d5c:	000fffff 	.word	0x000fffff
 8014d60:	7fefffff 	.word	0x7fefffff
 8014d64:	39500000 	.word	0x39500000
 8014d68:	fff00000 	.word	0xfff00000
 8014d6c:	9905      	ldr	r1, [sp, #20]
 8014d6e:	0020      	movs	r0, r4
 8014d70:	f001 ffb2 	bl	8016cd8 <__ratio>
 8014d74:	2380      	movs	r3, #128	; 0x80
 8014d76:	2200      	movs	r2, #0
 8014d78:	05db      	lsls	r3, r3, #23
 8014d7a:	9008      	str	r0, [sp, #32]
 8014d7c:	9109      	str	r1, [sp, #36]	; 0x24
 8014d7e:	f7eb fb73 	bl	8000468 <__aeabi_dcmple>
 8014d82:	2800      	cmp	r0, #0
 8014d84:	d100      	bne.n	8014d88 <_strtod_l+0x9e4>
 8014d86:	e07f      	b.n	8014e88 <_strtod_l+0xae4>
 8014d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d04b      	beq.n	8014e26 <_strtod_l+0xa82>
 8014d8e:	2200      	movs	r2, #0
 8014d90:	4b8a      	ldr	r3, [pc, #552]	; (8014fbc <_strtod_l+0xc18>)
 8014d92:	9210      	str	r2, [sp, #64]	; 0x40
 8014d94:	9311      	str	r3, [sp, #68]	; 0x44
 8014d96:	4b89      	ldr	r3, [pc, #548]	; (8014fbc <_strtod_l+0xc18>)
 8014d98:	9308      	str	r3, [sp, #32]
 8014d9a:	4a89      	ldr	r2, [pc, #548]	; (8014fc0 <_strtod_l+0xc1c>)
 8014d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d9e:	4013      	ands	r3, r2
 8014da0:	9314      	str	r3, [sp, #80]	; 0x50
 8014da2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014da4:	4b87      	ldr	r3, [pc, #540]	; (8014fc4 <_strtod_l+0xc20>)
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d000      	beq.n	8014dac <_strtod_l+0xa08>
 8014daa:	e0ba      	b.n	8014f22 <_strtod_l+0xb7e>
 8014dac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014db0:	921a      	str	r2, [sp, #104]	; 0x68
 8014db2:	931b      	str	r3, [sp, #108]	; 0x6c
 8014db4:	4a84      	ldr	r2, [pc, #528]	; (8014fc8 <_strtod_l+0xc24>)
 8014db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014db8:	4694      	mov	ip, r2
 8014dba:	4463      	add	r3, ip
 8014dbc:	001f      	movs	r7, r3
 8014dbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014dc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014dc2:	0030      	movs	r0, r6
 8014dc4:	0039      	movs	r1, r7
 8014dc6:	920c      	str	r2, [sp, #48]	; 0x30
 8014dc8:	930d      	str	r3, [sp, #52]	; 0x34
 8014dca:	f001 febf 	bl	8016b4c <__ulp>
 8014dce:	0002      	movs	r2, r0
 8014dd0:	000b      	movs	r3, r1
 8014dd2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014dd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014dd6:	f7ec fc1d 	bl	8001614 <__aeabi_dmul>
 8014dda:	0032      	movs	r2, r6
 8014ddc:	003b      	movs	r3, r7
 8014dde:	f7eb fcf3 	bl	80007c8 <__aeabi_dadd>
 8014de2:	4a77      	ldr	r2, [pc, #476]	; (8014fc0 <_strtod_l+0xc1c>)
 8014de4:	4b79      	ldr	r3, [pc, #484]	; (8014fcc <_strtod_l+0xc28>)
 8014de6:	0006      	movs	r6, r0
 8014de8:	400a      	ands	r2, r1
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d964      	bls.n	8014eb8 <_strtod_l+0xb14>
 8014dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014df0:	4a77      	ldr	r2, [pc, #476]	; (8014fd0 <_strtod_l+0xc2c>)
 8014df2:	4293      	cmp	r3, r2
 8014df4:	d103      	bne.n	8014dfe <_strtod_l+0xa5a>
 8014df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014df8:	3301      	adds	r3, #1
 8014dfa:	d100      	bne.n	8014dfe <_strtod_l+0xa5a>
 8014dfc:	e508      	b.n	8014810 <_strtod_l+0x46c>
 8014dfe:	2601      	movs	r6, #1
 8014e00:	4f73      	ldr	r7, [pc, #460]	; (8014fd0 <_strtod_l+0xc2c>)
 8014e02:	4276      	negs	r6, r6
 8014e04:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014e06:	9804      	ldr	r0, [sp, #16]
 8014e08:	f001 fc07 	bl	801661a <_Bfree>
 8014e0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014e0e:	9804      	ldr	r0, [sp, #16]
 8014e10:	f001 fc03 	bl	801661a <_Bfree>
 8014e14:	9905      	ldr	r1, [sp, #20]
 8014e16:	9804      	ldr	r0, [sp, #16]
 8014e18:	f001 fbff 	bl	801661a <_Bfree>
 8014e1c:	0021      	movs	r1, r4
 8014e1e:	9804      	ldr	r0, [sp, #16]
 8014e20:	f001 fbfb 	bl	801661a <_Bfree>
 8014e24:	e5f4      	b.n	8014a10 <_strtod_l+0x66c>
 8014e26:	2e00      	cmp	r6, #0
 8014e28:	d11e      	bne.n	8014e68 <_strtod_l+0xac4>
 8014e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e2c:	031b      	lsls	r3, r3, #12
 8014e2e:	d121      	bne.n	8014e74 <_strtod_l+0xad0>
 8014e30:	9808      	ldr	r0, [sp, #32]
 8014e32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e34:	2200      	movs	r2, #0
 8014e36:	4b61      	ldr	r3, [pc, #388]	; (8014fbc <_strtod_l+0xc18>)
 8014e38:	f7eb fb0c 	bl	8000454 <__aeabi_dcmplt>
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d11f      	bne.n	8014e80 <_strtod_l+0xadc>
 8014e40:	9808      	ldr	r0, [sp, #32]
 8014e42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e44:	2200      	movs	r2, #0
 8014e46:	4b63      	ldr	r3, [pc, #396]	; (8014fd4 <_strtod_l+0xc30>)
 8014e48:	f7ec fbe4 	bl	8001614 <__aeabi_dmul>
 8014e4c:	0005      	movs	r5, r0
 8014e4e:	9108      	str	r1, [sp, #32]
 8014e50:	2280      	movs	r2, #128	; 0x80
 8014e52:	0612      	lsls	r2, r2, #24
 8014e54:	4694      	mov	ip, r2
 8014e56:	9b08      	ldr	r3, [sp, #32]
 8014e58:	951e      	str	r5, [sp, #120]	; 0x78
 8014e5a:	4463      	add	r3, ip
 8014e5c:	931f      	str	r3, [sp, #124]	; 0x7c
 8014e5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014e60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014e62:	9210      	str	r2, [sp, #64]	; 0x40
 8014e64:	9311      	str	r3, [sp, #68]	; 0x44
 8014e66:	e798      	b.n	8014d9a <_strtod_l+0x9f6>
 8014e68:	2e01      	cmp	r6, #1
 8014e6a:	d103      	bne.n	8014e74 <_strtod_l+0xad0>
 8014e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d100      	bne.n	8014e74 <_strtod_l+0xad0>
 8014e72:	e562      	b.n	801493a <_strtod_l+0x596>
 8014e74:	2200      	movs	r2, #0
 8014e76:	4b58      	ldr	r3, [pc, #352]	; (8014fd8 <_strtod_l+0xc34>)
 8014e78:	2500      	movs	r5, #0
 8014e7a:	9210      	str	r2, [sp, #64]	; 0x40
 8014e7c:	9311      	str	r3, [sp, #68]	; 0x44
 8014e7e:	e78a      	b.n	8014d96 <_strtod_l+0x9f2>
 8014e80:	4b54      	ldr	r3, [pc, #336]	; (8014fd4 <_strtod_l+0xc30>)
 8014e82:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014e84:	9308      	str	r3, [sp, #32]
 8014e86:	e7e3      	b.n	8014e50 <_strtod_l+0xaac>
 8014e88:	4b52      	ldr	r3, [pc, #328]	; (8014fd4 <_strtod_l+0xc30>)
 8014e8a:	9808      	ldr	r0, [sp, #32]
 8014e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e8e:	2200      	movs	r2, #0
 8014e90:	f7ec fbc0 	bl	8001614 <__aeabi_dmul>
 8014e94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e96:	0005      	movs	r5, r0
 8014e98:	9108      	str	r1, [sp, #32]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d107      	bne.n	8014eae <_strtod_l+0xb0a>
 8014e9e:	2380      	movs	r3, #128	; 0x80
 8014ea0:	061b      	lsls	r3, r3, #24
 8014ea2:	18cb      	adds	r3, r1, r3
 8014ea4:	9016      	str	r0, [sp, #88]	; 0x58
 8014ea6:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ea8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014eaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014eac:	e7d9      	b.n	8014e62 <_strtod_l+0xabe>
 8014eae:	0002      	movs	r2, r0
 8014eb0:	9b08      	ldr	r3, [sp, #32]
 8014eb2:	9216      	str	r2, [sp, #88]	; 0x58
 8014eb4:	9317      	str	r3, [sp, #92]	; 0x5c
 8014eb6:	e7f7      	b.n	8014ea8 <_strtod_l+0xb04>
 8014eb8:	23d4      	movs	r3, #212	; 0xd4
 8014eba:	049b      	lsls	r3, r3, #18
 8014ebc:	18cf      	adds	r7, r1, r3
 8014ebe:	9b06      	ldr	r3, [sp, #24]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d19f      	bne.n	8014e04 <_strtod_l+0xa60>
 8014ec4:	4b3e      	ldr	r3, [pc, #248]	; (8014fc0 <_strtod_l+0xc1c>)
 8014ec6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014ec8:	970c      	str	r7, [sp, #48]	; 0x30
 8014eca:	403b      	ands	r3, r7
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d199      	bne.n	8014e04 <_strtod_l+0xa60>
 8014ed0:	9908      	ldr	r1, [sp, #32]
 8014ed2:	0028      	movs	r0, r5
 8014ed4:	f7ed f974 	bl	80021c0 <__aeabi_d2iz>
 8014ed8:	f7ed f9a8 	bl	800222c <__aeabi_i2d>
 8014edc:	000b      	movs	r3, r1
 8014ede:	0002      	movs	r2, r0
 8014ee0:	9908      	ldr	r1, [sp, #32]
 8014ee2:	0028      	movs	r0, r5
 8014ee4:	f7ec fe08 	bl	8001af8 <__aeabi_dsub>
 8014ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014eea:	9008      	str	r0, [sp, #32]
 8014eec:	9109      	str	r1, [sp, #36]	; 0x24
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d104      	bne.n	8014efc <_strtod_l+0xb58>
 8014ef2:	2e00      	cmp	r6, #0
 8014ef4:	d102      	bne.n	8014efc <_strtod_l+0xb58>
 8014ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ef8:	031b      	lsls	r3, r3, #12
 8014efa:	d058      	beq.n	8014fae <_strtod_l+0xc0a>
 8014efc:	9808      	ldr	r0, [sp, #32]
 8014efe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f00:	4a36      	ldr	r2, [pc, #216]	; (8014fdc <_strtod_l+0xc38>)
 8014f02:	4b37      	ldr	r3, [pc, #220]	; (8014fe0 <_strtod_l+0xc3c>)
 8014f04:	f7eb faa6 	bl	8000454 <__aeabi_dcmplt>
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	d000      	beq.n	8014f0e <_strtod_l+0xb6a>
 8014f0c:	e489      	b.n	8014822 <_strtod_l+0x47e>
 8014f0e:	9808      	ldr	r0, [sp, #32]
 8014f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f12:	4a34      	ldr	r2, [pc, #208]	; (8014fe4 <_strtod_l+0xc40>)
 8014f14:	4b2f      	ldr	r3, [pc, #188]	; (8014fd4 <_strtod_l+0xc30>)
 8014f16:	f7eb fab1 	bl	800047c <__aeabi_dcmpgt>
 8014f1a:	2800      	cmp	r0, #0
 8014f1c:	d100      	bne.n	8014f20 <_strtod_l+0xb7c>
 8014f1e:	e771      	b.n	8014e04 <_strtod_l+0xa60>
 8014f20:	e47f      	b.n	8014822 <_strtod_l+0x47e>
 8014f22:	9b06      	ldr	r3, [sp, #24]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d02a      	beq.n	8014f7e <_strtod_l+0xbda>
 8014f28:	23d4      	movs	r3, #212	; 0xd4
 8014f2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f2c:	04db      	lsls	r3, r3, #19
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d825      	bhi.n	8014f7e <_strtod_l+0xbda>
 8014f32:	4a2d      	ldr	r2, [pc, #180]	; (8014fe8 <_strtod_l+0xc44>)
 8014f34:	4b2d      	ldr	r3, [pc, #180]	; (8014fec <_strtod_l+0xc48>)
 8014f36:	0028      	movs	r0, r5
 8014f38:	9908      	ldr	r1, [sp, #32]
 8014f3a:	f7eb fa95 	bl	8000468 <__aeabi_dcmple>
 8014f3e:	2800      	cmp	r0, #0
 8014f40:	d016      	beq.n	8014f70 <_strtod_l+0xbcc>
 8014f42:	0028      	movs	r0, r5
 8014f44:	9908      	ldr	r1, [sp, #32]
 8014f46:	f7eb fb1b 	bl	8000580 <__aeabi_d2uiz>
 8014f4a:	2800      	cmp	r0, #0
 8014f4c:	d100      	bne.n	8014f50 <_strtod_l+0xbac>
 8014f4e:	3001      	adds	r0, #1
 8014f50:	f7ed f9a6 	bl	80022a0 <__aeabi_ui2d>
 8014f54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f56:	0005      	movs	r5, r0
 8014f58:	9108      	str	r1, [sp, #32]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d122      	bne.n	8014fa4 <_strtod_l+0xc00>
 8014f5e:	2380      	movs	r3, #128	; 0x80
 8014f60:	061b      	lsls	r3, r3, #24
 8014f62:	18cb      	adds	r3, r1, r3
 8014f64:	9018      	str	r0, [sp, #96]	; 0x60
 8014f66:	9319      	str	r3, [sp, #100]	; 0x64
 8014f68:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014f6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f6c:	9210      	str	r2, [sp, #64]	; 0x40
 8014f6e:	9311      	str	r3, [sp, #68]	; 0x44
 8014f70:	22d6      	movs	r2, #214	; 0xd6
 8014f72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f74:	04d2      	lsls	r2, r2, #19
 8014f76:	189b      	adds	r3, r3, r2
 8014f78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f7a:	1a9b      	subs	r3, r3, r2
 8014f7c:	9311      	str	r3, [sp, #68]	; 0x44
 8014f7e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014f80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014f82:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014f84:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014f86:	f001 fde1 	bl	8016b4c <__ulp>
 8014f8a:	0002      	movs	r2, r0
 8014f8c:	000b      	movs	r3, r1
 8014f8e:	0030      	movs	r0, r6
 8014f90:	0039      	movs	r1, r7
 8014f92:	f7ec fb3f 	bl	8001614 <__aeabi_dmul>
 8014f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f9a:	f7eb fc15 	bl	80007c8 <__aeabi_dadd>
 8014f9e:	0006      	movs	r6, r0
 8014fa0:	000f      	movs	r7, r1
 8014fa2:	e78c      	b.n	8014ebe <_strtod_l+0xb1a>
 8014fa4:	0002      	movs	r2, r0
 8014fa6:	9b08      	ldr	r3, [sp, #32]
 8014fa8:	9218      	str	r2, [sp, #96]	; 0x60
 8014faa:	9319      	str	r3, [sp, #100]	; 0x64
 8014fac:	e7dc      	b.n	8014f68 <_strtod_l+0xbc4>
 8014fae:	4a0b      	ldr	r2, [pc, #44]	; (8014fdc <_strtod_l+0xc38>)
 8014fb0:	4b0f      	ldr	r3, [pc, #60]	; (8014ff0 <_strtod_l+0xc4c>)
 8014fb2:	9808      	ldr	r0, [sp, #32]
 8014fb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fb6:	f7eb fa4d 	bl	8000454 <__aeabi_dcmplt>
 8014fba:	e7ae      	b.n	8014f1a <_strtod_l+0xb76>
 8014fbc:	3ff00000 	.word	0x3ff00000
 8014fc0:	7ff00000 	.word	0x7ff00000
 8014fc4:	7fe00000 	.word	0x7fe00000
 8014fc8:	fcb00000 	.word	0xfcb00000
 8014fcc:	7c9fffff 	.word	0x7c9fffff
 8014fd0:	7fefffff 	.word	0x7fefffff
 8014fd4:	3fe00000 	.word	0x3fe00000
 8014fd8:	bff00000 	.word	0xbff00000
 8014fdc:	94a03595 	.word	0x94a03595
 8014fe0:	3fdfffff 	.word	0x3fdfffff
 8014fe4:	35afe535 	.word	0x35afe535
 8014fe8:	ffc00000 	.word	0xffc00000
 8014fec:	41dfffff 	.word	0x41dfffff
 8014ff0:	3fcfffff 	.word	0x3fcfffff

08014ff4 <_strtod_r>:
 8014ff4:	4b04      	ldr	r3, [pc, #16]	; (8015008 <_strtod_r+0x14>)
 8014ff6:	b510      	push	{r4, lr}
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	6a1b      	ldr	r3, [r3, #32]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d100      	bne.n	8015002 <_strtod_r+0xe>
 8015000:	4b02      	ldr	r3, [pc, #8]	; (801500c <_strtod_r+0x18>)
 8015002:	f7ff f9cf 	bl	80143a4 <_strtod_l>
 8015006:	bd10      	pop	{r4, pc}
 8015008:	200000e0 	.word	0x200000e0
 801500c:	20000144 	.word	0x20000144

08015010 <strtod>:
 8015010:	4b06      	ldr	r3, [pc, #24]	; (801502c <strtod+0x1c>)
 8015012:	b510      	push	{r4, lr}
 8015014:	0004      	movs	r4, r0
 8015016:	6818      	ldr	r0, [r3, #0]
 8015018:	000a      	movs	r2, r1
 801501a:	6a03      	ldr	r3, [r0, #32]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d100      	bne.n	8015022 <strtod+0x12>
 8015020:	4b03      	ldr	r3, [pc, #12]	; (8015030 <strtod+0x20>)
 8015022:	0021      	movs	r1, r4
 8015024:	f7ff f9be 	bl	80143a4 <_strtod_l>
 8015028:	bd10      	pop	{r4, pc}
 801502a:	46c0      	nop			; (mov r8, r8)
 801502c:	200000e0 	.word	0x200000e0
 8015030:	20000144 	.word	0x20000144

08015034 <strtok>:
 8015034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015036:	4b12      	ldr	r3, [pc, #72]	; (8015080 <strtok+0x4c>)
 8015038:	0006      	movs	r6, r0
 801503a:	681d      	ldr	r5, [r3, #0]
 801503c:	000f      	movs	r7, r1
 801503e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8015040:	2c00      	cmp	r4, #0
 8015042:	d116      	bne.n	8015072 <strtok+0x3e>
 8015044:	2050      	movs	r0, #80	; 0x50
 8015046:	f7fe f98f 	bl	8013368 <malloc>
 801504a:	65a8      	str	r0, [r5, #88]	; 0x58
 801504c:	6004      	str	r4, [r0, #0]
 801504e:	6044      	str	r4, [r0, #4]
 8015050:	6084      	str	r4, [r0, #8]
 8015052:	60c4      	str	r4, [r0, #12]
 8015054:	6104      	str	r4, [r0, #16]
 8015056:	6144      	str	r4, [r0, #20]
 8015058:	6184      	str	r4, [r0, #24]
 801505a:	6284      	str	r4, [r0, #40]	; 0x28
 801505c:	62c4      	str	r4, [r0, #44]	; 0x2c
 801505e:	6304      	str	r4, [r0, #48]	; 0x30
 8015060:	6344      	str	r4, [r0, #52]	; 0x34
 8015062:	6384      	str	r4, [r0, #56]	; 0x38
 8015064:	63c4      	str	r4, [r0, #60]	; 0x3c
 8015066:	6404      	str	r4, [r0, #64]	; 0x40
 8015068:	6444      	str	r4, [r0, #68]	; 0x44
 801506a:	6484      	str	r4, [r0, #72]	; 0x48
 801506c:	64c4      	str	r4, [r0, #76]	; 0x4c
 801506e:	7704      	strb	r4, [r0, #28]
 8015070:	6244      	str	r4, [r0, #36]	; 0x24
 8015072:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8015074:	0039      	movs	r1, r7
 8015076:	0030      	movs	r0, r6
 8015078:	2301      	movs	r3, #1
 801507a:	f000 f803 	bl	8015084 <__strtok_r>
 801507e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015080:	200000e0 	.word	0x200000e0

08015084 <__strtok_r>:
 8015084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015086:	2800      	cmp	r0, #0
 8015088:	d104      	bne.n	8015094 <__strtok_r+0x10>
 801508a:	6810      	ldr	r0, [r2, #0]
 801508c:	2800      	cmp	r0, #0
 801508e:	d101      	bne.n	8015094 <__strtok_r+0x10>
 8015090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015092:	0020      	movs	r0, r4
 8015094:	000e      	movs	r6, r1
 8015096:	7805      	ldrb	r5, [r0, #0]
 8015098:	1c44      	adds	r4, r0, #1
 801509a:	7837      	ldrb	r7, [r6, #0]
 801509c:	2f00      	cmp	r7, #0
 801509e:	d104      	bne.n	80150aa <__strtok_r+0x26>
 80150a0:	2d00      	cmp	r5, #0
 80150a2:	d110      	bne.n	80150c6 <__strtok_r+0x42>
 80150a4:	6015      	str	r5, [r2, #0]
 80150a6:	0028      	movs	r0, r5
 80150a8:	e7f2      	b.n	8015090 <__strtok_r+0xc>
 80150aa:	3601      	adds	r6, #1
 80150ac:	42bd      	cmp	r5, r7
 80150ae:	d1f4      	bne.n	801509a <__strtok_r+0x16>
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d1ee      	bne.n	8015092 <__strtok_r+0xe>
 80150b4:	6014      	str	r4, [r2, #0]
 80150b6:	7003      	strb	r3, [r0, #0]
 80150b8:	e7ea      	b.n	8015090 <__strtok_r+0xc>
 80150ba:	0033      	movs	r3, r6
 80150bc:	e00d      	b.n	80150da <__strtok_r+0x56>
 80150be:	3501      	adds	r5, #1
 80150c0:	2f00      	cmp	r7, #0
 80150c2:	d103      	bne.n	80150cc <__strtok_r+0x48>
 80150c4:	001c      	movs	r4, r3
 80150c6:	000d      	movs	r5, r1
 80150c8:	7826      	ldrb	r6, [r4, #0]
 80150ca:	1c63      	adds	r3, r4, #1
 80150cc:	782f      	ldrb	r7, [r5, #0]
 80150ce:	42be      	cmp	r6, r7
 80150d0:	d1f5      	bne.n	80150be <__strtok_r+0x3a>
 80150d2:	2e00      	cmp	r6, #0
 80150d4:	d0f1      	beq.n	80150ba <__strtok_r+0x36>
 80150d6:	2100      	movs	r1, #0
 80150d8:	7021      	strb	r1, [r4, #0]
 80150da:	6013      	str	r3, [r2, #0]
 80150dc:	e7d8      	b.n	8015090 <__strtok_r+0xc>
	...

080150e0 <_strtol_l.isra.0>:
 80150e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150e2:	001f      	movs	r7, r3
 80150e4:	000e      	movs	r6, r1
 80150e6:	b087      	sub	sp, #28
 80150e8:	9005      	str	r0, [sp, #20]
 80150ea:	9101      	str	r1, [sp, #4]
 80150ec:	9202      	str	r2, [sp, #8]
 80150ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80150f0:	7834      	ldrb	r4, [r6, #0]
 80150f2:	f7fe f927 	bl	8013344 <__locale_ctype_ptr_l>
 80150f6:	2208      	movs	r2, #8
 80150f8:	1900      	adds	r0, r0, r4
 80150fa:	7843      	ldrb	r3, [r0, #1]
 80150fc:	1c75      	adds	r5, r6, #1
 80150fe:	4013      	ands	r3, r2
 8015100:	d136      	bne.n	8015170 <_strtol_l.isra.0+0x90>
 8015102:	2c2d      	cmp	r4, #45	; 0x2d
 8015104:	d136      	bne.n	8015174 <_strtol_l.isra.0+0x94>
 8015106:	1cb5      	adds	r5, r6, #2
 8015108:	7874      	ldrb	r4, [r6, #1]
 801510a:	2601      	movs	r6, #1
 801510c:	2f00      	cmp	r7, #0
 801510e:	d062      	beq.n	80151d6 <_strtol_l.isra.0+0xf6>
 8015110:	2f10      	cmp	r7, #16
 8015112:	d109      	bne.n	8015128 <_strtol_l.isra.0+0x48>
 8015114:	2c30      	cmp	r4, #48	; 0x30
 8015116:	d107      	bne.n	8015128 <_strtol_l.isra.0+0x48>
 8015118:	2220      	movs	r2, #32
 801511a:	782b      	ldrb	r3, [r5, #0]
 801511c:	4393      	bics	r3, r2
 801511e:	2b58      	cmp	r3, #88	; 0x58
 8015120:	d154      	bne.n	80151cc <_strtol_l.isra.0+0xec>
 8015122:	2710      	movs	r7, #16
 8015124:	786c      	ldrb	r4, [r5, #1]
 8015126:	3502      	adds	r5, #2
 8015128:	4b2d      	ldr	r3, [pc, #180]	; (80151e0 <_strtol_l.isra.0+0x100>)
 801512a:	0039      	movs	r1, r7
 801512c:	18f3      	adds	r3, r6, r3
 801512e:	0018      	movs	r0, r3
 8015130:	9303      	str	r3, [sp, #12]
 8015132:	f7eb f889 	bl	8000248 <__aeabi_uidivmod>
 8015136:	9104      	str	r1, [sp, #16]
 8015138:	2101      	movs	r1, #1
 801513a:	2300      	movs	r3, #0
 801513c:	4249      	negs	r1, r1
 801513e:	0002      	movs	r2, r0
 8015140:	468c      	mov	ip, r1
 8015142:	0018      	movs	r0, r3
 8015144:	0021      	movs	r1, r4
 8015146:	3930      	subs	r1, #48	; 0x30
 8015148:	2909      	cmp	r1, #9
 801514a:	d81a      	bhi.n	8015182 <_strtol_l.isra.0+0xa2>
 801514c:	000c      	movs	r4, r1
 801514e:	42a7      	cmp	r7, r4
 8015150:	dd23      	ble.n	801519a <_strtol_l.isra.0+0xba>
 8015152:	1c59      	adds	r1, r3, #1
 8015154:	d009      	beq.n	801516a <_strtol_l.isra.0+0x8a>
 8015156:	4663      	mov	r3, ip
 8015158:	4282      	cmp	r2, r0
 801515a:	d306      	bcc.n	801516a <_strtol_l.isra.0+0x8a>
 801515c:	d102      	bne.n	8015164 <_strtol_l.isra.0+0x84>
 801515e:	9904      	ldr	r1, [sp, #16]
 8015160:	42a1      	cmp	r1, r4
 8015162:	db02      	blt.n	801516a <_strtol_l.isra.0+0x8a>
 8015164:	2301      	movs	r3, #1
 8015166:	4378      	muls	r0, r7
 8015168:	1820      	adds	r0, r4, r0
 801516a:	782c      	ldrb	r4, [r5, #0]
 801516c:	3501      	adds	r5, #1
 801516e:	e7e9      	b.n	8015144 <_strtol_l.isra.0+0x64>
 8015170:	002e      	movs	r6, r5
 8015172:	e7bc      	b.n	80150ee <_strtol_l.isra.0+0xe>
 8015174:	2c2b      	cmp	r4, #43	; 0x2b
 8015176:	d001      	beq.n	801517c <_strtol_l.isra.0+0x9c>
 8015178:	001e      	movs	r6, r3
 801517a:	e7c7      	b.n	801510c <_strtol_l.isra.0+0x2c>
 801517c:	1cb5      	adds	r5, r6, #2
 801517e:	7874      	ldrb	r4, [r6, #1]
 8015180:	e7fa      	b.n	8015178 <_strtol_l.isra.0+0x98>
 8015182:	0021      	movs	r1, r4
 8015184:	3941      	subs	r1, #65	; 0x41
 8015186:	2919      	cmp	r1, #25
 8015188:	d801      	bhi.n	801518e <_strtol_l.isra.0+0xae>
 801518a:	3c37      	subs	r4, #55	; 0x37
 801518c:	e7df      	b.n	801514e <_strtol_l.isra.0+0x6e>
 801518e:	0021      	movs	r1, r4
 8015190:	3961      	subs	r1, #97	; 0x61
 8015192:	2919      	cmp	r1, #25
 8015194:	d801      	bhi.n	801519a <_strtol_l.isra.0+0xba>
 8015196:	3c57      	subs	r4, #87	; 0x57
 8015198:	e7d9      	b.n	801514e <_strtol_l.isra.0+0x6e>
 801519a:	1c5a      	adds	r2, r3, #1
 801519c:	d108      	bne.n	80151b0 <_strtol_l.isra.0+0xd0>
 801519e:	9a05      	ldr	r2, [sp, #20]
 80151a0:	3323      	adds	r3, #35	; 0x23
 80151a2:	6013      	str	r3, [r2, #0]
 80151a4:	9b02      	ldr	r3, [sp, #8]
 80151a6:	9803      	ldr	r0, [sp, #12]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d109      	bne.n	80151c0 <_strtol_l.isra.0+0xe0>
 80151ac:	b007      	add	sp, #28
 80151ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151b0:	2e00      	cmp	r6, #0
 80151b2:	d000      	beq.n	80151b6 <_strtol_l.isra.0+0xd6>
 80151b4:	4240      	negs	r0, r0
 80151b6:	9a02      	ldr	r2, [sp, #8]
 80151b8:	2a00      	cmp	r2, #0
 80151ba:	d0f7      	beq.n	80151ac <_strtol_l.isra.0+0xcc>
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d001      	beq.n	80151c4 <_strtol_l.isra.0+0xe4>
 80151c0:	1e6b      	subs	r3, r5, #1
 80151c2:	9301      	str	r3, [sp, #4]
 80151c4:	9b02      	ldr	r3, [sp, #8]
 80151c6:	9a01      	ldr	r2, [sp, #4]
 80151c8:	601a      	str	r2, [r3, #0]
 80151ca:	e7ef      	b.n	80151ac <_strtol_l.isra.0+0xcc>
 80151cc:	2430      	movs	r4, #48	; 0x30
 80151ce:	2f00      	cmp	r7, #0
 80151d0:	d1aa      	bne.n	8015128 <_strtol_l.isra.0+0x48>
 80151d2:	2708      	movs	r7, #8
 80151d4:	e7a8      	b.n	8015128 <_strtol_l.isra.0+0x48>
 80151d6:	2c30      	cmp	r4, #48	; 0x30
 80151d8:	d09e      	beq.n	8015118 <_strtol_l.isra.0+0x38>
 80151da:	270a      	movs	r7, #10
 80151dc:	e7a4      	b.n	8015128 <_strtol_l.isra.0+0x48>
 80151de:	46c0      	nop			; (mov r8, r8)
 80151e0:	7fffffff 	.word	0x7fffffff

080151e4 <_strtol_r>:
 80151e4:	b513      	push	{r0, r1, r4, lr}
 80151e6:	4c05      	ldr	r4, [pc, #20]	; (80151fc <_strtol_r+0x18>)
 80151e8:	6824      	ldr	r4, [r4, #0]
 80151ea:	6a24      	ldr	r4, [r4, #32]
 80151ec:	2c00      	cmp	r4, #0
 80151ee:	d100      	bne.n	80151f2 <_strtol_r+0xe>
 80151f0:	4c03      	ldr	r4, [pc, #12]	; (8015200 <_strtol_r+0x1c>)
 80151f2:	9400      	str	r4, [sp, #0]
 80151f4:	f7ff ff74 	bl	80150e0 <_strtol_l.isra.0>
 80151f8:	bd16      	pop	{r1, r2, r4, pc}
 80151fa:	46c0      	nop			; (mov r8, r8)
 80151fc:	200000e0 	.word	0x200000e0
 8015200:	20000144 	.word	0x20000144

08015204 <strtol>:
 8015204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015206:	0013      	movs	r3, r2
 8015208:	4a06      	ldr	r2, [pc, #24]	; (8015224 <strtol+0x20>)
 801520a:	0005      	movs	r5, r0
 801520c:	6810      	ldr	r0, [r2, #0]
 801520e:	6a04      	ldr	r4, [r0, #32]
 8015210:	2c00      	cmp	r4, #0
 8015212:	d100      	bne.n	8015216 <strtol+0x12>
 8015214:	4c04      	ldr	r4, [pc, #16]	; (8015228 <strtol+0x24>)
 8015216:	000a      	movs	r2, r1
 8015218:	9400      	str	r4, [sp, #0]
 801521a:	0029      	movs	r1, r5
 801521c:	f7ff ff60 	bl	80150e0 <_strtol_l.isra.0>
 8015220:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8015222:	46c0      	nop			; (mov r8, r8)
 8015224:	200000e0 	.word	0x200000e0
 8015228:	20000144 	.word	0x20000144

0801522c <__ascii_wctomb>:
 801522c:	1e0b      	subs	r3, r1, #0
 801522e:	d004      	beq.n	801523a <__ascii_wctomb+0xe>
 8015230:	2aff      	cmp	r2, #255	; 0xff
 8015232:	d904      	bls.n	801523e <__ascii_wctomb+0x12>
 8015234:	238a      	movs	r3, #138	; 0x8a
 8015236:	6003      	str	r3, [r0, #0]
 8015238:	3b8b      	subs	r3, #139	; 0x8b
 801523a:	0018      	movs	r0, r3
 801523c:	4770      	bx	lr
 801523e:	700a      	strb	r2, [r1, #0]
 8015240:	2301      	movs	r3, #1
 8015242:	e7fa      	b.n	801523a <__ascii_wctomb+0xe>

08015244 <quorem>:
 8015244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015246:	6903      	ldr	r3, [r0, #16]
 8015248:	690c      	ldr	r4, [r1, #16]
 801524a:	b089      	sub	sp, #36	; 0x24
 801524c:	0007      	movs	r7, r0
 801524e:	9105      	str	r1, [sp, #20]
 8015250:	2600      	movs	r6, #0
 8015252:	42a3      	cmp	r3, r4
 8015254:	db65      	blt.n	8015322 <quorem+0xde>
 8015256:	000b      	movs	r3, r1
 8015258:	3c01      	subs	r4, #1
 801525a:	3314      	adds	r3, #20
 801525c:	00a5      	lsls	r5, r4, #2
 801525e:	9303      	str	r3, [sp, #12]
 8015260:	195b      	adds	r3, r3, r5
 8015262:	9304      	str	r3, [sp, #16]
 8015264:	0003      	movs	r3, r0
 8015266:	3314      	adds	r3, #20
 8015268:	9302      	str	r3, [sp, #8]
 801526a:	195d      	adds	r5, r3, r5
 801526c:	9b04      	ldr	r3, [sp, #16]
 801526e:	6828      	ldr	r0, [r5, #0]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	1c59      	adds	r1, r3, #1
 8015274:	9301      	str	r3, [sp, #4]
 8015276:	f7ea ff61 	bl	800013c <__udivsi3>
 801527a:	9001      	str	r0, [sp, #4]
 801527c:	42b0      	cmp	r0, r6
 801527e:	d029      	beq.n	80152d4 <quorem+0x90>
 8015280:	9b03      	ldr	r3, [sp, #12]
 8015282:	9802      	ldr	r0, [sp, #8]
 8015284:	469c      	mov	ip, r3
 8015286:	9606      	str	r6, [sp, #24]
 8015288:	4662      	mov	r2, ip
 801528a:	ca08      	ldmia	r2!, {r3}
 801528c:	4694      	mov	ip, r2
 801528e:	9a01      	ldr	r2, [sp, #4]
 8015290:	b299      	uxth	r1, r3
 8015292:	4351      	muls	r1, r2
 8015294:	0c1b      	lsrs	r3, r3, #16
 8015296:	4353      	muls	r3, r2
 8015298:	1989      	adds	r1, r1, r6
 801529a:	0c0a      	lsrs	r2, r1, #16
 801529c:	189b      	adds	r3, r3, r2
 801529e:	9307      	str	r3, [sp, #28]
 80152a0:	0c1e      	lsrs	r6, r3, #16
 80152a2:	6803      	ldr	r3, [r0, #0]
 80152a4:	b289      	uxth	r1, r1
 80152a6:	b29a      	uxth	r2, r3
 80152a8:	9b06      	ldr	r3, [sp, #24]
 80152aa:	18d2      	adds	r2, r2, r3
 80152ac:	6803      	ldr	r3, [r0, #0]
 80152ae:	1a52      	subs	r2, r2, r1
 80152b0:	0c19      	lsrs	r1, r3, #16
 80152b2:	466b      	mov	r3, sp
 80152b4:	8b9b      	ldrh	r3, [r3, #28]
 80152b6:	1acb      	subs	r3, r1, r3
 80152b8:	1411      	asrs	r1, r2, #16
 80152ba:	185b      	adds	r3, r3, r1
 80152bc:	1419      	asrs	r1, r3, #16
 80152be:	b292      	uxth	r2, r2
 80152c0:	041b      	lsls	r3, r3, #16
 80152c2:	431a      	orrs	r2, r3
 80152c4:	9b04      	ldr	r3, [sp, #16]
 80152c6:	9106      	str	r1, [sp, #24]
 80152c8:	c004      	stmia	r0!, {r2}
 80152ca:	4563      	cmp	r3, ip
 80152cc:	d2dc      	bcs.n	8015288 <quorem+0x44>
 80152ce:	682b      	ldr	r3, [r5, #0]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d02d      	beq.n	8015330 <quorem+0xec>
 80152d4:	9905      	ldr	r1, [sp, #20]
 80152d6:	0038      	movs	r0, r7
 80152d8:	f001 fbba 	bl	8016a50 <__mcmp>
 80152dc:	2800      	cmp	r0, #0
 80152de:	db1f      	blt.n	8015320 <quorem+0xdc>
 80152e0:	2500      	movs	r5, #0
 80152e2:	9b01      	ldr	r3, [sp, #4]
 80152e4:	9802      	ldr	r0, [sp, #8]
 80152e6:	3301      	adds	r3, #1
 80152e8:	9903      	ldr	r1, [sp, #12]
 80152ea:	9301      	str	r3, [sp, #4]
 80152ec:	6802      	ldr	r2, [r0, #0]
 80152ee:	c908      	ldmia	r1!, {r3}
 80152f0:	b292      	uxth	r2, r2
 80152f2:	1955      	adds	r5, r2, r5
 80152f4:	b29a      	uxth	r2, r3
 80152f6:	1aaa      	subs	r2, r5, r2
 80152f8:	6805      	ldr	r5, [r0, #0]
 80152fa:	0c1b      	lsrs	r3, r3, #16
 80152fc:	0c2d      	lsrs	r5, r5, #16
 80152fe:	1aeb      	subs	r3, r5, r3
 8015300:	1415      	asrs	r5, r2, #16
 8015302:	195b      	adds	r3, r3, r5
 8015304:	141d      	asrs	r5, r3, #16
 8015306:	b292      	uxth	r2, r2
 8015308:	041b      	lsls	r3, r3, #16
 801530a:	4313      	orrs	r3, r2
 801530c:	c008      	stmia	r0!, {r3}
 801530e:	9b04      	ldr	r3, [sp, #16]
 8015310:	428b      	cmp	r3, r1
 8015312:	d2eb      	bcs.n	80152ec <quorem+0xa8>
 8015314:	9a02      	ldr	r2, [sp, #8]
 8015316:	00a3      	lsls	r3, r4, #2
 8015318:	18d3      	adds	r3, r2, r3
 801531a:	681a      	ldr	r2, [r3, #0]
 801531c:	2a00      	cmp	r2, #0
 801531e:	d011      	beq.n	8015344 <quorem+0x100>
 8015320:	9e01      	ldr	r6, [sp, #4]
 8015322:	0030      	movs	r0, r6
 8015324:	b009      	add	sp, #36	; 0x24
 8015326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015328:	682b      	ldr	r3, [r5, #0]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d104      	bne.n	8015338 <quorem+0xf4>
 801532e:	3c01      	subs	r4, #1
 8015330:	9b02      	ldr	r3, [sp, #8]
 8015332:	3d04      	subs	r5, #4
 8015334:	42ab      	cmp	r3, r5
 8015336:	d3f7      	bcc.n	8015328 <quorem+0xe4>
 8015338:	613c      	str	r4, [r7, #16]
 801533a:	e7cb      	b.n	80152d4 <quorem+0x90>
 801533c:	681a      	ldr	r2, [r3, #0]
 801533e:	2a00      	cmp	r2, #0
 8015340:	d104      	bne.n	801534c <quorem+0x108>
 8015342:	3c01      	subs	r4, #1
 8015344:	9a02      	ldr	r2, [sp, #8]
 8015346:	3b04      	subs	r3, #4
 8015348:	429a      	cmp	r2, r3
 801534a:	d3f7      	bcc.n	801533c <quorem+0xf8>
 801534c:	613c      	str	r4, [r7, #16]
 801534e:	e7e7      	b.n	8015320 <quorem+0xdc>

08015350 <_dtoa_r>:
 8015350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015352:	0016      	movs	r6, r2
 8015354:	001f      	movs	r7, r3
 8015356:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015358:	b09b      	sub	sp, #108	; 0x6c
 801535a:	9002      	str	r0, [sp, #8]
 801535c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801535e:	9606      	str	r6, [sp, #24]
 8015360:	9707      	str	r7, [sp, #28]
 8015362:	2c00      	cmp	r4, #0
 8015364:	d108      	bne.n	8015378 <_dtoa_r+0x28>
 8015366:	2010      	movs	r0, #16
 8015368:	f7fd fffe 	bl	8013368 <malloc>
 801536c:	9b02      	ldr	r3, [sp, #8]
 801536e:	6258      	str	r0, [r3, #36]	; 0x24
 8015370:	6044      	str	r4, [r0, #4]
 8015372:	6084      	str	r4, [r0, #8]
 8015374:	6004      	str	r4, [r0, #0]
 8015376:	60c4      	str	r4, [r0, #12]
 8015378:	9b02      	ldr	r3, [sp, #8]
 801537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801537c:	6819      	ldr	r1, [r3, #0]
 801537e:	2900      	cmp	r1, #0
 8015380:	d00b      	beq.n	801539a <_dtoa_r+0x4a>
 8015382:	685a      	ldr	r2, [r3, #4]
 8015384:	2301      	movs	r3, #1
 8015386:	4093      	lsls	r3, r2
 8015388:	604a      	str	r2, [r1, #4]
 801538a:	608b      	str	r3, [r1, #8]
 801538c:	9802      	ldr	r0, [sp, #8]
 801538e:	f001 f944 	bl	801661a <_Bfree>
 8015392:	2200      	movs	r2, #0
 8015394:	9b02      	ldr	r3, [sp, #8]
 8015396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015398:	601a      	str	r2, [r3, #0]
 801539a:	2f00      	cmp	r7, #0
 801539c:	da20      	bge.n	80153e0 <_dtoa_r+0x90>
 801539e:	2301      	movs	r3, #1
 80153a0:	602b      	str	r3, [r5, #0]
 80153a2:	007b      	lsls	r3, r7, #1
 80153a4:	085b      	lsrs	r3, r3, #1
 80153a6:	9307      	str	r3, [sp, #28]
 80153a8:	9c07      	ldr	r4, [sp, #28]
 80153aa:	4bb2      	ldr	r3, [pc, #712]	; (8015674 <_dtoa_r+0x324>)
 80153ac:	0022      	movs	r2, r4
 80153ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80153b0:	401a      	ands	r2, r3
 80153b2:	429a      	cmp	r2, r3
 80153b4:	d117      	bne.n	80153e6 <_dtoa_r+0x96>
 80153b6:	4bb0      	ldr	r3, [pc, #704]	; (8015678 <_dtoa_r+0x328>)
 80153b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80153ba:	6013      	str	r3, [r2, #0]
 80153bc:	9b06      	ldr	r3, [sp, #24]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d103      	bne.n	80153ca <_dtoa_r+0x7a>
 80153c2:	0324      	lsls	r4, r4, #12
 80153c4:	d101      	bne.n	80153ca <_dtoa_r+0x7a>
 80153c6:	f000 fd87 	bl	8015ed8 <_dtoa_r+0xb88>
 80153ca:	4bac      	ldr	r3, [pc, #688]	; (801567c <_dtoa_r+0x32c>)
 80153cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80153ce:	9308      	str	r3, [sp, #32]
 80153d0:	2a00      	cmp	r2, #0
 80153d2:	d002      	beq.n	80153da <_dtoa_r+0x8a>
 80153d4:	4baa      	ldr	r3, [pc, #680]	; (8015680 <_dtoa_r+0x330>)
 80153d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80153d8:	6013      	str	r3, [r2, #0]
 80153da:	9808      	ldr	r0, [sp, #32]
 80153dc:	b01b      	add	sp, #108	; 0x6c
 80153de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153e0:	2300      	movs	r3, #0
 80153e2:	602b      	str	r3, [r5, #0]
 80153e4:	e7e0      	b.n	80153a8 <_dtoa_r+0x58>
 80153e6:	9e06      	ldr	r6, [sp, #24]
 80153e8:	9f07      	ldr	r7, [sp, #28]
 80153ea:	2200      	movs	r2, #0
 80153ec:	2300      	movs	r3, #0
 80153ee:	0030      	movs	r0, r6
 80153f0:	0039      	movs	r1, r7
 80153f2:	f7eb f829 	bl	8000448 <__aeabi_dcmpeq>
 80153f6:	1e05      	subs	r5, r0, #0
 80153f8:	d00b      	beq.n	8015412 <_dtoa_r+0xc2>
 80153fa:	2301      	movs	r3, #1
 80153fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80153fe:	6013      	str	r3, [r2, #0]
 8015400:	4ba0      	ldr	r3, [pc, #640]	; (8015684 <_dtoa_r+0x334>)
 8015402:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015404:	9308      	str	r3, [sp, #32]
 8015406:	2a00      	cmp	r2, #0
 8015408:	d0e7      	beq.n	80153da <_dtoa_r+0x8a>
 801540a:	4a9f      	ldr	r2, [pc, #636]	; (8015688 <_dtoa_r+0x338>)
 801540c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801540e:	600a      	str	r2, [r1, #0]
 8015410:	e7e3      	b.n	80153da <_dtoa_r+0x8a>
 8015412:	ab18      	add	r3, sp, #96	; 0x60
 8015414:	9301      	str	r3, [sp, #4]
 8015416:	ab19      	add	r3, sp, #100	; 0x64
 8015418:	9300      	str	r3, [sp, #0]
 801541a:	0032      	movs	r2, r6
 801541c:	003b      	movs	r3, r7
 801541e:	9802      	ldr	r0, [sp, #8]
 8015420:	f001 fc06 	bl	8016c30 <__d2b>
 8015424:	0063      	lsls	r3, r4, #1
 8015426:	9003      	str	r0, [sp, #12]
 8015428:	0d5b      	lsrs	r3, r3, #21
 801542a:	d074      	beq.n	8015516 <_dtoa_r+0x1c6>
 801542c:	033a      	lsls	r2, r7, #12
 801542e:	4c97      	ldr	r4, [pc, #604]	; (801568c <_dtoa_r+0x33c>)
 8015430:	0b12      	lsrs	r2, r2, #12
 8015432:	4314      	orrs	r4, r2
 8015434:	0021      	movs	r1, r4
 8015436:	4a96      	ldr	r2, [pc, #600]	; (8015690 <_dtoa_r+0x340>)
 8015438:	0030      	movs	r0, r6
 801543a:	9516      	str	r5, [sp, #88]	; 0x58
 801543c:	189e      	adds	r6, r3, r2
 801543e:	2200      	movs	r2, #0
 8015440:	4b94      	ldr	r3, [pc, #592]	; (8015694 <_dtoa_r+0x344>)
 8015442:	f7ec fb59 	bl	8001af8 <__aeabi_dsub>
 8015446:	4a94      	ldr	r2, [pc, #592]	; (8015698 <_dtoa_r+0x348>)
 8015448:	4b94      	ldr	r3, [pc, #592]	; (801569c <_dtoa_r+0x34c>)
 801544a:	f7ec f8e3 	bl	8001614 <__aeabi_dmul>
 801544e:	4a94      	ldr	r2, [pc, #592]	; (80156a0 <_dtoa_r+0x350>)
 8015450:	4b94      	ldr	r3, [pc, #592]	; (80156a4 <_dtoa_r+0x354>)
 8015452:	f7eb f9b9 	bl	80007c8 <__aeabi_dadd>
 8015456:	0004      	movs	r4, r0
 8015458:	0030      	movs	r0, r6
 801545a:	000d      	movs	r5, r1
 801545c:	f7ec fee6 	bl	800222c <__aeabi_i2d>
 8015460:	4a91      	ldr	r2, [pc, #580]	; (80156a8 <_dtoa_r+0x358>)
 8015462:	4b92      	ldr	r3, [pc, #584]	; (80156ac <_dtoa_r+0x35c>)
 8015464:	f7ec f8d6 	bl	8001614 <__aeabi_dmul>
 8015468:	0002      	movs	r2, r0
 801546a:	000b      	movs	r3, r1
 801546c:	0020      	movs	r0, r4
 801546e:	0029      	movs	r1, r5
 8015470:	f7eb f9aa 	bl	80007c8 <__aeabi_dadd>
 8015474:	0004      	movs	r4, r0
 8015476:	000d      	movs	r5, r1
 8015478:	f7ec fea2 	bl	80021c0 <__aeabi_d2iz>
 801547c:	2200      	movs	r2, #0
 801547e:	0007      	movs	r7, r0
 8015480:	2300      	movs	r3, #0
 8015482:	0020      	movs	r0, r4
 8015484:	0029      	movs	r1, r5
 8015486:	f7ea ffe5 	bl	8000454 <__aeabi_dcmplt>
 801548a:	2800      	cmp	r0, #0
 801548c:	d009      	beq.n	80154a2 <_dtoa_r+0x152>
 801548e:	0038      	movs	r0, r7
 8015490:	f7ec fecc 	bl	800222c <__aeabi_i2d>
 8015494:	002b      	movs	r3, r5
 8015496:	0022      	movs	r2, r4
 8015498:	f7ea ffd6 	bl	8000448 <__aeabi_dcmpeq>
 801549c:	4243      	negs	r3, r0
 801549e:	4158      	adcs	r0, r3
 80154a0:	1a3f      	subs	r7, r7, r0
 80154a2:	2301      	movs	r3, #1
 80154a4:	9314      	str	r3, [sp, #80]	; 0x50
 80154a6:	2f16      	cmp	r7, #22
 80154a8:	d80d      	bhi.n	80154c6 <_dtoa_r+0x176>
 80154aa:	4981      	ldr	r1, [pc, #516]	; (80156b0 <_dtoa_r+0x360>)
 80154ac:	00fb      	lsls	r3, r7, #3
 80154ae:	18c9      	adds	r1, r1, r3
 80154b0:	6808      	ldr	r0, [r1, #0]
 80154b2:	6849      	ldr	r1, [r1, #4]
 80154b4:	9a06      	ldr	r2, [sp, #24]
 80154b6:	9b07      	ldr	r3, [sp, #28]
 80154b8:	f7ea ffe0 	bl	800047c <__aeabi_dcmpgt>
 80154bc:	2800      	cmp	r0, #0
 80154be:	d046      	beq.n	801554e <_dtoa_r+0x1fe>
 80154c0:	2300      	movs	r3, #0
 80154c2:	3f01      	subs	r7, #1
 80154c4:	9314      	str	r3, [sp, #80]	; 0x50
 80154c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80154c8:	1b9e      	subs	r6, r3, r6
 80154ca:	2300      	movs	r3, #0
 80154cc:	930a      	str	r3, [sp, #40]	; 0x28
 80154ce:	0033      	movs	r3, r6
 80154d0:	3b01      	subs	r3, #1
 80154d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80154d4:	d504      	bpl.n	80154e0 <_dtoa_r+0x190>
 80154d6:	2301      	movs	r3, #1
 80154d8:	1b9b      	subs	r3, r3, r6
 80154da:	930a      	str	r3, [sp, #40]	; 0x28
 80154dc:	2300      	movs	r3, #0
 80154de:	930b      	str	r3, [sp, #44]	; 0x2c
 80154e0:	2f00      	cmp	r7, #0
 80154e2:	db36      	blt.n	8015552 <_dtoa_r+0x202>
 80154e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154e6:	9711      	str	r7, [sp, #68]	; 0x44
 80154e8:	19db      	adds	r3, r3, r7
 80154ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80154ec:	2300      	movs	r3, #0
 80154ee:	9304      	str	r3, [sp, #16]
 80154f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80154f2:	2401      	movs	r4, #1
 80154f4:	2b09      	cmp	r3, #9
 80154f6:	d900      	bls.n	80154fa <_dtoa_r+0x1aa>
 80154f8:	e084      	b.n	8015604 <_dtoa_r+0x2b4>
 80154fa:	2b05      	cmp	r3, #5
 80154fc:	dd02      	ble.n	8015504 <_dtoa_r+0x1b4>
 80154fe:	2400      	movs	r4, #0
 8015500:	3b04      	subs	r3, #4
 8015502:	9320      	str	r3, [sp, #128]	; 0x80
 8015504:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015506:	1e98      	subs	r0, r3, #2
 8015508:	2803      	cmp	r0, #3
 801550a:	d900      	bls.n	801550e <_dtoa_r+0x1be>
 801550c:	e084      	b.n	8015618 <_dtoa_r+0x2c8>
 801550e:	f7ea fe0b 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015512:	7775      	.short	0x7775
 8015514:	6a28      	.short	0x6a28
 8015516:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015518:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801551a:	189e      	adds	r6, r3, r2
 801551c:	4b65      	ldr	r3, [pc, #404]	; (80156b4 <_dtoa_r+0x364>)
 801551e:	18f2      	adds	r2, r6, r3
 8015520:	2a20      	cmp	r2, #32
 8015522:	dd0f      	ble.n	8015544 <_dtoa_r+0x1f4>
 8015524:	2340      	movs	r3, #64	; 0x40
 8015526:	1a9b      	subs	r3, r3, r2
 8015528:	409c      	lsls	r4, r3
 801552a:	4b63      	ldr	r3, [pc, #396]	; (80156b8 <_dtoa_r+0x368>)
 801552c:	9806      	ldr	r0, [sp, #24]
 801552e:	18f3      	adds	r3, r6, r3
 8015530:	40d8      	lsrs	r0, r3
 8015532:	4320      	orrs	r0, r4
 8015534:	f7ec feb4 	bl	80022a0 <__aeabi_ui2d>
 8015538:	2301      	movs	r3, #1
 801553a:	4c60      	ldr	r4, [pc, #384]	; (80156bc <_dtoa_r+0x36c>)
 801553c:	3e01      	subs	r6, #1
 801553e:	1909      	adds	r1, r1, r4
 8015540:	9316      	str	r3, [sp, #88]	; 0x58
 8015542:	e77c      	b.n	801543e <_dtoa_r+0xee>
 8015544:	2320      	movs	r3, #32
 8015546:	9806      	ldr	r0, [sp, #24]
 8015548:	1a9b      	subs	r3, r3, r2
 801554a:	4098      	lsls	r0, r3
 801554c:	e7f2      	b.n	8015534 <_dtoa_r+0x1e4>
 801554e:	9014      	str	r0, [sp, #80]	; 0x50
 8015550:	e7b9      	b.n	80154c6 <_dtoa_r+0x176>
 8015552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015554:	1bdb      	subs	r3, r3, r7
 8015556:	930a      	str	r3, [sp, #40]	; 0x28
 8015558:	427b      	negs	r3, r7
 801555a:	9304      	str	r3, [sp, #16]
 801555c:	2300      	movs	r3, #0
 801555e:	9311      	str	r3, [sp, #68]	; 0x44
 8015560:	e7c6      	b.n	80154f0 <_dtoa_r+0x1a0>
 8015562:	2301      	movs	r3, #1
 8015564:	930d      	str	r3, [sp, #52]	; 0x34
 8015566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015568:	2b00      	cmp	r3, #0
 801556a:	dd59      	ble.n	8015620 <_dtoa_r+0x2d0>
 801556c:	930c      	str	r3, [sp, #48]	; 0x30
 801556e:	9309      	str	r3, [sp, #36]	; 0x24
 8015570:	9a02      	ldr	r2, [sp, #8]
 8015572:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8015574:	2200      	movs	r2, #0
 8015576:	606a      	str	r2, [r5, #4]
 8015578:	3204      	adds	r2, #4
 801557a:	0010      	movs	r0, r2
 801557c:	3014      	adds	r0, #20
 801557e:	6869      	ldr	r1, [r5, #4]
 8015580:	4298      	cmp	r0, r3
 8015582:	d952      	bls.n	801562a <_dtoa_r+0x2da>
 8015584:	9802      	ldr	r0, [sp, #8]
 8015586:	f001 f810 	bl	80165aa <_Balloc>
 801558a:	9b02      	ldr	r3, [sp, #8]
 801558c:	6028      	str	r0, [r5, #0]
 801558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	9308      	str	r3, [sp, #32]
 8015594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015596:	2b0e      	cmp	r3, #14
 8015598:	d900      	bls.n	801559c <_dtoa_r+0x24c>
 801559a:	e10a      	b.n	80157b2 <_dtoa_r+0x462>
 801559c:	2c00      	cmp	r4, #0
 801559e:	d100      	bne.n	80155a2 <_dtoa_r+0x252>
 80155a0:	e107      	b.n	80157b2 <_dtoa_r+0x462>
 80155a2:	9b06      	ldr	r3, [sp, #24]
 80155a4:	9c07      	ldr	r4, [sp, #28]
 80155a6:	9312      	str	r3, [sp, #72]	; 0x48
 80155a8:	9413      	str	r4, [sp, #76]	; 0x4c
 80155aa:	2f00      	cmp	r7, #0
 80155ac:	dc00      	bgt.n	80155b0 <_dtoa_r+0x260>
 80155ae:	e089      	b.n	80156c4 <_dtoa_r+0x374>
 80155b0:	210f      	movs	r1, #15
 80155b2:	003a      	movs	r2, r7
 80155b4:	4b3e      	ldr	r3, [pc, #248]	; (80156b0 <_dtoa_r+0x360>)
 80155b6:	400a      	ands	r2, r1
 80155b8:	00d2      	lsls	r2, r2, #3
 80155ba:	189b      	adds	r3, r3, r2
 80155bc:	681d      	ldr	r5, [r3, #0]
 80155be:	685e      	ldr	r6, [r3, #4]
 80155c0:	2302      	movs	r3, #2
 80155c2:	113c      	asrs	r4, r7, #4
 80155c4:	930e      	str	r3, [sp, #56]	; 0x38
 80155c6:	06e3      	lsls	r3, r4, #27
 80155c8:	d50b      	bpl.n	80155e2 <_dtoa_r+0x292>
 80155ca:	4b3d      	ldr	r3, [pc, #244]	; (80156c0 <_dtoa_r+0x370>)
 80155cc:	400c      	ands	r4, r1
 80155ce:	6a1a      	ldr	r2, [r3, #32]
 80155d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80155d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80155d6:	f7eb fc13 	bl	8000e00 <__aeabi_ddiv>
 80155da:	2303      	movs	r3, #3
 80155dc:	9006      	str	r0, [sp, #24]
 80155de:	9107      	str	r1, [sp, #28]
 80155e0:	930e      	str	r3, [sp, #56]	; 0x38
 80155e2:	2300      	movs	r3, #0
 80155e4:	e03a      	b.n	801565c <_dtoa_r+0x30c>
 80155e6:	2301      	movs	r3, #1
 80155e8:	930d      	str	r3, [sp, #52]	; 0x34
 80155ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80155ec:	18fb      	adds	r3, r7, r3
 80155ee:	930c      	str	r3, [sp, #48]	; 0x30
 80155f0:	3301      	adds	r3, #1
 80155f2:	9309      	str	r3, [sp, #36]	; 0x24
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	dcbb      	bgt.n	8015570 <_dtoa_r+0x220>
 80155f8:	2301      	movs	r3, #1
 80155fa:	e7b9      	b.n	8015570 <_dtoa_r+0x220>
 80155fc:	2300      	movs	r3, #0
 80155fe:	e7b1      	b.n	8015564 <_dtoa_r+0x214>
 8015600:	2300      	movs	r3, #0
 8015602:	e7f1      	b.n	80155e8 <_dtoa_r+0x298>
 8015604:	2300      	movs	r3, #0
 8015606:	940d      	str	r4, [sp, #52]	; 0x34
 8015608:	9320      	str	r3, [sp, #128]	; 0x80
 801560a:	3b01      	subs	r3, #1
 801560c:	2200      	movs	r2, #0
 801560e:	930c      	str	r3, [sp, #48]	; 0x30
 8015610:	9309      	str	r3, [sp, #36]	; 0x24
 8015612:	3313      	adds	r3, #19
 8015614:	9221      	str	r2, [sp, #132]	; 0x84
 8015616:	e7ab      	b.n	8015570 <_dtoa_r+0x220>
 8015618:	2301      	movs	r3, #1
 801561a:	930d      	str	r3, [sp, #52]	; 0x34
 801561c:	3b02      	subs	r3, #2
 801561e:	e7f5      	b.n	801560c <_dtoa_r+0x2bc>
 8015620:	2301      	movs	r3, #1
 8015622:	930c      	str	r3, [sp, #48]	; 0x30
 8015624:	9309      	str	r3, [sp, #36]	; 0x24
 8015626:	001a      	movs	r2, r3
 8015628:	e7f4      	b.n	8015614 <_dtoa_r+0x2c4>
 801562a:	3101      	adds	r1, #1
 801562c:	6069      	str	r1, [r5, #4]
 801562e:	0052      	lsls	r2, r2, #1
 8015630:	e7a3      	b.n	801557a <_dtoa_r+0x22a>
 8015632:	2301      	movs	r3, #1
 8015634:	421c      	tst	r4, r3
 8015636:	d00e      	beq.n	8015656 <_dtoa_r+0x306>
 8015638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801563a:	4a21      	ldr	r2, [pc, #132]	; (80156c0 <_dtoa_r+0x370>)
 801563c:	3301      	adds	r3, #1
 801563e:	930e      	str	r3, [sp, #56]	; 0x38
 8015640:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015642:	0028      	movs	r0, r5
 8015644:	00db      	lsls	r3, r3, #3
 8015646:	189b      	adds	r3, r3, r2
 8015648:	0031      	movs	r1, r6
 801564a:	681a      	ldr	r2, [r3, #0]
 801564c:	685b      	ldr	r3, [r3, #4]
 801564e:	f7eb ffe1 	bl	8001614 <__aeabi_dmul>
 8015652:	0005      	movs	r5, r0
 8015654:	000e      	movs	r6, r1
 8015656:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015658:	1064      	asrs	r4, r4, #1
 801565a:	3301      	adds	r3, #1
 801565c:	9310      	str	r3, [sp, #64]	; 0x40
 801565e:	2c00      	cmp	r4, #0
 8015660:	d1e7      	bne.n	8015632 <_dtoa_r+0x2e2>
 8015662:	9806      	ldr	r0, [sp, #24]
 8015664:	9907      	ldr	r1, [sp, #28]
 8015666:	002a      	movs	r2, r5
 8015668:	0033      	movs	r3, r6
 801566a:	f7eb fbc9 	bl	8000e00 <__aeabi_ddiv>
 801566e:	9006      	str	r0, [sp, #24]
 8015670:	9107      	str	r1, [sp, #28]
 8015672:	e042      	b.n	80156fa <_dtoa_r+0x3aa>
 8015674:	7ff00000 	.word	0x7ff00000
 8015678:	0000270f 	.word	0x0000270f
 801567c:	0801a6b2 	.word	0x0801a6b2
 8015680:	0801a6b5 	.word	0x0801a6b5
 8015684:	0801a52a 	.word	0x0801a52a
 8015688:	0801a52b 	.word	0x0801a52b
 801568c:	3ff00000 	.word	0x3ff00000
 8015690:	fffffc01 	.word	0xfffffc01
 8015694:	3ff80000 	.word	0x3ff80000
 8015698:	636f4361 	.word	0x636f4361
 801569c:	3fd287a7 	.word	0x3fd287a7
 80156a0:	8b60c8b3 	.word	0x8b60c8b3
 80156a4:	3fc68a28 	.word	0x3fc68a28
 80156a8:	509f79fb 	.word	0x509f79fb
 80156ac:	3fd34413 	.word	0x3fd34413
 80156b0:	0801a6e0 	.word	0x0801a6e0
 80156b4:	00000432 	.word	0x00000432
 80156b8:	00000412 	.word	0x00000412
 80156bc:	fe100000 	.word	0xfe100000
 80156c0:	0801a6b8 	.word	0x0801a6b8
 80156c4:	2302      	movs	r3, #2
 80156c6:	930e      	str	r3, [sp, #56]	; 0x38
 80156c8:	2f00      	cmp	r7, #0
 80156ca:	d016      	beq.n	80156fa <_dtoa_r+0x3aa>
 80156cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80156ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80156d0:	427c      	negs	r4, r7
 80156d2:	330d      	adds	r3, #13
 80156d4:	4023      	ands	r3, r4
 80156d6:	4ace      	ldr	r2, [pc, #824]	; (8015a10 <_dtoa_r+0x6c0>)
 80156d8:	00db      	lsls	r3, r3, #3
 80156da:	18d3      	adds	r3, r2, r3
 80156dc:	681a      	ldr	r2, [r3, #0]
 80156de:	685b      	ldr	r3, [r3, #4]
 80156e0:	f7eb ff98 	bl	8001614 <__aeabi_dmul>
 80156e4:	2300      	movs	r3, #0
 80156e6:	2601      	movs	r6, #1
 80156e8:	001d      	movs	r5, r3
 80156ea:	9006      	str	r0, [sp, #24]
 80156ec:	9107      	str	r1, [sp, #28]
 80156ee:	1124      	asrs	r4, r4, #4
 80156f0:	2c00      	cmp	r4, #0
 80156f2:	d000      	beq.n	80156f6 <_dtoa_r+0x3a6>
 80156f4:	e08c      	b.n	8015810 <_dtoa_r+0x4c0>
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d1b9      	bne.n	801566e <_dtoa_r+0x31e>
 80156fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d100      	bne.n	8015702 <_dtoa_r+0x3b2>
 8015700:	e096      	b.n	8015830 <_dtoa_r+0x4e0>
 8015702:	9c06      	ldr	r4, [sp, #24]
 8015704:	9d07      	ldr	r5, [sp, #28]
 8015706:	2200      	movs	r2, #0
 8015708:	4bc2      	ldr	r3, [pc, #776]	; (8015a14 <_dtoa_r+0x6c4>)
 801570a:	0020      	movs	r0, r4
 801570c:	0029      	movs	r1, r5
 801570e:	f7ea fea1 	bl	8000454 <__aeabi_dcmplt>
 8015712:	2800      	cmp	r0, #0
 8015714:	d100      	bne.n	8015718 <_dtoa_r+0x3c8>
 8015716:	e08b      	b.n	8015830 <_dtoa_r+0x4e0>
 8015718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801571a:	2b00      	cmp	r3, #0
 801571c:	d100      	bne.n	8015720 <_dtoa_r+0x3d0>
 801571e:	e087      	b.n	8015830 <_dtoa_r+0x4e0>
 8015720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015722:	2b00      	cmp	r3, #0
 8015724:	dd41      	ble.n	80157aa <_dtoa_r+0x45a>
 8015726:	4bbc      	ldr	r3, [pc, #752]	; (8015a18 <_dtoa_r+0x6c8>)
 8015728:	2200      	movs	r2, #0
 801572a:	0020      	movs	r0, r4
 801572c:	0029      	movs	r1, r5
 801572e:	f7eb ff71 	bl	8001614 <__aeabi_dmul>
 8015732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015734:	9006      	str	r0, [sp, #24]
 8015736:	9107      	str	r1, [sp, #28]
 8015738:	3301      	adds	r3, #1
 801573a:	930e      	str	r3, [sp, #56]	; 0x38
 801573c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801573e:	1e7e      	subs	r6, r7, #1
 8015740:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015742:	9310      	str	r3, [sp, #64]	; 0x40
 8015744:	f7ec fd72 	bl	800222c <__aeabi_i2d>
 8015748:	9a06      	ldr	r2, [sp, #24]
 801574a:	9b07      	ldr	r3, [sp, #28]
 801574c:	f7eb ff62 	bl	8001614 <__aeabi_dmul>
 8015750:	2200      	movs	r2, #0
 8015752:	4bb2      	ldr	r3, [pc, #712]	; (8015a1c <_dtoa_r+0x6cc>)
 8015754:	f7eb f838 	bl	80007c8 <__aeabi_dadd>
 8015758:	4ab1      	ldr	r2, [pc, #708]	; (8015a20 <_dtoa_r+0x6d0>)
 801575a:	900e      	str	r0, [sp, #56]	; 0x38
 801575c:	910f      	str	r1, [sp, #60]	; 0x3c
 801575e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015760:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015762:	4694      	mov	ip, r2
 8015764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015766:	4463      	add	r3, ip
 8015768:	9315      	str	r3, [sp, #84]	; 0x54
 801576a:	001d      	movs	r5, r3
 801576c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801576e:	2b00      	cmp	r3, #0
 8015770:	d161      	bne.n	8015836 <_dtoa_r+0x4e6>
 8015772:	9806      	ldr	r0, [sp, #24]
 8015774:	9907      	ldr	r1, [sp, #28]
 8015776:	2200      	movs	r2, #0
 8015778:	4baa      	ldr	r3, [pc, #680]	; (8015a24 <_dtoa_r+0x6d4>)
 801577a:	f7ec f9bd 	bl	8001af8 <__aeabi_dsub>
 801577e:	0022      	movs	r2, r4
 8015780:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015782:	9006      	str	r0, [sp, #24]
 8015784:	9107      	str	r1, [sp, #28]
 8015786:	f7ea fe79 	bl	800047c <__aeabi_dcmpgt>
 801578a:	2800      	cmp	r0, #0
 801578c:	d000      	beq.n	8015790 <_dtoa_r+0x440>
 801578e:	e2a8      	b.n	8015ce2 <_dtoa_r+0x992>
 8015790:	48a5      	ldr	r0, [pc, #660]	; (8015a28 <_dtoa_r+0x6d8>)
 8015792:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015794:	4684      	mov	ip, r0
 8015796:	4461      	add	r1, ip
 8015798:	000b      	movs	r3, r1
 801579a:	9806      	ldr	r0, [sp, #24]
 801579c:	9907      	ldr	r1, [sp, #28]
 801579e:	0022      	movs	r2, r4
 80157a0:	f7ea fe58 	bl	8000454 <__aeabi_dcmplt>
 80157a4:	2800      	cmp	r0, #0
 80157a6:	d000      	beq.n	80157aa <_dtoa_r+0x45a>
 80157a8:	e295      	b.n	8015cd6 <_dtoa_r+0x986>
 80157aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80157ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80157ae:	9306      	str	r3, [sp, #24]
 80157b0:	9407      	str	r4, [sp, #28]
 80157b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	da00      	bge.n	80157ba <_dtoa_r+0x46a>
 80157b8:	e15c      	b.n	8015a74 <_dtoa_r+0x724>
 80157ba:	2f0e      	cmp	r7, #14
 80157bc:	dd00      	ble.n	80157c0 <_dtoa_r+0x470>
 80157be:	e159      	b.n	8015a74 <_dtoa_r+0x724>
 80157c0:	4b93      	ldr	r3, [pc, #588]	; (8015a10 <_dtoa_r+0x6c0>)
 80157c2:	00fa      	lsls	r2, r7, #3
 80157c4:	189b      	adds	r3, r3, r2
 80157c6:	685c      	ldr	r4, [r3, #4]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	9304      	str	r3, [sp, #16]
 80157cc:	9405      	str	r4, [sp, #20]
 80157ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	db00      	blt.n	80157d6 <_dtoa_r+0x486>
 80157d4:	e0d8      	b.n	8015988 <_dtoa_r+0x638>
 80157d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157d8:	2b00      	cmp	r3, #0
 80157da:	dd00      	ble.n	80157de <_dtoa_r+0x48e>
 80157dc:	e0d4      	b.n	8015988 <_dtoa_r+0x638>
 80157de:	d000      	beq.n	80157e2 <_dtoa_r+0x492>
 80157e0:	e27d      	b.n	8015cde <_dtoa_r+0x98e>
 80157e2:	9804      	ldr	r0, [sp, #16]
 80157e4:	9905      	ldr	r1, [sp, #20]
 80157e6:	2200      	movs	r2, #0
 80157e8:	4b8e      	ldr	r3, [pc, #568]	; (8015a24 <_dtoa_r+0x6d4>)
 80157ea:	f7eb ff13 	bl	8001614 <__aeabi_dmul>
 80157ee:	9a06      	ldr	r2, [sp, #24]
 80157f0:	9b07      	ldr	r3, [sp, #28]
 80157f2:	f7ea fe4d 	bl	8000490 <__aeabi_dcmpge>
 80157f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157f8:	9304      	str	r3, [sp, #16]
 80157fa:	001e      	movs	r6, r3
 80157fc:	2800      	cmp	r0, #0
 80157fe:	d000      	beq.n	8015802 <_dtoa_r+0x4b2>
 8015800:	e24f      	b.n	8015ca2 <_dtoa_r+0x952>
 8015802:	9b08      	ldr	r3, [sp, #32]
 8015804:	9a08      	ldr	r2, [sp, #32]
 8015806:	1c5d      	adds	r5, r3, #1
 8015808:	2331      	movs	r3, #49	; 0x31
 801580a:	3701      	adds	r7, #1
 801580c:	7013      	strb	r3, [r2, #0]
 801580e:	e24b      	b.n	8015ca8 <_dtoa_r+0x958>
 8015810:	4234      	tst	r4, r6
 8015812:	d00a      	beq.n	801582a <_dtoa_r+0x4da>
 8015814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015816:	4a85      	ldr	r2, [pc, #532]	; (8015a2c <_dtoa_r+0x6dc>)
 8015818:	3301      	adds	r3, #1
 801581a:	930e      	str	r3, [sp, #56]	; 0x38
 801581c:	00eb      	lsls	r3, r5, #3
 801581e:	189b      	adds	r3, r3, r2
 8015820:	681a      	ldr	r2, [r3, #0]
 8015822:	685b      	ldr	r3, [r3, #4]
 8015824:	f7eb fef6 	bl	8001614 <__aeabi_dmul>
 8015828:	0033      	movs	r3, r6
 801582a:	1064      	asrs	r4, r4, #1
 801582c:	3501      	adds	r5, #1
 801582e:	e75f      	b.n	80156f0 <_dtoa_r+0x3a0>
 8015830:	003e      	movs	r6, r7
 8015832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015834:	e784      	b.n	8015740 <_dtoa_r+0x3f0>
 8015836:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015838:	990d      	ldr	r1, [sp, #52]	; 0x34
 801583a:	1e5a      	subs	r2, r3, #1
 801583c:	4b74      	ldr	r3, [pc, #464]	; (8015a10 <_dtoa_r+0x6c0>)
 801583e:	00d2      	lsls	r2, r2, #3
 8015840:	189b      	adds	r3, r3, r2
 8015842:	681a      	ldr	r2, [r3, #0]
 8015844:	685b      	ldr	r3, [r3, #4]
 8015846:	2900      	cmp	r1, #0
 8015848:	d049      	beq.n	80158de <_dtoa_r+0x58e>
 801584a:	2000      	movs	r0, #0
 801584c:	4978      	ldr	r1, [pc, #480]	; (8015a30 <_dtoa_r+0x6e0>)
 801584e:	f7eb fad7 	bl	8000e00 <__aeabi_ddiv>
 8015852:	002b      	movs	r3, r5
 8015854:	0022      	movs	r2, r4
 8015856:	f7ec f94f 	bl	8001af8 <__aeabi_dsub>
 801585a:	9b08      	ldr	r3, [sp, #32]
 801585c:	900e      	str	r0, [sp, #56]	; 0x38
 801585e:	910f      	str	r1, [sp, #60]	; 0x3c
 8015860:	9315      	str	r3, [sp, #84]	; 0x54
 8015862:	9806      	ldr	r0, [sp, #24]
 8015864:	9907      	ldr	r1, [sp, #28]
 8015866:	f7ec fcab 	bl	80021c0 <__aeabi_d2iz>
 801586a:	0004      	movs	r4, r0
 801586c:	f7ec fcde 	bl	800222c <__aeabi_i2d>
 8015870:	0002      	movs	r2, r0
 8015872:	000b      	movs	r3, r1
 8015874:	9806      	ldr	r0, [sp, #24]
 8015876:	9907      	ldr	r1, [sp, #28]
 8015878:	f7ec f93e 	bl	8001af8 <__aeabi_dsub>
 801587c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801587e:	3430      	adds	r4, #48	; 0x30
 8015880:	1c5d      	adds	r5, r3, #1
 8015882:	701c      	strb	r4, [r3, #0]
 8015884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015888:	9006      	str	r0, [sp, #24]
 801588a:	9107      	str	r1, [sp, #28]
 801588c:	f7ea fde2 	bl	8000454 <__aeabi_dcmplt>
 8015890:	2800      	cmp	r0, #0
 8015892:	d16c      	bne.n	801596e <_dtoa_r+0x61e>
 8015894:	9a06      	ldr	r2, [sp, #24]
 8015896:	9b07      	ldr	r3, [sp, #28]
 8015898:	2000      	movs	r0, #0
 801589a:	495e      	ldr	r1, [pc, #376]	; (8015a14 <_dtoa_r+0x6c4>)
 801589c:	f7ec f92c 	bl	8001af8 <__aeabi_dsub>
 80158a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80158a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80158a4:	f7ea fdd6 	bl	8000454 <__aeabi_dcmplt>
 80158a8:	2800      	cmp	r0, #0
 80158aa:	d000      	beq.n	80158ae <_dtoa_r+0x55e>
 80158ac:	e0c3      	b.n	8015a36 <_dtoa_r+0x6e6>
 80158ae:	9b08      	ldr	r3, [sp, #32]
 80158b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80158b2:	1aeb      	subs	r3, r5, r3
 80158b4:	429a      	cmp	r2, r3
 80158b6:	dc00      	bgt.n	80158ba <_dtoa_r+0x56a>
 80158b8:	e777      	b.n	80157aa <_dtoa_r+0x45a>
 80158ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80158bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80158be:	2200      	movs	r2, #0
 80158c0:	4b55      	ldr	r3, [pc, #340]	; (8015a18 <_dtoa_r+0x6c8>)
 80158c2:	f7eb fea7 	bl	8001614 <__aeabi_dmul>
 80158c6:	2200      	movs	r2, #0
 80158c8:	900e      	str	r0, [sp, #56]	; 0x38
 80158ca:	910f      	str	r1, [sp, #60]	; 0x3c
 80158cc:	9806      	ldr	r0, [sp, #24]
 80158ce:	9907      	ldr	r1, [sp, #28]
 80158d0:	4b51      	ldr	r3, [pc, #324]	; (8015a18 <_dtoa_r+0x6c8>)
 80158d2:	f7eb fe9f 	bl	8001614 <__aeabi_dmul>
 80158d6:	9515      	str	r5, [sp, #84]	; 0x54
 80158d8:	9006      	str	r0, [sp, #24]
 80158da:	9107      	str	r1, [sp, #28]
 80158dc:	e7c1      	b.n	8015862 <_dtoa_r+0x512>
 80158de:	0020      	movs	r0, r4
 80158e0:	0029      	movs	r1, r5
 80158e2:	f7eb fe97 	bl	8001614 <__aeabi_dmul>
 80158e6:	9c08      	ldr	r4, [sp, #32]
 80158e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80158ea:	0023      	movs	r3, r4
 80158ec:	4694      	mov	ip, r2
 80158ee:	900e      	str	r0, [sp, #56]	; 0x38
 80158f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80158f2:	4463      	add	r3, ip
 80158f4:	9315      	str	r3, [sp, #84]	; 0x54
 80158f6:	9806      	ldr	r0, [sp, #24]
 80158f8:	9907      	ldr	r1, [sp, #28]
 80158fa:	f7ec fc61 	bl	80021c0 <__aeabi_d2iz>
 80158fe:	0005      	movs	r5, r0
 8015900:	f7ec fc94 	bl	800222c <__aeabi_i2d>
 8015904:	000b      	movs	r3, r1
 8015906:	0002      	movs	r2, r0
 8015908:	9806      	ldr	r0, [sp, #24]
 801590a:	9907      	ldr	r1, [sp, #28]
 801590c:	f7ec f8f4 	bl	8001af8 <__aeabi_dsub>
 8015910:	3530      	adds	r5, #48	; 0x30
 8015912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015914:	7025      	strb	r5, [r4, #0]
 8015916:	3401      	adds	r4, #1
 8015918:	9006      	str	r0, [sp, #24]
 801591a:	9107      	str	r1, [sp, #28]
 801591c:	42a3      	cmp	r3, r4
 801591e:	d12a      	bne.n	8015976 <_dtoa_r+0x626>
 8015920:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015922:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015924:	9a08      	ldr	r2, [sp, #32]
 8015926:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015928:	4694      	mov	ip, r2
 801592a:	4463      	add	r3, ip
 801592c:	2200      	movs	r2, #0
 801592e:	001d      	movs	r5, r3
 8015930:	4b3f      	ldr	r3, [pc, #252]	; (8015a30 <_dtoa_r+0x6e0>)
 8015932:	f7ea ff49 	bl	80007c8 <__aeabi_dadd>
 8015936:	0002      	movs	r2, r0
 8015938:	000b      	movs	r3, r1
 801593a:	9806      	ldr	r0, [sp, #24]
 801593c:	9907      	ldr	r1, [sp, #28]
 801593e:	f7ea fd9d 	bl	800047c <__aeabi_dcmpgt>
 8015942:	2800      	cmp	r0, #0
 8015944:	d000      	beq.n	8015948 <_dtoa_r+0x5f8>
 8015946:	e076      	b.n	8015a36 <_dtoa_r+0x6e6>
 8015948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801594a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801594c:	2000      	movs	r0, #0
 801594e:	4938      	ldr	r1, [pc, #224]	; (8015a30 <_dtoa_r+0x6e0>)
 8015950:	f7ec f8d2 	bl	8001af8 <__aeabi_dsub>
 8015954:	0002      	movs	r2, r0
 8015956:	000b      	movs	r3, r1
 8015958:	9806      	ldr	r0, [sp, #24]
 801595a:	9907      	ldr	r1, [sp, #28]
 801595c:	f7ea fd7a 	bl	8000454 <__aeabi_dcmplt>
 8015960:	2800      	cmp	r0, #0
 8015962:	d100      	bne.n	8015966 <_dtoa_r+0x616>
 8015964:	e721      	b.n	80157aa <_dtoa_r+0x45a>
 8015966:	1e6b      	subs	r3, r5, #1
 8015968:	781a      	ldrb	r2, [r3, #0]
 801596a:	2a30      	cmp	r2, #48	; 0x30
 801596c:	d001      	beq.n	8015972 <_dtoa_r+0x622>
 801596e:	0037      	movs	r7, r6
 8015970:	e03f      	b.n	80159f2 <_dtoa_r+0x6a2>
 8015972:	001d      	movs	r5, r3
 8015974:	e7f7      	b.n	8015966 <_dtoa_r+0x616>
 8015976:	9806      	ldr	r0, [sp, #24]
 8015978:	9907      	ldr	r1, [sp, #28]
 801597a:	2200      	movs	r2, #0
 801597c:	4b26      	ldr	r3, [pc, #152]	; (8015a18 <_dtoa_r+0x6c8>)
 801597e:	f7eb fe49 	bl	8001614 <__aeabi_dmul>
 8015982:	9006      	str	r0, [sp, #24]
 8015984:	9107      	str	r1, [sp, #28]
 8015986:	e7b6      	b.n	80158f6 <_dtoa_r+0x5a6>
 8015988:	9e08      	ldr	r6, [sp, #32]
 801598a:	9a04      	ldr	r2, [sp, #16]
 801598c:	9b05      	ldr	r3, [sp, #20]
 801598e:	9806      	ldr	r0, [sp, #24]
 8015990:	9907      	ldr	r1, [sp, #28]
 8015992:	f7eb fa35 	bl	8000e00 <__aeabi_ddiv>
 8015996:	f7ec fc13 	bl	80021c0 <__aeabi_d2iz>
 801599a:	0004      	movs	r4, r0
 801599c:	f7ec fc46 	bl	800222c <__aeabi_i2d>
 80159a0:	9a04      	ldr	r2, [sp, #16]
 80159a2:	9b05      	ldr	r3, [sp, #20]
 80159a4:	f7eb fe36 	bl	8001614 <__aeabi_dmul>
 80159a8:	0002      	movs	r2, r0
 80159aa:	000b      	movs	r3, r1
 80159ac:	9806      	ldr	r0, [sp, #24]
 80159ae:	9907      	ldr	r1, [sp, #28]
 80159b0:	f7ec f8a2 	bl	8001af8 <__aeabi_dsub>
 80159b4:	0023      	movs	r3, r4
 80159b6:	3330      	adds	r3, #48	; 0x30
 80159b8:	7033      	strb	r3, [r6, #0]
 80159ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159bc:	9b08      	ldr	r3, [sp, #32]
 80159be:	1c75      	adds	r5, r6, #1
 80159c0:	1aeb      	subs	r3, r5, r3
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d148      	bne.n	8015a58 <_dtoa_r+0x708>
 80159c6:	0002      	movs	r2, r0
 80159c8:	000b      	movs	r3, r1
 80159ca:	f7ea fefd 	bl	80007c8 <__aeabi_dadd>
 80159ce:	9a04      	ldr	r2, [sp, #16]
 80159d0:	9b05      	ldr	r3, [sp, #20]
 80159d2:	9006      	str	r0, [sp, #24]
 80159d4:	9107      	str	r1, [sp, #28]
 80159d6:	f7ea fd51 	bl	800047c <__aeabi_dcmpgt>
 80159da:	2800      	cmp	r0, #0
 80159dc:	d12a      	bne.n	8015a34 <_dtoa_r+0x6e4>
 80159de:	9a04      	ldr	r2, [sp, #16]
 80159e0:	9b05      	ldr	r3, [sp, #20]
 80159e2:	9806      	ldr	r0, [sp, #24]
 80159e4:	9907      	ldr	r1, [sp, #28]
 80159e6:	f7ea fd2f 	bl	8000448 <__aeabi_dcmpeq>
 80159ea:	2800      	cmp	r0, #0
 80159ec:	d001      	beq.n	80159f2 <_dtoa_r+0x6a2>
 80159ee:	07e3      	lsls	r3, r4, #31
 80159f0:	d420      	bmi.n	8015a34 <_dtoa_r+0x6e4>
 80159f2:	9903      	ldr	r1, [sp, #12]
 80159f4:	9802      	ldr	r0, [sp, #8]
 80159f6:	f000 fe10 	bl	801661a <_Bfree>
 80159fa:	2300      	movs	r3, #0
 80159fc:	702b      	strb	r3, [r5, #0]
 80159fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015a00:	3701      	adds	r7, #1
 8015a02:	601f      	str	r7, [r3, #0]
 8015a04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d100      	bne.n	8015a0c <_dtoa_r+0x6bc>
 8015a0a:	e4e6      	b.n	80153da <_dtoa_r+0x8a>
 8015a0c:	601d      	str	r5, [r3, #0]
 8015a0e:	e4e4      	b.n	80153da <_dtoa_r+0x8a>
 8015a10:	0801a6e0 	.word	0x0801a6e0
 8015a14:	3ff00000 	.word	0x3ff00000
 8015a18:	40240000 	.word	0x40240000
 8015a1c:	401c0000 	.word	0x401c0000
 8015a20:	fcc00000 	.word	0xfcc00000
 8015a24:	40140000 	.word	0x40140000
 8015a28:	7cc00000 	.word	0x7cc00000
 8015a2c:	0801a6b8 	.word	0x0801a6b8
 8015a30:	3fe00000 	.word	0x3fe00000
 8015a34:	003e      	movs	r6, r7
 8015a36:	1e6b      	subs	r3, r5, #1
 8015a38:	781a      	ldrb	r2, [r3, #0]
 8015a3a:	2a39      	cmp	r2, #57	; 0x39
 8015a3c:	d106      	bne.n	8015a4c <_dtoa_r+0x6fc>
 8015a3e:	9a08      	ldr	r2, [sp, #32]
 8015a40:	429a      	cmp	r2, r3
 8015a42:	d107      	bne.n	8015a54 <_dtoa_r+0x704>
 8015a44:	2330      	movs	r3, #48	; 0x30
 8015a46:	7013      	strb	r3, [r2, #0]
 8015a48:	0013      	movs	r3, r2
 8015a4a:	3601      	adds	r6, #1
 8015a4c:	781a      	ldrb	r2, [r3, #0]
 8015a4e:	3201      	adds	r2, #1
 8015a50:	701a      	strb	r2, [r3, #0]
 8015a52:	e78c      	b.n	801596e <_dtoa_r+0x61e>
 8015a54:	001d      	movs	r5, r3
 8015a56:	e7ee      	b.n	8015a36 <_dtoa_r+0x6e6>
 8015a58:	2200      	movs	r2, #0
 8015a5a:	4ba4      	ldr	r3, [pc, #656]	; (8015cec <_dtoa_r+0x99c>)
 8015a5c:	f7eb fdda 	bl	8001614 <__aeabi_dmul>
 8015a60:	2200      	movs	r2, #0
 8015a62:	2300      	movs	r3, #0
 8015a64:	9006      	str	r0, [sp, #24]
 8015a66:	9107      	str	r1, [sp, #28]
 8015a68:	002e      	movs	r6, r5
 8015a6a:	f7ea fced 	bl	8000448 <__aeabi_dcmpeq>
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d08b      	beq.n	801598a <_dtoa_r+0x63a>
 8015a72:	e7be      	b.n	80159f2 <_dtoa_r+0x6a2>
 8015a74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a76:	2a00      	cmp	r2, #0
 8015a78:	d100      	bne.n	8015a7c <_dtoa_r+0x72c>
 8015a7a:	e0da      	b.n	8015c32 <_dtoa_r+0x8e2>
 8015a7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015a7e:	2a01      	cmp	r2, #1
 8015a80:	dd00      	ble.n	8015a84 <_dtoa_r+0x734>
 8015a82:	e0bd      	b.n	8015c00 <_dtoa_r+0x8b0>
 8015a84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015a86:	2a00      	cmp	r2, #0
 8015a88:	d100      	bne.n	8015a8c <_dtoa_r+0x73c>
 8015a8a:	e0b5      	b.n	8015bf8 <_dtoa_r+0x8a8>
 8015a8c:	4a98      	ldr	r2, [pc, #608]	; (8015cf0 <_dtoa_r+0x9a0>)
 8015a8e:	189b      	adds	r3, r3, r2
 8015a90:	9d04      	ldr	r5, [sp, #16]
 8015a92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a96:	2101      	movs	r1, #1
 8015a98:	18d2      	adds	r2, r2, r3
 8015a9a:	920a      	str	r2, [sp, #40]	; 0x28
 8015a9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015a9e:	9802      	ldr	r0, [sp, #8]
 8015aa0:	18d3      	adds	r3, r2, r3
 8015aa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015aa4:	f000 fe97 	bl	80167d6 <__i2b>
 8015aa8:	0006      	movs	r6, r0
 8015aaa:	2c00      	cmp	r4, #0
 8015aac:	dd0e      	ble.n	8015acc <_dtoa_r+0x77c>
 8015aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	dd0b      	ble.n	8015acc <_dtoa_r+0x77c>
 8015ab4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ab6:	0023      	movs	r3, r4
 8015ab8:	4294      	cmp	r4, r2
 8015aba:	dd00      	ble.n	8015abe <_dtoa_r+0x76e>
 8015abc:	0013      	movs	r3, r2
 8015abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ac0:	1ae4      	subs	r4, r4, r3
 8015ac2:	1ad2      	subs	r2, r2, r3
 8015ac4:	920a      	str	r2, [sp, #40]	; 0x28
 8015ac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ac8:	1ad3      	subs	r3, r2, r3
 8015aca:	930b      	str	r3, [sp, #44]	; 0x2c
 8015acc:	9b04      	ldr	r3, [sp, #16]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d01f      	beq.n	8015b12 <_dtoa_r+0x7c2>
 8015ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d100      	bne.n	8015ada <_dtoa_r+0x78a>
 8015ad8:	e0af      	b.n	8015c3a <_dtoa_r+0x8ea>
 8015ada:	2d00      	cmp	r5, #0
 8015adc:	d011      	beq.n	8015b02 <_dtoa_r+0x7b2>
 8015ade:	0031      	movs	r1, r6
 8015ae0:	002a      	movs	r2, r5
 8015ae2:	9802      	ldr	r0, [sp, #8]
 8015ae4:	f000 ff10 	bl	8016908 <__pow5mult>
 8015ae8:	9a03      	ldr	r2, [sp, #12]
 8015aea:	0001      	movs	r1, r0
 8015aec:	0006      	movs	r6, r0
 8015aee:	9802      	ldr	r0, [sp, #8]
 8015af0:	f000 fe7a 	bl	80167e8 <__multiply>
 8015af4:	9903      	ldr	r1, [sp, #12]
 8015af6:	9010      	str	r0, [sp, #64]	; 0x40
 8015af8:	9802      	ldr	r0, [sp, #8]
 8015afa:	f000 fd8e 	bl	801661a <_Bfree>
 8015afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b00:	9303      	str	r3, [sp, #12]
 8015b02:	9b04      	ldr	r3, [sp, #16]
 8015b04:	1b5a      	subs	r2, r3, r5
 8015b06:	d004      	beq.n	8015b12 <_dtoa_r+0x7c2>
 8015b08:	9903      	ldr	r1, [sp, #12]
 8015b0a:	9802      	ldr	r0, [sp, #8]
 8015b0c:	f000 fefc 	bl	8016908 <__pow5mult>
 8015b10:	9003      	str	r0, [sp, #12]
 8015b12:	2101      	movs	r1, #1
 8015b14:	9802      	ldr	r0, [sp, #8]
 8015b16:	f000 fe5e 	bl	80167d6 <__i2b>
 8015b1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b1c:	9004      	str	r0, [sp, #16]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d100      	bne.n	8015b24 <_dtoa_r+0x7d4>
 8015b22:	e1e3      	b.n	8015eec <_dtoa_r+0xb9c>
 8015b24:	001a      	movs	r2, r3
 8015b26:	0001      	movs	r1, r0
 8015b28:	9802      	ldr	r0, [sp, #8]
 8015b2a:	f000 feed 	bl	8016908 <__pow5mult>
 8015b2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015b30:	9004      	str	r0, [sp, #16]
 8015b32:	2b01      	cmp	r3, #1
 8015b34:	dd00      	ble.n	8015b38 <_dtoa_r+0x7e8>
 8015b36:	e082      	b.n	8015c3e <_dtoa_r+0x8ee>
 8015b38:	2500      	movs	r5, #0
 8015b3a:	9b06      	ldr	r3, [sp, #24]
 8015b3c:	42ab      	cmp	r3, r5
 8015b3e:	d10e      	bne.n	8015b5e <_dtoa_r+0x80e>
 8015b40:	9b07      	ldr	r3, [sp, #28]
 8015b42:	031b      	lsls	r3, r3, #12
 8015b44:	42ab      	cmp	r3, r5
 8015b46:	d10a      	bne.n	8015b5e <_dtoa_r+0x80e>
 8015b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015b4a:	9a07      	ldr	r2, [sp, #28]
 8015b4c:	4213      	tst	r3, r2
 8015b4e:	d006      	beq.n	8015b5e <_dtoa_r+0x80e>
 8015b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b52:	3501      	adds	r5, #1
 8015b54:	3301      	adds	r3, #1
 8015b56:	930a      	str	r3, [sp, #40]	; 0x28
 8015b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b5a:	3301      	adds	r3, #1
 8015b5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b60:	2001      	movs	r0, #1
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d16c      	bne.n	8015c40 <_dtoa_r+0x8f0>
 8015b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b68:	1818      	adds	r0, r3, r0
 8015b6a:	231f      	movs	r3, #31
 8015b6c:	4018      	ands	r0, r3
 8015b6e:	d07e      	beq.n	8015c6e <_dtoa_r+0x91e>
 8015b70:	3301      	adds	r3, #1
 8015b72:	1a1b      	subs	r3, r3, r0
 8015b74:	2b04      	cmp	r3, #4
 8015b76:	dd70      	ble.n	8015c5a <_dtoa_r+0x90a>
 8015b78:	231c      	movs	r3, #28
 8015b7a:	1a18      	subs	r0, r3, r0
 8015b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b7e:	1824      	adds	r4, r4, r0
 8015b80:	181b      	adds	r3, r3, r0
 8015b82:	930a      	str	r3, [sp, #40]	; 0x28
 8015b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b86:	181b      	adds	r3, r3, r0
 8015b88:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	dd05      	ble.n	8015b9c <_dtoa_r+0x84c>
 8015b90:	001a      	movs	r2, r3
 8015b92:	9903      	ldr	r1, [sp, #12]
 8015b94:	9802      	ldr	r0, [sp, #8]
 8015b96:	f000 ff09 	bl	80169ac <__lshift>
 8015b9a:	9003      	str	r0, [sp, #12]
 8015b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	dd05      	ble.n	8015bae <_dtoa_r+0x85e>
 8015ba2:	001a      	movs	r2, r3
 8015ba4:	9904      	ldr	r1, [sp, #16]
 8015ba6:	9802      	ldr	r0, [sp, #8]
 8015ba8:	f000 ff00 	bl	80169ac <__lshift>
 8015bac:	9004      	str	r0, [sp, #16]
 8015bae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d05e      	beq.n	8015c72 <_dtoa_r+0x922>
 8015bb4:	9904      	ldr	r1, [sp, #16]
 8015bb6:	9803      	ldr	r0, [sp, #12]
 8015bb8:	f000 ff4a 	bl	8016a50 <__mcmp>
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	da58      	bge.n	8015c72 <_dtoa_r+0x922>
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	220a      	movs	r2, #10
 8015bc4:	9903      	ldr	r1, [sp, #12]
 8015bc6:	9802      	ldr	r0, [sp, #8]
 8015bc8:	f000 fd40 	bl	801664c <__multadd>
 8015bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015bce:	3f01      	subs	r7, #1
 8015bd0:	9003      	str	r0, [sp, #12]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d100      	bne.n	8015bd8 <_dtoa_r+0x888>
 8015bd6:	e190      	b.n	8015efa <_dtoa_r+0xbaa>
 8015bd8:	2300      	movs	r3, #0
 8015bda:	0031      	movs	r1, r6
 8015bdc:	220a      	movs	r2, #10
 8015bde:	9802      	ldr	r0, [sp, #8]
 8015be0:	f000 fd34 	bl	801664c <__multadd>
 8015be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015be6:	0006      	movs	r6, r0
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	dd00      	ble.n	8015bee <_dtoa_r+0x89e>
 8015bec:	e088      	b.n	8015d00 <_dtoa_r+0x9b0>
 8015bee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015bf0:	2b02      	cmp	r3, #2
 8015bf2:	dc00      	bgt.n	8015bf6 <_dtoa_r+0x8a6>
 8015bf4:	e084      	b.n	8015d00 <_dtoa_r+0x9b0>
 8015bf6:	e044      	b.n	8015c82 <_dtoa_r+0x932>
 8015bf8:	2336      	movs	r3, #54	; 0x36
 8015bfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015bfc:	1a9b      	subs	r3, r3, r2
 8015bfe:	e747      	b.n	8015a90 <_dtoa_r+0x740>
 8015c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c02:	1e5d      	subs	r5, r3, #1
 8015c04:	9b04      	ldr	r3, [sp, #16]
 8015c06:	42ab      	cmp	r3, r5
 8015c08:	db08      	blt.n	8015c1c <_dtoa_r+0x8cc>
 8015c0a:	1b5d      	subs	r5, r3, r5
 8015c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	da0c      	bge.n	8015c2c <_dtoa_r+0x8dc>
 8015c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c16:	1a9c      	subs	r4, r3, r2
 8015c18:	2300      	movs	r3, #0
 8015c1a:	e73b      	b.n	8015a94 <_dtoa_r+0x744>
 8015c1c:	9b04      	ldr	r3, [sp, #16]
 8015c1e:	9504      	str	r5, [sp, #16]
 8015c20:	1aea      	subs	r2, r5, r3
 8015c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c24:	2500      	movs	r5, #0
 8015c26:	189b      	adds	r3, r3, r2
 8015c28:	9311      	str	r3, [sp, #68]	; 0x44
 8015c2a:	e7ef      	b.n	8015c0c <_dtoa_r+0x8bc>
 8015c2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c30:	e730      	b.n	8015a94 <_dtoa_r+0x744>
 8015c32:	9d04      	ldr	r5, [sp, #16]
 8015c34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015c36:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015c38:	e737      	b.n	8015aaa <_dtoa_r+0x75a>
 8015c3a:	9a04      	ldr	r2, [sp, #16]
 8015c3c:	e764      	b.n	8015b08 <_dtoa_r+0x7b8>
 8015c3e:	2500      	movs	r5, #0
 8015c40:	9b04      	ldr	r3, [sp, #16]
 8015c42:	9a04      	ldr	r2, [sp, #16]
 8015c44:	691b      	ldr	r3, [r3, #16]
 8015c46:	9310      	str	r3, [sp, #64]	; 0x40
 8015c48:	3303      	adds	r3, #3
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	18d3      	adds	r3, r2, r3
 8015c4e:	6858      	ldr	r0, [r3, #4]
 8015c50:	f000 fd78 	bl	8016744 <__hi0bits>
 8015c54:	2320      	movs	r3, #32
 8015c56:	1a18      	subs	r0, r3, r0
 8015c58:	e785      	b.n	8015b66 <_dtoa_r+0x816>
 8015c5a:	2b04      	cmp	r3, #4
 8015c5c:	d095      	beq.n	8015b8a <_dtoa_r+0x83a>
 8015c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c60:	331c      	adds	r3, #28
 8015c62:	18d2      	adds	r2, r2, r3
 8015c64:	920a      	str	r2, [sp, #40]	; 0x28
 8015c66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015c68:	18e4      	adds	r4, r4, r3
 8015c6a:	18d3      	adds	r3, r2, r3
 8015c6c:	e78c      	b.n	8015b88 <_dtoa_r+0x838>
 8015c6e:	0003      	movs	r3, r0
 8015c70:	e7f5      	b.n	8015c5e <_dtoa_r+0x90e>
 8015c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	dc3d      	bgt.n	8015cf4 <_dtoa_r+0x9a4>
 8015c78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015c7a:	2b02      	cmp	r3, #2
 8015c7c:	dd3a      	ble.n	8015cf4 <_dtoa_r+0x9a4>
 8015c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c80:	930c      	str	r3, [sp, #48]	; 0x30
 8015c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d10c      	bne.n	8015ca2 <_dtoa_r+0x952>
 8015c88:	9904      	ldr	r1, [sp, #16]
 8015c8a:	2205      	movs	r2, #5
 8015c8c:	9802      	ldr	r0, [sp, #8]
 8015c8e:	f000 fcdd 	bl	801664c <__multadd>
 8015c92:	9004      	str	r0, [sp, #16]
 8015c94:	0001      	movs	r1, r0
 8015c96:	9803      	ldr	r0, [sp, #12]
 8015c98:	f000 feda 	bl	8016a50 <__mcmp>
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	dd00      	ble.n	8015ca2 <_dtoa_r+0x952>
 8015ca0:	e5af      	b.n	8015802 <_dtoa_r+0x4b2>
 8015ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ca4:	9d08      	ldr	r5, [sp, #32]
 8015ca6:	43df      	mvns	r7, r3
 8015ca8:	2300      	movs	r3, #0
 8015caa:	9309      	str	r3, [sp, #36]	; 0x24
 8015cac:	9904      	ldr	r1, [sp, #16]
 8015cae:	9802      	ldr	r0, [sp, #8]
 8015cb0:	f000 fcb3 	bl	801661a <_Bfree>
 8015cb4:	2e00      	cmp	r6, #0
 8015cb6:	d100      	bne.n	8015cba <_dtoa_r+0x96a>
 8015cb8:	e69b      	b.n	80159f2 <_dtoa_r+0x6a2>
 8015cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d005      	beq.n	8015ccc <_dtoa_r+0x97c>
 8015cc0:	42b3      	cmp	r3, r6
 8015cc2:	d003      	beq.n	8015ccc <_dtoa_r+0x97c>
 8015cc4:	0019      	movs	r1, r3
 8015cc6:	9802      	ldr	r0, [sp, #8]
 8015cc8:	f000 fca7 	bl	801661a <_Bfree>
 8015ccc:	0031      	movs	r1, r6
 8015cce:	9802      	ldr	r0, [sp, #8]
 8015cd0:	f000 fca3 	bl	801661a <_Bfree>
 8015cd4:	e68d      	b.n	80159f2 <_dtoa_r+0x6a2>
 8015cd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cd8:	9304      	str	r3, [sp, #16]
 8015cda:	001e      	movs	r6, r3
 8015cdc:	e7e1      	b.n	8015ca2 <_dtoa_r+0x952>
 8015cde:	2300      	movs	r3, #0
 8015ce0:	e7fa      	b.n	8015cd8 <_dtoa_r+0x988>
 8015ce2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ce4:	0037      	movs	r7, r6
 8015ce6:	9304      	str	r3, [sp, #16]
 8015ce8:	001e      	movs	r6, r3
 8015cea:	e58a      	b.n	8015802 <_dtoa_r+0x4b2>
 8015cec:	40240000 	.word	0x40240000
 8015cf0:	00000433 	.word	0x00000433
 8015cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d100      	bne.n	8015cfc <_dtoa_r+0x9ac>
 8015cfa:	e0b2      	b.n	8015e62 <_dtoa_r+0xb12>
 8015cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8015d00:	2c00      	cmp	r4, #0
 8015d02:	dd05      	ble.n	8015d10 <_dtoa_r+0x9c0>
 8015d04:	0031      	movs	r1, r6
 8015d06:	0022      	movs	r2, r4
 8015d08:	9802      	ldr	r0, [sp, #8]
 8015d0a:	f000 fe4f 	bl	80169ac <__lshift>
 8015d0e:	0006      	movs	r6, r0
 8015d10:	0030      	movs	r0, r6
 8015d12:	2d00      	cmp	r5, #0
 8015d14:	d011      	beq.n	8015d3a <_dtoa_r+0x9ea>
 8015d16:	6871      	ldr	r1, [r6, #4]
 8015d18:	9802      	ldr	r0, [sp, #8]
 8015d1a:	f000 fc46 	bl	80165aa <_Balloc>
 8015d1e:	0031      	movs	r1, r6
 8015d20:	0004      	movs	r4, r0
 8015d22:	6933      	ldr	r3, [r6, #16]
 8015d24:	310c      	adds	r1, #12
 8015d26:	1c9a      	adds	r2, r3, #2
 8015d28:	0092      	lsls	r2, r2, #2
 8015d2a:	300c      	adds	r0, #12
 8015d2c:	f7fd fb51 	bl	80133d2 <memcpy>
 8015d30:	2201      	movs	r2, #1
 8015d32:	0021      	movs	r1, r4
 8015d34:	9802      	ldr	r0, [sp, #8]
 8015d36:	f000 fe39 	bl	80169ac <__lshift>
 8015d3a:	9609      	str	r6, [sp, #36]	; 0x24
 8015d3c:	0006      	movs	r6, r0
 8015d3e:	9b08      	ldr	r3, [sp, #32]
 8015d40:	930a      	str	r3, [sp, #40]	; 0x28
 8015d42:	9904      	ldr	r1, [sp, #16]
 8015d44:	9803      	ldr	r0, [sp, #12]
 8015d46:	f7ff fa7d 	bl	8015244 <quorem>
 8015d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d4c:	900d      	str	r0, [sp, #52]	; 0x34
 8015d4e:	0004      	movs	r4, r0
 8015d50:	9803      	ldr	r0, [sp, #12]
 8015d52:	f000 fe7d 	bl	8016a50 <__mcmp>
 8015d56:	0032      	movs	r2, r6
 8015d58:	9010      	str	r0, [sp, #64]	; 0x40
 8015d5a:	9904      	ldr	r1, [sp, #16]
 8015d5c:	9802      	ldr	r0, [sp, #8]
 8015d5e:	f000 fe91 	bl	8016a84 <__mdiff>
 8015d62:	2301      	movs	r3, #1
 8015d64:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d66:	68c3      	ldr	r3, [r0, #12]
 8015d68:	3430      	adds	r4, #48	; 0x30
 8015d6a:	0005      	movs	r5, r0
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d104      	bne.n	8015d7a <_dtoa_r+0xa2a>
 8015d70:	0001      	movs	r1, r0
 8015d72:	9803      	ldr	r0, [sp, #12]
 8015d74:	f000 fe6c 	bl	8016a50 <__mcmp>
 8015d78:	900b      	str	r0, [sp, #44]	; 0x2c
 8015d7a:	0029      	movs	r1, r5
 8015d7c:	9802      	ldr	r0, [sp, #8]
 8015d7e:	f000 fc4c 	bl	801661a <_Bfree>
 8015d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015d86:	4313      	orrs	r3, r2
 8015d88:	d10e      	bne.n	8015da8 <_dtoa_r+0xa58>
 8015d8a:	9a06      	ldr	r2, [sp, #24]
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	4213      	tst	r3, r2
 8015d90:	d10a      	bne.n	8015da8 <_dtoa_r+0xa58>
 8015d92:	2c39      	cmp	r4, #57	; 0x39
 8015d94:	d026      	beq.n	8015de4 <_dtoa_r+0xa94>
 8015d96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	dd01      	ble.n	8015da0 <_dtoa_r+0xa50>
 8015d9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015d9e:	3431      	adds	r4, #49	; 0x31
 8015da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015da2:	1c5d      	adds	r5, r3, #1
 8015da4:	701c      	strb	r4, [r3, #0]
 8015da6:	e781      	b.n	8015cac <_dtoa_r+0x95c>
 8015da8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	db07      	blt.n	8015dbe <_dtoa_r+0xa6e>
 8015dae:	001d      	movs	r5, r3
 8015db0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015db2:	431d      	orrs	r5, r3
 8015db4:	d122      	bne.n	8015dfc <_dtoa_r+0xaac>
 8015db6:	2301      	movs	r3, #1
 8015db8:	9a06      	ldr	r2, [sp, #24]
 8015dba:	4213      	tst	r3, r2
 8015dbc:	d11e      	bne.n	8015dfc <_dtoa_r+0xaac>
 8015dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	dded      	ble.n	8015da0 <_dtoa_r+0xa50>
 8015dc4:	9903      	ldr	r1, [sp, #12]
 8015dc6:	2201      	movs	r2, #1
 8015dc8:	9802      	ldr	r0, [sp, #8]
 8015dca:	f000 fdef 	bl	80169ac <__lshift>
 8015dce:	9904      	ldr	r1, [sp, #16]
 8015dd0:	9003      	str	r0, [sp, #12]
 8015dd2:	f000 fe3d 	bl	8016a50 <__mcmp>
 8015dd6:	2800      	cmp	r0, #0
 8015dd8:	dc02      	bgt.n	8015de0 <_dtoa_r+0xa90>
 8015dda:	d1e1      	bne.n	8015da0 <_dtoa_r+0xa50>
 8015ddc:	07e3      	lsls	r3, r4, #31
 8015dde:	d5df      	bpl.n	8015da0 <_dtoa_r+0xa50>
 8015de0:	2c39      	cmp	r4, #57	; 0x39
 8015de2:	d1db      	bne.n	8015d9c <_dtoa_r+0xa4c>
 8015de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015de8:	1c5d      	adds	r5, r3, #1
 8015dea:	2339      	movs	r3, #57	; 0x39
 8015dec:	7013      	strb	r3, [r2, #0]
 8015dee:	1e6b      	subs	r3, r5, #1
 8015df0:	781a      	ldrb	r2, [r3, #0]
 8015df2:	2a39      	cmp	r2, #57	; 0x39
 8015df4:	d067      	beq.n	8015ec6 <_dtoa_r+0xb76>
 8015df6:	3201      	adds	r2, #1
 8015df8:	701a      	strb	r2, [r3, #0]
 8015dfa:	e757      	b.n	8015cac <_dtoa_r+0x95c>
 8015dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dfe:	1c5d      	adds	r5, r3, #1
 8015e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	dd04      	ble.n	8015e10 <_dtoa_r+0xac0>
 8015e06:	2c39      	cmp	r4, #57	; 0x39
 8015e08:	d0ec      	beq.n	8015de4 <_dtoa_r+0xa94>
 8015e0a:	3401      	adds	r4, #1
 8015e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e0e:	e7c9      	b.n	8015da4 <_dtoa_r+0xa54>
 8015e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e14:	701c      	strb	r4, [r3, #0]
 8015e16:	9b08      	ldr	r3, [sp, #32]
 8015e18:	1aeb      	subs	r3, r5, r3
 8015e1a:	4293      	cmp	r3, r2
 8015e1c:	d03e      	beq.n	8015e9c <_dtoa_r+0xb4c>
 8015e1e:	2300      	movs	r3, #0
 8015e20:	220a      	movs	r2, #10
 8015e22:	9903      	ldr	r1, [sp, #12]
 8015e24:	9802      	ldr	r0, [sp, #8]
 8015e26:	f000 fc11 	bl	801664c <__multadd>
 8015e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e2c:	9003      	str	r0, [sp, #12]
 8015e2e:	42b3      	cmp	r3, r6
 8015e30:	d109      	bne.n	8015e46 <_dtoa_r+0xaf6>
 8015e32:	2300      	movs	r3, #0
 8015e34:	220a      	movs	r2, #10
 8015e36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e38:	9802      	ldr	r0, [sp, #8]
 8015e3a:	f000 fc07 	bl	801664c <__multadd>
 8015e3e:	9009      	str	r0, [sp, #36]	; 0x24
 8015e40:	0006      	movs	r6, r0
 8015e42:	950a      	str	r5, [sp, #40]	; 0x28
 8015e44:	e77d      	b.n	8015d42 <_dtoa_r+0x9f2>
 8015e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e48:	2300      	movs	r3, #0
 8015e4a:	220a      	movs	r2, #10
 8015e4c:	9802      	ldr	r0, [sp, #8]
 8015e4e:	f000 fbfd 	bl	801664c <__multadd>
 8015e52:	2300      	movs	r3, #0
 8015e54:	9009      	str	r0, [sp, #36]	; 0x24
 8015e56:	220a      	movs	r2, #10
 8015e58:	0031      	movs	r1, r6
 8015e5a:	9802      	ldr	r0, [sp, #8]
 8015e5c:	f000 fbf6 	bl	801664c <__multadd>
 8015e60:	e7ee      	b.n	8015e40 <_dtoa_r+0xaf0>
 8015e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e64:	930c      	str	r3, [sp, #48]	; 0x30
 8015e66:	9b08      	ldr	r3, [sp, #32]
 8015e68:	9306      	str	r3, [sp, #24]
 8015e6a:	9904      	ldr	r1, [sp, #16]
 8015e6c:	9803      	ldr	r0, [sp, #12]
 8015e6e:	f7ff f9e9 	bl	8015244 <quorem>
 8015e72:	9b06      	ldr	r3, [sp, #24]
 8015e74:	3030      	adds	r0, #48	; 0x30
 8015e76:	1c5d      	adds	r5, r3, #1
 8015e78:	7018      	strb	r0, [r3, #0]
 8015e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e7c:	9b08      	ldr	r3, [sp, #32]
 8015e7e:	0004      	movs	r4, r0
 8015e80:	1aeb      	subs	r3, r5, r3
 8015e82:	429a      	cmp	r2, r3
 8015e84:	dd08      	ble.n	8015e98 <_dtoa_r+0xb48>
 8015e86:	2300      	movs	r3, #0
 8015e88:	220a      	movs	r2, #10
 8015e8a:	9903      	ldr	r1, [sp, #12]
 8015e8c:	9802      	ldr	r0, [sp, #8]
 8015e8e:	f000 fbdd 	bl	801664c <__multadd>
 8015e92:	9506      	str	r5, [sp, #24]
 8015e94:	9003      	str	r0, [sp, #12]
 8015e96:	e7e8      	b.n	8015e6a <_dtoa_r+0xb1a>
 8015e98:	2300      	movs	r3, #0
 8015e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8015e9c:	9903      	ldr	r1, [sp, #12]
 8015e9e:	2201      	movs	r2, #1
 8015ea0:	9802      	ldr	r0, [sp, #8]
 8015ea2:	f000 fd83 	bl	80169ac <__lshift>
 8015ea6:	9904      	ldr	r1, [sp, #16]
 8015ea8:	9003      	str	r0, [sp, #12]
 8015eaa:	f000 fdd1 	bl	8016a50 <__mcmp>
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	dc9d      	bgt.n	8015dee <_dtoa_r+0xa9e>
 8015eb2:	d101      	bne.n	8015eb8 <_dtoa_r+0xb68>
 8015eb4:	07e3      	lsls	r3, r4, #31
 8015eb6:	d49a      	bmi.n	8015dee <_dtoa_r+0xa9e>
 8015eb8:	1e6b      	subs	r3, r5, #1
 8015eba:	781a      	ldrb	r2, [r3, #0]
 8015ebc:	2a30      	cmp	r2, #48	; 0x30
 8015ebe:	d000      	beq.n	8015ec2 <_dtoa_r+0xb72>
 8015ec0:	e6f4      	b.n	8015cac <_dtoa_r+0x95c>
 8015ec2:	001d      	movs	r5, r3
 8015ec4:	e7f8      	b.n	8015eb8 <_dtoa_r+0xb68>
 8015ec6:	9a08      	ldr	r2, [sp, #32]
 8015ec8:	429a      	cmp	r2, r3
 8015eca:	d103      	bne.n	8015ed4 <_dtoa_r+0xb84>
 8015ecc:	2331      	movs	r3, #49	; 0x31
 8015ece:	3701      	adds	r7, #1
 8015ed0:	7013      	strb	r3, [r2, #0]
 8015ed2:	e6eb      	b.n	8015cac <_dtoa_r+0x95c>
 8015ed4:	001d      	movs	r5, r3
 8015ed6:	e78a      	b.n	8015dee <_dtoa_r+0xa9e>
 8015ed8:	4b0b      	ldr	r3, [pc, #44]	; (8015f08 <_dtoa_r+0xbb8>)
 8015eda:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015edc:	9308      	str	r3, [sp, #32]
 8015ede:	4b0b      	ldr	r3, [pc, #44]	; (8015f0c <_dtoa_r+0xbbc>)
 8015ee0:	2a00      	cmp	r2, #0
 8015ee2:	d001      	beq.n	8015ee8 <_dtoa_r+0xb98>
 8015ee4:	f7ff fa77 	bl	80153d6 <_dtoa_r+0x86>
 8015ee8:	f7ff fa77 	bl	80153da <_dtoa_r+0x8a>
 8015eec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015eee:	2b01      	cmp	r3, #1
 8015ef0:	dc00      	bgt.n	8015ef4 <_dtoa_r+0xba4>
 8015ef2:	e621      	b.n	8015b38 <_dtoa_r+0x7e8>
 8015ef4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015ef6:	2001      	movs	r0, #1
 8015ef8:	e635      	b.n	8015b66 <_dtoa_r+0x816>
 8015efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	dcb2      	bgt.n	8015e66 <_dtoa_r+0xb16>
 8015f00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f02:	2b02      	cmp	r3, #2
 8015f04:	ddaf      	ble.n	8015e66 <_dtoa_r+0xb16>
 8015f06:	e6bc      	b.n	8015c82 <_dtoa_r+0x932>
 8015f08:	0801a6a9 	.word	0x0801a6a9
 8015f0c:	0801a6b1 	.word	0x0801a6b1

08015f10 <rshift>:
 8015f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f12:	0004      	movs	r4, r0
 8015f14:	6905      	ldr	r5, [r0, #16]
 8015f16:	3414      	adds	r4, #20
 8015f18:	114b      	asrs	r3, r1, #5
 8015f1a:	0026      	movs	r6, r4
 8015f1c:	429d      	cmp	r5, r3
 8015f1e:	dd14      	ble.n	8015f4a <rshift+0x3a>
 8015f20:	221f      	movs	r2, #31
 8015f22:	00ad      	lsls	r5, r5, #2
 8015f24:	009b      	lsls	r3, r3, #2
 8015f26:	4011      	ands	r1, r2
 8015f28:	1965      	adds	r5, r4, r5
 8015f2a:	18e3      	adds	r3, r4, r3
 8015f2c:	0022      	movs	r2, r4
 8015f2e:	2900      	cmp	r1, #0
 8015f30:	d01e      	beq.n	8015f70 <rshift+0x60>
 8015f32:	cb04      	ldmia	r3!, {r2}
 8015f34:	2720      	movs	r7, #32
 8015f36:	40ca      	lsrs	r2, r1
 8015f38:	46a4      	mov	ip, r4
 8015f3a:	1a7f      	subs	r7, r7, r1
 8015f3c:	4666      	mov	r6, ip
 8015f3e:	429d      	cmp	r5, r3
 8015f40:	d80b      	bhi.n	8015f5a <rshift+0x4a>
 8015f42:	6032      	str	r2, [r6, #0]
 8015f44:	2a00      	cmp	r2, #0
 8015f46:	d000      	beq.n	8015f4a <rshift+0x3a>
 8015f48:	3604      	adds	r6, #4
 8015f4a:	1b33      	subs	r3, r6, r4
 8015f4c:	109b      	asrs	r3, r3, #2
 8015f4e:	6103      	str	r3, [r0, #16]
 8015f50:	42a6      	cmp	r6, r4
 8015f52:	d101      	bne.n	8015f58 <rshift+0x48>
 8015f54:	2300      	movs	r3, #0
 8015f56:	6143      	str	r3, [r0, #20]
 8015f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f5a:	681e      	ldr	r6, [r3, #0]
 8015f5c:	40be      	lsls	r6, r7
 8015f5e:	4332      	orrs	r2, r6
 8015f60:	4666      	mov	r6, ip
 8015f62:	c604      	stmia	r6!, {r2}
 8015f64:	cb04      	ldmia	r3!, {r2}
 8015f66:	46b4      	mov	ip, r6
 8015f68:	40ca      	lsrs	r2, r1
 8015f6a:	e7e7      	b.n	8015f3c <rshift+0x2c>
 8015f6c:	cb02      	ldmia	r3!, {r1}
 8015f6e:	c202      	stmia	r2!, {r1}
 8015f70:	0016      	movs	r6, r2
 8015f72:	429d      	cmp	r5, r3
 8015f74:	d8fa      	bhi.n	8015f6c <rshift+0x5c>
 8015f76:	e7e8      	b.n	8015f4a <rshift+0x3a>

08015f78 <__hexdig_fun>:
 8015f78:	0003      	movs	r3, r0
 8015f7a:	3b30      	subs	r3, #48	; 0x30
 8015f7c:	2b09      	cmp	r3, #9
 8015f7e:	d803      	bhi.n	8015f88 <__hexdig_fun+0x10>
 8015f80:	3820      	subs	r0, #32
 8015f82:	b2c3      	uxtb	r3, r0
 8015f84:	0018      	movs	r0, r3
 8015f86:	4770      	bx	lr
 8015f88:	0003      	movs	r3, r0
 8015f8a:	3b61      	subs	r3, #97	; 0x61
 8015f8c:	2b05      	cmp	r3, #5
 8015f8e:	d801      	bhi.n	8015f94 <__hexdig_fun+0x1c>
 8015f90:	3847      	subs	r0, #71	; 0x47
 8015f92:	e7f6      	b.n	8015f82 <__hexdig_fun+0xa>
 8015f94:	0002      	movs	r2, r0
 8015f96:	3a41      	subs	r2, #65	; 0x41
 8015f98:	2300      	movs	r3, #0
 8015f9a:	2a05      	cmp	r2, #5
 8015f9c:	d8f2      	bhi.n	8015f84 <__hexdig_fun+0xc>
 8015f9e:	3827      	subs	r0, #39	; 0x27
 8015fa0:	e7ef      	b.n	8015f82 <__hexdig_fun+0xa>

08015fa2 <__gethex>:
 8015fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fa4:	b08d      	sub	sp, #52	; 0x34
 8015fa6:	9005      	str	r0, [sp, #20]
 8015fa8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015faa:	9109      	str	r1, [sp, #36]	; 0x24
 8015fac:	9202      	str	r2, [sp, #8]
 8015fae:	930a      	str	r3, [sp, #40]	; 0x28
 8015fb0:	f000 fadf 	bl	8016572 <__localeconv_l>
 8015fb4:	6803      	ldr	r3, [r0, #0]
 8015fb6:	0018      	movs	r0, r3
 8015fb8:	9307      	str	r3, [sp, #28]
 8015fba:	f7ea f8ad 	bl	8000118 <strlen>
 8015fbe:	2202      	movs	r2, #2
 8015fc0:	9b07      	ldr	r3, [sp, #28]
 8015fc2:	4252      	negs	r2, r2
 8015fc4:	181b      	adds	r3, r3, r0
 8015fc6:	3b01      	subs	r3, #1
 8015fc8:	781b      	ldrb	r3, [r3, #0]
 8015fca:	9004      	str	r0, [sp, #16]
 8015fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fd0:	6819      	ldr	r1, [r3, #0]
 8015fd2:	1c8b      	adds	r3, r1, #2
 8015fd4:	1a52      	subs	r2, r2, r1
 8015fd6:	18d1      	adds	r1, r2, r3
 8015fd8:	9301      	str	r3, [sp, #4]
 8015fda:	9108      	str	r1, [sp, #32]
 8015fdc:	9901      	ldr	r1, [sp, #4]
 8015fde:	3301      	adds	r3, #1
 8015fe0:	7808      	ldrb	r0, [r1, #0]
 8015fe2:	2830      	cmp	r0, #48	; 0x30
 8015fe4:	d0f7      	beq.n	8015fd6 <__gethex+0x34>
 8015fe6:	f7ff ffc7 	bl	8015f78 <__hexdig_fun>
 8015fea:	1e07      	subs	r7, r0, #0
 8015fec:	d000      	beq.n	8015ff0 <__gethex+0x4e>
 8015fee:	e06f      	b.n	80160d0 <__gethex+0x12e>
 8015ff0:	9a04      	ldr	r2, [sp, #16]
 8015ff2:	9907      	ldr	r1, [sp, #28]
 8015ff4:	9801      	ldr	r0, [sp, #4]
 8015ff6:	f7fe f997 	bl	8014328 <strncmp>
 8015ffa:	2800      	cmp	r0, #0
 8015ffc:	d000      	beq.n	8016000 <__gethex+0x5e>
 8015ffe:	e06d      	b.n	80160dc <__gethex+0x13a>
 8016000:	9b01      	ldr	r3, [sp, #4]
 8016002:	9a04      	ldr	r2, [sp, #16]
 8016004:	189c      	adds	r4, r3, r2
 8016006:	7820      	ldrb	r0, [r4, #0]
 8016008:	f7ff ffb6 	bl	8015f78 <__hexdig_fun>
 801600c:	2800      	cmp	r0, #0
 801600e:	d069      	beq.n	80160e4 <__gethex+0x142>
 8016010:	9401      	str	r4, [sp, #4]
 8016012:	9b01      	ldr	r3, [sp, #4]
 8016014:	7818      	ldrb	r0, [r3, #0]
 8016016:	2830      	cmp	r0, #48	; 0x30
 8016018:	d009      	beq.n	801602e <__gethex+0x8c>
 801601a:	f7ff ffad 	bl	8015f78 <__hexdig_fun>
 801601e:	4243      	negs	r3, r0
 8016020:	4143      	adcs	r3, r0
 8016022:	9303      	str	r3, [sp, #12]
 8016024:	2301      	movs	r3, #1
 8016026:	0026      	movs	r6, r4
 8016028:	9308      	str	r3, [sp, #32]
 801602a:	9c01      	ldr	r4, [sp, #4]
 801602c:	e004      	b.n	8016038 <__gethex+0x96>
 801602e:	9b01      	ldr	r3, [sp, #4]
 8016030:	3301      	adds	r3, #1
 8016032:	9301      	str	r3, [sp, #4]
 8016034:	e7ed      	b.n	8016012 <__gethex+0x70>
 8016036:	3401      	adds	r4, #1
 8016038:	7820      	ldrb	r0, [r4, #0]
 801603a:	f7ff ff9d 	bl	8015f78 <__hexdig_fun>
 801603e:	2800      	cmp	r0, #0
 8016040:	d1f9      	bne.n	8016036 <__gethex+0x94>
 8016042:	9a04      	ldr	r2, [sp, #16]
 8016044:	9907      	ldr	r1, [sp, #28]
 8016046:	0020      	movs	r0, r4
 8016048:	f7fe f96e 	bl	8014328 <strncmp>
 801604c:	2800      	cmp	r0, #0
 801604e:	d109      	bne.n	8016064 <__gethex+0xc2>
 8016050:	2e00      	cmp	r6, #0
 8016052:	d10a      	bne.n	801606a <__gethex+0xc8>
 8016054:	9b04      	ldr	r3, [sp, #16]
 8016056:	18e4      	adds	r4, r4, r3
 8016058:	0026      	movs	r6, r4
 801605a:	7820      	ldrb	r0, [r4, #0]
 801605c:	f7ff ff8c 	bl	8015f78 <__hexdig_fun>
 8016060:	2800      	cmp	r0, #0
 8016062:	d139      	bne.n	80160d8 <__gethex+0x136>
 8016064:	2700      	movs	r7, #0
 8016066:	42be      	cmp	r6, r7
 8016068:	d001      	beq.n	801606e <__gethex+0xcc>
 801606a:	1b37      	subs	r7, r6, r4
 801606c:	00bf      	lsls	r7, r7, #2
 801606e:	7823      	ldrb	r3, [r4, #0]
 8016070:	2b50      	cmp	r3, #80	; 0x50
 8016072:	d001      	beq.n	8016078 <__gethex+0xd6>
 8016074:	2b70      	cmp	r3, #112	; 0x70
 8016076:	d142      	bne.n	80160fe <__gethex+0x15c>
 8016078:	7863      	ldrb	r3, [r4, #1]
 801607a:	2b2b      	cmp	r3, #43	; 0x2b
 801607c:	d034      	beq.n	80160e8 <__gethex+0x146>
 801607e:	2b2d      	cmp	r3, #45	; 0x2d
 8016080:	d036      	beq.n	80160f0 <__gethex+0x14e>
 8016082:	2300      	movs	r3, #0
 8016084:	1c66      	adds	r6, r4, #1
 8016086:	9306      	str	r3, [sp, #24]
 8016088:	7830      	ldrb	r0, [r6, #0]
 801608a:	f7ff ff75 	bl	8015f78 <__hexdig_fun>
 801608e:	1e43      	subs	r3, r0, #1
 8016090:	b2db      	uxtb	r3, r3
 8016092:	2b18      	cmp	r3, #24
 8016094:	d833      	bhi.n	80160fe <__gethex+0x15c>
 8016096:	3810      	subs	r0, #16
 8016098:	0005      	movs	r5, r0
 801609a:	3601      	adds	r6, #1
 801609c:	7830      	ldrb	r0, [r6, #0]
 801609e:	f7ff ff6b 	bl	8015f78 <__hexdig_fun>
 80160a2:	1e43      	subs	r3, r0, #1
 80160a4:	b2db      	uxtb	r3, r3
 80160a6:	2b18      	cmp	r3, #24
 80160a8:	d924      	bls.n	80160f4 <__gethex+0x152>
 80160aa:	9b06      	ldr	r3, [sp, #24]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d000      	beq.n	80160b2 <__gethex+0x110>
 80160b0:	426d      	negs	r5, r5
 80160b2:	197f      	adds	r7, r7, r5
 80160b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160b6:	601e      	str	r6, [r3, #0]
 80160b8:	9b03      	ldr	r3, [sp, #12]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d021      	beq.n	8016102 <__gethex+0x160>
 80160be:	9b08      	ldr	r3, [sp, #32]
 80160c0:	2606      	movs	r6, #6
 80160c2:	425a      	negs	r2, r3
 80160c4:	4153      	adcs	r3, r2
 80160c6:	425b      	negs	r3, r3
 80160c8:	401e      	ands	r6, r3
 80160ca:	0030      	movs	r0, r6
 80160cc:	b00d      	add	sp, #52	; 0x34
 80160ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160d0:	2300      	movs	r3, #0
 80160d2:	9303      	str	r3, [sp, #12]
 80160d4:	001e      	movs	r6, r3
 80160d6:	e7a8      	b.n	801602a <__gethex+0x88>
 80160d8:	3401      	adds	r4, #1
 80160da:	e7be      	b.n	801605a <__gethex+0xb8>
 80160dc:	9c01      	ldr	r4, [sp, #4]
 80160de:	2301      	movs	r3, #1
 80160e0:	9303      	str	r3, [sp, #12]
 80160e2:	e7c4      	b.n	801606e <__gethex+0xcc>
 80160e4:	0007      	movs	r7, r0
 80160e6:	e7fa      	b.n	80160de <__gethex+0x13c>
 80160e8:	2300      	movs	r3, #0
 80160ea:	9306      	str	r3, [sp, #24]
 80160ec:	1ca6      	adds	r6, r4, #2
 80160ee:	e7cb      	b.n	8016088 <__gethex+0xe6>
 80160f0:	2301      	movs	r3, #1
 80160f2:	e7fa      	b.n	80160ea <__gethex+0x148>
 80160f4:	230a      	movs	r3, #10
 80160f6:	435d      	muls	r5, r3
 80160f8:	182d      	adds	r5, r5, r0
 80160fa:	3d10      	subs	r5, #16
 80160fc:	e7cd      	b.n	801609a <__gethex+0xf8>
 80160fe:	0026      	movs	r6, r4
 8016100:	e7d8      	b.n	80160b4 <__gethex+0x112>
 8016102:	9b01      	ldr	r3, [sp, #4]
 8016104:	9903      	ldr	r1, [sp, #12]
 8016106:	1ae3      	subs	r3, r4, r3
 8016108:	3b01      	subs	r3, #1
 801610a:	2b07      	cmp	r3, #7
 801610c:	dc47      	bgt.n	801619e <__gethex+0x1fc>
 801610e:	9805      	ldr	r0, [sp, #20]
 8016110:	f000 fa4b 	bl	80165aa <_Balloc>
 8016114:	0003      	movs	r3, r0
 8016116:	3314      	adds	r3, #20
 8016118:	9303      	str	r3, [sp, #12]
 801611a:	9308      	str	r3, [sp, #32]
 801611c:	2300      	movs	r3, #0
 801611e:	0005      	movs	r5, r0
 8016120:	001e      	movs	r6, r3
 8016122:	9306      	str	r3, [sp, #24]
 8016124:	9b01      	ldr	r3, [sp, #4]
 8016126:	42a3      	cmp	r3, r4
 8016128:	d33c      	bcc.n	80161a4 <__gethex+0x202>
 801612a:	9c08      	ldr	r4, [sp, #32]
 801612c:	9b03      	ldr	r3, [sp, #12]
 801612e:	c440      	stmia	r4!, {r6}
 8016130:	1ae4      	subs	r4, r4, r3
 8016132:	10a4      	asrs	r4, r4, #2
 8016134:	612c      	str	r4, [r5, #16]
 8016136:	0030      	movs	r0, r6
 8016138:	f000 fb04 	bl	8016744 <__hi0bits>
 801613c:	9b02      	ldr	r3, [sp, #8]
 801613e:	0164      	lsls	r4, r4, #5
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	1a26      	subs	r6, r4, r0
 8016144:	9301      	str	r3, [sp, #4]
 8016146:	429e      	cmp	r6, r3
 8016148:	dd5f      	ble.n	801620a <__gethex+0x268>
 801614a:	1af6      	subs	r6, r6, r3
 801614c:	0031      	movs	r1, r6
 801614e:	0028      	movs	r0, r5
 8016150:	f000 fdff 	bl	8016d52 <__any_on>
 8016154:	1e04      	subs	r4, r0, #0
 8016156:	d00f      	beq.n	8016178 <__gethex+0x1d6>
 8016158:	2401      	movs	r4, #1
 801615a:	211f      	movs	r1, #31
 801615c:	0020      	movs	r0, r4
 801615e:	1e73      	subs	r3, r6, #1
 8016160:	4019      	ands	r1, r3
 8016162:	4088      	lsls	r0, r1
 8016164:	0001      	movs	r1, r0
 8016166:	115a      	asrs	r2, r3, #5
 8016168:	9803      	ldr	r0, [sp, #12]
 801616a:	0092      	lsls	r2, r2, #2
 801616c:	5812      	ldr	r2, [r2, r0]
 801616e:	420a      	tst	r2, r1
 8016170:	d002      	beq.n	8016178 <__gethex+0x1d6>
 8016172:	42a3      	cmp	r3, r4
 8016174:	dc41      	bgt.n	80161fa <__gethex+0x258>
 8016176:	2402      	movs	r4, #2
 8016178:	0031      	movs	r1, r6
 801617a:	0028      	movs	r0, r5
 801617c:	f7ff fec8 	bl	8015f10 <rshift>
 8016180:	19bf      	adds	r7, r7, r6
 8016182:	9b02      	ldr	r3, [sp, #8]
 8016184:	689b      	ldr	r3, [r3, #8]
 8016186:	9304      	str	r3, [sp, #16]
 8016188:	42bb      	cmp	r3, r7
 801618a:	da4e      	bge.n	801622a <__gethex+0x288>
 801618c:	0029      	movs	r1, r5
 801618e:	9805      	ldr	r0, [sp, #20]
 8016190:	f000 fa43 	bl	801661a <_Bfree>
 8016194:	2300      	movs	r3, #0
 8016196:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016198:	26a3      	movs	r6, #163	; 0xa3
 801619a:	6013      	str	r3, [r2, #0]
 801619c:	e795      	b.n	80160ca <__gethex+0x128>
 801619e:	3101      	adds	r1, #1
 80161a0:	105b      	asrs	r3, r3, #1
 80161a2:	e7b2      	b.n	801610a <__gethex+0x168>
 80161a4:	1e63      	subs	r3, r4, #1
 80161a6:	9309      	str	r3, [sp, #36]	; 0x24
 80161a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	4293      	cmp	r3, r2
 80161ae:	d015      	beq.n	80161dc <__gethex+0x23a>
 80161b0:	9b06      	ldr	r3, [sp, #24]
 80161b2:	2b20      	cmp	r3, #32
 80161b4:	d105      	bne.n	80161c2 <__gethex+0x220>
 80161b6:	9b08      	ldr	r3, [sp, #32]
 80161b8:	601e      	str	r6, [r3, #0]
 80161ba:	2600      	movs	r6, #0
 80161bc:	3304      	adds	r3, #4
 80161be:	9308      	str	r3, [sp, #32]
 80161c0:	9606      	str	r6, [sp, #24]
 80161c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161c4:	7818      	ldrb	r0, [r3, #0]
 80161c6:	f7ff fed7 	bl	8015f78 <__hexdig_fun>
 80161ca:	230f      	movs	r3, #15
 80161cc:	4018      	ands	r0, r3
 80161ce:	9b06      	ldr	r3, [sp, #24]
 80161d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80161d2:	4098      	lsls	r0, r3
 80161d4:	3304      	adds	r3, #4
 80161d6:	4306      	orrs	r6, r0
 80161d8:	9306      	str	r3, [sp, #24]
 80161da:	e7a3      	b.n	8016124 <__gethex+0x182>
 80161dc:	2301      	movs	r3, #1
 80161de:	9a04      	ldr	r2, [sp, #16]
 80161e0:	1a9c      	subs	r4, r3, r2
 80161e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161e4:	191c      	adds	r4, r3, r4
 80161e6:	9b01      	ldr	r3, [sp, #4]
 80161e8:	429c      	cmp	r4, r3
 80161ea:	d3e1      	bcc.n	80161b0 <__gethex+0x20e>
 80161ec:	9907      	ldr	r1, [sp, #28]
 80161ee:	0020      	movs	r0, r4
 80161f0:	f7fe f89a 	bl	8014328 <strncmp>
 80161f4:	2800      	cmp	r0, #0
 80161f6:	d1db      	bne.n	80161b0 <__gethex+0x20e>
 80161f8:	e794      	b.n	8016124 <__gethex+0x182>
 80161fa:	1eb1      	subs	r1, r6, #2
 80161fc:	0028      	movs	r0, r5
 80161fe:	f000 fda8 	bl	8016d52 <__any_on>
 8016202:	2800      	cmp	r0, #0
 8016204:	d0b7      	beq.n	8016176 <__gethex+0x1d4>
 8016206:	2403      	movs	r4, #3
 8016208:	e7b6      	b.n	8016178 <__gethex+0x1d6>
 801620a:	9b01      	ldr	r3, [sp, #4]
 801620c:	2400      	movs	r4, #0
 801620e:	429e      	cmp	r6, r3
 8016210:	dab7      	bge.n	8016182 <__gethex+0x1e0>
 8016212:	1b9e      	subs	r6, r3, r6
 8016214:	0029      	movs	r1, r5
 8016216:	0032      	movs	r2, r6
 8016218:	9805      	ldr	r0, [sp, #20]
 801621a:	f000 fbc7 	bl	80169ac <__lshift>
 801621e:	0003      	movs	r3, r0
 8016220:	3314      	adds	r3, #20
 8016222:	0005      	movs	r5, r0
 8016224:	1bbf      	subs	r7, r7, r6
 8016226:	9303      	str	r3, [sp, #12]
 8016228:	e7ab      	b.n	8016182 <__gethex+0x1e0>
 801622a:	9b02      	ldr	r3, [sp, #8]
 801622c:	685e      	ldr	r6, [r3, #4]
 801622e:	42be      	cmp	r6, r7
 8016230:	dd6b      	ble.n	801630a <__gethex+0x368>
 8016232:	9b01      	ldr	r3, [sp, #4]
 8016234:	1bf6      	subs	r6, r6, r7
 8016236:	42b3      	cmp	r3, r6
 8016238:	dc32      	bgt.n	80162a0 <__gethex+0x2fe>
 801623a:	9b02      	ldr	r3, [sp, #8]
 801623c:	68db      	ldr	r3, [r3, #12]
 801623e:	2b02      	cmp	r3, #2
 8016240:	d026      	beq.n	8016290 <__gethex+0x2ee>
 8016242:	2b03      	cmp	r3, #3
 8016244:	d028      	beq.n	8016298 <__gethex+0x2f6>
 8016246:	2b01      	cmp	r3, #1
 8016248:	d119      	bne.n	801627e <__gethex+0x2dc>
 801624a:	9b01      	ldr	r3, [sp, #4]
 801624c:	42b3      	cmp	r3, r6
 801624e:	d116      	bne.n	801627e <__gethex+0x2dc>
 8016250:	2b01      	cmp	r3, #1
 8016252:	dc0d      	bgt.n	8016270 <__gethex+0x2ce>
 8016254:	9b02      	ldr	r3, [sp, #8]
 8016256:	2662      	movs	r6, #98	; 0x62
 8016258:	685b      	ldr	r3, [r3, #4]
 801625a:	9301      	str	r3, [sp, #4]
 801625c:	9a01      	ldr	r2, [sp, #4]
 801625e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016260:	601a      	str	r2, [r3, #0]
 8016262:	2301      	movs	r3, #1
 8016264:	9a03      	ldr	r2, [sp, #12]
 8016266:	612b      	str	r3, [r5, #16]
 8016268:	6013      	str	r3, [r2, #0]
 801626a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801626c:	601d      	str	r5, [r3, #0]
 801626e:	e72c      	b.n	80160ca <__gethex+0x128>
 8016270:	9901      	ldr	r1, [sp, #4]
 8016272:	0028      	movs	r0, r5
 8016274:	3901      	subs	r1, #1
 8016276:	f000 fd6c 	bl	8016d52 <__any_on>
 801627a:	2800      	cmp	r0, #0
 801627c:	d1ea      	bne.n	8016254 <__gethex+0x2b2>
 801627e:	0029      	movs	r1, r5
 8016280:	9805      	ldr	r0, [sp, #20]
 8016282:	f000 f9ca 	bl	801661a <_Bfree>
 8016286:	2300      	movs	r3, #0
 8016288:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801628a:	2650      	movs	r6, #80	; 0x50
 801628c:	6013      	str	r3, [r2, #0]
 801628e:	e71c      	b.n	80160ca <__gethex+0x128>
 8016290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016292:	2b00      	cmp	r3, #0
 8016294:	d0de      	beq.n	8016254 <__gethex+0x2b2>
 8016296:	e7f2      	b.n	801627e <__gethex+0x2dc>
 8016298:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801629a:	2b00      	cmp	r3, #0
 801629c:	d1da      	bne.n	8016254 <__gethex+0x2b2>
 801629e:	e7ee      	b.n	801627e <__gethex+0x2dc>
 80162a0:	1e77      	subs	r7, r6, #1
 80162a2:	2c00      	cmp	r4, #0
 80162a4:	d12f      	bne.n	8016306 <__gethex+0x364>
 80162a6:	2f00      	cmp	r7, #0
 80162a8:	d004      	beq.n	80162b4 <__gethex+0x312>
 80162aa:	0039      	movs	r1, r7
 80162ac:	0028      	movs	r0, r5
 80162ae:	f000 fd50 	bl	8016d52 <__any_on>
 80162b2:	0004      	movs	r4, r0
 80162b4:	231f      	movs	r3, #31
 80162b6:	117a      	asrs	r2, r7, #5
 80162b8:	401f      	ands	r7, r3
 80162ba:	3b1e      	subs	r3, #30
 80162bc:	40bb      	lsls	r3, r7
 80162be:	9903      	ldr	r1, [sp, #12]
 80162c0:	0092      	lsls	r2, r2, #2
 80162c2:	5852      	ldr	r2, [r2, r1]
 80162c4:	421a      	tst	r2, r3
 80162c6:	d001      	beq.n	80162cc <__gethex+0x32a>
 80162c8:	2302      	movs	r3, #2
 80162ca:	431c      	orrs	r4, r3
 80162cc:	9b01      	ldr	r3, [sp, #4]
 80162ce:	0031      	movs	r1, r6
 80162d0:	1b9b      	subs	r3, r3, r6
 80162d2:	2602      	movs	r6, #2
 80162d4:	0028      	movs	r0, r5
 80162d6:	9301      	str	r3, [sp, #4]
 80162d8:	f7ff fe1a 	bl	8015f10 <rshift>
 80162dc:	9b02      	ldr	r3, [sp, #8]
 80162de:	685f      	ldr	r7, [r3, #4]
 80162e0:	2c00      	cmp	r4, #0
 80162e2:	d040      	beq.n	8016366 <__gethex+0x3c4>
 80162e4:	9b02      	ldr	r3, [sp, #8]
 80162e6:	68db      	ldr	r3, [r3, #12]
 80162e8:	2b02      	cmp	r3, #2
 80162ea:	d010      	beq.n	801630e <__gethex+0x36c>
 80162ec:	2b03      	cmp	r3, #3
 80162ee:	d012      	beq.n	8016316 <__gethex+0x374>
 80162f0:	2b01      	cmp	r3, #1
 80162f2:	d106      	bne.n	8016302 <__gethex+0x360>
 80162f4:	07a2      	lsls	r2, r4, #30
 80162f6:	d504      	bpl.n	8016302 <__gethex+0x360>
 80162f8:	9a03      	ldr	r2, [sp, #12]
 80162fa:	6812      	ldr	r2, [r2, #0]
 80162fc:	4314      	orrs	r4, r2
 80162fe:	421c      	tst	r4, r3
 8016300:	d10c      	bne.n	801631c <__gethex+0x37a>
 8016302:	2310      	movs	r3, #16
 8016304:	e02e      	b.n	8016364 <__gethex+0x3c2>
 8016306:	2401      	movs	r4, #1
 8016308:	e7d4      	b.n	80162b4 <__gethex+0x312>
 801630a:	2601      	movs	r6, #1
 801630c:	e7e8      	b.n	80162e0 <__gethex+0x33e>
 801630e:	2301      	movs	r3, #1
 8016310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016312:	1a9b      	subs	r3, r3, r2
 8016314:	9313      	str	r3, [sp, #76]	; 0x4c
 8016316:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016318:	2b00      	cmp	r3, #0
 801631a:	d0f2      	beq.n	8016302 <__gethex+0x360>
 801631c:	692c      	ldr	r4, [r5, #16]
 801631e:	00a3      	lsls	r3, r4, #2
 8016320:	9304      	str	r3, [sp, #16]
 8016322:	002b      	movs	r3, r5
 8016324:	00a2      	lsls	r2, r4, #2
 8016326:	3314      	adds	r3, #20
 8016328:	1899      	adds	r1, r3, r2
 801632a:	2200      	movs	r2, #0
 801632c:	4694      	mov	ip, r2
 801632e:	681a      	ldr	r2, [r3, #0]
 8016330:	1c50      	adds	r0, r2, #1
 8016332:	d01d      	beq.n	8016370 <__gethex+0x3ce>
 8016334:	3201      	adds	r2, #1
 8016336:	601a      	str	r2, [r3, #0]
 8016338:	002b      	movs	r3, r5
 801633a:	3314      	adds	r3, #20
 801633c:	2e02      	cmp	r6, #2
 801633e:	d13a      	bne.n	80163b6 <__gethex+0x414>
 8016340:	9a02      	ldr	r2, [sp, #8]
 8016342:	9901      	ldr	r1, [sp, #4]
 8016344:	6812      	ldr	r2, [r2, #0]
 8016346:	3a01      	subs	r2, #1
 8016348:	428a      	cmp	r2, r1
 801634a:	d10a      	bne.n	8016362 <__gethex+0x3c0>
 801634c:	114a      	asrs	r2, r1, #5
 801634e:	211f      	movs	r1, #31
 8016350:	9801      	ldr	r0, [sp, #4]
 8016352:	0092      	lsls	r2, r2, #2
 8016354:	4001      	ands	r1, r0
 8016356:	2001      	movs	r0, #1
 8016358:	0004      	movs	r4, r0
 801635a:	408c      	lsls	r4, r1
 801635c:	58d3      	ldr	r3, [r2, r3]
 801635e:	4223      	tst	r3, r4
 8016360:	d148      	bne.n	80163f4 <__gethex+0x452>
 8016362:	2320      	movs	r3, #32
 8016364:	431e      	orrs	r6, r3
 8016366:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016368:	601d      	str	r5, [r3, #0]
 801636a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801636c:	601f      	str	r7, [r3, #0]
 801636e:	e6ac      	b.n	80160ca <__gethex+0x128>
 8016370:	4662      	mov	r2, ip
 8016372:	c304      	stmia	r3!, {r2}
 8016374:	4299      	cmp	r1, r3
 8016376:	d8da      	bhi.n	801632e <__gethex+0x38c>
 8016378:	68ab      	ldr	r3, [r5, #8]
 801637a:	429c      	cmp	r4, r3
 801637c:	db12      	blt.n	80163a4 <__gethex+0x402>
 801637e:	686b      	ldr	r3, [r5, #4]
 8016380:	9805      	ldr	r0, [sp, #20]
 8016382:	1c59      	adds	r1, r3, #1
 8016384:	f000 f911 	bl	80165aa <_Balloc>
 8016388:	0029      	movs	r1, r5
 801638a:	692b      	ldr	r3, [r5, #16]
 801638c:	9003      	str	r0, [sp, #12]
 801638e:	1c9a      	adds	r2, r3, #2
 8016390:	0092      	lsls	r2, r2, #2
 8016392:	310c      	adds	r1, #12
 8016394:	300c      	adds	r0, #12
 8016396:	f7fd f81c 	bl	80133d2 <memcpy>
 801639a:	0029      	movs	r1, r5
 801639c:	9805      	ldr	r0, [sp, #20]
 801639e:	f000 f93c 	bl	801661a <_Bfree>
 80163a2:	9d03      	ldr	r5, [sp, #12]
 80163a4:	692b      	ldr	r3, [r5, #16]
 80163a6:	1c5a      	adds	r2, r3, #1
 80163a8:	612a      	str	r2, [r5, #16]
 80163aa:	2201      	movs	r2, #1
 80163ac:	3304      	adds	r3, #4
 80163ae:	009b      	lsls	r3, r3, #2
 80163b0:	18eb      	adds	r3, r5, r3
 80163b2:	605a      	str	r2, [r3, #4]
 80163b4:	e7c0      	b.n	8016338 <__gethex+0x396>
 80163b6:	692a      	ldr	r2, [r5, #16]
 80163b8:	42a2      	cmp	r2, r4
 80163ba:	dd0a      	ble.n	80163d2 <__gethex+0x430>
 80163bc:	2101      	movs	r1, #1
 80163be:	0028      	movs	r0, r5
 80163c0:	f7ff fda6 	bl	8015f10 <rshift>
 80163c4:	9b02      	ldr	r3, [sp, #8]
 80163c6:	3701      	adds	r7, #1
 80163c8:	689b      	ldr	r3, [r3, #8]
 80163ca:	2601      	movs	r6, #1
 80163cc:	42bb      	cmp	r3, r7
 80163ce:	dac8      	bge.n	8016362 <__gethex+0x3c0>
 80163d0:	e6dc      	b.n	801618c <__gethex+0x1ea>
 80163d2:	241f      	movs	r4, #31
 80163d4:	9a01      	ldr	r2, [sp, #4]
 80163d6:	2601      	movs	r6, #1
 80163d8:	4022      	ands	r2, r4
 80163da:	1e14      	subs	r4, r2, #0
 80163dc:	d0c1      	beq.n	8016362 <__gethex+0x3c0>
 80163de:	9a04      	ldr	r2, [sp, #16]
 80163e0:	189b      	adds	r3, r3, r2
 80163e2:	3b04      	subs	r3, #4
 80163e4:	6818      	ldr	r0, [r3, #0]
 80163e6:	f000 f9ad 	bl	8016744 <__hi0bits>
 80163ea:	2120      	movs	r1, #32
 80163ec:	1b0c      	subs	r4, r1, r4
 80163ee:	42a0      	cmp	r0, r4
 80163f0:	dbe4      	blt.n	80163bc <__gethex+0x41a>
 80163f2:	e7b6      	b.n	8016362 <__gethex+0x3c0>
 80163f4:	0006      	movs	r6, r0
 80163f6:	e7b4      	b.n	8016362 <__gethex+0x3c0>

080163f8 <L_shift>:
 80163f8:	2308      	movs	r3, #8
 80163fa:	b570      	push	{r4, r5, r6, lr}
 80163fc:	2520      	movs	r5, #32
 80163fe:	1a9a      	subs	r2, r3, r2
 8016400:	0092      	lsls	r2, r2, #2
 8016402:	1aad      	subs	r5, r5, r2
 8016404:	6843      	ldr	r3, [r0, #4]
 8016406:	6806      	ldr	r6, [r0, #0]
 8016408:	001c      	movs	r4, r3
 801640a:	40ac      	lsls	r4, r5
 801640c:	40d3      	lsrs	r3, r2
 801640e:	4334      	orrs	r4, r6
 8016410:	6004      	str	r4, [r0, #0]
 8016412:	6043      	str	r3, [r0, #4]
 8016414:	3004      	adds	r0, #4
 8016416:	4288      	cmp	r0, r1
 8016418:	d3f4      	bcc.n	8016404 <L_shift+0xc>
 801641a:	bd70      	pop	{r4, r5, r6, pc}

0801641c <__match>:
 801641c:	b530      	push	{r4, r5, lr}
 801641e:	6803      	ldr	r3, [r0, #0]
 8016420:	780c      	ldrb	r4, [r1, #0]
 8016422:	3301      	adds	r3, #1
 8016424:	2c00      	cmp	r4, #0
 8016426:	d102      	bne.n	801642e <__match+0x12>
 8016428:	6003      	str	r3, [r0, #0]
 801642a:	2001      	movs	r0, #1
 801642c:	bd30      	pop	{r4, r5, pc}
 801642e:	781a      	ldrb	r2, [r3, #0]
 8016430:	0015      	movs	r5, r2
 8016432:	3d41      	subs	r5, #65	; 0x41
 8016434:	2d19      	cmp	r5, #25
 8016436:	d800      	bhi.n	801643a <__match+0x1e>
 8016438:	3220      	adds	r2, #32
 801643a:	3101      	adds	r1, #1
 801643c:	42a2      	cmp	r2, r4
 801643e:	d0ef      	beq.n	8016420 <__match+0x4>
 8016440:	2000      	movs	r0, #0
 8016442:	e7f3      	b.n	801642c <__match+0x10>

08016444 <__hexnan>:
 8016444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016446:	b08b      	sub	sp, #44	; 0x2c
 8016448:	9201      	str	r2, [sp, #4]
 801644a:	680a      	ldr	r2, [r1, #0]
 801644c:	9901      	ldr	r1, [sp, #4]
 801644e:	1153      	asrs	r3, r2, #5
 8016450:	009b      	lsls	r3, r3, #2
 8016452:	18cb      	adds	r3, r1, r3
 8016454:	9304      	str	r3, [sp, #16]
 8016456:	231f      	movs	r3, #31
 8016458:	401a      	ands	r2, r3
 801645a:	9008      	str	r0, [sp, #32]
 801645c:	9206      	str	r2, [sp, #24]
 801645e:	d002      	beq.n	8016466 <__hexnan+0x22>
 8016460:	9b04      	ldr	r3, [sp, #16]
 8016462:	3304      	adds	r3, #4
 8016464:	9304      	str	r3, [sp, #16]
 8016466:	9b04      	ldr	r3, [sp, #16]
 8016468:	2500      	movs	r5, #0
 801646a:	1f1e      	subs	r6, r3, #4
 801646c:	0037      	movs	r7, r6
 801646e:	0034      	movs	r4, r6
 8016470:	9b08      	ldr	r3, [sp, #32]
 8016472:	6035      	str	r5, [r6, #0]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	9507      	str	r5, [sp, #28]
 8016478:	9305      	str	r3, [sp, #20]
 801647a:	9502      	str	r5, [sp, #8]
 801647c:	9b05      	ldr	r3, [sp, #20]
 801647e:	3301      	adds	r3, #1
 8016480:	9309      	str	r3, [sp, #36]	; 0x24
 8016482:	9b05      	ldr	r3, [sp, #20]
 8016484:	785b      	ldrb	r3, [r3, #1]
 8016486:	9303      	str	r3, [sp, #12]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d028      	beq.n	80164de <__hexnan+0x9a>
 801648c:	9803      	ldr	r0, [sp, #12]
 801648e:	f7ff fd73 	bl	8015f78 <__hexdig_fun>
 8016492:	2800      	cmp	r0, #0
 8016494:	d145      	bne.n	8016522 <__hexnan+0xde>
 8016496:	9b03      	ldr	r3, [sp, #12]
 8016498:	2b20      	cmp	r3, #32
 801649a:	d819      	bhi.n	80164d0 <__hexnan+0x8c>
 801649c:	9b02      	ldr	r3, [sp, #8]
 801649e:	9a07      	ldr	r2, [sp, #28]
 80164a0:	4293      	cmp	r3, r2
 80164a2:	dd12      	ble.n	80164ca <__hexnan+0x86>
 80164a4:	42bc      	cmp	r4, r7
 80164a6:	d206      	bcs.n	80164b6 <__hexnan+0x72>
 80164a8:	2d07      	cmp	r5, #7
 80164aa:	dc04      	bgt.n	80164b6 <__hexnan+0x72>
 80164ac:	002a      	movs	r2, r5
 80164ae:	0039      	movs	r1, r7
 80164b0:	0020      	movs	r0, r4
 80164b2:	f7ff ffa1 	bl	80163f8 <L_shift>
 80164b6:	9b01      	ldr	r3, [sp, #4]
 80164b8:	2508      	movs	r5, #8
 80164ba:	429c      	cmp	r4, r3
 80164bc:	d905      	bls.n	80164ca <__hexnan+0x86>
 80164be:	1f27      	subs	r7, r4, #4
 80164c0:	2500      	movs	r5, #0
 80164c2:	003c      	movs	r4, r7
 80164c4:	9b02      	ldr	r3, [sp, #8]
 80164c6:	603d      	str	r5, [r7, #0]
 80164c8:	9307      	str	r3, [sp, #28]
 80164ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164cc:	9305      	str	r3, [sp, #20]
 80164ce:	e7d5      	b.n	801647c <__hexnan+0x38>
 80164d0:	9b03      	ldr	r3, [sp, #12]
 80164d2:	2b29      	cmp	r3, #41	; 0x29
 80164d4:	d14a      	bne.n	801656c <__hexnan+0x128>
 80164d6:	9b05      	ldr	r3, [sp, #20]
 80164d8:	9a08      	ldr	r2, [sp, #32]
 80164da:	3302      	adds	r3, #2
 80164dc:	6013      	str	r3, [r2, #0]
 80164de:	9b02      	ldr	r3, [sp, #8]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d043      	beq.n	801656c <__hexnan+0x128>
 80164e4:	42bc      	cmp	r4, r7
 80164e6:	d206      	bcs.n	80164f6 <__hexnan+0xb2>
 80164e8:	2d07      	cmp	r5, #7
 80164ea:	dc04      	bgt.n	80164f6 <__hexnan+0xb2>
 80164ec:	002a      	movs	r2, r5
 80164ee:	0039      	movs	r1, r7
 80164f0:	0020      	movs	r0, r4
 80164f2:	f7ff ff81 	bl	80163f8 <L_shift>
 80164f6:	9b01      	ldr	r3, [sp, #4]
 80164f8:	429c      	cmp	r4, r3
 80164fa:	d926      	bls.n	801654a <__hexnan+0x106>
 80164fc:	cc04      	ldmia	r4!, {r2}
 80164fe:	601a      	str	r2, [r3, #0]
 8016500:	3304      	adds	r3, #4
 8016502:	42a6      	cmp	r6, r4
 8016504:	d2fa      	bcs.n	80164fc <__hexnan+0xb8>
 8016506:	2200      	movs	r2, #0
 8016508:	c304      	stmia	r3!, {r2}
 801650a:	429e      	cmp	r6, r3
 801650c:	d2fc      	bcs.n	8016508 <__hexnan+0xc4>
 801650e:	6833      	ldr	r3, [r6, #0]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d104      	bne.n	801651e <__hexnan+0xda>
 8016514:	9b01      	ldr	r3, [sp, #4]
 8016516:	429e      	cmp	r6, r3
 8016518:	d126      	bne.n	8016568 <__hexnan+0x124>
 801651a:	2301      	movs	r3, #1
 801651c:	6033      	str	r3, [r6, #0]
 801651e:	2005      	movs	r0, #5
 8016520:	e025      	b.n	801656e <__hexnan+0x12a>
 8016522:	9b02      	ldr	r3, [sp, #8]
 8016524:	3501      	adds	r5, #1
 8016526:	3301      	adds	r3, #1
 8016528:	9302      	str	r3, [sp, #8]
 801652a:	2d08      	cmp	r5, #8
 801652c:	dd06      	ble.n	801653c <__hexnan+0xf8>
 801652e:	9b01      	ldr	r3, [sp, #4]
 8016530:	429c      	cmp	r4, r3
 8016532:	d9ca      	bls.n	80164ca <__hexnan+0x86>
 8016534:	2300      	movs	r3, #0
 8016536:	2501      	movs	r5, #1
 8016538:	3c04      	subs	r4, #4
 801653a:	6023      	str	r3, [r4, #0]
 801653c:	220f      	movs	r2, #15
 801653e:	6823      	ldr	r3, [r4, #0]
 8016540:	4010      	ands	r0, r2
 8016542:	011b      	lsls	r3, r3, #4
 8016544:	4318      	orrs	r0, r3
 8016546:	6020      	str	r0, [r4, #0]
 8016548:	e7bf      	b.n	80164ca <__hexnan+0x86>
 801654a:	9b06      	ldr	r3, [sp, #24]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d0de      	beq.n	801650e <__hexnan+0xca>
 8016550:	2120      	movs	r1, #32
 8016552:	9a06      	ldr	r2, [sp, #24]
 8016554:	9b04      	ldr	r3, [sp, #16]
 8016556:	1a89      	subs	r1, r1, r2
 8016558:	2201      	movs	r2, #1
 801655a:	4252      	negs	r2, r2
 801655c:	40ca      	lsrs	r2, r1
 801655e:	3b04      	subs	r3, #4
 8016560:	6819      	ldr	r1, [r3, #0]
 8016562:	400a      	ands	r2, r1
 8016564:	601a      	str	r2, [r3, #0]
 8016566:	e7d2      	b.n	801650e <__hexnan+0xca>
 8016568:	3e04      	subs	r6, #4
 801656a:	e7d0      	b.n	801650e <__hexnan+0xca>
 801656c:	2004      	movs	r0, #4
 801656e:	b00b      	add	sp, #44	; 0x2c
 8016570:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016572 <__localeconv_l>:
 8016572:	30f0      	adds	r0, #240	; 0xf0
 8016574:	4770      	bx	lr
	...

08016578 <_localeconv_r>:
 8016578:	4b03      	ldr	r3, [pc, #12]	; (8016588 <_localeconv_r+0x10>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	6a18      	ldr	r0, [r3, #32]
 801657e:	2800      	cmp	r0, #0
 8016580:	d100      	bne.n	8016584 <_localeconv_r+0xc>
 8016582:	4802      	ldr	r0, [pc, #8]	; (801658c <_localeconv_r+0x14>)
 8016584:	30f0      	adds	r0, #240	; 0xf0
 8016586:	4770      	bx	lr
 8016588:	200000e0 	.word	0x200000e0
 801658c:	20000144 	.word	0x20000144

08016590 <memchr>:
 8016590:	b2c9      	uxtb	r1, r1
 8016592:	1882      	adds	r2, r0, r2
 8016594:	4290      	cmp	r0, r2
 8016596:	d101      	bne.n	801659c <memchr+0xc>
 8016598:	2000      	movs	r0, #0
 801659a:	4770      	bx	lr
 801659c:	7803      	ldrb	r3, [r0, #0]
 801659e:	428b      	cmp	r3, r1
 80165a0:	d0fb      	beq.n	801659a <memchr+0xa>
 80165a2:	3001      	adds	r0, #1
 80165a4:	e7f6      	b.n	8016594 <memchr+0x4>

080165a6 <__malloc_lock>:
 80165a6:	4770      	bx	lr

080165a8 <__malloc_unlock>:
 80165a8:	4770      	bx	lr

080165aa <_Balloc>:
 80165aa:	b570      	push	{r4, r5, r6, lr}
 80165ac:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80165ae:	0004      	movs	r4, r0
 80165b0:	000d      	movs	r5, r1
 80165b2:	2e00      	cmp	r6, #0
 80165b4:	d107      	bne.n	80165c6 <_Balloc+0x1c>
 80165b6:	2010      	movs	r0, #16
 80165b8:	f7fc fed6 	bl	8013368 <malloc>
 80165bc:	6260      	str	r0, [r4, #36]	; 0x24
 80165be:	6046      	str	r6, [r0, #4]
 80165c0:	6086      	str	r6, [r0, #8]
 80165c2:	6006      	str	r6, [r0, #0]
 80165c4:	60c6      	str	r6, [r0, #12]
 80165c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80165c8:	68f3      	ldr	r3, [r6, #12]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d013      	beq.n	80165f6 <_Balloc+0x4c>
 80165ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80165d0:	00aa      	lsls	r2, r5, #2
 80165d2:	68db      	ldr	r3, [r3, #12]
 80165d4:	189b      	adds	r3, r3, r2
 80165d6:	6818      	ldr	r0, [r3, #0]
 80165d8:	2800      	cmp	r0, #0
 80165da:	d118      	bne.n	801660e <_Balloc+0x64>
 80165dc:	2101      	movs	r1, #1
 80165de:	000e      	movs	r6, r1
 80165e0:	40ae      	lsls	r6, r5
 80165e2:	1d72      	adds	r2, r6, #5
 80165e4:	0092      	lsls	r2, r2, #2
 80165e6:	0020      	movs	r0, r4
 80165e8:	f000 fbd5 	bl	8016d96 <_calloc_r>
 80165ec:	2800      	cmp	r0, #0
 80165ee:	d00c      	beq.n	801660a <_Balloc+0x60>
 80165f0:	6045      	str	r5, [r0, #4]
 80165f2:	6086      	str	r6, [r0, #8]
 80165f4:	e00d      	b.n	8016612 <_Balloc+0x68>
 80165f6:	2221      	movs	r2, #33	; 0x21
 80165f8:	2104      	movs	r1, #4
 80165fa:	0020      	movs	r0, r4
 80165fc:	f000 fbcb 	bl	8016d96 <_calloc_r>
 8016600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016602:	60f0      	str	r0, [r6, #12]
 8016604:	68db      	ldr	r3, [r3, #12]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d1e1      	bne.n	80165ce <_Balloc+0x24>
 801660a:	2000      	movs	r0, #0
 801660c:	bd70      	pop	{r4, r5, r6, pc}
 801660e:	6802      	ldr	r2, [r0, #0]
 8016610:	601a      	str	r2, [r3, #0]
 8016612:	2300      	movs	r3, #0
 8016614:	6103      	str	r3, [r0, #16]
 8016616:	60c3      	str	r3, [r0, #12]
 8016618:	e7f8      	b.n	801660c <_Balloc+0x62>

0801661a <_Bfree>:
 801661a:	b570      	push	{r4, r5, r6, lr}
 801661c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801661e:	0006      	movs	r6, r0
 8016620:	000d      	movs	r5, r1
 8016622:	2c00      	cmp	r4, #0
 8016624:	d107      	bne.n	8016636 <_Bfree+0x1c>
 8016626:	2010      	movs	r0, #16
 8016628:	f7fc fe9e 	bl	8013368 <malloc>
 801662c:	6270      	str	r0, [r6, #36]	; 0x24
 801662e:	6044      	str	r4, [r0, #4]
 8016630:	6084      	str	r4, [r0, #8]
 8016632:	6004      	str	r4, [r0, #0]
 8016634:	60c4      	str	r4, [r0, #12]
 8016636:	2d00      	cmp	r5, #0
 8016638:	d007      	beq.n	801664a <_Bfree+0x30>
 801663a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801663c:	686a      	ldr	r2, [r5, #4]
 801663e:	68db      	ldr	r3, [r3, #12]
 8016640:	0092      	lsls	r2, r2, #2
 8016642:	189b      	adds	r3, r3, r2
 8016644:	681a      	ldr	r2, [r3, #0]
 8016646:	602a      	str	r2, [r5, #0]
 8016648:	601d      	str	r5, [r3, #0]
 801664a:	bd70      	pop	{r4, r5, r6, pc}

0801664c <__multadd>:
 801664c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801664e:	001e      	movs	r6, r3
 8016650:	2314      	movs	r3, #20
 8016652:	469c      	mov	ip, r3
 8016654:	0007      	movs	r7, r0
 8016656:	000c      	movs	r4, r1
 8016658:	2000      	movs	r0, #0
 801665a:	690d      	ldr	r5, [r1, #16]
 801665c:	448c      	add	ip, r1
 801665e:	4663      	mov	r3, ip
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	3001      	adds	r0, #1
 8016664:	b299      	uxth	r1, r3
 8016666:	4663      	mov	r3, ip
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	4351      	muls	r1, r2
 801666c:	0c1b      	lsrs	r3, r3, #16
 801666e:	4353      	muls	r3, r2
 8016670:	1989      	adds	r1, r1, r6
 8016672:	0c0e      	lsrs	r6, r1, #16
 8016674:	199b      	adds	r3, r3, r6
 8016676:	b289      	uxth	r1, r1
 8016678:	0c1e      	lsrs	r6, r3, #16
 801667a:	041b      	lsls	r3, r3, #16
 801667c:	185b      	adds	r3, r3, r1
 801667e:	4661      	mov	r1, ip
 8016680:	c108      	stmia	r1!, {r3}
 8016682:	468c      	mov	ip, r1
 8016684:	4285      	cmp	r5, r0
 8016686:	dcea      	bgt.n	801665e <__multadd+0x12>
 8016688:	2e00      	cmp	r6, #0
 801668a:	d01b      	beq.n	80166c4 <__multadd+0x78>
 801668c:	68a3      	ldr	r3, [r4, #8]
 801668e:	42ab      	cmp	r3, r5
 8016690:	dc12      	bgt.n	80166b8 <__multadd+0x6c>
 8016692:	6863      	ldr	r3, [r4, #4]
 8016694:	0038      	movs	r0, r7
 8016696:	1c59      	adds	r1, r3, #1
 8016698:	f7ff ff87 	bl	80165aa <_Balloc>
 801669c:	0021      	movs	r1, r4
 801669e:	6923      	ldr	r3, [r4, #16]
 80166a0:	9001      	str	r0, [sp, #4]
 80166a2:	1c9a      	adds	r2, r3, #2
 80166a4:	0092      	lsls	r2, r2, #2
 80166a6:	310c      	adds	r1, #12
 80166a8:	300c      	adds	r0, #12
 80166aa:	f7fc fe92 	bl	80133d2 <memcpy>
 80166ae:	0021      	movs	r1, r4
 80166b0:	0038      	movs	r0, r7
 80166b2:	f7ff ffb2 	bl	801661a <_Bfree>
 80166b6:	9c01      	ldr	r4, [sp, #4]
 80166b8:	1d2b      	adds	r3, r5, #4
 80166ba:	009b      	lsls	r3, r3, #2
 80166bc:	18e3      	adds	r3, r4, r3
 80166be:	3501      	adds	r5, #1
 80166c0:	605e      	str	r6, [r3, #4]
 80166c2:	6125      	str	r5, [r4, #16]
 80166c4:	0020      	movs	r0, r4
 80166c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080166c8 <__s2b>:
 80166c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166ca:	0006      	movs	r6, r0
 80166cc:	0018      	movs	r0, r3
 80166ce:	000c      	movs	r4, r1
 80166d0:	3008      	adds	r0, #8
 80166d2:	2109      	movs	r1, #9
 80166d4:	9301      	str	r3, [sp, #4]
 80166d6:	0015      	movs	r5, r2
 80166d8:	f7e9 fdba 	bl	8000250 <__divsi3>
 80166dc:	2301      	movs	r3, #1
 80166de:	2100      	movs	r1, #0
 80166e0:	4283      	cmp	r3, r0
 80166e2:	db1f      	blt.n	8016724 <__s2b+0x5c>
 80166e4:	0030      	movs	r0, r6
 80166e6:	f7ff ff60 	bl	80165aa <_Balloc>
 80166ea:	9b08      	ldr	r3, [sp, #32]
 80166ec:	6143      	str	r3, [r0, #20]
 80166ee:	2301      	movs	r3, #1
 80166f0:	6103      	str	r3, [r0, #16]
 80166f2:	2d09      	cmp	r5, #9
 80166f4:	dd19      	ble.n	801672a <__s2b+0x62>
 80166f6:	0023      	movs	r3, r4
 80166f8:	3309      	adds	r3, #9
 80166fa:	001f      	movs	r7, r3
 80166fc:	9300      	str	r3, [sp, #0]
 80166fe:	1964      	adds	r4, r4, r5
 8016700:	783b      	ldrb	r3, [r7, #0]
 8016702:	0001      	movs	r1, r0
 8016704:	3b30      	subs	r3, #48	; 0x30
 8016706:	220a      	movs	r2, #10
 8016708:	0030      	movs	r0, r6
 801670a:	3701      	adds	r7, #1
 801670c:	f7ff ff9e 	bl	801664c <__multadd>
 8016710:	42a7      	cmp	r7, r4
 8016712:	d1f5      	bne.n	8016700 <__s2b+0x38>
 8016714:	9b00      	ldr	r3, [sp, #0]
 8016716:	195c      	adds	r4, r3, r5
 8016718:	3c08      	subs	r4, #8
 801671a:	002f      	movs	r7, r5
 801671c:	9b01      	ldr	r3, [sp, #4]
 801671e:	429f      	cmp	r7, r3
 8016720:	db06      	blt.n	8016730 <__s2b+0x68>
 8016722:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016724:	005b      	lsls	r3, r3, #1
 8016726:	3101      	adds	r1, #1
 8016728:	e7da      	b.n	80166e0 <__s2b+0x18>
 801672a:	340a      	adds	r4, #10
 801672c:	2509      	movs	r5, #9
 801672e:	e7f4      	b.n	801671a <__s2b+0x52>
 8016730:	1b63      	subs	r3, r4, r5
 8016732:	5ddb      	ldrb	r3, [r3, r7]
 8016734:	0001      	movs	r1, r0
 8016736:	3b30      	subs	r3, #48	; 0x30
 8016738:	220a      	movs	r2, #10
 801673a:	0030      	movs	r0, r6
 801673c:	f7ff ff86 	bl	801664c <__multadd>
 8016740:	3701      	adds	r7, #1
 8016742:	e7eb      	b.n	801671c <__s2b+0x54>

08016744 <__hi0bits>:
 8016744:	0003      	movs	r3, r0
 8016746:	0c02      	lsrs	r2, r0, #16
 8016748:	2000      	movs	r0, #0
 801674a:	4282      	cmp	r2, r0
 801674c:	d101      	bne.n	8016752 <__hi0bits+0xe>
 801674e:	041b      	lsls	r3, r3, #16
 8016750:	3010      	adds	r0, #16
 8016752:	0e1a      	lsrs	r2, r3, #24
 8016754:	d101      	bne.n	801675a <__hi0bits+0x16>
 8016756:	3008      	adds	r0, #8
 8016758:	021b      	lsls	r3, r3, #8
 801675a:	0f1a      	lsrs	r2, r3, #28
 801675c:	d101      	bne.n	8016762 <__hi0bits+0x1e>
 801675e:	3004      	adds	r0, #4
 8016760:	011b      	lsls	r3, r3, #4
 8016762:	0f9a      	lsrs	r2, r3, #30
 8016764:	d101      	bne.n	801676a <__hi0bits+0x26>
 8016766:	3002      	adds	r0, #2
 8016768:	009b      	lsls	r3, r3, #2
 801676a:	2b00      	cmp	r3, #0
 801676c:	db03      	blt.n	8016776 <__hi0bits+0x32>
 801676e:	3001      	adds	r0, #1
 8016770:	005b      	lsls	r3, r3, #1
 8016772:	d400      	bmi.n	8016776 <__hi0bits+0x32>
 8016774:	2020      	movs	r0, #32
 8016776:	4770      	bx	lr

08016778 <__lo0bits>:
 8016778:	2207      	movs	r2, #7
 801677a:	6803      	ldr	r3, [r0, #0]
 801677c:	b510      	push	{r4, lr}
 801677e:	0001      	movs	r1, r0
 8016780:	401a      	ands	r2, r3
 8016782:	d00d      	beq.n	80167a0 <__lo0bits+0x28>
 8016784:	2401      	movs	r4, #1
 8016786:	2000      	movs	r0, #0
 8016788:	4223      	tst	r3, r4
 801678a:	d105      	bne.n	8016798 <__lo0bits+0x20>
 801678c:	3002      	adds	r0, #2
 801678e:	4203      	tst	r3, r0
 8016790:	d003      	beq.n	801679a <__lo0bits+0x22>
 8016792:	40e3      	lsrs	r3, r4
 8016794:	0020      	movs	r0, r4
 8016796:	600b      	str	r3, [r1, #0]
 8016798:	bd10      	pop	{r4, pc}
 801679a:	089b      	lsrs	r3, r3, #2
 801679c:	600b      	str	r3, [r1, #0]
 801679e:	e7fb      	b.n	8016798 <__lo0bits+0x20>
 80167a0:	b29c      	uxth	r4, r3
 80167a2:	0010      	movs	r0, r2
 80167a4:	2c00      	cmp	r4, #0
 80167a6:	d101      	bne.n	80167ac <__lo0bits+0x34>
 80167a8:	2010      	movs	r0, #16
 80167aa:	0c1b      	lsrs	r3, r3, #16
 80167ac:	b2da      	uxtb	r2, r3
 80167ae:	2a00      	cmp	r2, #0
 80167b0:	d101      	bne.n	80167b6 <__lo0bits+0x3e>
 80167b2:	3008      	adds	r0, #8
 80167b4:	0a1b      	lsrs	r3, r3, #8
 80167b6:	071a      	lsls	r2, r3, #28
 80167b8:	d101      	bne.n	80167be <__lo0bits+0x46>
 80167ba:	3004      	adds	r0, #4
 80167bc:	091b      	lsrs	r3, r3, #4
 80167be:	079a      	lsls	r2, r3, #30
 80167c0:	d101      	bne.n	80167c6 <__lo0bits+0x4e>
 80167c2:	3002      	adds	r0, #2
 80167c4:	089b      	lsrs	r3, r3, #2
 80167c6:	07da      	lsls	r2, r3, #31
 80167c8:	d4e8      	bmi.n	801679c <__lo0bits+0x24>
 80167ca:	085b      	lsrs	r3, r3, #1
 80167cc:	d001      	beq.n	80167d2 <__lo0bits+0x5a>
 80167ce:	3001      	adds	r0, #1
 80167d0:	e7e4      	b.n	801679c <__lo0bits+0x24>
 80167d2:	2020      	movs	r0, #32
 80167d4:	e7e0      	b.n	8016798 <__lo0bits+0x20>

080167d6 <__i2b>:
 80167d6:	b510      	push	{r4, lr}
 80167d8:	000c      	movs	r4, r1
 80167da:	2101      	movs	r1, #1
 80167dc:	f7ff fee5 	bl	80165aa <_Balloc>
 80167e0:	2301      	movs	r3, #1
 80167e2:	6144      	str	r4, [r0, #20]
 80167e4:	6103      	str	r3, [r0, #16]
 80167e6:	bd10      	pop	{r4, pc}

080167e8 <__multiply>:
 80167e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167ea:	690b      	ldr	r3, [r1, #16]
 80167ec:	0014      	movs	r4, r2
 80167ee:	6912      	ldr	r2, [r2, #16]
 80167f0:	b089      	sub	sp, #36	; 0x24
 80167f2:	000d      	movs	r5, r1
 80167f4:	4293      	cmp	r3, r2
 80167f6:	da01      	bge.n	80167fc <__multiply+0x14>
 80167f8:	0025      	movs	r5, r4
 80167fa:	000c      	movs	r4, r1
 80167fc:	692f      	ldr	r7, [r5, #16]
 80167fe:	6926      	ldr	r6, [r4, #16]
 8016800:	6869      	ldr	r1, [r5, #4]
 8016802:	19bb      	adds	r3, r7, r6
 8016804:	9302      	str	r3, [sp, #8]
 8016806:	68ab      	ldr	r3, [r5, #8]
 8016808:	19ba      	adds	r2, r7, r6
 801680a:	4293      	cmp	r3, r2
 801680c:	da00      	bge.n	8016810 <__multiply+0x28>
 801680e:	3101      	adds	r1, #1
 8016810:	f7ff fecb 	bl	80165aa <_Balloc>
 8016814:	0002      	movs	r2, r0
 8016816:	19bb      	adds	r3, r7, r6
 8016818:	3214      	adds	r2, #20
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	18d3      	adds	r3, r2, r3
 801681e:	469c      	mov	ip, r3
 8016820:	2100      	movs	r1, #0
 8016822:	0013      	movs	r3, r2
 8016824:	9004      	str	r0, [sp, #16]
 8016826:	4563      	cmp	r3, ip
 8016828:	d31d      	bcc.n	8016866 <__multiply+0x7e>
 801682a:	3514      	adds	r5, #20
 801682c:	00bf      	lsls	r7, r7, #2
 801682e:	19eb      	adds	r3, r5, r7
 8016830:	3414      	adds	r4, #20
 8016832:	00b6      	lsls	r6, r6, #2
 8016834:	9305      	str	r3, [sp, #20]
 8016836:	19a3      	adds	r3, r4, r6
 8016838:	9503      	str	r5, [sp, #12]
 801683a:	9401      	str	r4, [sp, #4]
 801683c:	9307      	str	r3, [sp, #28]
 801683e:	9b07      	ldr	r3, [sp, #28]
 8016840:	9901      	ldr	r1, [sp, #4]
 8016842:	4299      	cmp	r1, r3
 8016844:	d311      	bcc.n	801686a <__multiply+0x82>
 8016846:	9b02      	ldr	r3, [sp, #8]
 8016848:	2b00      	cmp	r3, #0
 801684a:	dd06      	ble.n	801685a <__multiply+0x72>
 801684c:	2304      	movs	r3, #4
 801684e:	425b      	negs	r3, r3
 8016850:	449c      	add	ip, r3
 8016852:	4663      	mov	r3, ip
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d051      	beq.n	80168fe <__multiply+0x116>
 801685a:	9b04      	ldr	r3, [sp, #16]
 801685c:	9a02      	ldr	r2, [sp, #8]
 801685e:	0018      	movs	r0, r3
 8016860:	611a      	str	r2, [r3, #16]
 8016862:	b009      	add	sp, #36	; 0x24
 8016864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016866:	c302      	stmia	r3!, {r1}
 8016868:	e7dd      	b.n	8016826 <__multiply+0x3e>
 801686a:	9b01      	ldr	r3, [sp, #4]
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	b298      	uxth	r0, r3
 8016870:	2800      	cmp	r0, #0
 8016872:	d01c      	beq.n	80168ae <__multiply+0xc6>
 8016874:	0015      	movs	r5, r2
 8016876:	2600      	movs	r6, #0
 8016878:	9f03      	ldr	r7, [sp, #12]
 801687a:	cf02      	ldmia	r7!, {r1}
 801687c:	682c      	ldr	r4, [r5, #0]
 801687e:	b28b      	uxth	r3, r1
 8016880:	4343      	muls	r3, r0
 8016882:	0c09      	lsrs	r1, r1, #16
 8016884:	4341      	muls	r1, r0
 8016886:	b2a4      	uxth	r4, r4
 8016888:	191b      	adds	r3, r3, r4
 801688a:	199b      	adds	r3, r3, r6
 801688c:	000e      	movs	r6, r1
 801688e:	6829      	ldr	r1, [r5, #0]
 8016890:	9506      	str	r5, [sp, #24]
 8016892:	0c09      	lsrs	r1, r1, #16
 8016894:	1871      	adds	r1, r6, r1
 8016896:	0c1e      	lsrs	r6, r3, #16
 8016898:	1989      	adds	r1, r1, r6
 801689a:	0c0e      	lsrs	r6, r1, #16
 801689c:	b29b      	uxth	r3, r3
 801689e:	0409      	lsls	r1, r1, #16
 80168a0:	430b      	orrs	r3, r1
 80168a2:	c508      	stmia	r5!, {r3}
 80168a4:	9b05      	ldr	r3, [sp, #20]
 80168a6:	42bb      	cmp	r3, r7
 80168a8:	d8e7      	bhi.n	801687a <__multiply+0x92>
 80168aa:	9b06      	ldr	r3, [sp, #24]
 80168ac:	605e      	str	r6, [r3, #4]
 80168ae:	9b01      	ldr	r3, [sp, #4]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	0c1d      	lsrs	r5, r3, #16
 80168b4:	d01e      	beq.n	80168f4 <__multiply+0x10c>
 80168b6:	0010      	movs	r0, r2
 80168b8:	2700      	movs	r7, #0
 80168ba:	6813      	ldr	r3, [r2, #0]
 80168bc:	9e03      	ldr	r6, [sp, #12]
 80168be:	6831      	ldr	r1, [r6, #0]
 80168c0:	6804      	ldr	r4, [r0, #0]
 80168c2:	b289      	uxth	r1, r1
 80168c4:	4369      	muls	r1, r5
 80168c6:	0c24      	lsrs	r4, r4, #16
 80168c8:	1909      	adds	r1, r1, r4
 80168ca:	19c9      	adds	r1, r1, r7
 80168cc:	040f      	lsls	r7, r1, #16
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	433b      	orrs	r3, r7
 80168d2:	6003      	str	r3, [r0, #0]
 80168d4:	ce80      	ldmia	r6!, {r7}
 80168d6:	6843      	ldr	r3, [r0, #4]
 80168d8:	0c3f      	lsrs	r7, r7, #16
 80168da:	436f      	muls	r7, r5
 80168dc:	b29b      	uxth	r3, r3
 80168de:	18fb      	adds	r3, r7, r3
 80168e0:	0c09      	lsrs	r1, r1, #16
 80168e2:	185b      	adds	r3, r3, r1
 80168e4:	9905      	ldr	r1, [sp, #20]
 80168e6:	9006      	str	r0, [sp, #24]
 80168e8:	0c1f      	lsrs	r7, r3, #16
 80168ea:	3004      	adds	r0, #4
 80168ec:	42b1      	cmp	r1, r6
 80168ee:	d8e6      	bhi.n	80168be <__multiply+0xd6>
 80168f0:	9906      	ldr	r1, [sp, #24]
 80168f2:	604b      	str	r3, [r1, #4]
 80168f4:	9b01      	ldr	r3, [sp, #4]
 80168f6:	3204      	adds	r2, #4
 80168f8:	3304      	adds	r3, #4
 80168fa:	9301      	str	r3, [sp, #4]
 80168fc:	e79f      	b.n	801683e <__multiply+0x56>
 80168fe:	9b02      	ldr	r3, [sp, #8]
 8016900:	3b01      	subs	r3, #1
 8016902:	9302      	str	r3, [sp, #8]
 8016904:	e79f      	b.n	8016846 <__multiply+0x5e>
	...

08016908 <__pow5mult>:
 8016908:	2303      	movs	r3, #3
 801690a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801690c:	4013      	ands	r3, r2
 801690e:	0005      	movs	r5, r0
 8016910:	000e      	movs	r6, r1
 8016912:	0014      	movs	r4, r2
 8016914:	2b00      	cmp	r3, #0
 8016916:	d008      	beq.n	801692a <__pow5mult+0x22>
 8016918:	4922      	ldr	r1, [pc, #136]	; (80169a4 <__pow5mult+0x9c>)
 801691a:	3b01      	subs	r3, #1
 801691c:	009a      	lsls	r2, r3, #2
 801691e:	5852      	ldr	r2, [r2, r1]
 8016920:	2300      	movs	r3, #0
 8016922:	0031      	movs	r1, r6
 8016924:	f7ff fe92 	bl	801664c <__multadd>
 8016928:	0006      	movs	r6, r0
 801692a:	10a3      	asrs	r3, r4, #2
 801692c:	9301      	str	r3, [sp, #4]
 801692e:	d036      	beq.n	801699e <__pow5mult+0x96>
 8016930:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8016932:	2c00      	cmp	r4, #0
 8016934:	d107      	bne.n	8016946 <__pow5mult+0x3e>
 8016936:	2010      	movs	r0, #16
 8016938:	f7fc fd16 	bl	8013368 <malloc>
 801693c:	6268      	str	r0, [r5, #36]	; 0x24
 801693e:	6044      	str	r4, [r0, #4]
 8016940:	6084      	str	r4, [r0, #8]
 8016942:	6004      	str	r4, [r0, #0]
 8016944:	60c4      	str	r4, [r0, #12]
 8016946:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8016948:	68bc      	ldr	r4, [r7, #8]
 801694a:	2c00      	cmp	r4, #0
 801694c:	d107      	bne.n	801695e <__pow5mult+0x56>
 801694e:	4916      	ldr	r1, [pc, #88]	; (80169a8 <__pow5mult+0xa0>)
 8016950:	0028      	movs	r0, r5
 8016952:	f7ff ff40 	bl	80167d6 <__i2b>
 8016956:	2300      	movs	r3, #0
 8016958:	0004      	movs	r4, r0
 801695a:	60b8      	str	r0, [r7, #8]
 801695c:	6003      	str	r3, [r0, #0]
 801695e:	2201      	movs	r2, #1
 8016960:	9b01      	ldr	r3, [sp, #4]
 8016962:	4213      	tst	r3, r2
 8016964:	d00a      	beq.n	801697c <__pow5mult+0x74>
 8016966:	0031      	movs	r1, r6
 8016968:	0022      	movs	r2, r4
 801696a:	0028      	movs	r0, r5
 801696c:	f7ff ff3c 	bl	80167e8 <__multiply>
 8016970:	0007      	movs	r7, r0
 8016972:	0031      	movs	r1, r6
 8016974:	0028      	movs	r0, r5
 8016976:	f7ff fe50 	bl	801661a <_Bfree>
 801697a:	003e      	movs	r6, r7
 801697c:	9b01      	ldr	r3, [sp, #4]
 801697e:	105b      	asrs	r3, r3, #1
 8016980:	9301      	str	r3, [sp, #4]
 8016982:	d00c      	beq.n	801699e <__pow5mult+0x96>
 8016984:	6820      	ldr	r0, [r4, #0]
 8016986:	2800      	cmp	r0, #0
 8016988:	d107      	bne.n	801699a <__pow5mult+0x92>
 801698a:	0022      	movs	r2, r4
 801698c:	0021      	movs	r1, r4
 801698e:	0028      	movs	r0, r5
 8016990:	f7ff ff2a 	bl	80167e8 <__multiply>
 8016994:	2300      	movs	r3, #0
 8016996:	6020      	str	r0, [r4, #0]
 8016998:	6003      	str	r3, [r0, #0]
 801699a:	0004      	movs	r4, r0
 801699c:	e7df      	b.n	801695e <__pow5mult+0x56>
 801699e:	0030      	movs	r0, r6
 80169a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80169a2:	46c0      	nop			; (mov r8, r8)
 80169a4:	0801a7a8 	.word	0x0801a7a8
 80169a8:	00000271 	.word	0x00000271

080169ac <__lshift>:
 80169ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169ae:	000d      	movs	r5, r1
 80169b0:	0017      	movs	r7, r2
 80169b2:	692b      	ldr	r3, [r5, #16]
 80169b4:	1154      	asrs	r4, r2, #5
 80169b6:	b085      	sub	sp, #20
 80169b8:	18e3      	adds	r3, r4, r3
 80169ba:	9301      	str	r3, [sp, #4]
 80169bc:	3301      	adds	r3, #1
 80169be:	9300      	str	r3, [sp, #0]
 80169c0:	6849      	ldr	r1, [r1, #4]
 80169c2:	68ab      	ldr	r3, [r5, #8]
 80169c4:	9002      	str	r0, [sp, #8]
 80169c6:	9a00      	ldr	r2, [sp, #0]
 80169c8:	4293      	cmp	r3, r2
 80169ca:	db35      	blt.n	8016a38 <__lshift+0x8c>
 80169cc:	9802      	ldr	r0, [sp, #8]
 80169ce:	f7ff fdec 	bl	80165aa <_Balloc>
 80169d2:	2300      	movs	r3, #0
 80169d4:	0002      	movs	r2, r0
 80169d6:	0006      	movs	r6, r0
 80169d8:	0019      	movs	r1, r3
 80169da:	3214      	adds	r2, #20
 80169dc:	42a3      	cmp	r3, r4
 80169de:	db2e      	blt.n	8016a3e <__lshift+0x92>
 80169e0:	43e3      	mvns	r3, r4
 80169e2:	17db      	asrs	r3, r3, #31
 80169e4:	401c      	ands	r4, r3
 80169e6:	002b      	movs	r3, r5
 80169e8:	00a4      	lsls	r4, r4, #2
 80169ea:	1914      	adds	r4, r2, r4
 80169ec:	692a      	ldr	r2, [r5, #16]
 80169ee:	3314      	adds	r3, #20
 80169f0:	0092      	lsls	r2, r2, #2
 80169f2:	189a      	adds	r2, r3, r2
 80169f4:	4694      	mov	ip, r2
 80169f6:	221f      	movs	r2, #31
 80169f8:	4017      	ands	r7, r2
 80169fa:	d024      	beq.n	8016a46 <__lshift+0x9a>
 80169fc:	3201      	adds	r2, #1
 80169fe:	1bd2      	subs	r2, r2, r7
 8016a00:	9203      	str	r2, [sp, #12]
 8016a02:	2200      	movs	r2, #0
 8016a04:	6819      	ldr	r1, [r3, #0]
 8016a06:	0020      	movs	r0, r4
 8016a08:	40b9      	lsls	r1, r7
 8016a0a:	430a      	orrs	r2, r1
 8016a0c:	c404      	stmia	r4!, {r2}
 8016a0e:	cb04      	ldmia	r3!, {r2}
 8016a10:	9903      	ldr	r1, [sp, #12]
 8016a12:	40ca      	lsrs	r2, r1
 8016a14:	459c      	cmp	ip, r3
 8016a16:	d8f5      	bhi.n	8016a04 <__lshift+0x58>
 8016a18:	6042      	str	r2, [r0, #4]
 8016a1a:	2a00      	cmp	r2, #0
 8016a1c:	d002      	beq.n	8016a24 <__lshift+0x78>
 8016a1e:	9b01      	ldr	r3, [sp, #4]
 8016a20:	3302      	adds	r3, #2
 8016a22:	9300      	str	r3, [sp, #0]
 8016a24:	9b00      	ldr	r3, [sp, #0]
 8016a26:	9802      	ldr	r0, [sp, #8]
 8016a28:	3b01      	subs	r3, #1
 8016a2a:	6133      	str	r3, [r6, #16]
 8016a2c:	0029      	movs	r1, r5
 8016a2e:	f7ff fdf4 	bl	801661a <_Bfree>
 8016a32:	0030      	movs	r0, r6
 8016a34:	b005      	add	sp, #20
 8016a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a38:	3101      	adds	r1, #1
 8016a3a:	005b      	lsls	r3, r3, #1
 8016a3c:	e7c3      	b.n	80169c6 <__lshift+0x1a>
 8016a3e:	0098      	lsls	r0, r3, #2
 8016a40:	5011      	str	r1, [r2, r0]
 8016a42:	3301      	adds	r3, #1
 8016a44:	e7ca      	b.n	80169dc <__lshift+0x30>
 8016a46:	cb04      	ldmia	r3!, {r2}
 8016a48:	c404      	stmia	r4!, {r2}
 8016a4a:	459c      	cmp	ip, r3
 8016a4c:	d8fb      	bhi.n	8016a46 <__lshift+0x9a>
 8016a4e:	e7e9      	b.n	8016a24 <__lshift+0x78>

08016a50 <__mcmp>:
 8016a50:	690a      	ldr	r2, [r1, #16]
 8016a52:	6903      	ldr	r3, [r0, #16]
 8016a54:	b530      	push	{r4, r5, lr}
 8016a56:	1a9b      	subs	r3, r3, r2
 8016a58:	d10d      	bne.n	8016a76 <__mcmp+0x26>
 8016a5a:	0092      	lsls	r2, r2, #2
 8016a5c:	3014      	adds	r0, #20
 8016a5e:	3114      	adds	r1, #20
 8016a60:	1884      	adds	r4, r0, r2
 8016a62:	1889      	adds	r1, r1, r2
 8016a64:	3c04      	subs	r4, #4
 8016a66:	3904      	subs	r1, #4
 8016a68:	6825      	ldr	r5, [r4, #0]
 8016a6a:	680a      	ldr	r2, [r1, #0]
 8016a6c:	4295      	cmp	r5, r2
 8016a6e:	d004      	beq.n	8016a7a <__mcmp+0x2a>
 8016a70:	2301      	movs	r3, #1
 8016a72:	4295      	cmp	r5, r2
 8016a74:	d304      	bcc.n	8016a80 <__mcmp+0x30>
 8016a76:	0018      	movs	r0, r3
 8016a78:	bd30      	pop	{r4, r5, pc}
 8016a7a:	42a0      	cmp	r0, r4
 8016a7c:	d3f2      	bcc.n	8016a64 <__mcmp+0x14>
 8016a7e:	e7fa      	b.n	8016a76 <__mcmp+0x26>
 8016a80:	425b      	negs	r3, r3
 8016a82:	e7f8      	b.n	8016a76 <__mcmp+0x26>

08016a84 <__mdiff>:
 8016a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a86:	000d      	movs	r5, r1
 8016a88:	b085      	sub	sp, #20
 8016a8a:	0007      	movs	r7, r0
 8016a8c:	0011      	movs	r1, r2
 8016a8e:	0028      	movs	r0, r5
 8016a90:	0014      	movs	r4, r2
 8016a92:	f7ff ffdd 	bl	8016a50 <__mcmp>
 8016a96:	1e06      	subs	r6, r0, #0
 8016a98:	d108      	bne.n	8016aac <__mdiff+0x28>
 8016a9a:	0001      	movs	r1, r0
 8016a9c:	0038      	movs	r0, r7
 8016a9e:	f7ff fd84 	bl	80165aa <_Balloc>
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	6146      	str	r6, [r0, #20]
 8016aa6:	6103      	str	r3, [r0, #16]
 8016aa8:	b005      	add	sp, #20
 8016aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016aac:	2301      	movs	r3, #1
 8016aae:	9301      	str	r3, [sp, #4]
 8016ab0:	2800      	cmp	r0, #0
 8016ab2:	db04      	blt.n	8016abe <__mdiff+0x3a>
 8016ab4:	0023      	movs	r3, r4
 8016ab6:	002c      	movs	r4, r5
 8016ab8:	001d      	movs	r5, r3
 8016aba:	2300      	movs	r3, #0
 8016abc:	9301      	str	r3, [sp, #4]
 8016abe:	6861      	ldr	r1, [r4, #4]
 8016ac0:	0038      	movs	r0, r7
 8016ac2:	f7ff fd72 	bl	80165aa <_Balloc>
 8016ac6:	002f      	movs	r7, r5
 8016ac8:	2200      	movs	r2, #0
 8016aca:	9b01      	ldr	r3, [sp, #4]
 8016acc:	6926      	ldr	r6, [r4, #16]
 8016ace:	60c3      	str	r3, [r0, #12]
 8016ad0:	3414      	adds	r4, #20
 8016ad2:	00b3      	lsls	r3, r6, #2
 8016ad4:	18e3      	adds	r3, r4, r3
 8016ad6:	9302      	str	r3, [sp, #8]
 8016ad8:	692b      	ldr	r3, [r5, #16]
 8016ada:	3714      	adds	r7, #20
 8016adc:	009b      	lsls	r3, r3, #2
 8016ade:	18fb      	adds	r3, r7, r3
 8016ae0:	9303      	str	r3, [sp, #12]
 8016ae2:	0003      	movs	r3, r0
 8016ae4:	4694      	mov	ip, r2
 8016ae6:	3314      	adds	r3, #20
 8016ae8:	cc20      	ldmia	r4!, {r5}
 8016aea:	cf04      	ldmia	r7!, {r2}
 8016aec:	9201      	str	r2, [sp, #4]
 8016aee:	b2aa      	uxth	r2, r5
 8016af0:	4494      	add	ip, r2
 8016af2:	466a      	mov	r2, sp
 8016af4:	4661      	mov	r1, ip
 8016af6:	8892      	ldrh	r2, [r2, #4]
 8016af8:	0c2d      	lsrs	r5, r5, #16
 8016afa:	1a8a      	subs	r2, r1, r2
 8016afc:	9901      	ldr	r1, [sp, #4]
 8016afe:	0c09      	lsrs	r1, r1, #16
 8016b00:	1a69      	subs	r1, r5, r1
 8016b02:	1415      	asrs	r5, r2, #16
 8016b04:	1949      	adds	r1, r1, r5
 8016b06:	140d      	asrs	r5, r1, #16
 8016b08:	b292      	uxth	r2, r2
 8016b0a:	0409      	lsls	r1, r1, #16
 8016b0c:	430a      	orrs	r2, r1
 8016b0e:	601a      	str	r2, [r3, #0]
 8016b10:	9a03      	ldr	r2, [sp, #12]
 8016b12:	46ac      	mov	ip, r5
 8016b14:	3304      	adds	r3, #4
 8016b16:	42ba      	cmp	r2, r7
 8016b18:	d8e6      	bhi.n	8016ae8 <__mdiff+0x64>
 8016b1a:	9902      	ldr	r1, [sp, #8]
 8016b1c:	001a      	movs	r2, r3
 8016b1e:	428c      	cmp	r4, r1
 8016b20:	d305      	bcc.n	8016b2e <__mdiff+0xaa>
 8016b22:	3a04      	subs	r2, #4
 8016b24:	6813      	ldr	r3, [r2, #0]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d00e      	beq.n	8016b48 <__mdiff+0xc4>
 8016b2a:	6106      	str	r6, [r0, #16]
 8016b2c:	e7bc      	b.n	8016aa8 <__mdiff+0x24>
 8016b2e:	cc04      	ldmia	r4!, {r2}
 8016b30:	b291      	uxth	r1, r2
 8016b32:	4461      	add	r1, ip
 8016b34:	140d      	asrs	r5, r1, #16
 8016b36:	0c12      	lsrs	r2, r2, #16
 8016b38:	1952      	adds	r2, r2, r5
 8016b3a:	1415      	asrs	r5, r2, #16
 8016b3c:	b289      	uxth	r1, r1
 8016b3e:	0412      	lsls	r2, r2, #16
 8016b40:	430a      	orrs	r2, r1
 8016b42:	46ac      	mov	ip, r5
 8016b44:	c304      	stmia	r3!, {r2}
 8016b46:	e7e8      	b.n	8016b1a <__mdiff+0x96>
 8016b48:	3e01      	subs	r6, #1
 8016b4a:	e7ea      	b.n	8016b22 <__mdiff+0x9e>

08016b4c <__ulp>:
 8016b4c:	000b      	movs	r3, r1
 8016b4e:	4910      	ldr	r1, [pc, #64]	; (8016b90 <__ulp+0x44>)
 8016b50:	b510      	push	{r4, lr}
 8016b52:	4019      	ands	r1, r3
 8016b54:	4b0f      	ldr	r3, [pc, #60]	; (8016b94 <__ulp+0x48>)
 8016b56:	18c9      	adds	r1, r1, r3
 8016b58:	2900      	cmp	r1, #0
 8016b5a:	dd04      	ble.n	8016b66 <__ulp+0x1a>
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	000b      	movs	r3, r1
 8016b60:	0010      	movs	r0, r2
 8016b62:	0019      	movs	r1, r3
 8016b64:	bd10      	pop	{r4, pc}
 8016b66:	4249      	negs	r1, r1
 8016b68:	1509      	asrs	r1, r1, #20
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	2913      	cmp	r1, #19
 8016b70:	dc04      	bgt.n	8016b7c <__ulp+0x30>
 8016b72:	2080      	movs	r0, #128	; 0x80
 8016b74:	0300      	lsls	r0, r0, #12
 8016b76:	4108      	asrs	r0, r1
 8016b78:	0003      	movs	r3, r0
 8016b7a:	e7f1      	b.n	8016b60 <__ulp+0x14>
 8016b7c:	3914      	subs	r1, #20
 8016b7e:	2001      	movs	r0, #1
 8016b80:	291e      	cmp	r1, #30
 8016b82:	dc02      	bgt.n	8016b8a <__ulp+0x3e>
 8016b84:	241f      	movs	r4, #31
 8016b86:	1a61      	subs	r1, r4, r1
 8016b88:	4088      	lsls	r0, r1
 8016b8a:	0002      	movs	r2, r0
 8016b8c:	e7e8      	b.n	8016b60 <__ulp+0x14>
 8016b8e:	46c0      	nop			; (mov r8, r8)
 8016b90:	7ff00000 	.word	0x7ff00000
 8016b94:	fcc00000 	.word	0xfcc00000

08016b98 <__b2d>:
 8016b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b9a:	0006      	movs	r6, r0
 8016b9c:	6903      	ldr	r3, [r0, #16]
 8016b9e:	3614      	adds	r6, #20
 8016ba0:	009b      	lsls	r3, r3, #2
 8016ba2:	18f3      	adds	r3, r6, r3
 8016ba4:	1f1d      	subs	r5, r3, #4
 8016ba6:	682c      	ldr	r4, [r5, #0]
 8016ba8:	000f      	movs	r7, r1
 8016baa:	0020      	movs	r0, r4
 8016bac:	9301      	str	r3, [sp, #4]
 8016bae:	f7ff fdc9 	bl	8016744 <__hi0bits>
 8016bb2:	2320      	movs	r3, #32
 8016bb4:	1a1b      	subs	r3, r3, r0
 8016bb6:	603b      	str	r3, [r7, #0]
 8016bb8:	491c      	ldr	r1, [pc, #112]	; (8016c2c <__b2d+0x94>)
 8016bba:	280a      	cmp	r0, #10
 8016bbc:	dc16      	bgt.n	8016bec <__b2d+0x54>
 8016bbe:	230b      	movs	r3, #11
 8016bc0:	0027      	movs	r7, r4
 8016bc2:	1a1b      	subs	r3, r3, r0
 8016bc4:	40df      	lsrs	r7, r3
 8016bc6:	4339      	orrs	r1, r7
 8016bc8:	469c      	mov	ip, r3
 8016bca:	000b      	movs	r3, r1
 8016bcc:	2100      	movs	r1, #0
 8016bce:	42ae      	cmp	r6, r5
 8016bd0:	d202      	bcs.n	8016bd8 <__b2d+0x40>
 8016bd2:	9901      	ldr	r1, [sp, #4]
 8016bd4:	3908      	subs	r1, #8
 8016bd6:	6809      	ldr	r1, [r1, #0]
 8016bd8:	3015      	adds	r0, #21
 8016bda:	4084      	lsls	r4, r0
 8016bdc:	4660      	mov	r0, ip
 8016bde:	40c1      	lsrs	r1, r0
 8016be0:	430c      	orrs	r4, r1
 8016be2:	0022      	movs	r2, r4
 8016be4:	0010      	movs	r0, r2
 8016be6:	0019      	movs	r1, r3
 8016be8:	b003      	add	sp, #12
 8016bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bec:	2700      	movs	r7, #0
 8016bee:	42ae      	cmp	r6, r5
 8016bf0:	d202      	bcs.n	8016bf8 <__b2d+0x60>
 8016bf2:	9d01      	ldr	r5, [sp, #4]
 8016bf4:	3d08      	subs	r5, #8
 8016bf6:	682f      	ldr	r7, [r5, #0]
 8016bf8:	380b      	subs	r0, #11
 8016bfa:	4684      	mov	ip, r0
 8016bfc:	1e03      	subs	r3, r0, #0
 8016bfe:	d012      	beq.n	8016c26 <__b2d+0x8e>
 8016c00:	409c      	lsls	r4, r3
 8016c02:	2020      	movs	r0, #32
 8016c04:	4321      	orrs	r1, r4
 8016c06:	003c      	movs	r4, r7
 8016c08:	1ac0      	subs	r0, r0, r3
 8016c0a:	40c4      	lsrs	r4, r0
 8016c0c:	4321      	orrs	r1, r4
 8016c0e:	000b      	movs	r3, r1
 8016c10:	2100      	movs	r1, #0
 8016c12:	42b5      	cmp	r5, r6
 8016c14:	d901      	bls.n	8016c1a <__b2d+0x82>
 8016c16:	3d04      	subs	r5, #4
 8016c18:	6829      	ldr	r1, [r5, #0]
 8016c1a:	4664      	mov	r4, ip
 8016c1c:	40c1      	lsrs	r1, r0
 8016c1e:	40a7      	lsls	r7, r4
 8016c20:	430f      	orrs	r7, r1
 8016c22:	003a      	movs	r2, r7
 8016c24:	e7de      	b.n	8016be4 <__b2d+0x4c>
 8016c26:	4321      	orrs	r1, r4
 8016c28:	000b      	movs	r3, r1
 8016c2a:	e7fa      	b.n	8016c22 <__b2d+0x8a>
 8016c2c:	3ff00000 	.word	0x3ff00000

08016c30 <__d2b>:
 8016c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c32:	001d      	movs	r5, r3
 8016c34:	2101      	movs	r1, #1
 8016c36:	0014      	movs	r4, r2
 8016c38:	9f08      	ldr	r7, [sp, #32]
 8016c3a:	f7ff fcb6 	bl	80165aa <_Balloc>
 8016c3e:	032b      	lsls	r3, r5, #12
 8016c40:	006d      	lsls	r5, r5, #1
 8016c42:	0006      	movs	r6, r0
 8016c44:	0b1b      	lsrs	r3, r3, #12
 8016c46:	0d6d      	lsrs	r5, r5, #21
 8016c48:	d124      	bne.n	8016c94 <__d2b+0x64>
 8016c4a:	9301      	str	r3, [sp, #4]
 8016c4c:	2c00      	cmp	r4, #0
 8016c4e:	d027      	beq.n	8016ca0 <__d2b+0x70>
 8016c50:	4668      	mov	r0, sp
 8016c52:	9400      	str	r4, [sp, #0]
 8016c54:	f7ff fd90 	bl	8016778 <__lo0bits>
 8016c58:	9c00      	ldr	r4, [sp, #0]
 8016c5a:	2800      	cmp	r0, #0
 8016c5c:	d01e      	beq.n	8016c9c <__d2b+0x6c>
 8016c5e:	9b01      	ldr	r3, [sp, #4]
 8016c60:	2120      	movs	r1, #32
 8016c62:	001a      	movs	r2, r3
 8016c64:	1a09      	subs	r1, r1, r0
 8016c66:	408a      	lsls	r2, r1
 8016c68:	40c3      	lsrs	r3, r0
 8016c6a:	4322      	orrs	r2, r4
 8016c6c:	6172      	str	r2, [r6, #20]
 8016c6e:	9301      	str	r3, [sp, #4]
 8016c70:	9c01      	ldr	r4, [sp, #4]
 8016c72:	61b4      	str	r4, [r6, #24]
 8016c74:	1e63      	subs	r3, r4, #1
 8016c76:	419c      	sbcs	r4, r3
 8016c78:	3401      	adds	r4, #1
 8016c7a:	6134      	str	r4, [r6, #16]
 8016c7c:	2d00      	cmp	r5, #0
 8016c7e:	d018      	beq.n	8016cb2 <__d2b+0x82>
 8016c80:	4b12      	ldr	r3, [pc, #72]	; (8016ccc <__d2b+0x9c>)
 8016c82:	18ed      	adds	r5, r5, r3
 8016c84:	2335      	movs	r3, #53	; 0x35
 8016c86:	182d      	adds	r5, r5, r0
 8016c88:	603d      	str	r5, [r7, #0]
 8016c8a:	1a18      	subs	r0, r3, r0
 8016c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c8e:	6018      	str	r0, [r3, #0]
 8016c90:	0030      	movs	r0, r6
 8016c92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016c94:	2280      	movs	r2, #128	; 0x80
 8016c96:	0352      	lsls	r2, r2, #13
 8016c98:	4313      	orrs	r3, r2
 8016c9a:	e7d6      	b.n	8016c4a <__d2b+0x1a>
 8016c9c:	6174      	str	r4, [r6, #20]
 8016c9e:	e7e7      	b.n	8016c70 <__d2b+0x40>
 8016ca0:	a801      	add	r0, sp, #4
 8016ca2:	f7ff fd69 	bl	8016778 <__lo0bits>
 8016ca6:	2401      	movs	r4, #1
 8016ca8:	9b01      	ldr	r3, [sp, #4]
 8016caa:	6134      	str	r4, [r6, #16]
 8016cac:	6173      	str	r3, [r6, #20]
 8016cae:	3020      	adds	r0, #32
 8016cb0:	e7e4      	b.n	8016c7c <__d2b+0x4c>
 8016cb2:	4b07      	ldr	r3, [pc, #28]	; (8016cd0 <__d2b+0xa0>)
 8016cb4:	18c0      	adds	r0, r0, r3
 8016cb6:	4b07      	ldr	r3, [pc, #28]	; (8016cd4 <__d2b+0xa4>)
 8016cb8:	6038      	str	r0, [r7, #0]
 8016cba:	18e3      	adds	r3, r4, r3
 8016cbc:	009b      	lsls	r3, r3, #2
 8016cbe:	18f3      	adds	r3, r6, r3
 8016cc0:	6958      	ldr	r0, [r3, #20]
 8016cc2:	f7ff fd3f 	bl	8016744 <__hi0bits>
 8016cc6:	0164      	lsls	r4, r4, #5
 8016cc8:	1a20      	subs	r0, r4, r0
 8016cca:	e7df      	b.n	8016c8c <__d2b+0x5c>
 8016ccc:	fffffbcd 	.word	0xfffffbcd
 8016cd0:	fffffbce 	.word	0xfffffbce
 8016cd4:	3fffffff 	.word	0x3fffffff

08016cd8 <__ratio>:
 8016cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cda:	b085      	sub	sp, #20
 8016cdc:	000f      	movs	r7, r1
 8016cde:	a902      	add	r1, sp, #8
 8016ce0:	0006      	movs	r6, r0
 8016ce2:	f7ff ff59 	bl	8016b98 <__b2d>
 8016ce6:	0004      	movs	r4, r0
 8016ce8:	000d      	movs	r5, r1
 8016cea:	0038      	movs	r0, r7
 8016cec:	a903      	add	r1, sp, #12
 8016cee:	9400      	str	r4, [sp, #0]
 8016cf0:	9501      	str	r5, [sp, #4]
 8016cf2:	f7ff ff51 	bl	8016b98 <__b2d>
 8016cf6:	6936      	ldr	r6, [r6, #16]
 8016cf8:	693f      	ldr	r7, [r7, #16]
 8016cfa:	0002      	movs	r2, r0
 8016cfc:	1bf7      	subs	r7, r6, r7
 8016cfe:	017e      	lsls	r6, r7, #5
 8016d00:	46b4      	mov	ip, r6
 8016d02:	9f03      	ldr	r7, [sp, #12]
 8016d04:	9e02      	ldr	r6, [sp, #8]
 8016d06:	000b      	movs	r3, r1
 8016d08:	1bf6      	subs	r6, r6, r7
 8016d0a:	4466      	add	r6, ip
 8016d0c:	0537      	lsls	r7, r6, #20
 8016d0e:	2e00      	cmp	r6, #0
 8016d10:	dd07      	ble.n	8016d22 <__ratio+0x4a>
 8016d12:	1979      	adds	r1, r7, r5
 8016d14:	9101      	str	r1, [sp, #4]
 8016d16:	9800      	ldr	r0, [sp, #0]
 8016d18:	9901      	ldr	r1, [sp, #4]
 8016d1a:	f7ea f871 	bl	8000e00 <__aeabi_ddiv>
 8016d1e:	b005      	add	sp, #20
 8016d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d22:	1bcb      	subs	r3, r1, r7
 8016d24:	e7f7      	b.n	8016d16 <__ratio+0x3e>

08016d26 <__copybits>:
 8016d26:	0013      	movs	r3, r2
 8016d28:	3901      	subs	r1, #1
 8016d2a:	b510      	push	{r4, lr}
 8016d2c:	1149      	asrs	r1, r1, #5
 8016d2e:	6912      	ldr	r2, [r2, #16]
 8016d30:	3101      	adds	r1, #1
 8016d32:	0089      	lsls	r1, r1, #2
 8016d34:	3314      	adds	r3, #20
 8016d36:	0092      	lsls	r2, r2, #2
 8016d38:	1841      	adds	r1, r0, r1
 8016d3a:	189a      	adds	r2, r3, r2
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	d803      	bhi.n	8016d48 <__copybits+0x22>
 8016d40:	2300      	movs	r3, #0
 8016d42:	4281      	cmp	r1, r0
 8016d44:	d803      	bhi.n	8016d4e <__copybits+0x28>
 8016d46:	bd10      	pop	{r4, pc}
 8016d48:	cb10      	ldmia	r3!, {r4}
 8016d4a:	c010      	stmia	r0!, {r4}
 8016d4c:	e7f6      	b.n	8016d3c <__copybits+0x16>
 8016d4e:	c008      	stmia	r0!, {r3}
 8016d50:	e7f7      	b.n	8016d42 <__copybits+0x1c>

08016d52 <__any_on>:
 8016d52:	0002      	movs	r2, r0
 8016d54:	6900      	ldr	r0, [r0, #16]
 8016d56:	b510      	push	{r4, lr}
 8016d58:	3214      	adds	r2, #20
 8016d5a:	114b      	asrs	r3, r1, #5
 8016d5c:	4298      	cmp	r0, r3
 8016d5e:	db12      	blt.n	8016d86 <__any_on+0x34>
 8016d60:	dd0b      	ble.n	8016d7a <__any_on+0x28>
 8016d62:	201f      	movs	r0, #31
 8016d64:	4001      	ands	r1, r0
 8016d66:	d008      	beq.n	8016d7a <__any_on+0x28>
 8016d68:	0098      	lsls	r0, r3, #2
 8016d6a:	5884      	ldr	r4, [r0, r2]
 8016d6c:	0020      	movs	r0, r4
 8016d6e:	40c8      	lsrs	r0, r1
 8016d70:	4088      	lsls	r0, r1
 8016d72:	0001      	movs	r1, r0
 8016d74:	2001      	movs	r0, #1
 8016d76:	428c      	cmp	r4, r1
 8016d78:	d104      	bne.n	8016d84 <__any_on+0x32>
 8016d7a:	009b      	lsls	r3, r3, #2
 8016d7c:	18d3      	adds	r3, r2, r3
 8016d7e:	4293      	cmp	r3, r2
 8016d80:	d803      	bhi.n	8016d8a <__any_on+0x38>
 8016d82:	2000      	movs	r0, #0
 8016d84:	bd10      	pop	{r4, pc}
 8016d86:	0003      	movs	r3, r0
 8016d88:	e7f7      	b.n	8016d7a <__any_on+0x28>
 8016d8a:	3b04      	subs	r3, #4
 8016d8c:	6819      	ldr	r1, [r3, #0]
 8016d8e:	2900      	cmp	r1, #0
 8016d90:	d0f5      	beq.n	8016d7e <__any_on+0x2c>
 8016d92:	2001      	movs	r0, #1
 8016d94:	e7f6      	b.n	8016d84 <__any_on+0x32>

08016d96 <_calloc_r>:
 8016d96:	434a      	muls	r2, r1
 8016d98:	b570      	push	{r4, r5, r6, lr}
 8016d9a:	0011      	movs	r1, r2
 8016d9c:	0014      	movs	r4, r2
 8016d9e:	f7fc fb73 	bl	8013488 <_malloc_r>
 8016da2:	1e05      	subs	r5, r0, #0
 8016da4:	d003      	beq.n	8016dae <_calloc_r+0x18>
 8016da6:	0022      	movs	r2, r4
 8016da8:	2100      	movs	r1, #0
 8016daa:	f7fc fb1b 	bl	80133e4 <memset>
 8016dae:	0028      	movs	r0, r5
 8016db0:	bd70      	pop	{r4, r5, r6, pc}

08016db2 <_realloc_r>:
 8016db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016db4:	0007      	movs	r7, r0
 8016db6:	000d      	movs	r5, r1
 8016db8:	0016      	movs	r6, r2
 8016dba:	2900      	cmp	r1, #0
 8016dbc:	d105      	bne.n	8016dca <_realloc_r+0x18>
 8016dbe:	0011      	movs	r1, r2
 8016dc0:	f7fc fb62 	bl	8013488 <_malloc_r>
 8016dc4:	0004      	movs	r4, r0
 8016dc6:	0020      	movs	r0, r4
 8016dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dca:	2a00      	cmp	r2, #0
 8016dcc:	d103      	bne.n	8016dd6 <_realloc_r+0x24>
 8016dce:	f7fc fb11 	bl	80133f4 <_free_r>
 8016dd2:	0034      	movs	r4, r6
 8016dd4:	e7f7      	b.n	8016dc6 <_realloc_r+0x14>
 8016dd6:	f000 f986 	bl	80170e6 <_malloc_usable_size_r>
 8016dda:	002c      	movs	r4, r5
 8016ddc:	42b0      	cmp	r0, r6
 8016dde:	d2f2      	bcs.n	8016dc6 <_realloc_r+0x14>
 8016de0:	0031      	movs	r1, r6
 8016de2:	0038      	movs	r0, r7
 8016de4:	f7fc fb50 	bl	8013488 <_malloc_r>
 8016de8:	1e04      	subs	r4, r0, #0
 8016dea:	d0ec      	beq.n	8016dc6 <_realloc_r+0x14>
 8016dec:	0029      	movs	r1, r5
 8016dee:	0032      	movs	r2, r6
 8016df0:	f7fc faef 	bl	80133d2 <memcpy>
 8016df4:	0029      	movs	r1, r5
 8016df6:	0038      	movs	r0, r7
 8016df8:	f7fc fafc 	bl	80133f4 <_free_r>
 8016dfc:	e7e3      	b.n	8016dc6 <_realloc_r+0x14>
	...

08016e00 <__ssputs_r>:
 8016e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e02:	688e      	ldr	r6, [r1, #8]
 8016e04:	b085      	sub	sp, #20
 8016e06:	0007      	movs	r7, r0
 8016e08:	000c      	movs	r4, r1
 8016e0a:	9203      	str	r2, [sp, #12]
 8016e0c:	9301      	str	r3, [sp, #4]
 8016e0e:	429e      	cmp	r6, r3
 8016e10:	d83c      	bhi.n	8016e8c <__ssputs_r+0x8c>
 8016e12:	2390      	movs	r3, #144	; 0x90
 8016e14:	898a      	ldrh	r2, [r1, #12]
 8016e16:	00db      	lsls	r3, r3, #3
 8016e18:	421a      	tst	r2, r3
 8016e1a:	d034      	beq.n	8016e86 <__ssputs_r+0x86>
 8016e1c:	2503      	movs	r5, #3
 8016e1e:	6909      	ldr	r1, [r1, #16]
 8016e20:	6823      	ldr	r3, [r4, #0]
 8016e22:	1a5b      	subs	r3, r3, r1
 8016e24:	9302      	str	r3, [sp, #8]
 8016e26:	6963      	ldr	r3, [r4, #20]
 8016e28:	9802      	ldr	r0, [sp, #8]
 8016e2a:	435d      	muls	r5, r3
 8016e2c:	0feb      	lsrs	r3, r5, #31
 8016e2e:	195d      	adds	r5, r3, r5
 8016e30:	9b01      	ldr	r3, [sp, #4]
 8016e32:	106d      	asrs	r5, r5, #1
 8016e34:	3301      	adds	r3, #1
 8016e36:	181b      	adds	r3, r3, r0
 8016e38:	42ab      	cmp	r3, r5
 8016e3a:	d900      	bls.n	8016e3e <__ssputs_r+0x3e>
 8016e3c:	001d      	movs	r5, r3
 8016e3e:	0553      	lsls	r3, r2, #21
 8016e40:	d532      	bpl.n	8016ea8 <__ssputs_r+0xa8>
 8016e42:	0029      	movs	r1, r5
 8016e44:	0038      	movs	r0, r7
 8016e46:	f7fc fb1f 	bl	8013488 <_malloc_r>
 8016e4a:	1e06      	subs	r6, r0, #0
 8016e4c:	d109      	bne.n	8016e62 <__ssputs_r+0x62>
 8016e4e:	230c      	movs	r3, #12
 8016e50:	603b      	str	r3, [r7, #0]
 8016e52:	2340      	movs	r3, #64	; 0x40
 8016e54:	2001      	movs	r0, #1
 8016e56:	89a2      	ldrh	r2, [r4, #12]
 8016e58:	4240      	negs	r0, r0
 8016e5a:	4313      	orrs	r3, r2
 8016e5c:	81a3      	strh	r3, [r4, #12]
 8016e5e:	b005      	add	sp, #20
 8016e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e62:	9a02      	ldr	r2, [sp, #8]
 8016e64:	6921      	ldr	r1, [r4, #16]
 8016e66:	f7fc fab4 	bl	80133d2 <memcpy>
 8016e6a:	89a3      	ldrh	r3, [r4, #12]
 8016e6c:	4a14      	ldr	r2, [pc, #80]	; (8016ec0 <__ssputs_r+0xc0>)
 8016e6e:	401a      	ands	r2, r3
 8016e70:	2380      	movs	r3, #128	; 0x80
 8016e72:	4313      	orrs	r3, r2
 8016e74:	81a3      	strh	r3, [r4, #12]
 8016e76:	9b02      	ldr	r3, [sp, #8]
 8016e78:	6126      	str	r6, [r4, #16]
 8016e7a:	18f6      	adds	r6, r6, r3
 8016e7c:	6026      	str	r6, [r4, #0]
 8016e7e:	6165      	str	r5, [r4, #20]
 8016e80:	9e01      	ldr	r6, [sp, #4]
 8016e82:	1aed      	subs	r5, r5, r3
 8016e84:	60a5      	str	r5, [r4, #8]
 8016e86:	9b01      	ldr	r3, [sp, #4]
 8016e88:	429e      	cmp	r6, r3
 8016e8a:	d900      	bls.n	8016e8e <__ssputs_r+0x8e>
 8016e8c:	9e01      	ldr	r6, [sp, #4]
 8016e8e:	0032      	movs	r2, r6
 8016e90:	9903      	ldr	r1, [sp, #12]
 8016e92:	6820      	ldr	r0, [r4, #0]
 8016e94:	f000 f914 	bl	80170c0 <memmove>
 8016e98:	68a3      	ldr	r3, [r4, #8]
 8016e9a:	2000      	movs	r0, #0
 8016e9c:	1b9b      	subs	r3, r3, r6
 8016e9e:	60a3      	str	r3, [r4, #8]
 8016ea0:	6823      	ldr	r3, [r4, #0]
 8016ea2:	199e      	adds	r6, r3, r6
 8016ea4:	6026      	str	r6, [r4, #0]
 8016ea6:	e7da      	b.n	8016e5e <__ssputs_r+0x5e>
 8016ea8:	002a      	movs	r2, r5
 8016eaa:	0038      	movs	r0, r7
 8016eac:	f7ff ff81 	bl	8016db2 <_realloc_r>
 8016eb0:	1e06      	subs	r6, r0, #0
 8016eb2:	d1e0      	bne.n	8016e76 <__ssputs_r+0x76>
 8016eb4:	6921      	ldr	r1, [r4, #16]
 8016eb6:	0038      	movs	r0, r7
 8016eb8:	f7fc fa9c 	bl	80133f4 <_free_r>
 8016ebc:	e7c7      	b.n	8016e4e <__ssputs_r+0x4e>
 8016ebe:	46c0      	nop			; (mov r8, r8)
 8016ec0:	fffffb7f 	.word	0xfffffb7f

08016ec4 <_svfiprintf_r>:
 8016ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ec6:	b0a1      	sub	sp, #132	; 0x84
 8016ec8:	9003      	str	r0, [sp, #12]
 8016eca:	001d      	movs	r5, r3
 8016ecc:	898b      	ldrh	r3, [r1, #12]
 8016ece:	000f      	movs	r7, r1
 8016ed0:	0016      	movs	r6, r2
 8016ed2:	061b      	lsls	r3, r3, #24
 8016ed4:	d511      	bpl.n	8016efa <_svfiprintf_r+0x36>
 8016ed6:	690b      	ldr	r3, [r1, #16]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d10e      	bne.n	8016efa <_svfiprintf_r+0x36>
 8016edc:	2140      	movs	r1, #64	; 0x40
 8016ede:	f7fc fad3 	bl	8013488 <_malloc_r>
 8016ee2:	6038      	str	r0, [r7, #0]
 8016ee4:	6138      	str	r0, [r7, #16]
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d105      	bne.n	8016ef6 <_svfiprintf_r+0x32>
 8016eea:	230c      	movs	r3, #12
 8016eec:	9a03      	ldr	r2, [sp, #12]
 8016eee:	3801      	subs	r0, #1
 8016ef0:	6013      	str	r3, [r2, #0]
 8016ef2:	b021      	add	sp, #132	; 0x84
 8016ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ef6:	2340      	movs	r3, #64	; 0x40
 8016ef8:	617b      	str	r3, [r7, #20]
 8016efa:	2300      	movs	r3, #0
 8016efc:	ac08      	add	r4, sp, #32
 8016efe:	6163      	str	r3, [r4, #20]
 8016f00:	3320      	adds	r3, #32
 8016f02:	7663      	strb	r3, [r4, #25]
 8016f04:	3310      	adds	r3, #16
 8016f06:	76a3      	strb	r3, [r4, #26]
 8016f08:	9507      	str	r5, [sp, #28]
 8016f0a:	0035      	movs	r5, r6
 8016f0c:	782b      	ldrb	r3, [r5, #0]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d001      	beq.n	8016f16 <_svfiprintf_r+0x52>
 8016f12:	2b25      	cmp	r3, #37	; 0x25
 8016f14:	d146      	bne.n	8016fa4 <_svfiprintf_r+0xe0>
 8016f16:	1bab      	subs	r3, r5, r6
 8016f18:	9305      	str	r3, [sp, #20]
 8016f1a:	d00c      	beq.n	8016f36 <_svfiprintf_r+0x72>
 8016f1c:	0032      	movs	r2, r6
 8016f1e:	0039      	movs	r1, r7
 8016f20:	9803      	ldr	r0, [sp, #12]
 8016f22:	f7ff ff6d 	bl	8016e00 <__ssputs_r>
 8016f26:	1c43      	adds	r3, r0, #1
 8016f28:	d100      	bne.n	8016f2c <_svfiprintf_r+0x68>
 8016f2a:	e0ae      	b.n	801708a <_svfiprintf_r+0x1c6>
 8016f2c:	6962      	ldr	r2, [r4, #20]
 8016f2e:	9b05      	ldr	r3, [sp, #20]
 8016f30:	4694      	mov	ip, r2
 8016f32:	4463      	add	r3, ip
 8016f34:	6163      	str	r3, [r4, #20]
 8016f36:	782b      	ldrb	r3, [r5, #0]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d100      	bne.n	8016f3e <_svfiprintf_r+0x7a>
 8016f3c:	e0a5      	b.n	801708a <_svfiprintf_r+0x1c6>
 8016f3e:	2201      	movs	r2, #1
 8016f40:	2300      	movs	r3, #0
 8016f42:	4252      	negs	r2, r2
 8016f44:	6062      	str	r2, [r4, #4]
 8016f46:	a904      	add	r1, sp, #16
 8016f48:	3254      	adds	r2, #84	; 0x54
 8016f4a:	1852      	adds	r2, r2, r1
 8016f4c:	1c6e      	adds	r6, r5, #1
 8016f4e:	6023      	str	r3, [r4, #0]
 8016f50:	60e3      	str	r3, [r4, #12]
 8016f52:	60a3      	str	r3, [r4, #8]
 8016f54:	7013      	strb	r3, [r2, #0]
 8016f56:	65a3      	str	r3, [r4, #88]	; 0x58
 8016f58:	7831      	ldrb	r1, [r6, #0]
 8016f5a:	2205      	movs	r2, #5
 8016f5c:	4853      	ldr	r0, [pc, #332]	; (80170ac <_svfiprintf_r+0x1e8>)
 8016f5e:	f7ff fb17 	bl	8016590 <memchr>
 8016f62:	1c75      	adds	r5, r6, #1
 8016f64:	2800      	cmp	r0, #0
 8016f66:	d11f      	bne.n	8016fa8 <_svfiprintf_r+0xe4>
 8016f68:	6822      	ldr	r2, [r4, #0]
 8016f6a:	06d3      	lsls	r3, r2, #27
 8016f6c:	d504      	bpl.n	8016f78 <_svfiprintf_r+0xb4>
 8016f6e:	2353      	movs	r3, #83	; 0x53
 8016f70:	a904      	add	r1, sp, #16
 8016f72:	185b      	adds	r3, r3, r1
 8016f74:	2120      	movs	r1, #32
 8016f76:	7019      	strb	r1, [r3, #0]
 8016f78:	0713      	lsls	r3, r2, #28
 8016f7a:	d504      	bpl.n	8016f86 <_svfiprintf_r+0xc2>
 8016f7c:	2353      	movs	r3, #83	; 0x53
 8016f7e:	a904      	add	r1, sp, #16
 8016f80:	185b      	adds	r3, r3, r1
 8016f82:	212b      	movs	r1, #43	; 0x2b
 8016f84:	7019      	strb	r1, [r3, #0]
 8016f86:	7833      	ldrb	r3, [r6, #0]
 8016f88:	2b2a      	cmp	r3, #42	; 0x2a
 8016f8a:	d016      	beq.n	8016fba <_svfiprintf_r+0xf6>
 8016f8c:	0035      	movs	r5, r6
 8016f8e:	2100      	movs	r1, #0
 8016f90:	200a      	movs	r0, #10
 8016f92:	68e3      	ldr	r3, [r4, #12]
 8016f94:	782a      	ldrb	r2, [r5, #0]
 8016f96:	1c6e      	adds	r6, r5, #1
 8016f98:	3a30      	subs	r2, #48	; 0x30
 8016f9a:	2a09      	cmp	r2, #9
 8016f9c:	d94e      	bls.n	801703c <_svfiprintf_r+0x178>
 8016f9e:	2900      	cmp	r1, #0
 8016fa0:	d018      	beq.n	8016fd4 <_svfiprintf_r+0x110>
 8016fa2:	e010      	b.n	8016fc6 <_svfiprintf_r+0x102>
 8016fa4:	3501      	adds	r5, #1
 8016fa6:	e7b1      	b.n	8016f0c <_svfiprintf_r+0x48>
 8016fa8:	4b40      	ldr	r3, [pc, #256]	; (80170ac <_svfiprintf_r+0x1e8>)
 8016faa:	6822      	ldr	r2, [r4, #0]
 8016fac:	1ac0      	subs	r0, r0, r3
 8016fae:	2301      	movs	r3, #1
 8016fb0:	4083      	lsls	r3, r0
 8016fb2:	4313      	orrs	r3, r2
 8016fb4:	6023      	str	r3, [r4, #0]
 8016fb6:	002e      	movs	r6, r5
 8016fb8:	e7ce      	b.n	8016f58 <_svfiprintf_r+0x94>
 8016fba:	9b07      	ldr	r3, [sp, #28]
 8016fbc:	1d19      	adds	r1, r3, #4
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	9107      	str	r1, [sp, #28]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	db01      	blt.n	8016fca <_svfiprintf_r+0x106>
 8016fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fc8:	e004      	b.n	8016fd4 <_svfiprintf_r+0x110>
 8016fca:	425b      	negs	r3, r3
 8016fcc:	60e3      	str	r3, [r4, #12]
 8016fce:	2302      	movs	r3, #2
 8016fd0:	4313      	orrs	r3, r2
 8016fd2:	6023      	str	r3, [r4, #0]
 8016fd4:	782b      	ldrb	r3, [r5, #0]
 8016fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8016fd8:	d10a      	bne.n	8016ff0 <_svfiprintf_r+0x12c>
 8016fda:	786b      	ldrb	r3, [r5, #1]
 8016fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8016fde:	d135      	bne.n	801704c <_svfiprintf_r+0x188>
 8016fe0:	9b07      	ldr	r3, [sp, #28]
 8016fe2:	3502      	adds	r5, #2
 8016fe4:	1d1a      	adds	r2, r3, #4
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	9207      	str	r2, [sp, #28]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	db2b      	blt.n	8017046 <_svfiprintf_r+0x182>
 8016fee:	9309      	str	r3, [sp, #36]	; 0x24
 8016ff0:	4e2f      	ldr	r6, [pc, #188]	; (80170b0 <_svfiprintf_r+0x1ec>)
 8016ff2:	7829      	ldrb	r1, [r5, #0]
 8016ff4:	2203      	movs	r2, #3
 8016ff6:	0030      	movs	r0, r6
 8016ff8:	f7ff faca 	bl	8016590 <memchr>
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	d006      	beq.n	801700e <_svfiprintf_r+0x14a>
 8017000:	2340      	movs	r3, #64	; 0x40
 8017002:	1b80      	subs	r0, r0, r6
 8017004:	4083      	lsls	r3, r0
 8017006:	6822      	ldr	r2, [r4, #0]
 8017008:	3501      	adds	r5, #1
 801700a:	4313      	orrs	r3, r2
 801700c:	6023      	str	r3, [r4, #0]
 801700e:	7829      	ldrb	r1, [r5, #0]
 8017010:	2206      	movs	r2, #6
 8017012:	4828      	ldr	r0, [pc, #160]	; (80170b4 <_svfiprintf_r+0x1f0>)
 8017014:	1c6e      	adds	r6, r5, #1
 8017016:	7621      	strb	r1, [r4, #24]
 8017018:	f7ff faba 	bl	8016590 <memchr>
 801701c:	2800      	cmp	r0, #0
 801701e:	d03c      	beq.n	801709a <_svfiprintf_r+0x1d6>
 8017020:	4b25      	ldr	r3, [pc, #148]	; (80170b8 <_svfiprintf_r+0x1f4>)
 8017022:	2b00      	cmp	r3, #0
 8017024:	d125      	bne.n	8017072 <_svfiprintf_r+0x1ae>
 8017026:	2207      	movs	r2, #7
 8017028:	9b07      	ldr	r3, [sp, #28]
 801702a:	3307      	adds	r3, #7
 801702c:	4393      	bics	r3, r2
 801702e:	3308      	adds	r3, #8
 8017030:	9307      	str	r3, [sp, #28]
 8017032:	6963      	ldr	r3, [r4, #20]
 8017034:	9a04      	ldr	r2, [sp, #16]
 8017036:	189b      	adds	r3, r3, r2
 8017038:	6163      	str	r3, [r4, #20]
 801703a:	e766      	b.n	8016f0a <_svfiprintf_r+0x46>
 801703c:	4343      	muls	r3, r0
 801703e:	2101      	movs	r1, #1
 8017040:	189b      	adds	r3, r3, r2
 8017042:	0035      	movs	r5, r6
 8017044:	e7a6      	b.n	8016f94 <_svfiprintf_r+0xd0>
 8017046:	2301      	movs	r3, #1
 8017048:	425b      	negs	r3, r3
 801704a:	e7d0      	b.n	8016fee <_svfiprintf_r+0x12a>
 801704c:	2300      	movs	r3, #0
 801704e:	200a      	movs	r0, #10
 8017050:	001a      	movs	r2, r3
 8017052:	3501      	adds	r5, #1
 8017054:	6063      	str	r3, [r4, #4]
 8017056:	7829      	ldrb	r1, [r5, #0]
 8017058:	1c6e      	adds	r6, r5, #1
 801705a:	3930      	subs	r1, #48	; 0x30
 801705c:	2909      	cmp	r1, #9
 801705e:	d903      	bls.n	8017068 <_svfiprintf_r+0x1a4>
 8017060:	2b00      	cmp	r3, #0
 8017062:	d0c5      	beq.n	8016ff0 <_svfiprintf_r+0x12c>
 8017064:	9209      	str	r2, [sp, #36]	; 0x24
 8017066:	e7c3      	b.n	8016ff0 <_svfiprintf_r+0x12c>
 8017068:	4342      	muls	r2, r0
 801706a:	2301      	movs	r3, #1
 801706c:	1852      	adds	r2, r2, r1
 801706e:	0035      	movs	r5, r6
 8017070:	e7f1      	b.n	8017056 <_svfiprintf_r+0x192>
 8017072:	ab07      	add	r3, sp, #28
 8017074:	9300      	str	r3, [sp, #0]
 8017076:	003a      	movs	r2, r7
 8017078:	4b10      	ldr	r3, [pc, #64]	; (80170bc <_svfiprintf_r+0x1f8>)
 801707a:	0021      	movs	r1, r4
 801707c:	9803      	ldr	r0, [sp, #12]
 801707e:	f7fc fafd 	bl	801367c <_printf_float>
 8017082:	9004      	str	r0, [sp, #16]
 8017084:	9b04      	ldr	r3, [sp, #16]
 8017086:	3301      	adds	r3, #1
 8017088:	d1d3      	bne.n	8017032 <_svfiprintf_r+0x16e>
 801708a:	89bb      	ldrh	r3, [r7, #12]
 801708c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801708e:	065b      	lsls	r3, r3, #25
 8017090:	d400      	bmi.n	8017094 <_svfiprintf_r+0x1d0>
 8017092:	e72e      	b.n	8016ef2 <_svfiprintf_r+0x2e>
 8017094:	2001      	movs	r0, #1
 8017096:	4240      	negs	r0, r0
 8017098:	e72b      	b.n	8016ef2 <_svfiprintf_r+0x2e>
 801709a:	ab07      	add	r3, sp, #28
 801709c:	9300      	str	r3, [sp, #0]
 801709e:	003a      	movs	r2, r7
 80170a0:	4b06      	ldr	r3, [pc, #24]	; (80170bc <_svfiprintf_r+0x1f8>)
 80170a2:	0021      	movs	r1, r4
 80170a4:	9803      	ldr	r0, [sp, #12]
 80170a6:	f7fc fda3 	bl	8013bf0 <_printf_i>
 80170aa:	e7ea      	b.n	8017082 <_svfiprintf_r+0x1be>
 80170ac:	0801a7b4 	.word	0x0801a7b4
 80170b0:	0801a7ba 	.word	0x0801a7ba
 80170b4:	0801a7be 	.word	0x0801a7be
 80170b8:	0801367d 	.word	0x0801367d
 80170bc:	08016e01 	.word	0x08016e01

080170c0 <memmove>:
 80170c0:	b510      	push	{r4, lr}
 80170c2:	4288      	cmp	r0, r1
 80170c4:	d902      	bls.n	80170cc <memmove+0xc>
 80170c6:	188b      	adds	r3, r1, r2
 80170c8:	4298      	cmp	r0, r3
 80170ca:	d303      	bcc.n	80170d4 <memmove+0x14>
 80170cc:	2300      	movs	r3, #0
 80170ce:	e007      	b.n	80170e0 <memmove+0x20>
 80170d0:	5c8b      	ldrb	r3, [r1, r2]
 80170d2:	5483      	strb	r3, [r0, r2]
 80170d4:	3a01      	subs	r2, #1
 80170d6:	d2fb      	bcs.n	80170d0 <memmove+0x10>
 80170d8:	bd10      	pop	{r4, pc}
 80170da:	5ccc      	ldrb	r4, [r1, r3]
 80170dc:	54c4      	strb	r4, [r0, r3]
 80170de:	3301      	adds	r3, #1
 80170e0:	429a      	cmp	r2, r3
 80170e2:	d1fa      	bne.n	80170da <memmove+0x1a>
 80170e4:	e7f8      	b.n	80170d8 <memmove+0x18>

080170e6 <_malloc_usable_size_r>:
 80170e6:	1f0b      	subs	r3, r1, #4
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	1f18      	subs	r0, r3, #4
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	da01      	bge.n	80170f4 <_malloc_usable_size_r+0xe>
 80170f0:	580b      	ldr	r3, [r1, r0]
 80170f2:	18c0      	adds	r0, r0, r3
 80170f4:	4770      	bx	lr
	...

080170f8 <_sbrk>:
 80170f8:	4b05      	ldr	r3, [pc, #20]	; (8017110 <_sbrk+0x18>)
 80170fa:	0002      	movs	r2, r0
 80170fc:	6819      	ldr	r1, [r3, #0]
 80170fe:	2900      	cmp	r1, #0
 8017100:	d101      	bne.n	8017106 <_sbrk+0xe>
 8017102:	4904      	ldr	r1, [pc, #16]	; (8017114 <_sbrk+0x1c>)
 8017104:	6019      	str	r1, [r3, #0]
 8017106:	6818      	ldr	r0, [r3, #0]
 8017108:	1882      	adds	r2, r0, r2
 801710a:	601a      	str	r2, [r3, #0]
 801710c:	4770      	bx	lr
 801710e:	46c0      	nop			; (mov r8, r8)
 8017110:	200060c8 	.word	0x200060c8
 8017114:	20006670 	.word	0x20006670

08017118 <_init>:
 8017118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801711a:	46c0      	nop			; (mov r8, r8)
 801711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801711e:	bc08      	pop	{r3}
 8017120:	469e      	mov	lr, r3
 8017122:	4770      	bx	lr

08017124 <_fini>:
 8017124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017126:	46c0      	nop			; (mov r8, r8)
 8017128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801712a:	bc08      	pop	{r3}
 801712c:	469e      	mov	lr, r3
 801712e:	4770      	bx	lr
