
H10R4x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000182a8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003920  08018368  08018368  00028368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bc88  0801bc88  000302b4  2**0
                  CONTENTS
  4 .ARM          00000000  0801bc88  0801bc88  000302b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801bc88  0801bc88  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bc88  0801bc88  0002bc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bc8c  0801bc8c  0002bc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  0801bc90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063b0  200002b8  0801bf44  000302b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006668  0801bf44  00036668  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005c0d1  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008c55  00000000  00000000  0008c3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e389  00000000  00000000  00095002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db0  00000000  00000000  000b3390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f08  00000000  00000000  000b5140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca1f  00000000  00000000  000b7048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003bf5e  00000000  00000000  000d3a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084876  00000000  00000000  0010f9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019423b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b74  00000000  00000000  00194290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0019ae04  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0019aed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200002b8 	.word	0x200002b8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801834c 	.word	0x0801834c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200002bc 	.word	0x200002bc
 8000100:	0801834c 	.word	0x0801834c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 f909 	bl	8001664 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f853 	bl	8001508 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f8fb 	bl	8001664 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f8f1 	bl	8001664 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f875 	bl	8001580 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 f86b 	bl	8001580 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f949 	bl	8000758 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f8cd 	bl	8000670 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f93b 	bl	8000758 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f931 	bl	8000758 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f8db 	bl	80006c0 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f8d1 	bl	80006c0 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ulcmp>:
 800052c:	4299      	cmp	r1, r3
 800052e:	d101      	bne.n	8000534 <__aeabi_ulcmp+0x8>
 8000530:	1a80      	subs	r0, r0, r2
 8000532:	d004      	beq.n	800053e <__aeabi_ulcmp+0x12>
 8000534:	d202      	bcs.n	800053c <__aeabi_ulcmp+0x10>
 8000536:	2001      	movs	r0, #1
 8000538:	4240      	negs	r0, r0
 800053a:	4770      	bx	lr
 800053c:	2001      	movs	r0, #1
 800053e:	4770      	bx	lr

08000540 <__aeabi_lmul>:
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	0415      	lsls	r5, r2, #16
 8000544:	0c2d      	lsrs	r5, r5, #16
 8000546:	000f      	movs	r7, r1
 8000548:	0001      	movs	r1, r0
 800054a:	002e      	movs	r6, r5
 800054c:	46c6      	mov	lr, r8
 800054e:	4684      	mov	ip, r0
 8000550:	0400      	lsls	r0, r0, #16
 8000552:	0c14      	lsrs	r4, r2, #16
 8000554:	0c00      	lsrs	r0, r0, #16
 8000556:	0c09      	lsrs	r1, r1, #16
 8000558:	4346      	muls	r6, r0
 800055a:	434d      	muls	r5, r1
 800055c:	4360      	muls	r0, r4
 800055e:	4361      	muls	r1, r4
 8000560:	1940      	adds	r0, r0, r5
 8000562:	0c34      	lsrs	r4, r6, #16
 8000564:	1824      	adds	r4, r4, r0
 8000566:	b500      	push	{lr}
 8000568:	42a5      	cmp	r5, r4
 800056a:	d903      	bls.n	8000574 <__aeabi_lmul+0x34>
 800056c:	2080      	movs	r0, #128	; 0x80
 800056e:	0240      	lsls	r0, r0, #9
 8000570:	4680      	mov	r8, r0
 8000572:	4441      	add	r1, r8
 8000574:	0c25      	lsrs	r5, r4, #16
 8000576:	186d      	adds	r5, r5, r1
 8000578:	4661      	mov	r1, ip
 800057a:	4359      	muls	r1, r3
 800057c:	437a      	muls	r2, r7
 800057e:	0430      	lsls	r0, r6, #16
 8000580:	1949      	adds	r1, r1, r5
 8000582:	0424      	lsls	r4, r4, #16
 8000584:	0c00      	lsrs	r0, r0, #16
 8000586:	1820      	adds	r0, r4, r0
 8000588:	1889      	adds	r1, r1, r2
 800058a:	bc80      	pop	{r7}
 800058c:	46b8      	mov	r8, r7
 800058e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000590 <__aeabi_d2uiz>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	2200      	movs	r2, #0
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <__aeabi_d2uiz+0x38>)
 8000596:	0004      	movs	r4, r0
 8000598:	000d      	movs	r5, r1
 800059a:	f7ff ff83 	bl	80004a4 <__aeabi_dcmpge>
 800059e:	2800      	cmp	r0, #0
 80005a0:	d104      	bne.n	80005ac <__aeabi_d2uiz+0x1c>
 80005a2:	0020      	movs	r0, r4
 80005a4:	0029      	movs	r1, r5
 80005a6:	f001 fee9 	bl	800237c <__aeabi_d2iz>
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <__aeabi_d2uiz+0x38>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0020      	movs	r0, r4
 80005b2:	0029      	movs	r1, r5
 80005b4:	f001 fb32 	bl	8001c1c <__aeabi_dsub>
 80005b8:	f001 fee0 	bl	800237c <__aeabi_d2iz>
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	469c      	mov	ip, r3
 80005c2:	4460      	add	r0, ip
 80005c4:	e7f1      	b.n	80005aa <__aeabi_d2uiz+0x1a>
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	41e00000 	.word	0x41e00000

080005cc <__aeabi_d2lz>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	0005      	movs	r5, r0
 80005d0:	000c      	movs	r4, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	0028      	movs	r0, r5
 80005d8:	0021      	movs	r1, r4
 80005da:	f7ff ff45 	bl	8000468 <__aeabi_dcmplt>
 80005de:	2800      	cmp	r0, #0
 80005e0:	d108      	bne.n	80005f4 <__aeabi_d2lz+0x28>
 80005e2:	0028      	movs	r0, r5
 80005e4:	0021      	movs	r1, r4
 80005e6:	f000 f80f 	bl	8000608 <__aeabi_d2ulz>
 80005ea:	0002      	movs	r2, r0
 80005ec:	000b      	movs	r3, r1
 80005ee:	0010      	movs	r0, r2
 80005f0:	0019      	movs	r1, r3
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	061b      	lsls	r3, r3, #24
 80005f8:	18e1      	adds	r1, r4, r3
 80005fa:	0028      	movs	r0, r5
 80005fc:	f000 f804 	bl	8000608 <__aeabi_d2ulz>
 8000600:	2300      	movs	r3, #0
 8000602:	4242      	negs	r2, r0
 8000604:	418b      	sbcs	r3, r1
 8000606:	e7f2      	b.n	80005ee <__aeabi_d2lz+0x22>

08000608 <__aeabi_d2ulz>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	2200      	movs	r2, #0
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <__aeabi_d2ulz+0x34>)
 800060e:	000d      	movs	r5, r1
 8000610:	0004      	movs	r4, r0
 8000612:	f001 f897 	bl	8001744 <__aeabi_dmul>
 8000616:	f7ff ffbb 	bl	8000590 <__aeabi_d2uiz>
 800061a:	0006      	movs	r6, r0
 800061c:	f001 ff14 	bl	8002448 <__aeabi_ui2d>
 8000620:	2200      	movs	r2, #0
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <__aeabi_d2ulz+0x38>)
 8000624:	f001 f88e 	bl	8001744 <__aeabi_dmul>
 8000628:	0002      	movs	r2, r0
 800062a:	000b      	movs	r3, r1
 800062c:	0020      	movs	r0, r4
 800062e:	0029      	movs	r1, r5
 8000630:	f001 faf4 	bl	8001c1c <__aeabi_dsub>
 8000634:	f7ff ffac 	bl	8000590 <__aeabi_d2uiz>
 8000638:	0031      	movs	r1, r6
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	3df00000 	.word	0x3df00000
 8000640:	41f00000 	.word	0x41f00000

08000644 <__aeabi_l2d>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	0006      	movs	r6, r0
 8000648:	0008      	movs	r0, r1
 800064a:	f001 fecd 	bl	80023e8 <__aeabi_i2d>
 800064e:	2200      	movs	r2, #0
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <__aeabi_l2d+0x28>)
 8000652:	f001 f877 	bl	8001744 <__aeabi_dmul>
 8000656:	000d      	movs	r5, r1
 8000658:	0004      	movs	r4, r0
 800065a:	0030      	movs	r0, r6
 800065c:	f001 fef4 	bl	8002448 <__aeabi_ui2d>
 8000660:	002b      	movs	r3, r5
 8000662:	0022      	movs	r2, r4
 8000664:	f000 f8fe 	bl	8000864 <__aeabi_dadd>
 8000668:	bd70      	pop	{r4, r5, r6, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	41f00000 	.word	0x41f00000

08000670 <__eqsf2>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	0042      	lsls	r2, r0, #1
 8000674:	024e      	lsls	r6, r1, #9
 8000676:	004c      	lsls	r4, r1, #1
 8000678:	0245      	lsls	r5, r0, #9
 800067a:	0a6d      	lsrs	r5, r5, #9
 800067c:	0e12      	lsrs	r2, r2, #24
 800067e:	0fc3      	lsrs	r3, r0, #31
 8000680:	0a76      	lsrs	r6, r6, #9
 8000682:	0e24      	lsrs	r4, r4, #24
 8000684:	0fc9      	lsrs	r1, r1, #31
 8000686:	2aff      	cmp	r2, #255	; 0xff
 8000688:	d00f      	beq.n	80006aa <__eqsf2+0x3a>
 800068a:	2cff      	cmp	r4, #255	; 0xff
 800068c:	d011      	beq.n	80006b2 <__eqsf2+0x42>
 800068e:	2001      	movs	r0, #1
 8000690:	42a2      	cmp	r2, r4
 8000692:	d000      	beq.n	8000696 <__eqsf2+0x26>
 8000694:	bd70      	pop	{r4, r5, r6, pc}
 8000696:	42b5      	cmp	r5, r6
 8000698:	d1fc      	bne.n	8000694 <__eqsf2+0x24>
 800069a:	428b      	cmp	r3, r1
 800069c:	d00d      	beq.n	80006ba <__eqsf2+0x4a>
 800069e:	2a00      	cmp	r2, #0
 80006a0:	d1f8      	bne.n	8000694 <__eqsf2+0x24>
 80006a2:	0028      	movs	r0, r5
 80006a4:	1e45      	subs	r5, r0, #1
 80006a6:	41a8      	sbcs	r0, r5
 80006a8:	e7f4      	b.n	8000694 <__eqsf2+0x24>
 80006aa:	2001      	movs	r0, #1
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d1f1      	bne.n	8000694 <__eqsf2+0x24>
 80006b0:	e7eb      	b.n	800068a <__eqsf2+0x1a>
 80006b2:	2001      	movs	r0, #1
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d1ed      	bne.n	8000694 <__eqsf2+0x24>
 80006b8:	e7e9      	b.n	800068e <__eqsf2+0x1e>
 80006ba:	2000      	movs	r0, #0
 80006bc:	e7ea      	b.n	8000694 <__eqsf2+0x24>
 80006be:	46c0      	nop			; (mov r8, r8)

080006c0 <__gesf2>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	0042      	lsls	r2, r0, #1
 80006c4:	0246      	lsls	r6, r0, #9
 80006c6:	024d      	lsls	r5, r1, #9
 80006c8:	004c      	lsls	r4, r1, #1
 80006ca:	0fc3      	lsrs	r3, r0, #31
 80006cc:	0a76      	lsrs	r6, r6, #9
 80006ce:	0e12      	lsrs	r2, r2, #24
 80006d0:	0a6d      	lsrs	r5, r5, #9
 80006d2:	0e24      	lsrs	r4, r4, #24
 80006d4:	0fc8      	lsrs	r0, r1, #31
 80006d6:	2aff      	cmp	r2, #255	; 0xff
 80006d8:	d01f      	beq.n	800071a <__gesf2+0x5a>
 80006da:	2cff      	cmp	r4, #255	; 0xff
 80006dc:	d010      	beq.n	8000700 <__gesf2+0x40>
 80006de:	2a00      	cmp	r2, #0
 80006e0:	d11f      	bne.n	8000722 <__gesf2+0x62>
 80006e2:	4271      	negs	r1, r6
 80006e4:	4171      	adcs	r1, r6
 80006e6:	2c00      	cmp	r4, #0
 80006e8:	d101      	bne.n	80006ee <__gesf2+0x2e>
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d01e      	beq.n	800072c <__gesf2+0x6c>
 80006ee:	2900      	cmp	r1, #0
 80006f0:	d10e      	bne.n	8000710 <__gesf2+0x50>
 80006f2:	4283      	cmp	r3, r0
 80006f4:	d01e      	beq.n	8000734 <__gesf2+0x74>
 80006f6:	2102      	movs	r1, #2
 80006f8:	1e58      	subs	r0, r3, #1
 80006fa:	4008      	ands	r0, r1
 80006fc:	3801      	subs	r0, #1
 80006fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000700:	2d00      	cmp	r5, #0
 8000702:	d126      	bne.n	8000752 <__gesf2+0x92>
 8000704:	2a00      	cmp	r2, #0
 8000706:	d1f4      	bne.n	80006f2 <__gesf2+0x32>
 8000708:	4271      	negs	r1, r6
 800070a:	4171      	adcs	r1, r6
 800070c:	2900      	cmp	r1, #0
 800070e:	d0f0      	beq.n	80006f2 <__gesf2+0x32>
 8000710:	2800      	cmp	r0, #0
 8000712:	d1f4      	bne.n	80006fe <__gesf2+0x3e>
 8000714:	2001      	movs	r0, #1
 8000716:	4240      	negs	r0, r0
 8000718:	e7f1      	b.n	80006fe <__gesf2+0x3e>
 800071a:	2e00      	cmp	r6, #0
 800071c:	d119      	bne.n	8000752 <__gesf2+0x92>
 800071e:	2cff      	cmp	r4, #255	; 0xff
 8000720:	d0ee      	beq.n	8000700 <__gesf2+0x40>
 8000722:	2c00      	cmp	r4, #0
 8000724:	d1e5      	bne.n	80006f2 <__gesf2+0x32>
 8000726:	2d00      	cmp	r5, #0
 8000728:	d1e3      	bne.n	80006f2 <__gesf2+0x32>
 800072a:	e7e4      	b.n	80006f6 <__gesf2+0x36>
 800072c:	2000      	movs	r0, #0
 800072e:	2e00      	cmp	r6, #0
 8000730:	d0e5      	beq.n	80006fe <__gesf2+0x3e>
 8000732:	e7e0      	b.n	80006f6 <__gesf2+0x36>
 8000734:	42a2      	cmp	r2, r4
 8000736:	dc05      	bgt.n	8000744 <__gesf2+0x84>
 8000738:	dbea      	blt.n	8000710 <__gesf2+0x50>
 800073a:	42ae      	cmp	r6, r5
 800073c:	d802      	bhi.n	8000744 <__gesf2+0x84>
 800073e:	d3e7      	bcc.n	8000710 <__gesf2+0x50>
 8000740:	2000      	movs	r0, #0
 8000742:	e7dc      	b.n	80006fe <__gesf2+0x3e>
 8000744:	4241      	negs	r1, r0
 8000746:	4141      	adcs	r1, r0
 8000748:	4248      	negs	r0, r1
 800074a:	2102      	movs	r1, #2
 800074c:	4008      	ands	r0, r1
 800074e:	3801      	subs	r0, #1
 8000750:	e7d5      	b.n	80006fe <__gesf2+0x3e>
 8000752:	2002      	movs	r0, #2
 8000754:	4240      	negs	r0, r0
 8000756:	e7d2      	b.n	80006fe <__gesf2+0x3e>

08000758 <__lesf2>:
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	0042      	lsls	r2, r0, #1
 800075c:	0246      	lsls	r6, r0, #9
 800075e:	024d      	lsls	r5, r1, #9
 8000760:	004c      	lsls	r4, r1, #1
 8000762:	0fc3      	lsrs	r3, r0, #31
 8000764:	0a76      	lsrs	r6, r6, #9
 8000766:	0e12      	lsrs	r2, r2, #24
 8000768:	0a6d      	lsrs	r5, r5, #9
 800076a:	0e24      	lsrs	r4, r4, #24
 800076c:	0fc8      	lsrs	r0, r1, #31
 800076e:	2aff      	cmp	r2, #255	; 0xff
 8000770:	d00d      	beq.n	800078e <__lesf2+0x36>
 8000772:	2cff      	cmp	r4, #255	; 0xff
 8000774:	d00f      	beq.n	8000796 <__lesf2+0x3e>
 8000776:	2a00      	cmp	r2, #0
 8000778:	d123      	bne.n	80007c2 <__lesf2+0x6a>
 800077a:	4271      	negs	r1, r6
 800077c:	4171      	adcs	r1, r6
 800077e:	2c00      	cmp	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__lesf2+0x4a>
 8000782:	2d00      	cmp	r5, #0
 8000784:	d10d      	bne.n	80007a2 <__lesf2+0x4a>
 8000786:	2000      	movs	r0, #0
 8000788:	2e00      	cmp	r6, #0
 800078a:	d014      	beq.n	80007b6 <__lesf2+0x5e>
 800078c:	e00d      	b.n	80007aa <__lesf2+0x52>
 800078e:	2e00      	cmp	r6, #0
 8000790:	d110      	bne.n	80007b4 <__lesf2+0x5c>
 8000792:	2cff      	cmp	r4, #255	; 0xff
 8000794:	d115      	bne.n	80007c2 <__lesf2+0x6a>
 8000796:	2d00      	cmp	r5, #0
 8000798:	d10c      	bne.n	80007b4 <__lesf2+0x5c>
 800079a:	2a00      	cmp	r2, #0
 800079c:	d103      	bne.n	80007a6 <__lesf2+0x4e>
 800079e:	4271      	negs	r1, r6
 80007a0:	4171      	adcs	r1, r6
 80007a2:	2900      	cmp	r1, #0
 80007a4:	d108      	bne.n	80007b8 <__lesf2+0x60>
 80007a6:	4283      	cmp	r3, r0
 80007a8:	d010      	beq.n	80007cc <__lesf2+0x74>
 80007aa:	2102      	movs	r1, #2
 80007ac:	1e58      	subs	r0, r3, #1
 80007ae:	4008      	ands	r0, r1
 80007b0:	3801      	subs	r0, #1
 80007b2:	e000      	b.n	80007b6 <__lesf2+0x5e>
 80007b4:	2002      	movs	r0, #2
 80007b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d1fc      	bne.n	80007b6 <__lesf2+0x5e>
 80007bc:	2001      	movs	r0, #1
 80007be:	4240      	negs	r0, r0
 80007c0:	e7f9      	b.n	80007b6 <__lesf2+0x5e>
 80007c2:	2c00      	cmp	r4, #0
 80007c4:	d1ef      	bne.n	80007a6 <__lesf2+0x4e>
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d1ed      	bne.n	80007a6 <__lesf2+0x4e>
 80007ca:	e7ee      	b.n	80007aa <__lesf2+0x52>
 80007cc:	42a2      	cmp	r2, r4
 80007ce:	dc05      	bgt.n	80007dc <__lesf2+0x84>
 80007d0:	dbf2      	blt.n	80007b8 <__lesf2+0x60>
 80007d2:	42ae      	cmp	r6, r5
 80007d4:	d802      	bhi.n	80007dc <__lesf2+0x84>
 80007d6:	d3ef      	bcc.n	80007b8 <__lesf2+0x60>
 80007d8:	2000      	movs	r0, #0
 80007da:	e7ec      	b.n	80007b6 <__lesf2+0x5e>
 80007dc:	4241      	negs	r1, r0
 80007de:	4141      	adcs	r1, r0
 80007e0:	4248      	negs	r0, r1
 80007e2:	2102      	movs	r1, #2
 80007e4:	4008      	ands	r0, r1
 80007e6:	3801      	subs	r0, #1
 80007e8:	e7e5      	b.n	80007b6 <__lesf2+0x5e>
 80007ea:	46c0      	nop			; (mov r8, r8)

080007ec <__aeabi_ui2f>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	1e05      	subs	r5, r0, #0
 80007f0:	d00e      	beq.n	8000810 <__aeabi_ui2f+0x24>
 80007f2:	f001 ff1f 	bl	8002634 <__clzsi2>
 80007f6:	239e      	movs	r3, #158	; 0x9e
 80007f8:	0004      	movs	r4, r0
 80007fa:	1a1b      	subs	r3, r3, r0
 80007fc:	2b96      	cmp	r3, #150	; 0x96
 80007fe:	dc0c      	bgt.n	800081a <__aeabi_ui2f+0x2e>
 8000800:	2808      	cmp	r0, #8
 8000802:	dd01      	ble.n	8000808 <__aeabi_ui2f+0x1c>
 8000804:	3c08      	subs	r4, #8
 8000806:	40a5      	lsls	r5, r4
 8000808:	026d      	lsls	r5, r5, #9
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	b2d8      	uxtb	r0, r3
 800080e:	e001      	b.n	8000814 <__aeabi_ui2f+0x28>
 8000810:	2000      	movs	r0, #0
 8000812:	2500      	movs	r5, #0
 8000814:	05c0      	lsls	r0, r0, #23
 8000816:	4328      	orrs	r0, r5
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	2b99      	cmp	r3, #153	; 0x99
 800081c:	dd09      	ble.n	8000832 <__aeabi_ui2f+0x46>
 800081e:	0002      	movs	r2, r0
 8000820:	0029      	movs	r1, r5
 8000822:	321b      	adds	r2, #27
 8000824:	4091      	lsls	r1, r2
 8000826:	1e4a      	subs	r2, r1, #1
 8000828:	4191      	sbcs	r1, r2
 800082a:	2205      	movs	r2, #5
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	40d5      	lsrs	r5, r2
 8000830:	430d      	orrs	r5, r1
 8000832:	2c05      	cmp	r4, #5
 8000834:	dd01      	ble.n	800083a <__aeabi_ui2f+0x4e>
 8000836:	1f62      	subs	r2, r4, #5
 8000838:	4095      	lsls	r5, r2
 800083a:	0029      	movs	r1, r5
 800083c:	4e08      	ldr	r6, [pc, #32]	; (8000860 <__aeabi_ui2f+0x74>)
 800083e:	4031      	ands	r1, r6
 8000840:	076a      	lsls	r2, r5, #29
 8000842:	d009      	beq.n	8000858 <__aeabi_ui2f+0x6c>
 8000844:	200f      	movs	r0, #15
 8000846:	4028      	ands	r0, r5
 8000848:	2804      	cmp	r0, #4
 800084a:	d005      	beq.n	8000858 <__aeabi_ui2f+0x6c>
 800084c:	3104      	adds	r1, #4
 800084e:	014a      	lsls	r2, r1, #5
 8000850:	d502      	bpl.n	8000858 <__aeabi_ui2f+0x6c>
 8000852:	239f      	movs	r3, #159	; 0x9f
 8000854:	4031      	ands	r1, r6
 8000856:	1b1b      	subs	r3, r3, r4
 8000858:	0189      	lsls	r1, r1, #6
 800085a:	0a4d      	lsrs	r5, r1, #9
 800085c:	b2d8      	uxtb	r0, r3
 800085e:	e7d9      	b.n	8000814 <__aeabi_ui2f+0x28>
 8000860:	fbffffff 	.word	0xfbffffff

08000864 <__aeabi_dadd>:
 8000864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000866:	464f      	mov	r7, r9
 8000868:	46d6      	mov	lr, sl
 800086a:	4646      	mov	r6, r8
 800086c:	000d      	movs	r5, r1
 800086e:	0001      	movs	r1, r0
 8000870:	0018      	movs	r0, r3
 8000872:	b5c0      	push	{r6, r7, lr}
 8000874:	0017      	movs	r7, r2
 8000876:	032b      	lsls	r3, r5, #12
 8000878:	0a5a      	lsrs	r2, r3, #9
 800087a:	0f4b      	lsrs	r3, r1, #29
 800087c:	4313      	orrs	r3, r2
 800087e:	00ca      	lsls	r2, r1, #3
 8000880:	4691      	mov	r9, r2
 8000882:	0302      	lsls	r2, r0, #12
 8000884:	006e      	lsls	r6, r5, #1
 8000886:	0041      	lsls	r1, r0, #1
 8000888:	0a52      	lsrs	r2, r2, #9
 800088a:	0fec      	lsrs	r4, r5, #31
 800088c:	0f7d      	lsrs	r5, r7, #29
 800088e:	4315      	orrs	r5, r2
 8000890:	0d76      	lsrs	r6, r6, #21
 8000892:	0d49      	lsrs	r1, r1, #21
 8000894:	0fc0      	lsrs	r0, r0, #31
 8000896:	4682      	mov	sl, r0
 8000898:	46ac      	mov	ip, r5
 800089a:	00ff      	lsls	r7, r7, #3
 800089c:	1a72      	subs	r2, r6, r1
 800089e:	4284      	cmp	r4, r0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x40>
 80008a2:	e098      	b.n	80009d6 <__aeabi_dadd+0x172>
 80008a4:	2a00      	cmp	r2, #0
 80008a6:	dc00      	bgt.n	80008aa <__aeabi_dadd+0x46>
 80008a8:	e081      	b.n	80009ae <__aeabi_dadd+0x14a>
 80008aa:	2900      	cmp	r1, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x4c>
 80008ae:	e0b6      	b.n	8000a1e <__aeabi_dadd+0x1ba>
 80008b0:	49c9      	ldr	r1, [pc, #804]	; (8000bd8 <__aeabi_dadd+0x374>)
 80008b2:	428e      	cmp	r6, r1
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x54>
 80008b6:	e172      	b.n	8000b9e <__aeabi_dadd+0x33a>
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0028      	movs	r0, r5
 80008bc:	0409      	lsls	r1, r1, #16
 80008be:	4308      	orrs	r0, r1
 80008c0:	4684      	mov	ip, r0
 80008c2:	2a38      	cmp	r2, #56	; 0x38
 80008c4:	dd00      	ble.n	80008c8 <__aeabi_dadd+0x64>
 80008c6:	e15e      	b.n	8000b86 <__aeabi_dadd+0x322>
 80008c8:	2a1f      	cmp	r2, #31
 80008ca:	dd00      	ble.n	80008ce <__aeabi_dadd+0x6a>
 80008cc:	e1ee      	b.n	8000cac <__aeabi_dadd+0x448>
 80008ce:	2020      	movs	r0, #32
 80008d0:	0039      	movs	r1, r7
 80008d2:	4665      	mov	r5, ip
 80008d4:	1a80      	subs	r0, r0, r2
 80008d6:	4087      	lsls	r7, r0
 80008d8:	40d1      	lsrs	r1, r2
 80008da:	4085      	lsls	r5, r0
 80008dc:	430d      	orrs	r5, r1
 80008de:	0039      	movs	r1, r7
 80008e0:	1e4f      	subs	r7, r1, #1
 80008e2:	41b9      	sbcs	r1, r7
 80008e4:	4667      	mov	r7, ip
 80008e6:	40d7      	lsrs	r7, r2
 80008e8:	4329      	orrs	r1, r5
 80008ea:	1bdb      	subs	r3, r3, r7
 80008ec:	464a      	mov	r2, r9
 80008ee:	1a55      	subs	r5, r2, r1
 80008f0:	45a9      	cmp	r9, r5
 80008f2:	4189      	sbcs	r1, r1
 80008f4:	4249      	negs	r1, r1
 80008f6:	1a5b      	subs	r3, r3, r1
 80008f8:	4698      	mov	r8, r3
 80008fa:	4643      	mov	r3, r8
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	d400      	bmi.n	8000902 <__aeabi_dadd+0x9e>
 8000900:	e0cc      	b.n	8000a9c <__aeabi_dadd+0x238>
 8000902:	4643      	mov	r3, r8
 8000904:	025b      	lsls	r3, r3, #9
 8000906:	0a5b      	lsrs	r3, r3, #9
 8000908:	4698      	mov	r8, r3
 800090a:	4643      	mov	r3, r8
 800090c:	2b00      	cmp	r3, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0xae>
 8000910:	e12c      	b.n	8000b6c <__aeabi_dadd+0x308>
 8000912:	4640      	mov	r0, r8
 8000914:	f001 fe8e 	bl	8002634 <__clzsi2>
 8000918:	0001      	movs	r1, r0
 800091a:	3908      	subs	r1, #8
 800091c:	2220      	movs	r2, #32
 800091e:	0028      	movs	r0, r5
 8000920:	4643      	mov	r3, r8
 8000922:	1a52      	subs	r2, r2, r1
 8000924:	408b      	lsls	r3, r1
 8000926:	40d0      	lsrs	r0, r2
 8000928:	408d      	lsls	r5, r1
 800092a:	4303      	orrs	r3, r0
 800092c:	428e      	cmp	r6, r1
 800092e:	dd00      	ble.n	8000932 <__aeabi_dadd+0xce>
 8000930:	e117      	b.n	8000b62 <__aeabi_dadd+0x2fe>
 8000932:	1b8e      	subs	r6, r1, r6
 8000934:	1c72      	adds	r2, r6, #1
 8000936:	2a1f      	cmp	r2, #31
 8000938:	dd00      	ble.n	800093c <__aeabi_dadd+0xd8>
 800093a:	e1a7      	b.n	8000c8c <__aeabi_dadd+0x428>
 800093c:	2120      	movs	r1, #32
 800093e:	0018      	movs	r0, r3
 8000940:	002e      	movs	r6, r5
 8000942:	1a89      	subs	r1, r1, r2
 8000944:	408d      	lsls	r5, r1
 8000946:	4088      	lsls	r0, r1
 8000948:	40d6      	lsrs	r6, r2
 800094a:	40d3      	lsrs	r3, r2
 800094c:	1e69      	subs	r1, r5, #1
 800094e:	418d      	sbcs	r5, r1
 8000950:	4330      	orrs	r0, r6
 8000952:	4698      	mov	r8, r3
 8000954:	2600      	movs	r6, #0
 8000956:	4305      	orrs	r5, r0
 8000958:	076b      	lsls	r3, r5, #29
 800095a:	d009      	beq.n	8000970 <__aeabi_dadd+0x10c>
 800095c:	230f      	movs	r3, #15
 800095e:	402b      	ands	r3, r5
 8000960:	2b04      	cmp	r3, #4
 8000962:	d005      	beq.n	8000970 <__aeabi_dadd+0x10c>
 8000964:	1d2b      	adds	r3, r5, #4
 8000966:	42ab      	cmp	r3, r5
 8000968:	41ad      	sbcs	r5, r5
 800096a:	426d      	negs	r5, r5
 800096c:	44a8      	add	r8, r5
 800096e:	001d      	movs	r5, r3
 8000970:	4643      	mov	r3, r8
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	d400      	bmi.n	8000978 <__aeabi_dadd+0x114>
 8000976:	e094      	b.n	8000aa2 <__aeabi_dadd+0x23e>
 8000978:	4b97      	ldr	r3, [pc, #604]	; (8000bd8 <__aeabi_dadd+0x374>)
 800097a:	1c72      	adds	r2, r6, #1
 800097c:	429a      	cmp	r2, r3
 800097e:	d100      	bne.n	8000982 <__aeabi_dadd+0x11e>
 8000980:	e09d      	b.n	8000abe <__aeabi_dadd+0x25a>
 8000982:	4641      	mov	r1, r8
 8000984:	4b95      	ldr	r3, [pc, #596]	; (8000bdc <__aeabi_dadd+0x378>)
 8000986:	08ed      	lsrs	r5, r5, #3
 8000988:	4019      	ands	r1, r3
 800098a:	000b      	movs	r3, r1
 800098c:	0552      	lsls	r2, r2, #21
 800098e:	0749      	lsls	r1, r1, #29
 8000990:	025b      	lsls	r3, r3, #9
 8000992:	4329      	orrs	r1, r5
 8000994:	0b1b      	lsrs	r3, r3, #12
 8000996:	0d52      	lsrs	r2, r2, #21
 8000998:	0512      	lsls	r2, r2, #20
 800099a:	4313      	orrs	r3, r2
 800099c:	07e4      	lsls	r4, r4, #31
 800099e:	4323      	orrs	r3, r4
 80009a0:	0008      	movs	r0, r1
 80009a2:	0019      	movs	r1, r3
 80009a4:	bce0      	pop	{r5, r6, r7}
 80009a6:	46ba      	mov	sl, r7
 80009a8:	46b1      	mov	r9, r6
 80009aa:	46a8      	mov	r8, r5
 80009ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d043      	beq.n	8000a3a <__aeabi_dadd+0x1d6>
 80009b2:	1b8a      	subs	r2, r1, r6
 80009b4:	2e00      	cmp	r6, #0
 80009b6:	d000      	beq.n	80009ba <__aeabi_dadd+0x156>
 80009b8:	e12a      	b.n	8000c10 <__aeabi_dadd+0x3ac>
 80009ba:	464c      	mov	r4, r9
 80009bc:	431c      	orrs	r4, r3
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x15e>
 80009c0:	e1d1      	b.n	8000d66 <__aeabi_dadd+0x502>
 80009c2:	1e54      	subs	r4, r2, #1
 80009c4:	2a01      	cmp	r2, #1
 80009c6:	d100      	bne.n	80009ca <__aeabi_dadd+0x166>
 80009c8:	e21f      	b.n	8000e0a <__aeabi_dadd+0x5a6>
 80009ca:	4d83      	ldr	r5, [pc, #524]	; (8000bd8 <__aeabi_dadd+0x374>)
 80009cc:	42aa      	cmp	r2, r5
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x16e>
 80009d0:	e272      	b.n	8000eb8 <__aeabi_dadd+0x654>
 80009d2:	0022      	movs	r2, r4
 80009d4:	e123      	b.n	8000c1e <__aeabi_dadd+0x3ba>
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	dc00      	bgt.n	80009dc <__aeabi_dadd+0x178>
 80009da:	e098      	b.n	8000b0e <__aeabi_dadd+0x2aa>
 80009dc:	2900      	cmp	r1, #0
 80009de:	d042      	beq.n	8000a66 <__aeabi_dadd+0x202>
 80009e0:	497d      	ldr	r1, [pc, #500]	; (8000bd8 <__aeabi_dadd+0x374>)
 80009e2:	428e      	cmp	r6, r1
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dadd+0x184>
 80009e6:	e0da      	b.n	8000b9e <__aeabi_dadd+0x33a>
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	0028      	movs	r0, r5
 80009ec:	0409      	lsls	r1, r1, #16
 80009ee:	4308      	orrs	r0, r1
 80009f0:	4684      	mov	ip, r0
 80009f2:	2a38      	cmp	r2, #56	; 0x38
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_dadd+0x194>
 80009f6:	e129      	b.n	8000c4c <__aeabi_dadd+0x3e8>
 80009f8:	2a1f      	cmp	r2, #31
 80009fa:	dc00      	bgt.n	80009fe <__aeabi_dadd+0x19a>
 80009fc:	e187      	b.n	8000d0e <__aeabi_dadd+0x4aa>
 80009fe:	0011      	movs	r1, r2
 8000a00:	4665      	mov	r5, ip
 8000a02:	3920      	subs	r1, #32
 8000a04:	40cd      	lsrs	r5, r1
 8000a06:	2a20      	cmp	r2, #32
 8000a08:	d004      	beq.n	8000a14 <__aeabi_dadd+0x1b0>
 8000a0a:	2040      	movs	r0, #64	; 0x40
 8000a0c:	4661      	mov	r1, ip
 8000a0e:	1a82      	subs	r2, r0, r2
 8000a10:	4091      	lsls	r1, r2
 8000a12:	430f      	orrs	r7, r1
 8000a14:	0039      	movs	r1, r7
 8000a16:	1e4f      	subs	r7, r1, #1
 8000a18:	41b9      	sbcs	r1, r7
 8000a1a:	430d      	orrs	r5, r1
 8000a1c:	e11b      	b.n	8000c56 <__aeabi_dadd+0x3f2>
 8000a1e:	0029      	movs	r1, r5
 8000a20:	4339      	orrs	r1, r7
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x1c2>
 8000a24:	e0b5      	b.n	8000b92 <__aeabi_dadd+0x32e>
 8000a26:	1e51      	subs	r1, r2, #1
 8000a28:	2a01      	cmp	r2, #1
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x1ca>
 8000a2c:	e1ab      	b.n	8000d86 <__aeabi_dadd+0x522>
 8000a2e:	486a      	ldr	r0, [pc, #424]	; (8000bd8 <__aeabi_dadd+0x374>)
 8000a30:	4282      	cmp	r2, r0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x1d2>
 8000a34:	e1b2      	b.n	8000d9c <__aeabi_dadd+0x538>
 8000a36:	000a      	movs	r2, r1
 8000a38:	e743      	b.n	80008c2 <__aeabi_dadd+0x5e>
 8000a3a:	4969      	ldr	r1, [pc, #420]	; (8000be0 <__aeabi_dadd+0x37c>)
 8000a3c:	1c75      	adds	r5, r6, #1
 8000a3e:	420d      	tst	r5, r1
 8000a40:	d000      	beq.n	8000a44 <__aeabi_dadd+0x1e0>
 8000a42:	e0cf      	b.n	8000be4 <__aeabi_dadd+0x380>
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d000      	beq.n	8000a4a <__aeabi_dadd+0x1e6>
 8000a48:	e193      	b.n	8000d72 <__aeabi_dadd+0x50e>
 8000a4a:	4649      	mov	r1, r9
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x1ee>
 8000a50:	e1d1      	b.n	8000df6 <__aeabi_dadd+0x592>
 8000a52:	4661      	mov	r1, ip
 8000a54:	4339      	orrs	r1, r7
 8000a56:	d000      	beq.n	8000a5a <__aeabi_dadd+0x1f6>
 8000a58:	e1e3      	b.n	8000e22 <__aeabi_dadd+0x5be>
 8000a5a:	4649      	mov	r1, r9
 8000a5c:	0758      	lsls	r0, r3, #29
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	4301      	orrs	r1, r0
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	e026      	b.n	8000ab4 <__aeabi_dadd+0x250>
 8000a66:	0029      	movs	r1, r5
 8000a68:	4339      	orrs	r1, r7
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dadd+0x20a>
 8000a6c:	e091      	b.n	8000b92 <__aeabi_dadd+0x32e>
 8000a6e:	1e51      	subs	r1, r2, #1
 8000a70:	2a01      	cmp	r2, #1
 8000a72:	d005      	beq.n	8000a80 <__aeabi_dadd+0x21c>
 8000a74:	4858      	ldr	r0, [pc, #352]	; (8000bd8 <__aeabi_dadd+0x374>)
 8000a76:	4282      	cmp	r2, r0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dadd+0x218>
 8000a7a:	e18f      	b.n	8000d9c <__aeabi_dadd+0x538>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	e7b8      	b.n	80009f2 <__aeabi_dadd+0x18e>
 8000a80:	003d      	movs	r5, r7
 8000a82:	444d      	add	r5, r9
 8000a84:	454d      	cmp	r5, r9
 8000a86:	4189      	sbcs	r1, r1
 8000a88:	4463      	add	r3, ip
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	4249      	negs	r1, r1
 8000a8e:	4488      	add	r8, r1
 8000a90:	4643      	mov	r3, r8
 8000a92:	2602      	movs	r6, #2
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	d500      	bpl.n	8000a9a <__aeabi_dadd+0x236>
 8000a98:	e0eb      	b.n	8000c72 <__aeabi_dadd+0x40e>
 8000a9a:	3e01      	subs	r6, #1
 8000a9c:	076b      	lsls	r3, r5, #29
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_dadd+0x23e>
 8000aa0:	e75c      	b.n	800095c <__aeabi_dadd+0xf8>
 8000aa2:	4643      	mov	r3, r8
 8000aa4:	08e9      	lsrs	r1, r5, #3
 8000aa6:	075a      	lsls	r2, r3, #29
 8000aa8:	4311      	orrs	r1, r2
 8000aaa:	0032      	movs	r2, r6
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	484a      	ldr	r0, [pc, #296]	; (8000bd8 <__aeabi_dadd+0x374>)
 8000ab0:	4282      	cmp	r2, r0
 8000ab2:	d021      	beq.n	8000af8 <__aeabi_dadd+0x294>
 8000ab4:	031b      	lsls	r3, r3, #12
 8000ab6:	0552      	lsls	r2, r2, #21
 8000ab8:	0b1b      	lsrs	r3, r3, #12
 8000aba:	0d52      	lsrs	r2, r2, #21
 8000abc:	e76c      	b.n	8000998 <__aeabi_dadd+0x134>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	e769      	b.n	8000998 <__aeabi_dadd+0x134>
 8000ac4:	002a      	movs	r2, r5
 8000ac6:	433a      	orrs	r2, r7
 8000ac8:	d069      	beq.n	8000b9e <__aeabi_dadd+0x33a>
 8000aca:	464a      	mov	r2, r9
 8000acc:	0758      	lsls	r0, r3, #29
 8000ace:	08d1      	lsrs	r1, r2, #3
 8000ad0:	08da      	lsrs	r2, r3, #3
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	031b      	lsls	r3, r3, #12
 8000ad6:	4308      	orrs	r0, r1
 8000ad8:	421a      	tst	r2, r3
 8000ada:	d007      	beq.n	8000aec <__aeabi_dadd+0x288>
 8000adc:	0029      	movs	r1, r5
 8000ade:	08ed      	lsrs	r5, r5, #3
 8000ae0:	421d      	tst	r5, r3
 8000ae2:	d103      	bne.n	8000aec <__aeabi_dadd+0x288>
 8000ae4:	002a      	movs	r2, r5
 8000ae6:	08ff      	lsrs	r7, r7, #3
 8000ae8:	0748      	lsls	r0, r1, #29
 8000aea:	4338      	orrs	r0, r7
 8000aec:	0f43      	lsrs	r3, r0, #29
 8000aee:	00c1      	lsls	r1, r0, #3
 8000af0:	075b      	lsls	r3, r3, #29
 8000af2:	08c9      	lsrs	r1, r1, #3
 8000af4:	4319      	orrs	r1, r3
 8000af6:	0013      	movs	r3, r2
 8000af8:	000a      	movs	r2, r1
 8000afa:	431a      	orrs	r2, r3
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dadd+0x29c>
 8000afe:	e213      	b.n	8000f28 <__aeabi_dadd+0x6c4>
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	0312      	lsls	r2, r2, #12
 8000b04:	4313      	orrs	r3, r2
 8000b06:	031b      	lsls	r3, r3, #12
 8000b08:	4a33      	ldr	r2, [pc, #204]	; (8000bd8 <__aeabi_dadd+0x374>)
 8000b0a:	0b1b      	lsrs	r3, r3, #12
 8000b0c:	e744      	b.n	8000998 <__aeabi_dadd+0x134>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d04b      	beq.n	8000baa <__aeabi_dadd+0x346>
 8000b12:	1b8a      	subs	r2, r1, r6
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x2b6>
 8000b18:	e0e7      	b.n	8000cea <__aeabi_dadd+0x486>
 8000b1a:	482f      	ldr	r0, [pc, #188]	; (8000bd8 <__aeabi_dadd+0x374>)
 8000b1c:	4281      	cmp	r1, r0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x2be>
 8000b20:	e195      	b.n	8000e4e <__aeabi_dadd+0x5ea>
 8000b22:	2080      	movs	r0, #128	; 0x80
 8000b24:	0400      	lsls	r0, r0, #16
 8000b26:	4303      	orrs	r3, r0
 8000b28:	2a38      	cmp	r2, #56	; 0x38
 8000b2a:	dd00      	ble.n	8000b2e <__aeabi_dadd+0x2ca>
 8000b2c:	e143      	b.n	8000db6 <__aeabi_dadd+0x552>
 8000b2e:	2a1f      	cmp	r2, #31
 8000b30:	dd00      	ble.n	8000b34 <__aeabi_dadd+0x2d0>
 8000b32:	e1db      	b.n	8000eec <__aeabi_dadd+0x688>
 8000b34:	2020      	movs	r0, #32
 8000b36:	001d      	movs	r5, r3
 8000b38:	464e      	mov	r6, r9
 8000b3a:	1a80      	subs	r0, r0, r2
 8000b3c:	4085      	lsls	r5, r0
 8000b3e:	40d6      	lsrs	r6, r2
 8000b40:	4335      	orrs	r5, r6
 8000b42:	464e      	mov	r6, r9
 8000b44:	4086      	lsls	r6, r0
 8000b46:	0030      	movs	r0, r6
 8000b48:	40d3      	lsrs	r3, r2
 8000b4a:	1e46      	subs	r6, r0, #1
 8000b4c:	41b0      	sbcs	r0, r6
 8000b4e:	449c      	add	ip, r3
 8000b50:	4305      	orrs	r5, r0
 8000b52:	19ed      	adds	r5, r5, r7
 8000b54:	42bd      	cmp	r5, r7
 8000b56:	419b      	sbcs	r3, r3
 8000b58:	425b      	negs	r3, r3
 8000b5a:	4463      	add	r3, ip
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	000e      	movs	r6, r1
 8000b60:	e07f      	b.n	8000c62 <__aeabi_dadd+0x3fe>
 8000b62:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <__aeabi_dadd+0x378>)
 8000b64:	1a76      	subs	r6, r6, r1
 8000b66:	4013      	ands	r3, r2
 8000b68:	4698      	mov	r8, r3
 8000b6a:	e6f5      	b.n	8000958 <__aeabi_dadd+0xf4>
 8000b6c:	0028      	movs	r0, r5
 8000b6e:	f001 fd61 	bl	8002634 <__clzsi2>
 8000b72:	0001      	movs	r1, r0
 8000b74:	3118      	adds	r1, #24
 8000b76:	291f      	cmp	r1, #31
 8000b78:	dc00      	bgt.n	8000b7c <__aeabi_dadd+0x318>
 8000b7a:	e6cf      	b.n	800091c <__aeabi_dadd+0xb8>
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	3808      	subs	r0, #8
 8000b80:	4083      	lsls	r3, r0
 8000b82:	2500      	movs	r5, #0
 8000b84:	e6d2      	b.n	800092c <__aeabi_dadd+0xc8>
 8000b86:	4662      	mov	r2, ip
 8000b88:	433a      	orrs	r2, r7
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	1e4f      	subs	r7, r1, #1
 8000b8e:	41b9      	sbcs	r1, r7
 8000b90:	e6ac      	b.n	80008ec <__aeabi_dadd+0x88>
 8000b92:	4649      	mov	r1, r9
 8000b94:	0758      	lsls	r0, r3, #29
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	4301      	orrs	r1, r0
 8000b9a:	08db      	lsrs	r3, r3, #3
 8000b9c:	e787      	b.n	8000aae <__aeabi_dadd+0x24a>
 8000b9e:	4649      	mov	r1, r9
 8000ba0:	075a      	lsls	r2, r3, #29
 8000ba2:	08c9      	lsrs	r1, r1, #3
 8000ba4:	4311      	orrs	r1, r2
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	e7a6      	b.n	8000af8 <__aeabi_dadd+0x294>
 8000baa:	490d      	ldr	r1, [pc, #52]	; (8000be0 <__aeabi_dadd+0x37c>)
 8000bac:	1c70      	adds	r0, r6, #1
 8000bae:	4208      	tst	r0, r1
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_dadd+0x350>
 8000bb2:	e0bb      	b.n	8000d2c <__aeabi_dadd+0x4c8>
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_dadd+0x356>
 8000bb8:	e114      	b.n	8000de4 <__aeabi_dadd+0x580>
 8000bba:	4649      	mov	r1, r9
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x35e>
 8000bc0:	e175      	b.n	8000eae <__aeabi_dadd+0x64a>
 8000bc2:	0029      	movs	r1, r5
 8000bc4:	4339      	orrs	r1, r7
 8000bc6:	d000      	beq.n	8000bca <__aeabi_dadd+0x366>
 8000bc8:	e17e      	b.n	8000ec8 <__aeabi_dadd+0x664>
 8000bca:	4649      	mov	r1, r9
 8000bcc:	0758      	lsls	r0, r3, #29
 8000bce:	08c9      	lsrs	r1, r1, #3
 8000bd0:	4301      	orrs	r1, r0
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	e76e      	b.n	8000ab4 <__aeabi_dadd+0x250>
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	000007ff 	.word	0x000007ff
 8000bdc:	ff7fffff 	.word	0xff7fffff
 8000be0:	000007fe 	.word	0x000007fe
 8000be4:	4649      	mov	r1, r9
 8000be6:	1bcd      	subs	r5, r1, r7
 8000be8:	4661      	mov	r1, ip
 8000bea:	1a58      	subs	r0, r3, r1
 8000bec:	45a9      	cmp	r9, r5
 8000bee:	4189      	sbcs	r1, r1
 8000bf0:	4249      	negs	r1, r1
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	0001      	movs	r1, r0
 8000bf6:	4640      	mov	r0, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	4688      	mov	r8, r1
 8000bfc:	0209      	lsls	r1, r1, #8
 8000bfe:	d500      	bpl.n	8000c02 <__aeabi_dadd+0x39e>
 8000c00:	e0a6      	b.n	8000d50 <__aeabi_dadd+0x4ec>
 8000c02:	4641      	mov	r1, r8
 8000c04:	4329      	orrs	r1, r5
 8000c06:	d000      	beq.n	8000c0a <__aeabi_dadd+0x3a6>
 8000c08:	e67f      	b.n	800090a <__aeabi_dadd+0xa6>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	e751      	b.n	8000ab4 <__aeabi_dadd+0x250>
 8000c10:	4cc7      	ldr	r4, [pc, #796]	; (8000f30 <__aeabi_dadd+0x6cc>)
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	d100      	bne.n	8000c18 <__aeabi_dadd+0x3b4>
 8000c16:	e0c7      	b.n	8000da8 <__aeabi_dadd+0x544>
 8000c18:	2480      	movs	r4, #128	; 0x80
 8000c1a:	0424      	lsls	r4, r4, #16
 8000c1c:	4323      	orrs	r3, r4
 8000c1e:	2a38      	cmp	r2, #56	; 0x38
 8000c20:	dc54      	bgt.n	8000ccc <__aeabi_dadd+0x468>
 8000c22:	2a1f      	cmp	r2, #31
 8000c24:	dd00      	ble.n	8000c28 <__aeabi_dadd+0x3c4>
 8000c26:	e0cc      	b.n	8000dc2 <__aeabi_dadd+0x55e>
 8000c28:	2420      	movs	r4, #32
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	1aa4      	subs	r4, r4, r2
 8000c2e:	001d      	movs	r5, r3
 8000c30:	464e      	mov	r6, r9
 8000c32:	40a0      	lsls	r0, r4
 8000c34:	40d6      	lsrs	r6, r2
 8000c36:	40a5      	lsls	r5, r4
 8000c38:	0004      	movs	r4, r0
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	4335      	orrs	r5, r6
 8000c40:	1e66      	subs	r6, r4, #1
 8000c42:	41b4      	sbcs	r4, r6
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	469c      	mov	ip, r3
 8000c48:	4325      	orrs	r5, r4
 8000c4a:	e044      	b.n	8000cd6 <__aeabi_dadd+0x472>
 8000c4c:	4662      	mov	r2, ip
 8000c4e:	433a      	orrs	r2, r7
 8000c50:	0015      	movs	r5, r2
 8000c52:	1e6f      	subs	r7, r5, #1
 8000c54:	41bd      	sbcs	r5, r7
 8000c56:	444d      	add	r5, r9
 8000c58:	454d      	cmp	r5, r9
 8000c5a:	4189      	sbcs	r1, r1
 8000c5c:	4249      	negs	r1, r1
 8000c5e:	4688      	mov	r8, r1
 8000c60:	4498      	add	r8, r3
 8000c62:	4643      	mov	r3, r8
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	d400      	bmi.n	8000c6a <__aeabi_dadd+0x406>
 8000c68:	e718      	b.n	8000a9c <__aeabi_dadd+0x238>
 8000c6a:	4bb1      	ldr	r3, [pc, #708]	; (8000f30 <__aeabi_dadd+0x6cc>)
 8000c6c:	3601      	adds	r6, #1
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	d049      	beq.n	8000d06 <__aeabi_dadd+0x4a2>
 8000c72:	4642      	mov	r2, r8
 8000c74:	4baf      	ldr	r3, [pc, #700]	; (8000f34 <__aeabi_dadd+0x6d0>)
 8000c76:	2101      	movs	r1, #1
 8000c78:	401a      	ands	r2, r3
 8000c7a:	0013      	movs	r3, r2
 8000c7c:	086a      	lsrs	r2, r5, #1
 8000c7e:	400d      	ands	r5, r1
 8000c80:	4315      	orrs	r5, r2
 8000c82:	07d9      	lsls	r1, r3, #31
 8000c84:	085b      	lsrs	r3, r3, #1
 8000c86:	4698      	mov	r8, r3
 8000c88:	430d      	orrs	r5, r1
 8000c8a:	e665      	b.n	8000958 <__aeabi_dadd+0xf4>
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	3e1f      	subs	r6, #31
 8000c90:	40f0      	lsrs	r0, r6
 8000c92:	2a20      	cmp	r2, #32
 8000c94:	d003      	beq.n	8000c9e <__aeabi_dadd+0x43a>
 8000c96:	2140      	movs	r1, #64	; 0x40
 8000c98:	1a8a      	subs	r2, r1, r2
 8000c9a:	4093      	lsls	r3, r2
 8000c9c:	431d      	orrs	r5, r3
 8000c9e:	1e69      	subs	r1, r5, #1
 8000ca0:	418d      	sbcs	r5, r1
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	4305      	orrs	r5, r0
 8000caa:	e6f7      	b.n	8000a9c <__aeabi_dadd+0x238>
 8000cac:	0011      	movs	r1, r2
 8000cae:	4665      	mov	r5, ip
 8000cb0:	3920      	subs	r1, #32
 8000cb2:	40cd      	lsrs	r5, r1
 8000cb4:	2a20      	cmp	r2, #32
 8000cb6:	d004      	beq.n	8000cc2 <__aeabi_dadd+0x45e>
 8000cb8:	2040      	movs	r0, #64	; 0x40
 8000cba:	4661      	mov	r1, ip
 8000cbc:	1a82      	subs	r2, r0, r2
 8000cbe:	4091      	lsls	r1, r2
 8000cc0:	430f      	orrs	r7, r1
 8000cc2:	0039      	movs	r1, r7
 8000cc4:	1e4f      	subs	r7, r1, #1
 8000cc6:	41b9      	sbcs	r1, r7
 8000cc8:	4329      	orrs	r1, r5
 8000cca:	e60f      	b.n	80008ec <__aeabi_dadd+0x88>
 8000ccc:	464a      	mov	r2, r9
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	001d      	movs	r5, r3
 8000cd2:	1e6b      	subs	r3, r5, #1
 8000cd4:	419d      	sbcs	r5, r3
 8000cd6:	1b7d      	subs	r5, r7, r5
 8000cd8:	42af      	cmp	r7, r5
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	4662      	mov	r2, ip
 8000cde:	425b      	negs	r3, r3
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	4654      	mov	r4, sl
 8000ce6:	000e      	movs	r6, r1
 8000ce8:	e607      	b.n	80008fa <__aeabi_dadd+0x96>
 8000cea:	4648      	mov	r0, r9
 8000cec:	4318      	orrs	r0, r3
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dadd+0x48e>
 8000cf0:	e0b3      	b.n	8000e5a <__aeabi_dadd+0x5f6>
 8000cf2:	1e50      	subs	r0, r2, #1
 8000cf4:	2a01      	cmp	r2, #1
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x496>
 8000cf8:	e10d      	b.n	8000f16 <__aeabi_dadd+0x6b2>
 8000cfa:	4d8d      	ldr	r5, [pc, #564]	; (8000f30 <__aeabi_dadd+0x6cc>)
 8000cfc:	42aa      	cmp	r2, r5
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_dadd+0x49e>
 8000d00:	e0a5      	b.n	8000e4e <__aeabi_dadd+0x5ea>
 8000d02:	0002      	movs	r2, r0
 8000d04:	e710      	b.n	8000b28 <__aeabi_dadd+0x2c4>
 8000d06:	0032      	movs	r2, r6
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	e644      	b.n	8000998 <__aeabi_dadd+0x134>
 8000d0e:	2120      	movs	r1, #32
 8000d10:	0038      	movs	r0, r7
 8000d12:	1a89      	subs	r1, r1, r2
 8000d14:	4665      	mov	r5, ip
 8000d16:	408f      	lsls	r7, r1
 8000d18:	408d      	lsls	r5, r1
 8000d1a:	40d0      	lsrs	r0, r2
 8000d1c:	1e79      	subs	r1, r7, #1
 8000d1e:	418f      	sbcs	r7, r1
 8000d20:	4305      	orrs	r5, r0
 8000d22:	433d      	orrs	r5, r7
 8000d24:	4667      	mov	r7, ip
 8000d26:	40d7      	lsrs	r7, r2
 8000d28:	19db      	adds	r3, r3, r7
 8000d2a:	e794      	b.n	8000c56 <__aeabi_dadd+0x3f2>
 8000d2c:	4a80      	ldr	r2, [pc, #512]	; (8000f30 <__aeabi_dadd+0x6cc>)
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x4d0>
 8000d32:	e0ec      	b.n	8000f0e <__aeabi_dadd+0x6aa>
 8000d34:	0039      	movs	r1, r7
 8000d36:	4449      	add	r1, r9
 8000d38:	4549      	cmp	r1, r9
 8000d3a:	4192      	sbcs	r2, r2
 8000d3c:	4463      	add	r3, ip
 8000d3e:	4252      	negs	r2, r2
 8000d40:	189b      	adds	r3, r3, r2
 8000d42:	07dd      	lsls	r5, r3, #31
 8000d44:	0849      	lsrs	r1, r1, #1
 8000d46:	085b      	lsrs	r3, r3, #1
 8000d48:	4698      	mov	r8, r3
 8000d4a:	0006      	movs	r6, r0
 8000d4c:	430d      	orrs	r5, r1
 8000d4e:	e6a5      	b.n	8000a9c <__aeabi_dadd+0x238>
 8000d50:	464a      	mov	r2, r9
 8000d52:	1abd      	subs	r5, r7, r2
 8000d54:	42af      	cmp	r7, r5
 8000d56:	4189      	sbcs	r1, r1
 8000d58:	4662      	mov	r2, ip
 8000d5a:	4249      	negs	r1, r1
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	1a5b      	subs	r3, r3, r1
 8000d60:	4698      	mov	r8, r3
 8000d62:	4654      	mov	r4, sl
 8000d64:	e5d1      	b.n	800090a <__aeabi_dadd+0xa6>
 8000d66:	076c      	lsls	r4, r5, #29
 8000d68:	08f9      	lsrs	r1, r7, #3
 8000d6a:	4321      	orrs	r1, r4
 8000d6c:	08eb      	lsrs	r3, r5, #3
 8000d6e:	0004      	movs	r4, r0
 8000d70:	e69d      	b.n	8000aae <__aeabi_dadd+0x24a>
 8000d72:	464a      	mov	r2, r9
 8000d74:	431a      	orrs	r2, r3
 8000d76:	d175      	bne.n	8000e64 <__aeabi_dadd+0x600>
 8000d78:	4661      	mov	r1, ip
 8000d7a:	4339      	orrs	r1, r7
 8000d7c:	d114      	bne.n	8000da8 <__aeabi_dadd+0x544>
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	2400      	movs	r4, #0
 8000d82:	031b      	lsls	r3, r3, #12
 8000d84:	e6bc      	b.n	8000b00 <__aeabi_dadd+0x29c>
 8000d86:	464a      	mov	r2, r9
 8000d88:	1bd5      	subs	r5, r2, r7
 8000d8a:	45a9      	cmp	r9, r5
 8000d8c:	4189      	sbcs	r1, r1
 8000d8e:	4662      	mov	r2, ip
 8000d90:	4249      	negs	r1, r1
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	4698      	mov	r8, r3
 8000d98:	2601      	movs	r6, #1
 8000d9a:	e5ae      	b.n	80008fa <__aeabi_dadd+0x96>
 8000d9c:	464a      	mov	r2, r9
 8000d9e:	08d1      	lsrs	r1, r2, #3
 8000da0:	075a      	lsls	r2, r3, #29
 8000da2:	4311      	orrs	r1, r2
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	e6a7      	b.n	8000af8 <__aeabi_dadd+0x294>
 8000da8:	4663      	mov	r3, ip
 8000daa:	08f9      	lsrs	r1, r7, #3
 8000dac:	075a      	lsls	r2, r3, #29
 8000dae:	4654      	mov	r4, sl
 8000db0:	4311      	orrs	r1, r2
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	e6a0      	b.n	8000af8 <__aeabi_dadd+0x294>
 8000db6:	464a      	mov	r2, r9
 8000db8:	4313      	orrs	r3, r2
 8000dba:	001d      	movs	r5, r3
 8000dbc:	1e6b      	subs	r3, r5, #1
 8000dbe:	419d      	sbcs	r5, r3
 8000dc0:	e6c7      	b.n	8000b52 <__aeabi_dadd+0x2ee>
 8000dc2:	0014      	movs	r4, r2
 8000dc4:	001e      	movs	r6, r3
 8000dc6:	3c20      	subs	r4, #32
 8000dc8:	40e6      	lsrs	r6, r4
 8000dca:	2a20      	cmp	r2, #32
 8000dcc:	d005      	beq.n	8000dda <__aeabi_dadd+0x576>
 8000dce:	2440      	movs	r4, #64	; 0x40
 8000dd0:	1aa2      	subs	r2, r4, r2
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	4691      	mov	r9, r2
 8000dda:	464d      	mov	r5, r9
 8000ddc:	1e6b      	subs	r3, r5, #1
 8000dde:	419d      	sbcs	r5, r3
 8000de0:	4335      	orrs	r5, r6
 8000de2:	e778      	b.n	8000cd6 <__aeabi_dadd+0x472>
 8000de4:	464a      	mov	r2, r9
 8000de6:	431a      	orrs	r2, r3
 8000de8:	d000      	beq.n	8000dec <__aeabi_dadd+0x588>
 8000dea:	e66b      	b.n	8000ac4 <__aeabi_dadd+0x260>
 8000dec:	076b      	lsls	r3, r5, #29
 8000dee:	08f9      	lsrs	r1, r7, #3
 8000df0:	4319      	orrs	r1, r3
 8000df2:	08eb      	lsrs	r3, r5, #3
 8000df4:	e680      	b.n	8000af8 <__aeabi_dadd+0x294>
 8000df6:	4661      	mov	r1, ip
 8000df8:	4339      	orrs	r1, r7
 8000dfa:	d054      	beq.n	8000ea6 <__aeabi_dadd+0x642>
 8000dfc:	4663      	mov	r3, ip
 8000dfe:	08f9      	lsrs	r1, r7, #3
 8000e00:	075c      	lsls	r4, r3, #29
 8000e02:	4321      	orrs	r1, r4
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	0004      	movs	r4, r0
 8000e08:	e654      	b.n	8000ab4 <__aeabi_dadd+0x250>
 8000e0a:	464a      	mov	r2, r9
 8000e0c:	1abd      	subs	r5, r7, r2
 8000e0e:	42af      	cmp	r7, r5
 8000e10:	4189      	sbcs	r1, r1
 8000e12:	4662      	mov	r2, ip
 8000e14:	4249      	negs	r1, r1
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	4698      	mov	r8, r3
 8000e1c:	0004      	movs	r4, r0
 8000e1e:	2601      	movs	r6, #1
 8000e20:	e56b      	b.n	80008fa <__aeabi_dadd+0x96>
 8000e22:	464a      	mov	r2, r9
 8000e24:	1bd5      	subs	r5, r2, r7
 8000e26:	45a9      	cmp	r9, r5
 8000e28:	4189      	sbcs	r1, r1
 8000e2a:	4662      	mov	r2, ip
 8000e2c:	4249      	negs	r1, r1
 8000e2e:	1a9a      	subs	r2, r3, r2
 8000e30:	1a52      	subs	r2, r2, r1
 8000e32:	4690      	mov	r8, r2
 8000e34:	0212      	lsls	r2, r2, #8
 8000e36:	d532      	bpl.n	8000e9e <__aeabi_dadd+0x63a>
 8000e38:	464a      	mov	r2, r9
 8000e3a:	1abd      	subs	r5, r7, r2
 8000e3c:	42af      	cmp	r7, r5
 8000e3e:	4189      	sbcs	r1, r1
 8000e40:	4662      	mov	r2, ip
 8000e42:	4249      	negs	r1, r1
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	1a5b      	subs	r3, r3, r1
 8000e48:	4698      	mov	r8, r3
 8000e4a:	0004      	movs	r4, r0
 8000e4c:	e584      	b.n	8000958 <__aeabi_dadd+0xf4>
 8000e4e:	4663      	mov	r3, ip
 8000e50:	08f9      	lsrs	r1, r7, #3
 8000e52:	075a      	lsls	r2, r3, #29
 8000e54:	4311      	orrs	r1, r2
 8000e56:	08db      	lsrs	r3, r3, #3
 8000e58:	e64e      	b.n	8000af8 <__aeabi_dadd+0x294>
 8000e5a:	08f9      	lsrs	r1, r7, #3
 8000e5c:	0768      	lsls	r0, r5, #29
 8000e5e:	4301      	orrs	r1, r0
 8000e60:	08eb      	lsrs	r3, r5, #3
 8000e62:	e624      	b.n	8000aae <__aeabi_dadd+0x24a>
 8000e64:	4662      	mov	r2, ip
 8000e66:	433a      	orrs	r2, r7
 8000e68:	d100      	bne.n	8000e6c <__aeabi_dadd+0x608>
 8000e6a:	e698      	b.n	8000b9e <__aeabi_dadd+0x33a>
 8000e6c:	464a      	mov	r2, r9
 8000e6e:	08d1      	lsrs	r1, r2, #3
 8000e70:	075a      	lsls	r2, r3, #29
 8000e72:	4311      	orrs	r1, r2
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	031b      	lsls	r3, r3, #12
 8000e7a:	421a      	tst	r2, r3
 8000e7c:	d008      	beq.n	8000e90 <__aeabi_dadd+0x62c>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	08c5      	lsrs	r5, r0, #3
 8000e82:	421d      	tst	r5, r3
 8000e84:	d104      	bne.n	8000e90 <__aeabi_dadd+0x62c>
 8000e86:	4654      	mov	r4, sl
 8000e88:	002a      	movs	r2, r5
 8000e8a:	08f9      	lsrs	r1, r7, #3
 8000e8c:	0743      	lsls	r3, r0, #29
 8000e8e:	4319      	orrs	r1, r3
 8000e90:	0f4b      	lsrs	r3, r1, #29
 8000e92:	00c9      	lsls	r1, r1, #3
 8000e94:	075b      	lsls	r3, r3, #29
 8000e96:	08c9      	lsrs	r1, r1, #3
 8000e98:	4319      	orrs	r1, r3
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	e62c      	b.n	8000af8 <__aeabi_dadd+0x294>
 8000e9e:	4641      	mov	r1, r8
 8000ea0:	4329      	orrs	r1, r5
 8000ea2:	d000      	beq.n	8000ea6 <__aeabi_dadd+0x642>
 8000ea4:	e5fa      	b.n	8000a9c <__aeabi_dadd+0x238>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	2400      	movs	r4, #0
 8000eac:	e602      	b.n	8000ab4 <__aeabi_dadd+0x250>
 8000eae:	076b      	lsls	r3, r5, #29
 8000eb0:	08f9      	lsrs	r1, r7, #3
 8000eb2:	4319      	orrs	r1, r3
 8000eb4:	08eb      	lsrs	r3, r5, #3
 8000eb6:	e5fd      	b.n	8000ab4 <__aeabi_dadd+0x250>
 8000eb8:	4663      	mov	r3, ip
 8000eba:	08f9      	lsrs	r1, r7, #3
 8000ebc:	075b      	lsls	r3, r3, #29
 8000ebe:	4319      	orrs	r1, r3
 8000ec0:	4663      	mov	r3, ip
 8000ec2:	0004      	movs	r4, r0
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	e617      	b.n	8000af8 <__aeabi_dadd+0x294>
 8000ec8:	003d      	movs	r5, r7
 8000eca:	444d      	add	r5, r9
 8000ecc:	4463      	add	r3, ip
 8000ece:	454d      	cmp	r5, r9
 8000ed0:	4189      	sbcs	r1, r1
 8000ed2:	4698      	mov	r8, r3
 8000ed4:	4249      	negs	r1, r1
 8000ed6:	4488      	add	r8, r1
 8000ed8:	4643      	mov	r3, r8
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	d400      	bmi.n	8000ee0 <__aeabi_dadd+0x67c>
 8000ede:	e5dd      	b.n	8000a9c <__aeabi_dadd+0x238>
 8000ee0:	4642      	mov	r2, r8
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <__aeabi_dadd+0x6d0>)
 8000ee4:	2601      	movs	r6, #1
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	4690      	mov	r8, r2
 8000eea:	e5d7      	b.n	8000a9c <__aeabi_dadd+0x238>
 8000eec:	0010      	movs	r0, r2
 8000eee:	001e      	movs	r6, r3
 8000ef0:	3820      	subs	r0, #32
 8000ef2:	40c6      	lsrs	r6, r0
 8000ef4:	2a20      	cmp	r2, #32
 8000ef6:	d005      	beq.n	8000f04 <__aeabi_dadd+0x6a0>
 8000ef8:	2040      	movs	r0, #64	; 0x40
 8000efa:	1a82      	subs	r2, r0, r2
 8000efc:	4093      	lsls	r3, r2
 8000efe:	464a      	mov	r2, r9
 8000f00:	431a      	orrs	r2, r3
 8000f02:	4691      	mov	r9, r2
 8000f04:	464d      	mov	r5, r9
 8000f06:	1e6b      	subs	r3, r5, #1
 8000f08:	419d      	sbcs	r5, r3
 8000f0a:	4335      	orrs	r5, r6
 8000f0c:	e621      	b.n	8000b52 <__aeabi_dadd+0x2ee>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	2300      	movs	r3, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	e540      	b.n	8000998 <__aeabi_dadd+0x134>
 8000f16:	464a      	mov	r2, r9
 8000f18:	19d5      	adds	r5, r2, r7
 8000f1a:	42bd      	cmp	r5, r7
 8000f1c:	4189      	sbcs	r1, r1
 8000f1e:	4463      	add	r3, ip
 8000f20:	4698      	mov	r8, r3
 8000f22:	4249      	negs	r1, r1
 8000f24:	4488      	add	r8, r1
 8000f26:	e5b3      	b.n	8000a90 <__aeabi_dadd+0x22c>
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4a01      	ldr	r2, [pc, #4]	; (8000f30 <__aeabi_dadd+0x6cc>)
 8000f2c:	000b      	movs	r3, r1
 8000f2e:	e533      	b.n	8000998 <__aeabi_dadd+0x134>
 8000f30:	000007ff 	.word	0x000007ff
 8000f34:	ff7fffff 	.word	0xff7fffff

08000f38 <__aeabi_ddiv>:
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	4657      	mov	r7, sl
 8000f3c:	464e      	mov	r6, r9
 8000f3e:	4645      	mov	r5, r8
 8000f40:	46de      	mov	lr, fp
 8000f42:	b5e0      	push	{r5, r6, r7, lr}
 8000f44:	4681      	mov	r9, r0
 8000f46:	0005      	movs	r5, r0
 8000f48:	030c      	lsls	r4, r1, #12
 8000f4a:	0048      	lsls	r0, r1, #1
 8000f4c:	4692      	mov	sl, r2
 8000f4e:	001f      	movs	r7, r3
 8000f50:	b085      	sub	sp, #20
 8000f52:	0b24      	lsrs	r4, r4, #12
 8000f54:	0d40      	lsrs	r0, r0, #21
 8000f56:	0fce      	lsrs	r6, r1, #31
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d059      	beq.n	8001010 <__aeabi_ddiv+0xd8>
 8000f5c:	4b87      	ldr	r3, [pc, #540]	; (800117c <__aeabi_ddiv+0x244>)
 8000f5e:	4298      	cmp	r0, r3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x2c>
 8000f62:	e098      	b.n	8001096 <__aeabi_ddiv+0x15e>
 8000f64:	0f6b      	lsrs	r3, r5, #29
 8000f66:	00e4      	lsls	r4, r4, #3
 8000f68:	431c      	orrs	r4, r3
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	4323      	orrs	r3, r4
 8000f70:	4698      	mov	r8, r3
 8000f72:	4b83      	ldr	r3, [pc, #524]	; (8001180 <__aeabi_ddiv+0x248>)
 8000f74:	00ed      	lsls	r5, r5, #3
 8000f76:	469b      	mov	fp, r3
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4699      	mov	r9, r3
 8000f7c:	4483      	add	fp, r0
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	033c      	lsls	r4, r7, #12
 8000f82:	007b      	lsls	r3, r7, #1
 8000f84:	4650      	mov	r0, sl
 8000f86:	0b24      	lsrs	r4, r4, #12
 8000f88:	0d5b      	lsrs	r3, r3, #21
 8000f8a:	0fff      	lsrs	r7, r7, #31
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d067      	beq.n	8001060 <__aeabi_ddiv+0x128>
 8000f90:	4a7a      	ldr	r2, [pc, #488]	; (800117c <__aeabi_ddiv+0x244>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d018      	beq.n	8000fc8 <__aeabi_ddiv+0x90>
 8000f96:	497a      	ldr	r1, [pc, #488]	; (8001180 <__aeabi_ddiv+0x248>)
 8000f98:	0f42      	lsrs	r2, r0, #29
 8000f9a:	468c      	mov	ip, r1
 8000f9c:	00e4      	lsls	r4, r4, #3
 8000f9e:	4659      	mov	r1, fp
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	4463      	add	r3, ip
 8000fa6:	0412      	lsls	r2, r2, #16
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	4314      	orrs	r4, r2
 8000fac:	469b      	mov	fp, r3
 8000fae:	00c2      	lsls	r2, r0, #3
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	0033      	movs	r3, r6
 8000fb4:	407b      	eors	r3, r7
 8000fb6:	469a      	mov	sl, r3
 8000fb8:	464b      	mov	r3, r9
 8000fba:	2b0f      	cmp	r3, #15
 8000fbc:	d900      	bls.n	8000fc0 <__aeabi_ddiv+0x88>
 8000fbe:	e0ef      	b.n	80011a0 <__aeabi_ddiv+0x268>
 8000fc0:	4970      	ldr	r1, [pc, #448]	; (8001184 <__aeabi_ddiv+0x24c>)
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	58cb      	ldr	r3, [r1, r3]
 8000fc6:	469f      	mov	pc, r3
 8000fc8:	4b6f      	ldr	r3, [pc, #444]	; (8001188 <__aeabi_ddiv+0x250>)
 8000fca:	4652      	mov	r2, sl
 8000fcc:	469c      	mov	ip, r3
 8000fce:	4322      	orrs	r2, r4
 8000fd0:	44e3      	add	fp, ip
 8000fd2:	2a00      	cmp	r2, #0
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_ddiv+0xa0>
 8000fd6:	e095      	b.n	8001104 <__aeabi_ddiv+0x1cc>
 8000fd8:	4649      	mov	r1, r9
 8000fda:	2302      	movs	r3, #2
 8000fdc:	4319      	orrs	r1, r3
 8000fde:	4689      	mov	r9, r1
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	e7e5      	b.n	8000fb2 <__aeabi_ddiv+0x7a>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	2400      	movs	r4, #0
 8000fea:	2500      	movs	r5, #0
 8000fec:	4652      	mov	r2, sl
 8000fee:	051b      	lsls	r3, r3, #20
 8000ff0:	4323      	orrs	r3, r4
 8000ff2:	07d2      	lsls	r2, r2, #31
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	0028      	movs	r0, r5
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	b005      	add	sp, #20
 8000ffc:	bcf0      	pop	{r4, r5, r6, r7}
 8000ffe:	46bb      	mov	fp, r7
 8001000:	46b2      	mov	sl, r6
 8001002:	46a9      	mov	r9, r5
 8001004:	46a0      	mov	r8, r4
 8001006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001008:	2400      	movs	r4, #0
 800100a:	2500      	movs	r5, #0
 800100c:	4b5b      	ldr	r3, [pc, #364]	; (800117c <__aeabi_ddiv+0x244>)
 800100e:	e7ed      	b.n	8000fec <__aeabi_ddiv+0xb4>
 8001010:	464b      	mov	r3, r9
 8001012:	4323      	orrs	r3, r4
 8001014:	4698      	mov	r8, r3
 8001016:	d100      	bne.n	800101a <__aeabi_ddiv+0xe2>
 8001018:	e089      	b.n	800112e <__aeabi_ddiv+0x1f6>
 800101a:	2c00      	cmp	r4, #0
 800101c:	d100      	bne.n	8001020 <__aeabi_ddiv+0xe8>
 800101e:	e1e0      	b.n	80013e2 <__aeabi_ddiv+0x4aa>
 8001020:	0020      	movs	r0, r4
 8001022:	f001 fb07 	bl	8002634 <__clzsi2>
 8001026:	0001      	movs	r1, r0
 8001028:	0002      	movs	r2, r0
 800102a:	390b      	subs	r1, #11
 800102c:	231d      	movs	r3, #29
 800102e:	1a5b      	subs	r3, r3, r1
 8001030:	4649      	mov	r1, r9
 8001032:	0010      	movs	r0, r2
 8001034:	40d9      	lsrs	r1, r3
 8001036:	3808      	subs	r0, #8
 8001038:	4084      	lsls	r4, r0
 800103a:	000b      	movs	r3, r1
 800103c:	464d      	mov	r5, r9
 800103e:	4323      	orrs	r3, r4
 8001040:	4698      	mov	r8, r3
 8001042:	4085      	lsls	r5, r0
 8001044:	4851      	ldr	r0, [pc, #324]	; (800118c <__aeabi_ddiv+0x254>)
 8001046:	033c      	lsls	r4, r7, #12
 8001048:	1a83      	subs	r3, r0, r2
 800104a:	469b      	mov	fp, r3
 800104c:	2300      	movs	r3, #0
 800104e:	4699      	mov	r9, r3
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	007b      	lsls	r3, r7, #1
 8001054:	4650      	mov	r0, sl
 8001056:	0b24      	lsrs	r4, r4, #12
 8001058:	0d5b      	lsrs	r3, r3, #21
 800105a:	0fff      	lsrs	r7, r7, #31
 800105c:	2b00      	cmp	r3, #0
 800105e:	d197      	bne.n	8000f90 <__aeabi_ddiv+0x58>
 8001060:	4652      	mov	r2, sl
 8001062:	4322      	orrs	r2, r4
 8001064:	d055      	beq.n	8001112 <__aeabi_ddiv+0x1da>
 8001066:	2c00      	cmp	r4, #0
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x134>
 800106a:	e1ca      	b.n	8001402 <__aeabi_ddiv+0x4ca>
 800106c:	0020      	movs	r0, r4
 800106e:	f001 fae1 	bl	8002634 <__clzsi2>
 8001072:	0002      	movs	r2, r0
 8001074:	3a0b      	subs	r2, #11
 8001076:	231d      	movs	r3, #29
 8001078:	0001      	movs	r1, r0
 800107a:	1a9b      	subs	r3, r3, r2
 800107c:	4652      	mov	r2, sl
 800107e:	3908      	subs	r1, #8
 8001080:	40da      	lsrs	r2, r3
 8001082:	408c      	lsls	r4, r1
 8001084:	4314      	orrs	r4, r2
 8001086:	4652      	mov	r2, sl
 8001088:	408a      	lsls	r2, r1
 800108a:	4b41      	ldr	r3, [pc, #260]	; (8001190 <__aeabi_ddiv+0x258>)
 800108c:	4458      	add	r0, fp
 800108e:	469b      	mov	fp, r3
 8001090:	4483      	add	fp, r0
 8001092:	2000      	movs	r0, #0
 8001094:	e78d      	b.n	8000fb2 <__aeabi_ddiv+0x7a>
 8001096:	464b      	mov	r3, r9
 8001098:	4323      	orrs	r3, r4
 800109a:	4698      	mov	r8, r3
 800109c:	d140      	bne.n	8001120 <__aeabi_ddiv+0x1e8>
 800109e:	2308      	movs	r3, #8
 80010a0:	4699      	mov	r9, r3
 80010a2:	3b06      	subs	r3, #6
 80010a4:	2500      	movs	r5, #0
 80010a6:	4683      	mov	fp, r0
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	e769      	b.n	8000f80 <__aeabi_ddiv+0x48>
 80010ac:	46b2      	mov	sl, r6
 80010ae:	9b00      	ldr	r3, [sp, #0]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d0a9      	beq.n	8001008 <__aeabi_ddiv+0xd0>
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0x182>
 80010b8:	e211      	b.n	80014de <__aeabi_ddiv+0x5a6>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d093      	beq.n	8000fe6 <__aeabi_ddiv+0xae>
 80010be:	4a35      	ldr	r2, [pc, #212]	; (8001194 <__aeabi_ddiv+0x25c>)
 80010c0:	445a      	add	r2, fp
 80010c2:	2a00      	cmp	r2, #0
 80010c4:	dc00      	bgt.n	80010c8 <__aeabi_ddiv+0x190>
 80010c6:	e13c      	b.n	8001342 <__aeabi_ddiv+0x40a>
 80010c8:	076b      	lsls	r3, r5, #29
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x196>
 80010cc:	e1a7      	b.n	800141e <__aeabi_ddiv+0x4e6>
 80010ce:	08ed      	lsrs	r5, r5, #3
 80010d0:	4643      	mov	r3, r8
 80010d2:	01db      	lsls	r3, r3, #7
 80010d4:	d506      	bpl.n	80010e4 <__aeabi_ddiv+0x1ac>
 80010d6:	4642      	mov	r2, r8
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <__aeabi_ddiv+0x260>)
 80010da:	401a      	ands	r2, r3
 80010dc:	4690      	mov	r8, r2
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	00d2      	lsls	r2, r2, #3
 80010e2:	445a      	add	r2, fp
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <__aeabi_ddiv+0x264>)
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dc8e      	bgt.n	8001008 <__aeabi_ddiv+0xd0>
 80010ea:	4643      	mov	r3, r8
 80010ec:	0552      	lsls	r2, r2, #21
 80010ee:	0758      	lsls	r0, r3, #29
 80010f0:	025c      	lsls	r4, r3, #9
 80010f2:	4305      	orrs	r5, r0
 80010f4:	0b24      	lsrs	r4, r4, #12
 80010f6:	0d53      	lsrs	r3, r2, #21
 80010f8:	e778      	b.n	8000fec <__aeabi_ddiv+0xb4>
 80010fa:	46ba      	mov	sl, r7
 80010fc:	46a0      	mov	r8, r4
 80010fe:	0015      	movs	r5, r2
 8001100:	9000      	str	r0, [sp, #0]
 8001102:	e7d4      	b.n	80010ae <__aeabi_ddiv+0x176>
 8001104:	464a      	mov	r2, r9
 8001106:	2303      	movs	r3, #3
 8001108:	431a      	orrs	r2, r3
 800110a:	4691      	mov	r9, r2
 800110c:	2003      	movs	r0, #3
 800110e:	4652      	mov	r2, sl
 8001110:	e74f      	b.n	8000fb2 <__aeabi_ddiv+0x7a>
 8001112:	4649      	mov	r1, r9
 8001114:	2301      	movs	r3, #1
 8001116:	4319      	orrs	r1, r3
 8001118:	4689      	mov	r9, r1
 800111a:	2400      	movs	r4, #0
 800111c:	2001      	movs	r0, #1
 800111e:	e748      	b.n	8000fb2 <__aeabi_ddiv+0x7a>
 8001120:	230c      	movs	r3, #12
 8001122:	4699      	mov	r9, r3
 8001124:	3b09      	subs	r3, #9
 8001126:	46a0      	mov	r8, r4
 8001128:	4683      	mov	fp, r0
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	e728      	b.n	8000f80 <__aeabi_ddiv+0x48>
 800112e:	2304      	movs	r3, #4
 8001130:	4699      	mov	r9, r3
 8001132:	2300      	movs	r3, #0
 8001134:	469b      	mov	fp, r3
 8001136:	3301      	adds	r3, #1
 8001138:	2500      	movs	r5, #0
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	e720      	b.n	8000f80 <__aeabi_ddiv+0x48>
 800113e:	2300      	movs	r3, #0
 8001140:	2480      	movs	r4, #128	; 0x80
 8001142:	469a      	mov	sl, r3
 8001144:	2500      	movs	r5, #0
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <__aeabi_ddiv+0x244>)
 8001148:	0324      	lsls	r4, r4, #12
 800114a:	e74f      	b.n	8000fec <__aeabi_ddiv+0xb4>
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	4641      	mov	r1, r8
 8001150:	031b      	lsls	r3, r3, #12
 8001152:	4219      	tst	r1, r3
 8001154:	d008      	beq.n	8001168 <__aeabi_ddiv+0x230>
 8001156:	421c      	tst	r4, r3
 8001158:	d106      	bne.n	8001168 <__aeabi_ddiv+0x230>
 800115a:	431c      	orrs	r4, r3
 800115c:	0324      	lsls	r4, r4, #12
 800115e:	46ba      	mov	sl, r7
 8001160:	0015      	movs	r5, r2
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <__aeabi_ddiv+0x244>)
 8001164:	0b24      	lsrs	r4, r4, #12
 8001166:	e741      	b.n	8000fec <__aeabi_ddiv+0xb4>
 8001168:	2480      	movs	r4, #128	; 0x80
 800116a:	4643      	mov	r3, r8
 800116c:	0324      	lsls	r4, r4, #12
 800116e:	431c      	orrs	r4, r3
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	46b2      	mov	sl, r6
 8001174:	4b01      	ldr	r3, [pc, #4]	; (800117c <__aeabi_ddiv+0x244>)
 8001176:	0b24      	lsrs	r4, r4, #12
 8001178:	e738      	b.n	8000fec <__aeabi_ddiv+0xb4>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	000007ff 	.word	0x000007ff
 8001180:	fffffc01 	.word	0xfffffc01
 8001184:	08018378 	.word	0x08018378
 8001188:	fffff801 	.word	0xfffff801
 800118c:	fffffc0d 	.word	0xfffffc0d
 8001190:	000003f3 	.word	0x000003f3
 8001194:	000003ff 	.word	0x000003ff
 8001198:	feffffff 	.word	0xfeffffff
 800119c:	000007fe 	.word	0x000007fe
 80011a0:	4544      	cmp	r4, r8
 80011a2:	d200      	bcs.n	80011a6 <__aeabi_ddiv+0x26e>
 80011a4:	e116      	b.n	80013d4 <__aeabi_ddiv+0x49c>
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x272>
 80011a8:	e111      	b.n	80013ce <__aeabi_ddiv+0x496>
 80011aa:	2301      	movs	r3, #1
 80011ac:	425b      	negs	r3, r3
 80011ae:	469c      	mov	ip, r3
 80011b0:	002e      	movs	r6, r5
 80011b2:	4640      	mov	r0, r8
 80011b4:	2500      	movs	r5, #0
 80011b6:	44e3      	add	fp, ip
 80011b8:	0223      	lsls	r3, r4, #8
 80011ba:	0e14      	lsrs	r4, r2, #24
 80011bc:	431c      	orrs	r4, r3
 80011be:	0c1b      	lsrs	r3, r3, #16
 80011c0:	4699      	mov	r9, r3
 80011c2:	0423      	lsls	r3, r4, #16
 80011c4:	0c1f      	lsrs	r7, r3, #16
 80011c6:	0212      	lsls	r2, r2, #8
 80011c8:	4649      	mov	r1, r9
 80011ca:	9200      	str	r2, [sp, #0]
 80011cc:	9701      	str	r7, [sp, #4]
 80011ce:	f7ff f845 	bl	800025c <__aeabi_uidivmod>
 80011d2:	0002      	movs	r2, r0
 80011d4:	437a      	muls	r2, r7
 80011d6:	040b      	lsls	r3, r1, #16
 80011d8:	0c31      	lsrs	r1, r6, #16
 80011da:	4680      	mov	r8, r0
 80011dc:	4319      	orrs	r1, r3
 80011de:	428a      	cmp	r2, r1
 80011e0:	d90b      	bls.n	80011fa <__aeabi_ddiv+0x2c2>
 80011e2:	2301      	movs	r3, #1
 80011e4:	425b      	negs	r3, r3
 80011e6:	469c      	mov	ip, r3
 80011e8:	1909      	adds	r1, r1, r4
 80011ea:	44e0      	add	r8, ip
 80011ec:	428c      	cmp	r4, r1
 80011ee:	d804      	bhi.n	80011fa <__aeabi_ddiv+0x2c2>
 80011f0:	428a      	cmp	r2, r1
 80011f2:	d902      	bls.n	80011fa <__aeabi_ddiv+0x2c2>
 80011f4:	1e83      	subs	r3, r0, #2
 80011f6:	4698      	mov	r8, r3
 80011f8:	1909      	adds	r1, r1, r4
 80011fa:	1a88      	subs	r0, r1, r2
 80011fc:	4649      	mov	r1, r9
 80011fe:	f7ff f82d 	bl	800025c <__aeabi_uidivmod>
 8001202:	0409      	lsls	r1, r1, #16
 8001204:	468c      	mov	ip, r1
 8001206:	0431      	lsls	r1, r6, #16
 8001208:	4666      	mov	r6, ip
 800120a:	9a01      	ldr	r2, [sp, #4]
 800120c:	0c09      	lsrs	r1, r1, #16
 800120e:	4342      	muls	r2, r0
 8001210:	0003      	movs	r3, r0
 8001212:	4331      	orrs	r1, r6
 8001214:	428a      	cmp	r2, r1
 8001216:	d904      	bls.n	8001222 <__aeabi_ddiv+0x2ea>
 8001218:	1909      	adds	r1, r1, r4
 800121a:	3b01      	subs	r3, #1
 800121c:	428c      	cmp	r4, r1
 800121e:	d800      	bhi.n	8001222 <__aeabi_ddiv+0x2ea>
 8001220:	e111      	b.n	8001446 <__aeabi_ddiv+0x50e>
 8001222:	1a89      	subs	r1, r1, r2
 8001224:	4642      	mov	r2, r8
 8001226:	9e00      	ldr	r6, [sp, #0]
 8001228:	0412      	lsls	r2, r2, #16
 800122a:	431a      	orrs	r2, r3
 800122c:	0c33      	lsrs	r3, r6, #16
 800122e:	001f      	movs	r7, r3
 8001230:	0c10      	lsrs	r0, r2, #16
 8001232:	4690      	mov	r8, r2
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	0413      	lsls	r3, r2, #16
 8001238:	0432      	lsls	r2, r6, #16
 800123a:	0c16      	lsrs	r6, r2, #16
 800123c:	0032      	movs	r2, r6
 800123e:	0c1b      	lsrs	r3, r3, #16
 8001240:	435a      	muls	r2, r3
 8001242:	9603      	str	r6, [sp, #12]
 8001244:	437b      	muls	r3, r7
 8001246:	4346      	muls	r6, r0
 8001248:	4378      	muls	r0, r7
 800124a:	0c17      	lsrs	r7, r2, #16
 800124c:	46bc      	mov	ip, r7
 800124e:	199b      	adds	r3, r3, r6
 8001250:	4463      	add	r3, ip
 8001252:	429e      	cmp	r6, r3
 8001254:	d903      	bls.n	800125e <__aeabi_ddiv+0x326>
 8001256:	2680      	movs	r6, #128	; 0x80
 8001258:	0276      	lsls	r6, r6, #9
 800125a:	46b4      	mov	ip, r6
 800125c:	4460      	add	r0, ip
 800125e:	0c1e      	lsrs	r6, r3, #16
 8001260:	1830      	adds	r0, r6, r0
 8001262:	0416      	lsls	r6, r2, #16
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	0c36      	lsrs	r6, r6, #16
 8001268:	199e      	adds	r6, r3, r6
 800126a:	4281      	cmp	r1, r0
 800126c:	d200      	bcs.n	8001270 <__aeabi_ddiv+0x338>
 800126e:	e09c      	b.n	80013aa <__aeabi_ddiv+0x472>
 8001270:	d100      	bne.n	8001274 <__aeabi_ddiv+0x33c>
 8001272:	e097      	b.n	80013a4 <__aeabi_ddiv+0x46c>
 8001274:	1bae      	subs	r6, r5, r6
 8001276:	1a09      	subs	r1, r1, r0
 8001278:	42b5      	cmp	r5, r6
 800127a:	4180      	sbcs	r0, r0
 800127c:	4240      	negs	r0, r0
 800127e:	1a08      	subs	r0, r1, r0
 8001280:	4284      	cmp	r4, r0
 8001282:	d100      	bne.n	8001286 <__aeabi_ddiv+0x34e>
 8001284:	e111      	b.n	80014aa <__aeabi_ddiv+0x572>
 8001286:	4649      	mov	r1, r9
 8001288:	f7fe ffe8 	bl	800025c <__aeabi_uidivmod>
 800128c:	9a01      	ldr	r2, [sp, #4]
 800128e:	040b      	lsls	r3, r1, #16
 8001290:	4342      	muls	r2, r0
 8001292:	0c31      	lsrs	r1, r6, #16
 8001294:	0005      	movs	r5, r0
 8001296:	4319      	orrs	r1, r3
 8001298:	428a      	cmp	r2, r1
 800129a:	d907      	bls.n	80012ac <__aeabi_ddiv+0x374>
 800129c:	1909      	adds	r1, r1, r4
 800129e:	3d01      	subs	r5, #1
 80012a0:	428c      	cmp	r4, r1
 80012a2:	d803      	bhi.n	80012ac <__aeabi_ddiv+0x374>
 80012a4:	428a      	cmp	r2, r1
 80012a6:	d901      	bls.n	80012ac <__aeabi_ddiv+0x374>
 80012a8:	1e85      	subs	r5, r0, #2
 80012aa:	1909      	adds	r1, r1, r4
 80012ac:	1a88      	subs	r0, r1, r2
 80012ae:	4649      	mov	r1, r9
 80012b0:	f7fe ffd4 	bl	800025c <__aeabi_uidivmod>
 80012b4:	0409      	lsls	r1, r1, #16
 80012b6:	468c      	mov	ip, r1
 80012b8:	0431      	lsls	r1, r6, #16
 80012ba:	4666      	mov	r6, ip
 80012bc:	9a01      	ldr	r2, [sp, #4]
 80012be:	0c09      	lsrs	r1, r1, #16
 80012c0:	4342      	muls	r2, r0
 80012c2:	0003      	movs	r3, r0
 80012c4:	4331      	orrs	r1, r6
 80012c6:	428a      	cmp	r2, r1
 80012c8:	d907      	bls.n	80012da <__aeabi_ddiv+0x3a2>
 80012ca:	1909      	adds	r1, r1, r4
 80012cc:	3b01      	subs	r3, #1
 80012ce:	428c      	cmp	r4, r1
 80012d0:	d803      	bhi.n	80012da <__aeabi_ddiv+0x3a2>
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d901      	bls.n	80012da <__aeabi_ddiv+0x3a2>
 80012d6:	1e83      	subs	r3, r0, #2
 80012d8:	1909      	adds	r1, r1, r4
 80012da:	9e03      	ldr	r6, [sp, #12]
 80012dc:	1a89      	subs	r1, r1, r2
 80012de:	0032      	movs	r2, r6
 80012e0:	042d      	lsls	r5, r5, #16
 80012e2:	431d      	orrs	r5, r3
 80012e4:	9f02      	ldr	r7, [sp, #8]
 80012e6:	042b      	lsls	r3, r5, #16
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	435a      	muls	r2, r3
 80012ec:	437b      	muls	r3, r7
 80012ee:	469c      	mov	ip, r3
 80012f0:	0c28      	lsrs	r0, r5, #16
 80012f2:	4346      	muls	r6, r0
 80012f4:	0c13      	lsrs	r3, r2, #16
 80012f6:	44b4      	add	ip, r6
 80012f8:	4463      	add	r3, ip
 80012fa:	4378      	muls	r0, r7
 80012fc:	429e      	cmp	r6, r3
 80012fe:	d903      	bls.n	8001308 <__aeabi_ddiv+0x3d0>
 8001300:	2680      	movs	r6, #128	; 0x80
 8001302:	0276      	lsls	r6, r6, #9
 8001304:	46b4      	mov	ip, r6
 8001306:	4460      	add	r0, ip
 8001308:	0c1e      	lsrs	r6, r3, #16
 800130a:	0412      	lsls	r2, r2, #16
 800130c:	041b      	lsls	r3, r3, #16
 800130e:	0c12      	lsrs	r2, r2, #16
 8001310:	1830      	adds	r0, r6, r0
 8001312:	189b      	adds	r3, r3, r2
 8001314:	4281      	cmp	r1, r0
 8001316:	d306      	bcc.n	8001326 <__aeabi_ddiv+0x3ee>
 8001318:	d002      	beq.n	8001320 <__aeabi_ddiv+0x3e8>
 800131a:	2301      	movs	r3, #1
 800131c:	431d      	orrs	r5, r3
 800131e:	e6ce      	b.n	80010be <__aeabi_ddiv+0x186>
 8001320:	2b00      	cmp	r3, #0
 8001322:	d100      	bne.n	8001326 <__aeabi_ddiv+0x3ee>
 8001324:	e6cb      	b.n	80010be <__aeabi_ddiv+0x186>
 8001326:	1861      	adds	r1, r4, r1
 8001328:	1e6e      	subs	r6, r5, #1
 800132a:	42a1      	cmp	r1, r4
 800132c:	d200      	bcs.n	8001330 <__aeabi_ddiv+0x3f8>
 800132e:	e0a4      	b.n	800147a <__aeabi_ddiv+0x542>
 8001330:	4281      	cmp	r1, r0
 8001332:	d200      	bcs.n	8001336 <__aeabi_ddiv+0x3fe>
 8001334:	e0c9      	b.n	80014ca <__aeabi_ddiv+0x592>
 8001336:	d100      	bne.n	800133a <__aeabi_ddiv+0x402>
 8001338:	e0d9      	b.n	80014ee <__aeabi_ddiv+0x5b6>
 800133a:	0035      	movs	r5, r6
 800133c:	e7ed      	b.n	800131a <__aeabi_ddiv+0x3e2>
 800133e:	2501      	movs	r5, #1
 8001340:	426d      	negs	r5, r5
 8001342:	2101      	movs	r1, #1
 8001344:	1a89      	subs	r1, r1, r2
 8001346:	2938      	cmp	r1, #56	; 0x38
 8001348:	dd00      	ble.n	800134c <__aeabi_ddiv+0x414>
 800134a:	e64c      	b.n	8000fe6 <__aeabi_ddiv+0xae>
 800134c:	291f      	cmp	r1, #31
 800134e:	dc00      	bgt.n	8001352 <__aeabi_ddiv+0x41a>
 8001350:	e07f      	b.n	8001452 <__aeabi_ddiv+0x51a>
 8001352:	231f      	movs	r3, #31
 8001354:	425b      	negs	r3, r3
 8001356:	1a9a      	subs	r2, r3, r2
 8001358:	4643      	mov	r3, r8
 800135a:	40d3      	lsrs	r3, r2
 800135c:	2920      	cmp	r1, #32
 800135e:	d004      	beq.n	800136a <__aeabi_ddiv+0x432>
 8001360:	4644      	mov	r4, r8
 8001362:	4a65      	ldr	r2, [pc, #404]	; (80014f8 <__aeabi_ddiv+0x5c0>)
 8001364:	445a      	add	r2, fp
 8001366:	4094      	lsls	r4, r2
 8001368:	4325      	orrs	r5, r4
 800136a:	1e6a      	subs	r2, r5, #1
 800136c:	4195      	sbcs	r5, r2
 800136e:	2207      	movs	r2, #7
 8001370:	432b      	orrs	r3, r5
 8001372:	0015      	movs	r5, r2
 8001374:	2400      	movs	r4, #0
 8001376:	401d      	ands	r5, r3
 8001378:	421a      	tst	r2, r3
 800137a:	d100      	bne.n	800137e <__aeabi_ddiv+0x446>
 800137c:	e0a1      	b.n	80014c2 <__aeabi_ddiv+0x58a>
 800137e:	220f      	movs	r2, #15
 8001380:	2400      	movs	r4, #0
 8001382:	401a      	ands	r2, r3
 8001384:	2a04      	cmp	r2, #4
 8001386:	d100      	bne.n	800138a <__aeabi_ddiv+0x452>
 8001388:	e098      	b.n	80014bc <__aeabi_ddiv+0x584>
 800138a:	1d1a      	adds	r2, r3, #4
 800138c:	429a      	cmp	r2, r3
 800138e:	419b      	sbcs	r3, r3
 8001390:	425b      	negs	r3, r3
 8001392:	18e4      	adds	r4, r4, r3
 8001394:	0013      	movs	r3, r2
 8001396:	0222      	lsls	r2, r4, #8
 8001398:	d400      	bmi.n	800139c <__aeabi_ddiv+0x464>
 800139a:	e08f      	b.n	80014bc <__aeabi_ddiv+0x584>
 800139c:	2301      	movs	r3, #1
 800139e:	2400      	movs	r4, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e623      	b.n	8000fec <__aeabi_ddiv+0xb4>
 80013a4:	42b5      	cmp	r5, r6
 80013a6:	d300      	bcc.n	80013aa <__aeabi_ddiv+0x472>
 80013a8:	e764      	b.n	8001274 <__aeabi_ddiv+0x33c>
 80013aa:	4643      	mov	r3, r8
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	9b00      	ldr	r3, [sp, #0]
 80013b0:	469c      	mov	ip, r3
 80013b2:	4465      	add	r5, ip
 80013b4:	001f      	movs	r7, r3
 80013b6:	429d      	cmp	r5, r3
 80013b8:	419b      	sbcs	r3, r3
 80013ba:	425b      	negs	r3, r3
 80013bc:	191b      	adds	r3, r3, r4
 80013be:	18c9      	adds	r1, r1, r3
 80013c0:	428c      	cmp	r4, r1
 80013c2:	d23a      	bcs.n	800143a <__aeabi_ddiv+0x502>
 80013c4:	4288      	cmp	r0, r1
 80013c6:	d863      	bhi.n	8001490 <__aeabi_ddiv+0x558>
 80013c8:	d060      	beq.n	800148c <__aeabi_ddiv+0x554>
 80013ca:	4690      	mov	r8, r2
 80013cc:	e752      	b.n	8001274 <__aeabi_ddiv+0x33c>
 80013ce:	42aa      	cmp	r2, r5
 80013d0:	d900      	bls.n	80013d4 <__aeabi_ddiv+0x49c>
 80013d2:	e6ea      	b.n	80011aa <__aeabi_ddiv+0x272>
 80013d4:	4643      	mov	r3, r8
 80013d6:	07de      	lsls	r6, r3, #31
 80013d8:	0858      	lsrs	r0, r3, #1
 80013da:	086b      	lsrs	r3, r5, #1
 80013dc:	431e      	orrs	r6, r3
 80013de:	07ed      	lsls	r5, r5, #31
 80013e0:	e6ea      	b.n	80011b8 <__aeabi_ddiv+0x280>
 80013e2:	4648      	mov	r0, r9
 80013e4:	f001 f926 	bl	8002634 <__clzsi2>
 80013e8:	0001      	movs	r1, r0
 80013ea:	0002      	movs	r2, r0
 80013ec:	3115      	adds	r1, #21
 80013ee:	3220      	adds	r2, #32
 80013f0:	291c      	cmp	r1, #28
 80013f2:	dc00      	bgt.n	80013f6 <__aeabi_ddiv+0x4be>
 80013f4:	e61a      	b.n	800102c <__aeabi_ddiv+0xf4>
 80013f6:	464b      	mov	r3, r9
 80013f8:	3808      	subs	r0, #8
 80013fa:	4083      	lsls	r3, r0
 80013fc:	2500      	movs	r5, #0
 80013fe:	4698      	mov	r8, r3
 8001400:	e620      	b.n	8001044 <__aeabi_ddiv+0x10c>
 8001402:	f001 f917 	bl	8002634 <__clzsi2>
 8001406:	0003      	movs	r3, r0
 8001408:	001a      	movs	r2, r3
 800140a:	3215      	adds	r2, #21
 800140c:	3020      	adds	r0, #32
 800140e:	2a1c      	cmp	r2, #28
 8001410:	dc00      	bgt.n	8001414 <__aeabi_ddiv+0x4dc>
 8001412:	e630      	b.n	8001076 <__aeabi_ddiv+0x13e>
 8001414:	4654      	mov	r4, sl
 8001416:	3b08      	subs	r3, #8
 8001418:	2200      	movs	r2, #0
 800141a:	409c      	lsls	r4, r3
 800141c:	e635      	b.n	800108a <__aeabi_ddiv+0x152>
 800141e:	230f      	movs	r3, #15
 8001420:	402b      	ands	r3, r5
 8001422:	2b04      	cmp	r3, #4
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x4f0>
 8001426:	e652      	b.n	80010ce <__aeabi_ddiv+0x196>
 8001428:	2305      	movs	r3, #5
 800142a:	425b      	negs	r3, r3
 800142c:	42ab      	cmp	r3, r5
 800142e:	419b      	sbcs	r3, r3
 8001430:	3504      	adds	r5, #4
 8001432:	425b      	negs	r3, r3
 8001434:	08ed      	lsrs	r5, r5, #3
 8001436:	4498      	add	r8, r3
 8001438:	e64a      	b.n	80010d0 <__aeabi_ddiv+0x198>
 800143a:	428c      	cmp	r4, r1
 800143c:	d1c5      	bne.n	80013ca <__aeabi_ddiv+0x492>
 800143e:	42af      	cmp	r7, r5
 8001440:	d9c0      	bls.n	80013c4 <__aeabi_ddiv+0x48c>
 8001442:	4690      	mov	r8, r2
 8001444:	e716      	b.n	8001274 <__aeabi_ddiv+0x33c>
 8001446:	428a      	cmp	r2, r1
 8001448:	d800      	bhi.n	800144c <__aeabi_ddiv+0x514>
 800144a:	e6ea      	b.n	8001222 <__aeabi_ddiv+0x2ea>
 800144c:	1e83      	subs	r3, r0, #2
 800144e:	1909      	adds	r1, r1, r4
 8001450:	e6e7      	b.n	8001222 <__aeabi_ddiv+0x2ea>
 8001452:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <__aeabi_ddiv+0x5c4>)
 8001454:	0028      	movs	r0, r5
 8001456:	445a      	add	r2, fp
 8001458:	4643      	mov	r3, r8
 800145a:	4095      	lsls	r5, r2
 800145c:	4093      	lsls	r3, r2
 800145e:	40c8      	lsrs	r0, r1
 8001460:	1e6a      	subs	r2, r5, #1
 8001462:	4195      	sbcs	r5, r2
 8001464:	4644      	mov	r4, r8
 8001466:	4303      	orrs	r3, r0
 8001468:	432b      	orrs	r3, r5
 800146a:	40cc      	lsrs	r4, r1
 800146c:	075a      	lsls	r2, r3, #29
 800146e:	d092      	beq.n	8001396 <__aeabi_ddiv+0x45e>
 8001470:	220f      	movs	r2, #15
 8001472:	401a      	ands	r2, r3
 8001474:	2a04      	cmp	r2, #4
 8001476:	d188      	bne.n	800138a <__aeabi_ddiv+0x452>
 8001478:	e78d      	b.n	8001396 <__aeabi_ddiv+0x45e>
 800147a:	0035      	movs	r5, r6
 800147c:	4281      	cmp	r1, r0
 800147e:	d000      	beq.n	8001482 <__aeabi_ddiv+0x54a>
 8001480:	e74b      	b.n	800131a <__aeabi_ddiv+0x3e2>
 8001482:	9a00      	ldr	r2, [sp, #0]
 8001484:	4293      	cmp	r3, r2
 8001486:	d000      	beq.n	800148a <__aeabi_ddiv+0x552>
 8001488:	e747      	b.n	800131a <__aeabi_ddiv+0x3e2>
 800148a:	e618      	b.n	80010be <__aeabi_ddiv+0x186>
 800148c:	42ae      	cmp	r6, r5
 800148e:	d99c      	bls.n	80013ca <__aeabi_ddiv+0x492>
 8001490:	2302      	movs	r3, #2
 8001492:	425b      	negs	r3, r3
 8001494:	469c      	mov	ip, r3
 8001496:	9b00      	ldr	r3, [sp, #0]
 8001498:	44e0      	add	r8, ip
 800149a:	469c      	mov	ip, r3
 800149c:	4465      	add	r5, ip
 800149e:	429d      	cmp	r5, r3
 80014a0:	419b      	sbcs	r3, r3
 80014a2:	425b      	negs	r3, r3
 80014a4:	191b      	adds	r3, r3, r4
 80014a6:	18c9      	adds	r1, r1, r3
 80014a8:	e6e4      	b.n	8001274 <__aeabi_ddiv+0x33c>
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <__aeabi_ddiv+0x5c8>)
 80014ac:	445a      	add	r2, fp
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	dc00      	bgt.n	80014b4 <__aeabi_ddiv+0x57c>
 80014b2:	e744      	b.n	800133e <__aeabi_ddiv+0x406>
 80014b4:	2301      	movs	r3, #1
 80014b6:	2500      	movs	r5, #0
 80014b8:	4498      	add	r8, r3
 80014ba:	e609      	b.n	80010d0 <__aeabi_ddiv+0x198>
 80014bc:	0765      	lsls	r5, r4, #29
 80014be:	0264      	lsls	r4, r4, #9
 80014c0:	0b24      	lsrs	r4, r4, #12
 80014c2:	08db      	lsrs	r3, r3, #3
 80014c4:	431d      	orrs	r5, r3
 80014c6:	2300      	movs	r3, #0
 80014c8:	e590      	b.n	8000fec <__aeabi_ddiv+0xb4>
 80014ca:	9e00      	ldr	r6, [sp, #0]
 80014cc:	3d02      	subs	r5, #2
 80014ce:	0072      	lsls	r2, r6, #1
 80014d0:	42b2      	cmp	r2, r6
 80014d2:	41bf      	sbcs	r7, r7
 80014d4:	427f      	negs	r7, r7
 80014d6:	193c      	adds	r4, r7, r4
 80014d8:	1909      	adds	r1, r1, r4
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	e7ce      	b.n	800147c <__aeabi_ddiv+0x544>
 80014de:	2480      	movs	r4, #128	; 0x80
 80014e0:	4643      	mov	r3, r8
 80014e2:	0324      	lsls	r4, r4, #12
 80014e4:	431c      	orrs	r4, r3
 80014e6:	0324      	lsls	r4, r4, #12
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <__aeabi_ddiv+0x5cc>)
 80014ea:	0b24      	lsrs	r4, r4, #12
 80014ec:	e57e      	b.n	8000fec <__aeabi_ddiv+0xb4>
 80014ee:	9a00      	ldr	r2, [sp, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3ea      	bcc.n	80014ca <__aeabi_ddiv+0x592>
 80014f4:	0035      	movs	r5, r6
 80014f6:	e7c4      	b.n	8001482 <__aeabi_ddiv+0x54a>
 80014f8:	0000043e 	.word	0x0000043e
 80014fc:	0000041e 	.word	0x0000041e
 8001500:	000003ff 	.word	0x000003ff
 8001504:	000007ff 	.word	0x000007ff

08001508 <__eqdf2>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	464f      	mov	r7, r9
 800150c:	4646      	mov	r6, r8
 800150e:	46d6      	mov	lr, sl
 8001510:	4694      	mov	ip, r2
 8001512:	4691      	mov	r9, r2
 8001514:	031a      	lsls	r2, r3, #12
 8001516:	0b12      	lsrs	r2, r2, #12
 8001518:	4d18      	ldr	r5, [pc, #96]	; (800157c <__eqdf2+0x74>)
 800151a:	b5c0      	push	{r6, r7, lr}
 800151c:	004c      	lsls	r4, r1, #1
 800151e:	030f      	lsls	r7, r1, #12
 8001520:	4692      	mov	sl, r2
 8001522:	005a      	lsls	r2, r3, #1
 8001524:	0006      	movs	r6, r0
 8001526:	4680      	mov	r8, r0
 8001528:	0b3f      	lsrs	r7, r7, #12
 800152a:	2001      	movs	r0, #1
 800152c:	0d64      	lsrs	r4, r4, #21
 800152e:	0fc9      	lsrs	r1, r1, #31
 8001530:	0d52      	lsrs	r2, r2, #21
 8001532:	0fdb      	lsrs	r3, r3, #31
 8001534:	42ac      	cmp	r4, r5
 8001536:	d00a      	beq.n	800154e <__eqdf2+0x46>
 8001538:	42aa      	cmp	r2, r5
 800153a:	d003      	beq.n	8001544 <__eqdf2+0x3c>
 800153c:	4294      	cmp	r4, r2
 800153e:	d101      	bne.n	8001544 <__eqdf2+0x3c>
 8001540:	4557      	cmp	r7, sl
 8001542:	d00d      	beq.n	8001560 <__eqdf2+0x58>
 8001544:	bce0      	pop	{r5, r6, r7}
 8001546:	46ba      	mov	sl, r7
 8001548:	46b1      	mov	r9, r6
 800154a:	46a8      	mov	r8, r5
 800154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154e:	003d      	movs	r5, r7
 8001550:	4335      	orrs	r5, r6
 8001552:	d1f7      	bne.n	8001544 <__eqdf2+0x3c>
 8001554:	42a2      	cmp	r2, r4
 8001556:	d1f5      	bne.n	8001544 <__eqdf2+0x3c>
 8001558:	4652      	mov	r2, sl
 800155a:	4665      	mov	r5, ip
 800155c:	432a      	orrs	r2, r5
 800155e:	d1f1      	bne.n	8001544 <__eqdf2+0x3c>
 8001560:	2001      	movs	r0, #1
 8001562:	45c8      	cmp	r8, r9
 8001564:	d1ee      	bne.n	8001544 <__eqdf2+0x3c>
 8001566:	4299      	cmp	r1, r3
 8001568:	d006      	beq.n	8001578 <__eqdf2+0x70>
 800156a:	2c00      	cmp	r4, #0
 800156c:	d1ea      	bne.n	8001544 <__eqdf2+0x3c>
 800156e:	433e      	orrs	r6, r7
 8001570:	0030      	movs	r0, r6
 8001572:	1e46      	subs	r6, r0, #1
 8001574:	41b0      	sbcs	r0, r6
 8001576:	e7e5      	b.n	8001544 <__eqdf2+0x3c>
 8001578:	2000      	movs	r0, #0
 800157a:	e7e3      	b.n	8001544 <__eqdf2+0x3c>
 800157c:	000007ff 	.word	0x000007ff

08001580 <__gedf2>:
 8001580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001582:	464e      	mov	r6, r9
 8001584:	4645      	mov	r5, r8
 8001586:	4657      	mov	r7, sl
 8001588:	46de      	mov	lr, fp
 800158a:	0004      	movs	r4, r0
 800158c:	0018      	movs	r0, r3
 800158e:	b5e0      	push	{r5, r6, r7, lr}
 8001590:	0016      	movs	r6, r2
 8001592:	031b      	lsls	r3, r3, #12
 8001594:	0b1b      	lsrs	r3, r3, #12
 8001596:	4d32      	ldr	r5, [pc, #200]	; (8001660 <__gedf2+0xe0>)
 8001598:	030f      	lsls	r7, r1, #12
 800159a:	004a      	lsls	r2, r1, #1
 800159c:	4699      	mov	r9, r3
 800159e:	0043      	lsls	r3, r0, #1
 80015a0:	46a4      	mov	ip, r4
 80015a2:	46b0      	mov	r8, r6
 80015a4:	0b3f      	lsrs	r7, r7, #12
 80015a6:	0d52      	lsrs	r2, r2, #21
 80015a8:	0fc9      	lsrs	r1, r1, #31
 80015aa:	0d5b      	lsrs	r3, r3, #21
 80015ac:	0fc0      	lsrs	r0, r0, #31
 80015ae:	42aa      	cmp	r2, r5
 80015b0:	d029      	beq.n	8001606 <__gedf2+0x86>
 80015b2:	42ab      	cmp	r3, r5
 80015b4:	d018      	beq.n	80015e8 <__gedf2+0x68>
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	d12a      	bne.n	8001610 <__gedf2+0x90>
 80015ba:	433c      	orrs	r4, r7
 80015bc:	46a3      	mov	fp, r4
 80015be:	4265      	negs	r5, r4
 80015c0:	4165      	adcs	r5, r4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <__gedf2+0x4c>
 80015c6:	464c      	mov	r4, r9
 80015c8:	4326      	orrs	r6, r4
 80015ca:	d027      	beq.n	800161c <__gedf2+0x9c>
 80015cc:	2d00      	cmp	r5, #0
 80015ce:	d115      	bne.n	80015fc <__gedf2+0x7c>
 80015d0:	4281      	cmp	r1, r0
 80015d2:	d028      	beq.n	8001626 <__gedf2+0xa6>
 80015d4:	2002      	movs	r0, #2
 80015d6:	3901      	subs	r1, #1
 80015d8:	4008      	ands	r0, r1
 80015da:	3801      	subs	r0, #1
 80015dc:	bcf0      	pop	{r4, r5, r6, r7}
 80015de:	46bb      	mov	fp, r7
 80015e0:	46b2      	mov	sl, r6
 80015e2:	46a9      	mov	r9, r5
 80015e4:	46a0      	mov	r8, r4
 80015e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e8:	464d      	mov	r5, r9
 80015ea:	432e      	orrs	r6, r5
 80015ec:	d12f      	bne.n	800164e <__gedf2+0xce>
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d1ee      	bne.n	80015d0 <__gedf2+0x50>
 80015f2:	433c      	orrs	r4, r7
 80015f4:	4265      	negs	r5, r4
 80015f6:	4165      	adcs	r5, r4
 80015f8:	2d00      	cmp	r5, #0
 80015fa:	d0e9      	beq.n	80015d0 <__gedf2+0x50>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d1ed      	bne.n	80015dc <__gedf2+0x5c>
 8001600:	2001      	movs	r0, #1
 8001602:	4240      	negs	r0, r0
 8001604:	e7ea      	b.n	80015dc <__gedf2+0x5c>
 8001606:	003d      	movs	r5, r7
 8001608:	4325      	orrs	r5, r4
 800160a:	d120      	bne.n	800164e <__gedf2+0xce>
 800160c:	4293      	cmp	r3, r2
 800160e:	d0eb      	beq.n	80015e8 <__gedf2+0x68>
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1dd      	bne.n	80015d0 <__gedf2+0x50>
 8001614:	464c      	mov	r4, r9
 8001616:	4326      	orrs	r6, r4
 8001618:	d1da      	bne.n	80015d0 <__gedf2+0x50>
 800161a:	e7db      	b.n	80015d4 <__gedf2+0x54>
 800161c:	465b      	mov	r3, fp
 800161e:	2000      	movs	r0, #0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0db      	beq.n	80015dc <__gedf2+0x5c>
 8001624:	e7d6      	b.n	80015d4 <__gedf2+0x54>
 8001626:	429a      	cmp	r2, r3
 8001628:	dc0a      	bgt.n	8001640 <__gedf2+0xc0>
 800162a:	dbe7      	blt.n	80015fc <__gedf2+0x7c>
 800162c:	454f      	cmp	r7, r9
 800162e:	d8d1      	bhi.n	80015d4 <__gedf2+0x54>
 8001630:	d010      	beq.n	8001654 <__gedf2+0xd4>
 8001632:	2000      	movs	r0, #0
 8001634:	454f      	cmp	r7, r9
 8001636:	d2d1      	bcs.n	80015dc <__gedf2+0x5c>
 8001638:	2900      	cmp	r1, #0
 800163a:	d0e1      	beq.n	8001600 <__gedf2+0x80>
 800163c:	0008      	movs	r0, r1
 800163e:	e7cd      	b.n	80015dc <__gedf2+0x5c>
 8001640:	4243      	negs	r3, r0
 8001642:	4158      	adcs	r0, r3
 8001644:	2302      	movs	r3, #2
 8001646:	4240      	negs	r0, r0
 8001648:	4018      	ands	r0, r3
 800164a:	3801      	subs	r0, #1
 800164c:	e7c6      	b.n	80015dc <__gedf2+0x5c>
 800164e:	2002      	movs	r0, #2
 8001650:	4240      	negs	r0, r0
 8001652:	e7c3      	b.n	80015dc <__gedf2+0x5c>
 8001654:	45c4      	cmp	ip, r8
 8001656:	d8bd      	bhi.n	80015d4 <__gedf2+0x54>
 8001658:	2000      	movs	r0, #0
 800165a:	45c4      	cmp	ip, r8
 800165c:	d2be      	bcs.n	80015dc <__gedf2+0x5c>
 800165e:	e7eb      	b.n	8001638 <__gedf2+0xb8>
 8001660:	000007ff 	.word	0x000007ff

08001664 <__ledf2>:
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	464e      	mov	r6, r9
 8001668:	4645      	mov	r5, r8
 800166a:	4657      	mov	r7, sl
 800166c:	46de      	mov	lr, fp
 800166e:	0004      	movs	r4, r0
 8001670:	0018      	movs	r0, r3
 8001672:	b5e0      	push	{r5, r6, r7, lr}
 8001674:	0016      	movs	r6, r2
 8001676:	031b      	lsls	r3, r3, #12
 8001678:	0b1b      	lsrs	r3, r3, #12
 800167a:	4d31      	ldr	r5, [pc, #196]	; (8001740 <__ledf2+0xdc>)
 800167c:	030f      	lsls	r7, r1, #12
 800167e:	004a      	lsls	r2, r1, #1
 8001680:	4699      	mov	r9, r3
 8001682:	0043      	lsls	r3, r0, #1
 8001684:	46a4      	mov	ip, r4
 8001686:	46b0      	mov	r8, r6
 8001688:	0b3f      	lsrs	r7, r7, #12
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	0fc9      	lsrs	r1, r1, #31
 800168e:	0d5b      	lsrs	r3, r3, #21
 8001690:	0fc0      	lsrs	r0, r0, #31
 8001692:	42aa      	cmp	r2, r5
 8001694:	d011      	beq.n	80016ba <__ledf2+0x56>
 8001696:	42ab      	cmp	r3, r5
 8001698:	d014      	beq.n	80016c4 <__ledf2+0x60>
 800169a:	2a00      	cmp	r2, #0
 800169c:	d12f      	bne.n	80016fe <__ledf2+0x9a>
 800169e:	433c      	orrs	r4, r7
 80016a0:	46a3      	mov	fp, r4
 80016a2:	4265      	negs	r5, r4
 80016a4:	4165      	adcs	r5, r4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d114      	bne.n	80016d4 <__ledf2+0x70>
 80016aa:	464c      	mov	r4, r9
 80016ac:	4326      	orrs	r6, r4
 80016ae:	d111      	bne.n	80016d4 <__ledf2+0x70>
 80016b0:	465b      	mov	r3, fp
 80016b2:	2000      	movs	r0, #0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d017      	beq.n	80016e8 <__ledf2+0x84>
 80016b8:	e010      	b.n	80016dc <__ledf2+0x78>
 80016ba:	003d      	movs	r5, r7
 80016bc:	4325      	orrs	r5, r4
 80016be:	d112      	bne.n	80016e6 <__ledf2+0x82>
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d11c      	bne.n	80016fe <__ledf2+0x9a>
 80016c4:	464d      	mov	r5, r9
 80016c6:	432e      	orrs	r6, r5
 80016c8:	d10d      	bne.n	80016e6 <__ledf2+0x82>
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d104      	bne.n	80016d8 <__ledf2+0x74>
 80016ce:	433c      	orrs	r4, r7
 80016d0:	4265      	negs	r5, r4
 80016d2:	4165      	adcs	r5, r4
 80016d4:	2d00      	cmp	r5, #0
 80016d6:	d10d      	bne.n	80016f4 <__ledf2+0x90>
 80016d8:	4281      	cmp	r1, r0
 80016da:	d016      	beq.n	800170a <__ledf2+0xa6>
 80016dc:	2002      	movs	r0, #2
 80016de:	3901      	subs	r1, #1
 80016e0:	4008      	ands	r0, r1
 80016e2:	3801      	subs	r0, #1
 80016e4:	e000      	b.n	80016e8 <__ledf2+0x84>
 80016e6:	2002      	movs	r0, #2
 80016e8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ea:	46bb      	mov	fp, r7
 80016ec:	46b2      	mov	sl, r6
 80016ee:	46a9      	mov	r9, r5
 80016f0:	46a0      	mov	r8, r4
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d1f7      	bne.n	80016e8 <__ledf2+0x84>
 80016f8:	2001      	movs	r0, #1
 80016fa:	4240      	negs	r0, r0
 80016fc:	e7f4      	b.n	80016e8 <__ledf2+0x84>
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ea      	bne.n	80016d8 <__ledf2+0x74>
 8001702:	464c      	mov	r4, r9
 8001704:	4326      	orrs	r6, r4
 8001706:	d1e7      	bne.n	80016d8 <__ledf2+0x74>
 8001708:	e7e8      	b.n	80016dc <__ledf2+0x78>
 800170a:	429a      	cmp	r2, r3
 800170c:	dd06      	ble.n	800171c <__ledf2+0xb8>
 800170e:	4243      	negs	r3, r0
 8001710:	4158      	adcs	r0, r3
 8001712:	2302      	movs	r3, #2
 8001714:	4240      	negs	r0, r0
 8001716:	4018      	ands	r0, r3
 8001718:	3801      	subs	r0, #1
 800171a:	e7e5      	b.n	80016e8 <__ledf2+0x84>
 800171c:	429a      	cmp	r2, r3
 800171e:	dbe9      	blt.n	80016f4 <__ledf2+0x90>
 8001720:	454f      	cmp	r7, r9
 8001722:	d8db      	bhi.n	80016dc <__ledf2+0x78>
 8001724:	d006      	beq.n	8001734 <__ledf2+0xd0>
 8001726:	2000      	movs	r0, #0
 8001728:	454f      	cmp	r7, r9
 800172a:	d2dd      	bcs.n	80016e8 <__ledf2+0x84>
 800172c:	2900      	cmp	r1, #0
 800172e:	d0e3      	beq.n	80016f8 <__ledf2+0x94>
 8001730:	0008      	movs	r0, r1
 8001732:	e7d9      	b.n	80016e8 <__ledf2+0x84>
 8001734:	45c4      	cmp	ip, r8
 8001736:	d8d1      	bhi.n	80016dc <__ledf2+0x78>
 8001738:	2000      	movs	r0, #0
 800173a:	45c4      	cmp	ip, r8
 800173c:	d2d4      	bcs.n	80016e8 <__ledf2+0x84>
 800173e:	e7f5      	b.n	800172c <__ledf2+0xc8>
 8001740:	000007ff 	.word	0x000007ff

08001744 <__aeabi_dmul>:
 8001744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001746:	4657      	mov	r7, sl
 8001748:	464e      	mov	r6, r9
 800174a:	4645      	mov	r5, r8
 800174c:	46de      	mov	lr, fp
 800174e:	b5e0      	push	{r5, r6, r7, lr}
 8001750:	4698      	mov	r8, r3
 8001752:	030c      	lsls	r4, r1, #12
 8001754:	004b      	lsls	r3, r1, #1
 8001756:	0006      	movs	r6, r0
 8001758:	4692      	mov	sl, r2
 800175a:	b087      	sub	sp, #28
 800175c:	0b24      	lsrs	r4, r4, #12
 800175e:	0d5b      	lsrs	r3, r3, #21
 8001760:	0fcf      	lsrs	r7, r1, #31
 8001762:	2b00      	cmp	r3, #0
 8001764:	d06c      	beq.n	8001840 <__aeabi_dmul+0xfc>
 8001766:	4add      	ldr	r2, [pc, #884]	; (8001adc <__aeabi_dmul+0x398>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d100      	bne.n	800176e <__aeabi_dmul+0x2a>
 800176c:	e086      	b.n	800187c <__aeabi_dmul+0x138>
 800176e:	0f42      	lsrs	r2, r0, #29
 8001770:	00e4      	lsls	r4, r4, #3
 8001772:	4314      	orrs	r4, r2
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	0412      	lsls	r2, r2, #16
 8001778:	4314      	orrs	r4, r2
 800177a:	4ad9      	ldr	r2, [pc, #868]	; (8001ae0 <__aeabi_dmul+0x39c>)
 800177c:	00c5      	lsls	r5, r0, #3
 800177e:	4694      	mov	ip, r2
 8001780:	4463      	add	r3, ip
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	4699      	mov	r9, r3
 8001788:	469b      	mov	fp, r3
 800178a:	4643      	mov	r3, r8
 800178c:	4642      	mov	r2, r8
 800178e:	031e      	lsls	r6, r3, #12
 8001790:	0fd2      	lsrs	r2, r2, #31
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4650      	mov	r0, sl
 8001796:	4690      	mov	r8, r2
 8001798:	0b36      	lsrs	r6, r6, #12
 800179a:	0d5b      	lsrs	r3, r3, #21
 800179c:	d100      	bne.n	80017a0 <__aeabi_dmul+0x5c>
 800179e:	e078      	b.n	8001892 <__aeabi_dmul+0x14e>
 80017a0:	4ace      	ldr	r2, [pc, #824]	; (8001adc <__aeabi_dmul+0x398>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d01d      	beq.n	80017e2 <__aeabi_dmul+0x9e>
 80017a6:	49ce      	ldr	r1, [pc, #824]	; (8001ae0 <__aeabi_dmul+0x39c>)
 80017a8:	0f42      	lsrs	r2, r0, #29
 80017aa:	468c      	mov	ip, r1
 80017ac:	9900      	ldr	r1, [sp, #0]
 80017ae:	4463      	add	r3, ip
 80017b0:	00f6      	lsls	r6, r6, #3
 80017b2:	468c      	mov	ip, r1
 80017b4:	4316      	orrs	r6, r2
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	449c      	add	ip, r3
 80017ba:	0412      	lsls	r2, r2, #16
 80017bc:	4663      	mov	r3, ip
 80017be:	4316      	orrs	r6, r2
 80017c0:	00c2      	lsls	r2, r0, #3
 80017c2:	2000      	movs	r0, #0
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	9900      	ldr	r1, [sp, #0]
 80017c8:	4643      	mov	r3, r8
 80017ca:	3101      	adds	r1, #1
 80017cc:	468c      	mov	ip, r1
 80017ce:	4649      	mov	r1, r9
 80017d0:	407b      	eors	r3, r7
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	290f      	cmp	r1, #15
 80017d6:	d900      	bls.n	80017da <__aeabi_dmul+0x96>
 80017d8:	e07e      	b.n	80018d8 <__aeabi_dmul+0x194>
 80017da:	4bc2      	ldr	r3, [pc, #776]	; (8001ae4 <__aeabi_dmul+0x3a0>)
 80017dc:	0089      	lsls	r1, r1, #2
 80017de:	5859      	ldr	r1, [r3, r1]
 80017e0:	468f      	mov	pc, r1
 80017e2:	4652      	mov	r2, sl
 80017e4:	9b00      	ldr	r3, [sp, #0]
 80017e6:	4332      	orrs	r2, r6
 80017e8:	d000      	beq.n	80017ec <__aeabi_dmul+0xa8>
 80017ea:	e156      	b.n	8001a9a <__aeabi_dmul+0x356>
 80017ec:	49bb      	ldr	r1, [pc, #748]	; (8001adc <__aeabi_dmul+0x398>)
 80017ee:	2600      	movs	r6, #0
 80017f0:	468c      	mov	ip, r1
 80017f2:	4463      	add	r3, ip
 80017f4:	4649      	mov	r1, r9
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2302      	movs	r3, #2
 80017fa:	4319      	orrs	r1, r3
 80017fc:	4689      	mov	r9, r1
 80017fe:	2002      	movs	r0, #2
 8001800:	e7e1      	b.n	80017c6 <__aeabi_dmul+0x82>
 8001802:	4643      	mov	r3, r8
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	0034      	movs	r4, r6
 8001808:	0015      	movs	r5, r2
 800180a:	4683      	mov	fp, r0
 800180c:	465b      	mov	r3, fp
 800180e:	2b02      	cmp	r3, #2
 8001810:	d05e      	beq.n	80018d0 <__aeabi_dmul+0x18c>
 8001812:	2b03      	cmp	r3, #3
 8001814:	d100      	bne.n	8001818 <__aeabi_dmul+0xd4>
 8001816:	e1f3      	b.n	8001c00 <__aeabi_dmul+0x4bc>
 8001818:	2b01      	cmp	r3, #1
 800181a:	d000      	beq.n	800181e <__aeabi_dmul+0xda>
 800181c:	e118      	b.n	8001a50 <__aeabi_dmul+0x30c>
 800181e:	2200      	movs	r2, #0
 8001820:	2400      	movs	r4, #0
 8001822:	2500      	movs	r5, #0
 8001824:	9b01      	ldr	r3, [sp, #4]
 8001826:	0512      	lsls	r2, r2, #20
 8001828:	4322      	orrs	r2, r4
 800182a:	07db      	lsls	r3, r3, #31
 800182c:	431a      	orrs	r2, r3
 800182e:	0028      	movs	r0, r5
 8001830:	0011      	movs	r1, r2
 8001832:	b007      	add	sp, #28
 8001834:	bcf0      	pop	{r4, r5, r6, r7}
 8001836:	46bb      	mov	fp, r7
 8001838:	46b2      	mov	sl, r6
 800183a:	46a9      	mov	r9, r5
 800183c:	46a0      	mov	r8, r4
 800183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001840:	0025      	movs	r5, r4
 8001842:	4305      	orrs	r5, r0
 8001844:	d100      	bne.n	8001848 <__aeabi_dmul+0x104>
 8001846:	e141      	b.n	8001acc <__aeabi_dmul+0x388>
 8001848:	2c00      	cmp	r4, #0
 800184a:	d100      	bne.n	800184e <__aeabi_dmul+0x10a>
 800184c:	e1ad      	b.n	8001baa <__aeabi_dmul+0x466>
 800184e:	0020      	movs	r0, r4
 8001850:	f000 fef0 	bl	8002634 <__clzsi2>
 8001854:	0001      	movs	r1, r0
 8001856:	0002      	movs	r2, r0
 8001858:	390b      	subs	r1, #11
 800185a:	231d      	movs	r3, #29
 800185c:	0010      	movs	r0, r2
 800185e:	1a5b      	subs	r3, r3, r1
 8001860:	0031      	movs	r1, r6
 8001862:	0035      	movs	r5, r6
 8001864:	3808      	subs	r0, #8
 8001866:	4084      	lsls	r4, r0
 8001868:	40d9      	lsrs	r1, r3
 800186a:	4085      	lsls	r5, r0
 800186c:	430c      	orrs	r4, r1
 800186e:	489e      	ldr	r0, [pc, #632]	; (8001ae8 <__aeabi_dmul+0x3a4>)
 8001870:	1a83      	subs	r3, r0, r2
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	4699      	mov	r9, r3
 8001878:	469b      	mov	fp, r3
 800187a:	e786      	b.n	800178a <__aeabi_dmul+0x46>
 800187c:	0005      	movs	r5, r0
 800187e:	4325      	orrs	r5, r4
 8001880:	d000      	beq.n	8001884 <__aeabi_dmul+0x140>
 8001882:	e11c      	b.n	8001abe <__aeabi_dmul+0x37a>
 8001884:	2208      	movs	r2, #8
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2302      	movs	r3, #2
 800188a:	2400      	movs	r4, #0
 800188c:	4691      	mov	r9, r2
 800188e:	469b      	mov	fp, r3
 8001890:	e77b      	b.n	800178a <__aeabi_dmul+0x46>
 8001892:	4652      	mov	r2, sl
 8001894:	4332      	orrs	r2, r6
 8001896:	d100      	bne.n	800189a <__aeabi_dmul+0x156>
 8001898:	e10a      	b.n	8001ab0 <__aeabi_dmul+0x36c>
 800189a:	2e00      	cmp	r6, #0
 800189c:	d100      	bne.n	80018a0 <__aeabi_dmul+0x15c>
 800189e:	e176      	b.n	8001b8e <__aeabi_dmul+0x44a>
 80018a0:	0030      	movs	r0, r6
 80018a2:	f000 fec7 	bl	8002634 <__clzsi2>
 80018a6:	0002      	movs	r2, r0
 80018a8:	3a0b      	subs	r2, #11
 80018aa:	231d      	movs	r3, #29
 80018ac:	0001      	movs	r1, r0
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	4652      	mov	r2, sl
 80018b2:	3908      	subs	r1, #8
 80018b4:	40da      	lsrs	r2, r3
 80018b6:	408e      	lsls	r6, r1
 80018b8:	4316      	orrs	r6, r2
 80018ba:	4652      	mov	r2, sl
 80018bc:	408a      	lsls	r2, r1
 80018be:	9b00      	ldr	r3, [sp, #0]
 80018c0:	4989      	ldr	r1, [pc, #548]	; (8001ae8 <__aeabi_dmul+0x3a4>)
 80018c2:	1a18      	subs	r0, r3, r0
 80018c4:	0003      	movs	r3, r0
 80018c6:	468c      	mov	ip, r1
 80018c8:	4463      	add	r3, ip
 80018ca:	2000      	movs	r0, #0
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	e77a      	b.n	80017c6 <__aeabi_dmul+0x82>
 80018d0:	2400      	movs	r4, #0
 80018d2:	2500      	movs	r5, #0
 80018d4:	4a81      	ldr	r2, [pc, #516]	; (8001adc <__aeabi_dmul+0x398>)
 80018d6:	e7a5      	b.n	8001824 <__aeabi_dmul+0xe0>
 80018d8:	0c2f      	lsrs	r7, r5, #16
 80018da:	042d      	lsls	r5, r5, #16
 80018dc:	0c2d      	lsrs	r5, r5, #16
 80018de:	002b      	movs	r3, r5
 80018e0:	0c11      	lsrs	r1, r2, #16
 80018e2:	0412      	lsls	r2, r2, #16
 80018e4:	0c12      	lsrs	r2, r2, #16
 80018e6:	4353      	muls	r3, r2
 80018e8:	4698      	mov	r8, r3
 80018ea:	0013      	movs	r3, r2
 80018ec:	0028      	movs	r0, r5
 80018ee:	437b      	muls	r3, r7
 80018f0:	4699      	mov	r9, r3
 80018f2:	4348      	muls	r0, r1
 80018f4:	4448      	add	r0, r9
 80018f6:	4683      	mov	fp, r0
 80018f8:	4640      	mov	r0, r8
 80018fa:	000b      	movs	r3, r1
 80018fc:	0c00      	lsrs	r0, r0, #16
 80018fe:	4682      	mov	sl, r0
 8001900:	4658      	mov	r0, fp
 8001902:	437b      	muls	r3, r7
 8001904:	4450      	add	r0, sl
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	4581      	cmp	r9, r0
 800190a:	d906      	bls.n	800191a <__aeabi_dmul+0x1d6>
 800190c:	469a      	mov	sl, r3
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	025b      	lsls	r3, r3, #9
 8001912:	4699      	mov	r9, r3
 8001914:	44ca      	add	sl, r9
 8001916:	4653      	mov	r3, sl
 8001918:	9302      	str	r3, [sp, #8]
 800191a:	0c03      	lsrs	r3, r0, #16
 800191c:	469b      	mov	fp, r3
 800191e:	4643      	mov	r3, r8
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	0400      	lsls	r0, r0, #16
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	4698      	mov	r8, r3
 8001928:	0003      	movs	r3, r0
 800192a:	4443      	add	r3, r8
 800192c:	9304      	str	r3, [sp, #16]
 800192e:	0c33      	lsrs	r3, r6, #16
 8001930:	4699      	mov	r9, r3
 8001932:	002b      	movs	r3, r5
 8001934:	0436      	lsls	r6, r6, #16
 8001936:	0c36      	lsrs	r6, r6, #16
 8001938:	4373      	muls	r3, r6
 800193a:	4698      	mov	r8, r3
 800193c:	0033      	movs	r3, r6
 800193e:	437b      	muls	r3, r7
 8001940:	469a      	mov	sl, r3
 8001942:	464b      	mov	r3, r9
 8001944:	435d      	muls	r5, r3
 8001946:	435f      	muls	r7, r3
 8001948:	4643      	mov	r3, r8
 800194a:	4455      	add	r5, sl
 800194c:	0c18      	lsrs	r0, r3, #16
 800194e:	1940      	adds	r0, r0, r5
 8001950:	4582      	cmp	sl, r0
 8001952:	d903      	bls.n	800195c <__aeabi_dmul+0x218>
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	025b      	lsls	r3, r3, #9
 8001958:	469a      	mov	sl, r3
 800195a:	4457      	add	r7, sl
 800195c:	0c05      	lsrs	r5, r0, #16
 800195e:	19eb      	adds	r3, r5, r7
 8001960:	9305      	str	r3, [sp, #20]
 8001962:	4643      	mov	r3, r8
 8001964:	041d      	lsls	r5, r3, #16
 8001966:	0c2d      	lsrs	r5, r5, #16
 8001968:	0400      	lsls	r0, r0, #16
 800196a:	1940      	adds	r0, r0, r5
 800196c:	0c25      	lsrs	r5, r4, #16
 800196e:	0424      	lsls	r4, r4, #16
 8001970:	0c24      	lsrs	r4, r4, #16
 8001972:	0027      	movs	r7, r4
 8001974:	4357      	muls	r7, r2
 8001976:	436a      	muls	r2, r5
 8001978:	4690      	mov	r8, r2
 800197a:	002a      	movs	r2, r5
 800197c:	0c3b      	lsrs	r3, r7, #16
 800197e:	469a      	mov	sl, r3
 8001980:	434a      	muls	r2, r1
 8001982:	4361      	muls	r1, r4
 8001984:	4441      	add	r1, r8
 8001986:	4451      	add	r1, sl
 8001988:	4483      	add	fp, r0
 800198a:	4588      	cmp	r8, r1
 800198c:	d903      	bls.n	8001996 <__aeabi_dmul+0x252>
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	4698      	mov	r8, r3
 8001994:	4442      	add	r2, r8
 8001996:	043f      	lsls	r7, r7, #16
 8001998:	0c0b      	lsrs	r3, r1, #16
 800199a:	0c3f      	lsrs	r7, r7, #16
 800199c:	0409      	lsls	r1, r1, #16
 800199e:	19c9      	adds	r1, r1, r7
 80019a0:	0027      	movs	r7, r4
 80019a2:	4698      	mov	r8, r3
 80019a4:	464b      	mov	r3, r9
 80019a6:	4377      	muls	r7, r6
 80019a8:	435c      	muls	r4, r3
 80019aa:	436e      	muls	r6, r5
 80019ac:	435d      	muls	r5, r3
 80019ae:	0c3b      	lsrs	r3, r7, #16
 80019b0:	4699      	mov	r9, r3
 80019b2:	19a4      	adds	r4, r4, r6
 80019b4:	444c      	add	r4, r9
 80019b6:	4442      	add	r2, r8
 80019b8:	9503      	str	r5, [sp, #12]
 80019ba:	42a6      	cmp	r6, r4
 80019bc:	d904      	bls.n	80019c8 <__aeabi_dmul+0x284>
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	4698      	mov	r8, r3
 80019c4:	4445      	add	r5, r8
 80019c6:	9503      	str	r5, [sp, #12]
 80019c8:	9b02      	ldr	r3, [sp, #8]
 80019ca:	043f      	lsls	r7, r7, #16
 80019cc:	445b      	add	r3, fp
 80019ce:	001e      	movs	r6, r3
 80019d0:	4283      	cmp	r3, r0
 80019d2:	4180      	sbcs	r0, r0
 80019d4:	0423      	lsls	r3, r4, #16
 80019d6:	4698      	mov	r8, r3
 80019d8:	9b05      	ldr	r3, [sp, #20]
 80019da:	0c3f      	lsrs	r7, r7, #16
 80019dc:	4447      	add	r7, r8
 80019de:	4698      	mov	r8, r3
 80019e0:	1876      	adds	r6, r6, r1
 80019e2:	428e      	cmp	r6, r1
 80019e4:	4189      	sbcs	r1, r1
 80019e6:	4447      	add	r7, r8
 80019e8:	4240      	negs	r0, r0
 80019ea:	183d      	adds	r5, r7, r0
 80019ec:	46a8      	mov	r8, r5
 80019ee:	4693      	mov	fp, r2
 80019f0:	4249      	negs	r1, r1
 80019f2:	468a      	mov	sl, r1
 80019f4:	44c3      	add	fp, r8
 80019f6:	429f      	cmp	r7, r3
 80019f8:	41bf      	sbcs	r7, r7
 80019fa:	4580      	cmp	r8, r0
 80019fc:	4180      	sbcs	r0, r0
 80019fe:	9b03      	ldr	r3, [sp, #12]
 8001a00:	44da      	add	sl, fp
 8001a02:	4698      	mov	r8, r3
 8001a04:	4653      	mov	r3, sl
 8001a06:	4240      	negs	r0, r0
 8001a08:	427f      	negs	r7, r7
 8001a0a:	4307      	orrs	r7, r0
 8001a0c:	0c24      	lsrs	r4, r4, #16
 8001a0e:	4593      	cmp	fp, r2
 8001a10:	4192      	sbcs	r2, r2
 8001a12:	458a      	cmp	sl, r1
 8001a14:	4189      	sbcs	r1, r1
 8001a16:	193f      	adds	r7, r7, r4
 8001a18:	0ddc      	lsrs	r4, r3, #23
 8001a1a:	9b04      	ldr	r3, [sp, #16]
 8001a1c:	0275      	lsls	r5, r6, #9
 8001a1e:	431d      	orrs	r5, r3
 8001a20:	1e68      	subs	r0, r5, #1
 8001a22:	4185      	sbcs	r5, r0
 8001a24:	4653      	mov	r3, sl
 8001a26:	4252      	negs	r2, r2
 8001a28:	4249      	negs	r1, r1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	18bf      	adds	r7, r7, r2
 8001a2e:	4447      	add	r7, r8
 8001a30:	0df6      	lsrs	r6, r6, #23
 8001a32:	027f      	lsls	r7, r7, #9
 8001a34:	4335      	orrs	r5, r6
 8001a36:	025a      	lsls	r2, r3, #9
 8001a38:	433c      	orrs	r4, r7
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	01fb      	lsls	r3, r7, #7
 8001a3e:	d400      	bmi.n	8001a42 <__aeabi_dmul+0x2fe>
 8001a40:	e0c1      	b.n	8001bc6 <__aeabi_dmul+0x482>
 8001a42:	2101      	movs	r1, #1
 8001a44:	086a      	lsrs	r2, r5, #1
 8001a46:	400d      	ands	r5, r1
 8001a48:	4315      	orrs	r5, r2
 8001a4a:	07e2      	lsls	r2, r4, #31
 8001a4c:	4315      	orrs	r5, r2
 8001a4e:	0864      	lsrs	r4, r4, #1
 8001a50:	4926      	ldr	r1, [pc, #152]	; (8001aec <__aeabi_dmul+0x3a8>)
 8001a52:	4461      	add	r1, ip
 8001a54:	2900      	cmp	r1, #0
 8001a56:	dd56      	ble.n	8001b06 <__aeabi_dmul+0x3c2>
 8001a58:	076b      	lsls	r3, r5, #29
 8001a5a:	d009      	beq.n	8001a70 <__aeabi_dmul+0x32c>
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	402a      	ands	r2, r5
 8001a60:	2a04      	cmp	r2, #4
 8001a62:	d005      	beq.n	8001a70 <__aeabi_dmul+0x32c>
 8001a64:	1d2a      	adds	r2, r5, #4
 8001a66:	42aa      	cmp	r2, r5
 8001a68:	41ad      	sbcs	r5, r5
 8001a6a:	426d      	negs	r5, r5
 8001a6c:	1964      	adds	r4, r4, r5
 8001a6e:	0015      	movs	r5, r2
 8001a70:	01e3      	lsls	r3, r4, #7
 8001a72:	d504      	bpl.n	8001a7e <__aeabi_dmul+0x33a>
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <__aeabi_dmul+0x3ac>)
 8001a78:	00c9      	lsls	r1, r1, #3
 8001a7a:	4014      	ands	r4, r2
 8001a7c:	4461      	add	r1, ip
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <__aeabi_dmul+0x3b0>)
 8001a80:	4291      	cmp	r1, r2
 8001a82:	dd00      	ble.n	8001a86 <__aeabi_dmul+0x342>
 8001a84:	e724      	b.n	80018d0 <__aeabi_dmul+0x18c>
 8001a86:	0762      	lsls	r2, r4, #29
 8001a88:	08ed      	lsrs	r5, r5, #3
 8001a8a:	0264      	lsls	r4, r4, #9
 8001a8c:	0549      	lsls	r1, r1, #21
 8001a8e:	4315      	orrs	r5, r2
 8001a90:	0b24      	lsrs	r4, r4, #12
 8001a92:	0d4a      	lsrs	r2, r1, #21
 8001a94:	e6c6      	b.n	8001824 <__aeabi_dmul+0xe0>
 8001a96:	9701      	str	r7, [sp, #4]
 8001a98:	e6b8      	b.n	800180c <__aeabi_dmul+0xc8>
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <__aeabi_dmul+0x398>)
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	4694      	mov	ip, r2
 8001aa0:	4463      	add	r3, ip
 8001aa2:	464a      	mov	r2, r9
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	4691      	mov	r9, r2
 8001aac:	4652      	mov	r2, sl
 8001aae:	e68a      	b.n	80017c6 <__aeabi_dmul+0x82>
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	4319      	orrs	r1, r3
 8001ab6:	4689      	mov	r9, r1
 8001ab8:	2600      	movs	r6, #0
 8001aba:	2001      	movs	r0, #1
 8001abc:	e683      	b.n	80017c6 <__aeabi_dmul+0x82>
 8001abe:	220c      	movs	r2, #12
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	0005      	movs	r5, r0
 8001ac6:	4691      	mov	r9, r2
 8001ac8:	469b      	mov	fp, r3
 8001aca:	e65e      	b.n	800178a <__aeabi_dmul+0x46>
 8001acc:	2304      	movs	r3, #4
 8001ace:	4699      	mov	r9, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	2400      	movs	r4, #0
 8001ad8:	469b      	mov	fp, r3
 8001ada:	e656      	b.n	800178a <__aeabi_dmul+0x46>
 8001adc:	000007ff 	.word	0x000007ff
 8001ae0:	fffffc01 	.word	0xfffffc01
 8001ae4:	080183b8 	.word	0x080183b8
 8001ae8:	fffffc0d 	.word	0xfffffc0d
 8001aec:	000003ff 	.word	0x000003ff
 8001af0:	feffffff 	.word	0xfeffffff
 8001af4:	000007fe 	.word	0x000007fe
 8001af8:	2300      	movs	r3, #0
 8001afa:	2480      	movs	r4, #128	; 0x80
 8001afc:	2500      	movs	r5, #0
 8001afe:	4a44      	ldr	r2, [pc, #272]	; (8001c10 <__aeabi_dmul+0x4cc>)
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	0324      	lsls	r4, r4, #12
 8001b04:	e68e      	b.n	8001824 <__aeabi_dmul+0xe0>
 8001b06:	2001      	movs	r0, #1
 8001b08:	1a40      	subs	r0, r0, r1
 8001b0a:	2838      	cmp	r0, #56	; 0x38
 8001b0c:	dd00      	ble.n	8001b10 <__aeabi_dmul+0x3cc>
 8001b0e:	e686      	b.n	800181e <__aeabi_dmul+0xda>
 8001b10:	281f      	cmp	r0, #31
 8001b12:	dd5b      	ble.n	8001bcc <__aeabi_dmul+0x488>
 8001b14:	221f      	movs	r2, #31
 8001b16:	0023      	movs	r3, r4
 8001b18:	4252      	negs	r2, r2
 8001b1a:	1a51      	subs	r1, r2, r1
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	0019      	movs	r1, r3
 8001b20:	2820      	cmp	r0, #32
 8001b22:	d003      	beq.n	8001b2c <__aeabi_dmul+0x3e8>
 8001b24:	4a3b      	ldr	r2, [pc, #236]	; (8001c14 <__aeabi_dmul+0x4d0>)
 8001b26:	4462      	add	r2, ip
 8001b28:	4094      	lsls	r4, r2
 8001b2a:	4325      	orrs	r5, r4
 8001b2c:	1e6a      	subs	r2, r5, #1
 8001b2e:	4195      	sbcs	r5, r2
 8001b30:	002a      	movs	r2, r5
 8001b32:	430a      	orrs	r2, r1
 8001b34:	2107      	movs	r1, #7
 8001b36:	000d      	movs	r5, r1
 8001b38:	2400      	movs	r4, #0
 8001b3a:	4015      	ands	r5, r2
 8001b3c:	4211      	tst	r1, r2
 8001b3e:	d05b      	beq.n	8001bf8 <__aeabi_dmul+0x4b4>
 8001b40:	210f      	movs	r1, #15
 8001b42:	2400      	movs	r4, #0
 8001b44:	4011      	ands	r1, r2
 8001b46:	2904      	cmp	r1, #4
 8001b48:	d053      	beq.n	8001bf2 <__aeabi_dmul+0x4ae>
 8001b4a:	1d11      	adds	r1, r2, #4
 8001b4c:	4291      	cmp	r1, r2
 8001b4e:	4192      	sbcs	r2, r2
 8001b50:	4252      	negs	r2, r2
 8001b52:	18a4      	adds	r4, r4, r2
 8001b54:	000a      	movs	r2, r1
 8001b56:	0223      	lsls	r3, r4, #8
 8001b58:	d54b      	bpl.n	8001bf2 <__aeabi_dmul+0x4ae>
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2400      	movs	r4, #0
 8001b5e:	2500      	movs	r5, #0
 8001b60:	e660      	b.n	8001824 <__aeabi_dmul+0xe0>
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	031b      	lsls	r3, r3, #12
 8001b66:	421c      	tst	r4, r3
 8001b68:	d009      	beq.n	8001b7e <__aeabi_dmul+0x43a>
 8001b6a:	421e      	tst	r6, r3
 8001b6c:	d107      	bne.n	8001b7e <__aeabi_dmul+0x43a>
 8001b6e:	4333      	orrs	r3, r6
 8001b70:	031c      	lsls	r4, r3, #12
 8001b72:	4643      	mov	r3, r8
 8001b74:	0015      	movs	r5, r2
 8001b76:	0b24      	lsrs	r4, r4, #12
 8001b78:	4a25      	ldr	r2, [pc, #148]	; (8001c10 <__aeabi_dmul+0x4cc>)
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	e652      	b.n	8001824 <__aeabi_dmul+0xe0>
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	0312      	lsls	r2, r2, #12
 8001b82:	4314      	orrs	r4, r2
 8001b84:	0324      	lsls	r4, r4, #12
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <__aeabi_dmul+0x4cc>)
 8001b88:	0b24      	lsrs	r4, r4, #12
 8001b8a:	9701      	str	r7, [sp, #4]
 8001b8c:	e64a      	b.n	8001824 <__aeabi_dmul+0xe0>
 8001b8e:	f000 fd51 	bl	8002634 <__clzsi2>
 8001b92:	0003      	movs	r3, r0
 8001b94:	001a      	movs	r2, r3
 8001b96:	3215      	adds	r2, #21
 8001b98:	3020      	adds	r0, #32
 8001b9a:	2a1c      	cmp	r2, #28
 8001b9c:	dc00      	bgt.n	8001ba0 <__aeabi_dmul+0x45c>
 8001b9e:	e684      	b.n	80018aa <__aeabi_dmul+0x166>
 8001ba0:	4656      	mov	r6, sl
 8001ba2:	3b08      	subs	r3, #8
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	409e      	lsls	r6, r3
 8001ba8:	e689      	b.n	80018be <__aeabi_dmul+0x17a>
 8001baa:	f000 fd43 	bl	8002634 <__clzsi2>
 8001bae:	0001      	movs	r1, r0
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	3115      	adds	r1, #21
 8001bb4:	3220      	adds	r2, #32
 8001bb6:	291c      	cmp	r1, #28
 8001bb8:	dc00      	bgt.n	8001bbc <__aeabi_dmul+0x478>
 8001bba:	e64e      	b.n	800185a <__aeabi_dmul+0x116>
 8001bbc:	0034      	movs	r4, r6
 8001bbe:	3808      	subs	r0, #8
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	4084      	lsls	r4, r0
 8001bc4:	e653      	b.n	800186e <__aeabi_dmul+0x12a>
 8001bc6:	9b00      	ldr	r3, [sp, #0]
 8001bc8:	469c      	mov	ip, r3
 8001bca:	e741      	b.n	8001a50 <__aeabi_dmul+0x30c>
 8001bcc:	4912      	ldr	r1, [pc, #72]	; (8001c18 <__aeabi_dmul+0x4d4>)
 8001bce:	0022      	movs	r2, r4
 8001bd0:	4461      	add	r1, ip
 8001bd2:	002e      	movs	r6, r5
 8001bd4:	408d      	lsls	r5, r1
 8001bd6:	408a      	lsls	r2, r1
 8001bd8:	40c6      	lsrs	r6, r0
 8001bda:	1e69      	subs	r1, r5, #1
 8001bdc:	418d      	sbcs	r5, r1
 8001bde:	4332      	orrs	r2, r6
 8001be0:	432a      	orrs	r2, r5
 8001be2:	40c4      	lsrs	r4, r0
 8001be4:	0753      	lsls	r3, r2, #29
 8001be6:	d0b6      	beq.n	8001b56 <__aeabi_dmul+0x412>
 8001be8:	210f      	movs	r1, #15
 8001bea:	4011      	ands	r1, r2
 8001bec:	2904      	cmp	r1, #4
 8001bee:	d1ac      	bne.n	8001b4a <__aeabi_dmul+0x406>
 8001bf0:	e7b1      	b.n	8001b56 <__aeabi_dmul+0x412>
 8001bf2:	0765      	lsls	r5, r4, #29
 8001bf4:	0264      	lsls	r4, r4, #9
 8001bf6:	0b24      	lsrs	r4, r4, #12
 8001bf8:	08d2      	lsrs	r2, r2, #3
 8001bfa:	4315      	orrs	r5, r2
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	e611      	b.n	8001824 <__aeabi_dmul+0xe0>
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	0312      	lsls	r2, r2, #12
 8001c04:	4314      	orrs	r4, r2
 8001c06:	0324      	lsls	r4, r4, #12
 8001c08:	4a01      	ldr	r2, [pc, #4]	; (8001c10 <__aeabi_dmul+0x4cc>)
 8001c0a:	0b24      	lsrs	r4, r4, #12
 8001c0c:	e60a      	b.n	8001824 <__aeabi_dmul+0xe0>
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	000007ff 	.word	0x000007ff
 8001c14:	0000043e 	.word	0x0000043e
 8001c18:	0000041e 	.word	0x0000041e

08001c1c <__aeabi_dsub>:
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	4657      	mov	r7, sl
 8001c20:	464e      	mov	r6, r9
 8001c22:	4645      	mov	r5, r8
 8001c24:	46de      	mov	lr, fp
 8001c26:	0004      	movs	r4, r0
 8001c28:	b5e0      	push	{r5, r6, r7, lr}
 8001c2a:	001f      	movs	r7, r3
 8001c2c:	0010      	movs	r0, r2
 8001c2e:	030b      	lsls	r3, r1, #12
 8001c30:	0f62      	lsrs	r2, r4, #29
 8001c32:	004e      	lsls	r6, r1, #1
 8001c34:	0fcd      	lsrs	r5, r1, #31
 8001c36:	0a5b      	lsrs	r3, r3, #9
 8001c38:	0339      	lsls	r1, r7, #12
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	0a49      	lsrs	r1, r1, #9
 8001c3e:	00e2      	lsls	r2, r4, #3
 8001c40:	0f44      	lsrs	r4, r0, #29
 8001c42:	4321      	orrs	r1, r4
 8001c44:	4cc2      	ldr	r4, [pc, #776]	; (8001f50 <__aeabi_dsub+0x334>)
 8001c46:	4691      	mov	r9, r2
 8001c48:	4692      	mov	sl, r2
 8001c4a:	00c0      	lsls	r0, r0, #3
 8001c4c:	007a      	lsls	r2, r7, #1
 8001c4e:	4680      	mov	r8, r0
 8001c50:	0d76      	lsrs	r6, r6, #21
 8001c52:	0d52      	lsrs	r2, r2, #21
 8001c54:	0fff      	lsrs	r7, r7, #31
 8001c56:	42a2      	cmp	r2, r4
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x40>
 8001c5a:	e0b4      	b.n	8001dc6 <__aeabi_dsub+0x1aa>
 8001c5c:	2401      	movs	r4, #1
 8001c5e:	4067      	eors	r7, r4
 8001c60:	46bb      	mov	fp, r7
 8001c62:	42bd      	cmp	r5, r7
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x4c>
 8001c66:	e088      	b.n	8001d7a <__aeabi_dsub+0x15e>
 8001c68:	1ab4      	subs	r4, r6, r2
 8001c6a:	46a4      	mov	ip, r4
 8001c6c:	2c00      	cmp	r4, #0
 8001c6e:	dc00      	bgt.n	8001c72 <__aeabi_dsub+0x56>
 8001c70:	e0b2      	b.n	8001dd8 <__aeabi_dsub+0x1bc>
 8001c72:	2a00      	cmp	r2, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x5c>
 8001c76:	e0c5      	b.n	8001e04 <__aeabi_dsub+0x1e8>
 8001c78:	4ab5      	ldr	r2, [pc, #724]	; (8001f50 <__aeabi_dsub+0x334>)
 8001c7a:	4296      	cmp	r6, r2
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dsub+0x64>
 8001c7e:	e28b      	b.n	8002198 <__aeabi_dsub+0x57c>
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	0412      	lsls	r2, r2, #16
 8001c84:	4311      	orrs	r1, r2
 8001c86:	4662      	mov	r2, ip
 8001c88:	2a38      	cmp	r2, #56	; 0x38
 8001c8a:	dd00      	ble.n	8001c8e <__aeabi_dsub+0x72>
 8001c8c:	e1a1      	b.n	8001fd2 <__aeabi_dsub+0x3b6>
 8001c8e:	2a1f      	cmp	r2, #31
 8001c90:	dd00      	ble.n	8001c94 <__aeabi_dsub+0x78>
 8001c92:	e216      	b.n	80020c2 <__aeabi_dsub+0x4a6>
 8001c94:	2720      	movs	r7, #32
 8001c96:	000c      	movs	r4, r1
 8001c98:	1abf      	subs	r7, r7, r2
 8001c9a:	40bc      	lsls	r4, r7
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	46a0      	mov	r8, r4
 8001ca0:	4664      	mov	r4, ip
 8001ca2:	40b8      	lsls	r0, r7
 8001ca4:	40e2      	lsrs	r2, r4
 8001ca6:	4644      	mov	r4, r8
 8001ca8:	4314      	orrs	r4, r2
 8001caa:	0002      	movs	r2, r0
 8001cac:	1e50      	subs	r0, r2, #1
 8001cae:	4182      	sbcs	r2, r0
 8001cb0:	4660      	mov	r0, ip
 8001cb2:	40c1      	lsrs	r1, r0
 8001cb4:	4322      	orrs	r2, r4
 8001cb6:	1a5b      	subs	r3, r3, r1
 8001cb8:	4649      	mov	r1, r9
 8001cba:	1a8c      	subs	r4, r1, r2
 8001cbc:	45a1      	cmp	r9, r4
 8001cbe:	4192      	sbcs	r2, r2
 8001cc0:	4252      	negs	r2, r2
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	4698      	mov	r8, r3
 8001cc6:	4643      	mov	r3, r8
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	d400      	bmi.n	8001cce <__aeabi_dsub+0xb2>
 8001ccc:	e117      	b.n	8001efe <__aeabi_dsub+0x2e2>
 8001cce:	4643      	mov	r3, r8
 8001cd0:	025b      	lsls	r3, r3, #9
 8001cd2:	0a5b      	lsrs	r3, r3, #9
 8001cd4:	4698      	mov	r8, r3
 8001cd6:	4643      	mov	r3, r8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d100      	bne.n	8001cde <__aeabi_dsub+0xc2>
 8001cdc:	e16c      	b.n	8001fb8 <__aeabi_dsub+0x39c>
 8001cde:	4640      	mov	r0, r8
 8001ce0:	f000 fca8 	bl	8002634 <__clzsi2>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	3a08      	subs	r2, #8
 8001ce8:	2120      	movs	r1, #32
 8001cea:	0020      	movs	r0, r4
 8001cec:	4643      	mov	r3, r8
 8001cee:	1a89      	subs	r1, r1, r2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	40c8      	lsrs	r0, r1
 8001cf4:	4094      	lsls	r4, r2
 8001cf6:	4303      	orrs	r3, r0
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	dd00      	ble.n	8001cfe <__aeabi_dsub+0xe2>
 8001cfc:	e157      	b.n	8001fae <__aeabi_dsub+0x392>
 8001cfe:	1b96      	subs	r6, r2, r6
 8001d00:	1c71      	adds	r1, r6, #1
 8001d02:	291f      	cmp	r1, #31
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0xec>
 8001d06:	e1cb      	b.n	80020a0 <__aeabi_dsub+0x484>
 8001d08:	2220      	movs	r2, #32
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	0026      	movs	r6, r4
 8001d0e:	1a52      	subs	r2, r2, r1
 8001d10:	4094      	lsls	r4, r2
 8001d12:	4090      	lsls	r0, r2
 8001d14:	40ce      	lsrs	r6, r1
 8001d16:	40cb      	lsrs	r3, r1
 8001d18:	1e62      	subs	r2, r4, #1
 8001d1a:	4194      	sbcs	r4, r2
 8001d1c:	4330      	orrs	r0, r6
 8001d1e:	4698      	mov	r8, r3
 8001d20:	2600      	movs	r6, #0
 8001d22:	4304      	orrs	r4, r0
 8001d24:	0763      	lsls	r3, r4, #29
 8001d26:	d009      	beq.n	8001d3c <__aeabi_dsub+0x120>
 8001d28:	230f      	movs	r3, #15
 8001d2a:	4023      	ands	r3, r4
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d005      	beq.n	8001d3c <__aeabi_dsub+0x120>
 8001d30:	1d23      	adds	r3, r4, #4
 8001d32:	42a3      	cmp	r3, r4
 8001d34:	41a4      	sbcs	r4, r4
 8001d36:	4264      	negs	r4, r4
 8001d38:	44a0      	add	r8, r4
 8001d3a:	001c      	movs	r4, r3
 8001d3c:	4643      	mov	r3, r8
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	d400      	bmi.n	8001d44 <__aeabi_dsub+0x128>
 8001d42:	e0df      	b.n	8001f04 <__aeabi_dsub+0x2e8>
 8001d44:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <__aeabi_dsub+0x334>)
 8001d46:	3601      	adds	r6, #1
 8001d48:	429e      	cmp	r6, r3
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x132>
 8001d4c:	e0fb      	b.n	8001f46 <__aeabi_dsub+0x32a>
 8001d4e:	4642      	mov	r2, r8
 8001d50:	4b80      	ldr	r3, [pc, #512]	; (8001f54 <__aeabi_dsub+0x338>)
 8001d52:	08e4      	lsrs	r4, r4, #3
 8001d54:	401a      	ands	r2, r3
 8001d56:	0013      	movs	r3, r2
 8001d58:	0571      	lsls	r1, r6, #21
 8001d5a:	0752      	lsls	r2, r2, #29
 8001d5c:	025b      	lsls	r3, r3, #9
 8001d5e:	4322      	orrs	r2, r4
 8001d60:	0b1b      	lsrs	r3, r3, #12
 8001d62:	0d49      	lsrs	r1, r1, #21
 8001d64:	0509      	lsls	r1, r1, #20
 8001d66:	07ed      	lsls	r5, r5, #31
 8001d68:	4319      	orrs	r1, r3
 8001d6a:	4329      	orrs	r1, r5
 8001d6c:	0010      	movs	r0, r2
 8001d6e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d70:	46bb      	mov	fp, r7
 8001d72:	46b2      	mov	sl, r6
 8001d74:	46a9      	mov	r9, r5
 8001d76:	46a0      	mov	r8, r4
 8001d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d7a:	1ab4      	subs	r4, r6, r2
 8001d7c:	46a4      	mov	ip, r4
 8001d7e:	2c00      	cmp	r4, #0
 8001d80:	dd58      	ble.n	8001e34 <__aeabi_dsub+0x218>
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x16c>
 8001d86:	e09e      	b.n	8001ec6 <__aeabi_dsub+0x2aa>
 8001d88:	4a71      	ldr	r2, [pc, #452]	; (8001f50 <__aeabi_dsub+0x334>)
 8001d8a:	4296      	cmp	r6, r2
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_dsub+0x174>
 8001d8e:	e13b      	b.n	8002008 <__aeabi_dsub+0x3ec>
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	0412      	lsls	r2, r2, #16
 8001d94:	4311      	orrs	r1, r2
 8001d96:	4662      	mov	r2, ip
 8001d98:	2a38      	cmp	r2, #56	; 0x38
 8001d9a:	dd00      	ble.n	8001d9e <__aeabi_dsub+0x182>
 8001d9c:	e0c1      	b.n	8001f22 <__aeabi_dsub+0x306>
 8001d9e:	2a1f      	cmp	r2, #31
 8001da0:	dc00      	bgt.n	8001da4 <__aeabi_dsub+0x188>
 8001da2:	e1bb      	b.n	800211c <__aeabi_dsub+0x500>
 8001da4:	000c      	movs	r4, r1
 8001da6:	3a20      	subs	r2, #32
 8001da8:	40d4      	lsrs	r4, r2
 8001daa:	0022      	movs	r2, r4
 8001dac:	4664      	mov	r4, ip
 8001dae:	2c20      	cmp	r4, #32
 8001db0:	d004      	beq.n	8001dbc <__aeabi_dsub+0x1a0>
 8001db2:	2740      	movs	r7, #64	; 0x40
 8001db4:	1b3f      	subs	r7, r7, r4
 8001db6:	40b9      	lsls	r1, r7
 8001db8:	4308      	orrs	r0, r1
 8001dba:	4680      	mov	r8, r0
 8001dbc:	4644      	mov	r4, r8
 8001dbe:	1e61      	subs	r1, r4, #1
 8001dc0:	418c      	sbcs	r4, r1
 8001dc2:	4314      	orrs	r4, r2
 8001dc4:	e0b1      	b.n	8001f2a <__aeabi_dsub+0x30e>
 8001dc6:	000c      	movs	r4, r1
 8001dc8:	4304      	orrs	r4, r0
 8001dca:	d02a      	beq.n	8001e22 <__aeabi_dsub+0x206>
 8001dcc:	46bb      	mov	fp, r7
 8001dce:	42bd      	cmp	r5, r7
 8001dd0:	d02d      	beq.n	8001e2e <__aeabi_dsub+0x212>
 8001dd2:	4c61      	ldr	r4, [pc, #388]	; (8001f58 <__aeabi_dsub+0x33c>)
 8001dd4:	46a4      	mov	ip, r4
 8001dd6:	44b4      	add	ip, r6
 8001dd8:	4664      	mov	r4, ip
 8001dda:	2c00      	cmp	r4, #0
 8001ddc:	d05c      	beq.n	8001e98 <__aeabi_dsub+0x27c>
 8001dde:	1b94      	subs	r4, r2, r6
 8001de0:	46a4      	mov	ip, r4
 8001de2:	2e00      	cmp	r6, #0
 8001de4:	d000      	beq.n	8001de8 <__aeabi_dsub+0x1cc>
 8001de6:	e115      	b.n	8002014 <__aeabi_dsub+0x3f8>
 8001de8:	464d      	mov	r5, r9
 8001dea:	431d      	orrs	r5, r3
 8001dec:	d100      	bne.n	8001df0 <__aeabi_dsub+0x1d4>
 8001dee:	e1c3      	b.n	8002178 <__aeabi_dsub+0x55c>
 8001df0:	1e65      	subs	r5, r4, #1
 8001df2:	2c01      	cmp	r4, #1
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0x1dc>
 8001df6:	e20c      	b.n	8002212 <__aeabi_dsub+0x5f6>
 8001df8:	4e55      	ldr	r6, [pc, #340]	; (8001f50 <__aeabi_dsub+0x334>)
 8001dfa:	42b4      	cmp	r4, r6
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x1e4>
 8001dfe:	e1f8      	b.n	80021f2 <__aeabi_dsub+0x5d6>
 8001e00:	46ac      	mov	ip, r5
 8001e02:	e10e      	b.n	8002022 <__aeabi_dsub+0x406>
 8001e04:	000a      	movs	r2, r1
 8001e06:	4302      	orrs	r2, r0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x1f0>
 8001e0a:	e136      	b.n	800207a <__aeabi_dsub+0x45e>
 8001e0c:	0022      	movs	r2, r4
 8001e0e:	3a01      	subs	r2, #1
 8001e10:	2c01      	cmp	r4, #1
 8001e12:	d100      	bne.n	8001e16 <__aeabi_dsub+0x1fa>
 8001e14:	e1c6      	b.n	80021a4 <__aeabi_dsub+0x588>
 8001e16:	4c4e      	ldr	r4, [pc, #312]	; (8001f50 <__aeabi_dsub+0x334>)
 8001e18:	45a4      	cmp	ip, r4
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x202>
 8001e1c:	e0f4      	b.n	8002008 <__aeabi_dsub+0x3ec>
 8001e1e:	4694      	mov	ip, r2
 8001e20:	e731      	b.n	8001c86 <__aeabi_dsub+0x6a>
 8001e22:	2401      	movs	r4, #1
 8001e24:	4067      	eors	r7, r4
 8001e26:	46bb      	mov	fp, r7
 8001e28:	42bd      	cmp	r5, r7
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x212>
 8001e2c:	e71c      	b.n	8001c68 <__aeabi_dsub+0x4c>
 8001e2e:	4c4a      	ldr	r4, [pc, #296]	; (8001f58 <__aeabi_dsub+0x33c>)
 8001e30:	46a4      	mov	ip, r4
 8001e32:	44b4      	add	ip, r6
 8001e34:	4664      	mov	r4, ip
 8001e36:	2c00      	cmp	r4, #0
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x220>
 8001e3a:	e0cf      	b.n	8001fdc <__aeabi_dsub+0x3c0>
 8001e3c:	1b94      	subs	r4, r2, r6
 8001e3e:	46a4      	mov	ip, r4
 8001e40:	2e00      	cmp	r6, #0
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x22a>
 8001e44:	e15c      	b.n	8002100 <__aeabi_dsub+0x4e4>
 8001e46:	4e42      	ldr	r6, [pc, #264]	; (8001f50 <__aeabi_dsub+0x334>)
 8001e48:	42b2      	cmp	r2, r6
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_dsub+0x232>
 8001e4c:	e1ec      	b.n	8002228 <__aeabi_dsub+0x60c>
 8001e4e:	2680      	movs	r6, #128	; 0x80
 8001e50:	0436      	lsls	r6, r6, #16
 8001e52:	4333      	orrs	r3, r6
 8001e54:	4664      	mov	r4, ip
 8001e56:	2c38      	cmp	r4, #56	; 0x38
 8001e58:	dd00      	ble.n	8001e5c <__aeabi_dsub+0x240>
 8001e5a:	e1b3      	b.n	80021c4 <__aeabi_dsub+0x5a8>
 8001e5c:	2c1f      	cmp	r4, #31
 8001e5e:	dd00      	ble.n	8001e62 <__aeabi_dsub+0x246>
 8001e60:	e238      	b.n	80022d4 <__aeabi_dsub+0x6b8>
 8001e62:	2620      	movs	r6, #32
 8001e64:	1b36      	subs	r6, r6, r4
 8001e66:	001c      	movs	r4, r3
 8001e68:	40b4      	lsls	r4, r6
 8001e6a:	464f      	mov	r7, r9
 8001e6c:	46a0      	mov	r8, r4
 8001e6e:	4664      	mov	r4, ip
 8001e70:	40e7      	lsrs	r7, r4
 8001e72:	4644      	mov	r4, r8
 8001e74:	433c      	orrs	r4, r7
 8001e76:	464f      	mov	r7, r9
 8001e78:	40b7      	lsls	r7, r6
 8001e7a:	003e      	movs	r6, r7
 8001e7c:	1e77      	subs	r7, r6, #1
 8001e7e:	41be      	sbcs	r6, r7
 8001e80:	4334      	orrs	r4, r6
 8001e82:	4666      	mov	r6, ip
 8001e84:	40f3      	lsrs	r3, r6
 8001e86:	18c9      	adds	r1, r1, r3
 8001e88:	1824      	adds	r4, r4, r0
 8001e8a:	4284      	cmp	r4, r0
 8001e8c:	419b      	sbcs	r3, r3
 8001e8e:	425b      	negs	r3, r3
 8001e90:	4698      	mov	r8, r3
 8001e92:	0016      	movs	r6, r2
 8001e94:	4488      	add	r8, r1
 8001e96:	e04e      	b.n	8001f36 <__aeabi_dsub+0x31a>
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <__aeabi_dsub+0x340>)
 8001e9a:	1c74      	adds	r4, r6, #1
 8001e9c:	4214      	tst	r4, r2
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x286>
 8001ea0:	e0d6      	b.n	8002050 <__aeabi_dsub+0x434>
 8001ea2:	464a      	mov	r2, r9
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	2e00      	cmp	r6, #0
 8001ea8:	d000      	beq.n	8001eac <__aeabi_dsub+0x290>
 8001eaa:	e15b      	b.n	8002164 <__aeabi_dsub+0x548>
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x296>
 8001eb0:	e1a5      	b.n	80021fe <__aeabi_dsub+0x5e2>
 8001eb2:	000a      	movs	r2, r1
 8001eb4:	4302      	orrs	r2, r0
 8001eb6:	d000      	beq.n	8001eba <__aeabi_dsub+0x29e>
 8001eb8:	e1bb      	b.n	8002232 <__aeabi_dsub+0x616>
 8001eba:	464a      	mov	r2, r9
 8001ebc:	0759      	lsls	r1, r3, #29
 8001ebe:	08d2      	lsrs	r2, r2, #3
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	e027      	b.n	8001f16 <__aeabi_dsub+0x2fa>
 8001ec6:	000a      	movs	r2, r1
 8001ec8:	4302      	orrs	r2, r0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x2b2>
 8001ecc:	e174      	b.n	80021b8 <__aeabi_dsub+0x59c>
 8001ece:	0022      	movs	r2, r4
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	2c01      	cmp	r4, #1
 8001ed4:	d005      	beq.n	8001ee2 <__aeabi_dsub+0x2c6>
 8001ed6:	4c1e      	ldr	r4, [pc, #120]	; (8001f50 <__aeabi_dsub+0x334>)
 8001ed8:	45a4      	cmp	ip, r4
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2c2>
 8001edc:	e094      	b.n	8002008 <__aeabi_dsub+0x3ec>
 8001ede:	4694      	mov	ip, r2
 8001ee0:	e759      	b.n	8001d96 <__aeabi_dsub+0x17a>
 8001ee2:	4448      	add	r0, r9
 8001ee4:	4548      	cmp	r0, r9
 8001ee6:	4192      	sbcs	r2, r2
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	4698      	mov	r8, r3
 8001eec:	0004      	movs	r4, r0
 8001eee:	4252      	negs	r2, r2
 8001ef0:	4490      	add	r8, r2
 8001ef2:	4643      	mov	r3, r8
 8001ef4:	2602      	movs	r6, #2
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	d500      	bpl.n	8001efc <__aeabi_dsub+0x2e0>
 8001efa:	e0c4      	b.n	8002086 <__aeabi_dsub+0x46a>
 8001efc:	3e01      	subs	r6, #1
 8001efe:	0763      	lsls	r3, r4, #29
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dsub+0x2e8>
 8001f02:	e711      	b.n	8001d28 <__aeabi_dsub+0x10c>
 8001f04:	4643      	mov	r3, r8
 8001f06:	46b4      	mov	ip, r6
 8001f08:	0759      	lsls	r1, r3, #29
 8001f0a:	08e2      	lsrs	r2, r4, #3
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	08db      	lsrs	r3, r3, #3
 8001f10:	490f      	ldr	r1, [pc, #60]	; (8001f50 <__aeabi_dsub+0x334>)
 8001f12:	458c      	cmp	ip, r1
 8001f14:	d040      	beq.n	8001f98 <__aeabi_dsub+0x37c>
 8001f16:	4661      	mov	r1, ip
 8001f18:	031b      	lsls	r3, r3, #12
 8001f1a:	0549      	lsls	r1, r1, #21
 8001f1c:	0b1b      	lsrs	r3, r3, #12
 8001f1e:	0d49      	lsrs	r1, r1, #21
 8001f20:	e720      	b.n	8001d64 <__aeabi_dsub+0x148>
 8001f22:	4301      	orrs	r1, r0
 8001f24:	000c      	movs	r4, r1
 8001f26:	1e61      	subs	r1, r4, #1
 8001f28:	418c      	sbcs	r4, r1
 8001f2a:	444c      	add	r4, r9
 8001f2c:	454c      	cmp	r4, r9
 8001f2e:	4192      	sbcs	r2, r2
 8001f30:	4252      	negs	r2, r2
 8001f32:	4690      	mov	r8, r2
 8001f34:	4498      	add	r8, r3
 8001f36:	4643      	mov	r3, r8
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	d5e0      	bpl.n	8001efe <__aeabi_dsub+0x2e2>
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <__aeabi_dsub+0x334>)
 8001f3e:	3601      	adds	r6, #1
 8001f40:	429e      	cmp	r6, r3
 8001f42:	d000      	beq.n	8001f46 <__aeabi_dsub+0x32a>
 8001f44:	e09f      	b.n	8002086 <__aeabi_dsub+0x46a>
 8001f46:	0031      	movs	r1, r6
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	e70a      	b.n	8001d64 <__aeabi_dsub+0x148>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	000007ff 	.word	0x000007ff
 8001f54:	ff7fffff 	.word	0xff7fffff
 8001f58:	fffff801 	.word	0xfffff801
 8001f5c:	000007fe 	.word	0x000007fe
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x34a>
 8001f64:	e160      	b.n	8002228 <__aeabi_dsub+0x60c>
 8001f66:	000a      	movs	r2, r1
 8001f68:	4302      	orrs	r2, r0
 8001f6a:	d04d      	beq.n	8002008 <__aeabi_dsub+0x3ec>
 8001f6c:	464a      	mov	r2, r9
 8001f6e:	075c      	lsls	r4, r3, #29
 8001f70:	08d2      	lsrs	r2, r2, #3
 8001f72:	4322      	orrs	r2, r4
 8001f74:	2480      	movs	r4, #128	; 0x80
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0324      	lsls	r4, r4, #12
 8001f7a:	4223      	tst	r3, r4
 8001f7c:	d007      	beq.n	8001f8e <__aeabi_dsub+0x372>
 8001f7e:	08ce      	lsrs	r6, r1, #3
 8001f80:	4226      	tst	r6, r4
 8001f82:	d104      	bne.n	8001f8e <__aeabi_dsub+0x372>
 8001f84:	465d      	mov	r5, fp
 8001f86:	0033      	movs	r3, r6
 8001f88:	08c2      	lsrs	r2, r0, #3
 8001f8a:	0749      	lsls	r1, r1, #29
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	0f51      	lsrs	r1, r2, #29
 8001f90:	00d2      	lsls	r2, r2, #3
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	0749      	lsls	r1, r1, #29
 8001f96:	430a      	orrs	r2, r1
 8001f98:	0011      	movs	r1, r2
 8001f9a:	4319      	orrs	r1, r3
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_dsub+0x384>
 8001f9e:	e1c8      	b.n	8002332 <__aeabi_dsub+0x716>
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	0309      	lsls	r1, r1, #12
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	031b      	lsls	r3, r3, #12
 8001fa8:	49d5      	ldr	r1, [pc, #852]	; (8002300 <__aeabi_dsub+0x6e4>)
 8001faa:	0b1b      	lsrs	r3, r3, #12
 8001fac:	e6da      	b.n	8001d64 <__aeabi_dsub+0x148>
 8001fae:	49d5      	ldr	r1, [pc, #852]	; (8002304 <__aeabi_dsub+0x6e8>)
 8001fb0:	1ab6      	subs	r6, r6, r2
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	4698      	mov	r8, r3
 8001fb6:	e6b5      	b.n	8001d24 <__aeabi_dsub+0x108>
 8001fb8:	0020      	movs	r0, r4
 8001fba:	f000 fb3b 	bl	8002634 <__clzsi2>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	3218      	adds	r2, #24
 8001fc2:	2a1f      	cmp	r2, #31
 8001fc4:	dc00      	bgt.n	8001fc8 <__aeabi_dsub+0x3ac>
 8001fc6:	e68f      	b.n	8001ce8 <__aeabi_dsub+0xcc>
 8001fc8:	0023      	movs	r3, r4
 8001fca:	3808      	subs	r0, #8
 8001fcc:	4083      	lsls	r3, r0
 8001fce:	2400      	movs	r4, #0
 8001fd0:	e692      	b.n	8001cf8 <__aeabi_dsub+0xdc>
 8001fd2:	4308      	orrs	r0, r1
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	1e50      	subs	r0, r2, #1
 8001fd8:	4182      	sbcs	r2, r0
 8001fda:	e66d      	b.n	8001cb8 <__aeabi_dsub+0x9c>
 8001fdc:	4cca      	ldr	r4, [pc, #808]	; (8002308 <__aeabi_dsub+0x6ec>)
 8001fde:	1c72      	adds	r2, r6, #1
 8001fe0:	4222      	tst	r2, r4
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_dsub+0x3ca>
 8001fe4:	e0ad      	b.n	8002142 <__aeabi_dsub+0x526>
 8001fe6:	464a      	mov	r2, r9
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	2e00      	cmp	r6, #0
 8001fec:	d1b8      	bne.n	8001f60 <__aeabi_dsub+0x344>
 8001fee:	2a00      	cmp	r2, #0
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dsub+0x3d8>
 8001ff2:	e158      	b.n	80022a6 <__aeabi_dsub+0x68a>
 8001ff4:	000a      	movs	r2, r1
 8001ff6:	4302      	orrs	r2, r0
 8001ff8:	d000      	beq.n	8001ffc <__aeabi_dsub+0x3e0>
 8001ffa:	e159      	b.n	80022b0 <__aeabi_dsub+0x694>
 8001ffc:	464a      	mov	r2, r9
 8001ffe:	0759      	lsls	r1, r3, #29
 8002000:	08d2      	lsrs	r2, r2, #3
 8002002:	430a      	orrs	r2, r1
 8002004:	08db      	lsrs	r3, r3, #3
 8002006:	e786      	b.n	8001f16 <__aeabi_dsub+0x2fa>
 8002008:	464a      	mov	r2, r9
 800200a:	0759      	lsls	r1, r3, #29
 800200c:	08d2      	lsrs	r2, r2, #3
 800200e:	430a      	orrs	r2, r1
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	e7c1      	b.n	8001f98 <__aeabi_dsub+0x37c>
 8002014:	4dba      	ldr	r5, [pc, #744]	; (8002300 <__aeabi_dsub+0x6e4>)
 8002016:	42aa      	cmp	r2, r5
 8002018:	d100      	bne.n	800201c <__aeabi_dsub+0x400>
 800201a:	e11e      	b.n	800225a <__aeabi_dsub+0x63e>
 800201c:	2580      	movs	r5, #128	; 0x80
 800201e:	042d      	lsls	r5, r5, #16
 8002020:	432b      	orrs	r3, r5
 8002022:	4664      	mov	r4, ip
 8002024:	2c38      	cmp	r4, #56	; 0x38
 8002026:	dc5d      	bgt.n	80020e4 <__aeabi_dsub+0x4c8>
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x412>
 800202c:	e0d0      	b.n	80021d0 <__aeabi_dsub+0x5b4>
 800202e:	2520      	movs	r5, #32
 8002030:	4667      	mov	r7, ip
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464e      	mov	r6, r9
 8002036:	001c      	movs	r4, r3
 8002038:	40fe      	lsrs	r6, r7
 800203a:	40ac      	lsls	r4, r5
 800203c:	4334      	orrs	r4, r6
 800203e:	464e      	mov	r6, r9
 8002040:	40ae      	lsls	r6, r5
 8002042:	0035      	movs	r5, r6
 8002044:	40fb      	lsrs	r3, r7
 8002046:	1e6e      	subs	r6, r5, #1
 8002048:	41b5      	sbcs	r5, r6
 800204a:	1ac9      	subs	r1, r1, r3
 800204c:	432c      	orrs	r4, r5
 800204e:	e04e      	b.n	80020ee <__aeabi_dsub+0x4d2>
 8002050:	464a      	mov	r2, r9
 8002052:	1a14      	subs	r4, r2, r0
 8002054:	45a1      	cmp	r9, r4
 8002056:	4192      	sbcs	r2, r2
 8002058:	4252      	negs	r2, r2
 800205a:	4690      	mov	r8, r2
 800205c:	1a5f      	subs	r7, r3, r1
 800205e:	003a      	movs	r2, r7
 8002060:	4647      	mov	r7, r8
 8002062:	1bd2      	subs	r2, r2, r7
 8002064:	4690      	mov	r8, r2
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	d500      	bpl.n	800206c <__aeabi_dsub+0x450>
 800206a:	e08b      	b.n	8002184 <__aeabi_dsub+0x568>
 800206c:	4642      	mov	r2, r8
 800206e:	4322      	orrs	r2, r4
 8002070:	d000      	beq.n	8002074 <__aeabi_dsub+0x458>
 8002072:	e630      	b.n	8001cd6 <__aeabi_dsub+0xba>
 8002074:	2300      	movs	r3, #0
 8002076:	2500      	movs	r5, #0
 8002078:	e74d      	b.n	8001f16 <__aeabi_dsub+0x2fa>
 800207a:	464a      	mov	r2, r9
 800207c:	0759      	lsls	r1, r3, #29
 800207e:	08d2      	lsrs	r2, r2, #3
 8002080:	430a      	orrs	r2, r1
 8002082:	08db      	lsrs	r3, r3, #3
 8002084:	e744      	b.n	8001f10 <__aeabi_dsub+0x2f4>
 8002086:	4642      	mov	r2, r8
 8002088:	4b9e      	ldr	r3, [pc, #632]	; (8002304 <__aeabi_dsub+0x6e8>)
 800208a:	0861      	lsrs	r1, r4, #1
 800208c:	401a      	ands	r2, r3
 800208e:	0013      	movs	r3, r2
 8002090:	2201      	movs	r2, #1
 8002092:	4014      	ands	r4, r2
 8002094:	430c      	orrs	r4, r1
 8002096:	07da      	lsls	r2, r3, #31
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	4698      	mov	r8, r3
 800209c:	4314      	orrs	r4, r2
 800209e:	e641      	b.n	8001d24 <__aeabi_dsub+0x108>
 80020a0:	001a      	movs	r2, r3
 80020a2:	3e1f      	subs	r6, #31
 80020a4:	40f2      	lsrs	r2, r6
 80020a6:	0016      	movs	r6, r2
 80020a8:	2920      	cmp	r1, #32
 80020aa:	d003      	beq.n	80020b4 <__aeabi_dsub+0x498>
 80020ac:	2240      	movs	r2, #64	; 0x40
 80020ae:	1a51      	subs	r1, r2, r1
 80020b0:	408b      	lsls	r3, r1
 80020b2:	431c      	orrs	r4, r3
 80020b4:	1e62      	subs	r2, r4, #1
 80020b6:	4194      	sbcs	r4, r2
 80020b8:	2300      	movs	r3, #0
 80020ba:	4334      	orrs	r4, r6
 80020bc:	4698      	mov	r8, r3
 80020be:	2600      	movs	r6, #0
 80020c0:	e71d      	b.n	8001efe <__aeabi_dsub+0x2e2>
 80020c2:	000c      	movs	r4, r1
 80020c4:	3a20      	subs	r2, #32
 80020c6:	40d4      	lsrs	r4, r2
 80020c8:	0022      	movs	r2, r4
 80020ca:	4664      	mov	r4, ip
 80020cc:	2c20      	cmp	r4, #32
 80020ce:	d004      	beq.n	80020da <__aeabi_dsub+0x4be>
 80020d0:	2740      	movs	r7, #64	; 0x40
 80020d2:	1b3f      	subs	r7, r7, r4
 80020d4:	40b9      	lsls	r1, r7
 80020d6:	4308      	orrs	r0, r1
 80020d8:	4680      	mov	r8, r0
 80020da:	4644      	mov	r4, r8
 80020dc:	1e61      	subs	r1, r4, #1
 80020de:	418c      	sbcs	r4, r1
 80020e0:	4322      	orrs	r2, r4
 80020e2:	e5e9      	b.n	8001cb8 <__aeabi_dsub+0x9c>
 80020e4:	464c      	mov	r4, r9
 80020e6:	4323      	orrs	r3, r4
 80020e8:	001c      	movs	r4, r3
 80020ea:	1e63      	subs	r3, r4, #1
 80020ec:	419c      	sbcs	r4, r3
 80020ee:	1b04      	subs	r4, r0, r4
 80020f0:	42a0      	cmp	r0, r4
 80020f2:	419b      	sbcs	r3, r3
 80020f4:	425b      	negs	r3, r3
 80020f6:	1acb      	subs	r3, r1, r3
 80020f8:	4698      	mov	r8, r3
 80020fa:	465d      	mov	r5, fp
 80020fc:	0016      	movs	r6, r2
 80020fe:	e5e2      	b.n	8001cc6 <__aeabi_dsub+0xaa>
 8002100:	464e      	mov	r6, r9
 8002102:	431e      	orrs	r6, r3
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x4ec>
 8002106:	e0ae      	b.n	8002266 <__aeabi_dsub+0x64a>
 8002108:	1e66      	subs	r6, r4, #1
 800210a:	2c01      	cmp	r4, #1
 800210c:	d100      	bne.n	8002110 <__aeabi_dsub+0x4f4>
 800210e:	e0fd      	b.n	800230c <__aeabi_dsub+0x6f0>
 8002110:	4f7b      	ldr	r7, [pc, #492]	; (8002300 <__aeabi_dsub+0x6e4>)
 8002112:	42bc      	cmp	r4, r7
 8002114:	d100      	bne.n	8002118 <__aeabi_dsub+0x4fc>
 8002116:	e107      	b.n	8002328 <__aeabi_dsub+0x70c>
 8002118:	46b4      	mov	ip, r6
 800211a:	e69b      	b.n	8001e54 <__aeabi_dsub+0x238>
 800211c:	4664      	mov	r4, ip
 800211e:	2220      	movs	r2, #32
 8002120:	1b12      	subs	r2, r2, r4
 8002122:	000c      	movs	r4, r1
 8002124:	4094      	lsls	r4, r2
 8002126:	0007      	movs	r7, r0
 8002128:	4090      	lsls	r0, r2
 800212a:	46a0      	mov	r8, r4
 800212c:	4664      	mov	r4, ip
 800212e:	1e42      	subs	r2, r0, #1
 8002130:	4190      	sbcs	r0, r2
 8002132:	4662      	mov	r2, ip
 8002134:	40e7      	lsrs	r7, r4
 8002136:	4644      	mov	r4, r8
 8002138:	40d1      	lsrs	r1, r2
 800213a:	433c      	orrs	r4, r7
 800213c:	4304      	orrs	r4, r0
 800213e:	185b      	adds	r3, r3, r1
 8002140:	e6f3      	b.n	8001f2a <__aeabi_dsub+0x30e>
 8002142:	4c6f      	ldr	r4, [pc, #444]	; (8002300 <__aeabi_dsub+0x6e4>)
 8002144:	42a2      	cmp	r2, r4
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x52e>
 8002148:	e0d5      	b.n	80022f6 <__aeabi_dsub+0x6da>
 800214a:	4448      	add	r0, r9
 800214c:	185b      	adds	r3, r3, r1
 800214e:	4548      	cmp	r0, r9
 8002150:	4189      	sbcs	r1, r1
 8002152:	4249      	negs	r1, r1
 8002154:	185b      	adds	r3, r3, r1
 8002156:	07dc      	lsls	r4, r3, #31
 8002158:	0840      	lsrs	r0, r0, #1
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	4698      	mov	r8, r3
 800215e:	0016      	movs	r6, r2
 8002160:	4304      	orrs	r4, r0
 8002162:	e6cc      	b.n	8001efe <__aeabi_dsub+0x2e2>
 8002164:	2a00      	cmp	r2, #0
 8002166:	d000      	beq.n	800216a <__aeabi_dsub+0x54e>
 8002168:	e082      	b.n	8002270 <__aeabi_dsub+0x654>
 800216a:	000a      	movs	r2, r1
 800216c:	4302      	orrs	r2, r0
 800216e:	d140      	bne.n	80021f2 <__aeabi_dsub+0x5d6>
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	2500      	movs	r5, #0
 8002174:	031b      	lsls	r3, r3, #12
 8002176:	e713      	b.n	8001fa0 <__aeabi_dsub+0x384>
 8002178:	074b      	lsls	r3, r1, #29
 800217a:	08c2      	lsrs	r2, r0, #3
 800217c:	431a      	orrs	r2, r3
 800217e:	465d      	mov	r5, fp
 8002180:	08cb      	lsrs	r3, r1, #3
 8002182:	e6c5      	b.n	8001f10 <__aeabi_dsub+0x2f4>
 8002184:	464a      	mov	r2, r9
 8002186:	1a84      	subs	r4, r0, r2
 8002188:	42a0      	cmp	r0, r4
 800218a:	4192      	sbcs	r2, r2
 800218c:	1acb      	subs	r3, r1, r3
 800218e:	4252      	negs	r2, r2
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	4698      	mov	r8, r3
 8002194:	465d      	mov	r5, fp
 8002196:	e59e      	b.n	8001cd6 <__aeabi_dsub+0xba>
 8002198:	464a      	mov	r2, r9
 800219a:	0759      	lsls	r1, r3, #29
 800219c:	08d2      	lsrs	r2, r2, #3
 800219e:	430a      	orrs	r2, r1
 80021a0:	08db      	lsrs	r3, r3, #3
 80021a2:	e6f9      	b.n	8001f98 <__aeabi_dsub+0x37c>
 80021a4:	464a      	mov	r2, r9
 80021a6:	1a14      	subs	r4, r2, r0
 80021a8:	45a1      	cmp	r9, r4
 80021aa:	4192      	sbcs	r2, r2
 80021ac:	1a5b      	subs	r3, r3, r1
 80021ae:	4252      	negs	r2, r2
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	4698      	mov	r8, r3
 80021b4:	2601      	movs	r6, #1
 80021b6:	e586      	b.n	8001cc6 <__aeabi_dsub+0xaa>
 80021b8:	464a      	mov	r2, r9
 80021ba:	0759      	lsls	r1, r3, #29
 80021bc:	08d2      	lsrs	r2, r2, #3
 80021be:	430a      	orrs	r2, r1
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	e6a5      	b.n	8001f10 <__aeabi_dsub+0x2f4>
 80021c4:	464c      	mov	r4, r9
 80021c6:	4323      	orrs	r3, r4
 80021c8:	001c      	movs	r4, r3
 80021ca:	1e63      	subs	r3, r4, #1
 80021cc:	419c      	sbcs	r4, r3
 80021ce:	e65b      	b.n	8001e88 <__aeabi_dsub+0x26c>
 80021d0:	4665      	mov	r5, ip
 80021d2:	001e      	movs	r6, r3
 80021d4:	3d20      	subs	r5, #32
 80021d6:	40ee      	lsrs	r6, r5
 80021d8:	2c20      	cmp	r4, #32
 80021da:	d005      	beq.n	80021e8 <__aeabi_dsub+0x5cc>
 80021dc:	2540      	movs	r5, #64	; 0x40
 80021de:	1b2d      	subs	r5, r5, r4
 80021e0:	40ab      	lsls	r3, r5
 80021e2:	464c      	mov	r4, r9
 80021e4:	431c      	orrs	r4, r3
 80021e6:	46a2      	mov	sl, r4
 80021e8:	4654      	mov	r4, sl
 80021ea:	1e63      	subs	r3, r4, #1
 80021ec:	419c      	sbcs	r4, r3
 80021ee:	4334      	orrs	r4, r6
 80021f0:	e77d      	b.n	80020ee <__aeabi_dsub+0x4d2>
 80021f2:	074b      	lsls	r3, r1, #29
 80021f4:	08c2      	lsrs	r2, r0, #3
 80021f6:	431a      	orrs	r2, r3
 80021f8:	465d      	mov	r5, fp
 80021fa:	08cb      	lsrs	r3, r1, #3
 80021fc:	e6cc      	b.n	8001f98 <__aeabi_dsub+0x37c>
 80021fe:	000a      	movs	r2, r1
 8002200:	4302      	orrs	r2, r0
 8002202:	d100      	bne.n	8002206 <__aeabi_dsub+0x5ea>
 8002204:	e736      	b.n	8002074 <__aeabi_dsub+0x458>
 8002206:	074b      	lsls	r3, r1, #29
 8002208:	08c2      	lsrs	r2, r0, #3
 800220a:	431a      	orrs	r2, r3
 800220c:	465d      	mov	r5, fp
 800220e:	08cb      	lsrs	r3, r1, #3
 8002210:	e681      	b.n	8001f16 <__aeabi_dsub+0x2fa>
 8002212:	464a      	mov	r2, r9
 8002214:	1a84      	subs	r4, r0, r2
 8002216:	42a0      	cmp	r0, r4
 8002218:	4192      	sbcs	r2, r2
 800221a:	1acb      	subs	r3, r1, r3
 800221c:	4252      	negs	r2, r2
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	4698      	mov	r8, r3
 8002222:	465d      	mov	r5, fp
 8002224:	2601      	movs	r6, #1
 8002226:	e54e      	b.n	8001cc6 <__aeabi_dsub+0xaa>
 8002228:	074b      	lsls	r3, r1, #29
 800222a:	08c2      	lsrs	r2, r0, #3
 800222c:	431a      	orrs	r2, r3
 800222e:	08cb      	lsrs	r3, r1, #3
 8002230:	e6b2      	b.n	8001f98 <__aeabi_dsub+0x37c>
 8002232:	464a      	mov	r2, r9
 8002234:	1a14      	subs	r4, r2, r0
 8002236:	45a1      	cmp	r9, r4
 8002238:	4192      	sbcs	r2, r2
 800223a:	1a5f      	subs	r7, r3, r1
 800223c:	4252      	negs	r2, r2
 800223e:	1aba      	subs	r2, r7, r2
 8002240:	4690      	mov	r8, r2
 8002242:	0212      	lsls	r2, r2, #8
 8002244:	d56b      	bpl.n	800231e <__aeabi_dsub+0x702>
 8002246:	464a      	mov	r2, r9
 8002248:	1a84      	subs	r4, r0, r2
 800224a:	42a0      	cmp	r0, r4
 800224c:	4192      	sbcs	r2, r2
 800224e:	1acb      	subs	r3, r1, r3
 8002250:	4252      	negs	r2, r2
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	4698      	mov	r8, r3
 8002256:	465d      	mov	r5, fp
 8002258:	e564      	b.n	8001d24 <__aeabi_dsub+0x108>
 800225a:	074b      	lsls	r3, r1, #29
 800225c:	08c2      	lsrs	r2, r0, #3
 800225e:	431a      	orrs	r2, r3
 8002260:	465d      	mov	r5, fp
 8002262:	08cb      	lsrs	r3, r1, #3
 8002264:	e698      	b.n	8001f98 <__aeabi_dsub+0x37c>
 8002266:	074b      	lsls	r3, r1, #29
 8002268:	08c2      	lsrs	r2, r0, #3
 800226a:	431a      	orrs	r2, r3
 800226c:	08cb      	lsrs	r3, r1, #3
 800226e:	e64f      	b.n	8001f10 <__aeabi_dsub+0x2f4>
 8002270:	000a      	movs	r2, r1
 8002272:	4302      	orrs	r2, r0
 8002274:	d090      	beq.n	8002198 <__aeabi_dsub+0x57c>
 8002276:	464a      	mov	r2, r9
 8002278:	075c      	lsls	r4, r3, #29
 800227a:	08d2      	lsrs	r2, r2, #3
 800227c:	4314      	orrs	r4, r2
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	0312      	lsls	r2, r2, #12
 8002284:	4213      	tst	r3, r2
 8002286:	d008      	beq.n	800229a <__aeabi_dsub+0x67e>
 8002288:	08ce      	lsrs	r6, r1, #3
 800228a:	4216      	tst	r6, r2
 800228c:	d105      	bne.n	800229a <__aeabi_dsub+0x67e>
 800228e:	08c0      	lsrs	r0, r0, #3
 8002290:	0749      	lsls	r1, r1, #29
 8002292:	4308      	orrs	r0, r1
 8002294:	0004      	movs	r4, r0
 8002296:	465d      	mov	r5, fp
 8002298:	0033      	movs	r3, r6
 800229a:	0f61      	lsrs	r1, r4, #29
 800229c:	00e2      	lsls	r2, r4, #3
 800229e:	0749      	lsls	r1, r1, #29
 80022a0:	08d2      	lsrs	r2, r2, #3
 80022a2:	430a      	orrs	r2, r1
 80022a4:	e678      	b.n	8001f98 <__aeabi_dsub+0x37c>
 80022a6:	074b      	lsls	r3, r1, #29
 80022a8:	08c2      	lsrs	r2, r0, #3
 80022aa:	431a      	orrs	r2, r3
 80022ac:	08cb      	lsrs	r3, r1, #3
 80022ae:	e632      	b.n	8001f16 <__aeabi_dsub+0x2fa>
 80022b0:	4448      	add	r0, r9
 80022b2:	185b      	adds	r3, r3, r1
 80022b4:	4548      	cmp	r0, r9
 80022b6:	4192      	sbcs	r2, r2
 80022b8:	4698      	mov	r8, r3
 80022ba:	4252      	negs	r2, r2
 80022bc:	4490      	add	r8, r2
 80022be:	4643      	mov	r3, r8
 80022c0:	0004      	movs	r4, r0
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	d400      	bmi.n	80022c8 <__aeabi_dsub+0x6ac>
 80022c6:	e61a      	b.n	8001efe <__aeabi_dsub+0x2e2>
 80022c8:	4642      	mov	r2, r8
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <__aeabi_dsub+0x6e8>)
 80022cc:	2601      	movs	r6, #1
 80022ce:	401a      	ands	r2, r3
 80022d0:	4690      	mov	r8, r2
 80022d2:	e614      	b.n	8001efe <__aeabi_dsub+0x2e2>
 80022d4:	4666      	mov	r6, ip
 80022d6:	001f      	movs	r7, r3
 80022d8:	3e20      	subs	r6, #32
 80022da:	40f7      	lsrs	r7, r6
 80022dc:	2c20      	cmp	r4, #32
 80022de:	d005      	beq.n	80022ec <__aeabi_dsub+0x6d0>
 80022e0:	2640      	movs	r6, #64	; 0x40
 80022e2:	1b36      	subs	r6, r6, r4
 80022e4:	40b3      	lsls	r3, r6
 80022e6:	464c      	mov	r4, r9
 80022e8:	431c      	orrs	r4, r3
 80022ea:	46a2      	mov	sl, r4
 80022ec:	4654      	mov	r4, sl
 80022ee:	1e63      	subs	r3, r4, #1
 80022f0:	419c      	sbcs	r4, r3
 80022f2:	433c      	orrs	r4, r7
 80022f4:	e5c8      	b.n	8001e88 <__aeabi_dsub+0x26c>
 80022f6:	0011      	movs	r1, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	2200      	movs	r2, #0
 80022fc:	e532      	b.n	8001d64 <__aeabi_dsub+0x148>
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	000007ff 	.word	0x000007ff
 8002304:	ff7fffff 	.word	0xff7fffff
 8002308:	000007fe 	.word	0x000007fe
 800230c:	464a      	mov	r2, r9
 800230e:	1814      	adds	r4, r2, r0
 8002310:	4284      	cmp	r4, r0
 8002312:	4192      	sbcs	r2, r2
 8002314:	185b      	adds	r3, r3, r1
 8002316:	4698      	mov	r8, r3
 8002318:	4252      	negs	r2, r2
 800231a:	4490      	add	r8, r2
 800231c:	e5e9      	b.n	8001ef2 <__aeabi_dsub+0x2d6>
 800231e:	4642      	mov	r2, r8
 8002320:	4322      	orrs	r2, r4
 8002322:	d100      	bne.n	8002326 <__aeabi_dsub+0x70a>
 8002324:	e6a6      	b.n	8002074 <__aeabi_dsub+0x458>
 8002326:	e5ea      	b.n	8001efe <__aeabi_dsub+0x2e2>
 8002328:	074b      	lsls	r3, r1, #29
 800232a:	08c2      	lsrs	r2, r0, #3
 800232c:	431a      	orrs	r2, r3
 800232e:	08cb      	lsrs	r3, r1, #3
 8002330:	e632      	b.n	8001f98 <__aeabi_dsub+0x37c>
 8002332:	2200      	movs	r2, #0
 8002334:	4901      	ldr	r1, [pc, #4]	; (800233c <__aeabi_dsub+0x720>)
 8002336:	0013      	movs	r3, r2
 8002338:	e514      	b.n	8001d64 <__aeabi_dsub+0x148>
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	000007ff 	.word	0x000007ff

08002340 <__aeabi_dcmpun>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	0005      	movs	r5, r0
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <__aeabi_dcmpun+0x38>)
 8002346:	030c      	lsls	r4, r1, #12
 8002348:	0016      	movs	r6, r2
 800234a:	0049      	lsls	r1, r1, #1
 800234c:	031a      	lsls	r2, r3, #12
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	0b24      	lsrs	r4, r4, #12
 8002352:	0d49      	lsrs	r1, r1, #21
 8002354:	0b12      	lsrs	r2, r2, #12
 8002356:	0d5b      	lsrs	r3, r3, #21
 8002358:	4281      	cmp	r1, r0
 800235a:	d008      	beq.n	800236e <__aeabi_dcmpun+0x2e>
 800235c:	4906      	ldr	r1, [pc, #24]	; (8002378 <__aeabi_dcmpun+0x38>)
 800235e:	2000      	movs	r0, #0
 8002360:	428b      	cmp	r3, r1
 8002362:	d103      	bne.n	800236c <__aeabi_dcmpun+0x2c>
 8002364:	4332      	orrs	r2, r6
 8002366:	0010      	movs	r0, r2
 8002368:	1e42      	subs	r2, r0, #1
 800236a:	4190      	sbcs	r0, r2
 800236c:	bd70      	pop	{r4, r5, r6, pc}
 800236e:	2001      	movs	r0, #1
 8002370:	432c      	orrs	r4, r5
 8002372:	d1fb      	bne.n	800236c <__aeabi_dcmpun+0x2c>
 8002374:	e7f2      	b.n	800235c <__aeabi_dcmpun+0x1c>
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	000007ff 	.word	0x000007ff

0800237c <__aeabi_d2iz>:
 800237c:	000a      	movs	r2, r1
 800237e:	b530      	push	{r4, r5, lr}
 8002380:	4c13      	ldr	r4, [pc, #76]	; (80023d0 <__aeabi_d2iz+0x54>)
 8002382:	0053      	lsls	r3, r2, #1
 8002384:	0309      	lsls	r1, r1, #12
 8002386:	0005      	movs	r5, r0
 8002388:	0b09      	lsrs	r1, r1, #12
 800238a:	2000      	movs	r0, #0
 800238c:	0d5b      	lsrs	r3, r3, #21
 800238e:	0fd2      	lsrs	r2, r2, #31
 8002390:	42a3      	cmp	r3, r4
 8002392:	dd04      	ble.n	800239e <__aeabi_d2iz+0x22>
 8002394:	480f      	ldr	r0, [pc, #60]	; (80023d4 <__aeabi_d2iz+0x58>)
 8002396:	4283      	cmp	r3, r0
 8002398:	dd02      	ble.n	80023a0 <__aeabi_d2iz+0x24>
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <__aeabi_d2iz+0x5c>)
 800239c:	18d0      	adds	r0, r2, r3
 800239e:	bd30      	pop	{r4, r5, pc}
 80023a0:	2080      	movs	r0, #128	; 0x80
 80023a2:	0340      	lsls	r0, r0, #13
 80023a4:	4301      	orrs	r1, r0
 80023a6:	480d      	ldr	r0, [pc, #52]	; (80023dc <__aeabi_d2iz+0x60>)
 80023a8:	1ac0      	subs	r0, r0, r3
 80023aa:	281f      	cmp	r0, #31
 80023ac:	dd08      	ble.n	80023c0 <__aeabi_d2iz+0x44>
 80023ae:	480c      	ldr	r0, [pc, #48]	; (80023e0 <__aeabi_d2iz+0x64>)
 80023b0:	1ac3      	subs	r3, r0, r3
 80023b2:	40d9      	lsrs	r1, r3
 80023b4:	000b      	movs	r3, r1
 80023b6:	4258      	negs	r0, r3
 80023b8:	2a00      	cmp	r2, #0
 80023ba:	d1f0      	bne.n	800239e <__aeabi_d2iz+0x22>
 80023bc:	0018      	movs	r0, r3
 80023be:	e7ee      	b.n	800239e <__aeabi_d2iz+0x22>
 80023c0:	4c08      	ldr	r4, [pc, #32]	; (80023e4 <__aeabi_d2iz+0x68>)
 80023c2:	40c5      	lsrs	r5, r0
 80023c4:	46a4      	mov	ip, r4
 80023c6:	4463      	add	r3, ip
 80023c8:	4099      	lsls	r1, r3
 80023ca:	000b      	movs	r3, r1
 80023cc:	432b      	orrs	r3, r5
 80023ce:	e7f2      	b.n	80023b6 <__aeabi_d2iz+0x3a>
 80023d0:	000003fe 	.word	0x000003fe
 80023d4:	0000041d 	.word	0x0000041d
 80023d8:	7fffffff 	.word	0x7fffffff
 80023dc:	00000433 	.word	0x00000433
 80023e0:	00000413 	.word	0x00000413
 80023e4:	fffffbed 	.word	0xfffffbed

080023e8 <__aeabi_i2d>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	2800      	cmp	r0, #0
 80023ec:	d016      	beq.n	800241c <__aeabi_i2d+0x34>
 80023ee:	17c3      	asrs	r3, r0, #31
 80023f0:	18c5      	adds	r5, r0, r3
 80023f2:	405d      	eors	r5, r3
 80023f4:	0fc4      	lsrs	r4, r0, #31
 80023f6:	0028      	movs	r0, r5
 80023f8:	f000 f91c 	bl	8002634 <__clzsi2>
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <__aeabi_i2d+0x5c>)
 80023fe:	1a12      	subs	r2, r2, r0
 8002400:	280a      	cmp	r0, #10
 8002402:	dc16      	bgt.n	8002432 <__aeabi_i2d+0x4a>
 8002404:	0003      	movs	r3, r0
 8002406:	002e      	movs	r6, r5
 8002408:	3315      	adds	r3, #21
 800240a:	409e      	lsls	r6, r3
 800240c:	230b      	movs	r3, #11
 800240e:	1a18      	subs	r0, r3, r0
 8002410:	40c5      	lsrs	r5, r0
 8002412:	0553      	lsls	r3, r2, #21
 8002414:	032d      	lsls	r5, r5, #12
 8002416:	0b2d      	lsrs	r5, r5, #12
 8002418:	0d5b      	lsrs	r3, r3, #21
 800241a:	e003      	b.n	8002424 <__aeabi_i2d+0x3c>
 800241c:	2400      	movs	r4, #0
 800241e:	2300      	movs	r3, #0
 8002420:	2500      	movs	r5, #0
 8002422:	2600      	movs	r6, #0
 8002424:	051b      	lsls	r3, r3, #20
 8002426:	432b      	orrs	r3, r5
 8002428:	07e4      	lsls	r4, r4, #31
 800242a:	4323      	orrs	r3, r4
 800242c:	0030      	movs	r0, r6
 800242e:	0019      	movs	r1, r3
 8002430:	bd70      	pop	{r4, r5, r6, pc}
 8002432:	380b      	subs	r0, #11
 8002434:	4085      	lsls	r5, r0
 8002436:	0553      	lsls	r3, r2, #21
 8002438:	032d      	lsls	r5, r5, #12
 800243a:	2600      	movs	r6, #0
 800243c:	0b2d      	lsrs	r5, r5, #12
 800243e:	0d5b      	lsrs	r3, r3, #21
 8002440:	e7f0      	b.n	8002424 <__aeabi_i2d+0x3c>
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_ui2d>:
 8002448:	b510      	push	{r4, lr}
 800244a:	1e04      	subs	r4, r0, #0
 800244c:	d010      	beq.n	8002470 <__aeabi_ui2d+0x28>
 800244e:	f000 f8f1 	bl	8002634 <__clzsi2>
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <__aeabi_ui2d+0x48>)
 8002454:	1a1b      	subs	r3, r3, r0
 8002456:	280a      	cmp	r0, #10
 8002458:	dc11      	bgt.n	800247e <__aeabi_ui2d+0x36>
 800245a:	220b      	movs	r2, #11
 800245c:	0021      	movs	r1, r4
 800245e:	1a12      	subs	r2, r2, r0
 8002460:	40d1      	lsrs	r1, r2
 8002462:	3015      	adds	r0, #21
 8002464:	030a      	lsls	r2, r1, #12
 8002466:	055b      	lsls	r3, r3, #21
 8002468:	4084      	lsls	r4, r0
 800246a:	0b12      	lsrs	r2, r2, #12
 800246c:	0d5b      	lsrs	r3, r3, #21
 800246e:	e001      	b.n	8002474 <__aeabi_ui2d+0x2c>
 8002470:	2300      	movs	r3, #0
 8002472:	2200      	movs	r2, #0
 8002474:	051b      	lsls	r3, r3, #20
 8002476:	4313      	orrs	r3, r2
 8002478:	0020      	movs	r0, r4
 800247a:	0019      	movs	r1, r3
 800247c:	bd10      	pop	{r4, pc}
 800247e:	0022      	movs	r2, r4
 8002480:	380b      	subs	r0, #11
 8002482:	4082      	lsls	r2, r0
 8002484:	055b      	lsls	r3, r3, #21
 8002486:	0312      	lsls	r2, r2, #12
 8002488:	2400      	movs	r4, #0
 800248a:	0b12      	lsrs	r2, r2, #12
 800248c:	0d5b      	lsrs	r3, r3, #21
 800248e:	e7f1      	b.n	8002474 <__aeabi_ui2d+0x2c>
 8002490:	0000041e 	.word	0x0000041e

08002494 <__aeabi_f2d>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	0043      	lsls	r3, r0, #1
 8002498:	0246      	lsls	r6, r0, #9
 800249a:	0fc4      	lsrs	r4, r0, #31
 800249c:	20fe      	movs	r0, #254	; 0xfe
 800249e:	0e1b      	lsrs	r3, r3, #24
 80024a0:	1c59      	adds	r1, r3, #1
 80024a2:	0a75      	lsrs	r5, r6, #9
 80024a4:	4208      	tst	r0, r1
 80024a6:	d00c      	beq.n	80024c2 <__aeabi_f2d+0x2e>
 80024a8:	22e0      	movs	r2, #224	; 0xe0
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	4694      	mov	ip, r2
 80024ae:	076d      	lsls	r5, r5, #29
 80024b0:	0b36      	lsrs	r6, r6, #12
 80024b2:	4463      	add	r3, ip
 80024b4:	051b      	lsls	r3, r3, #20
 80024b6:	4333      	orrs	r3, r6
 80024b8:	07e4      	lsls	r4, r4, #31
 80024ba:	4323      	orrs	r3, r4
 80024bc:	0028      	movs	r0, r5
 80024be:	0019      	movs	r1, r3
 80024c0:	bd70      	pop	{r4, r5, r6, pc}
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d114      	bne.n	80024f0 <__aeabi_f2d+0x5c>
 80024c6:	2d00      	cmp	r5, #0
 80024c8:	d01b      	beq.n	8002502 <__aeabi_f2d+0x6e>
 80024ca:	0028      	movs	r0, r5
 80024cc:	f000 f8b2 	bl	8002634 <__clzsi2>
 80024d0:	280a      	cmp	r0, #10
 80024d2:	dc1c      	bgt.n	800250e <__aeabi_f2d+0x7a>
 80024d4:	230b      	movs	r3, #11
 80024d6:	002a      	movs	r2, r5
 80024d8:	1a1b      	subs	r3, r3, r0
 80024da:	40da      	lsrs	r2, r3
 80024dc:	0003      	movs	r3, r0
 80024de:	3315      	adds	r3, #21
 80024e0:	409d      	lsls	r5, r3
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <__aeabi_f2d+0x88>)
 80024e4:	0312      	lsls	r2, r2, #12
 80024e6:	1a1b      	subs	r3, r3, r0
 80024e8:	055b      	lsls	r3, r3, #21
 80024ea:	0b16      	lsrs	r6, r2, #12
 80024ec:	0d5b      	lsrs	r3, r3, #21
 80024ee:	e7e1      	b.n	80024b4 <__aeabi_f2d+0x20>
 80024f0:	2d00      	cmp	r5, #0
 80024f2:	d009      	beq.n	8002508 <__aeabi_f2d+0x74>
 80024f4:	0b32      	lsrs	r2, r6, #12
 80024f6:	2680      	movs	r6, #128	; 0x80
 80024f8:	0336      	lsls	r6, r6, #12
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <__aeabi_f2d+0x8c>)
 80024fc:	076d      	lsls	r5, r5, #29
 80024fe:	4316      	orrs	r6, r2
 8002500:	e7d8      	b.n	80024b4 <__aeabi_f2d+0x20>
 8002502:	2300      	movs	r3, #0
 8002504:	2600      	movs	r6, #0
 8002506:	e7d5      	b.n	80024b4 <__aeabi_f2d+0x20>
 8002508:	2600      	movs	r6, #0
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <__aeabi_f2d+0x8c>)
 800250c:	e7d2      	b.n	80024b4 <__aeabi_f2d+0x20>
 800250e:	0003      	movs	r3, r0
 8002510:	002a      	movs	r2, r5
 8002512:	3b0b      	subs	r3, #11
 8002514:	409a      	lsls	r2, r3
 8002516:	2500      	movs	r5, #0
 8002518:	e7e3      	b.n	80024e2 <__aeabi_f2d+0x4e>
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	00000389 	.word	0x00000389
 8002520:	000007ff 	.word	0x000007ff

08002524 <__aeabi_d2f>:
 8002524:	0002      	movs	r2, r0
 8002526:	004b      	lsls	r3, r1, #1
 8002528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252a:	0308      	lsls	r0, r1, #12
 800252c:	0d5b      	lsrs	r3, r3, #21
 800252e:	4e3d      	ldr	r6, [pc, #244]	; (8002624 <__aeabi_d2f+0x100>)
 8002530:	0fcc      	lsrs	r4, r1, #31
 8002532:	0a40      	lsrs	r0, r0, #9
 8002534:	0f51      	lsrs	r1, r2, #29
 8002536:	1c5f      	adds	r7, r3, #1
 8002538:	4308      	orrs	r0, r1
 800253a:	00d5      	lsls	r5, r2, #3
 800253c:	4237      	tst	r7, r6
 800253e:	d00a      	beq.n	8002556 <__aeabi_d2f+0x32>
 8002540:	4939      	ldr	r1, [pc, #228]	; (8002628 <__aeabi_d2f+0x104>)
 8002542:	185e      	adds	r6, r3, r1
 8002544:	2efe      	cmp	r6, #254	; 0xfe
 8002546:	dd16      	ble.n	8002576 <__aeabi_d2f+0x52>
 8002548:	23ff      	movs	r3, #255	; 0xff
 800254a:	2100      	movs	r1, #0
 800254c:	05db      	lsls	r3, r3, #23
 800254e:	430b      	orrs	r3, r1
 8002550:	07e0      	lsls	r0, r4, #31
 8002552:	4318      	orrs	r0, r3
 8002554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <__aeabi_d2f+0x44>
 800255a:	4328      	orrs	r0, r5
 800255c:	d027      	beq.n	80025ae <__aeabi_d2f+0x8a>
 800255e:	2105      	movs	r1, #5
 8002560:	0189      	lsls	r1, r1, #6
 8002562:	0a49      	lsrs	r1, r1, #9
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e7f1      	b.n	800254c <__aeabi_d2f+0x28>
 8002568:	4305      	orrs	r5, r0
 800256a:	d0ed      	beq.n	8002548 <__aeabi_d2f+0x24>
 800256c:	2180      	movs	r1, #128	; 0x80
 800256e:	03c9      	lsls	r1, r1, #15
 8002570:	23ff      	movs	r3, #255	; 0xff
 8002572:	4301      	orrs	r1, r0
 8002574:	e7ea      	b.n	800254c <__aeabi_d2f+0x28>
 8002576:	2e00      	cmp	r6, #0
 8002578:	dd1c      	ble.n	80025b4 <__aeabi_d2f+0x90>
 800257a:	0192      	lsls	r2, r2, #6
 800257c:	0011      	movs	r1, r2
 800257e:	1e4a      	subs	r2, r1, #1
 8002580:	4191      	sbcs	r1, r2
 8002582:	00c0      	lsls	r0, r0, #3
 8002584:	0f6d      	lsrs	r5, r5, #29
 8002586:	4301      	orrs	r1, r0
 8002588:	4329      	orrs	r1, r5
 800258a:	074b      	lsls	r3, r1, #29
 800258c:	d048      	beq.n	8002620 <__aeabi_d2f+0xfc>
 800258e:	230f      	movs	r3, #15
 8002590:	400b      	ands	r3, r1
 8002592:	2b04      	cmp	r3, #4
 8002594:	d000      	beq.n	8002598 <__aeabi_d2f+0x74>
 8002596:	3104      	adds	r1, #4
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	04db      	lsls	r3, r3, #19
 800259c:	400b      	ands	r3, r1
 800259e:	d03f      	beq.n	8002620 <__aeabi_d2f+0xfc>
 80025a0:	1c72      	adds	r2, r6, #1
 80025a2:	2efe      	cmp	r6, #254	; 0xfe
 80025a4:	d0d0      	beq.n	8002548 <__aeabi_d2f+0x24>
 80025a6:	0189      	lsls	r1, r1, #6
 80025a8:	0a49      	lsrs	r1, r1, #9
 80025aa:	b2d3      	uxtb	r3, r2
 80025ac:	e7ce      	b.n	800254c <__aeabi_d2f+0x28>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	e7cb      	b.n	800254c <__aeabi_d2f+0x28>
 80025b4:	0032      	movs	r2, r6
 80025b6:	3217      	adds	r2, #23
 80025b8:	db22      	blt.n	8002600 <__aeabi_d2f+0xdc>
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	221e      	movs	r2, #30
 80025be:	0409      	lsls	r1, r1, #16
 80025c0:	4308      	orrs	r0, r1
 80025c2:	1b92      	subs	r2, r2, r6
 80025c4:	2a1f      	cmp	r2, #31
 80025c6:	dd1d      	ble.n	8002604 <__aeabi_d2f+0xe0>
 80025c8:	2102      	movs	r1, #2
 80025ca:	4249      	negs	r1, r1
 80025cc:	1b8e      	subs	r6, r1, r6
 80025ce:	0001      	movs	r1, r0
 80025d0:	40f1      	lsrs	r1, r6
 80025d2:	000e      	movs	r6, r1
 80025d4:	2a20      	cmp	r2, #32
 80025d6:	d004      	beq.n	80025e2 <__aeabi_d2f+0xbe>
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <__aeabi_d2f+0x108>)
 80025da:	4694      	mov	ip, r2
 80025dc:	4463      	add	r3, ip
 80025de:	4098      	lsls	r0, r3
 80025e0:	4305      	orrs	r5, r0
 80025e2:	0029      	movs	r1, r5
 80025e4:	1e4d      	subs	r5, r1, #1
 80025e6:	41a9      	sbcs	r1, r5
 80025e8:	4331      	orrs	r1, r6
 80025ea:	2600      	movs	r6, #0
 80025ec:	074b      	lsls	r3, r1, #29
 80025ee:	d1ce      	bne.n	800258e <__aeabi_d2f+0x6a>
 80025f0:	2080      	movs	r0, #128	; 0x80
 80025f2:	000b      	movs	r3, r1
 80025f4:	04c0      	lsls	r0, r0, #19
 80025f6:	2201      	movs	r2, #1
 80025f8:	4003      	ands	r3, r0
 80025fa:	4201      	tst	r1, r0
 80025fc:	d1d3      	bne.n	80025a6 <__aeabi_d2f+0x82>
 80025fe:	e7af      	b.n	8002560 <__aeabi_d2f+0x3c>
 8002600:	2300      	movs	r3, #0
 8002602:	e7ac      	b.n	800255e <__aeabi_d2f+0x3a>
 8002604:	490a      	ldr	r1, [pc, #40]	; (8002630 <__aeabi_d2f+0x10c>)
 8002606:	468c      	mov	ip, r1
 8002608:	0029      	movs	r1, r5
 800260a:	4463      	add	r3, ip
 800260c:	40d1      	lsrs	r1, r2
 800260e:	409d      	lsls	r5, r3
 8002610:	000a      	movs	r2, r1
 8002612:	0029      	movs	r1, r5
 8002614:	4098      	lsls	r0, r3
 8002616:	1e4d      	subs	r5, r1, #1
 8002618:	41a9      	sbcs	r1, r5
 800261a:	4301      	orrs	r1, r0
 800261c:	4311      	orrs	r1, r2
 800261e:	e7e4      	b.n	80025ea <__aeabi_d2f+0xc6>
 8002620:	0033      	movs	r3, r6
 8002622:	e79d      	b.n	8002560 <__aeabi_d2f+0x3c>
 8002624:	000007fe 	.word	0x000007fe
 8002628:	fffffc80 	.word	0xfffffc80
 800262c:	fffffca2 	.word	0xfffffca2
 8002630:	fffffc82 	.word	0xfffffc82

08002634 <__clzsi2>:
 8002634:	211c      	movs	r1, #28
 8002636:	2301      	movs	r3, #1
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	4298      	cmp	r0, r3
 800263c:	d301      	bcc.n	8002642 <__clzsi2+0xe>
 800263e:	0c00      	lsrs	r0, r0, #16
 8002640:	3910      	subs	r1, #16
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	4298      	cmp	r0, r3
 8002646:	d301      	bcc.n	800264c <__clzsi2+0x18>
 8002648:	0a00      	lsrs	r0, r0, #8
 800264a:	3908      	subs	r1, #8
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	4298      	cmp	r0, r3
 8002650:	d301      	bcc.n	8002656 <__clzsi2+0x22>
 8002652:	0900      	lsrs	r0, r0, #4
 8002654:	3904      	subs	r1, #4
 8002656:	a202      	add	r2, pc, #8	; (adr r2, 8002660 <__clzsi2+0x2c>)
 8002658:	5c10      	ldrb	r0, [r2, r0]
 800265a:	1840      	adds	r0, r0, r1
 800265c:	4770      	bx	lr
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	02020304 	.word	0x02020304
 8002664:	01010101 	.word	0x01010101
	...

08002670 <minArr>:
*/
																															 
/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
*/
uint8_t minArr(uint8_t* arr, uint8_t* Q)
{
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	0004      	movs	r4, r0
	uint8_t smallest = 0xFF; uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 8002674:	780b      	ldrb	r3, [r1, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <minArr+0x12>
		smallest = arr[0];
 800267a:	7805      	ldrb	r5, [r0, #0]

	for (int i=0 ; i<N ; i++) {
		if ((arr[i] < smallest) && !Q[i]) {
			smallest = arr[i];
 800267c:	2300      	movs	r3, #0
 800267e:	2000      	movs	r0, #0
 8002680:	e002      	b.n	8002688 <minArr+0x18>
	uint8_t smallest = 0xFF; uint8_t index = 0;
 8002682:	25ff      	movs	r5, #255	; 0xff
 8002684:	e7fa      	b.n	800267c <minArr+0xc>
	for (int i=0 ; i<N ; i++) {
 8002686:	3301      	adds	r3, #1
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <minArr+0x34>)
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	dd08      	ble.n	80026a2 <minArr+0x32>
		if ((arr[i] < smallest) && !Q[i]) {
 8002690:	5ce2      	ldrb	r2, [r4, r3]
 8002692:	42aa      	cmp	r2, r5
 8002694:	d2f7      	bcs.n	8002686 <minArr+0x16>
 8002696:	5cce      	ldrb	r6, [r1, r3]
 8002698:	2e00      	cmp	r6, #0
 800269a:	d1f4      	bne.n	8002686 <minArr+0x16>
			index = i;
 800269c:	b2d8      	uxtb	r0, r3
			smallest = arr[i];
 800269e:	0015      	movs	r5, r2
 80026a0:	e7f1      	b.n	8002686 <minArr+0x16>
		}
	}
	
	return index;
}
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	2000001c 	.word	0x2000001c

080026a8 <QnotEmpty>:
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
*/
uint8_t QnotEmpty(uint8_t* Q)
{		
 80026a8:	0001      	movs	r1, r0
	char temp = 1;

	for (int i=0 ; i<N ; i++) {
 80026aa:	2300      	movs	r3, #0
	char temp = 1;
 80026ac:	2001      	movs	r0, #1
	for (int i=0 ; i<N ; i++) {
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <QnotEmpty+0x18>)
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dd03      	ble.n	80026be <QnotEmpty+0x16>
		temp &= Q[i];
 80026b6:	5cca      	ldrb	r2, [r1, r3]
 80026b8:	4010      	ands	r0, r2
	for (int i=0 ; i<N ; i++) {
 80026ba:	3301      	adds	r3, #1
 80026bc:	e7f7      	b.n	80026ae <QnotEmpty+0x6>
	}	
	
	return temp;
}
 80026be:	4770      	bx	lr
 80026c0:	2000001c 	.word	0x2000001c

080026c4 <LoadROsnippets>:
/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
*/
uint8_t LoadROsnippets(void)
{
 80026c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c6:	46d6      	mov	lr, sl
 80026c8:	464f      	mov	r7, r9
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b083      	sub	sp, #12
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 80026ce:	2032      	movs	r0, #50	; 0x32
 80026d0:	f010 ffe2 	bl	8013698 <malloc>
 80026d4:	1e06      	subs	r6, r0, #0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 80026d6:	d067      	beq.n	80027a8 <LoadROsnippets+0xe4>
	
	// Exit if no recorded Snippets
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 80026d8:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <LoadROsnippets+0xec>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2bfe      	cmp	r3, #254	; 0xfe
 80026de:	d165      	bne.n	80027ac <LoadROsnippets+0xe8>
	
	/* Load Snippets */
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 80026e0:	2700      	movs	r7, #0
	int currentAdd = RO_MID_ADDRESS;
 80026e2:	4c33      	ldr	r4, [pc, #204]	; (80027b0 <LoadROsnippets+0xec>)
 80026e4:	e049      	b.n	800277a <LoadROsnippets+0xb6>
	{
		// Load conditions starting at RO_MID_ADDRESS
		for(i=0 ; i<sizeof(snippet_t) ; i++)
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 80026e6:	7822      	ldrb	r2, [r4, #0]
 80026e8:	54f2      	strb	r2, [r6, r3]
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 80026ea:	3301      	adds	r3, #1
 80026ec:	b2db      	uxtb	r3, r3
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 80026ee:	3401      	adds	r4, #1
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 80026f0:	2b13      	cmp	r3, #19
 80026f2:	d9f8      	bls.n	80026e6 <LoadROsnippets+0x22>
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 80026f4:	46ba      	mov	sl, r7
 80026f6:	00bb      	lsls	r3, r7, #2
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4a2d      	ldr	r2, [pc, #180]	; (80027b4 <LoadROsnippets+0xf0>)
 80026fe:	4699      	mov	r9, r3
 8002700:	4491      	add	r9, r2
 8002702:	1c71      	adds	r1, r6, #1
 8002704:	2214      	movs	r2, #20
 8002706:	4648      	mov	r0, r9
 8002708:	f010 ffe8 	bl	80136dc <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 800270c:	2214      	movs	r2, #20
 800270e:	2100      	movs	r1, #0
 8002710:	0030      	movs	r0, r6
 8002712:	f010 ffec 	bl	80136ee <memset>
 8002716:	2500      	movs	r5, #0
		// Load commands until you get next 0xFE
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8002718:	9401      	str	r4, [sp, #4]
 800271a:	7823      	ldrb	r3, [r4, #0]
 800271c:	2bfd      	cmp	r3, #253	; 0xfd
 800271e:	d806      	bhi.n	800272e <LoadROsnippets+0x6a>
 8002720:	2d31      	cmp	r5, #49	; 0x31
 8002722:	d804      	bhi.n	800272e <LoadROsnippets+0x6a>
		{
			snipBuffer[i] = *(uint8_t *)currentAdd;
 8002724:	5573      	strb	r3, [r6, r5]
			++currentAdd; ++i;
 8002726:	3401      	adds	r4, #1
 8002728:	3501      	adds	r5, #1
 800272a:	b2ed      	uxtb	r5, r5
 800272c:	e7f4      	b.n	8002718 <LoadROsnippets+0x54>
		}
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 800272e:	1973      	adds	r3, r6, r5
 8002730:	3b01      	subs	r3, #1
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <LoadROsnippets+0x78>
 8002738:	3501      	adds	r5, #1
 800273a:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd = (char *) malloc(i);
 800273c:	0028      	movs	r0, r5
 800273e:	f010 ffab 	bl	8013698 <malloc>
 8002742:	4653      	mov	r3, sl
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4453      	add	r3, sl
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <LoadROsnippets+0xf0>)
 800274c:	18d3      	adds	r3, r2, r3
 800274e:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 8002750:	2800      	cmp	r0, #0
 8002752:	d016      	beq.n	8002782 <LoadROsnippets+0xbe>
			memset(&snippets[s], 0, sizeof(snippet_t) );
			free(snipBuffer);			
			return BOS_ERR_SNIP_MEM_FULL;
		} else {	
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
 8002754:	002a      	movs	r2, r5
 8002756:	0031      	movs	r1, r6
 8002758:	f010 ffc0 	bl	80136dc <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800275c:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <LoadROsnippets+0xf4>)
 800275e:	7813      	ldrb	r3, [r2, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 8002764:	002a      	movs	r2, r5
 8002766:	2100      	movs	r1, #0
 8002768:	0030      	movs	r0, r6
 800276a:	f010 ffc0 	bl	80136ee <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 800276e:	9b01      	ldr	r3, [sp, #4]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2bfe      	cmp	r3, #254	; 0xfe
 8002774:	d10f      	bne.n	8002796 <LoadROsnippets+0xd2>
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 8002776:	3701      	adds	r7, #1
 8002778:	b2ff      	uxtb	r7, r7
 800277a:	2f04      	cmp	r7, #4
 800277c:	d80b      	bhi.n	8002796 <LoadROsnippets+0xd2>
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	e7b6      	b.n	80026f0 <LoadROsnippets+0x2c>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 8002782:	2214      	movs	r2, #20
 8002784:	2100      	movs	r1, #0
 8002786:	4648      	mov	r0, r9
 8002788:	f010 ffb1 	bl	80136ee <memset>
			free(snipBuffer);			
 800278c:	0030      	movs	r0, r6
 800278e:	f010 ff8d 	bl	80136ac <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8002792:	200e      	movs	r0, #14
 8002794:	e003      	b.n	800279e <LoadROsnippets+0xda>
	}	
	
	free(snipBuffer);
 8002796:	0030      	movs	r0, r6
 8002798:	f010 ff88 	bl	80136ac <free>
	return BOS_OK;
 800279c:	2000      	movs	r0, #0
}
 800279e:	b003      	add	sp, #12
 80027a0:	bcc0      	pop	{r6, r7}
 80027a2:	46ba      	mov	sl, r7
 80027a4:	46b1      	mov	r9, r6
 80027a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 80027a8:	20fb      	movs	r0, #251	; 0xfb
 80027aa:	e7f8      	b.n	800279e <LoadROsnippets+0xda>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 80027ac:	20ff      	movs	r0, #255	; 0xff
 80027ae:	e7f6      	b.n	800279e <LoadROsnippets+0xda>
 80027b0:	0801dc00 	.word	0x0801dc00
 80027b4:	20006154 	.word	0x20006154
 80027b8:	20000a3f 	.word	0x20000a3f

080027bc <LoadROtopology>:


/* --- Load array topology stored in Flash RO --- 
*/
uint8_t LoadROtopology(void)
{
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t add = 2, temp = 0;
	
	/* Load number of modules */
	temp = (*(__IO uint16_t*)(RO_START_ADDRESS));
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <LoadROtopology+0x88>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
	
	if (temp == 0xFFFF)				// Memory has been erased
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <LoadROtopology+0x8c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00b      	beq.n	80027e4 <LoadROtopology+0x28>
		myID = 0;
		return BOS_MEM_ERASED;
	}
	else
	{		
		N = (uint8_t) (temp>>8);
 80027cc:	0a1a      	lsrs	r2, r3, #8
 80027ce:	491f      	ldr	r1, [pc, #124]	; (800284c <LoadROtopology+0x90>)
 80027d0:	700a      	strb	r2, [r1, #0]
		if (N == 0)	N = 1;
 80027d2:	d102      	bne.n	80027da <LoadROtopology+0x1e>
 80027d4:	000a      	movs	r2, r1
 80027d6:	2101      	movs	r1, #1
 80027d8:	7011      	strb	r1, [r2, #0]
		myID = (uint8_t) temp;
 80027da:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <LoadROtopology+0x94>)
 80027dc:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i=1 ; i<=N ; i++)
 80027de:	2401      	movs	r4, #1
	uint16_t add = 2, temp = 0;
 80027e0:	2002      	movs	r0, #2
		for(uint8_t i=1 ; i<=N ; i++)
 80027e2:	e023      	b.n	800282c <LoadROtopology+0x70>
		N = 1;
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <LoadROtopology+0x90>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
		myID = 0;
 80027ea:	4b19      	ldr	r3, [pc, #100]	; (8002850 <LoadROtopology+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 80027f0:	20fa      	movs	r0, #250	; 0xfa
 80027f2:	e024      	b.n	800283e <LoadROtopology+0x82>
		{
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
			{
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <LoadROtopology+0x88>)
 80027f6:	18c3      	adds	r3, r0, r3
 80027f8:	1e65      	subs	r5, r4, #1
 80027fa:	466a      	mov	r2, sp
 80027fc:	79d1      	ldrb	r1, [r2, #7]
 80027fe:	881e      	ldrh	r6, [r3, #0]
 8002800:	00ab      	lsls	r3, r5, #2
 8002802:	195b      	adds	r3, r3, r5
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	195b      	adds	r3, r3, r5
 8002808:	18cb      	adds	r3, r1, r3
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4911      	ldr	r1, [pc, #68]	; (8002854 <LoadROtopology+0x98>)
 800280e:	52ce      	strh	r6, [r1, r3]
				add += 2;			
 8002810:	3002      	adds	r0, #2
 8002812:	b280      	uxth	r0, r0
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8002814:	79d3      	ldrb	r3, [r2, #7]
 8002816:	3301      	adds	r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	71d3      	strb	r3, [r2, #7]
 800281c:	466b      	mov	r3, sp
 800281e:	3307      	adds	r3, #7
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b0a      	cmp	r3, #10
 8002826:	d9e5      	bls.n	80027f4 <LoadROtopology+0x38>
		for(uint8_t i=1 ; i<=N ; i++)
 8002828:	3401      	adds	r4, #1
 800282a:	b2e4      	uxtb	r4, r4
 800282c:	4b07      	ldr	r3, [pc, #28]	; (800284c <LoadROtopology+0x90>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	42a3      	cmp	r3, r4
 8002832:	d303      	bcc.n	800283c <LoadROtopology+0x80>
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8002834:	466b      	mov	r3, sp
 8002836:	2200      	movs	r2, #0
 8002838:	71da      	strb	r2, [r3, #7]
 800283a:	e7ef      	b.n	800281c <LoadROtopology+0x60>
			}
		}	
	}
	
	return result;
 800283c:	2000      	movs	r0, #0
}
 800283e:	b002      	add	sp, #8
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	0801d800 	.word	0x0801d800
 8002848:	0000ffff 	.word	0x0000ffff
 800284c:	2000001c 	.word	0x2000001c
 8002850:	2000089e 	.word	0x2000089e
 8002854:	200002d8 	.word	0x200002d8

08002858 <SaveEEportsDir>:


/* --- Save array ports directions in EEPROM --- 
*/
BOS_Status SaveEEportsDir(void)
{
 8002858:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 800285a:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 800285c:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 800285e:	e005      	b.n	800286c <SaveEEportsDir+0x14>
	{
		if (arrayPortsDir[i-1])
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8002860:	1c60      	adds	r0, r4, #1
 8002862:	f004 fbe3 	bl	800702c <EE_WriteVariable>
 8002866:	e00b      	b.n	8002880 <SaveEEportsDir+0x28>
	for(uint8_t i=1 ; i<=N ; i++)
 8002868:	3401      	adds	r4, #1
 800286a:	b2e4      	uxtb	r4, r4
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <SaveEEportsDir+0x34>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	42a3      	cmp	r3, r4
 8002872:	d309      	bcc.n	8002888 <SaveEEportsDir+0x30>
		if (arrayPortsDir[i-1])
 8002874:	1e63      	subs	r3, r4, #1
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4a05      	ldr	r2, [pc, #20]	; (8002890 <SaveEEportsDir+0x38>)
 800287a:	5a99      	ldrh	r1, [r3, r2]
 800287c:	2900      	cmp	r1, #0
 800287e:	d1ef      	bne.n	8002860 <SaveEEportsDir+0x8>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002880:	2c19      	cmp	r4, #25
 8002882:	d9f1      	bls.n	8002868 <SaveEEportsDir+0x10>
			result = BOS_ERR_EEPROM;
 8002884:	250a      	movs	r5, #10
 8002886:	e7ef      	b.n	8002868 <SaveEEportsDir+0x10>
	}
	
	return result;
}
 8002888:	0028      	movs	r0, r5
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	2000001c 	.word	0x2000001c
 8002890:	200065c0 	.word	0x200065c0

08002894 <ClearEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
*/
BOS_Status ClearEEportsDir(void)
{
 8002894:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK; 
	
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8002896:	2234      	movs	r2, #52	; 0x34
 8002898:	2100      	movs	r1, #0
 800289a:	480e      	ldr	r0, [pc, #56]	; (80028d4 <ClearEEportsDir+0x40>)
 800289c:	f010 ff27 	bl	80136ee <memset>
	
	for(uint8_t i=1 ; i<=N ; i++)
 80028a0:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 80028a2:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 80028a4:	e005      	b.n	80028b2 <ClearEEportsDir+0x1e>
	{
		if (arrayPortsDir[i-1])
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 80028a6:	1c60      	adds	r0, r4, #1
 80028a8:	f004 fbc0 	bl	800702c <EE_WriteVariable>
 80028ac:	e00b      	b.n	80028c6 <ClearEEportsDir+0x32>
	for(uint8_t i=1 ; i<=N ; i++)
 80028ae:	3401      	adds	r4, #1
 80028b0:	b2e4      	uxtb	r4, r4
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <ClearEEportsDir+0x44>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	42a3      	cmp	r3, r4
 80028b8:	d309      	bcc.n	80028ce <ClearEEportsDir+0x3a>
		if (arrayPortsDir[i-1])
 80028ba:	1e63      	subs	r3, r4, #1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <ClearEEportsDir+0x40>)
 80028c0:	5a99      	ldrh	r1, [r3, r2]
 80028c2:	2900      	cmp	r1, #0
 80028c4:	d1ef      	bne.n	80028a6 <ClearEEportsDir+0x12>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80028c6:	2c19      	cmp	r4, #25
 80028c8:	d9f1      	bls.n	80028ae <ClearEEportsDir+0x1a>
			result = BOS_ERR_EEPROM;
 80028ca:	250a      	movs	r5, #10
 80028cc:	e7ef      	b.n	80028ae <ClearEEportsDir+0x1a>
	}
	
	return result;
}
 80028ce:	0028      	movs	r0, r5
 80028d0:	bd70      	pop	{r4, r5, r6, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	200065c0 	.word	0x200065c0
 80028d8:	2000001c 	.word	0x2000001c

080028dc <LoadEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
*/
BOS_Status LoadEEportsDir(void)
{
 80028dc:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 80028de:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 80028e0:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 80028e2:	e001      	b.n	80028e8 <LoadEEportsDir+0xc>
 80028e4:	3401      	adds	r4, #1
 80028e6:	b2e4      	uxtb	r4, r4
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <LoadEEportsDir+0x30>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	42a3      	cmp	r3, r4
 80028ee:	d30a      	bcc.n	8002906 <LoadEEportsDir+0x2a>
	{
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 80028f0:	1e61      	subs	r1, r4, #1
 80028f2:	0049      	lsls	r1, r1, #1
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <LoadEEportsDir+0x34>)
 80028f6:	18c9      	adds	r1, r1, r3
 80028f8:	1c60      	adds	r0, r4, #1
 80028fa:	f004 fae5 	bl	8006ec8 <EE_ReadVariable>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80028fe:	2c19      	cmp	r4, #25
 8002900:	d9f0      	bls.n	80028e4 <LoadEEportsDir+0x8>
			result = BOS_ERR_EEPROM;
 8002902:	250a      	movs	r5, #10
 8002904:	e7ee      	b.n	80028e4 <LoadEEportsDir+0x8>
	}
	
	return result;
}
 8002906:	0028      	movs	r0, r5
 8002908:	bd70      	pop	{r4, r5, r6, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	2000001c 	.word	0x2000001c
 8002910:	200065c0 	.word	0x200065c0

08002914 <SaveEEalias>:
/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
*/
BOS_Status SaveEEalias(void)
{
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002916:	2500      	movs	r5, #0
	uint16_t add = 0, temp = 0;
 8002918:	2600      	movs	r6, #0
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800291a:	e001      	b.n	8002920 <SaveEEalias+0xc>
 800291c:	3501      	adds	r5, #1
 800291e:	b2ed      	uxtb	r5, r5
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <SaveEEalias+0x58>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	42ab      	cmp	r3, r5
 8002926:	d31f      	bcc.n	8002968 <SaveEEalias+0x54>
	{
		if (moduleAlias[i][0]) 				
 8002928:	002f      	movs	r7, r5
 800292a:	00ab      	lsls	r3, r5, #2
 800292c:	195b      	adds	r3, r3, r5
 800292e:	005a      	lsls	r2, r3, #1
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <SaveEEalias+0x5c>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f1      	beq.n	800291c <SaveEEalias+0x8>
		{
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002938:	2401      	movs	r4, #1
 800293a:	2c09      	cmp	r4, #9
 800293c:	d8ee      	bhi.n	800291c <SaveEEalias+0x8>
			{
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 800293e:	1e60      	subs	r0, r4, #1
 8002940:	00ba      	lsls	r2, r7, #2
 8002942:	19d2      	adds	r2, r2, r7
 8002944:	0051      	lsls	r1, r2, #1
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <SaveEEalias+0x5c>)
 8002948:	185b      	adds	r3, r3, r1
 800294a:	5c19      	ldrb	r1, [r3, r0]
 800294c:	0209      	lsls	r1, r1, #8
 800294e:	5d1b      	ldrb	r3, [r3, r4]
 8002950:	18c9      	adds	r1, r1, r3
 8002952:	b289      	uxth	r1, r1
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 8002954:	0030      	movs	r0, r6
 8002956:	301c      	adds	r0, #28
 8002958:	b280      	uxth	r0, r0
 800295a:	f004 fb67 	bl	800702c <EE_WriteVariable>
				add++;			
 800295e:	3601      	adds	r6, #1
 8002960:	b2b6      	uxth	r6, r6
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002962:	3402      	adds	r4, #2
 8002964:	b2e4      	uxtb	r4, r4
 8002966:	e7e8      	b.n	800293a <SaveEEalias+0x26>
			}
		}			
	}
	
	return result;
}
 8002968:	2000      	movs	r0, #0
 800296a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296c:	2000001c 	.word	0x2000001c
 8002970:	20000790 	.word	0x20000790

08002974 <LoadEEalias>:
/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
*/
BOS_Status LoadEEalias(void)
{
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002976:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
 8002978:	466b      	mov	r3, sp
 800297a:	2200      	movs	r2, #0
 800297c:	80da      	strh	r2, [r3, #6]
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800297e:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 8002980:	2500      	movs	r5, #0
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002982:	e008      	b.n	8002996 <LoadEEalias+0x22>
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8002984:	00b3      	lsls	r3, r6, #2
 8002986:	199b      	adds	r3, r3, r6
 8002988:	005a      	lsls	r2, r3, #1
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <LoadEEalias+0x70>)
 800298c:	189b      	adds	r3, r3, r2
 800298e:	2200      	movs	r2, #0
 8002990:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002992:	3601      	adds	r6, #1
 8002994:	b2f6      	uxtb	r6, r6
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <LoadEEalias+0x74>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	42b3      	cmp	r3, r6
 800299c:	d31f      	bcc.n	80029de <LoadEEalias+0x6a>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 800299e:	2401      	movs	r4, #1
 80029a0:	2c09      	cmp	r4, #9
 80029a2:	d8ef      	bhi.n	8002984 <LoadEEalias+0x10>
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 80029a4:	0028      	movs	r0, r5
 80029a6:	301c      	adds	r0, #28
 80029a8:	b280      	uxth	r0, r0
 80029aa:	466b      	mov	r3, sp
 80029ac:	1d99      	adds	r1, r3, #6
 80029ae:	f004 fa8b 	bl	8006ec8 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 80029b2:	466b      	mov	r3, sp
 80029b4:	88d8      	ldrh	r0, [r3, #6]
 80029b6:	799b      	ldrb	r3, [r3, #6]
 80029b8:	469c      	mov	ip, r3
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <LoadEEalias+0x70>)
 80029bc:	00b3      	lsls	r3, r6, #2
 80029be:	199f      	adds	r7, r3, r6
 80029c0:	0079      	lsls	r1, r7, #1
 80029c2:	1851      	adds	r1, r2, r1
 80029c4:	4667      	mov	r7, ip
 80029c6:	550f      	strb	r7, [r1, r4]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 80029c8:	1e67      	subs	r7, r4, #1
 80029ca:	0a01      	lsrs	r1, r0, #8
 80029cc:	199b      	adds	r3, r3, r6
 80029ce:	0058      	lsls	r0, r3, #1
 80029d0:	1812      	adds	r2, r2, r0
 80029d2:	55d1      	strb	r1, [r2, r7]
			add++;			
 80029d4:	3501      	adds	r5, #1
 80029d6:	b2ad      	uxth	r5, r5
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80029d8:	3402      	adds	r4, #2
 80029da:	b2e4      	uxtb	r4, r4
 80029dc:	e7e0      	b.n	80029a0 <LoadEEalias+0x2c>
	}
	
	return result;
}
 80029de:	2000      	movs	r0, #0
 80029e0:	b003      	add	sp, #12
 80029e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e4:	20000790 	.word	0x20000790
 80029e8:	2000001c 	.word	0x2000001c

080029ec <LoadEEgroup>:
/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
*/
BOS_Status LoadEEgroup(void)
{
 80029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ee:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80029f0:	466b      	mov	r3, sp
 80029f2:	2200      	movs	r2, #0
 80029f4:	80da      	strh	r2, [r3, #6]
	
	/* Load group members */
	for(i=0 ; i<N ; i++)			// N modules
 80029f6:	2400      	movs	r4, #0
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80029f8:	2500      	movs	r5, #0
	for(i=0 ; i<N ; i++)			// N modules
 80029fa:	e00b      	b.n	8002a14 <LoadEEgroup+0x28>
	{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 80029fc:	0063      	lsls	r3, r4, #1
 80029fe:	491f      	ldr	r1, [pc, #124]	; (8002a7c <LoadEEgroup+0x90>)
 8002a00:	18c9      	adds	r1, r1, r3
 8002a02:	0028      	movs	r0, r5
 8002a04:	30cb      	adds	r0, #203	; 0xcb
 8002a06:	b280      	uxth	r0, r0
 8002a08:	f004 fa5e 	bl	8006ec8 <EE_ReadVariable>
		add++;
 8002a0c:	3501      	adds	r5, #1
 8002a0e:	b2ad      	uxth	r5, r5
	for(i=0 ; i<N ; i++)			// N modules
 8002a10:	3401      	adds	r4, #1
 8002a12:	b2e4      	uxtb	r4, r4
 8002a14:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <LoadEEgroup+0x94>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	42a3      	cmp	r3, r4
 8002a1a:	d8ef      	bhi.n	80029fc <LoadEEgroup+0x10>
	}

	/* Load group alias */
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8002a1c:	2600      	movs	r6, #0
 8002a1e:	e008      	b.n	8002a32 <LoadEEgroup+0x46>
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8002a20:	00b3      	lsls	r3, r6, #2
 8002a22:	199b      	adds	r3, r3, r6
 8002a24:	005a      	lsls	r2, r3, #1
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <LoadEEgroup+0x98>)
 8002a28:	189b      	adds	r3, r3, r2
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	725a      	strb	r2, [r3, #9]
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8002a2e:	3601      	adds	r6, #1
 8002a30:	b2f6      	uxtb	r6, r6
 8002a32:	2e09      	cmp	r6, #9
 8002a34:	d81f      	bhi.n	8002a76 <LoadEEgroup+0x8a>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002a36:	2401      	movs	r4, #1
 8002a38:	2c09      	cmp	r4, #9
 8002a3a:	d8f1      	bhi.n	8002a20 <LoadEEgroup+0x34>
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8002a3c:	0028      	movs	r0, r5
 8002a3e:	3099      	adds	r0, #153	; 0x99
 8002a40:	b280      	uxth	r0, r0
 8002a42:	466b      	mov	r3, sp
 8002a44:	1d99      	adds	r1, r3, #6
 8002a46:	f004 fa3f 	bl	8006ec8 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8002a4a:	466b      	mov	r3, sp
 8002a4c:	88d8      	ldrh	r0, [r3, #6]
 8002a4e:	799b      	ldrb	r3, [r3, #6]
 8002a50:	469c      	mov	ip, r3
 8002a52:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <LoadEEgroup+0x98>)
 8002a54:	00b3      	lsls	r3, r6, #2
 8002a56:	199f      	adds	r7, r3, r6
 8002a58:	0079      	lsls	r1, r7, #1
 8002a5a:	1851      	adds	r1, r2, r1
 8002a5c:	4667      	mov	r7, ip
 8002a5e:	550f      	strb	r7, [r1, r4]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 8002a60:	1e67      	subs	r7, r4, #1
 8002a62:	0a01      	lsrs	r1, r0, #8
 8002a64:	199b      	adds	r3, r3, r6
 8002a66:	0058      	lsls	r0, r3, #1
 8002a68:	1812      	adds	r2, r2, r0
 8002a6a:	55d1      	strb	r1, [r2, r7]
			add++;			
 8002a6c:	3501      	adds	r5, #1
 8002a6e:	b2ad      	uxth	r5, r5
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002a70:	3402      	adds	r4, #2
 8002a72:	b2e4      	uxtb	r4, r4
 8002a74:	e7e0      	b.n	8002a38 <LoadEEgroup+0x4c>
	}
	
	return result;
}
 8002a76:	2000      	movs	r0, #0
 8002a78:	b003      	add	sp, #12
 8002a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a7c:	200006e8 	.word	0x200006e8
 8002a80:	2000001c 	.word	0x2000001c
 8002a84:	20000684 	.word	0x20000684

08002a88 <LoadEEstreams>:
/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
*/
BOS_Status LoadEEstreams(void)
{
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK; 
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 8002a8c:	210e      	movs	r1, #14
 8002a8e:	4469      	add	r1, sp
 8002a90:	2300      	movs	r3, #0
 8002a92:	800b      	strh	r3, [r1, #0]
 8002a94:	aa03      	add	r2, sp, #12
 8002a96:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8002a98:	20e4      	movs	r0, #228	; 0xe4
 8002a9a:	f004 fa15 	bl	8006ec8 <EE_ReadVariable>
	if (!status1) {
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d000      	beq.n	8002aa4 <LoadEEstreams+0x1c>
 8002aa2:	e075      	b.n	8002b90 <LoadEEstreams+0x108>
		direction = (uint8_t) temp1;
 8002aa4:	230e      	movs	r3, #14
 8002aa6:	446b      	add	r3, sp
 8002aa8:	781d      	ldrb	r5, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 8002aaa:	210e      	movs	r1, #14
 8002aac:	4469      	add	r1, sp
 8002aae:	20e5      	movs	r0, #229	; 0xe5
 8002ab0:	f004 fa0a 	bl	8006ec8 <EE_ReadVariable>
 8002ab4:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 8002ab6:	a903      	add	r1, sp, #12
 8002ab8:	20e6      	movs	r0, #230	; 0xe6
 8002aba:	f004 fa05 	bl	8006ec8 <EE_ReadVariable>
	if (!status1 && !status2) {
 8002abe:	4304      	orrs	r4, r0
 8002ac0:	b2a4      	uxth	r4, r4
 8002ac2:	2c00      	cmp	r4, #0
 8002ac4:	d000      	beq.n	8002ac8 <LoadEEstreams+0x40>
 8002ac6:	e065      	b.n	8002b94 <LoadEEstreams+0x10c>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 8002ac8:	230e      	movs	r3, #14
 8002aca:	446b      	add	r3, sp
 8002acc:	881e      	ldrh	r6, [r3, #0]
 8002ace:	0436      	lsls	r6, r6, #16
 8002ad0:	ab03      	add	r3, sp, #12
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 8002ad6:	210e      	movs	r1, #14
 8002ad8:	4469      	add	r1, sp
 8002ada:	20e7      	movs	r0, #231	; 0xe7
 8002adc:	f004 f9f4 	bl	8006ec8 <EE_ReadVariable>
 8002ae0:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 8002ae2:	a903      	add	r1, sp, #12
 8002ae4:	20e8      	movs	r0, #232	; 0xe8
 8002ae6:	f004 f9ef 	bl	8006ec8 <EE_ReadVariable>
	if (!status1 && !status2) {
 8002aea:	4304      	orrs	r4, r0
 8002aec:	b2a4      	uxth	r4, r4
 8002aee:	2c00      	cmp	r4, #0
 8002af0:	d152      	bne.n	8002b98 <LoadEEstreams+0x110>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 8002af2:	230e      	movs	r3, #14
 8002af4:	446b      	add	r3, sp
 8002af6:	881c      	ldrh	r4, [r3, #0]
 8002af8:	0424      	lsls	r4, r4, #16
 8002afa:	ab03      	add	r3, sp, #12
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 8002b00:	210e      	movs	r1, #14
 8002b02:	4469      	add	r1, sp
 8002b04:	20e9      	movs	r0, #233	; 0xe9
 8002b06:	f004 f9df 	bl	8006ec8 <EE_ReadVariable>
	if (!status1) {
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	d107      	bne.n	8002b1e <LoadEEstreams+0x96>
		src1 = (uint8_t) (temp1 >> 8);
 8002b0e:	230e      	movs	r3, #14
 8002b10:	446b      	add	r3, sp
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	0a19      	lsrs	r1, r3, #8
 8002b16:	4a2c      	ldr	r2, [pc, #176]	; (8002bc8 <LoadEEstreams+0x140>)
 8002b18:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <LoadEEstreams+0x144>)
 8002b1c:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 8002b1e:	210e      	movs	r1, #14
 8002b20:	4469      	add	r1, sp
 8002b22:	20ea      	movs	r0, #234	; 0xea
 8002b24:	f004 f9d0 	bl	8006ec8 <EE_ReadVariable>
	if (!status1) {
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	d107      	bne.n	8002b3c <LoadEEstreams+0xb4>
		src2 = (uint8_t) (temp1 >> 8);
 8002b2c:	230e      	movs	r3, #14
 8002b2e:	446b      	add	r3, sp
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	0a19      	lsrs	r1, r3, #8
 8002b34:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <LoadEEstreams+0x148>)
 8002b36:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 8002b38:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <LoadEEstreams+0x14c>)
 8002b3a:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 8002b3c:	210e      	movs	r1, #14
 8002b3e:	4469      	add	r1, sp
 8002b40:	20eb      	movs	r0, #235	; 0xeb
 8002b42:	f004 f9c1 	bl	8006ec8 <EE_ReadVariable>
	if (!status1) {
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d107      	bne.n	8002b5a <LoadEEstreams+0xd2>
		src3 = (uint8_t) (temp1 >> 8);
 8002b4a:	230e      	movs	r3, #14
 8002b4c:	446b      	add	r3, sp
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	0a19      	lsrs	r1, r3, #8
 8002b52:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <LoadEEstreams+0x150>)
 8002b54:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <LoadEEstreams+0x154>)
 8002b58:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if (src1 && dst1)
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <LoadEEstreams+0x140>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <LoadEEstreams+0xe2>
 8002b62:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <LoadEEstreams+0x144>)
 8002b64:	7812      	ldrb	r2, [r2, #0]
 8002b66:	2a00      	cmp	r2, #0
 8002b68:	d118      	bne.n	8002b9c <LoadEEstreams+0x114>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 8002b6a:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <LoadEEstreams+0x148>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <LoadEEstreams+0xf2>
 8002b72:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <LoadEEstreams+0x14c>)
 8002b74:	7812      	ldrb	r2, [r2, #0]
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d117      	bne.n	8002baa <LoadEEstreams+0x122>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <LoadEEstreams+0x150>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <LoadEEstreams+0x102>
 8002b82:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <LoadEEstreams+0x154>)
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	2a00      	cmp	r2, #0
 8002b88:	d116      	bne.n	8002bb8 <LoadEEstreams+0x130>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
	
	return result;
}
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	b004      	add	sp, #16
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8002b90:	2500      	movs	r5, #0
 8002b92:	e78a      	b.n	8002aaa <LoadEEstreams+0x22>
 8002b94:	2600      	movs	r6, #0
 8002b96:	e79e      	b.n	8002ad6 <LoadEEstreams+0x4e>
 8002b98:	2400      	movs	r4, #0
 8002b9a:	e7b1      	b.n	8002b00 <LoadEEstreams+0x78>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 8002b9c:	9200      	str	r2, [sp, #0]
 8002b9e:	0022      	movs	r2, r4
 8002ba0:	0031      	movs	r1, r6
 8002ba2:	0028      	movs	r0, r5
 8002ba4:	f005 fb5a 	bl	800825c <SetupDMAStreams>
 8002ba8:	e7df      	b.n	8002b6a <LoadEEstreams+0xe2>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 8002baa:	9200      	str	r2, [sp, #0]
 8002bac:	0022      	movs	r2, r4
 8002bae:	0031      	movs	r1, r6
 8002bb0:	0028      	movs	r0, r5
 8002bb2:	f005 fb53 	bl	800825c <SetupDMAStreams>
 8002bb6:	e7e0      	b.n	8002b7a <LoadEEstreams+0xf2>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 8002bb8:	9200      	str	r2, [sp, #0]
 8002bba:	0022      	movs	r2, r4
 8002bbc:	0031      	movs	r1, r6
 8002bbe:	0028      	movs	r0, r5
 8002bc0:	f005 fb4c 	bl	800825c <SetupDMAStreams>
 8002bc4:	e7e1      	b.n	8002b8a <LoadEEstreams+0x102>
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	2000096a 	.word	0x2000096a
 8002bcc:	20000681 	.word	0x20000681
 8002bd0:	2000096b 	.word	0x2000096b
 8002bd4:	20000682 	.word	0x20000682
 8002bd8:	2000096c 	.word	0x2000096c
 8002bdc:	20000683 	.word	0x20000683

08002be0 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
*/
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout, uint8_t src1, uint8_t dst1, uint8_t src2, \
	uint8_t dst2, uint8_t src3, uint8_t dst3)
{
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	46de      	mov	lr, fp
 8002be4:	4657      	mov	r7, sl
 8002be6:	464e      	mov	r6, r9
 8002be8:	4645      	mov	r5, r8
 8002bea:	b5e0      	push	{r5, r6, r7, lr}
 8002bec:	000f      	movs	r7, r1
 8002bee:	0016      	movs	r6, r2
 8002bf0:	001c      	movs	r4, r3
 8002bf2:	ab0a      	add	r3, sp, #40	; 0x28
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	469b      	mov	fp, r3
 8002bf8:	ab0b      	add	r3, sp, #44	; 0x2c
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	469a      	mov	sl, r3
 8002bfe:	ab0c      	add	r3, sp, #48	; 0x30
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	4699      	mov	r9, r3
 8002c04:	ab0d      	add	r3, sp, #52	; 0x34
 8002c06:	781d      	ldrb	r5, [r3, #0]
 8002c08:	ab0e      	add	r3, sp, #56	; 0x38
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK; 
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 8002c0e:	0001      	movs	r1, r0
 8002c10:	20e4      	movs	r0, #228	; 0xe4
 8002c12:	f004 fa0b 	bl	800702c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 8002c16:	0a39      	lsrs	r1, r7, #8
 8002c18:	b289      	uxth	r1, r1
 8002c1a:	20e5      	movs	r0, #229	; 0xe5
 8002c1c:	f004 fa06 	bl	800702c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 8002c20:	b2b9      	uxth	r1, r7
 8002c22:	20e6      	movs	r0, #230	; 0xe6
 8002c24:	f004 fa02 	bl	800702c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 8002c28:	0a31      	lsrs	r1, r6, #8
 8002c2a:	b289      	uxth	r1, r1
 8002c2c:	20e7      	movs	r0, #231	; 0xe7
 8002c2e:	f004 f9fd 	bl	800702c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 8002c32:	b2b1      	uxth	r1, r6
 8002c34:	20e8      	movs	r0, #232	; 0xe8
 8002c36:	f004 f9f9 	bl	800702c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 8002c3a:	0224      	lsls	r4, r4, #8
 8002c3c:	445c      	add	r4, fp
 8002c3e:	b2a1      	uxth	r1, r4
 8002c40:	20e9      	movs	r0, #233	; 0xe9
 8002c42:	f004 f9f3 	bl	800702c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 8002c46:	4653      	mov	r3, sl
 8002c48:	0219      	lsls	r1, r3, #8
 8002c4a:	4449      	add	r1, r9
 8002c4c:	b289      	uxth	r1, r1
 8002c4e:	20ea      	movs	r0, #234	; 0xea
 8002c50:	f004 f9ec 	bl	800702c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 8002c54:	022d      	lsls	r5, r5, #8
 8002c56:	4445      	add	r5, r8
 8002c58:	b2a9      	uxth	r1, r5
 8002c5a:	20eb      	movs	r0, #235	; 0xeb
 8002c5c:	f004 f9e6 	bl	800702c <EE_WriteVariable>
	
	return result;
}
 8002c60:	2000      	movs	r0, #0
 8002c62:	bcf0      	pop	{r4, r5, r6, r7}
 8002c64:	46bb      	mov	fp, r7
 8002c66:	46b2      	mov	sl, r6
 8002c68:	46a9      	mov	r9, r5
 8002c6a:	46a0      	mov	r8, r4
 8002c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c70 <LoadEEparams>:
/*-----------------------------------------------------------*/	

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
*/
BOS_Status LoadEEparams(void)
{
 8002c70:	b510      	push	{r4, lr}
 8002c72:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t temp1, temp2, status1, status2; 
	
	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8002c74:	208a      	movs	r0, #138	; 0x8a
 8002c76:	466b      	mov	r3, sp
 8002c78:	1d99      	adds	r1, r3, #6
 8002c7a:	0040      	lsls	r0, r0, #1
 8002c7c:	f004 f924 	bl	8006ec8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d000      	beq.n	8002c86 <LoadEEparams+0x16>
 8002c84:	e067      	b.n	8002d56 <LoadEEparams+0xe6>
		BOS.response = (uint8_t)temp1;
 8002c86:	466b      	mov	r3, sp
 8002c88:	1d9a      	adds	r2, r3, #6
 8002c8a:	88db      	ldrh	r3, [r3, #6]
 8002c8c:	7811      	ldrb	r1, [r2, #0]
 8002c8e:	4a4a      	ldr	r2, [pc, #296]	; (8002db8 <LoadEEparams+0x148>)
 8002c90:	7191      	strb	r1, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}
		
	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 8002c96:	2016      	movs	r0, #22
 8002c98:	466b      	mov	r3, sp
 8002c9a:	1d99      	adds	r1, r3, #6
 8002c9c:	30ff      	adds	r0, #255	; 0xff
 8002c9e:	f004 f913 	bl	8006ec8 <EE_ReadVariable>
	if (!status1) 
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d15e      	bne.n	8002d64 <LoadEEparams+0xf4>
		BOS.buttons.debounce = temp1;
 8002ca6:	466b      	mov	r3, sp
 8002ca8:	88da      	ldrh	r2, [r3, #6]
 8002caa:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <LoadEEparams+0x148>)
 8002cac:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 8002cae:	208b      	movs	r0, #139	; 0x8b
 8002cb0:	466b      	mov	r3, sp
 8002cb2:	1d99      	adds	r1, r3, #6
 8002cb4:	0040      	lsls	r0, r0, #1
 8002cb6:	f004 f907 	bl	8006ec8 <EE_ReadVariable>
	if (!status1) 
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d157      	bne.n	8002d6e <LoadEEparams+0xfe>
		BOS.buttons.singleClickTime = temp1;
 8002cbe:	466b      	mov	r3, sp
 8002cc0:	88da      	ldrh	r2, [r3, #6]
 8002cc2:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <LoadEEparams+0x148>)
 8002cc4:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 8002cc6:	2018      	movs	r0, #24
 8002cc8:	466b      	mov	r3, sp
 8002cca:	1d99      	adds	r1, r3, #6
 8002ccc:	30ff      	adds	r0, #255	; 0xff
 8002cce:	f004 f8fb 	bl	8006ec8 <EE_ReadVariable>
	if (!status1) {
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d150      	bne.n	8002d78 <LoadEEparams+0x108>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 8002cd6:	466b      	mov	r3, sp
 8002cd8:	1d9a      	adds	r2, r3, #6
 8002cda:	88db      	ldrh	r3, [r3, #6]
 8002cdc:	7811      	ldrb	r1, [r2, #0]
 8002cde:	4a36      	ldr	r2, [pc, #216]	; (8002db8 <LoadEEparams+0x148>)
 8002ce0:	7111      	strb	r1, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
	}
	
	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 8002ce6:	208c      	movs	r0, #140	; 0x8c
 8002ce8:	466b      	mov	r3, sp
 8002cea:	1d99      	adds	r1, r3, #6
 8002cec:	0040      	lsls	r0, r0, #1
 8002cee:	f004 f8eb 	bl	8006ec8 <EE_ReadVariable>
 8002cf2:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 8002cf4:	201a      	movs	r0, #26
 8002cf6:	a901      	add	r1, sp, #4
 8002cf8:	30ff      	adds	r0, #255	; 0xff
 8002cfa:	f004 f8e5 	bl	8006ec8 <EE_ReadVariable>
	if (!status1 && !status2) 
 8002cfe:	4304      	orrs	r4, r0
 8002d00:	b2a4      	uxth	r4, r4
 8002d02:	2c00      	cmp	r4, #0
 8002d04:	d13f      	bne.n	8002d86 <LoadEEparams+0x116>
	{
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 8002d06:	466b      	mov	r3, sp
 8002d08:	3306      	adds	r3, #6
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	aa01      	add	r2, sp, #4
 8002d0e:	8812      	ldrh	r2, [r2, #0]
 8002d10:	0412      	lsls	r2, r2, #16
 8002d12:	4313      	orrs	r3, r2
 8002d14:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <LoadEEparams+0x148>)
 8002d16:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8002d18:	208d      	movs	r0, #141	; 0x8d
 8002d1a:	466b      	mov	r3, sp
 8002d1c:	1d99      	adds	r1, r3, #6
 8002d1e:	0040      	lsls	r0, r0, #1
 8002d20:	f004 f8d2 	bl	8006ec8 <EE_ReadVariable>
	if (!status1) {
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d13c      	bne.n	8002da2 <LoadEEparams+0x132>
		BOS.daylightsaving = (int8_t)temp1;
 8002d28:	466b      	mov	r3, sp
 8002d2a:	1d9a      	adds	r2, r3, #6
 8002d2c:	88db      	ldrh	r3, [r3, #6]
 8002d2e:	7811      	ldrb	r1, [r2, #0]
 8002d30:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <LoadEEparams+0x148>)
 8002d32:	7311      	strb	r1, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}		
	
	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8002d38:	201c      	movs	r0, #28
 8002d3a:	466b      	mov	r3, sp
 8002d3c:	1d99      	adds	r1, r3, #6
 8002d3e:	30ff      	adds	r0, #255	; 0xff
 8002d40:	f004 f8c2 	bl	8006ec8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d132      	bne.n	8002dae <LoadEEparams+0x13e>
		BOS.disableCLI = (uint8_t)temp1;
 8002d48:	466b      	mov	r3, sp
 8002d4a:	799a      	ldrb	r2, [r3, #6]
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <LoadEEparams+0x148>)
 8002d4e:	76da      	strb	r2, [r3, #27]
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
	}
	
	return result;
}
 8002d50:	2000      	movs	r0, #0
 8002d52:	b002      	add	sp, #8
 8002d54:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8002d56:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <LoadEEparams+0x14c>)
 8002d58:	7991      	ldrb	r1, [r2, #6]
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <LoadEEparams+0x148>)
 8002d5c:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 8002d5e:	79d2      	ldrb	r2, [r2, #7]
 8002d60:	71da      	strb	r2, [r3, #7]
 8002d62:	e798      	b.n	8002c96 <LoadEEparams+0x26>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <LoadEEparams+0x14c>)
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <LoadEEparams+0x148>)
 8002d6a:	801a      	strh	r2, [r3, #0]
 8002d6c:	e79f      	b.n	8002cae <LoadEEparams+0x3e>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <LoadEEparams+0x14c>)
 8002d70:	885a      	ldrh	r2, [r3, #2]
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <LoadEEparams+0x148>)
 8002d74:	805a      	strh	r2, [r3, #2]
 8002d76:	e7a6      	b.n	8002cc6 <LoadEEparams+0x56>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 8002d78:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <LoadEEparams+0x14c>)
 8002d7a:	7911      	ldrb	r1, [r2, #4]
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <LoadEEparams+0x148>)
 8002d7e:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 8002d80:	7952      	ldrb	r2, [r2, #5]
 8002d82:	715a      	strb	r2, [r3, #5]
 8002d84:	e7af      	b.n	8002ce6 <LoadEEparams+0x76>
	else if(CLI_LOW_Baudrate_Flag)
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <LoadEEparams+0x150>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <LoadEEparams+0x128>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <LoadEEparams+0x148>)
 8002d90:	22e1      	movs	r2, #225	; 0xe1
 8002d92:	0252      	lsls	r2, r2, #9
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	e7bf      	b.n	8002d18 <LoadEEparams+0xa8>
		BOS.clibaudrate = BOS_default.clibaudrate;
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <LoadEEparams+0x14c>)
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <LoadEEparams+0x148>)
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	e7ba      	b.n	8002d18 <LoadEEparams+0xa8>
		BOS.hourformat = 24;
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <LoadEEparams+0x148>)
 8002da4:	2218      	movs	r2, #24
 8002da6:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 8002da8:	2200      	movs	r2, #0
 8002daa:	731a      	strb	r2, [r3, #12]
 8002dac:	e7c4      	b.n	8002d38 <LoadEEparams+0xc8>
		BOS.disableCLI = BOS_default.disableCLI;
 8002dae:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <LoadEEparams+0x14c>)
 8002db0:	7eda      	ldrb	r2, [r3, #27]
 8002db2:	4b01      	ldr	r3, [pc, #4]	; (8002db8 <LoadEEparams+0x148>)
 8002db4:	76da      	strb	r2, [r3, #27]
 8002db6:	e7cb      	b.n	8002d50 <LoadEEparams+0xe0>
 8002db8:	20006138 	.word	0x20006138
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	200002d6 	.word	0x200002d6

08002dc4 <SaveEEparams>:
/*-----------------------------------------------------------*/	

/* --- Save module parameters to emulated EEPROM. --- 
*/
BOS_Status SaveEEparams(void)
{
 8002dc4:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK; 
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 8002dc6:	4c1a      	ldr	r4, [pc, #104]	; (8002e30 <SaveEEparams+0x6c>)
 8002dc8:	79e3      	ldrb	r3, [r4, #7]
 8002dca:	015b      	lsls	r3, r3, #5
 8002dcc:	79a1      	ldrb	r1, [r4, #6]
 8002dce:	4319      	orrs	r1, r3
 8002dd0:	208a      	movs	r0, #138	; 0x8a
 8002dd2:	0040      	lsls	r0, r0, #1
 8002dd4:	f004 f92a 	bl	800702c <EE_WriteVariable>
		
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 8002dd8:	8821      	ldrh	r1, [r4, #0]
 8002dda:	2016      	movs	r0, #22
 8002ddc:	30ff      	adds	r0, #255	; 0xff
 8002dde:	f004 f925 	bl	800702c <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 8002de2:	8861      	ldrh	r1, [r4, #2]
 8002de4:	208b      	movs	r0, #139	; 0x8b
 8002de6:	0040      	lsls	r0, r0, #1
 8002de8:	f004 f920 	bl	800702c <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 8002dec:	7963      	ldrb	r3, [r4, #5]
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	7b21      	ldrb	r1, [r4, #12]
 8002df2:	4319      	orrs	r1, r3
 8002df4:	2018      	movs	r0, #24
 8002df6:	30ff      	adds	r0, #255	; 0xff
 8002df8:	f004 f918 	bl	800702c <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8002dfc:	8921      	ldrh	r1, [r4, #8]
 8002dfe:	208c      	movs	r0, #140	; 0x8c
 8002e00:	0040      	lsls	r0, r0, #1
 8002e02:	f004 f913 	bl	800702c <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8002e06:	8961      	ldrh	r1, [r4, #10]
 8002e08:	201a      	movs	r0, #26
 8002e0a:	30ff      	adds	r0, #255	; 0xff
 8002e0c:	f004 f90e 	bl	800702c <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8002e10:	7b63      	ldrb	r3, [r4, #13]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	7921      	ldrb	r1, [r4, #4]
 8002e16:	4319      	orrs	r1, r3
 8002e18:	208d      	movs	r0, #141	; 0x8d
 8002e1a:	0040      	lsls	r0, r0, #1
 8002e1c:	f004 f906 	bl	800702c <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 8002e20:	7ee1      	ldrb	r1, [r4, #27]
 8002e22:	201c      	movs	r0, #28
 8002e24:	30ff      	adds	r0, #255	; 0xff
 8002e26:	f004 f901 	bl	800702c <EE_WriteVariable>
	
	return result;
}
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	bd10      	pop	{r4, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	20006138 	.word	0x20006138

08002e34 <LoadEEbuttons>:
/*-----------------------------------------------------------*/	

/* --- Load button definitions and events from EEPROM --- 
*/
BOS_Status LoadEEbuttons(void)
{
 8002e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e36:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	uint16_t temp16 = 0, status1 = 0; 
 8002e38:	231e      	movs	r3, #30
 8002e3a:	446b      	add	r3, sp
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 = 0;
	
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8002e40:	2400      	movs	r4, #0
 8002e42:	e001      	b.n	8002e48 <LoadEEbuttons+0x14>
 8002e44:	3401      	adds	r4, #1
 8002e46:	b2e4      	uxtb	r4, r4
 8002e48:	2c05      	cmp	r4, #5
 8002e4a:	d85d      	bhi.n	8002f08 <LoadEEbuttons+0xd4>
	{
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8002e4c:	0025      	movs	r5, r4
 8002e4e:	353b      	adds	r5, #59	; 0x3b
 8002e50:	00ad      	lsls	r5, r5, #2
 8002e52:	b2ad      	uxth	r5, r5
 8002e54:	211e      	movs	r1, #30
 8002e56:	4469      	add	r1, sp
 8002e58:	0028      	movs	r0, r5
 8002e5a:	f004 f835 	bl	8006ec8 <EE_ReadVariable>
		
		if(!status1)																												// This variable exists
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d1f0      	bne.n	8002e44 <LoadEEbuttons+0x10>
		{
			temp8 = (uint8_t)(temp16 >> 8);
 8002e62:	231e      	movs	r3, #30
 8002e64:	446b      	add	r3, sp
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	0a18      	lsrs	r0, r3, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 8002e6a:	0b19      	lsrs	r1, r3, #12
 8002e6c:	1c62      	adds	r2, r4, #1
 8002e6e:	4291      	cmp	r1, r2
 8002e70:	d1e8      	bne.n	8002e44 <LoadEEbuttons+0x10>
 8002e72:	210f      	movs	r1, #15
 8002e74:	000f      	movs	r7, r1
 8002e76:	4007      	ands	r7, r0
 8002e78:	4201      	tst	r1, r0
 8002e7a:	d0e3      	beq.n	8002e44 <LoadEEbuttons+0x10>
			{
				button[i+1].type = temp8 & 0x0F;
 8002e7c:	00d6      	lsls	r6, r2, #3
 8002e7e:	18b2      	adds	r2, r6, r2
 8002e80:	4e23      	ldr	r6, [pc, #140]	; (8002f10 <LoadEEbuttons+0xdc>)
 8002e82:	18b6      	adds	r6, r6, r2
 8002e84:	7077      	strb	r7, [r6, #1]
				button[i+1].events = (uint8_t)temp16;
 8002e86:	7233      	strb	r3, [r6, #8]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 8002e88:	1c68      	adds	r0, r5, #1
 8002e8a:	b280      	uxth	r0, r0
 8002e8c:	231e      	movs	r3, #30
 8002e8e:	446b      	add	r3, sp
 8002e90:	0019      	movs	r1, r3
 8002e92:	f004 f819 	bl	8006ec8 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 8002e96:	466b      	mov	r3, sp
 8002e98:	8bdb      	ldrh	r3, [r3, #30]
 8002e9a:	0a1a      	lsrs	r2, r3, #8
 8002e9c:	70b2      	strb	r2, [r6, #2]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 8002e9e:	7173      	strb	r3, [r6, #5]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 8002ea0:	1ca8      	adds	r0, r5, #2
 8002ea2:	b280      	uxth	r0, r0
 8002ea4:	231e      	movs	r3, #30
 8002ea6:	446b      	add	r3, sp
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	f004 f80d 	bl	8006ec8 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 8002eae:	466b      	mov	r3, sp
 8002eb0:	8bdb      	ldrh	r3, [r3, #30]
 8002eb2:	0a1a      	lsrs	r2, r3, #8
 8002eb4:	70f2      	strb	r2, [r6, #3]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 8002eb6:	71b3      	strb	r3, [r6, #6]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 8002eb8:	3503      	adds	r5, #3
 8002eba:	b2a8      	uxth	r0, r5
 8002ebc:	231e      	movs	r3, #30
 8002ebe:	446b      	add	r3, sp
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	f004 f801 	bl	8006ec8 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 8002ec6:	466b      	mov	r3, sp
 8002ec8:	8bdb      	ldrh	r3, [r3, #30]
 8002eca:	0a1a      	lsrs	r2, r3, #8
 8002ecc:	7132      	strb	r2, [r6, #4]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 8002ece:	71f3      	strb	r3, [r6, #7]
				/* Setup the button and its events */
				AddPortButton(button[i+1].type, i+1);
 8002ed0:	1c65      	adds	r5, r4, #1
 8002ed2:	b2ed      	uxtb	r5, r5
 8002ed4:	7870      	ldrb	r0, [r6, #1]
 8002ed6:	0029      	movs	r1, r5
 8002ed8:	f004 ff10 	bl	8007cfc <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8002edc:	7a31      	ldrb	r1, [r6, #8]
 8002ede:	084a      	lsrs	r2, r1, #1
 8002ee0:	78b3      	ldrb	r3, [r6, #2]
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	4002      	ands	r2, r0
 8002ee6:	4001      	ands	r1, r0
 8002ee8:	2000      	movs	r0, #0
 8002eea:	9005      	str	r0, [sp, #20]
 8002eec:	79f0      	ldrb	r0, [r6, #7]
 8002eee:	9004      	str	r0, [sp, #16]
 8002ef0:	79b0      	ldrb	r0, [r6, #6]
 8002ef2:	9003      	str	r0, [sp, #12]
 8002ef4:	7970      	ldrb	r0, [r6, #5]
 8002ef6:	9002      	str	r0, [sp, #8]
 8002ef8:	7930      	ldrb	r0, [r6, #4]
 8002efa:	9001      	str	r0, [sp, #4]
 8002efc:	78f0      	ldrb	r0, [r6, #3]
 8002efe:	9000      	str	r0, [sp, #0]
 8002f00:	0028      	movs	r0, r5
 8002f02:	f005 f813 	bl	8007f2c <SetButtonEvents>
 8002f06:	e79d      	b.n	8002e44 <LoadEEbuttons+0x10>
			}
		}
	}
	
	return result;
}
 8002f08:	2000      	movs	r0, #0
 8002f0a:	b009      	add	sp, #36	; 0x24
 8002f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	20000ce4 	.word	0x20000ce4

08002f14 <LoadEEvars>:
{
 8002f14:	b510      	push	{r4, lr}
	LoadROtopology();
 8002f16:	f7ff fc51 	bl	80027bc <LoadROtopology>
	LoadEEportsDir();
 8002f1a:	f7ff fcdf 	bl	80028dc <LoadEEportsDir>
	LoadEEalias();
 8002f1e:	f7ff fd29 	bl	8002974 <LoadEEalias>
	LoadEEgroup();
 8002f22:	f7ff fd63 	bl	80029ec <LoadEEgroup>
	LoadEEstreams();
 8002f26:	f7ff fdaf 	bl	8002a88 <LoadEEstreams>
	LoadEEparams();	
 8002f2a:	f7ff fea1 	bl	8002c70 <LoadEEparams>
	LoadEEbuttons();	
 8002f2e:	f7ff ff81 	bl	8002e34 <LoadEEbuttons>
	LoadROsnippets();
 8002f32:	f7ff fbc7 	bl	80026c4 <LoadROsnippets>
}
 8002f36:	bd10      	pop	{r4, pc}

08002f38 <IsLowerCLIbaud>:

/* --- Check if booting into lower CLI baudrate:
				- Connect P1 TXD and P2 RXD to boot CLI at 115200
*/
uint8_t IsLowerCLIbaud(void)
{
 8002f38:	b530      	push	{r4, r5, lr}
 8002f3a:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8002f3c:	ab04      	add	r3, sp, #16
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	ab07      	add	r3, sp, #28
 8002f42:	2212      	movs	r2, #18
 8002f44:	446a      	add	r2, sp
 8002f46:	a908      	add	r1, sp, #32
 8002f48:	2001      	movs	r0, #1
 8002f4a:	f00a fbd1 	bl	800d6f0 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 8002f4e:	ac03      	add	r4, sp, #12
 8002f50:	9400      	str	r4, [sp, #0]
 8002f52:	ab05      	add	r3, sp, #20
 8002f54:	220e      	movs	r2, #14
 8002f56:	446a      	add	r2, sp
 8002f58:	a906      	add	r1, sp, #24
 8002f5a:	2002      	movs	r0, #2
 8002f5c:	f00a fbc8 	bl	800d6f0 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f60:	2301      	movs	r3, #1
 8002f62:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2500      	movs	r5, #0
 8002f66:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8002f68:	466b      	mov	r3, sp
 8002f6a:	8a5b      	ldrh	r3, [r3, #18]
 8002f6c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 8002f6e:	a909      	add	r1, sp, #36	; 0x24
 8002f70:	9808      	ldr	r0, [sp, #32]
 8002f72:	f00e fd3d 	bl	80119f0 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f76:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8002f78:	2302      	movs	r3, #2
 8002f7a:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8002f7c:	8823      	ldrh	r3, [r4, #0]
 8002f7e:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 8002f80:	a909      	add	r1, sp, #36	; 0x24
 8002f82:	9805      	ldr	r0, [sp, #20]
 8002f84:	f00e fd34 	bl	80119f0 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8002f88:	466b      	mov	r3, sp
 8002f8a:	8a59      	ldrh	r1, [r3, #18]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	9808      	ldr	r0, [sp, #32]
 8002f90:	f00e fe01 	bl	8011b96 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 8002f94:	2005      	movs	r0, #5
 8002f96:	f00a ff3d 	bl	800de14 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8002f9a:	8821      	ldrh	r1, [r4, #0]
 8002f9c:	9805      	ldr	r0, [sp, #20]
 8002f9e:	f00e fdf3 	bl	8011b88 <HAL_GPIO_ReadPin>
 8002fa2:	1e04      	subs	r4, r0, #0
 8002fa4:	d003      	beq.n	8002fae <IsLowerCLIbaud+0x76>
		{
			return 1;
		}
	}

	return 0;
 8002fa6:	2400      	movs	r4, #0
}
 8002fa8:	0020      	movs	r0, r4
 8002faa:	b00f      	add	sp, #60	; 0x3c
 8002fac:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8002fae:	2312      	movs	r3, #18
 8002fb0:	446b      	add	r3, sp
 8002fb2:	8819      	ldrh	r1, [r3, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	9808      	ldr	r0, [sp, #32]
 8002fb8:	f00e fded 	bl	8011b96 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 8002fbc:	2005      	movs	r0, #5
 8002fbe:	f00a ff29 	bl	800de14 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 8002fc2:	ab03      	add	r3, sp, #12
 8002fc4:	8819      	ldrh	r1, [r3, #0]
 8002fc6:	9805      	ldr	r0, [sp, #20]
 8002fc8:	f00e fdde 	bl	8011b88 <HAL_GPIO_ReadPin>
 8002fcc:	2801      	cmp	r0, #1
 8002fce:	d1eb      	bne.n	8002fa8 <IsLowerCLIbaud+0x70>
			return 1;
 8002fd0:	0004      	movs	r4, r0
 8002fd2:	e7e9      	b.n	8002fa8 <IsLowerCLIbaud+0x70>

08002fd4 <EE_FormatForFactoryReset>:
/*-----------------------------------------------------------*/	

/* --- Format emulated EEPROM for a factory reset
*/
void EE_FormatForFactoryReset(void)
{
 8002fd4:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 8002fd6:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <EE_FormatForFactoryReset+0x20>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <EE_FormatForFactoryReset+0x24>)
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d100      	bne.n	8002fe2 <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
		}
	}
	
}
 8002fe0:	bd10      	pop	{r4, pc}
		if (EE_Format() == HAL_OK) 
 8002fe2:	f004 f839 	bl	8007058 <EE_Format>
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d1fa      	bne.n	8002fe0 <EE_FormatForFactoryReset+0xc>
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 8002fea:	4b02      	ldr	r3, [pc, #8]	; (8002ff4 <EE_FormatForFactoryReset+0x20>)
 8002fec:	4a02      	ldr	r2, [pc, #8]	; (8002ff8 <EE_FormatForFactoryReset+0x24>)
 8002fee:	601a      	str	r2, [r3, #0]
}
 8002ff0:	e7f6      	b.n	8002fe0 <EE_FormatForFactoryReset+0xc>
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	20007ff0 	.word	0x20007ff0
 8002ff8:	beefdead 	.word	0xbeefdead

08002ffc <SetupPortForRemoteBootloaderUpdate>:
				- Set baudrate to 57600
				- Enable even parity
				- Set datasize to 9 bits
*/
void SetupPortForRemoteBootloaderUpdate(uint8_t port)
{
 8002ffc:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8002ffe:	f00b f8a9 	bl	800e154 <GetUart>
 8003002:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 8003004:	23e1      	movs	r3, #225	; 0xe1
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	015b      	lsls	r3, r3, #5
 8003014:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8003016:	f010 f9a5 	bl	8013364 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	6813      	ldr	r3, [r2, #0]
 800301e:	2120      	movs	r1, #32
 8003020:	430b      	orrs	r3, r1
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bd10      	pop	{r4, pc}
	...

08003028 <IsModuleParameter>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
*/
uint8_t IsModuleParameter(char* name)
{
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	0005      	movs	r5, r0
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 800302c:	2400      	movs	r4, #0
 800302e:	2c03      	cmp	r4, #3
 8003030:	d810      	bhi.n	8003054 <IsModuleParameter+0x2c>
  {
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 8003032:	0063      	lsls	r3, r4, #1
 8003034:	191b      	adds	r3, r3, r4
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4a07      	ldr	r2, [pc, #28]	; (8003058 <IsModuleParameter+0x30>)
 800303a:	18d3      	adds	r3, r2, r3
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	0028      	movs	r0, r5
 8003040:	f7fd f860 	bl	8000104 <strcmp>
 8003044:	2800      	cmp	r0, #0
 8003046:	d002      	beq.n	800304e <IsModuleParameter+0x26>
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 8003048:	3401      	adds	r4, #1
 800304a:	b2e4      	uxtb	r4, r4
 800304c:	e7ef      	b.n	800302e <IsModuleParameter+0x6>
			return i+1;
 800304e:	3401      	adds	r4, #1
 8003050:	b2e0      	uxtb	r0, r4
 8003052:	e000      	b.n	8003056 <IsModuleParameter+0x2e>
  }
	return 0;
 8003054:	2000      	movs	r0, #0
}
 8003056:	bd70      	pop	{r4, r5, r6, pc}
 8003058:	20000084 	.word	0x20000084

0800305c <IsMathOperator>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
*/
uint8_t IsMathOperator(char* string)
{
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	0004      	movs	r4, r0
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 8003060:	2500      	movs	r5, #0
 8003062:	e001      	b.n	8003068 <IsMathOperator+0xc>
 8003064:	3501      	adds	r5, #1
 8003066:	b2ed      	uxtb	r5, r5
 8003068:	2d05      	cmp	r5, #5
 800306a:	d825      	bhi.n	80030b8 <IsMathOperator+0x5c>
  {
		if (!strcmp(string, "="))
 800306c:	4918      	ldr	r1, [pc, #96]	; (80030d0 <IsMathOperator+0x74>)
 800306e:	0020      	movs	r0, r4
 8003070:	f7fd f848 	bl	8000104 <strcmp>
 8003074:	2800      	cmp	r0, #0
 8003076:	d021      	beq.n	80030bc <IsMathOperator+0x60>
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 8003078:	4916      	ldr	r1, [pc, #88]	; (80030d4 <IsMathOperator+0x78>)
 800307a:	0020      	movs	r0, r4
 800307c:	f7fd f842 	bl	8000104 <strcmp>
 8003080:	2800      	cmp	r0, #0
 8003082:	d01d      	beq.n	80030c0 <IsMathOperator+0x64>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 8003084:	4914      	ldr	r1, [pc, #80]	; (80030d8 <IsMathOperator+0x7c>)
 8003086:	0020      	movs	r0, r4
 8003088:	f7fd f83c 	bl	8000104 <strcmp>
 800308c:	2800      	cmp	r0, #0
 800308e:	d019      	beq.n	80030c4 <IsMathOperator+0x68>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 8003090:	4912      	ldr	r1, [pc, #72]	; (80030dc <IsMathOperator+0x80>)
 8003092:	0020      	movs	r0, r4
 8003094:	f7fd f836 	bl	8000104 <strcmp>
 8003098:	2800      	cmp	r0, #0
 800309a:	d015      	beq.n	80030c8 <IsMathOperator+0x6c>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 800309c:	4910      	ldr	r1, [pc, #64]	; (80030e0 <IsMathOperator+0x84>)
 800309e:	0020      	movs	r0, r4
 80030a0:	f7fd f830 	bl	8000104 <strcmp>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d011      	beq.n	80030cc <IsMathOperator+0x70>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 80030a8:	490e      	ldr	r1, [pc, #56]	; (80030e4 <IsMathOperator+0x88>)
 80030aa:	0020      	movs	r0, r4
 80030ac:	f7fd f82a 	bl	8000104 <strcmp>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d1d7      	bne.n	8003064 <IsMathOperator+0x8>
			return MATH_NOT_EQUAL;
 80030b4:	2006      	movs	r0, #6
 80030b6:	e000      	b.n	80030ba <IsMathOperator+0x5e>
  }
	return 0;
 80030b8:	2000      	movs	r0, #0
}
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 80030bc:	2001      	movs	r0, #1
 80030be:	e7fc      	b.n	80030ba <IsMathOperator+0x5e>
			return MATH_GREATER;
 80030c0:	2002      	movs	r0, #2
 80030c2:	e7fa      	b.n	80030ba <IsMathOperator+0x5e>
			return MATH_SMALLER;
 80030c4:	2003      	movs	r0, #3
 80030c6:	e7f8      	b.n	80030ba <IsMathOperator+0x5e>
			return MATH_GREATER_EQUAL;
 80030c8:	2004      	movs	r0, #4
 80030ca:	e7f6      	b.n	80030ba <IsMathOperator+0x5e>
			return MATH_SMALLER_EQUAL;
 80030cc:	2005      	movs	r0, #5
 80030ce:	e7f4      	b.n	80030ba <IsMathOperator+0x5e>
 80030d0:	080183f8 	.word	0x080183f8
 80030d4:	080183fc 	.word	0x080183fc
 80030d8:	08018400 	.word	0x08018400
 80030dc:	08018404 	.word	0x08018404
 80030e0:	08018408 	.word	0x08018408
 80030e4:	0801840c 	.word	0x0801840c

080030e8 <ExploreNeighbors>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
*/
BOS_Status ExploreNeighbors(uint8_t ignore)
{
 80030e8:	b530      	push	{r4, r5, lr}
 80030ea:	b083      	sub	sp, #12
 80030ec:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK; 

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 80030ee:	2401      	movs	r4, #1
 80030f0:	e001      	b.n	80030f6 <ExploreNeighbors+0xe>
 80030f2:	3401      	adds	r4, #1
 80030f4:	b2e4      	uxtb	r4, r4
 80030f6:	2c05      	cmp	r4, #5
 80030f8:	d814      	bhi.n	8003124 <ExploreNeighbors+0x3c>
	{
		if (port != ignore) 
 80030fa:	42ac      	cmp	r4, r5
 80030fc:	d0f9      	beq.n	80030f2 <ExploreNeighbors+0xa>
		{
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 80030fe:	4b0b      	ldr	r3, [pc, #44]	; (800312c <ExploreNeighbors+0x44>)
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	0a11      	lsrs	r1, r2, #8
 8003104:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <ExploreNeighbors+0x48>)
 8003106:	7019      	strb	r1, [r3, #0]
			messageParams[1] = (uint8_t) myPN;
 8003108:	705a      	strb	r2, [r3, #1]
			messageParams[2] = port;
 800310a:	709c      	strb	r4, [r3, #2]
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 800310c:	2303      	movs	r3, #3
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	3307      	adds	r3, #7
 8003112:	2200      	movs	r2, #0
 8003114:	2100      	movs	r1, #0
 8003116:	0020      	movs	r0, r4
 8003118:	f005 f9b4 	bl	8008484 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 800311c:	200a      	movs	r0, #10
 800311e:	f00b f96d 	bl	800e3fc <osDelay>
 8003122:	e7e6      	b.n	80030f2 <ExploreNeighbors+0xa>
		}
	}
	
	return result;
}
 8003124:	2000      	movs	r0, #0
 8003126:	b003      	add	sp, #12
 8003128:	bd30      	pop	{r4, r5, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	20000050 	.word	0x20000050
 8003130:	20000760 	.word	0x20000760

08003134 <FindBroadcastRoutes>:

/* --- Find array broadcast routes starting from a given module 
				(Takes about 50 usec)
*/
BOS_Status FindBroadcastRoutes(uint8_t src)
{
 8003134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003136:	46de      	mov	lr, fp
 8003138:	4657      	mov	r7, sl
 800313a:	464e      	mov	r6, r9
 800313c:	4645      	mov	r5, r8
 800313e:	b5e0      	push	{r5, r6, r7, lr}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK; 
	uint8_t p = 0, m = 0, level = 0, untaged = 0; 
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8003144:	4b44      	ldr	r3, [pc, #272]	; (8003258 <FindBroadcastRoutes+0x124>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	3307      	adds	r3, #7
 800314a:	08db      	lsrs	r3, r3, #3
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	466a      	mov	r2, sp
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	469d      	mov	sp, r3
 8003154:	466d      	mov	r5, sp
	
	/* 1. Initialize modules list and broadcast routes */
	
	for(m=0 ; m<N ; m++)
 8003156:	2300      	movs	r3, #0
 8003158:	4a3f      	ldr	r2, [pc, #252]	; (8003258 <FindBroadcastRoutes+0x124>)
 800315a:	7812      	ldrb	r2, [r2, #0]
 800315c:	4293      	cmp	r3, r2
 800315e:	d207      	bcs.n	8003170 <FindBroadcastRoutes+0x3c>
	{	
		modules[m] = 0;
 8003160:	2200      	movs	r2, #0
 8003162:	54ea      	strb	r2, [r5, r3]
		bcastRoutes[m] = 0;
 8003164:	005c      	lsls	r4, r3, #1
 8003166:	493d      	ldr	r1, [pc, #244]	; (800325c <FindBroadcastRoutes+0x128>)
 8003168:	5262      	strh	r2, [r4, r1]
	for(m=0 ; m<N ; m++)
 800316a:	3301      	adds	r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e7f3      	b.n	8003158 <FindBroadcastRoutes+0x24>
	}
	modules[src-1] = ++level;					// Tag the source
 8003170:	3801      	subs	r0, #1
 8003172:	2301      	movs	r3, #1
 8003174:	542b      	strb	r3, [r5, r0]
	
	/* 2. Source module should send to all neighbors */
	
	++level;													// Move one level
	
	for(p=1 ; p<=NumOfPorts ; p++)
 8003176:	2201      	movs	r2, #1
 8003178:	e001      	b.n	800317e <FindBroadcastRoutes+0x4a>
 800317a:	3201      	adds	r2, #1
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	2a05      	cmp	r2, #5
 8003180:	d819      	bhi.n	80031b6 <FindBroadcastRoutes+0x82>
	{
		if (array[src-1][p]) 
 8003182:	0083      	lsls	r3, r0, #2
 8003184:	181b      	adds	r3, r3, r0
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	181b      	adds	r3, r3, r0
 800318a:	189b      	adds	r3, r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4934      	ldr	r1, [pc, #208]	; (8003260 <FindBroadcastRoutes+0x12c>)
 8003190:	5a5b      	ldrh	r3, [r3, r1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f1      	beq.n	800317a <FindBroadcastRoutes+0x46>
		{
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003196:	1e54      	subs	r4, r2, #1
 8003198:	2101      	movs	r1, #1
 800319a:	40a1      	lsls	r1, r4
 800319c:	000c      	movs	r4, r1
 800319e:	4e2f      	ldr	r6, [pc, #188]	; (800325c <FindBroadcastRoutes+0x128>)
 80031a0:	0041      	lsls	r1, r0, #1
 80031a2:	468c      	mov	ip, r1
 80031a4:	5b89      	ldrh	r1, [r1, r6]
 80031a6:	4321      	orrs	r1, r4
 80031a8:	4664      	mov	r4, ip
 80031aa:	53a1      	strh	r1, [r4, r6]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 80031ac:	08db      	lsrs	r3, r3, #3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	2102      	movs	r1, #2
 80031b2:	54e9      	strb	r1, [r5, r3]
 80031b4:	e7e1      	b.n	800317a <FindBroadcastRoutes+0x46>
	++level;													// Move one level
 80031b6:	2302      	movs	r3, #2
 80031b8:	469b      	mov	fp, r3
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */
	
	do
	{	
		untaged = 0;																			// Reset the untaged counter
		++level;																					// Move one level
 80031ba:	465e      	mov	r6, fp
 80031bc:	3601      	adds	r6, #1
 80031be:	b2f3      	uxtb	r3, r6
 80031c0:	469b      	mov	fp, r3
		untaged = 0;																			// Reset the untaged counter
 80031c2:	2300      	movs	r3, #0
 80031c4:	469c      	mov	ip, r3
		
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 80031c6:	2200      	movs	r2, #0
 80031c8:	e02e      	b.n	8003228 <FindBroadcastRoutes+0xf4>
		{
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
			{			
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 80031ca:	3001      	adds	r0, #1
 80031cc:	b2c0      	uxtb	r0, r0
 80031ce:	2805      	cmp	r0, #5
 80031d0:	d828      	bhi.n	8003224 <FindBroadcastRoutes+0xf0>
				{
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 80031d2:	00a3      	lsls	r3, r4, #2
 80031d4:	191b      	adds	r3, r3, r4
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	191b      	adds	r3, r3, r4
 80031da:	181b      	adds	r3, r3, r0
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4920      	ldr	r1, [pc, #128]	; (8003260 <FindBroadcastRoutes+0x12c>)
 80031e0:	5a5b      	ldrh	r3, [r3, r1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f1      	beq.n	80031ca <FindBroadcastRoutes+0x96>
 80031e6:	08db      	lsrs	r3, r3, #3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	5ce9      	ldrb	r1, [r5, r3]
 80031ee:	2900      	cmp	r1, #0
 80031f0:	d1eb      	bne.n	80031ca <FindBroadcastRoutes+0x96>
					{
						bcastRoutes[m] |= (0x01 << (p-1));
 80031f2:	0001      	movs	r1, r0
 80031f4:	3901      	subs	r1, #1
 80031f6:	2601      	movs	r6, #1
 80031f8:	408e      	lsls	r6, r1
 80031fa:	46b0      	mov	r8, r6
 80031fc:	4917      	ldr	r1, [pc, #92]	; (800325c <FindBroadcastRoutes+0x128>)
 80031fe:	4689      	mov	r9, r1
 8003200:	0061      	lsls	r1, r4, #1
 8003202:	468a      	mov	sl, r1
 8003204:	4649      	mov	r1, r9
 8003206:	4656      	mov	r6, sl
 8003208:	5a71      	ldrh	r1, [r6, r1]
 800320a:	4646      	mov	r6, r8
 800320c:	4331      	orrs	r1, r6
 800320e:	464e      	mov	r6, r9
 8003210:	4653      	mov	r3, sl
 8003212:	5399      	strh	r1, [r3, r6]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4659      	mov	r1, fp
 8003218:	54e9      	strb	r1, [r5, r3]
						++untaged;
 800321a:	4663      	mov	r3, ip
 800321c:	3301      	adds	r3, #1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	469c      	mov	ip, r3
 8003222:	e7d2      	b.n	80031ca <FindBroadcastRoutes+0x96>
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003224:	3201      	adds	r2, #1
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <FindBroadcastRoutes+0x124>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d207      	bcs.n	8003240 <FindBroadcastRoutes+0x10c>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003230:	0014      	movs	r4, r2
 8003232:	5ca9      	ldrb	r1, [r5, r2]
 8003234:	465b      	mov	r3, fp
 8003236:	3b01      	subs	r3, #1
 8003238:	4299      	cmp	r1, r3
 800323a:	d1f3      	bne.n	8003224 <FindBroadcastRoutes+0xf0>
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 800323c:	2001      	movs	r0, #1
 800323e:	e7c6      	b.n	80031ce <FindBroadcastRoutes+0x9a>
					}
				}			
			}
		}
	} 
	while (untaged);
 8003240:	4663      	mov	r3, ip
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1b9      	bne.n	80031ba <FindBroadcastRoutes+0x86>

	
	return result;
}
 8003246:	2000      	movs	r0, #0
 8003248:	46bd      	mov	sp, r7
 800324a:	b003      	add	sp, #12
 800324c:	bcf0      	pop	{r4, r5, r6, r7}
 800324e:	46bb      	mov	fp, r7
 8003250:	46b2      	mov	sl, r6
 8003252:	46a9      	mov	r9, r5
 8003254:	46a0      	mov	r8, r4
 8003256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003258:	2000001c 	.word	0x2000001c
 800325c:	20000518 	.word	0x20000518
 8003260:	200002d8 	.word	0x200002d8

08003264 <FindRoute>:
6- Otherwise, select the unvisited node that is marked with the smallest tentative distance, 
set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID)
{
 8003264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003266:	b08f      	sub	sp, #60	; 0x3c
 8003268:	0005      	movs	r5, r0
 800326a:	000e      	movs	r6, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 800326c:	2400      	movs	r4, #0
 800326e:	9401      	str	r4, [sp, #4]
 8003270:	222e      	movs	r2, #46	; 0x2e
 8003272:	2100      	movs	r1, #0
 8003274:	a802      	add	r0, sp, #8
 8003276:	f010 fa3a 	bl	80136ee <memset>
#endif
	
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
	
	memset(route,0,sizeof(route));
 800327a:	221a      	movs	r2, #26
 800327c:	2100      	movs	r1, #0
 800327e:	4848      	ldr	r0, [pc, #288]	; (80033a0 <FindRoute+0x13c>)
 8003280:	f010 fa35 	bl	80136ee <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 8003284:	0029      	movs	r1, r5
 8003286:	3d01      	subs	r5, #1
 8003288:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <FindRoute+0x140>)
 800328a:	555c      	strb	r4, [r3, r5]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 800328c:	4b46      	ldr	r3, [pc, #280]	; (80033a8 <FindRoute+0x144>)
 800328e:	555c      	strb	r4, [r3, r5]
		
	/* Check adjacent neighbors first! */
	for(int col=1 ; col<=6 ; col++)
 8003290:	2001      	movs	r0, #1
 8003292:	e000      	b.n	8003296 <FindRoute+0x32>
 8003294:	3001      	adds	r0, #1
 8003296:	2806      	cmp	r0, #6
 8003298:	dc16      	bgt.n	80032c8 <FindRoute+0x64>
	{
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 800329a:	00ab      	lsls	r3, r5, #2
 800329c:	195b      	adds	r3, r3, r5
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	195b      	adds	r3, r3, r5
 80032a2:	181b      	adds	r3, r3, r0
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4a41      	ldr	r2, [pc, #260]	; (80033ac <FindRoute+0x148>)
 80032a8:	5a9b      	ldrh	r3, [r3, r2]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f2      	beq.n	8003294 <FindRoute+0x30>
 80032ae:	08db      	lsrs	r3, r3, #3
 80032b0:	b2b2      	uxth	r2, r6
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d1ee      	bne.n	8003294 <FindRoute+0x30>
			routeDist[desID-1] = 1;
 80032b6:	1e73      	subs	r3, r6, #1
 80032b8:	4a3a      	ldr	r2, [pc, #232]	; (80033a4 <FindRoute+0x140>)
 80032ba:	2101      	movs	r1, #1
 80032bc:	54d1      	strb	r1, [r2, r3]
			route[0] = desID;
 80032be:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <FindRoute+0x13c>)
 80032c0:	701e      	strb	r6, [r3, #0]
			return col;	
 80032c2:	b2c0      	uxtb	r0, r0
			return col;	
		}
	}	

	return 0;			
}
 80032c4:	b00f      	add	sp, #60	; 0x3c
 80032c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i=1 ; i<=N ; i++)   					
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <FindRoute+0x6a>
 80032cc:	3301      	adds	r3, #1
 80032ce:	4a38      	ldr	r2, [pc, #224]	; (80033b0 <FindRoute+0x14c>)
 80032d0:	7812      	ldrb	r2, [r2, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	db09      	blt.n	80032ea <FindRoute+0x86>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 80032d6:	4299      	cmp	r1, r3
 80032d8:	d0f8      	beq.n	80032cc <FindRoute+0x68>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 80032da:	1e5a      	subs	r2, r3, #1
 80032dc:	4831      	ldr	r0, [pc, #196]	; (80033a4 <FindRoute+0x140>)
 80032de:	24ff      	movs	r4, #255	; 0xff
 80032e0:	5484      	strb	r4, [r0, r2]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 80032e2:	4831      	ldr	r0, [pc, #196]	; (80033a8 <FindRoute+0x144>)
 80032e4:	2400      	movs	r4, #0
 80032e6:	5484      	strb	r4, [r0, r2]
 80032e8:	e7f0      	b.n	80032cc <FindRoute+0x68>
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 80032ea:	2400      	movs	r4, #0
	while (!QnotEmpty(Q))
 80032ec:	a801      	add	r0, sp, #4
 80032ee:	f7ff f9db 	bl	80026a8 <QnotEmpty>
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d10c      	bne.n	8003310 <FindRoute+0xac>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 80032f6:	a901      	add	r1, sp, #4
 80032f8:	482a      	ldr	r0, [pc, #168]	; (80033a4 <FindRoute+0x140>)
 80032fa:	f7ff f9b9 	bl	8002670 <minArr>
 80032fe:	3001      	adds	r0, #1
 8003300:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 8003302:	42b4      	cmp	r4, r6
 8003304:	d004      	beq.n	8003310 <FindRoute+0xac>
			Q[u-1] = 1;													// Remove u from Q 
 8003306:	1e61      	subs	r1, r4, #1
 8003308:	ab01      	add	r3, sp, #4
 800330a:	2201      	movs	r2, #1
 800330c:	545a      	strb	r2, [r3, r1]
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 800330e:	e003      	b.n	8003318 <FindRoute+0xb4>
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8003310:	2200      	movs	r2, #0
 8003312:	e025      	b.n	8003360 <FindRoute+0xfc>
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8003314:	3201      	adds	r2, #1
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	2a06      	cmp	r2, #6
 800331a:	d8e7      	bhi.n	80032ec <FindRoute+0x88>
			if (array[u-1][n])										// There's a neighbor v at this port n
 800331c:	008b      	lsls	r3, r1, #2
 800331e:	185b      	adds	r3, r3, r1
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	185b      	adds	r3, r3, r1
 8003324:	189b      	adds	r3, r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4820      	ldr	r0, [pc, #128]	; (80033ac <FindRoute+0x148>)
 800332a:	5a1b      	ldrh	r3, [r3, r0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f1      	beq.n	8003314 <FindRoute+0xb0>
				v = (array[u-1][n]>>3);
 8003330:	08db      	lsrs	r3, r3, #3
 8003332:	b2db      	uxtb	r3, r3
				if (!Q[v-1])												// v is still in Q
 8003334:	3b01      	subs	r3, #1
 8003336:	a801      	add	r0, sp, #4
 8003338:	5cc0      	ldrb	r0, [r0, r3]
 800333a:	2800      	cmp	r0, #0
 800333c:	d1ea      	bne.n	8003314 <FindRoute+0xb0>
					alt = routeDist[u-1] + 1;					// Add one hop
 800333e:	4f19      	ldr	r7, [pc, #100]	; (80033a4 <FindRoute+0x140>)
 8003340:	5c78      	ldrb	r0, [r7, r1]
 8003342:	3001      	adds	r0, #1
 8003344:	b2c0      	uxtb	r0, r0
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 8003346:	5cff      	ldrb	r7, [r7, r3]
 8003348:	4287      	cmp	r7, r0
 800334a:	d9e3      	bls.n	8003314 <FindRoute+0xb0>
						routeDist[v-1] = alt; 
 800334c:	4f15      	ldr	r7, [pc, #84]	; (80033a4 <FindRoute+0x140>)
 800334e:	54f8      	strb	r0, [r7, r3]
						routePrev[v-1] = u; 
 8003350:	4815      	ldr	r0, [pc, #84]	; (80033a8 <FindRoute+0x144>)
 8003352:	54c4      	strb	r4, [r0, r3]
 8003354:	e7de      	b.n	8003314 <FindRoute+0xb0>
		route[j++] = u;          				// Push the vertex onto the stack
 8003356:	1c53      	adds	r3, r2, #1
 8003358:	4911      	ldr	r1, [pc, #68]	; (80033a0 <FindRoute+0x13c>)
 800335a:	548c      	strb	r4, [r1, r2]
 800335c:	b2da      	uxtb	r2, r3
		u = routePrev[u-1];           	// Traverse from target to source
 800335e:	0004      	movs	r4, r0
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003360:	1e63      	subs	r3, r4, #1
 8003362:	4911      	ldr	r1, [pc, #68]	; (80033a8 <FindRoute+0x144>)
 8003364:	5cc8      	ldrb	r0, [r1, r3]
 8003366:	2800      	cmp	r0, #0
 8003368:	d1f5      	bne.n	8003356 <FindRoute+0xf2>
	for(int col=1 ; col<=6 ; col++)	
 800336a:	2201      	movs	r2, #1
 800336c:	e000      	b.n	8003370 <FindRoute+0x10c>
 800336e:	3201      	adds	r2, #1
 8003370:	2a06      	cmp	r2, #6
 8003372:	dca7      	bgt.n	80032c4 <FindRoute+0x60>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8003374:	00ab      	lsls	r3, r5, #2
 8003376:	195b      	adds	r3, r3, r5
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	195b      	adds	r3, r3, r5
 800337c:	189b      	adds	r3, r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	490a      	ldr	r1, [pc, #40]	; (80033ac <FindRoute+0x148>)
 8003382:	5a5b      	ldrh	r3, [r3, r1]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f2      	beq.n	800336e <FindRoute+0x10a>
 8003388:	08db      	lsrs	r3, r3, #3
 800338a:	1e71      	subs	r1, r6, #1
 800338c:	4c05      	ldr	r4, [pc, #20]	; (80033a4 <FindRoute+0x140>)
 800338e:	5c61      	ldrb	r1, [r4, r1]
 8003390:	3901      	subs	r1, #1
 8003392:	4c03      	ldr	r4, [pc, #12]	; (80033a0 <FindRoute+0x13c>)
 8003394:	5c61      	ldrb	r1, [r4, r1]
 8003396:	428b      	cmp	r3, r1
 8003398:	d1e9      	bne.n	800336e <FindRoute+0x10a>
			return col;	
 800339a:	b2d0      	uxtb	r0, r2
 800339c:	e792      	b.n	80032c4 <FindRoute+0x60>
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	200061f0 	.word	0x200061f0
 80033a4:	20000934 	.word	0x20000934
 80033a8:	20000950 	.word	0x20000950
 80033ac:	200002d8 	.word	0x200002d8
 80033b0:	2000001c 	.word	0x2000001c

080033b4 <remoteBootloaderUpdate>:
{
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	46ce      	mov	lr, r9
 80033b8:	4647      	mov	r7, r8
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b085      	sub	sp, #20
 80033be:	4680      	mov	r8, r0
 80033c0:	000f      	movs	r7, r1
 80033c2:	0016      	movs	r6, r2
 80033c4:	001d      	movs	r5, r3
	myOutport = FindRoute(myID, dst);
 80033c6:	4b35      	ldr	r3, [pc, #212]	; (800349c <remoteBootloaderUpdate+0xe8>)
 80033c8:	7818      	ldrb	r0, [r3, #0]
 80033ca:	f7ff ff4b 	bl	8003264 <FindRoute>
 80033ce:	0004      	movs	r4, r0
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	d004      	beq.n	80033de <remoteBootloaderUpdate+0x2a>
 80033d4:	4b31      	ldr	r3, [pc, #196]	; (800349c <remoteBootloaderUpdate+0xe8>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	4699      	mov	r9, r3
 80033da:	42bb      	cmp	r3, r7
 80033dc:	d00f      	beq.n	80033fe <remoteBootloaderUpdate+0x4a>
	} else if (outport == 0) {													/* This is a remote update */		
 80033de:	2d00      	cmp	r5, #0
 80033e0:	d10f      	bne.n	8003402 <remoteBootloaderUpdate+0x4e>
		if (NumberOfHops(dst) == 1)
 80033e2:	1e7b      	subs	r3, r7, #1
 80033e4:	4a2e      	ldr	r2, [pc, #184]	; (80034a0 <remoteBootloaderUpdate+0xec>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d004      	beq.n	80033f6 <remoteBootloaderUpdate+0x42>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 80033ec:	3b01      	subs	r3, #1
 80033ee:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <remoteBootloaderUpdate+0xf0>)
 80033f0:	5cd3      	ldrb	r3, [r2, r3]
 80033f2:	4699      	mov	r9, r3
 80033f4:	e007      	b.n	8003406 <remoteBootloaderUpdate+0x52>
			lastModule = myID;
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <remoteBootloaderUpdate+0xe8>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	4699      	mov	r9, r3
 80033fc:	e003      	b.n	8003406 <remoteBootloaderUpdate+0x52>
		myOutport = outport;
 80033fe:	002c      	movs	r4, r5
 8003400:	e001      	b.n	8003406 <remoteBootloaderUpdate+0x52>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8003402:	2300      	movs	r3, #0
 8003404:	4699      	mov	r9, r3
	if (src == myID)
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <remoteBootloaderUpdate+0xe8>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	4543      	cmp	r3, r8
 800340c:	d01c      	beq.n	8003448 <remoteBootloaderUpdate+0x94>
	SetupPortForRemoteBootloaderUpdate(inport);
 800340e:	0030      	movs	r0, r6
 8003410:	f7ff fdf4 	bl	8002ffc <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003414:	0020      	movs	r0, r4
 8003416:	f7ff fdf1 	bl	8002ffc <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <remoteBootloaderUpdate+0xe8>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	454b      	cmp	r3, r9
 8003420:	d035      	beq.n	800348e <remoteBootloaderUpdate+0xda>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 8003422:	4b1e      	ldr	r3, [pc, #120]	; (800349c <remoteBootloaderUpdate+0xe8>)
 8003424:	7819      	ldrb	r1, [r3, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	9303      	str	r3, [sp, #12]
 800342a:	3b01      	subs	r3, #1
 800342c:	9302      	str	r3, [sp, #8]
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	3303      	adds	r3, #3
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	000b      	movs	r3, r1
 8003436:	0022      	movs	r2, r4
 8003438:	0030      	movs	r0, r6
 800343a:	f005 fa55 	bl	80088e8 <StartScastDMAStream>
}
 800343e:	b005      	add	sp, #20
 8003440:	bcc0      	pop	{r6, r7}
 8003442:	46b9      	mov	r9, r7
 8003444:	46b0      	mov	r8, r6
 8003446:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003448:	f00b f8f8 	bl	800e63c <FreeRTOS_CLIGetOutputBuffer>
 800344c:	4680      	mov	r8, r0
		if (outport == 0)		// This is a remote module update
 800344e:	2d00      	cmp	r5, #0
 8003450:	d116      	bne.n	8003480 <remoteBootloaderUpdate+0xcc>
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <remoteBootloaderUpdate+0xf4>)
 8003454:	6819      	ldr	r1, [r3, #0]
 8003456:	003a      	movs	r2, r7
 8003458:	f011 f8da 	bl	8014610 <siprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <remoteBootloaderUpdate+0xf8>)
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	4640      	mov	r0, r8
 8003462:	f011 f8f5 	bl	8014650 <strcat>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 8003466:	4640      	mov	r0, r8
 8003468:	f7fc fe56 	bl	8000118 <strlen>
 800346c:	b282      	uxth	r2, r0
 800346e:	2332      	movs	r3, #50	; 0x32
 8003470:	4641      	mov	r1, r8
 8003472:	0030      	movs	r0, r6
 8003474:	f00a febc 	bl	800e1f0 <writePxITMutex>
		Delay_ms(100);
 8003478:	2064      	movs	r0, #100	; 0x64
 800347a:	f00d f84d 	bl	8010518 <HAL_Delay>
 800347e:	e7c6      	b.n	800340e <remoteBootloaderUpdate+0x5a>
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <remoteBootloaderUpdate+0xfc>)
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	002b      	movs	r3, r5
 8003486:	003a      	movs	r2, r7
 8003488:	f011 f8c2 	bl	8014610 <siprintf>
 800348c:	e7e6      	b.n	800345c <remoteBootloaderUpdate+0xa8>
		SwapUartPins(GetUart(myOutport), REVERSED);
 800348e:	0020      	movs	r0, r4
 8003490:	f00a fe60 	bl	800e154 <GetUart>
 8003494:	2101      	movs	r1, #1
 8003496:	f00a fef7 	bl	800e288 <SwapUartPins>
 800349a:	e7c2      	b.n	8003422 <remoteBootloaderUpdate+0x6e>
 800349c:	2000089e 	.word	0x2000089e
 80034a0:	20000934 	.word	0x20000934
 80034a4:	200061f0 	.word	0x200061f0
 80034a8:	20000078 	.word	0x20000078
 80034ac:	20000080 	.word	0x20000080
 80034b0:	2000007c 	.word	0x2000007c

080034b4 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
*/
void DisplayTopology(uint8_t port)
{
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	46c6      	mov	lr, r8
 80034b8:	b500      	push	{lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	0006      	movs	r6, r0
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 80034be:	4c57      	ldr	r4, [pc, #348]	; (800361c <DisplayTopology+0x168>)
 80034c0:	4b57      	ldr	r3, [pc, #348]	; (8003620 <DisplayTopology+0x16c>)
 80034c2:	0022      	movs	r2, r4
 80034c4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80034c6:	c223      	stmia	r2!, {r0, r1, r5}
 80034c8:	6819      	ldr	r1, [r3, #0]
 80034ca:	6011      	str	r1, [r2, #0]
 80034cc:	889b      	ldrh	r3, [r3, #4]
 80034ce:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80034d0:	0020      	movs	r0, r4
 80034d2:	f7fc fe21 	bl	8000118 <strlen>
 80034d6:	b282      	uxth	r2, r0
 80034d8:	2301      	movs	r3, #1
 80034da:	425b      	negs	r3, r3
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	3333      	adds	r3, #51	; 0x33
 80034e0:	0021      	movs	r1, r4
 80034e2:	0030      	movs	r0, r6
 80034e4:	f00a fe54 	bl	800e190 <writePxMutex>
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 80034e8:	2401      	movs	r4, #1
 80034ea:	e013      	b.n	8003514 <DisplayTopology+0x60>
	{
		sprintf(pcUserMessage, "P%d\t", i);
 80034ec:	4d4b      	ldr	r5, [pc, #300]	; (800361c <DisplayTopology+0x168>)
 80034ee:	0022      	movs	r2, r4
 80034f0:	494c      	ldr	r1, [pc, #304]	; (8003624 <DisplayTopology+0x170>)
 80034f2:	0028      	movs	r0, r5
 80034f4:	f011 f88c 	bl	8014610 <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80034f8:	0028      	movs	r0, r5
 80034fa:	f7fc fe0d 	bl	8000118 <strlen>
 80034fe:	b282      	uxth	r2, r0
 8003500:	2301      	movs	r3, #1
 8003502:	425b      	negs	r3, r3
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	3333      	adds	r3, #51	; 0x33
 8003508:	0029      	movs	r1, r5
 800350a:	0030      	movs	r0, r6
 800350c:	f00a fe40 	bl	800e190 <writePxMutex>
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 8003510:	3401      	adds	r4, #1
 8003512:	b2e4      	uxtb	r4, r4
 8003514:	2c05      	cmp	r4, #5
 8003516:	d9e9      	bls.n	80034ec <DisplayTopology+0x38>
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 8003518:	2301      	movs	r3, #1
 800351a:	425b      	negs	r3, r3
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	3333      	adds	r3, #51	; 0x33
 8003520:	2203      	movs	r2, #3
 8003522:	4941      	ldr	r1, [pc, #260]	; (8003628 <DisplayTopology+0x174>)
 8003524:	0030      	movs	r0, r6
 8003526:	f00a fe33 	bl	800e190 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row=0 ; row<N ; row++)
 800352a:	2700      	movs	r7, #0
 800352c:	e032      	b.n	8003594 <DisplayTopology+0xe0>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
		{
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t",0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 800352e:	2307      	movs	r3, #7
 8003530:	4013      	ands	r3, r2
 8003532:	08d2      	lsrs	r2, r2, #3
 8003534:	493d      	ldr	r1, [pc, #244]	; (800362c <DisplayTopology+0x178>)
 8003536:	4839      	ldr	r0, [pc, #228]	; (800361c <DisplayTopology+0x168>)
 8003538:	f011 f86a 	bl	8014610 <siprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 800353c:	4b37      	ldr	r3, [pc, #220]	; (800361c <DisplayTopology+0x168>)
 800353e:	4698      	mov	r8, r3
 8003540:	0018      	movs	r0, r3
 8003542:	f7fc fde9 	bl	8000118 <strlen>
 8003546:	b282      	uxth	r2, r0
 8003548:	2301      	movs	r3, #1
 800354a:	425b      	negs	r3, r3
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	3333      	adds	r3, #51	; 0x33
 8003550:	4641      	mov	r1, r8
 8003552:	0030      	movs	r0, r6
 8003554:	f00a fe1c 	bl	800e190 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8003558:	3401      	adds	r4, #1
 800355a:	b2e4      	uxtb	r4, r4
 800355c:	2c05      	cmp	r4, #5
 800355e:	d80e      	bhi.n	800357e <DisplayTopology+0xca>
			if (!array[row][col])
 8003560:	00ab      	lsls	r3, r5, #2
 8003562:	195b      	adds	r3, r3, r5
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	195b      	adds	r3, r3, r5
 8003568:	191b      	adds	r3, r3, r4
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4a30      	ldr	r2, [pc, #192]	; (8003630 <DisplayTopology+0x17c>)
 800356e:	5a9a      	ldrh	r2, [r3, r2]
 8003570:	2a00      	cmp	r2, #0
 8003572:	d1dc      	bne.n	800352e <DisplayTopology+0x7a>
				sprintf(pcUserMessage, "%d\t",0);
 8003574:	492f      	ldr	r1, [pc, #188]	; (8003634 <DisplayTopology+0x180>)
 8003576:	4829      	ldr	r0, [pc, #164]	; (800361c <DisplayTopology+0x168>)
 8003578:	f011 f84a 	bl	8014610 <siprintf>
 800357c:	e7de      	b.n	800353c <DisplayTopology+0x88>
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 800357e:	2301      	movs	r3, #1
 8003580:	425b      	negs	r3, r3
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	3333      	adds	r3, #51	; 0x33
 8003586:	2202      	movs	r2, #2
 8003588:	492b      	ldr	r1, [pc, #172]	; (8003638 <DisplayTopology+0x184>)
 800358a:	0030      	movs	r0, r6
 800358c:	f00a fe00 	bl	800e190 <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8003590:	3701      	adds	r7, #1
 8003592:	b2ff      	uxtb	r7, r7
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <DisplayTopology+0x188>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	42bb      	cmp	r3, r7
 800359a:	d932      	bls.n	8003602 <DisplayTopology+0x14e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 800359c:	003d      	movs	r5, r7
 800359e:	1c7a      	adds	r2, r7, #1
 80035a0:	4c1e      	ldr	r4, [pc, #120]	; (800361c <DisplayTopology+0x168>)
 80035a2:	4927      	ldr	r1, [pc, #156]	; (8003640 <DisplayTopology+0x18c>)
 80035a4:	0020      	movs	r0, r4
 80035a6:	f011 f833 	bl	8014610 <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80035aa:	0020      	movs	r0, r4
 80035ac:	f7fc fdb4 	bl	8000118 <strlen>
 80035b0:	b282      	uxth	r2, r0
 80035b2:	2301      	movs	r3, #1
 80035b4:	425b      	negs	r3, r3
 80035b6:	4698      	mov	r8, r3
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	3333      	adds	r3, #51	; 0x33
 80035bc:	0021      	movs	r1, r4
 80035be:	0030      	movs	r0, r6
 80035c0:	f00a fde6 	bl	800e190 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 80035c4:	2316      	movs	r3, #22
 80035c6:	437b      	muls	r3, r7
 80035c8:	4a19      	ldr	r2, [pc, #100]	; (8003630 <DisplayTopology+0x17c>)
 80035ca:	5a9b      	ldrh	r3, [r3, r2]
 80035cc:	0059      	lsls	r1, r3, #1
 80035ce:	18c9      	adds	r1, r1, r3
 80035d0:	0049      	lsls	r1, r1, #1
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <DisplayTopology+0x190>)
 80035d4:	18c9      	adds	r1, r1, r3
 80035d6:	2205      	movs	r2, #5
 80035d8:	0020      	movs	r0, r4
 80035da:	f011 f86d 	bl	80146b8 <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 80035de:	4643      	mov	r3, r8
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	3333      	adds	r3, #51	; 0x33
 80035e4:	2205      	movs	r2, #5
 80035e6:	0021      	movs	r1, r4
 80035e8:	0030      	movs	r0, r6
 80035ea:	f00a fdd1 	bl	800e190 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 80035ee:	4643      	mov	r3, r8
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	3333      	adds	r3, #51	; 0x33
 80035f4:	2201      	movs	r2, #1
 80035f6:	4914      	ldr	r1, [pc, #80]	; (8003648 <DisplayTopology+0x194>)
 80035f8:	0030      	movs	r0, r6
 80035fa:	f00a fdc9 	bl	800e190 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 80035fe:	2401      	movs	r4, #1
 8003600:	e7ac      	b.n	800355c <DisplayTopology+0xa8>
	}
	
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8003602:	2301      	movs	r3, #1
 8003604:	425b      	negs	r3, r3
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	3333      	adds	r3, #51	; 0x33
 800360a:	2201      	movs	r2, #1
 800360c:	490f      	ldr	r1, [pc, #60]	; (800364c <DisplayTopology+0x198>)
 800360e:	0030      	movs	r0, r6
 8003610:	f00a fdbe 	bl	800e190 <writePxMutex>
}
 8003614:	b002      	add	sp, #8
 8003616:	bc80      	pop	{r7}
 8003618:	46b8      	mov	r8, r7
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361c:	200008c8 	.word	0x200008c8
 8003620:	08018410 	.word	0x08018410
 8003624:	08018424 	.word	0x08018424
 8003628:	08018e20 	.word	0x08018e20
 800362c:	0801843c 	.word	0x0801843c
 8003630:	200002d8 	.word	0x200002d8
 8003634:	08018438 	.word	0x08018438
 8003638:	08018548 	.word	0x08018548
 800363c:	2000001c 	.word	0x2000001c
 8003640:	0801842c 	.word	0x0801842c
 8003644:	080188c0 	.word	0x080188c0
 8003648:	08018420 	.word	0x08018420
 800364c:	0801a1b0 	.word	0x0801a1b0

08003650 <DisplayPortsDir>:
/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
*/
void DisplayPortsDir(uint8_t port)
{
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	b083      	sub	sp, #12
 8003654:	0006      	movs	r6, r0
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 8003656:	4c2c      	ldr	r4, [pc, #176]	; (8003708 <DisplayPortsDir+0xb8>)
 8003658:	4b2c      	ldr	r3, [pc, #176]	; (800370c <DisplayPortsDir+0xbc>)
 800365a:	0022      	movs	r2, r4
 800365c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800365e:	c223      	stmia	r2!, {r0, r1, r5}
 8003660:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003662:	c223      	stmia	r2!, {r0, r1, r5}
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003668:	0020      	movs	r0, r4
 800366a:	f7fc fd55 	bl	8000118 <strlen>
 800366e:	b282      	uxth	r2, r0
 8003670:	2301      	movs	r3, #1
 8003672:	425b      	negs	r3, r3
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	3333      	adds	r3, #51	; 0x33
 8003678:	0021      	movs	r1, r4
 800367a:	0030      	movs	r0, r6
 800367c:	f00a fd88 	bl	800e190 <writePxMutex>
	
	for (uint8_t i=1 ; i<=N ; i++) 
 8003680:	2501      	movs	r5, #1
 8003682:	e023      	b.n	80036cc <DisplayPortsDir+0x7c>
	{
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
		{		
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8003684:	4f20      	ldr	r7, [pc, #128]	; (8003708 <DisplayPortsDir+0xb8>)
 8003686:	0023      	movs	r3, r4
 8003688:	002a      	movs	r2, r5
 800368a:	4921      	ldr	r1, [pc, #132]	; (8003710 <DisplayPortsDir+0xc0>)
 800368c:	0038      	movs	r0, r7
 800368e:	f010 ffbf 	bl	8014610 <siprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003692:	0038      	movs	r0, r7
 8003694:	f7fc fd40 	bl	8000118 <strlen>
 8003698:	b282      	uxth	r2, r0
 800369a:	2301      	movs	r3, #1
 800369c:	425b      	negs	r3, r3
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	3333      	adds	r3, #51	; 0x33
 80036a2:	0039      	movs	r1, r7
 80036a4:	0030      	movs	r0, r6
 80036a6:	f00a fd73 	bl	800e190 <writePxMutex>
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 80036aa:	3401      	adds	r4, #1
 80036ac:	b2e4      	uxtb	r4, r4
 80036ae:	2c0a      	cmp	r4, #10
 80036b0:	d80a      	bhi.n	80036c8 <DisplayPortsDir+0x78>
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80036b2:	1e6b      	subs	r3, r5, #1
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4a17      	ldr	r2, [pc, #92]	; (8003714 <DisplayPortsDir+0xc4>)
 80036b8:	5a9a      	ldrh	r2, [r3, r2]
 80036ba:	1e61      	subs	r1, r4, #1
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	410b      	asrs	r3, r1
 80036c2:	4213      	tst	r3, r2
 80036c4:	d0f1      	beq.n	80036aa <DisplayPortsDir+0x5a>
 80036c6:	e7dd      	b.n	8003684 <DisplayPortsDir+0x34>
	for (uint8_t i=1 ; i<=N ; i++) 
 80036c8:	3501      	adds	r5, #1
 80036ca:	b2ed      	uxtb	r5, r5
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <DisplayPortsDir+0xc8>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	42ab      	cmp	r3, r5
 80036d2:	d301      	bcc.n	80036d8 <DisplayPortsDir+0x88>
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 80036d4:	2401      	movs	r4, #1
 80036d6:	e7ea      	b.n	80036ae <DisplayPortsDir+0x5e>
			}	
		}
	}
	
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 80036d8:	4c0b      	ldr	r4, [pc, #44]	; (8003708 <DisplayPortsDir+0xb8>)
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <DisplayPortsDir+0xcc>)
 80036dc:	0022      	movs	r2, r4
 80036de:	cb23      	ldmia	r3!, {r0, r1, r5}
 80036e0:	c223      	stmia	r2!, {r0, r1, r5}
 80036e2:	cb23      	ldmia	r3!, {r0, r1, r5}
 80036e4:	c223      	stmia	r2!, {r0, r1, r5}
 80036e6:	cb03      	ldmia	r3!, {r0, r1}
 80036e8:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80036ea:	0020      	movs	r0, r4
 80036ec:	f7fc fd14 	bl	8000118 <strlen>
 80036f0:	b282      	uxth	r2, r0
 80036f2:	2301      	movs	r3, #1
 80036f4:	425b      	negs	r3, r3
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	3333      	adds	r3, #51	; 0x33
 80036fa:	0021      	movs	r1, r4
 80036fc:	0030      	movs	r0, r6
 80036fe:	f00a fd47 	bl	800e190 <writePxMutex>
}
 8003702:	b003      	add	sp, #12
 8003704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	200008c8 	.word	0x200008c8
 800370c:	08018444 	.word	0x08018444
 8003710:	08018460 	.word	0x08018460
 8003714:	200065c0 	.word	0x200065c0
 8003718:	2000001c 	.word	0x2000001c
 800371c:	08018474 	.word	0x08018474

08003720 <DisplayModuleStatus>:
/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
*/
void DisplayModuleStatus(uint8_t port)
{
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003722:	46c6      	mov	lr, r8
 8003724:	b500      	push	{lr}
 8003726:	b082      	sub	sp, #8
 8003728:	4680      	mov	r8, r0
	int8_t *pcOutputString;
	uint16_t temp = 0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800372a:	f00a ff87 	bl	800e63c <FreeRTOS_CLIGetOutputBuffer>
 800372e:	0006      	movs	r6, r0
	
	strcpy( (char *) pcOutputString, "");
 8003730:	2300      	movs	r3, #0
 8003732:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8003734:	4b91      	ldr	r3, [pc, #580]	; (800397c <DisplayModuleStatus+0x25c>)
 8003736:	781a      	ldrb	r2, [r3, #0]
 8003738:	4c91      	ldr	r4, [pc, #580]	; (8003980 <DisplayModuleStatus+0x260>)
 800373a:	4992      	ldr	r1, [pc, #584]	; (8003984 <DisplayModuleStatus+0x264>)
 800373c:	0020      	movs	r0, r4
 800373e:	f010 ff67 	bl	8014610 <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8003742:	0021      	movs	r1, r4
 8003744:	0030      	movs	r0, r6
 8003746:	f010 ff83 	bl	8014650 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 800374a:	4b8f      	ldr	r3, [pc, #572]	; (8003988 <DisplayModuleStatus+0x268>)
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	498f      	ldr	r1, [pc, #572]	; (800398c <DisplayModuleStatus+0x26c>)
 8003750:	0020      	movs	r0, r4
 8003752:	f010 ff5d 	bl	8014610 <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8003756:	0021      	movs	r1, r4
 8003758:	0030      	movs	r0, r6
 800375a:	f010 ff79 	bl	8014650 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 800375e:	2304      	movs	r3, #4
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	3b02      	subs	r3, #2
 8003764:	2200      	movs	r2, #0
 8003766:	498a      	ldr	r1, [pc, #552]	; (8003990 <DisplayModuleStatus+0x270>)
 8003768:	0020      	movs	r0, r4
 800376a:	f010 ff51 	bl	8014610 <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 800376e:	0021      	movs	r1, r4
 8003770:	0030      	movs	r0, r6
 8003772:	f010 ff6d 	bl	8014650 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 8003776:	4a87      	ldr	r2, [pc, #540]	; (8003994 <DisplayModuleStatus+0x274>)
 8003778:	4987      	ldr	r1, [pc, #540]	; (8003998 <DisplayModuleStatus+0x278>)
 800377a:	0020      	movs	r0, r4
 800377c:	f010 ff48 	bl	8014610 <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8003780:	0021      	movs	r1, r4
 8003782:	0030      	movs	r0, r6
 8003784:	f010 ff64 	bl	8014650 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 8003788:	4a84      	ldr	r2, [pc, #528]	; (800399c <DisplayModuleStatus+0x27c>)
 800378a:	4985      	ldr	r1, [pc, #532]	; (80039a0 <DisplayModuleStatus+0x280>)
 800378c:	0020      	movs	r0, r4
 800378e:	f010 ff3f 	bl	8014610 <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 8003792:	0021      	movs	r1, r4
 8003794:	0030      	movs	r0, r6
 8003796:	f010 ff5b 	bl	8014650 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 800379a:	4b82      	ldr	r3, [pc, #520]	; (80039a4 <DisplayModuleStatus+0x284>)
 800379c:	0022      	movs	r2, r4
 800379e:	cb23      	ldmia	r3!, {r0, r1, r5}
 80037a0:	c223      	stmia	r2!, {r0, r1, r5}
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	8899      	ldrh	r1, [r3, #4]
 80037a8:	8091      	strh	r1, [r2, #4]
 80037aa:	799b      	ldrb	r3, [r3, #6]
 80037ac:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 80037ae:	0021      	movs	r1, r4
 80037b0:	0030      	movs	r0, r6
 80037b2:	f010 ff4d 	bl	8014650 <strcat>
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80037b6:	2401      	movs	r4, #1
 80037b8:	e00d      	b.n	80037d6 <DisplayModuleStatus+0xb6>
		sprintf(pcUserMessage, "P%d: ", i);
		strcat( (char *) pcOutputString, pcUserMessage);
		switch (portStatus[i])
		{
				case FREE : 
						sprintf(pcUserMessage, "Free\n\r"); break;
 80037ba:	4b71      	ldr	r3, [pc, #452]	; (8003980 <DisplayModuleStatus+0x260>)
 80037bc:	4a7a      	ldr	r2, [pc, #488]	; (80039a8 <DisplayModuleStatus+0x288>)
 80037be:	6811      	ldr	r1, [r2, #0]
 80037c0:	6019      	str	r1, [r3, #0]
 80037c2:	8891      	ldrh	r1, [r2, #4]
 80037c4:	8099      	strh	r1, [r3, #4]
 80037c6:	7992      	ldrb	r2, [r2, #6]
 80037c8:	719a      	strb	r2, [r3, #6]
				case PORTBUTTON :
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
				default:
						break;
		}		
		strcat( (char *) pcOutputString, pcUserMessage);
 80037ca:	496d      	ldr	r1, [pc, #436]	; (8003980 <DisplayModuleStatus+0x260>)
 80037cc:	0030      	movs	r0, r6
 80037ce:	f010 ff3f 	bl	8014650 <strcat>
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80037d2:	3401      	adds	r4, #1
 80037d4:	b2e4      	uxtb	r4, r4
 80037d6:	2c05      	cmp	r4, #5
 80037d8:	d838      	bhi.n	800384c <DisplayModuleStatus+0x12c>
		sprintf(pcUserMessage, "P%d: ", i);
 80037da:	4d69      	ldr	r5, [pc, #420]	; (8003980 <DisplayModuleStatus+0x260>)
 80037dc:	0022      	movs	r2, r4
 80037de:	4973      	ldr	r1, [pc, #460]	; (80039ac <DisplayModuleStatus+0x28c>)
 80037e0:	0028      	movs	r0, r5
 80037e2:	f010 ff15 	bl	8014610 <siprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 80037e6:	0029      	movs	r1, r5
 80037e8:	0030      	movs	r0, r6
 80037ea:	f010 ff31 	bl	8014650 <strcat>
		switch (portStatus[i])
 80037ee:	4b70      	ldr	r3, [pc, #448]	; (80039b0 <DisplayModuleStatus+0x290>)
 80037f0:	5d1b      	ldrb	r3, [r3, r4]
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d8e9      	bhi.n	80037ca <DisplayModuleStatus+0xaa>
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4a6e      	ldr	r2, [pc, #440]	; (80039b4 <DisplayModuleStatus+0x294>)
 80037fa:	58d3      	ldr	r3, [r2, r3]
 80037fc:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 80037fe:	4960      	ldr	r1, [pc, #384]	; (8003980 <DisplayModuleStatus+0x260>)
 8003800:	4b6d      	ldr	r3, [pc, #436]	; (80039b8 <DisplayModuleStatus+0x298>)
 8003802:	000a      	movs	r2, r1
 8003804:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003806:	c223      	stmia	r2!, {r0, r1, r5}
 8003808:	cb03      	ldmia	r3!, {r0, r1}
 800380a:	c203      	stmia	r2!, {r0, r1}
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	7013      	strb	r3, [r2, #0]
 8003810:	e7db      	b.n	80037ca <DisplayModuleStatus+0xaa>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 8003812:	4a5b      	ldr	r2, [pc, #364]	; (8003980 <DisplayModuleStatus+0x260>)
 8003814:	4b69      	ldr	r3, [pc, #420]	; (80039bc <DisplayModuleStatus+0x29c>)
 8003816:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003818:	c223      	stmia	r2!, {r0, r1, r5}
 800381a:	e7d6      	b.n	80037ca <DisplayModuleStatus+0xaa>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 800381c:	4958      	ldr	r1, [pc, #352]	; (8003980 <DisplayModuleStatus+0x260>)
 800381e:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <DisplayModuleStatus+0x2a0>)
 8003820:	000a      	movs	r2, r1
 8003822:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003824:	c223      	stmia	r2!, {r0, r1, r5}
 8003826:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003828:	c223      	stmia	r2!, {r0, r1, r5}
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	8013      	strh	r3, [r2, #0]
 800382e:	e7cc      	b.n	80037ca <DisplayModuleStatus+0xaa>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 8003830:	4953      	ldr	r1, [pc, #332]	; (8003980 <DisplayModuleStatus+0x260>)
 8003832:	4b64      	ldr	r3, [pc, #400]	; (80039c4 <DisplayModuleStatus+0x2a4>)
 8003834:	000a      	movs	r2, r1
 8003836:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003838:	c223      	stmia	r2!, {r0, r1, r5}
 800383a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800383c:	c223      	stmia	r2!, {r0, r1, r5}
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	6011      	str	r1, [r2, #0]
 8003842:	8899      	ldrh	r1, [r3, #4]
 8003844:	8091      	strh	r1, [r2, #4]
 8003846:	799b      	ldrb	r3, [r3, #6]
 8003848:	7193      	strb	r3, [r2, #6]
 800384a:	e7be      	b.n	80037ca <DisplayModuleStatus+0xaa>
	}	

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 800384c:	494c      	ldr	r1, [pc, #304]	; (8003980 <DisplayModuleStatus+0x260>)
 800384e:	4b5e      	ldr	r3, [pc, #376]	; (80039c8 <DisplayModuleStatus+0x2a8>)
 8003850:	000a      	movs	r2, r1
 8003852:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003854:	c231      	stmia	r2!, {r0, r4, r5}
 8003856:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003858:	c231      	stmia	r2!, {r0, r4, r5}
	strcat( (char *) pcOutputString, pcUserMessage);	
 800385a:	0030      	movs	r0, r6
 800385c:	f010 fef8 	bl	8014650 <strcat>
	for (char i=1 ; i<=6 ; i++) {
 8003860:	2401      	movs	r4, #1
 8003862:	e00b      	b.n	800387c <DisplayModuleStatus+0x15c>
		if (streamDMA[i-1].Instance == 0) {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 8003864:	4d46      	ldr	r5, [pc, #280]	; (8003980 <DisplayModuleStatus+0x260>)
 8003866:	0022      	movs	r2, r4
 8003868:	4958      	ldr	r1, [pc, #352]	; (80039cc <DisplayModuleStatus+0x2ac>)
 800386a:	0028      	movs	r0, r5
 800386c:	f010 fed0 	bl	8014610 <siprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8003870:	0029      	movs	r1, r5
 8003872:	0030      	movs	r0, r6
 8003874:	f010 feec 	bl	8014650 <strcat>
	for (char i=1 ; i<=6 ; i++) {
 8003878:	3401      	adds	r4, #1
 800387a:	b2e4      	uxtb	r4, r4
 800387c:	2c06      	cmp	r4, #6
 800387e:	d822      	bhi.n	80038c6 <DisplayModuleStatus+0x1a6>
		if (streamDMA[i-1].Instance == 0) {
 8003880:	1e65      	subs	r5, r4, #1
 8003882:	00eb      	lsls	r3, r5, #3
 8003884:	1b5b      	subs	r3, r3, r5
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4a51      	ldr	r2, [pc, #324]	; (80039d0 <DisplayModuleStatus+0x2b0>)
 800388a:	589b      	ldr	r3, [r3, r2]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0e9      	beq.n	8003864 <DisplayModuleStatus+0x144>
		} else {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8003890:	00eb      	lsls	r3, r5, #3
 8003892:	1b5b      	subs	r3, r3, r5
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4a4e      	ldr	r2, [pc, #312]	; (80039d0 <DisplayModuleStatus+0x2b0>)
 8003898:	18d3      	adds	r3, r2, r3
 800389a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800389c:	f007 fd22 	bl	800b2e4 <GetPort>
 80038a0:	0007      	movs	r7, r0
 80038a2:	00ad      	lsls	r5, r5, #2
 80038a4:	4b4b      	ldr	r3, [pc, #300]	; (80039d4 <DisplayModuleStatus+0x2b4>)
 80038a6:	58e8      	ldr	r0, [r5, r3]
 80038a8:	f007 fd1c 	bl	800b2e4 <GetPort>
 80038ac:	4d34      	ldr	r5, [pc, #208]	; (8003980 <DisplayModuleStatus+0x260>)
 80038ae:	9000      	str	r0, [sp, #0]
 80038b0:	003b      	movs	r3, r7
 80038b2:	0022      	movs	r2, r4
 80038b4:	4948      	ldr	r1, [pc, #288]	; (80039d8 <DisplayModuleStatus+0x2b8>)
 80038b6:	0028      	movs	r0, r5
 80038b8:	f010 feaa 	bl	8014610 <siprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 80038bc:	0029      	movs	r1, r5
 80038be:	0030      	movs	r0, r6
 80038c0:	f010 fec6 	bl	8014650 <strcat>
 80038c4:	e7d8      	b.n	8003878 <DisplayModuleStatus+0x158>
		}
	}
	strcat( (char *) pcOutputString, "\n\r");
 80038c6:	0030      	movs	r0, r6
 80038c8:	f7fc fc26 	bl	8000118 <strlen>
 80038cc:	1830      	adds	r0, r6, r0
 80038ce:	2203      	movs	r2, #3
 80038d0:	4942      	ldr	r1, [pc, #264]	; (80039dc <DisplayModuleStatus+0x2bc>)
 80038d2:	f00f ff03 	bl	80136dc <memcpy>
	
	/* Ports direction */
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 80038d6:	0030      	movs	r0, r6
 80038d8:	f7fc fc1e 	bl	8000118 <strlen>
 80038dc:	1830      	adds	r0, r6, r0
 80038de:	221d      	movs	r2, #29
 80038e0:	493f      	ldr	r1, [pc, #252]	; (80039e0 <DisplayModuleStatus+0x2c0>)
 80038e2:	f00f fefb 	bl	80136dc <memcpy>
	temp = strlen( (char *) pcOutputString);
 80038e6:	0030      	movs	r0, r6
 80038e8:	f7fc fc16 	bl	8000118 <strlen>
 80038ec:	0005      	movs	r5, r0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80038ee:	2401      	movs	r4, #1
 80038f0:	e00b      	b.n	800390a <DisplayModuleStatus+0x1ea>
	{		
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
		{
			sprintf(pcUserMessage, "P%d ", p);
 80038f2:	4f23      	ldr	r7, [pc, #140]	; (8003980 <DisplayModuleStatus+0x260>)
 80038f4:	0022      	movs	r2, r4
 80038f6:	493b      	ldr	r1, [pc, #236]	; (80039e4 <DisplayModuleStatus+0x2c4>)
 80038f8:	0038      	movs	r0, r7
 80038fa:	f010 fe89 	bl	8014610 <siprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 80038fe:	0039      	movs	r1, r7
 8003900:	0030      	movs	r0, r6
 8003902:	f010 fea5 	bl	8014650 <strcat>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8003906:	3401      	adds	r4, #1
 8003908:	b2e4      	uxtb	r4, r4
 800390a:	2c05      	cmp	r4, #5
 800390c:	d80c      	bhi.n	8003928 <DisplayModuleStatus+0x208>
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <DisplayModuleStatus+0x25c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	3b01      	subs	r3, #1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <DisplayModuleStatus+0x2c8>)
 8003918:	5a9a      	ldrh	r2, [r3, r2]
 800391a:	1e61      	subs	r1, r4, #1
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	410b      	asrs	r3, r1
 8003922:	4213      	tst	r3, r2
 8003924:	d0ef      	beq.n	8003906 <DisplayModuleStatus+0x1e6>
 8003926:	e7e4      	b.n	80038f2 <DisplayModuleStatus+0x1d2>
		}	
	}
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 8003928:	0030      	movs	r0, r6
 800392a:	f7fc fbf5 	bl	8000118 <strlen>
 800392e:	042d      	lsls	r5, r5, #16
 8003930:	0c2d      	lsrs	r5, r5, #16
 8003932:	42a8      	cmp	r0, r5
 8003934:	d00e      	beq.n	8003954 <DisplayModuleStatus+0x234>
		strcat( (char *) pcOutputString, "None");
	}
	strcat( (char *) pcOutputString, "\n\r");
 8003936:	0030      	movs	r0, r6
 8003938:	f7fc fbee 	bl	8000118 <strlen>
 800393c:	1830      	adds	r0, r6, r0
 800393e:	2203      	movs	r2, #3
 8003940:	4926      	ldr	r1, [pc, #152]	; (80039dc <DisplayModuleStatus+0x2bc>)
 8003942:	f00f fecb 	bl	80136dc <memcpy>
	
	/* Display output */
	if (port)
 8003946:	4643      	mov	r3, r8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d109      	bne.n	8003960 <DisplayModuleStatus+0x240>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
	
}
 800394c:	b002      	add	sp, #8
 800394e:	bc80      	pop	{r7}
 8003950:	46b8      	mov	r8, r7
 8003952:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 8003954:	1830      	adds	r0, r6, r0
 8003956:	2205      	movs	r2, #5
 8003958:	4924      	ldr	r1, [pc, #144]	; (80039ec <DisplayModuleStatus+0x2cc>)
 800395a:	f00f febf 	bl	80136dc <memcpy>
 800395e:	e7ea      	b.n	8003936 <DisplayModuleStatus+0x216>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 8003960:	0030      	movs	r0, r6
 8003962:	f7fc fbd9 	bl	8000118 <strlen>
 8003966:	b282      	uxth	r2, r0
 8003968:	2301      	movs	r3, #1
 800396a:	425b      	negs	r3, r3
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	3333      	adds	r3, #51	; 0x33
 8003970:	0031      	movs	r1, r6
 8003972:	4640      	mov	r0, r8
 8003974:	f00a fc0c 	bl	800e190 <writePxMutex>
}
 8003978:	e7e8      	b.n	800394c <DisplayModuleStatus+0x22c>
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	2000089e 	.word	0x2000089e
 8003980:	200008c8 	.word	0x200008c8
 8003984:	08018494 	.word	0x08018494
 8003988:	200002d7 	.word	0x200002d7
 800398c:	080184b0 	.word	0x080184b0
 8003990:	080184cc 	.word	0x080184cc
 8003994:	080184ec 	.word	0x080184ec
 8003998:	080184f8 	.word	0x080184f8
 800399c:	08018510 	.word	0x08018510
 80039a0:	0801851c 	.word	0x0801851c
 80039a4:	08018538 	.word	0x08018538
 80039a8:	08018554 	.word	0x08018554
 80039ac:	0801854c 	.word	0x0801854c
 80039b0:	20000918 	.word	0x20000918
 80039b4:	08018650 	.word	0x08018650
 80039b8:	0801855c 	.word	0x0801855c
 80039bc:	08018574 	.word	0x08018574
 80039c0:	08018580 	.word	0x08018580
 80039c4:	0801859c 	.word	0x0801859c
 80039c8:	080185bc 	.word	0x080185bc
 80039cc:	080185d4 	.word	0x080185d4
 80039d0:	20001134 	.word	0x20001134
 80039d4:	20000c90 	.word	0x20000c90
 80039d8:	080185f0 	.word	0x080185f0
 80039dc:	08018548 	.word	0x08018548
 80039e0:	08018620 	.word	0x08018620
 80039e4:	08018640 	.word	0x08018640
 80039e8:	200065c0 	.word	0x200065c0
 80039ec:	08018648 	.word	0x08018648

080039f0 <GetID>:
/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
*/
int16_t GetID(char* string)
{
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	0006      	movs	r6, r0
	uint8_t id = 0, i = 0;
	
	if(!strcmp(string, "me"))							/* Check keywords */
 80039f4:	4929      	ldr	r1, [pc, #164]	; (8003a9c <GetID+0xac>)
 80039f6:	f7fc fb85 	bl	8000104 <strcmp>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d00a      	beq.n	8003a14 <GetID+0x24>
		return myID;
	else if(!strcmp(string, "all"))							
 80039fe:	4928      	ldr	r1, [pc, #160]	; (8003aa0 <GetID+0xb0>)
 8003a00:	0030      	movs	r0, r6
 8003a02:	f7fc fb7f 	bl	8000104 <strcmp>
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d046      	beq.n	8003a98 <GetID+0xa8>
		return BOS_BROADCAST;				
	else if (string[0] == '#') 						/* Check IDs */
 8003a0a:	7835      	ldrb	r5, [r6, #0]
 8003a0c:	2d23      	cmp	r5, #35	; 0x23
 8003a0e:	d004      	beq.n	8003a1a <GetID+0x2a>
			return BOS_ERR_WrongID;				
	} 
	else 																	/* Check alias */
	{															
		/* Check module alias */
		for (i=0 ; i<N ; i++) {
 8003a10:	2400      	movs	r4, #0
 8003a12:	e018      	b.n	8003a46 <GetID+0x56>
		return myID;
 8003a14:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <GetID+0xb4>)
 8003a16:	7818      	ldrb	r0, [r3, #0]
		}			
		
		return BOS_ERR_WrongName;			
	}
	
}
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
		id = atol(string+1);
 8003a1a:	1c70      	adds	r0, r6, #1
 8003a1c:	f00f fe11 	bl	8013642 <atol>
 8003a20:	b2c0      	uxtb	r0, r0
		if (id > 0 && id <= N)
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d003      	beq.n	8003a2e <GetID+0x3e>
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <GetID+0xb8>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	4283      	cmp	r3, r0
 8003a2c:	d205      	bcs.n	8003a3a <GetID+0x4a>
		else if (id == myID)
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <GetID+0xb4>)
 8003a30:	781c      	ldrb	r4, [r3, #0]
 8003a32:	4284      	cmp	r4, r0
 8003a34:	d003      	beq.n	8003a3e <GetID+0x4e>
			return BOS_ERR_WrongID;				
 8003a36:	2066      	movs	r0, #102	; 0x66
 8003a38:	e7ee      	b.n	8003a18 <GetID+0x28>
			return id;
 8003a3a:	b200      	sxth	r0, r0
 8003a3c:	e7ec      	b.n	8003a18 <GetID+0x28>
			return myID;
 8003a3e:	b220      	sxth	r0, r4
 8003a40:	e7ea      	b.n	8003a18 <GetID+0x28>
		for (i=0 ; i<N ; i++) {
 8003a42:	3401      	adds	r4, #1
 8003a44:	b2e4      	uxtb	r4, r4
 8003a46:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <GetID+0xb8>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	42a3      	cmp	r3, r4
 8003a4c:	d90d      	bls.n	8003a6a <GetID+0x7a>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 8003a4e:	00a1      	lsls	r1, r4, #2
 8003a50:	1909      	adds	r1, r1, r4
 8003a52:	0049      	lsls	r1, r1, #1
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <GetID+0xbc>)
 8003a56:	18c9      	adds	r1, r1, r3
 8003a58:	0030      	movs	r0, r6
 8003a5a:	f7fc fb53 	bl	8000104 <strcmp>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d1ef      	bne.n	8003a42 <GetID+0x52>
 8003a62:	2d00      	cmp	r5, #0
 8003a64:	d0ed      	beq.n	8003a42 <GetID+0x52>
 8003a66:	b220      	sxth	r0, r4
 8003a68:	e7d6      	b.n	8003a18 <GetID+0x28>
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 8003a6a:	2500      	movs	r5, #0
 8003a6c:	2d09      	cmp	r5, #9
 8003a6e:	d811      	bhi.n	8003a94 <GetID+0xa4>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8003a70:	00a9      	lsls	r1, r5, #2
 8003a72:	1949      	adds	r1, r1, r5
 8003a74:	0049      	lsls	r1, r1, #1
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <GetID+0xc0>)
 8003a78:	1859      	adds	r1, r3, r1
 8003a7a:	0030      	movs	r0, r6
 8003a7c:	f7fc fb42 	bl	8000104 <strcmp>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d002      	beq.n	8003a8a <GetID+0x9a>
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 8003a84:	3501      	adds	r5, #1
 8003a86:	b2ed      	uxtb	r5, r5
 8003a88:	e7f0      	b.n	8003a6c <GetID+0x7c>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8003a8a:	022c      	lsls	r4, r5, #8
 8003a8c:	20fe      	movs	r0, #254	; 0xfe
 8003a8e:	4320      	orrs	r0, r4
 8003a90:	b200      	sxth	r0, r0
 8003a92:	e7c1      	b.n	8003a18 <GetID+0x28>
		return BOS_ERR_WrongName;			
 8003a94:	2064      	movs	r0, #100	; 0x64
 8003a96:	e7bf      	b.n	8003a18 <GetID+0x28>
		return BOS_BROADCAST;				
 8003a98:	20ff      	movs	r0, #255	; 0xff
 8003a9a:	e7bd      	b.n	8003a18 <GetID+0x28>
 8003a9c:	08018664 	.word	0x08018664
 8003aa0:	08018668 	.word	0x08018668
 8003aa4:	2000089e 	.word	0x2000089e
 8003aa8:	2000001c 	.word	0x2000001c
 8003aac:	20000790 	.word	0x20000790
 8003ab0:	20000684 	.word	0x20000684

08003ab4 <NameModule>:
/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
*/
BOS_Status NameModule(uint8_t module, char* alias)
{
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	0004      	movs	r4, r0
 8003ab8:	000e      	movs	r6, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for(i=0 ; i<NumOfKeywords ; i++)
 8003aba:	2500      	movs	r5, #0
 8003abc:	2d03      	cmp	r5, #3
 8003abe:	dc09      	bgt.n	8003ad4 <NameModule+0x20>
	{
		if (!strcmp(alias, BOSkeywords[i]))	
 8003ac0:	00ab      	lsls	r3, r5, #2
 8003ac2:	4929      	ldr	r1, [pc, #164]	; (8003b68 <NameModule+0xb4>)
 8003ac4:	18c9      	adds	r1, r1, r3
 8003ac6:	0030      	movs	r0, r6
 8003ac8:	f7fc fb1c 	bl	8000104 <strcmp>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d043      	beq.n	8003b58 <NameModule+0xa4>
	for(i=0 ; i<NumOfKeywords ; i++)
 8003ad0:	3501      	adds	r5, #1
 8003ad2:	e7f3      	b.n	8003abc <NameModule+0x8>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i=1 ; i<N ; i++)
 8003ad4:	2501      	movs	r5, #1
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <NameModule+0xb8>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	42ab      	cmp	r3, r5
 8003adc:	dd0b      	ble.n	8003af6 <NameModule+0x42>
	{
		if (!strcmp(alias, moduleAlias[i]))	
 8003ade:	00a9      	lsls	r1, r5, #2
 8003ae0:	1949      	adds	r1, r1, r5
 8003ae2:	0049      	lsls	r1, r1, #1
 8003ae4:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <NameModule+0xbc>)
 8003ae6:	18c9      	adds	r1, r1, r3
 8003ae8:	0030      	movs	r0, r6
 8003aea:	f7fc fb0b 	bl	8000104 <strcmp>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d034      	beq.n	8003b5c <NameModule+0xa8>
	for(i=1 ; i<N ; i++)
 8003af2:	3501      	adds	r5, #1
 8003af4:	e7ef      	b.n	8003ad6 <NameModule+0x22>
			return BOS_ERR_ExistingAlias;
	}

	/* 3. Check module alias with group aliases */
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003af6:	2500      	movs	r5, #0
 8003af8:	2d09      	cmp	r5, #9
 8003afa:	dc0b      	bgt.n	8003b14 <NameModule+0x60>
	{
		if (!strcmp(alias, groupAlias[i]))	
 8003afc:	00a9      	lsls	r1, r5, #2
 8003afe:	1949      	adds	r1, r1, r5
 8003b00:	0049      	lsls	r1, r1, #1
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <NameModule+0xc0>)
 8003b04:	1859      	adds	r1, r3, r1
 8003b06:	0030      	movs	r0, r6
 8003b08:	f7fc fafc 	bl	8000104 <strcmp>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d027      	beq.n	8003b60 <NameModule+0xac>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003b10:	3501      	adds	r5, #1
 8003b12:	e7f1      	b.n	8003af8 <NameModule+0x44>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003b14:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <NameModule+0xc4>)
 8003b16:	4a19      	ldr	r2, [pc, #100]	; (8003b7c <NameModule+0xc8>)
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <NameModule+0xc4>)
 8003b1c:	681d      	ldr	r5, [r3, #0]
 8003b1e:	2d00      	cmp	r5, #0
 8003b20:	d00f      	beq.n	8003b42 <NameModule+0x8e>
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8003b22:	682b      	ldr	r3, [r5, #0]
 8003b24:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8003b26:	0038      	movs	r0, r7
 8003b28:	f7fc faf6 	bl	8000118 <strlen>
 8003b2c:	0002      	movs	r2, r0
		
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8003b2e:	0039      	movs	r1, r7
 8003b30:	0030      	movs	r0, r6
 8003b32:	f010 fdb0 	bl	8014696 <strncmp>
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d014      	beq.n	8003b64 <NameModule+0xb0>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003b3a:	686a      	ldr	r2, [r5, #4]
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <NameModule+0xc4>)
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e7eb      	b.n	8003b1a <NameModule+0x66>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 8003b42:	00a0      	lsls	r0, r4, #2
 8003b44:	1900      	adds	r0, r0, r4
 8003b46:	0040      	lsls	r0, r0, #1
 8003b48:	4c09      	ldr	r4, [pc, #36]	; (8003b70 <NameModule+0xbc>)
 8003b4a:	1900      	adds	r0, r0, r4
 8003b4c:	0031      	movs	r1, r6
 8003b4e:	f010 fd9a 	bl	8014686 <strcpy>
	
	/* 6. Share new module alias with other modules */
	
	
	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 8003b52:	f7fe fedf 	bl	8002914 <SaveEEalias>
	
	return result;
 8003b56:	e002      	b.n	8003b5e <NameModule+0xaa>
			return BOS_ERR_Keyword;
 8003b58:	2006      	movs	r0, #6
 8003b5a:	e000      	b.n	8003b5e <NameModule+0xaa>
			return BOS_ERR_ExistingAlias;
 8003b5c:	2007      	movs	r0, #7
}
 8003b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8003b60:	2007      	movs	r0, #7
 8003b62:	e7fc      	b.n	8003b5e <NameModule+0xaa>
			return BOS_ERR_ExistingCmd;
 8003b64:	2008      	movs	r0, #8
 8003b66:	e7fa      	b.n	8003b5e <NameModule+0xaa>
 8003b68:	0801889c 	.word	0x0801889c
 8003b6c:	2000001c 	.word	0x2000001c
 8003b70:	20000790 	.word	0x20000790
 8003b74:	20000684 	.word	0x20000684
 8003b78:	20000920 	.word	0x20000920
 8003b7c:	200000d0 	.word	0x200000d0

08003b80 <AddModuleToGroup>:
/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
*/
BOS_Status AddModuleToGroup(uint8_t module, char* group)
{
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	0004      	movs	r4, r0
 8003b84:	000d      	movs	r5, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */
	
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003b86:	2600      	movs	r6, #0
 8003b88:	2e09      	cmp	r6, #9
 8003b8a:	dc14      	bgt.n	8003bb6 <AddModuleToGroup+0x36>
	{
		/* This group already exists */
		if (!strcmp(group, groupAlias[i]))	
 8003b8c:	00b1      	lsls	r1, r6, #2
 8003b8e:	1989      	adds	r1, r1, r6
 8003b90:	0049      	lsls	r1, r1, #1
 8003b92:	4b34      	ldr	r3, [pc, #208]	; (8003c64 <AddModuleToGroup+0xe4>)
 8003b94:	1859      	adds	r1, r3, r1
 8003b96:	0028      	movs	r0, r5
 8003b98:	f7fc fab4 	bl	8000104 <strcmp>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d001      	beq.n	8003ba4 <AddModuleToGroup+0x24>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	e7f1      	b.n	8003b88 <AddModuleToGroup+0x8>
		{
			/* 1. Add this module to the group */
			groupModules[module-1] |= (0x0001<<i);	
 8003ba4:	3c01      	subs	r4, #1
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	40b2      	lsls	r2, r6
 8003baa:	492f      	ldr	r1, [pc, #188]	; (8003c68 <AddModuleToGroup+0xe8>)
 8003bac:	0064      	lsls	r4, r4, #1
 8003bae:	5a63      	ldrh	r3, [r4, r1]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	5263      	strh	r3, [r4, r1]

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	
	return result;
}
 8003bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(j=0 ; j<NumOfKeywords ; j++)
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	2e03      	cmp	r6, #3
 8003bba:	dc09      	bgt.n	8003bd0 <AddModuleToGroup+0x50>
		if (!strcmp(group, BOSkeywords[j]))	
 8003bbc:	00b3      	lsls	r3, r6, #2
 8003bbe:	492b      	ldr	r1, [pc, #172]	; (8003c6c <AddModuleToGroup+0xec>)
 8003bc0:	18c9      	adds	r1, r1, r3
 8003bc2:	0028      	movs	r0, r5
 8003bc4:	f7fc fa9e 	bl	8000104 <strcmp>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d045      	beq.n	8003c58 <AddModuleToGroup+0xd8>
	for(j=0 ; j<NumOfKeywords ; j++)
 8003bcc:	3601      	adds	r6, #1
 8003bce:	e7f3      	b.n	8003bb8 <AddModuleToGroup+0x38>
	for(j=1 ; j<N ; j++)
 8003bd0:	2601      	movs	r6, #1
 8003bd2:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <AddModuleToGroup+0xf0>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	42b3      	cmp	r3, r6
 8003bd8:	dd0b      	ble.n	8003bf2 <AddModuleToGroup+0x72>
		if (!strcmp(group, moduleAlias[j]))	
 8003bda:	00b1      	lsls	r1, r6, #2
 8003bdc:	1989      	adds	r1, r1, r6
 8003bde:	0049      	lsls	r1, r1, #1
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <AddModuleToGroup+0xf4>)
 8003be2:	18c9      	adds	r1, r1, r3
 8003be4:	0028      	movs	r0, r5
 8003be6:	f7fc fa8d 	bl	8000104 <strcmp>
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d036      	beq.n	8003c5c <AddModuleToGroup+0xdc>
	for(j=1 ; j<N ; j++)
 8003bee:	3601      	adds	r6, #1
 8003bf0:	e7ef      	b.n	8003bd2 <AddModuleToGroup+0x52>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <AddModuleToGroup+0xf8>)
 8003bf4:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <AddModuleToGroup+0xfc>)
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <AddModuleToGroup+0xf8>)
 8003bfa:	681e      	ldr	r6, [r3, #0]
 8003bfc:	2e00      	cmp	r6, #0
 8003bfe:	d020      	beq.n	8003c42 <AddModuleToGroup+0xc2>
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8003c00:	6833      	ldr	r3, [r6, #0]
 8003c02:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8003c04:	0038      	movs	r0, r7
 8003c06:	f7fc fa87 	bl	8000118 <strlen>
 8003c0a:	0002      	movs	r2, r0
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8003c0c:	0039      	movs	r1, r7
 8003c0e:	0028      	movs	r0, r5
 8003c10:	f010 fd41 	bl	8014696 <strncmp>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d023      	beq.n	8003c60 <AddModuleToGroup+0xe0>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003c18:	6872      	ldr	r2, [r6, #4]
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <AddModuleToGroup+0xf8>)
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e7eb      	b.n	8003bf8 <AddModuleToGroup+0x78>
			strcpy(groupAlias[i], group);	
 8003c20:	00b0      	lsls	r0, r6, #2
 8003c22:	1980      	adds	r0, r0, r6
 8003c24:	0040      	lsls	r0, r0, #1
 8003c26:	1810      	adds	r0, r2, r0
 8003c28:	0029      	movs	r1, r5
 8003c2a:	f010 fd2c 	bl	8014686 <strcpy>
	groupModules[module-1] |= (0x0001<<i);
 8003c2e:	3c01      	subs	r4, #1
 8003c30:	2201      	movs	r2, #1
 8003c32:	40b2      	lsls	r2, r6
 8003c34:	490c      	ldr	r1, [pc, #48]	; (8003c68 <AddModuleToGroup+0xe8>)
 8003c36:	0064      	lsls	r4, r4, #1
 8003c38:	5a63      	ldrh	r3, [r4, r1]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	5263      	strh	r3, [r4, r1]
	return result;
 8003c3e:	2000      	movs	r0, #0
 8003c40:	e7b8      	b.n	8003bb4 <AddModuleToGroup+0x34>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003c42:	2e09      	cmp	r6, #9
 8003c44:	dcf3      	bgt.n	8003c2e <AddModuleToGroup+0xae>
		if (!groupAlias[i][0]) {	
 8003c46:	00b3      	lsls	r3, r6, #2
 8003c48:	199b      	adds	r3, r3, r6
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <AddModuleToGroup+0xe4>)
 8003c4e:	5c9b      	ldrb	r3, [r3, r2]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0e5      	beq.n	8003c20 <AddModuleToGroup+0xa0>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8003c54:	3601      	adds	r6, #1
 8003c56:	e7f4      	b.n	8003c42 <AddModuleToGroup+0xc2>
			return BOS_ERR_Keyword;
 8003c58:	2006      	movs	r0, #6
 8003c5a:	e7ab      	b.n	8003bb4 <AddModuleToGroup+0x34>
			return BOS_ERR_ExistingAlias;
 8003c5c:	2007      	movs	r0, #7
 8003c5e:	e7a9      	b.n	8003bb4 <AddModuleToGroup+0x34>
			return BOS_ERR_ExistingCmd;
 8003c60:	2008      	movs	r0, #8
 8003c62:	e7a7      	b.n	8003bb4 <AddModuleToGroup+0x34>
 8003c64:	20000684 	.word	0x20000684
 8003c68:	200006e8 	.word	0x200006e8
 8003c6c:	0801889c 	.word	0x0801889c
 8003c70:	2000001c 	.word	0x2000001c
 8003c74:	20000790 	.word	0x20000790
 8003c78:	20000924 	.word	0x20000924
 8003c7c:	200000d0 	.word	0x200000d0

08003c80 <ReadPortsDir>:
/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
*/
BOS_Status ReadPortsDir(void)
{
 8003c80:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK; 
	
	/* Ask all other modules for their ports directions */
	for (uint8_t i=1 ; i<=N ; i++) 
 8003c82:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK; 
 8003c84:	2600      	movs	r6, #0
	for (uint8_t i=1 ; i<=N ; i++) 
 8003c86:	e01d      	b.n	8003cc4 <ReadPortsDir+0x44>
			if (responseStatus != BOS_OK)	{
				result = BOS_ERR_NoResponse;
			} 	
		} else {
			/* Check my own ports */
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8003c88:	3401      	adds	r4, #1
 8003c8a:	b2e4      	uxtb	r4, r4
 8003c8c:	2c05      	cmp	r4, #5
 8003c8e:	d817      	bhi.n	8003cc0 <ReadPortsDir+0x40>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8003c90:	0020      	movs	r0, r4
 8003c92:	f00a fa5f 	bl	800e154 <GetUart>
 8003c96:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1f3      	bne.n	8003c88 <ReadPortsDir+0x8>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <ReadPortsDir+0x74>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	1e61      	subs	r1, r4, #1
 8003ca8:	2280      	movs	r2, #128	; 0x80
 8003caa:	0212      	lsls	r2, r2, #8
 8003cac:	410a      	asrs	r2, r1
 8003cae:	0011      	movs	r1, r2
 8003cb0:	4811      	ldr	r0, [pc, #68]	; (8003cf8 <ReadPortsDir+0x78>)
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	5a1a      	ldrh	r2, [r3, r0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	521a      	strh	r2, [r3, r0]
 8003cba:	e7e5      	b.n	8003c88 <ReadPortsDir+0x8>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8003cbc:	2401      	movs	r4, #1
 8003cbe:	e7e5      	b.n	8003c8c <ReadPortsDir+0xc>
	for (uint8_t i=1 ; i<=N ; i++) 
 8003cc0:	3501      	adds	r5, #1
 8003cc2:	b2ed      	uxtb	r5, r5
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <ReadPortsDir+0x7c>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	42ab      	cmp	r3, r5
 8003cca:	d311      	bcc.n	8003cf0 <ReadPortsDir+0x70>
		if (i != myID) {
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <ReadPortsDir+0x74>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	42ab      	cmp	r3, r5
 8003cd2:	d0f3      	beq.n	8003cbc <ReadPortsDir+0x3c>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2113      	movs	r1, #19
 8003cd8:	0028      	movs	r0, r5
 8003cda:	f004 fddf 	bl	800889c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8003cde:	2032      	movs	r0, #50	; 0x32
 8003ce0:	f00a f898 	bl	800de14 <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <ReadPortsDir+0x80>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0e9      	beq.n	8003cc0 <ReadPortsDir+0x40>
				result = BOS_ERR_NoResponse;
 8003cec:	2602      	movs	r6, #2
 8003cee:	e7e7      	b.n	8003cc0 <ReadPortsDir+0x40>
			}
		}
	}
	
	return result;
}
 8003cf0:	0030      	movs	r0, r6
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	2000089e 	.word	0x2000089e
 8003cf8:	200065c0 	.word	0x200065c0
 8003cfc:	2000001c 	.word	0x2000001c
 8003d00:	20000930 	.word	0x20000930

08003d04 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
*/
BOS_Status UpdateMyPortsDir(void)
{
 8003d04:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	
	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8003d06:	2401      	movs	r4, #1
 8003d08:	e007      	b.n	8003d1a <UpdateMyPortsDir+0x16>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);					
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	f00a fa22 	bl	800e154 <GetUart>
 8003d10:	2101      	movs	r1, #1
 8003d12:	f00a fab9 	bl	800e288 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8003d16:	3401      	adds	r4, #1
 8003d18:	b2e4      	uxtb	r4, r4
 8003d1a:	2c05      	cmp	r4, #5
 8003d1c:	d812      	bhi.n	8003d44 <UpdateMyPortsDir+0x40>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <UpdateMyPortsDir+0x44>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <UpdateMyPortsDir+0x48>)
 8003d28:	5a9a      	ldrh	r2, [r3, r2]
 8003d2a:	1e61      	subs	r1, r4, #1
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	410b      	asrs	r3, r1
 8003d32:	4213      	tst	r3, r2
 8003d34:	d1e9      	bne.n	8003d0a <UpdateMyPortsDir+0x6>
			SwapUartPins(GetUart(p), NORMAL);
 8003d36:	0020      	movs	r0, r4
 8003d38:	f00a fa0c 	bl	800e154 <GetUart>
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	f00a faa3 	bl	800e288 <SwapUartPins>
 8003d42:	e7e8      	b.n	8003d16 <UpdateMyPortsDir+0x12>
		}	
	}		
	
	return result;
}
 8003d44:	2000      	movs	r0, #0
 8003d46:	bd10      	pop	{r4, pc}
 8003d48:	2000089e 	.word	0x2000089e
 8003d4c:	200065c0 	.word	0x200065c0

08003d50 <BOS_Init>:
{
 8003d50:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8003d52:	f009 ff17 	bl	800db84 <RTC_Init>
	GetTimeDate();
 8003d56:	f009 ffb5 	bl	800dcc4 <GetTimeDate>
	EE_Init();
 8003d5a:	f003 f9e1 	bl	8007120 <EE_Init>
  GPIO_Init();
 8003d5e:	f009 fc4b 	bl	800d5f8 <GPIO_Init>
	DMA_Init();
 8003d62:	f008 f9d1 	bl	800c108 <DMA_Init>
	TIM_USEC_Init();
 8003d66:	f009 ffe1 	bl	800dd2c <TIM_USEC_Init>
	CRC_Init();
 8003d6a:	f009 fbf3 	bl	800d554 <CRC_Init>
	TIM_MSEC_Init();
 8003d6e:	f00a f80f 	bl	800dd90 <TIM_MSEC_Init>
	if (IsFactoryReset())
 8003d72:	f009 fd19 	bl	800d7a8 <IsFactoryReset>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d11a      	bne.n	8003db0 <BOS_Init+0x60>
	if (IsLowerCLIbaud())
 8003d7a:	f7ff f8dd 	bl	8002f38 <IsLowerCLIbaud>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d021      	beq.n	8003dc6 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag = 1;
 8003d82:	4b3e      	ldr	r3, [pc, #248]	; (8003e7c <BOS_Init+0x12c>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8003d88:	2032      	movs	r0, #50	; 0x32
 8003d8a:	f00a f843 	bl	800de14 <StartMilliDelay>
		Module_Init();	
 8003d8e:	f007 fa51 	bl	800b234 <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003d92:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <BOS_Init+0x130>)
 8003d94:	22e1      	movs	r2, #225	; 0xe1
 8003d96:	0252      	lsls	r2, r2, #9
 8003d98:	609a      	str	r2, [r3, #8]
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8003d9a:	2401      	movs	r4, #1
 8003d9c:	2c05      	cmp	r4, #5
 8003d9e:	d817      	bhi.n	8003dd0 <BOS_Init+0x80>
			UpdateBaudrate(port, BOS.clibaudrate);
 8003da0:	4b37      	ldr	r3, [pc, #220]	; (8003e80 <BOS_Init+0x130>)
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	0020      	movs	r0, r4
 8003da6:	f00a fa65 	bl	800e274 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8003daa:	3401      	adds	r4, #1
 8003dac:	b2e4      	uxtb	r4, r4
 8003dae:	e7f5      	b.n	8003d9c <BOS_Init+0x4c>
		EE_FormatForFactoryReset();
 8003db0:	f7ff f910 	bl	8002fd4 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003db4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db8:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <BOS_Init+0x134>)
 8003dba:	4a33      	ldr	r2, [pc, #204]	; (8003e88 <BOS_Init+0x138>)
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	e7fd      	b.n	8003dc2 <BOS_Init+0x72>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8003dc6:	2032      	movs	r0, #50	; 0x32
 8003dc8:	f00a f824 	bl	800de14 <StartMilliDelay>
		Module_Init();				
 8003dcc:	f007 fa32 	bl	800b234 <Module_Init>
	LoadEEvars();
 8003dd0:	f7ff f8a0 	bl	8002f14 <LoadEEvars>
	UpdateMyPortsDir();
 8003dd4:	f7ff ff96 	bl	8003d04 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8003dd8:	f008 ff00 	bl	800cbdc <SetupMessagingRxDMAs>
	if (myID == 0)		/* Native module */
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	; (8003e8c <BOS_Init+0x13c>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d117      	bne.n	8003e14 <BOS_Init+0xc4>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8003de4:	2580      	movs	r5, #128	; 0x80
 8003de6:	012d      	lsls	r5, r5, #4
 8003de8:	2490      	movs	r4, #144	; 0x90
 8003dea:	05e4      	lsls	r4, r4, #23
 8003dec:	2201      	movs	r2, #1
 8003dee:	0029      	movs	r1, r5
 8003df0:	0020      	movs	r0, r4
 8003df2:	f00d fed0 	bl	8011b96 <HAL_GPIO_WritePin>
 8003df6:	20fa      	movs	r0, #250	; 0xfa
 8003df8:	0040      	lsls	r0, r0, #1
 8003dfa:	f00a f80b 	bl	800de14 <StartMilliDelay>
 8003dfe:	2200      	movs	r2, #0
 8003e00:	0029      	movs	r1, r5
 8003e02:	0020      	movs	r0, r4
 8003e04:	f00d fec7 	bl	8011b96 <HAL_GPIO_WritePin>
	ResetUartORE();
 8003e08:	f002 ffc0 	bl	8006d8c <ResetUartORE>
	BOS_initialized = 1;
 8003e0c:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <BOS_Init+0x140>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
}
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8003e14:	2580      	movs	r5, #128	; 0x80
 8003e16:	012d      	lsls	r5, r5, #4
 8003e18:	2490      	movs	r4, #144	; 0x90
 8003e1a:	05e4      	lsls	r4, r4, #23
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	0029      	movs	r1, r5
 8003e20:	0020      	movs	r0, r4
 8003e22:	f00d feb8 	bl	8011b96 <HAL_GPIO_WritePin>
 8003e26:	20fa      	movs	r0, #250	; 0xfa
 8003e28:	0040      	lsls	r0, r0, #1
 8003e2a:	f009 fff3 	bl	800de14 <StartMilliDelay>
 8003e2e:	2200      	movs	r2, #0
 8003e30:	0029      	movs	r1, r5
 8003e32:	0020      	movs	r0, r4
 8003e34:	f00d feaf 	bl	8011b96 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003e38:	2064      	movs	r0, #100	; 0x64
 8003e3a:	f009 ffeb 	bl	800de14 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8003e3e:	2201      	movs	r2, #1
 8003e40:	0029      	movs	r1, r5
 8003e42:	0020      	movs	r0, r4
 8003e44:	f00d fea7 	bl	8011b96 <HAL_GPIO_WritePin>
 8003e48:	2064      	movs	r0, #100	; 0x64
 8003e4a:	f009 ffe3 	bl	800de14 <StartMilliDelay>
 8003e4e:	2200      	movs	r2, #0
 8003e50:	0029      	movs	r1, r5
 8003e52:	0020      	movs	r0, r4
 8003e54:	f00d fe9f 	bl	8011b96 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003e58:	2064      	movs	r0, #100	; 0x64
 8003e5a:	f009 ffdb 	bl	800de14 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8003e5e:	2201      	movs	r2, #1
 8003e60:	0029      	movs	r1, r5
 8003e62:	0020      	movs	r0, r4
 8003e64:	f00d fe97 	bl	8011b96 <HAL_GPIO_WritePin>
 8003e68:	2064      	movs	r0, #100	; 0x64
 8003e6a:	f009 ffd3 	bl	800de14 <StartMilliDelay>
 8003e6e:	2200      	movs	r2, #0
 8003e70:	0029      	movs	r1, r5
 8003e72:	0020      	movs	r0, r4
 8003e74:	f00d fe8f 	bl	8011b96 <HAL_GPIO_WritePin>
 8003e78:	e7c6      	b.n	8003e08 <BOS_Init+0xb8>
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	200002d6 	.word	0x200002d6
 8003e80:	20006138 	.word	0x20006138
 8003e84:	e000ed00 	.word	0xe000ed00
 8003e88:	05fa0004 	.word	0x05fa0004
 8003e8c:	2000089e 	.word	0x2000089e
 8003e90:	200002d5 	.word	0x200002d5

08003e94 <GetDateString>:
/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
*/
char *GetDateString(void)
{
 8003e94:	b530      	push	{r4, r5, lr}
 8003e96:	b083      	sub	sp, #12
  static const char formatDateStr[] = "%s %02d/%02d/%04d";
  char *buffer = malloc(30 * sizeof(int8_t));
 8003e98:	201e      	movs	r0, #30
 8003e9a:	f00f fbfd 	bl	8013698 <malloc>
 8003e9e:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 8003ea0:	221e      	movs	r2, #30
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f00f fc23 	bl	80136ee <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 8003ea8:	4908      	ldr	r1, [pc, #32]	; (8003ecc <GetDateString+0x38>)
 8003eaa:	7d0a      	ldrb	r2, [r1, #20]
 8003eac:	3a01      	subs	r2, #1
 8003eae:	7d8b      	ldrb	r3, [r1, #22]
 8003eb0:	7d48      	ldrb	r0, [r1, #21]
 8003eb2:	8b09      	ldrh	r1, [r1, #24]
 8003eb4:	0092      	lsls	r2, r2, #2
 8003eb6:	4d06      	ldr	r5, [pc, #24]	; (8003ed0 <GetDateString+0x3c>)
 8003eb8:	5952      	ldr	r2, [r2, r5]
 8003eba:	9101      	str	r1, [sp, #4]
 8003ebc:	9000      	str	r0, [sp, #0]
 8003ebe:	4905      	ldr	r1, [pc, #20]	; (8003ed4 <GetDateString+0x40>)
 8003ec0:	0020      	movs	r0, r4
 8003ec2:	f010 fba5 	bl	8014610 <siprintf>
  return buffer;
}
 8003ec6:	0020      	movs	r0, r4
 8003ec8:	b003      	add	sp, #12
 8003eca:	bd30      	pop	{r4, r5, pc}
 8003ecc:	20006138 	.word	0x20006138
 8003ed0:	0801894c 	.word	0x0801894c
 8003ed4:	080188ac 	.word	0x080188ac

08003ed8 <Bridge>:
/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
*/
BOS_Status Bridge(uint8_t port1, uint8_t port2)
{
 8003ed8:	b500      	push	{lr}
 8003eda:	b085      	sub	sp, #20
 8003edc:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <Bridge+0x24>)
 8003ee0:	7819      	ldrb	r1, [r3, #0]
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	9303      	str	r3, [sp, #12]
 8003ee6:	3b02      	subs	r3, #2
 8003ee8:	9302      	str	r3, [sp, #8]
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	3303      	adds	r3, #3
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	000b      	movs	r3, r1
 8003ef2:	f004 fcf9 	bl	80088e8 <StartScastDMAStream>
}
 8003ef6:	b005      	add	sp, #20
 8003ef8:	bd00      	pop	{pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	2000089e 	.word	0x2000089e

08003f00 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
*/
BOS_Status Unbridge(uint8_t port1, uint8_t port2)
{		
 8003f00:	b530      	push	{r4, r5, lr}
 8003f02:	b087      	sub	sp, #28
 8003f04:	0005      	movs	r5, r0
 8003f06:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8003f08:	2300      	movs	r3, #0
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	9303      	str	r3, [sp, #12]
 8003f0e:	9302      	str	r3, [sp, #8]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2100      	movs	r1, #0
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7fe fe61 	bl	8002be0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 8003f1e:	1e6a      	subs	r2, r5, #1
 8003f20:	00d3      	lsls	r3, r2, #3
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <Unbridge+0x7c>)
 8003f28:	589a      	ldr	r2, [r3, r2]
 8003f2a:	2a00      	cmp	r2, #0
 8003f2c:	d007      	beq.n	8003f3e <Unbridge+0x3e>
 8003f2e:	1e61      	subs	r1, r4, #1
 8003f30:	00cb      	lsls	r3, r1, #3
 8003f32:	1a5b      	subs	r3, r3, r1
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4911      	ldr	r1, [pc, #68]	; (8003f7c <Unbridge+0x7c>)
 8003f38:	585b      	ldr	r3, [r3, r1]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <Unbridge+0x5e>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
	else if (streamDMA[port1-1].Instance != 0)
 8003f3e:	2a00      	cmp	r2, #0
 8003f40:	d115      	bne.n	8003f6e <Unbridge+0x6e>
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
	else if (streamDMA[port2-1].Instance != 0)
 8003f42:	1e62      	subs	r2, r4, #1
 8003f44:	00d3      	lsls	r3, r2, #3
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <Unbridge+0x7c>)
 8003f4c:	589b      	ldr	r3, [r3, r2]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d012      	beq.n	8003f78 <Unbridge+0x78>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 8003f52:	0020      	movs	r0, r4
 8003f54:	f002 fe86 	bl	8006c64 <SwitchStreamDMAToMsg>
 8003f58:	2000      	movs	r0, #0
	else {return BOS_ERR_WrongValue;}
}
 8003f5a:	b007      	add	sp, #28
 8003f5c:	bd30      	pop	{r4, r5, pc}
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8003f5e:	0028      	movs	r0, r5
 8003f60:	f002 fe80 	bl	8006c64 <SwitchStreamDMAToMsg>
 8003f64:	0020      	movs	r0, r4
 8003f66:	f002 fe7d 	bl	8006c64 <SwitchStreamDMAToMsg>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	e7f5      	b.n	8003f5a <Unbridge+0x5a>
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 8003f6e:	0028      	movs	r0, r5
 8003f70:	f002 fe78 	bl	8006c64 <SwitchStreamDMAToMsg>
 8003f74:	2000      	movs	r0, #0
 8003f76:	e7f0      	b.n	8003f5a <Unbridge+0x5a>
	else {return BOS_ERR_WrongValue;}
 8003f78:	2068      	movs	r0, #104	; 0x68
 8003f7a:	e7ee      	b.n	8003f5a <Unbridge+0x5a>
 8003f7c:	20001134 	.word	0x20001134

08003f80 <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8003f80:	b530      	push	{r4, r5, lr}
	for(int i = 0; string[i]; i++){
 8003f82:	2200      	movs	r2, #0
 8003f84:	e001      	b.n	8003f8a <StringToLowerCase+0xa>
		string[i] = tolower(string[i]);
 8003f86:	7023      	strb	r3, [r4, #0]
	for(int i = 0; string[i]; i++){
 8003f88:	3201      	adds	r2, #1
 8003f8a:	1884      	adds	r4, r0, r2
 8003f8c:	5c83      	ldrb	r3, [r0, r2]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <StringToLowerCase+0x22>
		string[i] = tolower(string[i]);
 8003f92:	4904      	ldr	r1, [pc, #16]	; (8003fa4 <StringToLowerCase+0x24>)
 8003f94:	5ccd      	ldrb	r5, [r1, r3]
 8003f96:	2103      	movs	r1, #3
 8003f98:	4029      	ands	r1, r5
 8003f9a:	2901      	cmp	r1, #1
 8003f9c:	d1f3      	bne.n	8003f86 <StringToLowerCase+0x6>
 8003f9e:	3320      	adds	r3, #32
 8003fa0:	e7f1      	b.n	8003f86 <StringToLowerCase+0x6>
	}
}
 8003fa2:	bd30      	pop	{r4, r5, pc}
 8003fa4:	0801b719 	.word	0x0801b719

08003fa8 <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003faa:	46ce      	mov	lr, r9
 8003fac:	4647      	mov	r7, r8
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b089      	sub	sp, #36	; 0x24
 8003fb2:	0004      	movs	r4, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8003fb4:	4bdb      	ldr	r3, [pc, #876]	; (8004324 <ParseSnippetCondition+0x37c>)
 8003fb6:	781d      	ldrb	r5, [r3, #0]
 8003fb8:	2d05      	cmp	r5, #5
 8003fba:	d100      	bne.n	8003fbe <ParseSnippetCondition+0x16>
 8003fbc:	e215      	b.n	80043ea <ParseSnippetCondition+0x442>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 8003fbe:	48da      	ldr	r0, [pc, #872]	; (8004328 <ParseSnippetCondition+0x380>)
 8003fc0:	00ab      	lsls	r3, r5, #2
 8003fc2:	195a      	adds	r2, r3, r5
 8003fc4:	0092      	lsls	r2, r2, #2
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5411      	strb	r1, [r2, r0]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8003fca:	1880      	adds	r0, r0, r2
 8003fcc:	7041      	strb	r1, [r0, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8003fce:	3002      	adds	r0, #2
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	f00f fb8c 	bl	80136ee <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8003fd6:	7823      	ldrb	r3, [r4, #0]
 8003fd8:	2b62      	cmp	r3, #98	; 0x62
 8003fda:	d102      	bne.n	8003fe2 <ParseSnippetCondition+0x3a>
 8003fdc:	78a3      	ldrb	r3, [r4, #2]
 8003fde:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe0:	d056      	beq.n	8004090 <ParseSnippetCondition+0xe8>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 8003fe2:	4dd2      	ldr	r5, [pc, #840]	; (800432c <ParseSnippetCondition+0x384>)
 8003fe4:	0021      	movs	r1, r4
 8003fe6:	0028      	movs	r0, r5
 8003fe8:	f010 fb4d 	bl	8014686 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8003fec:	4ed0      	ldr	r6, [pc, #832]	; (8004330 <ParseSnippetCondition+0x388>)
 8003fee:	0031      	movs	r1, r6
 8003ff0:	0028      	movs	r0, r5
 8003ff2:	f011 f9c7 	bl	8015384 <strtok>
 8003ff6:	0004      	movs	r4, r0
		secondPart = strtok ( NULL, " ");
 8003ff8:	0031      	movs	r1, r6
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f011 f9c2 	bl	8015384 <strtok>
 8004000:	0005      	movs	r5, r0
		thirdPart = strtok ( NULL, " ");
 8004002:	0031      	movs	r1, r6
 8004004:	2000      	movs	r0, #0
 8004006:	f011 f9bd 	bl	8015384 <strtok>
 800400a:	0006      	movs	r6, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 800400c:	2c00      	cmp	r4, #0
 800400e:	d100      	bne.n	8004012 <ParseSnippetCondition+0x6a>
 8004010:	e1ef      	b.n	80043f2 <ParseSnippetCondition+0x44a>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8004012:	0020      	movs	r0, r4
 8004014:	f7ff f808 	bl	8003028 <IsModuleParameter>
 8004018:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 800401a:	d002      	beq.n	8004022 <ParseSnippetCondition+0x7a>
 800401c:	2d00      	cmp	r5, #0
 800401e:	d100      	bne.n	8004022 <ParseSnippetCondition+0x7a>
 8004020:	e1b5      	b.n	800438e <ParseSnippetCondition+0x3e6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			} 
			else if (secondPart != NULL && thirdPart != NULL) 
 8004022:	2d00      	cmp	r5, #0
 8004024:	d100      	bne.n	8004028 <ParseSnippetCondition+0x80>
 8004026:	e1e6      	b.n	80043f6 <ParseSnippetCondition+0x44e>
 8004028:	2e00      	cmp	r6, #0
 800402a:	d100      	bne.n	800402e <ParseSnippetCondition+0x86>
 800402c:	e1e5      	b.n	80043fa <ParseSnippetCondition+0x452>
			{
				modPar2 = IsModuleParameter(thirdPart);
 800402e:	0030      	movs	r0, r6
 8004030:	f7fe fffa 	bl	8003028 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8004034:	2800      	cmp	r0, #0
 8004036:	d100      	bne.n	800403a <ParseSnippetCondition+0x92>
 8004038:	e1ba      	b.n	80043b0 <ParseSnippetCondition+0x408>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 800403a:	4bba      	ldr	r3, [pc, #744]	; (8004324 <ParseSnippetCondition+0x37c>)
 800403c:	781e      	ldrb	r6, [r3, #0]
 800403e:	4aba      	ldr	r2, [pc, #744]	; (8004328 <ParseSnippetCondition+0x380>)
 8004040:	00b3      	lsls	r3, r6, #2
 8004042:	1999      	adds	r1, r3, r6
 8004044:	0089      	lsls	r1, r1, #2
 8004046:	2704      	movs	r7, #4
 8004048:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 800404a:	1999      	adds	r1, r3, r6
 800404c:	0089      	lsls	r1, r1, #2
 800404e:	1851      	adds	r1, r2, r1
 8004050:	70cc      	strb	r4, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8004052:	71c8      	strb	r0, [r1, #7]
					// Extract the constant
					float constant = atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}				
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8004054:	4cb3      	ldr	r4, [pc, #716]	; (8004324 <ParseSnippetCondition+0x37c>)
 8004056:	7826      	ldrb	r6, [r4, #0]
 8004058:	0028      	movs	r0, r5
 800405a:	f7fe ffff 	bl	800305c <IsMathOperator>
 800405e:	4ab2      	ldr	r2, [pc, #712]	; (8004328 <ParseSnippetCondition+0x380>)
 8004060:	00b3      	lsls	r3, r6, #2
 8004062:	199b      	adds	r3, r3, r6
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	18d3      	adds	r3, r2, r3
 8004068:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 800406a:	7821      	ldrb	r1, [r4, #0]
 800406c:	008b      	lsls	r3, r1, #2
 800406e:	185b      	adds	r3, r3, r1
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	18d3      	adds	r3, r2, r3
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d100      	bne.n	800407c <ParseSnippetCondition+0xd4>
 800407a:	e1c0      	b.n	80043fe <ParseSnippetCondition+0x456>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
 800407c:	3101      	adds	r1, #1
 800407e:	4ba9      	ldr	r3, [pc, #676]	; (8004324 <ParseSnippetCondition+0x37c>)
 8004080:	7019      	strb	r1, [r3, #0]
				return BOS_OK;				
 8004082:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004084:	0030      	movs	r0, r6
 8004086:	b009      	add	sp, #36	; 0x24
 8004088:	bcc0      	pop	{r6, r7}
 800408a:	46b9      	mov	r9, r7
 800408c:	46b0      	mov	r8, r6
 800408e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004090:	7867      	ldrb	r7, [r4, #1]
 8004092:	3f30      	subs	r7, #48	; 0x30
 8004094:	b2ff      	uxtb	r7, r7
 8004096:	2f05      	cmp	r7, #5
 8004098:	d900      	bls.n	800409c <ParseSnippetCondition+0xf4>
 800409a:	e1a8      	b.n	80043ee <ParseSnippetCondition+0x446>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 800409c:	4aa2      	ldr	r2, [pc, #648]	; (8004328 <ParseSnippetCondition+0x380>)
 800409e:	00ab      	lsls	r3, r5, #2
 80040a0:	1959      	adds	r1, r3, r5
 80040a2:	0089      	lsls	r1, r1, #2
 80040a4:	2001      	movs	r0, #1
 80040a6:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 80040a8:	1853      	adds	r3, r2, r1
 80040aa:	2200      	movs	r2, #0
 80040ac:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 80040ae:	709f      	strb	r7, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 80040b0:	1ce6      	adds	r6, r4, #3
 80040b2:	3207      	adds	r2, #7
 80040b4:	499f      	ldr	r1, [pc, #636]	; (8004334 <ParseSnippetCondition+0x38c>)
 80040b6:	0030      	movs	r0, r6
 80040b8:	f010 faed 	bl	8014696 <strncmp>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d124      	bne.n	800410a <ParseSnippetCondition+0x162>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 80040c0:	00ab      	lsls	r3, r5, #2
 80040c2:	195d      	adds	r5, r3, r5
 80040c4:	00ad      	lsls	r5, r5, #2
 80040c6:	4b98      	ldr	r3, [pc, #608]	; (8004328 <ParseSnippetCondition+0x380>)
 80040c8:	195d      	adds	r5, r3, r5
 80040ca:	2305      	movs	r3, #5
 80040cc:	70eb      	strb	r3, [r5, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 80040ce:	00fa      	lsls	r2, r7, #3
 80040d0:	19d2      	adds	r2, r2, r7
 80040d2:	4b99      	ldr	r3, [pc, #612]	; (8004338 <ParseSnippetCondition+0x390>)
 80040d4:	189b      	adds	r3, r3, r2
 80040d6:	7a1b      	ldrb	r3, [r3, #8]
 80040d8:	2201      	movs	r2, #1
 80040da:	0016      	movs	r6, r2
 80040dc:	401e      	ands	r6, r3
 80040de:	421a      	tst	r2, r3
 80040e0:	d005      	beq.n	80040ee <ParseSnippetCondition+0x146>
				status = BOS_OK;
 80040e2:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80040e4:	4a8f      	ldr	r2, [pc, #572]	; (8004324 <ParseSnippetCondition+0x37c>)
 80040e6:	7813      	ldrb	r3, [r2, #0]
 80040e8:	3301      	adds	r3, #1
 80040ea:	7013      	strb	r3, [r2, #0]
 80040ec:	e7ca      	b.n	8004084 <ParseSnippetCondition+0xdc>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80040ee:	2301      	movs	r3, #1
 80040f0:	9305      	str	r3, [sp, #20]
 80040f2:	2300      	movs	r3, #0
 80040f4:	9304      	str	r3, [sp, #16]
 80040f6:	9303      	str	r3, [sp, #12]
 80040f8:	9302      	str	r3, [sp, #8]
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	2101      	movs	r1, #1
 8004102:	0038      	movs	r0, r7
 8004104:	f003 ff12 	bl	8007f2c <SetButtonEvents>
 8004108:	e7ec      	b.n	80040e4 <ParseSnippetCondition+0x13c>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 800410a:	220e      	movs	r2, #14
 800410c:	498b      	ldr	r1, [pc, #556]	; (800433c <ParseSnippetCondition+0x394>)
 800410e:	0030      	movs	r0, r6
 8004110:	f010 fac1 	bl	8014696 <strncmp>
 8004114:	2800      	cmp	r0, #0
 8004116:	d120      	bne.n	800415a <ParseSnippetCondition+0x1b2>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8004118:	00ab      	lsls	r3, r5, #2
 800411a:	195d      	adds	r5, r3, r5
 800411c:	00ad      	lsls	r5, r5, #2
 800411e:	4b82      	ldr	r3, [pc, #520]	; (8004328 <ParseSnippetCondition+0x380>)
 8004120:	195d      	adds	r5, r3, r5
 8004122:	2306      	movs	r3, #6
 8004124:	70eb      	strb	r3, [r5, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004126:	00fa      	lsls	r2, r7, #3
 8004128:	19d2      	adds	r2, r2, r7
 800412a:	4b83      	ldr	r3, [pc, #524]	; (8004338 <ParseSnippetCondition+0x390>)
 800412c:	189b      	adds	r3, r3, r2
 800412e:	7a1b      	ldrb	r3, [r3, #8]
 8004130:	2202      	movs	r2, #2
 8004132:	0016      	movs	r6, r2
 8004134:	401e      	ands	r6, r3
 8004136:	421a      	tst	r2, r3
 8004138:	d001      	beq.n	800413e <ParseSnippetCondition+0x196>
				status = BOS_OK;					
 800413a:	2600      	movs	r6, #0
 800413c:	e7d2      	b.n	80040e4 <ParseSnippetCondition+0x13c>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 800413e:	2301      	movs	r3, #1
 8004140:	9305      	str	r3, [sp, #20]
 8004142:	2300      	movs	r3, #0
 8004144:	9304      	str	r3, [sp, #16]
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	9302      	str	r3, [sp, #8]
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	3a01      	subs	r2, #1
 8004150:	2100      	movs	r1, #0
 8004152:	0038      	movs	r0, r7
 8004154:	f003 feea 	bl	8007f2c <SetButtonEvents>
 8004158:	e7c4      	b.n	80040e4 <ParseSnippetCondition+0x13c>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 800415a:	220c      	movs	r2, #12
 800415c:	4978      	ldr	r1, [pc, #480]	; (8004340 <ParseSnippetCondition+0x398>)
 800415e:	0030      	movs	r0, r6
 8004160:	f010 fa99 	bl	8014696 <strncmp>
 8004164:	2800      	cmp	r0, #0
 8004166:	d17b      	bne.n	8004260 <ParseSnippetCondition+0x2b8>
				if (!button[port].pressedX1Sec) {	
 8004168:	00fa      	lsls	r2, r7, #3
 800416a:	19d2      	adds	r2, r2, r7
 800416c:	4b72      	ldr	r3, [pc, #456]	; (8004338 <ParseSnippetCondition+0x390>)
 800416e:	189b      	adds	r3, r3, r2
 8004170:	789e      	ldrb	r6, [r3, #2]
 8004172:	2e00      	cmp	r6, #0
 8004174:	d00f      	beq.n	8004196 <ParseSnippetCondition+0x1ee>
				} else if (!button[port].pressedX2Sec) {	
 8004176:	00fa      	lsls	r2, r7, #3
 8004178:	19d2      	adds	r2, r2, r7
 800417a:	4b6f      	ldr	r3, [pc, #444]	; (8004338 <ParseSnippetCondition+0x390>)
 800417c:	189b      	adds	r3, r3, r2
 800417e:	78de      	ldrb	r6, [r3, #3]
 8004180:	2e00      	cmp	r6, #0
 8004182:	d029      	beq.n	80041d8 <ParseSnippetCondition+0x230>
				} else if (!button[port].pressedX3Sec) {	
 8004184:	00fa      	lsls	r2, r7, #3
 8004186:	19d2      	adds	r2, r2, r7
 8004188:	4b6b      	ldr	r3, [pc, #428]	; (8004338 <ParseSnippetCondition+0x390>)
 800418a:	189b      	adds	r3, r3, r2
 800418c:	791e      	ldrb	r6, [r3, #4]
 800418e:	2e00      	cmp	r6, #0
 8004190:	d044      	beq.n	800421c <ParseSnippetCondition+0x274>
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004192:	260c      	movs	r6, #12
 8004194:	e7a6      	b.n	80040e4 <ParseSnippetCondition+0x13c>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8004196:	4b64      	ldr	r3, [pc, #400]	; (8004328 <ParseSnippetCondition+0x380>)
 8004198:	4698      	mov	r8, r3
 800419a:	00ab      	lsls	r3, r5, #2
 800419c:	195b      	adds	r3, r3, r5
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4443      	add	r3, r8
 80041a2:	2209      	movs	r2, #9
 80041a4:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80041a6:	0020      	movs	r0, r4
 80041a8:	300f      	adds	r0, #15
 80041aa:	f00f fa44 	bl	8013636 <atoi>
 80041ae:	4b5d      	ldr	r3, [pc, #372]	; (8004324 <ParseSnippetCondition+0x37c>)
 80041b0:	7819      	ldrb	r1, [r3, #0]
 80041b2:	b2c3      	uxtb	r3, r0
 80041b4:	008a      	lsls	r2, r1, #2
 80041b6:	1852      	adds	r2, r2, r1
 80041b8:	0092      	lsls	r2, r2, #2
 80041ba:	4442      	add	r2, r8
 80041bc:	7113      	strb	r3, [r2, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80041be:	2201      	movs	r2, #1
 80041c0:	9205      	str	r2, [sp, #20]
 80041c2:	2200      	movs	r2, #0
 80041c4:	9204      	str	r2, [sp, #16]
 80041c6:	9203      	str	r2, [sp, #12]
 80041c8:	9202      	str	r2, [sp, #8]
 80041ca:	9201      	str	r2, [sp, #4]
 80041cc:	9200      	str	r2, [sp, #0]
 80041ce:	2100      	movs	r1, #0
 80041d0:	0038      	movs	r0, r7
 80041d2:	f003 feab 	bl	8007f2c <SetButtonEvents>
					status = BOS_OK;
 80041d6:	e785      	b.n	80040e4 <ParseSnippetCondition+0x13c>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 80041d8:	4b53      	ldr	r3, [pc, #332]	; (8004328 <ParseSnippetCondition+0x380>)
 80041da:	4698      	mov	r8, r3
 80041dc:	00ab      	lsls	r3, r5, #2
 80041de:	195b      	adds	r3, r3, r5
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4443      	add	r3, r8
 80041e4:	220a      	movs	r2, #10
 80041e6:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80041e8:	0020      	movs	r0, r4
 80041ea:	300f      	adds	r0, #15
 80041ec:	f00f fa23 	bl	8013636 <atoi>
 80041f0:	4b4c      	ldr	r3, [pc, #304]	; (8004324 <ParseSnippetCondition+0x37c>)
 80041f2:	781a      	ldrb	r2, [r3, #0]
 80041f4:	b2c0      	uxtb	r0, r0
 80041f6:	0093      	lsls	r3, r2, #2
 80041f8:	189b      	adds	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4443      	add	r3, r8
 80041fe:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004200:	2301      	movs	r3, #1
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	2300      	movs	r3, #0
 8004206:	9304      	str	r3, [sp, #16]
 8004208:	9303      	str	r3, [sp, #12]
 800420a:	9302      	str	r3, [sp, #8]
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	9000      	str	r0, [sp, #0]
 8004210:	2200      	movs	r2, #0
 8004212:	2100      	movs	r1, #0
 8004214:	0038      	movs	r0, r7
 8004216:	f003 fe89 	bl	8007f2c <SetButtonEvents>
					status = BOS_OK;		
 800421a:	e763      	b.n	80040e4 <ParseSnippetCondition+0x13c>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 800421c:	4b42      	ldr	r3, [pc, #264]	; (8004328 <ParseSnippetCondition+0x380>)
 800421e:	4698      	mov	r8, r3
 8004220:	00ab      	lsls	r3, r5, #2
 8004222:	195b      	adds	r3, r3, r5
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4443      	add	r3, r8
 8004228:	220b      	movs	r2, #11
 800422a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 800422c:	0020      	movs	r0, r4
 800422e:	300f      	adds	r0, #15
 8004230:	f00f fa01 	bl	8013636 <atoi>
 8004234:	4b3b      	ldr	r3, [pc, #236]	; (8004324 <ParseSnippetCondition+0x37c>)
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	b2c0      	uxtb	r0, r0
 800423a:	0093      	lsls	r3, r2, #2
 800423c:	189b      	adds	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4443      	add	r3, r8
 8004242:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004244:	2301      	movs	r3, #1
 8004246:	9305      	str	r3, [sp, #20]
 8004248:	2300      	movs	r3, #0
 800424a:	9304      	str	r3, [sp, #16]
 800424c:	9303      	str	r3, [sp, #12]
 800424e:	9302      	str	r3, [sp, #8]
 8004250:	9001      	str	r0, [sp, #4]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2200      	movs	r2, #0
 8004256:	2100      	movs	r1, #0
 8004258:	0038      	movs	r0, r7
 800425a:	f003 fe67 	bl	8007f2c <SetButtonEvents>
					status = BOS_OK;	
 800425e:	e741      	b.n	80040e4 <ParseSnippetCondition+0x13c>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004260:	220d      	movs	r2, #13
 8004262:	4938      	ldr	r1, [pc, #224]	; (8004344 <ParseSnippetCondition+0x39c>)
 8004264:	0030      	movs	r0, r6
 8004266:	f010 fa16 	bl	8014696 <strncmp>
 800426a:	2800      	cmp	r0, #0
 800426c:	d000      	beq.n	8004270 <ParseSnippetCondition+0x2c8>
 800426e:	e08c      	b.n	800438a <ParseSnippetCondition+0x3e2>
				if (!button[port].releasedY1Sec) {	
 8004270:	00fa      	lsls	r2, r7, #3
 8004272:	19d2      	adds	r2, r2, r7
 8004274:	4b30      	ldr	r3, [pc, #192]	; (8004338 <ParseSnippetCondition+0x390>)
 8004276:	189b      	adds	r3, r3, r2
 8004278:	795e      	ldrb	r6, [r3, #5]
 800427a:	2e00      	cmp	r6, #0
 800427c:	d00f      	beq.n	800429e <ParseSnippetCondition+0x2f6>
				} else if (!button[port].releasedY2Sec) {	
 800427e:	00fa      	lsls	r2, r7, #3
 8004280:	19d2      	adds	r2, r2, r7
 8004282:	4b2d      	ldr	r3, [pc, #180]	; (8004338 <ParseSnippetCondition+0x390>)
 8004284:	189b      	adds	r3, r3, r2
 8004286:	799e      	ldrb	r6, [r3, #6]
 8004288:	2e00      	cmp	r6, #0
 800428a:	d02a      	beq.n	80042e2 <ParseSnippetCondition+0x33a>
				} else if (!button[port].releasedY3Sec) {	
 800428c:	00fa      	lsls	r2, r7, #3
 800428e:	19d2      	adds	r2, r2, r7
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <ParseSnippetCondition+0x390>)
 8004292:	189b      	adds	r3, r3, r2
 8004294:	79de      	ldrb	r6, [r3, #7]
 8004296:	2e00      	cmp	r6, #0
 8004298:	d056      	beq.n	8004348 <ParseSnippetCondition+0x3a0>
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 800429a:	260d      	movs	r6, #13
 800429c:	e722      	b.n	80040e4 <ParseSnippetCondition+0x13c>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 800429e:	4b22      	ldr	r3, [pc, #136]	; (8004328 <ParseSnippetCondition+0x380>)
 80042a0:	4698      	mov	r8, r3
 80042a2:	00ab      	lsls	r3, r5, #2
 80042a4:	195b      	adds	r3, r3, r5
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4443      	add	r3, r8
 80042aa:	220c      	movs	r2, #12
 80042ac:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 80042ae:	0020      	movs	r0, r4
 80042b0:	3010      	adds	r0, #16
 80042b2:	f00f f9c0 	bl	8013636 <atoi>
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <ParseSnippetCondition+0x37c>)
 80042b8:	781a      	ldrb	r2, [r3, #0]
 80042ba:	b2c0      	uxtb	r0, r0
 80042bc:	0093      	lsls	r3, r2, #2
 80042be:	189b      	adds	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4443      	add	r3, r8
 80042c4:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 80042c6:	2301      	movs	r3, #1
 80042c8:	9305      	str	r3, [sp, #20]
 80042ca:	2300      	movs	r3, #0
 80042cc:	9304      	str	r3, [sp, #16]
 80042ce:	9303      	str	r3, [sp, #12]
 80042d0:	9002      	str	r0, [sp, #8]
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2200      	movs	r2, #0
 80042d8:	2100      	movs	r1, #0
 80042da:	0038      	movs	r0, r7
 80042dc:	f003 fe26 	bl	8007f2c <SetButtonEvents>
					status = BOS_OK;
 80042e0:	e700      	b.n	80040e4 <ParseSnippetCondition+0x13c>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <ParseSnippetCondition+0x380>)
 80042e4:	4698      	mov	r8, r3
 80042e6:	2314      	movs	r3, #20
 80042e8:	4699      	mov	r9, r3
 80042ea:	435d      	muls	r5, r3
 80042ec:	4445      	add	r5, r8
 80042ee:	3b07      	subs	r3, #7
 80042f0:	70eb      	strb	r3, [r5, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 80042f2:	0020      	movs	r0, r4
 80042f4:	3010      	adds	r0, #16
 80042f6:	f00f f99e 	bl	8013636 <atoi>
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <ParseSnippetCondition+0x37c>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b2c0      	uxtb	r0, r0
 8004300:	464a      	mov	r2, r9
 8004302:	4353      	muls	r3, r2
 8004304:	4443      	add	r3, r8
 8004306:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8004308:	2301      	movs	r3, #1
 800430a:	9305      	str	r3, [sp, #20]
 800430c:	2100      	movs	r1, #0
 800430e:	9104      	str	r1, [sp, #16]
 8004310:	9003      	str	r0, [sp, #12]
 8004312:	9102      	str	r1, [sp, #8]
 8004314:	9101      	str	r1, [sp, #4]
 8004316:	9100      	str	r1, [sp, #0]
 8004318:	000b      	movs	r3, r1
 800431a:	000a      	movs	r2, r1
 800431c:	0038      	movs	r0, r7
 800431e:	f003 fe05 	bl	8007f2c <SetButtonEvents>
					status = BOS_OK;		
 8004322:	e6df      	b.n	80040e4 <ParseSnippetCondition+0x13c>
 8004324:	20000a3f 	.word	0x20000a3f
 8004328:	20006154 	.word	0x20006154
 800432c:	200009a4 	.word	0x200009a4
 8004330:	08018550 	.word	0x08018550
 8004334:	080190fc 	.word	0x080190fc
 8004338:	20000ce4 	.word	0x20000ce4
 800433c:	08018968 	.word	0x08018968
 8004340:	08018978 	.word	0x08018978
 8004344:	08018988 	.word	0x08018988
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8004348:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <ParseSnippetCondition+0x45c>)
 800434a:	4698      	mov	r8, r3
 800434c:	2314      	movs	r3, #20
 800434e:	4699      	mov	r9, r3
 8004350:	435d      	muls	r5, r3
 8004352:	4445      	add	r5, r8
 8004354:	3b06      	subs	r3, #6
 8004356:	70eb      	strb	r3, [r5, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004358:	0020      	movs	r0, r4
 800435a:	3010      	adds	r0, #16
 800435c:	f00f f96b 	bl	8013636 <atoi>
 8004360:	4b29      	ldr	r3, [pc, #164]	; (8004408 <ParseSnippetCondition+0x460>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2c0      	uxtb	r0, r0
 8004366:	464a      	mov	r2, r9
 8004368:	4353      	muls	r3, r2
 800436a:	4443      	add	r3, r8
 800436c:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 800436e:	2301      	movs	r3, #1
 8004370:	9305      	str	r3, [sp, #20]
 8004372:	9004      	str	r0, [sp, #16]
 8004374:	2100      	movs	r1, #0
 8004376:	9103      	str	r1, [sp, #12]
 8004378:	9102      	str	r1, [sp, #8]
 800437a:	9101      	str	r1, [sp, #4]
 800437c:	9100      	str	r1, [sp, #0]
 800437e:	000b      	movs	r3, r1
 8004380:	000a      	movs	r2, r1
 8004382:	0038      	movs	r0, r7
 8004384:	f003 fdd2 	bl	8007f2c <SetButtonEvents>
					status = BOS_OK;	
 8004388:	e6ac      	b.n	80040e4 <ParseSnippetCondition+0x13c>
	BOS_Status status = BOS_OK;
 800438a:	2600      	movs	r6, #0
 800438c:	e6aa      	b.n	80040e4 <ParseSnippetCondition+0x13c>
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 800438e:	2e00      	cmp	r6, #0
 8004390:	d000      	beq.n	8004394 <ParseSnippetCondition+0x3ec>
 8004392:	e646      	b.n	8004022 <ParseSnippetCondition+0x7a>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 8004394:	4d1c      	ldr	r5, [pc, #112]	; (8004408 <ParseSnippetCondition+0x460>)
 8004396:	782b      	ldrb	r3, [r5, #0]
 8004398:	491a      	ldr	r1, [pc, #104]	; (8004404 <ParseSnippetCondition+0x45c>)
 800439a:	009a      	lsls	r2, r3, #2
 800439c:	18d0      	adds	r0, r2, r3
 800439e:	0080      	lsls	r0, r0, #2
 80043a0:	3602      	adds	r6, #2
 80043a2:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 80043a4:	180a      	adds	r2, r1, r0
 80043a6:	70d4      	strb	r4, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 80043a8:	3301      	adds	r3, #1
 80043aa:	702b      	strb	r3, [r5, #0]
				return BOS_OK;
 80043ac:	2600      	movs	r6, #0
 80043ae:	e669      	b.n	8004084 <ParseSnippetCondition+0xdc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 80043b0:	4b15      	ldr	r3, [pc, #84]	; (8004408 <ParseSnippetCondition+0x460>)
 80043b2:	4698      	mov	r8, r3
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	4f13      	ldr	r7, [pc, #76]	; (8004404 <ParseSnippetCondition+0x45c>)
 80043b8:	0093      	lsls	r3, r2, #2
 80043ba:	1899      	adds	r1, r3, r2
 80043bc:	0089      	lsls	r1, r1, #2
 80043be:	2003      	movs	r0, #3
 80043c0:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 80043c2:	187b      	adds	r3, r7, r1
 80043c4:	70dc      	strb	r4, [r3, #3]
					float constant = atof(thirdPart);
 80043c6:	0030      	movs	r0, r6
 80043c8:	f00f f930 	bl	801362c <atof>
 80043cc:	f7fe f8aa 	bl	8002524 <__aeabi_d2f>
 80043d0:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80043d2:	4643      	mov	r3, r8
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	0098      	lsls	r0, r3, #2
 80043d8:	18c0      	adds	r0, r0, r3
 80043da:	0080      	lsls	r0, r0, #2
 80043dc:	19c0      	adds	r0, r0, r7
 80043de:	3006      	adds	r0, #6
 80043e0:	2204      	movs	r2, #4
 80043e2:	a907      	add	r1, sp, #28
 80043e4:	f00f f97a 	bl	80136dc <memcpy>
 80043e8:	e634      	b.n	8004054 <ParseSnippetCondition+0xac>
		return BOS_ERR_SNIP_MEM_FULL;
 80043ea:	260e      	movs	r6, #14
 80043ec:	e64a      	b.n	8004084 <ParseSnippetCondition+0xdc>
	BOS_Status status = BOS_OK;
 80043ee:	2600      	movs	r6, #0
 80043f0:	e648      	b.n	8004084 <ParseSnippetCondition+0xdc>
			return BOS_ERR_WrongParam;
 80043f2:	2667      	movs	r6, #103	; 0x67
 80043f4:	e646      	b.n	8004084 <ParseSnippetCondition+0xdc>
				return BOS_ERR_WrongParam;
 80043f6:	2667      	movs	r6, #103	; 0x67
 80043f8:	e644      	b.n	8004084 <ParseSnippetCondition+0xdc>
 80043fa:	2667      	movs	r6, #103	; 0x67
 80043fc:	e642      	b.n	8004084 <ParseSnippetCondition+0xdc>
					return BOS_ERR_WrongParam;
 80043fe:	2667      	movs	r6, #103	; 0x67
 8004400:	e640      	b.n	8004084 <ParseSnippetCondition+0xdc>
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	20006154 	.word	0x20006154
 8004408:	20000a3f 	.word	0x20000a3f

0800440c <AddSnippet>:
{
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	000c      	movs	r4, r1
	switch (code)
 8004410:	2802      	cmp	r0, #2
 8004412:	d017      	beq.n	8004444 <AddSnippet+0x38>
 8004414:	2803      	cmp	r0, #3
 8004416:	d003      	beq.n	8004420 <AddSnippet+0x14>
 8004418:	2801      	cmp	r0, #1
 800441a:	d00f      	beq.n	800443c <AddSnippet+0x30>
 800441c:	2000      	movs	r0, #0
}
 800441e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets-1].state = true;
 8004420:	4b35      	ldr	r3, [pc, #212]	; (80044f8 <AddSnippet+0xec>)
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	3a01      	subs	r2, #1
 8004426:	0093      	lsls	r3, r2, #2
 8004428:	189b      	adds	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4a33      	ldr	r2, [pc, #204]	; (80044fc <AddSnippet+0xf0>)
 800442e:	18d3      	adds	r3, r2, r3
 8004430:	2201      	movs	r2, #1
 8004432:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004434:	f006 fdf2 	bl	800b01c <SaveToRO>
	return BOS_OK;
 8004438:	2000      	movs	r0, #0
			break;
 800443a:	e7f0      	b.n	800441e <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 800443c:	0008      	movs	r0, r1
 800443e:	f7ff fdb3 	bl	8003fa8 <ParseSnippetCondition>
 8004442:	e7ec      	b.n	800441e <AddSnippet+0x12>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8004444:	4b2c      	ldr	r3, [pc, #176]	; (80044f8 <AddSnippet+0xec>)
 8004446:	781d      	ldrb	r5, [r3, #0]
 8004448:	3d01      	subs	r5, #1
 800444a:	00ab      	lsls	r3, r5, #2
 800444c:	195b      	adds	r3, r3, r5
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <AddSnippet+0xf0>)
 8004452:	18d3      	adds	r3, r2, r3
 8004454:	68df      	ldr	r7, [r3, #12]
 8004456:	2f00      	cmp	r7, #0
 8004458:	d034      	beq.n	80044c4 <AddSnippet+0xb8>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 800445a:	0038      	movs	r0, r7
 800445c:	f7fb fe5c 	bl	8000118 <strlen>
 8004460:	0006      	movs	r6, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8004462:	0020      	movs	r0, r4
 8004464:	f7fb fe58 	bl	8000118 <strlen>
 8004468:	1831      	adds	r1, r6, r0
 800446a:	3102      	adds	r1, #2
 800446c:	0038      	movs	r0, r7
 800446e:	f010 f8af 	bl	80145d0 <realloc>
 8004472:	4f22      	ldr	r7, [pc, #136]	; (80044fc <AddSnippet+0xf0>)
 8004474:	00ab      	lsls	r3, r5, #2
 8004476:	195d      	adds	r5, r3, r5
 8004478:	00ad      	lsls	r5, r5, #2
 800447a:	197d      	adds	r5, r7, r5
 800447c:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 800447e:	4d1e      	ldr	r5, [pc, #120]	; (80044f8 <AddSnippet+0xec>)
 8004480:	782a      	ldrb	r2, [r5, #0]
 8004482:	3a01      	subs	r2, #1
 8004484:	0093      	lsls	r3, r2, #2
 8004486:	189b      	adds	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	68d8      	ldr	r0, [r3, #12]
 800448e:	1c73      	adds	r3, r6, #1
 8004490:	18c0      	adds	r0, r0, r3
 8004492:	0021      	movs	r1, r4
 8004494:	f010 f8f7 	bl	8014686 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 8004498:	782a      	ldrb	r2, [r5, #0]
 800449a:	3a01      	subs	r2, #1
 800449c:	0093      	lsls	r3, r2, #2
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	18ff      	adds	r7, r7, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2213      	movs	r2, #19
 80044a8:	559a      	strb	r2, [r3, r6]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 80044aa:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <AddSnippet+0xec>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	3a01      	subs	r2, #1
 80044b0:	0093      	lsls	r3, r2, #2
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4911      	ldr	r1, [pc, #68]	; (80044fc <AddSnippet+0xf0>)
 80044b8:	18cb      	adds	r3, r1, r3
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d011      	beq.n	80044e4 <AddSnippet+0xd8>
	return BOS_OK;
 80044c0:	2000      	movs	r0, #0
 80044c2:	e7ac      	b.n	800441e <AddSnippet+0x12>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 80044c4:	0008      	movs	r0, r1
 80044c6:	f7fb fe27 	bl	8000118 <strlen>
 80044ca:	3001      	adds	r0, #1
 80044cc:	f00f f8e4 	bl	8013698 <malloc>
 80044d0:	00ab      	lsls	r3, r5, #2
 80044d2:	195d      	adds	r5, r3, r5
 80044d4:	00ad      	lsls	r5, r5, #2
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <AddSnippet+0xf0>)
 80044d8:	195d      	adds	r5, r3, r5
 80044da:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 80044dc:	0021      	movs	r1, r4
 80044de:	f010 f8d2 	bl	8014686 <strcpy>
 80044e2:	e7e2      	b.n	80044aa <AddSnippet+0x9e>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 80044e4:	0090      	lsls	r0, r2, #2
 80044e6:	1880      	adds	r0, r0, r2
 80044e8:	0080      	lsls	r0, r0, #2
 80044ea:	1840      	adds	r0, r0, r1
 80044ec:	2214      	movs	r2, #20
 80044ee:	2100      	movs	r1, #0
 80044f0:	f00f f8fd 	bl	80136ee <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 80044f4:	200e      	movs	r0, #14
 80044f6:	e792      	b.n	800441e <AddSnippet+0x12>
 80044f8:	20000a3f 	.word	0x20000a3f
 80044fc:	20006154 	.word	0x20006154

08004500 <CLI_CommandParser>:
{
 8004500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004502:	46de      	mov	lr, fp
 8004504:	4657      	mov	r7, sl
 8004506:	464e      	mov	r6, r9
 8004508:	4645      	mov	r5, r8
 800450a:	b5e0      	push	{r5, r6, r7, lr}
 800450c:	b089      	sub	sp, #36	; 0x24
 800450e:	4682      	mov	sl, r0
 8004510:	4689      	mov	r9, r1
 8004512:	0015      	movs	r5, r2
 8004514:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 8004516:	2300      	movs	r3, #0
 8004518:	9305      	str	r3, [sp, #20]
 800451a:	2205      	movs	r2, #5
 800451c:	2100      	movs	r1, #0
 800451e:	a806      	add	r0, sp, #24
 8004520:	f00f f8e5 	bl	80136ee <memset>
 8004524:	e12e      	b.n	8004784 <CLI_CommandParser+0x284>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 8004526:	1ce9      	adds	r1, r5, #3
 8004528:	2001      	movs	r0, #1
 800452a:	f7ff ff6f 	bl	800440c <AddSnippet>
 800452e:	2800      	cmp	r0, #0
 8004530:	d106      	bne.n	8004540 <CLI_CommandParser+0x40>
				recordSnippet = SNIPPET_COMMANDS;
 8004532:	4bd3      	ldr	r3, [pc, #844]	; (8004880 <CLI_CommandParser+0x380>)
 8004534:	2202      	movs	r2, #2
 8004536:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8004538:	230d      	movs	r3, #13
 800453a:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 800453c:	46b8      	mov	r8, r7
 800453e:	e10f      	b.n	8004760 <CLI_CommandParser+0x260>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004540:	2252      	movs	r2, #82	; 0x52
 8004542:	49d0      	ldr	r1, [pc, #832]	; (8004884 <CLI_CommandParser+0x384>)
 8004544:	0020      	movs	r0, r4
 8004546:	f00f f8c9 	bl	80136dc <memcpy>
				recordSnippet = 0;
 800454a:	4bcd      	ldr	r3, [pc, #820]	; (8004880 <CLI_CommandParser+0x380>)
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
			xReturned = pdFALSE;
 8004550:	46b8      	mov	r8, r7
 8004552:	e105      	b.n	8004760 <CLI_CommandParser+0x260>
			recordSnippet = 0;
 8004554:	4bca      	ldr	r3, [pc, #808]	; (8004880 <CLI_CommandParser+0x380>)
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 800455a:	49cb      	ldr	r1, [pc, #812]	; (8004888 <CLI_CommandParser+0x388>)
 800455c:	2003      	movs	r0, #3
 800455e:	f7ff ff55 	bl	800440c <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 8004562:	2241      	movs	r2, #65	; 0x41
 8004564:	49c9      	ldr	r1, [pc, #804]	; (800488c <CLI_CommandParser+0x38c>)
 8004566:	0020      	movs	r0, r4
 8004568:	f00f f8b8 	bl	80136dc <memcpy>
			xReturned = pdFALSE;
 800456c:	46b8      	mov	r8, r7
 800456e:	e0f7      	b.n	8004760 <CLI_CommandParser+0x260>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 8004570:	0029      	movs	r1, r5
 8004572:	2002      	movs	r0, #2
 8004574:	f7ff ff4a 	bl	800440c <AddSnippet>
 8004578:	2800      	cmp	r0, #0
 800457a:	d104      	bne.n	8004586 <CLI_CommandParser+0x86>
				pcOutputString[0] = '\r';
 800457c:	230d      	movs	r3, #13
 800457e:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	4698      	mov	r8, r3
 8004584:	e0ec      	b.n	8004760 <CLI_CommandParser+0x260>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004586:	2252      	movs	r2, #82	; 0x52
 8004588:	49be      	ldr	r1, [pc, #760]	; (8004884 <CLI_CommandParser+0x384>)
 800458a:	0020      	movs	r0, r4
 800458c:	f00f f8a6 	bl	80136dc <memcpy>
			xReturned = pdFALSE;
 8004590:	2300      	movs	r3, #0
 8004592:	4698      	mov	r8, r3
 8004594:	e0e4      	b.n	8004760 <CLI_CommandParser+0x260>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8004596:	1c70      	adds	r0, r6, #1
 8004598:	2299      	movs	r2, #153	; 0x99
 800459a:	0092      	lsls	r2, r2, #2
 800459c:	0021      	movs	r1, r4
 800459e:	f009 ffe5 	bl	800e56c <FreeRTOS_CLIProcessCommand>
 80045a2:	4680      	mov	r8, r0
 80045a4:	e0dc      	b.n	8004760 <CLI_CommandParser+0x260>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 80045a6:	2227      	movs	r2, #39	; 0x27
 80045a8:	49b9      	ldr	r1, [pc, #740]	; (8004890 <CLI_CommandParser+0x390>)
 80045aa:	0020      	movs	r0, r4
 80045ac:	f00f f896 	bl	80136dc <memcpy>
					xReturned = pdFALSE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	4698      	mov	r8, r3
 80045b4:	e0d4      	b.n	8004760 <CLI_CommandParser+0x260>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 80045b6:	2225      	movs	r2, #37	; 0x25
 80045b8:	49b6      	ldr	r1, [pc, #728]	; (8004894 <CLI_CommandParser+0x394>)
 80045ba:	0020      	movs	r0, r4
 80045bc:	f00f f88e 	bl	80136dc <memcpy>
					xReturned = pdFALSE;						
 80045c0:	2300      	movs	r3, #0
 80045c2:	4698      	mov	r8, r3
 80045c4:	e0cc      	b.n	8004760 <CLI_CommandParser+0x260>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 80045c6:	221a      	movs	r2, #26
 80045c8:	2100      	movs	r1, #0
 80045ca:	48b3      	ldr	r0, [pc, #716]	; (8004898 <CLI_CommandParser+0x398>)
 80045cc:	f00f f88f 	bl	80136ee <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 80045d0:	3601      	adds	r6, #1
 80045d2:	0028      	movs	r0, r5
 80045d4:	f7fb fda0 	bl	8000118 <strlen>
 80045d8:	0007      	movs	r7, r0
 80045da:	a805      	add	r0, sp, #20
 80045dc:	f7fb fd9c 	bl	8000118 <strlen>
 80045e0:	1a3a      	subs	r2, r7, r0
 80045e2:	3a01      	subs	r2, #1
 80045e4:	0031      	movs	r1, r6
 80045e6:	48ad      	ldr	r0, [pc, #692]	; (800489c <CLI_CommandParser+0x39c>)
 80045e8:	f010 f866 	bl	80146b8 <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 80045ec:	0028      	movs	r0, r5
 80045ee:	f7fb fd93 	bl	8000118 <strlen>
 80045f2:	0007      	movs	r7, r0
 80045f4:	a805      	add	r0, sp, #20
 80045f6:	f7fb fd8f 	bl	8000118 <strlen>
 80045fa:	1a3b      	subs	r3, r7, r0
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2217      	movs	r2, #23
 8004600:	21ff      	movs	r1, #255	; 0xff
 8004602:	4658      	mov	r0, fp
 8004604:	f004 f922 	bl	800884c <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8004608:	2299      	movs	r2, #153	; 0x99
 800460a:	0092      	lsls	r2, r2, #2
 800460c:	0021      	movs	r1, r4
 800460e:	0030      	movs	r0, r6
 8004610:	f009 ffac 	bl	800e56c <FreeRTOS_CLIProcessCommand>
 8004614:	4680      	mov	r8, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 8004616:	0020      	movs	r0, r4
 8004618:	f7fb fd7e 	bl	8000118 <strlen>
 800461c:	1820      	adds	r0, r4, r0
 800461e:	221d      	movs	r2, #29
 8004620:	499f      	ldr	r1, [pc, #636]	; (80048a0 <CLI_CommandParser+0x3a0>)
 8004622:	f00f f85b 	bl	80136dc <memcpy>
 8004626:	e09b      	b.n	8004760 <CLI_CommandParser+0x260>
					group = id >> 8;
 8004628:	9b02      	ldr	r3, [sp, #8]
 800462a:	121f      	asrs	r7, r3, #8
 800462c:	b2fb      	uxtb	r3, r7
 800462e:	4f9d      	ldr	r7, [pc, #628]	; (80048a4 <CLI_CommandParser+0x3a4>)
 8004630:	9303      	str	r3, [sp, #12]
 8004632:	703b      	strb	r3, [r7, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8004634:	221a      	movs	r2, #26
 8004636:	2100      	movs	r1, #0
 8004638:	4897      	ldr	r0, [pc, #604]	; (8004898 <CLI_CommandParser+0x398>)
 800463a:	f00f f858 	bl	80136ee <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 800463e:	1c72      	adds	r2, r6, #1
 8004640:	9202      	str	r2, [sp, #8]
 8004642:	0028      	movs	r0, r5
 8004644:	f7fb fd68 	bl	8000118 <strlen>
 8004648:	0006      	movs	r6, r0
 800464a:	a805      	add	r0, sp, #20
 800464c:	f7fb fd64 	bl	8000118 <strlen>
 8004650:	1a32      	subs	r2, r6, r0
 8004652:	3a01      	subs	r2, #1
 8004654:	9902      	ldr	r1, [sp, #8]
 8004656:	4891      	ldr	r0, [pc, #580]	; (800489c <CLI_CommandParser+0x39c>)
 8004658:	f010 f82e 	bl	80146b8 <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 800465c:	0028      	movs	r0, r5
 800465e:	f7fb fd5b 	bl	8000118 <strlen>
 8004662:	0006      	movs	r6, r0
 8004664:	a805      	add	r0, sp, #20
 8004666:	f7fb fd57 	bl	8000118 <strlen>
 800466a:	1a33      	subs	r3, r6, r0
 800466c:	b29b      	uxth	r3, r3
 800466e:	2217      	movs	r2, #23
 8004670:	9903      	ldr	r1, [sp, #12]
 8004672:	4658      	mov	r0, fp
 8004674:	f004 f8ea 	bl	800884c <BroadcastMessage>
					if (InGroup(myID, group))
 8004678:	4b8b      	ldr	r3, [pc, #556]	; (80048a8 <CLI_CommandParser+0x3a8>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	3b01      	subs	r3, #1
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	4a8a      	ldr	r2, [pc, #552]	; (80048ac <CLI_CommandParser+0x3ac>)
 8004682:	5a9b      	ldrh	r3, [r3, r2]
 8004684:	783a      	ldrb	r2, [r7, #0]
 8004686:	4113      	asrs	r3, r2
 8004688:	07db      	lsls	r3, r3, #31
 800468a:	d406      	bmi.n	800469a <CLI_CommandParser+0x19a>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 800468c:	ab05      	add	r3, sp, #20
 800468e:	0022      	movs	r2, r4
 8004690:	4987      	ldr	r1, [pc, #540]	; (80048b0 <CLI_CommandParser+0x3b0>)
 8004692:	0020      	movs	r0, r4
 8004694:	f00f ffbc 	bl	8014610 <siprintf>
 8004698:	e062      	b.n	8004760 <CLI_CommandParser+0x260>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800469a:	2299      	movs	r2, #153	; 0x99
 800469c:	0092      	lsls	r2, r2, #2
 800469e:	0021      	movs	r1, r4
 80046a0:	9802      	ldr	r0, [sp, #8]
 80046a2:	f009 ff63 	bl	800e56c <FreeRTOS_CLIProcessCommand>
 80046a6:	4680      	mov	r8, r0
 80046a8:	e7f0      	b.n	800468c <CLI_CommandParser+0x18c>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 80046aa:	0028      	movs	r0, r5
 80046ac:	f7fb fd34 	bl	8000118 <strlen>
 80046b0:	4680      	mov	r8, r0
 80046b2:	a805      	add	r0, sp, #20
 80046b4:	f7fb fd30 	bl	8000118 <strlen>
 80046b8:	4643      	mov	r3, r8
 80046ba:	1a1a      	subs	r2, r3, r0
 80046bc:	3a01      	subs	r2, #1
 80046be:	0031      	movs	r1, r6
 80046c0:	4876      	ldr	r0, [pc, #472]	; (800489c <CLI_CommandParser+0x39c>)
 80046c2:	f00f fff9 	bl	80146b8 <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 80046c6:	0028      	movs	r0, r5
 80046c8:	f7fb fd26 	bl	8000118 <strlen>
 80046cc:	0006      	movs	r6, r0
 80046ce:	a805      	add	r0, sp, #20
 80046d0:	f7fb fd22 	bl	8000118 <strlen>
 80046d4:	1a32      	subs	r2, r6, r0
 80046d6:	b292      	uxth	r2, r2
 80046d8:	3a01      	subs	r2, #1
 80046da:	b292      	uxth	r2, r2
 80046dc:	2117      	movs	r1, #23
 80046de:	0038      	movs	r0, r7
 80046e0:	f004 f8dc 	bl	800889c <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 80046e4:	9a02      	ldr	r2, [sp, #8]
 80046e6:	4973      	ldr	r1, [pc, #460]	; (80048b4 <CLI_CommandParser+0x3b4>)
 80046e8:	0020      	movs	r0, r4
 80046ea:	f00f ff91 	bl	8014610 <siprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 80046ee:	7823      	ldrb	r3, [r4, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <CLI_CommandParser+0x1fa>
 80046f4:	464b      	mov	r3, r9
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d108      	bne.n	800470c <CLI_CommandParser+0x20c>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80046fa:	0020      	movs	r0, r4
 80046fc:	f7fb fd0c 	bl	8000118 <strlen>
 8004700:	0002      	movs	r2, r0
 8004702:	2100      	movs	r1, #0
 8004704:	0020      	movs	r0, r4
 8004706:	f00e fff2 	bl	80136ee <memset>
 800470a:	e0a1      	b.n	8004850 <CLI_CommandParser+0x350>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 800470c:	0020      	movs	r0, r4
 800470e:	f7fb fd03 	bl	8000118 <strlen>
 8004712:	b282      	uxth	r2, r0
 8004714:	2301      	movs	r3, #1
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	3331      	adds	r3, #49	; 0x31
 800471a:	0021      	movs	r1, r4
 800471c:	4650      	mov	r0, sl
 800471e:	f009 fd37 	bl	800e190 <writePxMutex>
 8004722:	e7ea      	b.n	80046fa <CLI_CommandParser+0x1fa>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 8004724:	21fa      	movs	r1, #250	; 0xfa
 8004726:	0089      	lsls	r1, r1, #2
 8004728:	2001      	movs	r0, #1
 800472a:	f00b fa6d 	bl	800fc08 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 800472e:	4b62      	ldr	r3, [pc, #392]	; (80048b8 <CLI_CommandParser+0x3b8>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d100      	bne.n	8004738 <CLI_CommandParser+0x238>
 8004736:	e093      	b.n	8004860 <CLI_CommandParser+0x360>
									++timedoutMsg;
 8004738:	4a60      	ldr	r2, [pc, #384]	; (80048bc <CLI_CommandParser+0x3bc>)
 800473a:	8813      	ldrh	r3, [r2, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 8004740:	9b02      	ldr	r3, [sp, #8]
 8004742:	0022      	movs	r2, r4
 8004744:	495e      	ldr	r1, [pc, #376]	; (80048c0 <CLI_CommandParser+0x3c0>)
 8004746:	0020      	movs	r0, r4
 8004748:	f00f ff62 	bl	8014610 <siprintf>
					xReturned = pdFALSE;
 800474c:	2300      	movs	r3, #0
 800474e:	4698      	mov	r8, r3
 8004750:	e006      	b.n	8004760 <CLI_CommandParser+0x260>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8004752:	2299      	movs	r2, #153	; 0x99
 8004754:	0092      	lsls	r2, r2, #2
 8004756:	0021      	movs	r1, r4
 8004758:	0028      	movs	r0, r5
 800475a:	f009 ff07 	bl	800e56c <FreeRTOS_CLIProcessCommand>
 800475e:	4680      	mov	r8, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004760:	7823      	ldrb	r3, [r4, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <CLI_CommandParser+0x26c>
 8004766:	464b      	mov	r3, r9
 8004768:	2b00      	cmp	r3, #0
 800476a:	d17c      	bne.n	8004866 <CLI_CommandParser+0x366>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800476c:	0020      	movs	r0, r4
 800476e:	f7fb fcd3 	bl	8000118 <strlen>
 8004772:	0002      	movs	r2, r0
 8004774:	2100      	movs	r1, #0
 8004776:	0020      	movs	r0, r4
 8004778:	f00e ffb9 	bl	80136ee <memset>
	} while( xReturned != pdFALSE );
 800477c:	4643      	mov	r3, r8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d100      	bne.n	8004784 <CLI_CommandParser+0x284>
 8004782:	e0ad      	b.n	80048e0 <CLI_CommandParser+0x3e0>
		StringToLowerCase(( char * )cInputString);
 8004784:	0028      	movs	r0, r5
 8004786:	f7ff fbfb 	bl	8003f80 <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 800478a:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <CLI_CommandParser+0x380>)
 800478c:	781e      	ldrb	r6, [r3, #0]
 800478e:	2e00      	cmp	r6, #0
 8004790:	d107      	bne.n	80047a2 <CLI_CommandParser+0x2a2>
 8004792:	2203      	movs	r2, #3
 8004794:	494b      	ldr	r1, [pc, #300]	; (80048c4 <CLI_CommandParser+0x3c4>)
 8004796:	0028      	movs	r0, r5
 8004798:	f00f ff7d 	bl	8014696 <strncmp>
 800479c:	1e07      	subs	r7, r0, #0
 800479e:	d100      	bne.n	80047a2 <CLI_CommandParser+0x2a2>
 80047a0:	e6c1      	b.n	8004526 <CLI_CommandParser+0x26>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 80047a2:	2e00      	cmp	r6, #0
 80047a4:	d007      	beq.n	80047b6 <CLI_CommandParser+0x2b6>
 80047a6:	2206      	movs	r2, #6
 80047a8:	4947      	ldr	r1, [pc, #284]	; (80048c8 <CLI_CommandParser+0x3c8>)
 80047aa:	0028      	movs	r0, r5
 80047ac:	f00f ff73 	bl	8014696 <strncmp>
 80047b0:	1e07      	subs	r7, r0, #0
 80047b2:	d100      	bne.n	80047b6 <CLI_CommandParser+0x2b6>
 80047b4:	e6ce      	b.n	8004554 <CLI_CommandParser+0x54>
		else if (recordSnippet == SNIPPET_COMMANDS)
 80047b6:	2e02      	cmp	r6, #2
 80047b8:	d100      	bne.n	80047bc <CLI_CommandParser+0x2bc>
 80047ba:	e6d9      	b.n	8004570 <CLI_CommandParser+0x70>
			loc = strchr( ( char * ) cInputString, '.');
 80047bc:	212e      	movs	r1, #46	; 0x2e
 80047be:	0028      	movs	r0, r5
 80047c0:	f00f ff53 	bl	801466a <strchr>
 80047c4:	1e06      	subs	r6, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 80047c6:	d0c4      	beq.n	8004752 <CLI_CommandParser+0x252>
 80047c8:	3803      	subs	r0, #3
 80047ca:	2203      	movs	r2, #3
 80047cc:	493f      	ldr	r1, [pc, #252]	; (80048cc <CLI_CommandParser+0x3cc>)
 80047ce:	f00f ff62 	bl	8014696 <strncmp>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d0bd      	beq.n	8004752 <CLI_CommandParser+0x252>
 80047d6:	7873      	ldrb	r3, [r6, #1]
 80047d8:	4a3d      	ldr	r2, [pc, #244]	; (80048d0 <CLI_CommandParser+0x3d0>)
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	075b      	lsls	r3, r3, #29
 80047de:	d4b8      	bmi.n	8004752 <CLI_CommandParser+0x252>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 80047e0:	1b72      	subs	r2, r6, r5
 80047e2:	0029      	movs	r1, r5
 80047e4:	a805      	add	r0, sp, #20
 80047e6:	f00f ff67 	bl	80146b8 <strncpy>
				id = GetID(idString);
 80047ea:	a805      	add	r0, sp, #20
 80047ec:	f7ff f900 	bl	80039f0 <GetID>
 80047f0:	9002      	str	r0, [sp, #8]
				if (id == myID) {
 80047f2:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <CLI_CommandParser+0x3a8>)
 80047f4:	7812      	ldrb	r2, [r2, #0]
 80047f6:	4693      	mov	fp, r2
 80047f8:	4290      	cmp	r0, r2
 80047fa:	d100      	bne.n	80047fe <CLI_CommandParser+0x2fe>
 80047fc:	e6cb      	b.n	8004596 <CLI_CommandParser+0x96>
				}	else if (id == BOS_ERR_WrongName) {		
 80047fe:	2864      	cmp	r0, #100	; 0x64
 8004800:	d100      	bne.n	8004804 <CLI_CommandParser+0x304>
 8004802:	e6d0      	b.n	80045a6 <CLI_CommandParser+0xa6>
				}	else if (id == BOS_ERR_WrongID) {
 8004804:	2866      	cmp	r0, #102	; 0x66
 8004806:	d100      	bne.n	800480a <CLI_CommandParser+0x30a>
 8004808:	e6d5      	b.n	80045b6 <CLI_CommandParser+0xb6>
				}	else if (id == BOS_BROADCAST) {
 800480a:	28ff      	cmp	r0, #255	; 0xff
 800480c:	d100      	bne.n	8004810 <CLI_CommandParser+0x310>
 800480e:	e6da      	b.n	80045c6 <CLI_CommandParser+0xc6>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 8004810:	466b      	mov	r3, sp
 8004812:	7a1f      	ldrb	r7, [r3, #8]
 8004814:	2ffe      	cmp	r7, #254	; 0xfe
 8004816:	d100      	bne.n	800481a <CLI_CommandParser+0x31a>
 8004818:	e706      	b.n	8004628 <CLI_CommandParser+0x128>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 800481a:	3601      	adds	r6, #1
 800481c:	2206      	movs	r2, #6
 800481e:	492d      	ldr	r1, [pc, #180]	; (80048d4 <CLI_CommandParser+0x3d4>)
 8004820:	0030      	movs	r0, r6
 8004822:	f00f ff38 	bl	8014696 <strncmp>
 8004826:	2800      	cmp	r0, #0
 8004828:	d000      	beq.n	800482c <CLI_CommandParser+0x32c>
 800482a:	e73e      	b.n	80046aa <CLI_CommandParser+0x1aa>
						BOS.response = BOS_RESPONSE_NONE;				
 800482c:	4b2a      	ldr	r3, [pc, #168]	; (80048d8 <CLI_CommandParser+0x3d8>)
 800482e:	2200      	movs	r2, #0
 8004830:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 8004832:	2119      	movs	r1, #25
 8004834:	0038      	movs	r0, r7
 8004836:	f004 f831 	bl	800889c <SendMessageToModule>
						osDelay(100);
 800483a:	2064      	movs	r0, #100	; 0x64
 800483c:	f009 fdde 	bl	800e3fc <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 8004840:	4b26      	ldr	r3, [pc, #152]	; (80048dc <CLI_CommandParser+0x3dc>)
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <CLI_CommandParser+0x3a8>)
 8004846:	7818      	ldrb	r0, [r3, #0]
 8004848:	2300      	movs	r3, #0
 800484a:	0039      	movs	r1, r7
 800484c:	f7fe fdb2 	bl	80033b4 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 8004850:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <CLI_CommandParser+0x3d8>)
 8004852:	799b      	ldrb	r3, [r3, #6]
 8004854:	2b60      	cmp	r3, #96	; 0x60
 8004856:	d100      	bne.n	800485a <CLI_CommandParser+0x35a>
 8004858:	e764      	b.n	8004724 <CLI_CommandParser+0x224>
					xReturned = pdFALSE;
 800485a:	2300      	movs	r3, #0
 800485c:	4698      	mov	r8, r3
 800485e:	e77f      	b.n	8004760 <CLI_CommandParser+0x260>
 8004860:	2300      	movs	r3, #0
 8004862:	4698      	mov	r8, r3
 8004864:	e77c      	b.n	8004760 <CLI_CommandParser+0x260>
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 8004866:	0020      	movs	r0, r4
 8004868:	f7fb fc56 	bl	8000118 <strlen>
 800486c:	b282      	uxth	r2, r0
 800486e:	2301      	movs	r3, #1
 8004870:	425b      	negs	r3, r3
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	3333      	adds	r3, #51	; 0x33
 8004876:	0021      	movs	r1, r4
 8004878:	4650      	mov	r0, sl
 800487a:	f009 fc89 	bl	800e190 <writePxMutex>
 800487e:	e775      	b.n	800476c <CLI_CommandParser+0x26c>
 8004880:	20000a78 	.word	0x20000a78
 8004884:	0801899c 	.word	0x0801899c
 8004888:	08018428 	.word	0x08018428
 800488c:	080189f8 	.word	0x080189f8
 8004890:	08018a40 	.word	0x08018a40
 8004894:	08018a68 	.word	0x08018a68
 8004898:	2000054c 	.word	0x2000054c
 800489c:	20000760 	.word	0x20000760
 80048a0:	08018a90 	.word	0x08018a90
 80048a4:	20000a3e 	.word	0x20000a3e
 80048a8:	2000089e 	.word	0x2000089e
 80048ac:	200006e8 	.word	0x200006e8
 80048b0:	08018ab0 	.word	0x08018ab0
 80048b4:	08018ae4 	.word	0x08018ae4
 80048b8:	20000930 	.word	0x20000930
 80048bc:	20000f02 	.word	0x20000f02
 80048c0:	08018b08 	.word	0x08018b08
 80048c4:	08018998 	.word	0x08018998
 80048c8:	080189f0 	.word	0x080189f0
 80048cc:	08018a3c 	.word	0x08018a3c
 80048d0:	0801b719 	.word	0x0801b719
 80048d4:	08018adc 	.word	0x08018adc
 80048d8:	20006138 	.word	0x20006138
 80048dc:	200002d7 	.word	0x200002d7
	memset( idString, 0x00, MaxLengthOfAlias );
 80048e0:	2209      	movs	r2, #9
 80048e2:	2100      	movs	r1, #0
 80048e4:	a805      	add	r0, sp, #20
 80048e6:	f00e ff02 	bl	80136ee <memset>
	if(!recordSnippet && enableOutput)
 80048ea:	4b0c      	ldr	r3, [pc, #48]	; (800491c <CLI_CommandParser+0x41c>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d102      	bne.n	80048f8 <CLI_CommandParser+0x3f8>
 80048f2:	464b      	mov	r3, r9
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <CLI_CommandParser+0x406>
}
 80048f8:	b009      	add	sp, #36	; 0x24
 80048fa:	bcf0      	pop	{r4, r5, r6, r7}
 80048fc:	46bb      	mov	fp, r7
 80048fe:	46b2      	mov	sl, r6
 8004900:	46a9      	mov	r9, r5
 8004902:	46a0      	mov	r8, r4
 8004904:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 8004906:	2301      	movs	r3, #1
 8004908:	425b      	negs	r3, r3
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	3333      	adds	r3, #51	; 0x33
 800490e:	2238      	movs	r2, #56	; 0x38
 8004910:	4903      	ldr	r1, [pc, #12]	; (8004920 <CLI_CommandParser+0x420>)
 8004912:	4650      	mov	r0, sl
 8004914:	f009 fc3c 	bl	800e190 <writePxMutex>
}
 8004918:	e7ee      	b.n	80048f8 <CLI_CommandParser+0x3f8>
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	20000a78 	.word	0x20000a78
 8004920:	08018b28 	.word	0x08018b28

08004924 <prvCLITask>:
{
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8004928:	2101      	movs	r1, #1
 800492a:	4249      	negs	r1, r1
 800492c:	2001      	movs	r0, #1
 800492e:	f00b f96b 	bl	800fc08 <ulTaskNotifyTake>
	cRxedChar = '\0';
 8004932:	230f      	movs	r3, #15
 8004934:	446b      	add	r3, sp
 8004936:	2200      	movs	r2, #0
 8004938:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800493a:	f009 fe7f 	bl	800e63c <FreeRTOS_CLIGetOutputBuffer>
 800493e:	0006      	movs	r6, r0
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8004940:	4b51      	ldr	r3, [pc, #324]	; (8004a88 <prvCLITask+0x164>)
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	23e1      	movs	r3, #225	; 0xe1
 8004946:	031b      	lsls	r3, r3, #12
 8004948:	429a      	cmp	r2, r3
 800494a:	d00f      	beq.n	800496c <prvCLITask+0x48>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800494c:	2401      	movs	r4, #1
 800494e:	e001      	b.n	8004954 <prvCLITask+0x30>
 8004950:	3401      	adds	r4, #1
 8004952:	b2e4      	uxtb	r4, r4
 8004954:	2c05      	cmp	r4, #5
 8004956:	d809      	bhi.n	800496c <prvCLITask+0x48>
			if (port != PcPort)
 8004958:	4b4c      	ldr	r3, [pc, #304]	; (8004a8c <prvCLITask+0x168>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	42a3      	cmp	r3, r4
 800495e:	d0f7      	beq.n	8004950 <prvCLITask+0x2c>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8004960:	21e1      	movs	r1, #225	; 0xe1
 8004962:	0309      	lsls	r1, r1, #12
 8004964:	0020      	movs	r0, r4
 8004966:	f009 fc85 	bl	800e274 <UpdateBaudrate>
 800496a:	e7f1      	b.n	8004950 <prvCLITask+0x2c>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 800496c:	4b48      	ldr	r3, [pc, #288]	; (8004a90 <prvCLITask+0x16c>)
 800496e:	881a      	ldrh	r2, [r3, #0]
 8004970:	0053      	lsls	r3, r2, #1
 8004972:	189b      	adds	r3, r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4a47      	ldr	r2, [pc, #284]	; (8004a94 <prvCLITask+0x170>)
 8004978:	189b      	adds	r3, r3, r2
 800497a:	4a47      	ldr	r2, [pc, #284]	; (8004a98 <prvCLITask+0x174>)
 800497c:	7812      	ldrb	r2, [r2, #0]
 800497e:	4c47      	ldr	r4, [pc, #284]	; (8004a9c <prvCLITask+0x178>)
 8004980:	4d42      	ldr	r5, [pc, #264]	; (8004a8c <prvCLITask+0x168>)
 8004982:	7829      	ldrb	r1, [r5, #0]
 8004984:	9100      	str	r1, [sp, #0]
 8004986:	4946      	ldr	r1, [pc, #280]	; (8004aa0 <prvCLITask+0x17c>)
 8004988:	0020      	movs	r0, r4
 800498a:	f00f fe41 	bl	8014610 <siprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 800498e:	7828      	ldrb	r0, [r5, #0]
 8004990:	230a      	movs	r3, #10
 8004992:	4a44      	ldr	r2, [pc, #272]	; (8004aa4 <prvCLITask+0x180>)
 8004994:	4944      	ldr	r1, [pc, #272]	; (8004aa8 <prvCLITask+0x184>)
 8004996:	f009 fc2b 	bl	800e1f0 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 800499a:	0020      	movs	r0, r4
 800499c:	f7fb fbbc 	bl	8000118 <strlen>
 80049a0:	b282      	uxth	r2, r0
 80049a2:	7828      	ldrb	r0, [r5, #0]
 80049a4:	230a      	movs	r3, #10
 80049a6:	0021      	movs	r1, r4
 80049a8:	f009 fc22 	bl	800e1f0 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 80049ac:	2500      	movs	r5, #0
 80049ae:	e058      	b.n	8004a62 <prvCLITask+0x13e>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 80049b0:	200f      	movs	r0, #15
 80049b2:	4468      	add	r0, sp
 80049b4:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 80049b6:	0198      	lsls	r0, r3, #6
 80049b8:	4a3c      	ldr	r2, [pc, #240]	; (8004aac <prvCLITask+0x188>)
 80049ba:	1812      	adds	r2, r2, r0
 80049bc:	2000      	movs	r0, #0
 80049be:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort-1] = chr;
 80049c0:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <prvCLITask+0x18c>)
 80049c2:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 80049c4:	240f      	movs	r4, #15
 80049c6:	446c      	add	r4, sp
 80049c8:	4b30      	ldr	r3, [pc, #192]	; (8004a8c <prvCLITask+0x168>)
 80049ca:	7818      	ldrb	r0, [r3, #0]
 80049cc:	230a      	movs	r3, #10
 80049ce:	2201      	movs	r2, #1
 80049d0:	0021      	movs	r1, r4
 80049d2:	f009 fc0d 	bl	800e1f0 <writePxITMutex>
		if( cRxedChar == '\r' )
 80049d6:	7823      	ldrb	r3, [r4, #0]
 80049d8:	2b0d      	cmp	r3, #13
 80049da:	d025      	beq.n	8004a28 <prvCLITask+0x104>
			if( cRxedChar == '\n' )
 80049dc:	2b0a      	cmp	r3, #10
 80049de:	d03e      	beq.n	8004a5e <prvCLITask+0x13a>
			else if( cRxedChar == '\b' )
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d049      	beq.n	8004a78 <prvCLITask+0x154>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 80049e4:	001a      	movs	r2, r3
 80049e6:	3a20      	subs	r2, #32
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	2a5e      	cmp	r2, #94	; 0x5e
 80049ec:	d837      	bhi.n	8004a5e <prvCLITask+0x13a>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 80049ee:	2d31      	cmp	r5, #49	; 0x31
 80049f0:	dc35      	bgt.n	8004a5e <prvCLITask+0x13a>
						cInputString[ cInputIndex ] = cRxedChar;
 80049f2:	4a30      	ldr	r2, [pc, #192]	; (8004ab4 <prvCLITask+0x190>)
 80049f4:	5553      	strb	r3, [r2, r5]
						cInputIndex++;
 80049f6:	3501      	adds	r5, #1
 80049f8:	b26d      	sxtb	r5, r5
 80049fa:	e030      	b.n	8004a5e <prvCLITask+0x13a>
			taskYIELD();
 80049fc:	f00b fbfc 	bl	80101f8 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004a00:	3401      	adds	r4, #1
 8004a02:	b2a4      	uxth	r4, r4
 8004a04:	2c3f      	cmp	r4, #63	; 0x3f
 8004a06:	d8dd      	bhi.n	80049c4 <prvCLITask+0xa0>
			if (UARTRxBuf[PcPort-1][chr]) {
 8004a08:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <prvCLITask+0x168>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	0198      	lsls	r0, r3, #6
 8004a10:	4a26      	ldr	r2, [pc, #152]	; (8004aac <prvCLITask+0x188>)
 8004a12:	1812      	adds	r2, r2, r0
 8004a14:	5d12      	ldrb	r2, [r2, r4]
 8004a16:	2a00      	cmp	r2, #0
 8004a18:	d1ca      	bne.n	80049b0 <prvCLITask+0x8c>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8004a1a:	2c3f      	cmp	r4, #63	; 0x3f
 8004a1c:	d1ee      	bne.n	80049fc <prvCLITask+0xd8>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8004a1e:	4a24      	ldr	r2, [pc, #144]	; (8004ab0 <prvCLITask+0x18c>)
 8004a20:	2100      	movs	r1, #0
 8004a22:	54d1      	strb	r1, [r2, r3]
 8004a24:	2400      	movs	r4, #0
 8004a26:	e7e9      	b.n	80049fc <prvCLITask+0xd8>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 8004a28:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <prvCLITask+0x168>)
 8004a2a:	7818      	ldrb	r0, [r3, #0]
 8004a2c:	230a      	movs	r3, #10
 8004a2e:	2202      	movs	r2, #2
 8004a30:	4921      	ldr	r1, [pc, #132]	; (8004ab8 <prvCLITask+0x194>)
 8004a32:	f009 fbdd 	bl	800e1f0 <writePxITMutex>
			if( cInputIndex == 0 )
 8004a36:	2d00      	cmp	r5, #0
 8004a38:	d019      	beq.n	8004a6e <prvCLITask+0x14a>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 8004a3a:	4c1e      	ldr	r4, [pc, #120]	; (8004ab4 <prvCLITask+0x190>)
 8004a3c:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <prvCLITask+0x168>)
 8004a3e:	7818      	ldrb	r0, [r3, #0]
 8004a40:	0033      	movs	r3, r6
 8004a42:	0022      	movs	r2, r4
 8004a44:	2101      	movs	r1, #1
 8004a46:	f7ff fd5b 	bl	8004500 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 8004a4a:	0021      	movs	r1, r4
 8004a4c:	481b      	ldr	r0, [pc, #108]	; (8004abc <prvCLITask+0x198>)
 8004a4e:	f00f fe1a 	bl	8014686 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8004a52:	2232      	movs	r2, #50	; 0x32
 8004a54:	2100      	movs	r1, #0
 8004a56:	0020      	movs	r0, r4
 8004a58:	f00e fe49 	bl	80136ee <memset>
			cInputIndex = 0;
 8004a5c:	2500      	movs	r5, #0
		taskYIELD();
 8004a5e:	f00b fbcb 	bl	80101f8 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004a62:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <prvCLITask+0x168>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	4a11      	ldr	r2, [pc, #68]	; (8004ab0 <prvCLITask+0x18c>)
 8004a6a:	5cd4      	ldrb	r4, [r2, r3]
 8004a6c:	e7ca      	b.n	8004a04 <prvCLITask+0xe0>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 8004a6e:	4913      	ldr	r1, [pc, #76]	; (8004abc <prvCLITask+0x198>)
 8004a70:	4810      	ldr	r0, [pc, #64]	; (8004ab4 <prvCLITask+0x190>)
 8004a72:	f00f fe08 	bl	8014686 <strcpy>
 8004a76:	e7e0      	b.n	8004a3a <prvCLITask+0x116>
				if( cInputIndex > 0 )
 8004a78:	2d00      	cmp	r5, #0
 8004a7a:	ddf0      	ble.n	8004a5e <prvCLITask+0x13a>
					cInputIndex--;
 8004a7c:	3d01      	subs	r5, #1
 8004a7e:	b26d      	sxtb	r5, r5
					cInputString[ cInputIndex ] = '\0';
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <prvCLITask+0x190>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	555a      	strb	r2, [r3, r5]
 8004a86:	e7ea      	b.n	8004a5e <prvCLITask+0x13a>
 8004a88:	20006138 	.word	0x20006138
 8004a8c:	200002d7 	.word	0x200002d7
 8004a90:	20000050 	.word	0x20000050
 8004a94:	080188c0 	.word	0x080188c0
 8004a98:	2000089e 	.word	0x2000089e
 8004a9c:	20000a40 	.word	0x20000a40
 8004aa0:	08018b64 	.word	0x08018b64
 8004aa4:	00000293 	.word	0x00000293
 8004aa8:	08018b90 	.word	0x08018b90
 8004aac:	20000afc 	.word	0x20000afc
 8004ab0:	20000c3c 	.word	0x20000c3c
 8004ab4:	20000970 	.word	0x20000970
 8004ab8:	08019f24 	.word	0x08019f24
 8004abc:	20000a0c 	.word	0x20000a0c

08004ac0 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <ParseSnippetCommand+0x78>)
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	3a01      	subs	r2, #1
 8004aca:	0093      	lsls	r3, r2, #2
 8004acc:	189b      	adds	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <ParseSnippetCommand+0x7c>)
 8004ad2:	18d3      	adds	r3, r2, r3
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02c      	beq.n	8004b34 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8004ada:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <ParseSnippetCommand+0x80>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d014      	beq.n	8004b0c <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 8004ae2:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <ParseSnippetCommand+0x80>)
 8004ae4:	681e      	ldr	r6, [r3, #0]
 8004ae6:	7833      	ldrb	r3, [r6, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d012      	beq.n	8004b12 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 8004aec:	2113      	movs	r1, #19
 8004aee:	0030      	movs	r0, r6
 8004af0:	f00f fdbb 	bl	801466a <strchr>
 8004af4:	1e05      	subs	r5, r0, #0
	if (ptrEnd != NULL)
 8004af6:	d011      	beq.n	8004b1c <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 8004af8:	1b82      	subs	r2, r0, r6
 8004afa:	0031      	movs	r1, r6
 8004afc:	0020      	movs	r0, r4
 8004afe:	f00f fddb 	bl	80146b8 <strncpy>
		ptrStart = ptrEnd+1;
 8004b02:	3501      	adds	r5, #1
 8004b04:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <ParseSnippetCommand+0x80>)
 8004b06:	601d      	str	r5, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 8004b08:	2001      	movs	r0, #1
}
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <ParseSnippetCommand+0x80>)
 8004b0e:	6018      	str	r0, [r3, #0]
 8004b10:	e7e7      	b.n	8004ae2 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <ParseSnippetCommand+0x80>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
		return false;
 8004b18:	2000      	movs	r0, #0
 8004b1a:	e7f6      	b.n	8004b0a <ParseSnippetCommand+0x4a>
		strcpy((char *)cliBuffer, ptrStart);
 8004b1c:	0031      	movs	r1, r6
 8004b1e:	0020      	movs	r0, r4
 8004b20:	f00f fdb1 	bl	8014686 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 8004b24:	0020      	movs	r0, r4
 8004b26:	f7fb faf7 	bl	8000118 <strlen>
 8004b2a:	1836      	adds	r6, r6, r0
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <ParseSnippetCommand+0x80>)
 8004b2e:	601e      	str	r6, [r3, #0]
	return true;
 8004b30:	2001      	movs	r0, #1
 8004b32:	e7ea      	b.n	8004b0a <ParseSnippetCommand+0x4a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8004b34:	2000      	movs	r0, #0
 8004b36:	e7e8      	b.n	8004b0a <ParseSnippetCommand+0x4a>
 8004b38:	20000a3f 	.word	0x20000a3f
 8004b3c:	20006154 	.word	0x20006154
 8004b40:	20000a74 	.word	0x20000a74

08004b44 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8004b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b46:	b083      	sub	sp, #12
 8004b48:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 8004b4a:	0083      	lsls	r3, r0, #2
 8004b4c:	181b      	adds	r3, r3, r0
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4a42      	ldr	r2, [pc, #264]	; (8004c5c <CheckSnippetCondition+0x118>)
 8004b52:	5c9b      	ldrb	r3, [r3, r2]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d004      	beq.n	8004b62 <CheckSnippetCondition+0x1e>
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d013      	beq.n	8004b84 <CheckSnippetCondition+0x40>
 8004b5c:	2000      	movs	r0, #0
  	default:
  		break;
  }
	
	return false;
}
 8004b5e:	b003      	add	sp, #12
 8004b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 8004b62:	4a3e      	ldr	r2, [pc, #248]	; (8004c5c <CheckSnippetCondition+0x118>)
 8004b64:	0080      	lsls	r0, r0, #2
 8004b66:	1903      	adds	r3, r0, r4
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	18d3      	adds	r3, r2, r3
 8004b6c:	7899      	ldrb	r1, [r3, #2]
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 8004b6e:	78da      	ldrb	r2, [r3, #3]
 8004b70:	00cb      	lsls	r3, r1, #3
 8004b72:	185b      	adds	r3, r3, r1
 8004b74:	493a      	ldr	r1, [pc, #232]	; (8004c60 <CheckSnippetCondition+0x11c>)
 8004b76:	5c5b      	ldrb	r3, [r3, r1]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <CheckSnippetCondition+0x3c>
				return false;			
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e7ee      	b.n	8004b5e <CheckSnippetCondition+0x1a>
				return true;
 8004b80:	2001      	movs	r0, #1
 8004b82:	e7ec      	b.n	8004b5e <CheckSnippetCondition+0x1a>
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 8004b84:	4e35      	ldr	r6, [pc, #212]	; (8004c5c <CheckSnippetCondition+0x118>)
 8004b86:	0085      	lsls	r5, r0, #2
 8004b88:	1829      	adds	r1, r5, r0
 8004b8a:	0089      	lsls	r1, r1, #2
 8004b8c:	1871      	adds	r1, r6, r1
 8004b8e:	78ca      	ldrb	r2, [r1, #3]
 8004b90:	3a01      	subs	r2, #1
 8004b92:	0053      	lsls	r3, r2, #1
 8004b94:	189b      	adds	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4a32      	ldr	r2, [pc, #200]	; (8004c64 <CheckSnippetCondition+0x120>)
 8004b9a:	589b      	ldr	r3, [r3, r2]
 8004b9c:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004b9e:	3106      	adds	r1, #6
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	a801      	add	r0, sp, #4
 8004ba4:	f00e fd9a 	bl	80136dc <memcpy>
			switch (snippets[index].cond.mathOperator)
 8004ba8:	192d      	adds	r5, r5, r4
 8004baa:	00ad      	lsls	r5, r5, #2
 8004bac:	1975      	adds	r5, r6, r5
 8004bae:	786b      	ldrb	r3, [r5, #1]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d845      	bhi.n	8004c40 <CheckSnippetCondition+0xfc>
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4a2c      	ldr	r2, [pc, #176]	; (8004c68 <CheckSnippetCondition+0x124>)
 8004bb8:	58d3      	ldr	r3, [r2, r3]
 8004bba:	469f      	mov	pc, r3
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 8004bbc:	1c39      	adds	r1, r7, #0
 8004bbe:	9801      	ldr	r0, [sp, #4]
 8004bc0:	f7fb fc86 	bl	80004d0 <__aeabi_fcmpeq>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d0ca      	beq.n	8004b5e <CheckSnippetCondition+0x1a>
 8004bc8:	2001      	movs	r0, #1
 8004bca:	e7c8      	b.n	8004b5e <CheckSnippetCondition+0x1a>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 8004bcc:	1c39      	adds	r1, r7, #0
 8004bce:	9801      	ldr	r0, [sp, #4]
 8004bd0:	f7fb fc84 	bl	80004dc <__aeabi_fcmplt>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d0c2      	beq.n	8004b5e <CheckSnippetCondition+0x1a>
 8004bd8:	2001      	movs	r0, #1
 8004bda:	e7c0      	b.n	8004b5e <CheckSnippetCondition+0x1a>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 8004bdc:	1c39      	adds	r1, r7, #0
 8004bde:	9801      	ldr	r0, [sp, #4]
 8004be0:	f7fb fc90 	bl	8000504 <__aeabi_fcmpgt>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d02d      	beq.n	8004c44 <CheckSnippetCondition+0x100>
 8004be8:	2100      	movs	r1, #0
 8004bea:	1c38      	adds	r0, r7, #0
 8004bec:	f7fb fc70 	bl	80004d0 <__aeabi_fcmpeq>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d029      	beq.n	8004c48 <CheckSnippetCondition+0x104>
	return false;
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	e7b2      	b.n	8004b5e <CheckSnippetCondition+0x1a>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 8004bf8:	1c39      	adds	r1, r7, #0
 8004bfa:	9801      	ldr	r0, [sp, #4]
 8004bfc:	f7fb fc78 	bl	80004f0 <__aeabi_fcmple>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d0ac      	beq.n	8004b5e <CheckSnippetCondition+0x1a>
 8004c04:	2001      	movs	r0, #1
 8004c06:	e7aa      	b.n	8004b5e <CheckSnippetCondition+0x1a>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 8004c08:	1c39      	adds	r1, r7, #0
 8004c0a:	9801      	ldr	r0, [sp, #4]
 8004c0c:	f7fb fc84 	bl	8000518 <__aeabi_fcmpge>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d01b      	beq.n	8004c4c <CheckSnippetCondition+0x108>
 8004c14:	2100      	movs	r1, #0
 8004c16:	1c38      	adds	r0, r7, #0
 8004c18:	f7fb fc5a 	bl	80004d0 <__aeabi_fcmpeq>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d017      	beq.n	8004c50 <CheckSnippetCondition+0x10c>
	return false;
 8004c20:	2000      	movs	r0, #0
 8004c22:	e79c      	b.n	8004b5e <CheckSnippetCondition+0x1a>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8004c24:	1c39      	adds	r1, r7, #0
 8004c26:	9801      	ldr	r0, [sp, #4]
 8004c28:	f7fb fc52 	bl	80004d0 <__aeabi_fcmpeq>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d111      	bne.n	8004c54 <CheckSnippetCondition+0x110>
 8004c30:	2100      	movs	r1, #0
 8004c32:	1c38      	adds	r0, r7, #0
 8004c34:	f7fb fc4c 	bl	80004d0 <__aeabi_fcmpeq>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d00d      	beq.n	8004c58 <CheckSnippetCondition+0x114>
	return false;
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	e78e      	b.n	8004b5e <CheckSnippetCondition+0x1a>
			switch (snippets[index].cond.mathOperator)
 8004c40:	2000      	movs	r0, #0
 8004c42:	e78c      	b.n	8004b5e <CheckSnippetCondition+0x1a>
	return false;
 8004c44:	2000      	movs	r0, #0
 8004c46:	e78a      	b.n	8004b5e <CheckSnippetCondition+0x1a>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 8004c48:	2001      	movs	r0, #1
 8004c4a:	e788      	b.n	8004b5e <CheckSnippetCondition+0x1a>
	return false;
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e786      	b.n	8004b5e <CheckSnippetCondition+0x1a>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 8004c50:	2001      	movs	r0, #1
 8004c52:	e784      	b.n	8004b5e <CheckSnippetCondition+0x1a>
	return false;
 8004c54:	2000      	movs	r0, #0
 8004c56:	e782      	b.n	8004b5e <CheckSnippetCondition+0x1a>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8004c58:	2001      	movs	r0, #1
 8004c5a:	e780      	b.n	8004b5e <CheckSnippetCondition+0x1a>
 8004c5c:	20006154 	.word	0x20006154
 8004c60:	20000ce4 	.word	0x20000ce4
 8004c64:	20000084 	.word	0x20000084
 8004c68:	08018e24 	.word	0x08018e24

08004c6c <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 8004c6c:	b570      	push	{r4, r5, r6, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 8004c6e:	f009 fce5 	bl	800e63c <FreeRTOS_CLIGetOutputBuffer>
 8004c72:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8004c74:	2400      	movs	r4, #0
 8004c76:	e01b      	b.n	8004cb0 <ExecuteSnippet+0x44>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <ExecuteSnippet+0x74>)
 8004c7a:	7818      	ldrb	r0, [r3, #0]
 8004c7c:	0033      	movs	r3, r6
 8004c7e:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <ExecuteSnippet+0x78>)
 8004c80:	2100      	movs	r1, #0
 8004c82:	f7ff fc3d 	bl	8004500 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 8004c86:	0030      	movs	r0, r6
 8004c88:	f7fb fa46 	bl	8000118 <strlen>
 8004c8c:	0002      	movs	r2, r0
 8004c8e:	2100      	movs	r1, #0
 8004c90:	0030      	movs	r0, r6
 8004c92:	f00e fd2c 	bl	80136ee <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8004c96:	00ab      	lsls	r3, r5, #2
 8004c98:	195b      	adds	r3, r3, r5
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4a12      	ldr	r2, [pc, #72]	; (8004ce8 <ExecuteSnippet+0x7c>)
 8004c9e:	18d3      	adds	r3, r2, r3
 8004ca0:	68d8      	ldr	r0, [r3, #12]
 8004ca2:	4910      	ldr	r1, [pc, #64]	; (8004ce4 <ExecuteSnippet+0x78>)
 8004ca4:	f7ff ff0c 	bl	8004ac0 <ParseSnippetCommand>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d1e5      	bne.n	8004c78 <ExecuteSnippet+0xc>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8004cac:	3401      	adds	r4, #1
 8004cae:	b2a4      	uxth	r4, r4
 8004cb0:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <ExecuteSnippet+0x80>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	d911      	bls.n	8004cdc <ExecuteSnippet+0x70>
		if (snippets[s].state)								// Check for activated Snippets
 8004cb8:	0025      	movs	r5, r4
 8004cba:	00a3      	lsls	r3, r4, #2
 8004cbc:	191b      	adds	r3, r3, r4
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <ExecuteSnippet+0x7c>)
 8004cc2:	18d3      	adds	r3, r2, r3
 8004cc4:	7c1b      	ldrb	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <ExecuteSnippet+0x40>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 8004cca:	b2e0      	uxtb	r0, r4
 8004ccc:	f7ff ff3a 	bl	8004b44 <CheckSnippetCondition>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d0eb      	beq.n	8004cac <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <ExecuteSnippet+0x84>)
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8004cda:	e7dc      	b.n	8004c96 <ExecuteSnippet+0x2a>
			}
		}
  }
	
	return result;
}
 8004cdc:	2000      	movs	r0, #0
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	200002d7 	.word	0x200002d7
 8004ce4:	200009d8 	.word	0x200009d8
 8004ce8:	20006154 	.word	0x20006154
 8004cec:	20000a3f 	.word	0x20000a3f
 8004cf0:	20006138 	.word	0x20006138

08004cf4 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	4770      	bx	lr

08004cf8 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8004cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	0005      	movs	r5, r0
 8004cfe:	0016      	movs	r6, r2
 8004d00:	2400      	movs	r4, #0
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8004d02:	9401      	str	r4, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8004d04:	9400      	str	r4, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d020      	beq.n	8004d4c <setBaudrateCommand+0x54>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004d0a:	aa01      	add	r2, sp, #4
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	0030      	movs	r0, r6
 8004d10:	f009 fc98 	bl	800e644 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8004d14:	2300      	movs	r3, #0
 8004d16:	56c3      	ldrsb	r3, [r0, r3]
 8004d18:	2b70      	cmp	r3, #112	; 0x70
 8004d1a:	d019      	beq.n	8004d50 <setBaudrateCommand+0x58>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
	}
	else
	{
		result = BOS_ERR_WrongValue;
 8004d1c:	2768      	movs	r7, #104	; 0x68
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8004d1e:	466a      	mov	r2, sp
 8004d20:	2102      	movs	r1, #2
 8004d22:	0030      	movs	r0, r6
 8004d24:	f009 fc8e 	bl	800e644 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8004d28:	f00e fc8b 	bl	8013642 <atol>
 8004d2c:	0006      	movs	r6, r0

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
 8004d2e:	2f68      	cmp	r7, #104	; 0x68
 8004d30:	d014      	beq.n	8004d5c <setBaudrateCommand+0x64>
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
	}
  else
  {
		UpdateBaudrate(port, baudrate);
 8004d32:	0001      	movs	r1, r0
 8004d34:	0020      	movs	r0, r4
 8004d36:	f009 fa9d 	bl	800e274 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 8004d3a:	0023      	movs	r3, r4
 8004d3c:	0032      	movs	r2, r6
 8004d3e:	490a      	ldr	r1, [pc, #40]	; (8004d68 <setBaudrateCommand+0x70>)
 8004d40:	0028      	movs	r0, r5
 8004d42:	f00f fc65 	bl	8014610 <siprintf>
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8004d46:	2000      	movs	r0, #0
 8004d48:	b003      	add	sp, #12
 8004d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8004d4c:	b672      	cpsid	i
 8004d4e:	e7fe      	b.n	8004d4e <setBaudrateCommand+0x56>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8004d50:	3001      	adds	r0, #1
 8004d52:	f00e fc76 	bl	8013642 <atol>
 8004d56:	b2c4      	uxtb	r4, r0
	BOS_Status result = BOS_OK;
 8004d58:	2700      	movs	r7, #0
 8004d5a:	e7e0      	b.n	8004d1e <setBaudrateCommand+0x26>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8004d5c:	2213      	movs	r2, #19
 8004d5e:	4903      	ldr	r1, [pc, #12]	; (8004d6c <setBaudrateCommand+0x74>)
 8004d60:	0028      	movs	r0, r5
 8004d62:	f00e fcbb 	bl	80136dc <memcpy>
 8004d66:	e7ee      	b.n	8004d46 <setBaudrateCommand+0x4e>
 8004d68:	08018e54 	.word	0x08018e54
 8004d6c:	08018e40 	.word	0x08018e40

08004d70 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8004d70:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d008      	beq.n	8004d88 <flashsizeCommand+0x18>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <flashsizeCommand+0x1c>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	0412      	lsls	r2, r2, #16
 8004d7c:	0c12      	lsrs	r2, r2, #16
 8004d7e:	4904      	ldr	r1, [pc, #16]	; (8004d90 <flashsizeCommand+0x20>)
 8004d80:	f00f fc46 	bl	8014610 <siprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8004d84:	2000      	movs	r0, #0
 8004d86:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8004d88:	b672      	cpsid	i
 8004d8a:	e7fe      	b.n	8004d8a <flashsizeCommand+0x1a>
 8004d8c:	1ffff7cc 	.word	0x1ffff7cc
 8004d90:	08018e7c 	.word	0x08018e7c

08004d94 <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	0004      	movs	r4, r0
 8004d9a:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 8004da0:	4b5f      	ldr	r3, [pc, #380]	; (8004f20 <testportCommand+0x18c>)
 8004da2:	781a      	ldrb	r2, [r3, #0]
 8004da4:	ab02      	add	r3, sp, #8
 8004da6:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004da8:	2c00      	cmp	r4, #0
 8004daa:	d010      	beq.n	8004dce <testportCommand+0x3a>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004dac:	aa03      	add	r2, sp, #12
 8004dae:	2101      	movs	r1, #1
 8004db0:	f009 fc48 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8004db4:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 8004db6:	495b      	ldr	r1, [pc, #364]	; (8004f24 <testportCommand+0x190>)
 8004db8:	f7fb f9a4 	bl	8000104 <strcmp>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d169      	bne.n	8004e94 <testportCommand+0x100>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 8004dc0:	4b59      	ldr	r3, [pc, #356]	; (8004f28 <testportCommand+0x194>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	4a59      	ldr	r2, [pc, #356]	; (8004f2c <testportCommand+0x198>)
 8004dc8:	5cd6      	ldrb	r6, [r2, r3]
    for (ports=1;ports<=NumOfPorts;ports++)
 8004dca:	2501      	movs	r5, #1
 8004dcc:	e023      	b.n	8004e16 <testportCommand+0x82>
	configASSERT( pcWriteBuffer );
 8004dce:	b672      	cpsid	i
 8004dd0:	e7fe      	b.n	8004dd0 <testportCommand+0x3c>
        result = BOS_OK;
      else
        result = BOS_ERR_Keyword;
      
      if (result == BOS_OK){ 
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 8004dd2:	002a      	movs	r2, r5
 8004dd4:	4956      	ldr	r1, [pc, #344]	; (8004f30 <testportCommand+0x19c>)
 8004dd6:	0020      	movs	r0, r4
 8004dd8:	f00f fc1a 	bl	8014610 <siprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004ddc:	0020      	movs	r0, r4
 8004dde:	f7fb f99b 	bl	8000118 <strlen>
 8004de2:	b282      	uxth	r2, r0
 8004de4:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <testportCommand+0x194>)
 8004de6:	7818      	ldrb	r0, [r3, #0]
 8004de8:	2364      	movs	r3, #100	; 0x64
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	3b5a      	subs	r3, #90	; 0x5a
 8004dee:	0021      	movs	r1, r4
 8004df0:	f009 f9ce 	bl	800e190 <writePxMutex>
 8004df4:	e03c      	b.n	8004e70 <testportCommand+0xdc>
     	else if (result == BOS_ERR_Keyword){
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8004df6:	2001      	movs	r0, #1
 8004df8:	f00b fb8e 	bl	8010518 <HAL_Delay>
 8004dfc:	4b4a      	ldr	r3, [pc, #296]	; (8004f28 <testportCommand+0x194>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	1c71      	adds	r1, r6, #1
 8004e04:	019b      	lsls	r3, r3, #6
 8004e06:	4a4b      	ldr	r2, [pc, #300]	; (8004f34 <testportCommand+0x1a0>)
 8004e08:	18d3      	adds	r3, r2, r3
 8004e0a:	5c5b      	ldrb	r3, [r3, r1]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f2      	beq.n	8004df6 <testportCommand+0x62>
       LastEnter++;
 8004e10:	000e      	movs	r6, r1
    for (ports=1;ports<=NumOfPorts;ports++)
 8004e12:	3501      	adds	r5, #1
 8004e14:	b2ed      	uxtb	r5, r5
 8004e16:	2d05      	cmp	r5, #5
 8004e18:	d845      	bhi.n	8004ea6 <testportCommand+0x112>
      if(PcPort!=ports)
 8004e1a:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <testportCommand+0x194>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	42ab      	cmp	r3, r5
 8004e20:	d0f7      	beq.n	8004e12 <testportCommand+0x7e>
        WriteVaule[0]=rand();
 8004e22:	f00f fb97 	bl	8014554 <rand>
 8004e26:	466b      	mov	r3, sp
 8004e28:	7218      	strb	r0, [r3, #8]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8004e2a:	2364      	movs	r3, #100	; 0x64
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	3b5a      	subs	r3, #90	; 0x5a
 8004e30:	2201      	movs	r2, #1
 8004e32:	a902      	add	r1, sp, #8
 8004e34:	0028      	movs	r0, r5
 8004e36:	f009 f9ab 	bl	800e190 <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8004e3a:	0028      	movs	r0, r5
 8004e3c:	f009 f98a 	bl	800e154 <GetUart>
 8004e40:	6803      	ldr	r3, [r0, #0]
 8004e42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e44:	b2db      	uxtb	r3, r3
      if(WriteVaule[0]==ReadValue[0])
 8004e46:	466a      	mov	r2, sp
 8004e48:	7a12      	ldrb	r2, [r2, #8]
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d0c1      	beq.n	8004dd2 <testportCommand+0x3e>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8004e4e:	002a      	movs	r2, r5
 8004e50:	4939      	ldr	r1, [pc, #228]	; (8004f38 <testportCommand+0x1a4>)
 8004e52:	0020      	movs	r0, r4
 8004e54:	f00f fbdc 	bl	8014610 <siprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004e58:	0020      	movs	r0, r4
 8004e5a:	f7fb f95d 	bl	8000118 <strlen>
 8004e5e:	b282      	uxth	r2, r0
 8004e60:	4b31      	ldr	r3, [pc, #196]	; (8004f28 <testportCommand+0x194>)
 8004e62:	7818      	ldrb	r0, [r3, #0]
 8004e64:	2364      	movs	r3, #100	; 0x64
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	3b5a      	subs	r3, #90	; 0x5a
 8004e6a:	0021      	movs	r1, r4
 8004e6c:	f009 f990 	bl	800e190 <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8004e70:	2254      	movs	r2, #84	; 0x54
 8004e72:	4932      	ldr	r1, [pc, #200]	; (8004f3c <testportCommand+0x1a8>)
 8004e74:	0020      	movs	r0, r4
 8004e76:	f00e fc31 	bl	80136dc <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 8004e7a:	0020      	movs	r0, r4
 8004e7c:	f7fb f94c 	bl	8000118 <strlen>
 8004e80:	b282      	uxth	r2, r0
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <testportCommand+0x194>)
 8004e84:	7818      	ldrb	r0, [r3, #0]
 8004e86:	2364      	movs	r3, #100	; 0x64
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	3b5a      	subs	r3, #90	; 0x5a
 8004e8c:	0021      	movs	r1, r4
 8004e8e:	f009 f97f 	bl	800e190 <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8004e92:	e7b3      	b.n	8004dfc <testportCommand+0x68>
        }
      }
    }
	else if (pcParameterString1[0] == 'p') {
 8004e94:	2300      	movs	r3, #0
 8004e96:	56eb      	ldrsb	r3, [r5, r3]
 8004e98:	2b70      	cmp	r3, #112	; 0x70
 8004e9a:	d007      	beq.n	8004eac <testportCommand+0x118>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
	else if (result == BOS_ERR_Keyword)  
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
    }
    else {
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	4928      	ldr	r1, [pc, #160]	; (8004f40 <testportCommand+0x1ac>)
 8004ea0:	0020      	movs	r0, r4
 8004ea2:	f00e fc1b 	bl	80136dc <memcpy>
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	b004      	add	sp, #16
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8004eac:	1c68      	adds	r0, r5, #1
 8004eae:	f00e fbc8 	bl	8013642 <atol>
 8004eb2:	0005      	movs	r5, r0
 8004eb4:	b2c6      	uxtb	r6, r0
    if(portt>0 && portt<=NumOfPorts)
 8004eb6:	1e73      	subs	r3, r6, #1
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d90b      	bls.n	8004ed6 <testportCommand+0x142>
   result= BOS_ERR_WrongID;
 8004ebe:	2366      	movs	r3, #102	; 0x66
  else if (result == BOS_ERR_WrongID) 
 8004ec0:	2b66      	cmp	r3, #102	; 0x66
 8004ec2:	d027      	beq.n	8004f14 <testportCommand+0x180>
	else if (result == BOS_ERR_Keyword)  
 8004ec4:	2b06      	cmp	r3, #6
 8004ec6:	d1ee      	bne.n	8004ea6 <testportCommand+0x112>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8004ec8:	22ff      	movs	r2, #255	; 0xff
 8004eca:	402a      	ands	r2, r5
 8004ecc:	491a      	ldr	r1, [pc, #104]	; (8004f38 <testportCommand+0x1a4>)
 8004ece:	0020      	movs	r0, r4
 8004ed0:	f00f fb9e 	bl	8014610 <siprintf>
 8004ed4:	e7e7      	b.n	8004ea6 <testportCommand+0x112>
        WriteVaule[0]=rand();
 8004ed6:	f00f fb3d 	bl	8014554 <rand>
 8004eda:	466b      	mov	r3, sp
 8004edc:	7218      	strb	r0, [r3, #8]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8004ede:	2364      	movs	r3, #100	; 0x64
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	3b32      	subs	r3, #50	; 0x32
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	a902      	add	r1, sp, #8
 8004ee8:	0030      	movs	r0, r6
 8004eea:	f009 f951 	bl	800e190 <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8004eee:	0030      	movs	r0, r6
 8004ef0:	f009 f930 	bl	800e154 <GetUart>
 8004ef4:	6803      	ldr	r3, [r0, #0]
 8004ef6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ef8:	b2db      	uxtb	r3, r3
  if(WriteVaule[0]==ReadValue[0])
 8004efa:	466a      	mov	r2, sp
 8004efc:	7a12      	ldrb	r2, [r2, #8]
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d001      	beq.n	8004f06 <testportCommand+0x172>
      result = BOS_ERR_Keyword;
 8004f02:	2306      	movs	r3, #6
 8004f04:	e7dc      	b.n	8004ec0 <testportCommand+0x12c>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	402a      	ands	r2, r5
 8004f0a:	4909      	ldr	r1, [pc, #36]	; (8004f30 <testportCommand+0x19c>)
 8004f0c:	0020      	movs	r0, r4
 8004f0e:	f00f fb7f 	bl	8014610 <siprintf>
 8004f12:	e7c8      	b.n	8004ea6 <testportCommand+0x112>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8004f14:	221b      	movs	r2, #27
 8004f16:	490b      	ldr	r1, [pc, #44]	; (8004f44 <testportCommand+0x1b0>)
 8004f18:	0020      	movs	r0, r4
 8004f1a:	f00e fbdf 	bl	80136dc <memcpy>
 8004f1e:	e7c2      	b.n	8004ea6 <testportCommand+0x112>
 8004f20:	08018f4c 	.word	0x08018f4c
 8004f24:	08018668 	.word	0x08018668
 8004f28:	200002d7 	.word	0x200002d7
 8004f2c:	20000c3c 	.word	0x20000c3c
 8004f30:	08018e9c 	.word	0x08018e9c
 8004f34:	20000afc 	.word	0x20000afc
 8004f38:	08018eb8 	.word	0x08018eb8
 8004f3c:	08018ecc 	.word	0x08018ecc
 8004f40:	08018f3c 	.word	0x08018f3c
 8004f44:	08018f20 	.word	0x08018f20

08004f48 <unbridgeCommand>:
{	
 8004f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4a:	46c6      	mov	lr, r8
 8004f4c:	b500      	push	{lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	0005      	movs	r5, r0
 8004f52:	0017      	movs	r7, r2
 8004f54:	2400      	movs	r4, #0
 8004f56:	2600      	movs	r6, #0
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8004f58:	9401      	str	r4, [sp, #4]
 8004f5a:	9400      	str	r4, [sp, #0]
	configASSERT( pcWriteBuffer );
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	d022      	beq.n	8004fa6 <unbridgeCommand+0x5e>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004f60:	aa01      	add	r2, sp, #4
 8004f62:	2101      	movs	r1, #1
 8004f64:	0038      	movs	r0, r7
 8004f66:	f009 fb6d 	bl	800e644 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	56c3      	ldrsb	r3, [r0, r3]
 8004f6e:	2b70      	cmp	r3, #112	; 0x70
 8004f70:	d01b      	beq.n	8004faa <unbridgeCommand+0x62>
		result = BOS_ERR_WrongParam;
 8004f72:	2367      	movs	r3, #103	; 0x67
 8004f74:	4698      	mov	r8, r3
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8004f76:	466a      	mov	r2, sp
 8004f78:	2102      	movs	r1, #2
 8004f7a:	0038      	movs	r0, r7
 8004f7c:	f009 fb62 	bl	800e644 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8004f80:	2300      	movs	r3, #0
 8004f82:	56c3      	ldrsb	r3, [r0, r3]
 8004f84:	2b70      	cmp	r3, #112	; 0x70
 8004f86:	d017      	beq.n	8004fb8 <unbridgeCommand+0x70>
		result = BOS_ERR_WrongParam;
 8004f88:	2067      	movs	r0, #103	; 0x67
	if (result == BOS_OK) 
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d022      	beq.n	8004fd4 <unbridgeCommand+0x8c>
	else if (result == BOS_ERR_WrongParam) 
 8004f8e:	2867      	cmp	r0, #103	; 0x67
 8004f90:	d027      	beq.n	8004fe2 <unbridgeCommand+0x9a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8004f92:	2219      	movs	r2, #25
 8004f94:	4916      	ldr	r1, [pc, #88]	; (8004ff0 <unbridgeCommand+0xa8>)
 8004f96:	0028      	movs	r0, r5
 8004f98:	f00e fba0 	bl	80136dc <memcpy>
}
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	b002      	add	sp, #8
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	46b8      	mov	r8, r7
 8004fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8004fa6:	b672      	cpsid	i
 8004fa8:	e7fe      	b.n	8004fa8 <unbridgeCommand+0x60>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8004faa:	3001      	adds	r0, #1
 8004fac:	f00e fb49 	bl	8013642 <atol>
 8004fb0:	b2c4      	uxtb	r4, r0
	BOS_Status result = BOS_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4698      	mov	r8, r3
 8004fb6:	e7de      	b.n	8004f76 <unbridgeCommand+0x2e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f00e fb42 	bl	8013642 <atol>
 8004fbe:	b2c6      	uxtb	r6, r0
	if (result == BOS_OK) 
 8004fc0:	4643      	mov	r3, r8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <unbridgeCommand+0x82>
		result = BOS_ERR_WrongParam;
 8004fc6:	2067      	movs	r0, #103	; 0x67
 8004fc8:	e7e1      	b.n	8004f8e <unbridgeCommand+0x46>
		result = Unbridge(port1, port2);
 8004fca:	0031      	movs	r1, r6
 8004fcc:	0020      	movs	r0, r4
 8004fce:	f7fe ff97 	bl	8003f00 <Unbridge>
 8004fd2:	e7da      	b.n	8004f8a <unbridgeCommand+0x42>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8004fd4:	0033      	movs	r3, r6
 8004fd6:	0022      	movs	r2, r4
 8004fd8:	4906      	ldr	r1, [pc, #24]	; (8004ff4 <unbridgeCommand+0xac>)
 8004fda:	0028      	movs	r0, r5
 8004fdc:	f00f fb18 	bl	8014610 <siprintf>
 8004fe0:	e7dc      	b.n	8004f9c <unbridgeCommand+0x54>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8004fe2:	220f      	movs	r2, #15
 8004fe4:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <unbridgeCommand+0xb0>)
 8004fe6:	0028      	movs	r0, r5
 8004fe8:	f00e fb78 	bl	80136dc <memcpy>
 8004fec:	e7d6      	b.n	8004f9c <unbridgeCommand+0x54>
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	08018f70 	.word	0x08018f70
 8004ff4:	08018f50 	.word	0x08018f50
 8004ff8:	08018f3c 	.word	0x08018f3c

08004ffc <bridgeCommand>:
{	
 8004ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ffe:	46c6      	mov	lr, r8
 8005000:	b500      	push	{lr}
 8005002:	b082      	sub	sp, #8
 8005004:	0005      	movs	r5, r0
 8005006:	0017      	movs	r7, r2
 8005008:	2400      	movs	r4, #0
 800500a:	2600      	movs	r6, #0
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800500c:	9401      	str	r4, [sp, #4]
 800500e:	9400      	str	r4, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005010:	2800      	cmp	r0, #0
 8005012:	d022      	beq.n	800505a <bridgeCommand+0x5e>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005014:	aa01      	add	r2, sp, #4
 8005016:	2101      	movs	r1, #1
 8005018:	0038      	movs	r0, r7
 800501a:	f009 fb13 	bl	800e644 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 800501e:	2300      	movs	r3, #0
 8005020:	56c3      	ldrsb	r3, [r0, r3]
 8005022:	2b70      	cmp	r3, #112	; 0x70
 8005024:	d01b      	beq.n	800505e <bridgeCommand+0x62>
		result = BOS_ERR_WrongParam;
 8005026:	2367      	movs	r3, #103	; 0x67
 8005028:	4698      	mov	r8, r3
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800502a:	466a      	mov	r2, sp
 800502c:	2102      	movs	r1, #2
 800502e:	0038      	movs	r0, r7
 8005030:	f009 fb08 	bl	800e644 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005034:	2300      	movs	r3, #0
 8005036:	56c3      	ldrsb	r3, [r0, r3]
 8005038:	2b70      	cmp	r3, #112	; 0x70
 800503a:	d017      	beq.n	800506c <bridgeCommand+0x70>
		result = BOS_ERR_WrongParam;
 800503c:	2067      	movs	r0, #103	; 0x67
	if (result == BOS_OK) 
 800503e:	2800      	cmp	r0, #0
 8005040:	d022      	beq.n	8005088 <bridgeCommand+0x8c>
	else if (result == BOS_ERR_WrongParam) 
 8005042:	2867      	cmp	r0, #103	; 0x67
 8005044:	d027      	beq.n	8005096 <bridgeCommand+0x9a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005046:	2217      	movs	r2, #23
 8005048:	4916      	ldr	r1, [pc, #88]	; (80050a4 <bridgeCommand+0xa8>)
 800504a:	0028      	movs	r0, r5
 800504c:	f00e fb46 	bl	80136dc <memcpy>
}
 8005050:	2000      	movs	r0, #0
 8005052:	b002      	add	sp, #8
 8005054:	bc80      	pop	{r7}
 8005056:	46b8      	mov	r8, r7
 8005058:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 800505a:	b672      	cpsid	i
 800505c:	e7fe      	b.n	800505c <bridgeCommand+0x60>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800505e:	3001      	adds	r0, #1
 8005060:	f00e faef 	bl	8013642 <atol>
 8005064:	b2c4      	uxtb	r4, r0
	BOS_Status result = BOS_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	4698      	mov	r8, r3
 800506a:	e7de      	b.n	800502a <bridgeCommand+0x2e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 800506c:	3001      	adds	r0, #1
 800506e:	f00e fae8 	bl	8013642 <atol>
 8005072:	b2c6      	uxtb	r6, r0
	if (result == BOS_OK) 
 8005074:	4643      	mov	r3, r8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <bridgeCommand+0x82>
		result = BOS_ERR_WrongParam;
 800507a:	2067      	movs	r0, #103	; 0x67
 800507c:	e7e1      	b.n	8005042 <bridgeCommand+0x46>
		result = Bridge(port1, port2);
 800507e:	0031      	movs	r1, r6
 8005080:	0020      	movs	r0, r4
 8005082:	f7fe ff29 	bl	8003ed8 <Bridge>
 8005086:	e7da      	b.n	800503e <bridgeCommand+0x42>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005088:	0033      	movs	r3, r6
 800508a:	0022      	movs	r2, r4
 800508c:	4906      	ldr	r1, [pc, #24]	; (80050a8 <bridgeCommand+0xac>)
 800508e:	0028      	movs	r0, r5
 8005090:	f00f fabe 	bl	8014610 <siprintf>
 8005094:	e7dc      	b.n	8005050 <bridgeCommand+0x54>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005096:	220f      	movs	r2, #15
 8005098:	4904      	ldr	r1, [pc, #16]	; (80050ac <bridgeCommand+0xb0>)
 800509a:	0028      	movs	r0, r5
 800509c:	f00e fb1e 	bl	80136dc <memcpy>
 80050a0:	e7d6      	b.n	8005050 <bridgeCommand+0x54>
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	08018fb0 	.word	0x08018fb0
 80050a8:	08018f8c 	.word	0x08018f8c
 80050ac:	08018f3c 	.word	0x08018f3c

080050b0 <delSnipCommand>:
{	
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	46d6      	mov	lr, sl
 80050b4:	464f      	mov	r7, r9
 80050b6:	4646      	mov	r6, r8
 80050b8:	b5c0      	push	{r6, r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	4680      	mov	r8, r0
 80050be:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80050c4:	4643      	mov	r3, r8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00e      	beq.n	80050e8 <delSnipCommand+0x38>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80050ca:	aa01      	add	r2, sp, #4
 80050cc:	2101      	movs	r1, #1
 80050ce:	f009 fab9 	bl	800e644 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 80050d2:	f00e fab0 	bl	8013636 <atoi>
 80050d6:	b2c4      	uxtb	r4, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 80050d8:	2c00      	cmp	r4, #0
 80050da:	d04a      	beq.n	8005172 <delSnipCommand+0xc2>
 80050dc:	4b2f      	ldr	r3, [pc, #188]	; (800519c <delSnipCommand+0xec>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	d203      	bcs.n	80050ec <delSnipCommand+0x3c>
 80050e4:	23ff      	movs	r3, #255	; 0xff
 80050e6:	e045      	b.n	8005174 <delSnipCommand+0xc4>
	configASSERT( pcWriteBuffer );
 80050e8:	b672      	cpsid	i
 80050ea:	e7fe      	b.n	80050ea <delSnipCommand+0x3a>
		snippets[index-1].cond.conditionType = 0;
 80050ec:	25ff      	movs	r5, #255	; 0xff
 80050ee:	4005      	ands	r5, r0
 80050f0:	3d01      	subs	r5, #1
 80050f2:	4b2b      	ldr	r3, [pc, #172]	; (80051a0 <delSnipCommand+0xf0>)
 80050f4:	4699      	mov	r9, r3
 80050f6:	00af      	lsls	r7, r5, #2
 80050f8:	197b      	adds	r3, r7, r5
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	2200      	movs	r2, #0
 80050fe:	4692      	mov	sl, r2
 8005100:	464a      	mov	r2, r9
 8005102:	4651      	mov	r1, sl
 8005104:	5499      	strb	r1, [r3, r2]
		snippets[index-1].cond.mathOperator = 0;
 8005106:	001e      	movs	r6, r3
 8005108:	444e      	add	r6, r9
 800510a:	7071      	strb	r1, [r6, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 800510c:	1cb0      	adds	r0, r6, #2
 800510e:	2204      	movs	r2, #4
 8005110:	f00e faed 	bl	80136ee <memset>
		snippets[index-1].state = false;
 8005114:	4653      	mov	r3, sl
 8005116:	7433      	strb	r3, [r6, #16]
		free(snippets[index-1].cmd);
 8005118:	68f0      	ldr	r0, [r6, #12]
 800511a:	f00e fac7 	bl	80136ac <free>
		snippets[index-1].cmd = NULL;
 800511e:	4653      	mov	r3, sl
 8005120:	60f3      	str	r3, [r6, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8005122:	e001      	b.n	8005128 <delSnipCommand+0x78>
 8005124:	3401      	adds	r4, #1
 8005126:	b2e4      	uxtb	r4, r4
 8005128:	4b1c      	ldr	r3, [pc, #112]	; (800519c <delSnipCommand+0xec>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	42a3      	cmp	r3, r4
 800512e:	d919      	bls.n	8005164 <delSnipCommand+0xb4>
			if (snippets[s].cond.conditionType) {
 8005130:	00a3      	lsls	r3, r4, #2
 8005132:	191b      	adds	r3, r3, r4
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4a1a      	ldr	r2, [pc, #104]	; (80051a0 <delSnipCommand+0xf0>)
 8005138:	5c9b      	ldrb	r3, [r3, r2]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f2      	beq.n	8005124 <delSnipCommand+0x74>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 800513e:	1e63      	subs	r3, r4, #1
 8005140:	0098      	lsls	r0, r3, #2
 8005142:	18c0      	adds	r0, r0, r3
 8005144:	0080      	lsls	r0, r0, #2
 8005146:	1880      	adds	r0, r0, r2
 8005148:	00a5      	lsls	r5, r4, #2
 800514a:	192d      	adds	r5, r5, r4
 800514c:	00ad      	lsls	r5, r5, #2
 800514e:	18ad      	adds	r5, r5, r2
 8005150:	2214      	movs	r2, #20
 8005152:	0029      	movs	r1, r5
 8005154:	f00e fac2 	bl	80136dc <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 8005158:	2214      	movs	r2, #20
 800515a:	2100      	movs	r1, #0
 800515c:	0028      	movs	r0, r5
 800515e:	f00e fac6 	bl	80136ee <memset>
 8005162:	e7df      	b.n	8005124 <delSnipCommand+0x74>
		--numOfRecordedSnippets;
 8005164:	3b01      	subs	r3, #1
 8005166:	4a0d      	ldr	r2, [pc, #52]	; (800519c <delSnipCommand+0xec>)
 8005168:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 800516a:	f005 ff57 	bl	800b01c <SaveToRO>
	BOS_Status result = BOS_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	e000      	b.n	8005174 <delSnipCommand+0xc4>
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005172:	23ff      	movs	r3, #255	; 0xff
	if (result == BOS_OK)
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <delSnipCommand+0xe0>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005178:	2236      	movs	r2, #54	; 0x36
 800517a:	490a      	ldr	r1, [pc, #40]	; (80051a4 <delSnipCommand+0xf4>)
 800517c:	4640      	mov	r0, r8
 800517e:	f00e faad 	bl	80136dc <memcpy>
}
 8005182:	2000      	movs	r0, #0
 8005184:	b002      	add	sp, #8
 8005186:	bce0      	pop	{r5, r6, r7}
 8005188:	46ba      	mov	sl, r7
 800518a:	46b1      	mov	r9, r6
 800518c:	46a8      	mov	r8, r5
 800518e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005190:	2223      	movs	r2, #35	; 0x23
 8005192:	4905      	ldr	r1, [pc, #20]	; (80051a8 <delSnipCommand+0xf8>)
 8005194:	4640      	mov	r0, r8
 8005196:	f00e faa1 	bl	80136dc <memcpy>
 800519a:	e7f2      	b.n	8005182 <delSnipCommand+0xd2>
 800519c:	20000a3f 	.word	0x20000a3f
 80051a0:	20006154 	.word	0x20006154
 80051a4:	08018fc8 	.word	0x08018fc8
 80051a8:	08019000 	.word	0x08019000

080051ac <pauseSnipCommand>:
{	
 80051ac:	b510      	push	{r4, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	0004      	movs	r4, r0
 80051b2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80051b8:	2c00      	cmp	r4, #0
 80051ba:	d014      	beq.n	80051e6 <pauseSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80051bc:	aa01      	add	r2, sp, #4
 80051be:	2101      	movs	r1, #1
 80051c0:	f009 fa40 	bl	800e644 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 80051c4:	f00e fa37 	bl	8013636 <atoi>
 80051c8:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <pauseSnipCommand+0x2a>
 80051ce:	4a10      	ldr	r2, [pc, #64]	; (8005210 <pauseSnipCommand+0x64>)
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d209      	bcs.n	80051ea <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 80051d6:	2223      	movs	r2, #35	; 0x23
 80051d8:	490e      	ldr	r1, [pc, #56]	; (8005214 <pauseSnipCommand+0x68>)
 80051da:	0020      	movs	r0, r4
 80051dc:	f00e fa7e 	bl	80136dc <memcpy>
}
 80051e0:	2000      	movs	r0, #0
 80051e2:	b002      	add	sp, #8
 80051e4:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80051e6:	b672      	cpsid	i
 80051e8:	e7fe      	b.n	80051e8 <pauseSnipCommand+0x3c>
		snippets[index-1].state = false;
 80051ea:	23ff      	movs	r3, #255	; 0xff
 80051ec:	4003      	ands	r3, r0
 80051ee:	3b01      	subs	r3, #1
 80051f0:	009a      	lsls	r2, r3, #2
 80051f2:	18d3      	adds	r3, r2, r3
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4a08      	ldr	r2, [pc, #32]	; (8005218 <pauseSnipCommand+0x6c>)
 80051f8:	18d3      	adds	r3, r2, r3
 80051fa:	2200      	movs	r2, #0
 80051fc:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 80051fe:	f005 ff0d 	bl	800b01c <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005202:	2235      	movs	r2, #53	; 0x35
 8005204:	4905      	ldr	r1, [pc, #20]	; (800521c <pauseSnipCommand+0x70>)
 8005206:	0020      	movs	r0, r4
 8005208:	f00e fa68 	bl	80136dc <memcpy>
 800520c:	e7e8      	b.n	80051e0 <pauseSnipCommand+0x34>
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	20000a3f 	.word	0x20000a3f
 8005214:	08019000 	.word	0x08019000
 8005218:	20006154 	.word	0x20006154
 800521c:	08019024 	.word	0x08019024

08005220 <actSnipCommand>:
{	
 8005220:	b510      	push	{r4, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	0004      	movs	r4, r0
 8005226:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800522c:	2c00      	cmp	r4, #0
 800522e:	d014      	beq.n	800525a <actSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005230:	aa01      	add	r2, sp, #4
 8005232:	2101      	movs	r1, #1
 8005234:	f009 fa06 	bl	800e644 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005238:	f00e f9fd 	bl	8013636 <atoi>
 800523c:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <actSnipCommand+0x2a>
 8005242:	4a10      	ldr	r2, [pc, #64]	; (8005284 <actSnipCommand+0x64>)
 8005244:	7812      	ldrb	r2, [r2, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d209      	bcs.n	800525e <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 800524a:	2223      	movs	r2, #35	; 0x23
 800524c:	490e      	ldr	r1, [pc, #56]	; (8005288 <actSnipCommand+0x68>)
 800524e:	0020      	movs	r0, r4
 8005250:	f00e fa44 	bl	80136dc <memcpy>
}
 8005254:	2000      	movs	r0, #0
 8005256:	b002      	add	sp, #8
 8005258:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800525a:	b672      	cpsid	i
 800525c:	e7fe      	b.n	800525c <actSnipCommand+0x3c>
		snippets[index-1].state = true;
 800525e:	23ff      	movs	r3, #255	; 0xff
 8005260:	4003      	ands	r3, r0
 8005262:	3b01      	subs	r3, #1
 8005264:	009a      	lsls	r2, r3, #2
 8005266:	18d3      	adds	r3, r2, r3
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4a08      	ldr	r2, [pc, #32]	; (800528c <actSnipCommand+0x6c>)
 800526c:	18d3      	adds	r3, r2, r3
 800526e:	2201      	movs	r2, #1
 8005270:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005272:	f005 fed3 	bl	800b01c <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005276:	2238      	movs	r2, #56	; 0x38
 8005278:	4905      	ldr	r1, [pc, #20]	; (8005290 <actSnipCommand+0x70>)
 800527a:	0020      	movs	r0, r4
 800527c:	f00e fa2e 	bl	80136dc <memcpy>
 8005280:	e7e8      	b.n	8005254 <actSnipCommand+0x34>
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	20000a3f 	.word	0x20000a3f
 8005288:	08019000 	.word	0x08019000
 800528c:	20006154 	.word	0x20006154
 8005290:	0801905c 	.word	0x0801905c

08005294 <snipCommand>:
{	
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005296:	46d6      	mov	lr, sl
 8005298:	464f      	mov	r7, r9
 800529a:	4646      	mov	r6, r8
 800529c:	b5c0      	push	{r6, r7, lr}
 800529e:	b08a      	sub	sp, #40	; 0x28
 80052a0:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 80052a2:	aa06      	add	r2, sp, #24
 80052a4:	4b7b      	ldr	r3, [pc, #492]	; (8005494 <snipCommand+0x200>)
 80052a6:	cb23      	ldmia	r3!, {r0, r1, r5}
 80052a8:	c223      	stmia	r2!, {r0, r1, r5}
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 80052ae:	2c00      	cmp	r4, #0
 80052b0:	d00d      	beq.n	80052ce <snipCommand+0x3a>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 80052b2:	4b79      	ldr	r3, [pc, #484]	; (8005498 <snipCommand+0x204>)
 80052b4:	7818      	ldrb	r0, [r3, #0]
 80052b6:	2301      	movs	r3, #1
 80052b8:	425b      	negs	r3, r3
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	3333      	adds	r3, #51	; 0x33
 80052be:	2237      	movs	r2, #55	; 0x37
 80052c0:	4976      	ldr	r1, [pc, #472]	; (800549c <snipCommand+0x208>)
 80052c2:	f008 ff65 	bl	800e190 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 80052c6:	2600      	movs	r6, #0
	uint8_t count = 1;
 80052c8:	2301      	movs	r3, #1
 80052ca:	469a      	mov	sl, r3
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 80052cc:	e094      	b.n	80053f8 <snipCommand+0x164>
	configASSERT( pcWriteBuffer );
 80052ce:	b672      	cpsid	i
 80052d0:	e7fe      	b.n	80052d0 <snipCommand+0x3c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 80052d2:	00b3      	lsls	r3, r6, #2
 80052d4:	199b      	adds	r3, r3, r6
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	18d3      	adds	r3, r2, r3
 80052da:	7c1a      	ldrb	r2, [r3, #16]
 80052dc:	00d3      	lsls	r3, r2, #3
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	aa06      	add	r2, sp, #24
 80052e2:	4694      	mov	ip, r2
 80052e4:	4463      	add	r3, ip
 80052e6:	4652      	mov	r2, sl
 80052e8:	496d      	ldr	r1, [pc, #436]	; (80054a0 <snipCommand+0x20c>)
 80052ea:	0020      	movs	r0, r4
 80052ec:	f00f f990 	bl	8014610 <siprintf>
 80052f0:	e08f      	b.n	8005412 <snipCommand+0x17e>
				switch (snippets[s].cond.buffer1[1])
 80052f2:	00ab      	lsls	r3, r5, #2
 80052f4:	195b      	adds	r3, r3, r5
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4a6a      	ldr	r2, [pc, #424]	; (80054a4 <snipCommand+0x210>)
 80052fa:	18d3      	adds	r3, r2, r3
 80052fc:	78db      	ldrb	r3, [r3, #3]
 80052fe:	2b0b      	cmp	r3, #11
 8005300:	d813      	bhi.n	800532a <snipCommand+0x96>
 8005302:	2b09      	cmp	r3, #9
 8005304:	d233      	bcs.n	800536e <snipCommand+0xda>
 8005306:	2b05      	cmp	r3, #5
 8005308:	d023      	beq.n	8005352 <snipCommand+0xbe>
 800530a:	2b06      	cmp	r3, #6
 800530c:	d14e      	bne.n	80053ac <snipCommand+0x118>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 800530e:	00ab      	lsls	r3, r5, #2
 8005310:	195b      	adds	r3, r3, r5
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4a63      	ldr	r2, [pc, #396]	; (80054a4 <snipCommand+0x210>)
 8005316:	18d2      	adds	r2, r2, r3
 8005318:	7893      	ldrb	r3, [r2, #2]
 800531a:	68d2      	ldr	r2, [r2, #12]
 800531c:	9200      	str	r2, [sp, #0]
 800531e:	0022      	movs	r2, r4
 8005320:	4961      	ldr	r1, [pc, #388]	; (80054a8 <snipCommand+0x214>)
 8005322:	0020      	movs	r0, r4
 8005324:	f00f f974 	bl	8014610 <siprintf>
        		break;
 8005328:	e040      	b.n	80053ac <snipCommand+0x118>
 800532a:	3b0c      	subs	r3, #12
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d83c      	bhi.n	80053ac <snipCommand+0x118>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005332:	00aa      	lsls	r2, r5, #2
 8005334:	1952      	adds	r2, r2, r5
 8005336:	0093      	lsls	r3, r2, #2
 8005338:	4a5a      	ldr	r2, [pc, #360]	; (80054a4 <snipCommand+0x210>)
 800533a:	18d2      	adds	r2, r2, r3
 800533c:	7893      	ldrb	r3, [r2, #2]
 800533e:	7911      	ldrb	r1, [r2, #4]
 8005340:	68d2      	ldr	r2, [r2, #12]
 8005342:	9201      	str	r2, [sp, #4]
 8005344:	9100      	str	r1, [sp, #0]
 8005346:	0022      	movs	r2, r4
 8005348:	4958      	ldr	r1, [pc, #352]	; (80054ac <snipCommand+0x218>)
 800534a:	0020      	movs	r0, r4
 800534c:	f00f f960 	bl	8014610 <siprintf>
        		break;						
 8005350:	e02c      	b.n	80053ac <snipCommand+0x118>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005352:	00ab      	lsls	r3, r5, #2
 8005354:	195b      	adds	r3, r3, r5
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4a52      	ldr	r2, [pc, #328]	; (80054a4 <snipCommand+0x210>)
 800535a:	18d2      	adds	r2, r2, r3
 800535c:	7893      	ldrb	r3, [r2, #2]
 800535e:	68d2      	ldr	r2, [r2, #12]
 8005360:	9200      	str	r2, [sp, #0]
 8005362:	0022      	movs	r2, r4
 8005364:	4952      	ldr	r1, [pc, #328]	; (80054b0 <snipCommand+0x21c>)
 8005366:	0020      	movs	r0, r4
 8005368:	f00f f952 	bl	8014610 <siprintf>
        		break;
 800536c:	e01e      	b.n	80053ac <snipCommand+0x118>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 800536e:	00aa      	lsls	r2, r5, #2
 8005370:	1952      	adds	r2, r2, r5
 8005372:	0093      	lsls	r3, r2, #2
 8005374:	4a4b      	ldr	r2, [pc, #300]	; (80054a4 <snipCommand+0x210>)
 8005376:	18d2      	adds	r2, r2, r3
 8005378:	7893      	ldrb	r3, [r2, #2]
 800537a:	7911      	ldrb	r1, [r2, #4]
 800537c:	68d2      	ldr	r2, [r2, #12]
 800537e:	9201      	str	r2, [sp, #4]
 8005380:	9100      	str	r1, [sp, #0]
 8005382:	0022      	movs	r2, r4
 8005384:	494b      	ldr	r1, [pc, #300]	; (80054b4 <snipCommand+0x220>)
 8005386:	0020      	movs	r0, r4
 8005388:	f00f f942 	bl	8014610 <siprintf>
        		break;
 800538c:	e00e      	b.n	80053ac <snipCommand+0x118>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 800538e:	4f4a      	ldr	r7, [pc, #296]	; (80054b8 <snipCommand+0x224>)
 8005390:	003b      	movs	r3, r7
 8005392:	0022      	movs	r2, r4
 8005394:	4949      	ldr	r1, [pc, #292]	; (80054bc <snipCommand+0x228>)
 8005396:	0020      	movs	r0, r4
 8005398:	f00f f93a 	bl	8014610 <siprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 800539c:	0038      	movs	r0, r7
 800539e:	f7fa febb 	bl	8000118 <strlen>
 80053a2:	0002      	movs	r2, r0
 80053a4:	2100      	movs	r1, #0
 80053a6:	0038      	movs	r0, r7
 80053a8:	f00e f9a1 	bl	80136ee <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 80053ac:	00ab      	lsls	r3, r5, #2
 80053ae:	195b      	adds	r3, r3, r5
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4a3c      	ldr	r2, [pc, #240]	; (80054a4 <snipCommand+0x210>)
 80053b4:	18d3      	adds	r3, r2, r3
 80053b6:	68d8      	ldr	r0, [r3, #12]
 80053b8:	493f      	ldr	r1, [pc, #252]	; (80054b8 <snipCommand+0x224>)
 80053ba:	f7ff fb81 	bl	8004ac0 <ParseSnippetCommand>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d1e5      	bne.n	800538e <snipCommand+0xfa>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 80053c2:	0020      	movs	r0, r4
 80053c4:	f7fa fea8 	bl	8000118 <strlen>
 80053c8:	1820      	adds	r0, r4, r0
 80053ca:	220c      	movs	r2, #12
 80053cc:	493c      	ldr	r1, [pc, #240]	; (80054c0 <snipCommand+0x22c>)
 80053ce:	f00e f985 	bl	80136dc <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80053d2:	0020      	movs	r0, r4
 80053d4:	f7fa fea0 	bl	8000118 <strlen>
 80053d8:	b282      	uxth	r2, r0
 80053da:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <snipCommand+0x204>)
 80053dc:	7818      	ldrb	r0, [r3, #0]
 80053de:	2301      	movs	r3, #1
 80053e0:	425b      	negs	r3, r3
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	3333      	adds	r3, #51	; 0x33
 80053e6:	0021      	movs	r1, r4
 80053e8:	f008 fed2 	bl	800e190 <writePxMutex>
		++count;
 80053ec:	4657      	mov	r7, sl
 80053ee:	3701      	adds	r7, #1
 80053f0:	b2fb      	uxtb	r3, r7
 80053f2:	469a      	mov	sl, r3
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 80053f4:	3601      	adds	r6, #1
 80053f6:	b2f6      	uxtb	r6, r6
 80053f8:	4b32      	ldr	r3, [pc, #200]	; (80054c4 <snipCommand+0x230>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	42b3      	cmp	r3, r6
 80053fe:	d93d      	bls.n	800547c <snipCommand+0x1e8>
		if (snippets[s].cond.conditionType)
 8005400:	0035      	movs	r5, r6
 8005402:	00b3      	lsls	r3, r6, #2
 8005404:	199b      	adds	r3, r3, r6
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4a26      	ldr	r2, [pc, #152]	; (80054a4 <snipCommand+0x210>)
 800540a:	5c9b      	ldrb	r3, [r3, r2]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d000      	beq.n	8005412 <snipCommand+0x17e>
 8005410:	e75f      	b.n	80052d2 <snipCommand+0x3e>
		switch (snippets[s].cond.conditionType)
 8005412:	00ab      	lsls	r3, r5, #2
 8005414:	195b      	adds	r3, r3, r5
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <snipCommand+0x210>)
 800541a:	5c9b      	ldrb	r3, [r3, r2]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d100      	bne.n	8005422 <snipCommand+0x18e>
 8005420:	e767      	b.n	80052f2 <snipCommand+0x5e>
 8005422:	2b03      	cmp	r3, #3
 8005424:	d1c2      	bne.n	80053ac <snipCommand+0x118>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005426:	00ab      	lsls	r3, r5, #2
 8005428:	195b      	adds	r3, r3, r5
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <snipCommand+0x210>)
 800542e:	4698      	mov	r8, r3
 8005430:	4490      	add	r8, r2
 8005432:	4643      	mov	r3, r8
 8005434:	1d99      	adds	r1, r3, #6
 8005436:	2204      	movs	r2, #4
 8005438:	a805      	add	r0, sp, #20
 800543a:	f00e f94f 	bl	80136dc <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 800543e:	4643      	mov	r3, r8
 8005440:	78da      	ldrb	r2, [r3, #3]
 8005442:	3a01      	subs	r2, #1
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	3b01      	subs	r3, #1
 8005448:	0059      	lsls	r1, r3, #1
 800544a:	18cb      	adds	r3, r1, r3
 800544c:	491e      	ldr	r1, [pc, #120]	; (80054c8 <snipCommand+0x234>)
 800544e:	4688      	mov	r8, r1
 8005450:	4498      	add	r8, r3
 8005452:	0053      	lsls	r3, r2, #1
 8005454:	189b      	adds	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4a1c      	ldr	r2, [pc, #112]	; (80054cc <snipCommand+0x238>)
 800545a:	18d3      	adds	r3, r2, r3
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	4699      	mov	r9, r3
 8005460:	9805      	ldr	r0, [sp, #20]
 8005462:	f7fd f817 	bl	8002494 <__aeabi_f2d>
 8005466:	9002      	str	r0, [sp, #8]
 8005468:	9103      	str	r1, [sp, #12]
 800546a:	4643      	mov	r3, r8
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	464b      	mov	r3, r9
 8005470:	0022      	movs	r2, r4
 8005472:	4917      	ldr	r1, [pc, #92]	; (80054d0 <snipCommand+0x23c>)
 8005474:	0020      	movs	r0, r4
 8005476:	f00f f8cb 	bl	8014610 <siprintf>
				break;
 800547a:	e797      	b.n	80053ac <snipCommand+0x118>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 800547c:	22a7      	movs	r2, #167	; 0xa7
 800547e:	4915      	ldr	r1, [pc, #84]	; (80054d4 <snipCommand+0x240>)
 8005480:	0020      	movs	r0, r4
 8005482:	f00e f92b 	bl	80136dc <memcpy>
}
 8005486:	2000      	movs	r0, #0
 8005488:	b00a      	add	sp, #40	; 0x28
 800548a:	bce0      	pop	{r5, r6, r7}
 800548c:	46ba      	mov	sl, r7
 800548e:	46b1      	mov	r9, r6
 8005490:	46a8      	mov	r8, r5
 8005492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005494:	08018368 	.word	0x08018368
 8005498:	200002d7 	.word	0x200002d7
 800549c:	08019094 	.word	0x08019094
 80054a0:	080190cc 	.word	0x080190cc
 80054a4:	20006154 	.word	0x20006154
 80054a8:	080190ec 	.word	0x080190ec
 80054ac:	0801911c 	.word	0x0801911c
 80054b0:	080190d8 	.word	0x080190d8
 80054b4:	08019104 	.word	0x08019104
 80054b8:	20000a7c 	.word	0x20000a7c
 80054bc:	08019148 	.word	0x08019148
 80054c0:	08019150 	.word	0x08019150
 80054c4:	20000a3f 	.word	0x20000a3f
 80054c8:	0801a8d4 	.word	0x0801a8d4
 80054cc:	20000084 	.word	0x20000084
 80054d0:	08019138 	.word	0x08019138
 80054d4:	0801915c 	.word	0x0801915c

080054d8 <idcodeCommand>:
{	
 80054d8:	b510      	push	{r4, lr}
 80054da:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80054dc:	d00c      	beq.n	80054f8 <idcodeCommand+0x20>
	dev = HAL_GetDEVID();
 80054de:	f00b f82f 	bl	8010540 <HAL_GetDEVID>
	switch (dev)
 80054e2:	0403      	lsls	r3, r0, #16
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <idcodeCommand+0x80>)
 80054e8:	4694      	mov	ip, r2
 80054ea:	4463      	add	r3, ip
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d82c      	bhi.n	800554a <idcodeCommand+0x72>
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4a1a      	ldr	r2, [pc, #104]	; (800555c <idcodeCommand+0x84>)
 80054f4:	58d3      	ldr	r3, [r2, r3]
 80054f6:	469f      	mov	pc, r3
	configASSERT( pcWriteBuffer );
 80054f8:	b672      	cpsid	i
 80054fa:	e7fe      	b.n	80054fa <idcodeCommand+0x22>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 80054fc:	4a18      	ldr	r2, [pc, #96]	; (8005560 <idcodeCommand+0x88>)
 80054fe:	4919      	ldr	r1, [pc, #100]	; (8005564 <idcodeCommand+0x8c>)
 8005500:	0020      	movs	r0, r4
 8005502:	f00f f885 	bl	8014610 <siprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 8005506:	f00b f815 	bl	8010534 <HAL_GetREVID>
 800550a:	0b03      	lsrs	r3, r0, #12
 800550c:	0022      	movs	r2, r4
 800550e:	4916      	ldr	r1, [pc, #88]	; (8005568 <idcodeCommand+0x90>)
 8005510:	0020      	movs	r0, r4
 8005512:	f00f f87d 	bl	8014610 <siprintf>
}
 8005516:	2000      	movs	r0, #0
 8005518:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 800551a:	4a14      	ldr	r2, [pc, #80]	; (800556c <idcodeCommand+0x94>)
 800551c:	4911      	ldr	r1, [pc, #68]	; (8005564 <idcodeCommand+0x8c>)
 800551e:	0020      	movs	r0, r4
 8005520:	f00f f876 	bl	8014610 <siprintf>
  		break;
 8005524:	e7ef      	b.n	8005506 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 8005526:	4a12      	ldr	r2, [pc, #72]	; (8005570 <idcodeCommand+0x98>)
 8005528:	490e      	ldr	r1, [pc, #56]	; (8005564 <idcodeCommand+0x8c>)
 800552a:	0020      	movs	r0, r4
 800552c:	f00f f870 	bl	8014610 <siprintf>
  		break;
 8005530:	e7e9      	b.n	8005506 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 8005532:	4a10      	ldr	r2, [pc, #64]	; (8005574 <idcodeCommand+0x9c>)
 8005534:	490b      	ldr	r1, [pc, #44]	; (8005564 <idcodeCommand+0x8c>)
 8005536:	0020      	movs	r0, r4
 8005538:	f00f f86a 	bl	8014610 <siprintf>
  		break;
 800553c:	e7e3      	b.n	8005506 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 800553e:	4a0e      	ldr	r2, [pc, #56]	; (8005578 <idcodeCommand+0xa0>)
 8005540:	4908      	ldr	r1, [pc, #32]	; (8005564 <idcodeCommand+0x8c>)
 8005542:	0020      	movs	r0, r4
 8005544:	f00f f864 	bl	8014610 <siprintf>
  		break;
 8005548:	e7dd      	b.n	8005506 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 800554a:	4a0c      	ldr	r2, [pc, #48]	; (800557c <idcodeCommand+0xa4>)
 800554c:	4905      	ldr	r1, [pc, #20]	; (8005564 <idcodeCommand+0x8c>)
 800554e:	0020      	movs	r0, r4
 8005550:	f00f f85e 	bl	8014610 <siprintf>
  		break;
 8005554:	e7d7      	b.n	8005506 <idcodeCommand+0x2e>
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	fffffbc0 	.word	0xfffffbc0
 800555c:	08019274 	.word	0x08019274
 8005560:	08019204 	.word	0x08019204
 8005564:	08019210 	.word	0x08019210
 8005568:	0801925c 	.word	0x0801925c
 800556c:	08019224 	.word	0x08019224
 8005570:	08019230 	.word	0x08019230
 8005574:	0801923c 	.word	0x0801923c
 8005578:	08019248 	.word	0x08019248
 800557c:	08019254 	.word	0x08019254

08005580 <uuidCommand>:
{
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005584:	d005      	beq.n	8005592 <uuidCommand+0x12>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 8005586:	220e      	movs	r2, #14
 8005588:	490e      	ldr	r1, [pc, #56]	; (80055c4 <uuidCommand+0x44>)
 800558a:	f00e f8a7 	bl	80136dc <memcpy>
	for(uint8_t i=0 ; i<3 ; i++)
 800558e:	2500      	movs	r5, #0
 8005590:	e00c      	b.n	80055ac <uuidCommand+0x2c>
	configASSERT( pcWriteBuffer );
 8005592:	b672      	cpsid	i
 8005594:	e7fe      	b.n	8005594 <uuidCommand+0x14>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 8005596:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <uuidCommand+0x48>)
 8005598:	18eb      	adds	r3, r5, r3
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	0022      	movs	r2, r4
 80055a0:	490a      	ldr	r1, [pc, #40]	; (80055cc <uuidCommand+0x4c>)
 80055a2:	0020      	movs	r0, r4
 80055a4:	f00f f834 	bl	8014610 <siprintf>
	for(uint8_t i=0 ; i<3 ; i++)
 80055a8:	3501      	adds	r5, #1
 80055aa:	b2ed      	uxtb	r5, r5
 80055ac:	2d02      	cmp	r5, #2
 80055ae:	d9f2      	bls.n	8005596 <uuidCommand+0x16>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 80055b0:	0020      	movs	r0, r4
 80055b2:	f7fa fdb1 	bl	8000118 <strlen>
 80055b6:	1820      	adds	r0, r4, r0
 80055b8:	2203      	movs	r2, #3
 80055ba:	4905      	ldr	r1, [pc, #20]	; (80055d0 <uuidCommand+0x50>)
 80055bc:	f00e f88e 	bl	80136dc <memcpy>
}
 80055c0:	2000      	movs	r0, #0
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	08019298 	.word	0x08019298
 80055c8:	07fffdeb 	.word	0x07fffdeb
 80055cc:	080192a8 	.word	0x080192a8
 80055d0:	08019f24 	.word	0x08019f24

080055d4 <timeCommand>:
{
 80055d4:	b530      	push	{r4, r5, lr}
 80055d6:	b085      	sub	sp, #20
 80055d8:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80055da:	d00a      	beq.n	80055f2 <timeCommand+0x1e>
	GetTimeDate();
 80055dc:	f008 fb72 	bl	800dcc4 <GetTimeDate>
	if (BOS.hourformat == 24)
 80055e0:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <timeCommand+0x80>)
 80055e2:	7b5b      	ldrb	r3, [r3, #13]
 80055e4:	2b18      	cmp	r3, #24
 80055e6:	d006      	beq.n	80055f6 <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 80055e8:	2b0c      	cmp	r3, #12
 80055ea:	d010      	beq.n	800560e <timeCommand+0x3a>
}
 80055ec:	2000      	movs	r0, #0
 80055ee:	b005      	add	sp, #20
 80055f0:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 80055f2:	b672      	cpsid	i
 80055f4:	e7fe      	b.n	80055f4 <timeCommand+0x20>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 80055f6:	4917      	ldr	r1, [pc, #92]	; (8005654 <timeCommand+0x80>)
 80055f8:	7c8a      	ldrb	r2, [r1, #18]
 80055fa:	7c4b      	ldrb	r3, [r1, #17]
 80055fc:	7c08      	ldrb	r0, [r1, #16]
 80055fe:	89c9      	ldrh	r1, [r1, #14]
 8005600:	9101      	str	r1, [sp, #4]
 8005602:	9000      	str	r0, [sp, #0]
 8005604:	4914      	ldr	r1, [pc, #80]	; (8005658 <timeCommand+0x84>)
 8005606:	0020      	movs	r0, r4
 8005608:	f00f f802 	bl	8014610 <siprintf>
 800560c:	e7ee      	b.n	80055ec <timeCommand+0x18>
		if (BOS.time.ampm == RTC_AM)
 800560e:	4b11      	ldr	r3, [pc, #68]	; (8005654 <timeCommand+0x80>)
 8005610:	7cdb      	ldrb	r3, [r3, #19]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d00f      	beq.n	8005636 <timeCommand+0x62>
		else if (BOS.time.ampm == RTC_PM)
 8005616:	2b02      	cmp	r3, #2
 8005618:	d1e8      	bne.n	80055ec <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 800561a:	490e      	ldr	r1, [pc, #56]	; (8005654 <timeCommand+0x80>)
 800561c:	7c8a      	ldrb	r2, [r1, #18]
 800561e:	7c4b      	ldrb	r3, [r1, #17]
 8005620:	7c08      	ldrb	r0, [r1, #16]
 8005622:	89c9      	ldrh	r1, [r1, #14]
 8005624:	4d0d      	ldr	r5, [pc, #52]	; (800565c <timeCommand+0x88>)
 8005626:	9502      	str	r5, [sp, #8]
 8005628:	9101      	str	r1, [sp, #4]
 800562a:	9000      	str	r0, [sp, #0]
 800562c:	490c      	ldr	r1, [pc, #48]	; (8005660 <timeCommand+0x8c>)
 800562e:	0020      	movs	r0, r4
 8005630:	f00e ffee 	bl	8014610 <siprintf>
 8005634:	e7da      	b.n	80055ec <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 8005636:	4907      	ldr	r1, [pc, #28]	; (8005654 <timeCommand+0x80>)
 8005638:	7c8a      	ldrb	r2, [r1, #18]
 800563a:	7c4b      	ldrb	r3, [r1, #17]
 800563c:	7c08      	ldrb	r0, [r1, #16]
 800563e:	89c9      	ldrh	r1, [r1, #14]
 8005640:	4d08      	ldr	r5, [pc, #32]	; (8005664 <timeCommand+0x90>)
 8005642:	9502      	str	r5, [sp, #8]
 8005644:	9101      	str	r1, [sp, #4]
 8005646:	9000      	str	r0, [sp, #0]
 8005648:	4905      	ldr	r1, [pc, #20]	; (8005660 <timeCommand+0x8c>)
 800564a:	0020      	movs	r0, r4
 800564c:	f00e ffe0 	bl	8014610 <siprintf>
 8005650:	e7cc      	b.n	80055ec <timeCommand+0x18>
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	20006138 	.word	0x20006138
 8005658:	080192b0 	.word	0x080192b0
 800565c:	08019308 	.word	0x08019308
 8005660:	080192d8 	.word	0x080192d8
 8005664:	08019304 	.word	0x08019304

08005668 <dateCommand>:
{
 8005668:	b510      	push	{r4, lr}
 800566a:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800566c:	d00a      	beq.n	8005684 <dateCommand+0x1c>
	GetTimeDate();
 800566e:	f008 fb29 	bl	800dcc4 <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 8005672:	f7fe fc0f 	bl	8003e94 <GetDateString>
 8005676:	0002      	movs	r2, r0
 8005678:	4903      	ldr	r1, [pc, #12]	; (8005688 <dateCommand+0x20>)
 800567a:	0020      	movs	r0, r4
 800567c:	f00e ffc8 	bl	8014610 <siprintf>
}
 8005680:	2000      	movs	r0, #0
 8005682:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005684:	b672      	cpsid	i
 8005686:	e7fe      	b.n	8005686 <dateCommand+0x1e>
 8005688:	0801930c 	.word	0x0801930c

0800568c <getCommand>:
{
 800568c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800568e:	b083      	sub	sp, #12
 8005690:	0004      	movs	r4, r0
 8005692:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 800569a:	2800      	cmp	r0, #0
 800569c:	d022      	beq.n	80056e4 <getCommand+0x58>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800569e:	aa01      	add	r2, sp, #4
 80056a0:	2101      	movs	r1, #1
 80056a2:	0030      	movs	r0, r6
 80056a4:	f008 ffce 	bl	800e644 <FreeRTOS_CLIGetParameter>
 80056a8:	0005      	movs	r5, r0
 80056aa:	4b7c      	ldr	r3, [pc, #496]	; (800589c <getCommand+0x210>)
 80056ac:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 80056ae:	2204      	movs	r2, #4
 80056b0:	497b      	ldr	r1, [pc, #492]	; (80058a0 <getCommand+0x214>)
 80056b2:	f00e fff0 	bl	8014696 <strncmp>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d000      	beq.n	80056bc <getCommand+0x30>
 80056ba:	e099      	b.n	80057f0 <getCommand+0x164>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 80056bc:	3504      	adds	r5, #4
 80056be:	9b01      	ldr	r3, [sp, #4]
 80056c0:	1f1e      	subs	r6, r3, #4
 80056c2:	0032      	movs	r2, r6
 80056c4:	4977      	ldr	r1, [pc, #476]	; (80058a4 <getCommand+0x218>)
 80056c6:	0028      	movs	r0, r5
 80056c8:	f00e ffe5 	bl	8014696 <strncmp>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d11f      	bne.n	8005710 <getCommand+0x84>
			if (BOS.response == BOS_RESPONSE_ALL)
 80056d0:	4b75      	ldr	r3, [pc, #468]	; (80058a8 <getCommand+0x21c>)
 80056d2:	799d      	ldrb	r5, [r3, #6]
 80056d4:	2d60      	cmp	r5, #96	; 0x60
 80056d6:	d007      	beq.n	80056e8 <getCommand+0x5c>
			else if (BOS.response == BOS_RESPONSE_MSG)
 80056d8:	2d20      	cmp	r5, #32
 80056da:	d00c      	beq.n	80056f6 <getCommand+0x6a>
			else if (BOS.response == BOS_RESPONSE_NONE)
 80056dc:	2d00      	cmp	r5, #0
 80056de:	d011      	beq.n	8005704 <getCommand+0x78>
				result = BOS_ERR_WrongValue;
 80056e0:	2568      	movs	r5, #104	; 0x68
 80056e2:	e0ce      	b.n	8005882 <getCommand+0x1f6>
	configASSERT( pcWriteBuffer );
 80056e4:	b672      	cpsid	i
 80056e6:	e7fe      	b.n	80056e6 <getCommand+0x5a>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80056e8:	4a70      	ldr	r2, [pc, #448]	; (80058ac <getCommand+0x220>)
 80056ea:	4971      	ldr	r1, [pc, #452]	; (80058b0 <getCommand+0x224>)
 80056ec:	0020      	movs	r0, r4
 80056ee:	f00e ff8f 	bl	8014610 <siprintf>
	BOS_Status result = BOS_OK; 
 80056f2:	2500      	movs	r5, #0
 80056f4:	e0c5      	b.n	8005882 <getCommand+0x1f6>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80056f6:	4a6f      	ldr	r2, [pc, #444]	; (80058b4 <getCommand+0x228>)
 80056f8:	496d      	ldr	r1, [pc, #436]	; (80058b0 <getCommand+0x224>)
 80056fa:	0020      	movs	r0, r4
 80056fc:	f00e ff88 	bl	8014610 <siprintf>
	BOS_Status result = BOS_OK; 
 8005700:	2500      	movs	r5, #0
 8005702:	e0be      	b.n	8005882 <getCommand+0x1f6>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8005704:	4a6c      	ldr	r2, [pc, #432]	; (80058b8 <getCommand+0x22c>)
 8005706:	496a      	ldr	r1, [pc, #424]	; (80058b0 <getCommand+0x224>)
 8005708:	0020      	movs	r0, r4
 800570a:	f00e ff81 	bl	8014610 <siprintf>
	if (result == BOS_ERR_WrongParam)
 800570e:	e0b8      	b.n	8005882 <getCommand+0x1f6>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8005710:	0032      	movs	r2, r6
 8005712:	496a      	ldr	r1, [pc, #424]	; (80058bc <getCommand+0x230>)
 8005714:	0028      	movs	r0, r5
 8005716:	f00e ffbe 	bl	8014696 <strncmp>
 800571a:	2800      	cmp	r0, #0
 800571c:	d11d      	bne.n	800575a <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 800571e:	4b62      	ldr	r3, [pc, #392]	; (80058a8 <getCommand+0x21c>)
 8005720:	79dd      	ldrb	r5, [r3, #7]
 8005722:	2d03      	cmp	r5, #3
 8005724:	d005      	beq.n	8005732 <getCommand+0xa6>
			else if (BOS.trace == TRACE_MESSAGE)
 8005726:	2d01      	cmp	r5, #1
 8005728:	d00a      	beq.n	8005740 <getCommand+0xb4>
			else if (BOS.trace == TRACE_NONE)
 800572a:	2d00      	cmp	r5, #0
 800572c:	d00f      	beq.n	800574e <getCommand+0xc2>
				result = BOS_ERR_WrongValue;
 800572e:	2568      	movs	r5, #104	; 0x68
 8005730:	e0a7      	b.n	8005882 <getCommand+0x1f6>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8005732:	4a5e      	ldr	r2, [pc, #376]	; (80058ac <getCommand+0x220>)
 8005734:	495e      	ldr	r1, [pc, #376]	; (80058b0 <getCommand+0x224>)
 8005736:	0020      	movs	r0, r4
 8005738:	f00e ff6a 	bl	8014610 <siprintf>
	BOS_Status result = BOS_OK; 
 800573c:	2500      	movs	r5, #0
 800573e:	e0a0      	b.n	8005882 <getCommand+0x1f6>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8005740:	4a5c      	ldr	r2, [pc, #368]	; (80058b4 <getCommand+0x228>)
 8005742:	495b      	ldr	r1, [pc, #364]	; (80058b0 <getCommand+0x224>)
 8005744:	0020      	movs	r0, r4
 8005746:	f00e ff63 	bl	8014610 <siprintf>
	BOS_Status result = BOS_OK; 
 800574a:	2500      	movs	r5, #0
 800574c:	e099      	b.n	8005882 <getCommand+0x1f6>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 800574e:	4a5a      	ldr	r2, [pc, #360]	; (80058b8 <getCommand+0x22c>)
 8005750:	4957      	ldr	r1, [pc, #348]	; (80058b0 <getCommand+0x224>)
 8005752:	0020      	movs	r0, r4
 8005754:	f00e ff5c 	bl	8014610 <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005758:	e093      	b.n	8005882 <getCommand+0x1f6>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800575a:	0032      	movs	r2, r6
 800575c:	4958      	ldr	r1, [pc, #352]	; (80058c0 <getCommand+0x234>)
 800575e:	0028      	movs	r0, r5
 8005760:	f00e ff99 	bl	8014696 <strncmp>
 8005764:	2800      	cmp	r0, #0
 8005766:	d023      	beq.n	80057b0 <getCommand+0x124>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8005768:	0032      	movs	r2, r6
 800576a:	4956      	ldr	r1, [pc, #344]	; (80058c4 <getCommand+0x238>)
 800576c:	0028      	movs	r0, r5
 800576e:	f00e ff92 	bl	8014696 <strncmp>
 8005772:	2800      	cmp	r0, #0
 8005774:	d024      	beq.n	80057c0 <getCommand+0x134>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8005776:	0032      	movs	r2, r6
 8005778:	4953      	ldr	r1, [pc, #332]	; (80058c8 <getCommand+0x23c>)
 800577a:	0028      	movs	r0, r5
 800577c:	f00e ff8b 	bl	8014696 <strncmp>
 8005780:	2800      	cmp	r0, #0
 8005782:	d025      	beq.n	80057d0 <getCommand+0x144>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8005784:	0032      	movs	r2, r6
 8005786:	4951      	ldr	r1, [pc, #324]	; (80058cc <getCommand+0x240>)
 8005788:	0028      	movs	r0, r5
 800578a:	f00e ff84 	bl	8014696 <strncmp>
 800578e:	2800      	cmp	r0, #0
 8005790:	d026      	beq.n	80057e0 <getCommand+0x154>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8005792:	0032      	movs	r2, r6
 8005794:	494e      	ldr	r1, [pc, #312]	; (80058d0 <getCommand+0x244>)
 8005796:	0028      	movs	r0, r5
 8005798:	f00e ff7d 	bl	8014696 <strncmp>
 800579c:	2800      	cmp	r0, #0
 800579e:	d12e      	bne.n	80057fe <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 80057a0:	4b41      	ldr	r3, [pc, #260]	; (80058a8 <getCommand+0x21c>)
 80057a2:	795a      	ldrb	r2, [r3, #5]
 80057a4:	494b      	ldr	r1, [pc, #300]	; (80058d4 <getCommand+0x248>)
 80057a6:	0020      	movs	r0, r4
 80057a8:	f00e ff32 	bl	8014610 <siprintf>
	BOS_Status result = BOS_OK; 
 80057ac:	2500      	movs	r5, #0
 80057ae:	e068      	b.n	8005882 <getCommand+0x1f6>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 80057b0:	4b3d      	ldr	r3, [pc, #244]	; (80058a8 <getCommand+0x21c>)
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	4947      	ldr	r1, [pc, #284]	; (80058d4 <getCommand+0x248>)
 80057b6:	0020      	movs	r0, r4
 80057b8:	f00e ff2a 	bl	8014610 <siprintf>
	BOS_Status result = BOS_OK; 
 80057bc:	2500      	movs	r5, #0
 80057be:	e060      	b.n	8005882 <getCommand+0x1f6>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 80057c0:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <getCommand+0x21c>)
 80057c2:	881a      	ldrh	r2, [r3, #0]
 80057c4:	4943      	ldr	r1, [pc, #268]	; (80058d4 <getCommand+0x248>)
 80057c6:	0020      	movs	r0, r4
 80057c8:	f00e ff22 	bl	8014610 <siprintf>
	BOS_Status result = BOS_OK; 
 80057cc:	2500      	movs	r5, #0
 80057ce:	e058      	b.n	8005882 <getCommand+0x1f6>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 80057d0:	4b35      	ldr	r3, [pc, #212]	; (80058a8 <getCommand+0x21c>)
 80057d2:	885a      	ldrh	r2, [r3, #2]
 80057d4:	493f      	ldr	r1, [pc, #252]	; (80058d4 <getCommand+0x248>)
 80057d6:	0020      	movs	r0, r4
 80057d8:	f00e ff1a 	bl	8014610 <siprintf>
	BOS_Status result = BOS_OK; 
 80057dc:	2500      	movs	r5, #0
 80057de:	e050      	b.n	8005882 <getCommand+0x1f6>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 80057e0:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <getCommand+0x21c>)
 80057e2:	791a      	ldrb	r2, [r3, #4]
 80057e4:	493b      	ldr	r1, [pc, #236]	; (80058d4 <getCommand+0x248>)
 80057e6:	0020      	movs	r0, r4
 80057e8:	f00e ff12 	bl	8014610 <siprintf>
	BOS_Status result = BOS_OK; 
 80057ec:	2500      	movs	r5, #0
 80057ee:	e048      	b.n	8005882 <getCommand+0x1f6>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 80057f0:	2205      	movs	r2, #5
 80057f2:	4939      	ldr	r1, [pc, #228]	; (80058d8 <getCommand+0x24c>)
 80057f4:	0028      	movs	r0, r5
 80057f6:	f00e ff4e 	bl	8014696 <strncmp>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d005      	beq.n	800580a <getCommand+0x17e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 80057fe:	2213      	movs	r2, #19
 8005800:	4936      	ldr	r1, [pc, #216]	; (80058dc <getCommand+0x250>)
 8005802:	0020      	movs	r0, r4
 8005804:	f00d ff6a 	bl	80136dc <memcpy>
 8005808:	e03d      	b.n	8005886 <getCommand+0x1fa>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800580a:	466a      	mov	r2, sp
 800580c:	2102      	movs	r1, #2
 800580e:	0030      	movs	r0, r6
 8005810:	f008 ff18 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005814:	0007      	movs	r7, r0
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8005816:	2600      	movs	r6, #0
 8005818:	2e09      	cmp	r6, #9
 800581a:	d80c      	bhi.n	8005836 <getCommand+0x1aa>
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 800581c:	00b1      	lsls	r1, r6, #2
 800581e:	1989      	adds	r1, r1, r6
 8005820:	0049      	lsls	r1, r1, #1
 8005822:	4b2f      	ldr	r3, [pc, #188]	; (80058e0 <getCommand+0x254>)
 8005824:	18c9      	adds	r1, r1, r3
 8005826:	0038      	movs	r0, r7
 8005828:	f7fa fc6c 	bl	8000104 <strcmp>
 800582c:	2800      	cmp	r0, #0
 800582e:	d00b      	beq.n	8005848 <getCommand+0x1bc>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8005830:	3601      	adds	r6, #1
 8005832:	b2f6      	uxtb	r6, r6
 8005834:	e7f0      	b.n	8005818 <getCommand+0x18c>
		temp8 = 0;
 8005836:	2500      	movs	r5, #0
		if (!temp8)
 8005838:	2d00      	cmp	r5, #0
 800583a:	d007      	beq.n	800584c <getCommand+0x1c0>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 800583c:	003a      	movs	r2, r7
 800583e:	4929      	ldr	r1, [pc, #164]	; (80058e4 <getCommand+0x258>)
 8005840:	0020      	movs	r0, r4
 8005842:	f00e fee5 	bl	8014610 <siprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 8005846:	e009      	b.n	800585c <getCommand+0x1d0>
				temp8 = 1; break;
 8005848:	2501      	movs	r5, #1
 800584a:	e7f5      	b.n	8005838 <getCommand+0x1ac>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 800584c:	003a      	movs	r2, r7
 800584e:	4926      	ldr	r1, [pc, #152]	; (80058e8 <getCommand+0x25c>)
 8005850:	0020      	movs	r0, r4
 8005852:	f00e fedd 	bl	8014610 <siprintf>
			return pdFALSE;
 8005856:	e016      	b.n	8005886 <getCommand+0x1fa>
			for(j=1 ; j<=N ; j++)						// N modules
 8005858:	3501      	adds	r5, #1
 800585a:	b2ed      	uxtb	r5, r5
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <getCommand+0x260>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	42ab      	cmp	r3, r5
 8005862:	d30d      	bcc.n	8005880 <getCommand+0x1f4>
				if (InGroup(j, i))
 8005864:	1e6b      	subs	r3, r5, #1
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4a21      	ldr	r2, [pc, #132]	; (80058f0 <getCommand+0x264>)
 800586a:	5a9b      	ldrh	r3, [r3, r2]
 800586c:	4133      	asrs	r3, r6
 800586e:	07db      	lsls	r3, r3, #31
 8005870:	d5f2      	bpl.n	8005858 <getCommand+0x1cc>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 8005872:	002b      	movs	r3, r5
 8005874:	0022      	movs	r2, r4
 8005876:	491f      	ldr	r1, [pc, #124]	; (80058f4 <getCommand+0x268>)
 8005878:	0020      	movs	r0, r4
 800587a:	f00e fec9 	bl	8014610 <siprintf>
 800587e:	e7eb      	b.n	8005858 <getCommand+0x1cc>
	BOS_Status result = BOS_OK; 
 8005880:	2500      	movs	r5, #0
	else if (result == BOS_ERR_WrongValue)
 8005882:	2d68      	cmp	r5, #104	; 0x68
 8005884:	d002      	beq.n	800588c <getCommand+0x200>
}
 8005886:	2000      	movs	r0, #0
 8005888:	b003      	add	sp, #12
 800588a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 800588c:	4b03      	ldr	r3, [pc, #12]	; (800589c <getCommand+0x210>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	4919      	ldr	r1, [pc, #100]	; (80058f8 <getCommand+0x26c>)
 8005892:	0020      	movs	r0, r4
 8005894:	f00e febc 	bl	8014610 <siprintf>
 8005898:	e7f5      	b.n	8005886 <getCommand+0x1fa>
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	20000ac0 	.word	0x20000ac0
 80058a0:	08019324 	.word	0x08019324
 80058a4:	0801932c 	.word	0x0801932c
 80058a8:	20006138 	.word	0x20006138
 80058ac:	08018668 	.word	0x08018668
 80058b0:	08018530 	.word	0x08018530
 80058b4:	08019338 	.word	0x08019338
 80058b8:	0801933c 	.word	0x0801933c
 80058bc:	08019344 	.word	0x08019344
 80058c0:	0801934c 	.word	0x0801934c
 80058c4:	08019358 	.word	0x08019358
 80058c8:	08019364 	.word	0x08019364
 80058cc:	08019374 	.word	0x08019374
 80058d0:	08019388 	.word	0x08019388
 80058d4:	08018b00 	.word	0x08018b00
 80058d8:	0801939c 	.word	0x0801939c
 80058dc:	080193dc 	.word	0x080193dc
 80058e0:	20000684 	.word	0x20000684
 80058e4:	080193c0 	.word	0x080193c0
 80058e8:	080193a4 	.word	0x080193a4
 80058ec:	2000001c 	.word	0x2000001c
 80058f0:	200006e8 	.word	0x200006e8
 80058f4:	080193d4 	.word	0x080193d4
 80058f8:	080193f0 	.word	0x080193f0

080058fc <defaultCommand>:
{
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	0004      	movs	r4, r0
 8005902:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005908:	2c00      	cmp	r4, #0
 800590a:	d01a      	beq.n	8005942 <defaultCommand+0x46>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800590c:	aa01      	add	r2, sp, #4
 800590e:	2101      	movs	r1, #1
 8005910:	f008 fe98 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005914:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 8005916:	9e01      	ldr	r6, [sp, #4]
 8005918:	0032      	movs	r2, r6
 800591a:	491f      	ldr	r1, [pc, #124]	; (8005998 <defaultCommand+0x9c>)
 800591c:	f00e febb 	bl	8014696 <strncmp>
 8005920:	2800      	cmp	r0, #0
 8005922:	d010      	beq.n	8005946 <defaultCommand+0x4a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 8005924:	0032      	movs	r2, r6
 8005926:	491d      	ldr	r1, [pc, #116]	; (800599c <defaultCommand+0xa0>)
 8005928:	0028      	movs	r0, r5
 800592a:	f00e feb4 	bl	8014696 <strncmp>
 800592e:	2800      	cmp	r0, #0
 8005930:	d01a      	beq.n	8005968 <defaultCommand+0x6c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8005932:	220f      	movs	r2, #15
 8005934:	491a      	ldr	r1, [pc, #104]	; (80059a0 <defaultCommand+0xa4>)
 8005936:	0020      	movs	r0, r4
 8005938:	f00d fed0 	bl	80136dc <memcpy>
}
 800593c:	2000      	movs	r0, #0
 800593e:	b002      	add	sp, #8
 8005940:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8005942:	b672      	cpsid	i
 8005944:	e7fe      	b.n	8005944 <defaultCommand+0x48>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 8005946:	4917      	ldr	r1, [pc, #92]	; (80059a4 <defaultCommand+0xa8>)
 8005948:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <defaultCommand+0xac>)
 800594a:	000a      	movs	r2, r1
 800594c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800594e:	c223      	stmia	r2!, {r0, r1, r5}
 8005950:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005952:	c223      	stmia	r2!, {r0, r1, r5}
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8005958:	f7fd fa34 	bl	8002dc4 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 800595c:	2227      	movs	r2, #39	; 0x27
 800595e:	4913      	ldr	r1, [pc, #76]	; (80059ac <defaultCommand+0xb0>)
 8005960:	0020      	movs	r0, r4
 8005962:	f00d febb 	bl	80136dc <memcpy>
	if (result == BOS_ERR_WrongValue)
 8005966:	e7e9      	b.n	800593c <defaultCommand+0x40>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8005968:	2200      	movs	r2, #0
 800596a:	2116      	movs	r1, #22
 800596c:	20ff      	movs	r0, #255	; 0xff
 800596e:	f002 ff95 	bl	800889c <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 8005972:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <defaultCommand+0xb4>)
 8005974:	2202      	movs	r2, #2
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	2064      	movs	r0, #100	; 0x64
 800597a:	f008 fd3f 	bl	800e3fc <osDelay>
		ClearEEportsDir();
 800597e:	f7fc ff89 	bl	8002894 <ClearEEportsDir>
		ClearROtopology();
 8005982:	f005 fc41 	bl	800b208 <ClearROtopology>
		osDelay(100);
 8005986:	2064      	movs	r0, #100	; 0x64
 8005988:	f008 fd38 	bl	800e3fc <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 800598c:	2240      	movs	r2, #64	; 0x40
 800598e:	4909      	ldr	r1, [pc, #36]	; (80059b4 <defaultCommand+0xb8>)
 8005990:	0020      	movs	r0, r4
 8005992:	f00d fea3 	bl	80136dc <memcpy>
	if (result == BOS_ERR_WrongValue)
 8005996:	e7d1      	b.n	800593c <defaultCommand+0x40>
 8005998:	08019410 	.word	0x08019410
 800599c:	08019440 	.word	0x08019440
 80059a0:	08019448 	.word	0x08019448
 80059a4:	20006138 	.word	0x20006138
 80059a8:	20000000 	.word	0x20000000
 80059ac:	08019418 	.word	0x08019418
 80059b0:	2000071c 	.word	0x2000071c
 80059b4:	08019458 	.word	0x08019458

080059b8 <setCommand>:
{
 80059b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ba:	46ce      	mov	lr, r9
 80059bc:	4647      	mov	r7, r8
 80059be:	b580      	push	{r7, lr}
 80059c0:	b08d      	sub	sp, #52	; 0x34
 80059c2:	0007      	movs	r7, r0
 80059c4:	0014      	movs	r4, r2
 80059c6:	2600      	movs	r6, #0
 80059c8:	2300      	movs	r3, #0
 80059ca:	4698      	mov	r8, r3
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 80059cc:	960b      	str	r6, [sp, #44]	; 0x2c
 80059ce:	960a      	str	r6, [sp, #40]	; 0x28
 80059d0:	9609      	str	r6, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 80059d2:	9608      	str	r6, [sp, #32]
 80059d4:	9607      	str	r6, [sp, #28]
	configASSERT( pcWriteBuffer );
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d02c      	beq.n	8005a34 <setCommand+0x7c>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80059da:	aa0b      	add	r2, sp, #44	; 0x2c
 80059dc:	2101      	movs	r1, #1
 80059de:	0020      	movs	r0, r4
 80059e0:	f008 fe30 	bl	800e644 <FreeRTOS_CLIGetParameter>
 80059e4:	0005      	movs	r5, r0
 80059e6:	4bb9      	ldr	r3, [pc, #740]	; (8005ccc <setCommand+0x314>)
 80059e8:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 80059ea:	2204      	movs	r2, #4
 80059ec:	49b8      	ldr	r1, [pc, #736]	; (8005cd0 <setCommand+0x318>)
 80059ee:	f00e fe52 	bl	8014696 <strncmp>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d020      	beq.n	8005a38 <setCommand+0x80>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 80059f6:	2204      	movs	r2, #4
 80059f8:	49b6      	ldr	r1, [pc, #728]	; (8005cd4 <setCommand+0x31c>)
 80059fa:	0028      	movs	r0, r5
 80059fc:	f00e fe4b 	bl	8014696 <strncmp>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d100      	bne.n	8005a06 <setCommand+0x4e>
 8005a04:	e184      	b.n	8005d10 <setCommand+0x358>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 8005a06:	2204      	movs	r2, #4
 8005a08:	49b3      	ldr	r1, [pc, #716]	; (8005cd8 <setCommand+0x320>)
 8005a0a:	0028      	movs	r0, r5
 8005a0c:	f00e fe43 	bl	8014696 <strncmp>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d100      	bne.n	8005a16 <setCommand+0x5e>
 8005a14:	e1dd      	b.n	8005dd2 <setCommand+0x41a>
		result = BOS_ERR_WrongParam;
 8005a16:	2467      	movs	r4, #103	; 0x67
	else if (result == BOS_ERR_WrongParam)
 8005a18:	2c67      	cmp	r4, #103	; 0x67
 8005a1a:	d101      	bne.n	8005a20 <setCommand+0x68>
 8005a1c:	f000 fbea 	bl	80061f4 <setCommand+0x83c>
	else if (result == BOS_ERR_WrongValue)
 8005a20:	2c68      	cmp	r4, #104	; 0x68
 8005a22:	d101      	bne.n	8005a28 <setCommand+0x70>
 8005a24:	f000 fbed 	bl	8006202 <setCommand+0x84a>
}
 8005a28:	2000      	movs	r0, #0
 8005a2a:	b00d      	add	sp, #52	; 0x34
 8005a2c:	bcc0      	pop	{r6, r7}
 8005a2e:	46b9      	mov	r9, r7
 8005a30:	46b0      	mov	r8, r6
 8005a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8005a34:	b672      	cpsid	i
 8005a36:	e7fe      	b.n	8005a36 <setCommand+0x7e>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005a38:	aa0a      	add	r2, sp, #40	; 0x28
 8005a3a:	2102      	movs	r1, #2
 8005a3c:	0020      	movs	r0, r4
 8005a3e:	f008 fe01 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005a42:	0004      	movs	r4, r0
 8005a44:	4ba5      	ldr	r3, [pc, #660]	; (8005cdc <setCommand+0x324>)
 8005a46:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8005a48:	4ba0      	ldr	r3, [pc, #640]	; (8005ccc <setCommand+0x314>)
 8005a4a:	681d      	ldr	r5, [r3, #0]
 8005a4c:	3504      	adds	r5, #4
 8005a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a50:	1f1e      	subs	r6, r3, #4
 8005a52:	0032      	movs	r2, r6
 8005a54:	49a2      	ldr	r1, [pc, #648]	; (8005ce0 <setCommand+0x328>)
 8005a56:	0028      	movs	r0, r5
 8005a58:	f00e fe1d 	bl	8014696 <strncmp>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d156      	bne.n	8005b0e <setCommand+0x156>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8005a60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005a62:	002a      	movs	r2, r5
 8005a64:	499f      	ldr	r1, [pc, #636]	; (8005ce4 <setCommand+0x32c>)
 8005a66:	0020      	movs	r0, r4
 8005a68:	f00e fe15 	bl	8014696 <strncmp>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d016      	beq.n	8005a9e <setCommand+0xe6>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8005a70:	002a      	movs	r2, r5
 8005a72:	499d      	ldr	r1, [pc, #628]	; (8005ce8 <setCommand+0x330>)
 8005a74:	0020      	movs	r0, r4
 8005a76:	f00e fe0e 	bl	8014696 <strncmp>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d01e      	beq.n	8005abc <setCommand+0x104>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 8005a7e:	002a      	movs	r2, r5
 8005a80:	499a      	ldr	r1, [pc, #616]	; (8005cec <setCommand+0x334>)
 8005a82:	0020      	movs	r0, r4
 8005a84:	f00e fe07 	bl	8014696 <strncmp>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d026      	beq.n	8005ada <setCommand+0x122>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8005a8c:	002a      	movs	r2, r5
 8005a8e:	4998      	ldr	r1, [pc, #608]	; (8005cf0 <setCommand+0x338>)
 8005a90:	0020      	movs	r0, r4
 8005a92:	f00e fe00 	bl	8014696 <strncmp>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d02e      	beq.n	8005af8 <setCommand+0x140>
				result = BOS_ERR_WrongValue;
 8005a9a:	2468      	movs	r4, #104	; 0x68
 8005a9c:	e7bc      	b.n	8005a18 <setCommand+0x60>
				BOS.response = BOS_RESPONSE_ALL;
 8005a9e:	4b95      	ldr	r3, [pc, #596]	; (8005cf4 <setCommand+0x33c>)
 8005aa0:	2260      	movs	r2, #96	; 0x60
 8005aa2:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005aa4:	79d9      	ldrb	r1, [r3, #7]
 8005aa6:	0209      	lsls	r1, r1, #8
 8005aa8:	2360      	movs	r3, #96	; 0x60
 8005aaa:	4319      	orrs	r1, r3
 8005aac:	b209      	sxth	r1, r1
 8005aae:	b289      	uxth	r1, r1
 8005ab0:	308a      	adds	r0, #138	; 0x8a
 8005ab2:	0040      	lsls	r0, r0, #1
 8005ab4:	f001 faba 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005ab8:	2400      	movs	r4, #0
 8005aba:	e36d      	b.n	8006198 <setCommand+0x7e0>
				BOS.response = BOS_RESPONSE_MSG;
 8005abc:	4b8d      	ldr	r3, [pc, #564]	; (8005cf4 <setCommand+0x33c>)
 8005abe:	2220      	movs	r2, #32
 8005ac0:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005ac2:	79d9      	ldrb	r1, [r3, #7]
 8005ac4:	0209      	lsls	r1, r1, #8
 8005ac6:	2320      	movs	r3, #32
 8005ac8:	4319      	orrs	r1, r3
 8005aca:	b209      	sxth	r1, r1
 8005acc:	b289      	uxth	r1, r1
 8005ace:	308a      	adds	r0, #138	; 0x8a
 8005ad0:	0040      	lsls	r0, r0, #1
 8005ad2:	f001 faab 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005ad6:	2400      	movs	r4, #0
 8005ad8:	e35e      	b.n	8006198 <setCommand+0x7e0>
				BOS.response = BOS_RESPONSE_CLI;
 8005ada:	4b86      	ldr	r3, [pc, #536]	; (8005cf4 <setCommand+0x33c>)
 8005adc:	2240      	movs	r2, #64	; 0x40
 8005ade:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005ae0:	79d9      	ldrb	r1, [r3, #7]
 8005ae2:	0209      	lsls	r1, r1, #8
 8005ae4:	2340      	movs	r3, #64	; 0x40
 8005ae6:	4319      	orrs	r1, r3
 8005ae8:	b209      	sxth	r1, r1
 8005aea:	b289      	uxth	r1, r1
 8005aec:	308a      	adds	r0, #138	; 0x8a
 8005aee:	0040      	lsls	r0, r0, #1
 8005af0:	f001 fa9c 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005af4:	2400      	movs	r4, #0
 8005af6:	e34f      	b.n	8006198 <setCommand+0x7e0>
				BOS.response = BOS_RESPONSE_NONE;
 8005af8:	4b7e      	ldr	r3, [pc, #504]	; (8005cf4 <setCommand+0x33c>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005afe:	79d9      	ldrb	r1, [r3, #7]
 8005b00:	0209      	lsls	r1, r1, #8
 8005b02:	308a      	adds	r0, #138	; 0x8a
 8005b04:	0040      	lsls	r0, r0, #1
 8005b06:	f001 fa91 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005b0a:	2400      	movs	r4, #0
 8005b0c:	e344      	b.n	8006198 <setCommand+0x7e0>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8005b0e:	0032      	movs	r2, r6
 8005b10:	4979      	ldr	r1, [pc, #484]	; (8005cf8 <setCommand+0x340>)
 8005b12:	0028      	movs	r0, r5
 8005b14:	f00e fdbf 	bl	8014696 <strncmp>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d14f      	bne.n	8005bbc <setCommand+0x204>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8005b1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005b1e:	002a      	movs	r2, r5
 8005b20:	4970      	ldr	r1, [pc, #448]	; (8005ce4 <setCommand+0x32c>)
 8005b22:	0020      	movs	r0, r4
 8005b24:	f00e fdb7 	bl	8014696 <strncmp>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d016      	beq.n	8005b5a <setCommand+0x1a2>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8005b2c:	002a      	movs	r2, r5
 8005b2e:	496e      	ldr	r1, [pc, #440]	; (8005ce8 <setCommand+0x330>)
 8005b30:	0020      	movs	r0, r4
 8005b32:	f00e fdb0 	bl	8014696 <strncmp>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d01c      	beq.n	8005b74 <setCommand+0x1bc>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8005b3a:	002a      	movs	r2, r5
 8005b3c:	4968      	ldr	r1, [pc, #416]	; (8005ce0 <setCommand+0x328>)
 8005b3e:	0020      	movs	r0, r4
 8005b40:	f00e fda9 	bl	8014696 <strncmp>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d022      	beq.n	8005b8e <setCommand+0x1d6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8005b48:	002a      	movs	r2, r5
 8005b4a:	4969      	ldr	r1, [pc, #420]	; (8005cf0 <setCommand+0x338>)
 8005b4c:	0020      	movs	r0, r4
 8005b4e:	f00e fda2 	bl	8014696 <strncmp>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d028      	beq.n	8005ba8 <setCommand+0x1f0>
				result = BOS_ERR_WrongValue;
 8005b56:	2468      	movs	r4, #104	; 0x68
 8005b58:	e75e      	b.n	8005a18 <setCommand+0x60>
				BOS.trace = TRACE_BOTH;
 8005b5a:	4b66      	ldr	r3, [pc, #408]	; (8005cf4 <setCommand+0x33c>)
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005b60:	799b      	ldrb	r3, [r3, #6]
 8005b62:	21c0      	movs	r1, #192	; 0xc0
 8005b64:	0089      	lsls	r1, r1, #2
 8005b66:	4319      	orrs	r1, r3
 8005b68:	308a      	adds	r0, #138	; 0x8a
 8005b6a:	0040      	lsls	r0, r0, #1
 8005b6c:	f001 fa5e 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005b70:	2400      	movs	r4, #0
 8005b72:	e311      	b.n	8006198 <setCommand+0x7e0>
				BOS.trace = TRACE_MESSAGE;
 8005b74:	4b5f      	ldr	r3, [pc, #380]	; (8005cf4 <setCommand+0x33c>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005b7a:	799b      	ldrb	r3, [r3, #6]
 8005b7c:	2180      	movs	r1, #128	; 0x80
 8005b7e:	0049      	lsls	r1, r1, #1
 8005b80:	4319      	orrs	r1, r3
 8005b82:	308a      	adds	r0, #138	; 0x8a
 8005b84:	0040      	lsls	r0, r0, #1
 8005b86:	f001 fa51 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005b8a:	2400      	movs	r4, #0
 8005b8c:	e304      	b.n	8006198 <setCommand+0x7e0>
				BOS.trace = TRACE_RESPONSE;
 8005b8e:	4b59      	ldr	r3, [pc, #356]	; (8005cf4 <setCommand+0x33c>)
 8005b90:	2202      	movs	r2, #2
 8005b92:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005b94:	799b      	ldrb	r3, [r3, #6]
 8005b96:	2180      	movs	r1, #128	; 0x80
 8005b98:	0089      	lsls	r1, r1, #2
 8005b9a:	4319      	orrs	r1, r3
 8005b9c:	308a      	adds	r0, #138	; 0x8a
 8005b9e:	0040      	lsls	r0, r0, #1
 8005ba0:	f001 fa44 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005ba4:	2400      	movs	r4, #0
 8005ba6:	e2f7      	b.n	8006198 <setCommand+0x7e0>
				BOS.trace = TRACE_NONE;
 8005ba8:	4b52      	ldr	r3, [pc, #328]	; (8005cf4 <setCommand+0x33c>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8005bae:	7999      	ldrb	r1, [r3, #6]
 8005bb0:	308a      	adds	r0, #138	; 0x8a
 8005bb2:	0040      	lsls	r0, r0, #1
 8005bb4:	f001 fa3a 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005bb8:	2400      	movs	r4, #0
 8005bba:	e2ed      	b.n	8006198 <setCommand+0x7e0>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8005bbc:	0032      	movs	r2, r6
 8005bbe:	494f      	ldr	r1, [pc, #316]	; (8005cfc <setCommand+0x344>)
 8005bc0:	0028      	movs	r0, r5
 8005bc2:	f00e fd68 	bl	8014696 <strncmp>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d01d      	beq.n	8005c06 <setCommand+0x24e>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8005bca:	0032      	movs	r2, r6
 8005bcc:	494c      	ldr	r1, [pc, #304]	; (8005d00 <setCommand+0x348>)
 8005bce:	0028      	movs	r0, r5
 8005bd0:	f00e fd61 	bl	8014696 <strncmp>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d02d      	beq.n	8005c34 <setCommand+0x27c>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8005bd8:	0032      	movs	r2, r6
 8005bda:	494a      	ldr	r1, [pc, #296]	; (8005d04 <setCommand+0x34c>)
 8005bdc:	0028      	movs	r0, r5
 8005bde:	f00e fd5a 	bl	8014696 <strncmp>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d036      	beq.n	8005c54 <setCommand+0x29c>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8005be6:	0032      	movs	r2, r6
 8005be8:	4947      	ldr	r1, [pc, #284]	; (8005d08 <setCommand+0x350>)
 8005bea:	0028      	movs	r0, r5
 8005bec:	f00e fd53 	bl	8014696 <strncmp>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d03f      	beq.n	8005c74 <setCommand+0x2bc>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8005bf4:	0032      	movs	r2, r6
 8005bf6:	4945      	ldr	r1, [pc, #276]	; (8005d0c <setCommand+0x354>)
 8005bf8:	0028      	movs	r0, r5
 8005bfa:	f00e fd4c 	bl	8014696 <strncmp>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d04e      	beq.n	8005ca0 <setCommand+0x2e8>
			result = BOS_ERR_WrongParam;
 8005c02:	2467      	movs	r4, #103	; 0x67
 8005c04:	e708      	b.n	8005a18 <setCommand+0x60>
			temp2 = atoi((const char *)pcParameterString2);
 8005c06:	0020      	movs	r0, r4
 8005c08:	f00d fd15 	bl	8013636 <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 8005c0c:	23e1      	movs	r3, #225	; 0xe1
 8005c0e:	031b      	lsls	r3, r3, #12
 8005c10:	4298      	cmp	r0, r3
 8005c12:	d901      	bls.n	8005c18 <setCommand+0x260>
				result = BOS_ERR_WrongValue;			
 8005c14:	2468      	movs	r4, #104	; 0x68
 8005c16:	e6ff      	b.n	8005a18 <setCommand+0x60>
				BOS.clibaudrate = temp2;
 8005c18:	4c36      	ldr	r4, [pc, #216]	; (8005cf4 <setCommand+0x33c>)
 8005c1a:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8005c1c:	b281      	uxth	r1, r0
 8005c1e:	208c      	movs	r0, #140	; 0x8c
 8005c20:	0040      	lsls	r0, r0, #1
 8005c22:	f001 fa03 	bl	800702c <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8005c26:	8961      	ldrh	r1, [r4, #10]
 8005c28:	201a      	movs	r0, #26
 8005c2a:	30ff      	adds	r0, #255	; 0xff
 8005c2c:	f001 f9fe 	bl	800702c <EE_WriteVariable>
				extraMessage = 1;
 8005c30:	2401      	movs	r4, #1
 8005c32:	e2b1      	b.n	8006198 <setCommand+0x7e0>
			temp16 = atoi((const char *)pcParameterString2);
 8005c34:	0020      	movs	r0, r4
 8005c36:	f00d fcfe 	bl	8013636 <atoi>
 8005c3a:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d101      	bne.n	8005c44 <setCommand+0x28c>
				result = BOS_ERR_WrongValue;
 8005c40:	2468      	movs	r4, #104	; 0x68
 8005c42:	e6e9      	b.n	8005a18 <setCommand+0x60>
				BOS.buttons.debounce = temp16;
 8005c44:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <setCommand+0x33c>)
 8005c46:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 8005c48:	2016      	movs	r0, #22
 8005c4a:	30ff      	adds	r0, #255	; 0xff
 8005c4c:	f001 f9ee 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005c50:	2400      	movs	r4, #0
 8005c52:	e2a1      	b.n	8006198 <setCommand+0x7e0>
			temp16 = atoi((const char *)pcParameterString2);
 8005c54:	0020      	movs	r0, r4
 8005c56:	f00d fcee 	bl	8013636 <atoi>
 8005c5a:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8005c5c:	2900      	cmp	r1, #0
 8005c5e:	d101      	bne.n	8005c64 <setCommand+0x2ac>
				result = BOS_ERR_WrongValue;			
 8005c60:	2468      	movs	r4, #104	; 0x68
 8005c62:	e6d9      	b.n	8005a18 <setCommand+0x60>
				BOS.buttons.singleClickTime = temp16;
 8005c64:	4b23      	ldr	r3, [pc, #140]	; (8005cf4 <setCommand+0x33c>)
 8005c66:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8005c68:	208b      	movs	r0, #139	; 0x8b
 8005c6a:	0040      	lsls	r0, r0, #1
 8005c6c:	f001 f9de 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005c70:	2400      	movs	r4, #0
 8005c72:	e291      	b.n	8006198 <setCommand+0x7e0>
			temp16 = atoi((const char *)pcParameterString2);
 8005c74:	0020      	movs	r0, r4
 8005c76:	f00d fcde 	bl	8013636 <atoi>
 8005c7a:	b283      	uxth	r3, r0
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2bfe      	cmp	r3, #254	; 0xfe
 8005c82:	d901      	bls.n	8005c88 <setCommand+0x2d0>
				result = BOS_ERR_WrongValue;			
 8005c84:	2468      	movs	r4, #104	; 0x68
 8005c86:	e6c7      	b.n	8005a18 <setCommand+0x60>
				BOS.buttons.minInterClickTime = temp16;
 8005c88:	b2c0      	uxtb	r0, r0
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <setCommand+0x33c>)
 8005c8c:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8005c8e:	7959      	ldrb	r1, [r3, #5]
 8005c90:	0209      	lsls	r1, r1, #8
 8005c92:	4301      	orrs	r1, r0
 8005c94:	2018      	movs	r0, #24
 8005c96:	30ff      	adds	r0, #255	; 0xff
 8005c98:	f001 f9c8 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005c9c:	2400      	movs	r4, #0
 8005c9e:	e27b      	b.n	8006198 <setCommand+0x7e0>
			temp16 = atoi((const char *)pcParameterString2);
 8005ca0:	0020      	movs	r0, r4
 8005ca2:	f00d fcc8 	bl	8013636 <atoi>
 8005ca6:	b283      	uxth	r3, r0
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2bfe      	cmp	r3, #254	; 0xfe
 8005cae:	d901      	bls.n	8005cb4 <setCommand+0x2fc>
				result = BOS_ERR_WrongValue;					
 8005cb0:	2468      	movs	r4, #104	; 0x68
 8005cb2:	e6b1      	b.n	8005a18 <setCommand+0x60>
				BOS.buttons.maxInterClickTime = temp16;
 8005cb4:	b2c0      	uxtb	r0, r0
 8005cb6:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <setCommand+0x33c>)
 8005cb8:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8005cba:	0200      	lsls	r0, r0, #8
 8005cbc:	7919      	ldrb	r1, [r3, #4]
 8005cbe:	4301      	orrs	r1, r0
 8005cc0:	2018      	movs	r0, #24
 8005cc2:	30ff      	adds	r0, #255	; 0xff
 8005cc4:	f001 f9b2 	bl	800702c <EE_WriteVariable>
	uint16_t temp16 = 0; uint32_t temp2 = 0; uint8_t extraMessage = 0, temp81, temp82, temp83, temp84;
 8005cc8:	2400      	movs	r4, #0
 8005cca:	e265      	b.n	8006198 <setCommand+0x7e0>
 8005ccc:	20000abc 	.word	0x20000abc
 8005cd0:	08019324 	.word	0x08019324
 8005cd4:	080194a4 	.word	0x080194a4
 8005cd8:	080194b0 	.word	0x080194b0
 8005cdc:	20000ac4 	.word	0x20000ac4
 8005ce0:	0801932c 	.word	0x0801932c
 8005ce4:	08018668 	.word	0x08018668
 8005ce8:	08019498 	.word	0x08019498
 8005cec:	080194a0 	.word	0x080194a0
 8005cf0:	0801933c 	.word	0x0801933c
 8005cf4:	20006138 	.word	0x20006138
 8005cf8:	08019344 	.word	0x08019344
 8005cfc:	0801934c 	.word	0x0801934c
 8005d00:	08019358 	.word	0x08019358
 8005d04:	08019364 	.word	0x08019364
 8005d08:	08019374 	.word	0x08019374
 8005d0c:	08019388 	.word	0x08019388
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005d10:	aa0a      	add	r2, sp, #40	; 0x28
 8005d12:	2102      	movs	r1, #2
 8005d14:	0020      	movs	r0, r4
 8005d16:	f008 fc95 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005d1a:	4bdc      	ldr	r3, [pc, #880]	; (800608c <setCommand+0x6d4>)
 8005d1c:	4699      	mov	r9, r3
 8005d1e:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8005d20:	aa09      	add	r2, sp, #36	; 0x24
 8005d22:	2103      	movs	r1, #3
 8005d24:	0020      	movs	r0, r4
 8005d26:	f008 fc8d 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005d2a:	4ed9      	ldr	r6, [pc, #868]	; (8006090 <setCommand+0x6d8>)
 8005d2c:	6030      	str	r0, [r6, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8005d2e:	aa08      	add	r2, sp, #32
 8005d30:	2104      	movs	r1, #4
 8005d32:	0020      	movs	r0, r4
 8005d34:	f008 fc86 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005d38:	4dd6      	ldr	r5, [pc, #856]	; (8006094 <setCommand+0x6dc>)
 8005d3a:	6028      	str	r0, [r5, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8005d3c:	aa07      	add	r2, sp, #28
 8005d3e:	2105      	movs	r1, #5
 8005d40:	0020      	movs	r0, r4
 8005d42:	f008 fc7f 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005d46:	4cd4      	ldr	r4, [pc, #848]	; (8006098 <setCommand+0x6e0>)
 8005d48:	6020      	str	r0, [r4, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	f00d fc72 	bl	8013636 <atoi>
 8005d52:	b2c3      	uxtb	r3, r0
 8005d54:	4699      	mov	r9, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8005d56:	6830      	ldr	r0, [r6, #0]
 8005d58:	f00d fc6d 	bl	8013636 <atoi>
 8005d5c:	b2c6      	uxtb	r6, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8005d5e:	6828      	ldr	r0, [r5, #0]
 8005d60:	f00d fc69 	bl	8013636 <atoi>
 8005d64:	b2c5      	uxtb	r5, r0
		if (pcParameterString5 != NULL) {
 8005d66:	6824      	ldr	r4, [r4, #0]
 8005d68:	2c00      	cmp	r4, #0
 8005d6a:	d013      	beq.n	8005d94 <setCommand+0x3dc>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	49cb      	ldr	r1, [pc, #812]	; (800609c <setCommand+0x6e4>)
 8005d70:	0020      	movs	r0, r4
 8005d72:	f00e fc90 	bl	8014696 <strncmp>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d00a      	beq.n	8005d90 <setCommand+0x3d8>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	49c8      	ldr	r1, [pc, #800]	; (80060a0 <setCommand+0x6e8>)
 8005d7e:	0020      	movs	r0, r4
 8005d80:	f00e fc89 	bl	8014696 <strncmp>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d000      	beq.n	8005d8a <setCommand+0x3d2>
 8005d88:	e202      	b.n	8006190 <setCommand+0x7d8>
				temp84 = RTC_PM;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	4698      	mov	r8, r3
 8005d8e:	e001      	b.n	8005d94 <setCommand+0x3dc>
				temp84 = RTC_AM;
 8005d90:	2301      	movs	r3, #1
 8005d92:	4698      	mov	r8, r3
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8005d94:	464b      	mov	r3, r9
 8005d96:	2b17      	cmp	r3, #23
 8005d98:	d900      	bls.n	8005d9c <setCommand+0x3e4>
 8005d9a:	e21f      	b.n	80061dc <setCommand+0x824>
 8005d9c:	2e3b      	cmp	r6, #59	; 0x3b
 8005d9e:	d900      	bls.n	8005da2 <setCommand+0x3ea>
 8005da0:	e21f      	b.n	80061e2 <setCommand+0x82a>
 8005da2:	2d3b      	cmp	r5, #59	; 0x3b
 8005da4:	d901      	bls.n	8005daa <setCommand+0x3f2>
				result = BOS_ERR_WrongValue;
 8005da6:	2468      	movs	r4, #104	; 0x68
 8005da8:	e636      	b.n	8005a18 <setCommand+0x60>
				GetTimeDate();				
 8005daa:	f007 ff8b 	bl	800dcc4 <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 8005dae:	4cbd      	ldr	r4, [pc, #756]	; (80060a4 <setCommand+0x6ec>)
 8005db0:	7d23      	ldrb	r3, [r4, #20]
 8005db2:	8b22      	ldrh	r2, [r4, #24]
 8005db4:	7d61      	ldrb	r1, [r4, #21]
 8005db6:	7da0      	ldrb	r0, [r4, #22]
 8005db8:	7b24      	ldrb	r4, [r4, #12]
 8005dba:	b264      	sxtb	r4, r4
 8005dbc:	9404      	str	r4, [sp, #16]
 8005dbe:	4644      	mov	r4, r8
 8005dc0:	9403      	str	r4, [sp, #12]
 8005dc2:	464c      	mov	r4, r9
 8005dc4:	9402      	str	r4, [sp, #8]
 8005dc6:	9601      	str	r6, [sp, #4]
 8005dc8:	9500      	str	r5, [sp, #0]
 8005dca:	f007 ff21 	bl	800dc10 <BOS_CalendarConfig>
 8005dce:	0004      	movs	r4, r0
 8005dd0:	e1df      	b.n	8006192 <setCommand+0x7da>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005dd2:	aa0a      	add	r2, sp, #40	; 0x28
 8005dd4:	2102      	movs	r1, #2
 8005dd6:	0020      	movs	r0, r4
 8005dd8:	f008 fc34 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005ddc:	4dab      	ldr	r5, [pc, #684]	; (800608c <setCommand+0x6d4>)
 8005dde:	6028      	str	r0, [r5, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8005de0:	aa09      	add	r2, sp, #36	; 0x24
 8005de2:	2103      	movs	r1, #3
 8005de4:	0020      	movs	r0, r4
 8005de6:	f008 fc2d 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005dea:	4ba9      	ldr	r3, [pc, #676]	; (8006090 <setCommand+0x6d8>)
 8005dec:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8005dee:	aa08      	add	r2, sp, #32
 8005df0:	2104      	movs	r1, #4
 8005df2:	0020      	movs	r0, r4
 8005df4:	f008 fc26 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005df8:	4ba6      	ldr	r3, [pc, #664]	; (8006094 <setCommand+0x6dc>)
 8005dfa:	4698      	mov	r8, r3
 8005dfc:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8005dfe:	aa07      	add	r2, sp, #28
 8005e00:	2105      	movs	r1, #5
 8005e02:	0020      	movs	r0, r4
 8005e04:	f008 fc1e 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8005e08:	4ca3      	ldr	r4, [pc, #652]	; (8006098 <setCommand+0x6e0>)
 8005e0a:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 8005e0c:	4643      	mov	r3, r8
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	f00d fc11 	bl	8013636 <atoi>
 8005e14:	b2c3      	uxtb	r3, r0
 8005e16:	4699      	mov	r9, r3
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	f00d fc0c 	bl	8013636 <atoi>
 8005e1e:	b283      	uxth	r3, r0
 8005e20:	4698      	mov	r8, r3
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8005e22:	682c      	ldr	r4, [r5, #0]
 8005e24:	2206      	movs	r2, #6
 8005e26:	49a0      	ldr	r1, [pc, #640]	; (80060a8 <setCommand+0x6f0>)
 8005e28:	0020      	movs	r0, r4
 8005e2a:	f00e fc34 	bl	8014696 <strncmp>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d032      	beq.n	8005e98 <setCommand+0x4e0>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 8005e32:	2207      	movs	r2, #7
 8005e34:	499d      	ldr	r1, [pc, #628]	; (80060ac <setCommand+0x6f4>)
 8005e36:	0020      	movs	r0, r4
 8005e38:	f00e fc2d 	bl	8014696 <strncmp>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d100      	bne.n	8005e42 <setCommand+0x48a>
 8005e40:	e0f0      	b.n	8006024 <setCommand+0x66c>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 8005e42:	2209      	movs	r2, #9
 8005e44:	499a      	ldr	r1, [pc, #616]	; (80060b0 <setCommand+0x6f8>)
 8005e46:	0020      	movs	r0, r4
 8005e48:	f00e fc25 	bl	8014696 <strncmp>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d100      	bne.n	8005e52 <setCommand+0x49a>
 8005e50:	e0eb      	b.n	800602a <setCommand+0x672>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 8005e52:	2208      	movs	r2, #8
 8005e54:	4997      	ldr	r1, [pc, #604]	; (80060b4 <setCommand+0x6fc>)
 8005e56:	0020      	movs	r0, r4
 8005e58:	f00e fc1d 	bl	8014696 <strncmp>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d100      	bne.n	8005e62 <setCommand+0x4aa>
 8005e60:	e0e6      	b.n	8006030 <setCommand+0x678>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 8005e62:	2206      	movs	r2, #6
 8005e64:	4994      	ldr	r1, [pc, #592]	; (80060b8 <setCommand+0x700>)
 8005e66:	0020      	movs	r0, r4
 8005e68:	f00e fc15 	bl	8014696 <strncmp>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d100      	bne.n	8005e72 <setCommand+0x4ba>
 8005e70:	e0e1      	b.n	8006036 <setCommand+0x67e>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 8005e72:	2208      	movs	r2, #8
 8005e74:	4991      	ldr	r1, [pc, #580]	; (80060bc <setCommand+0x704>)
 8005e76:	0020      	movs	r0, r4
 8005e78:	f00e fc0d 	bl	8014696 <strncmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d100      	bne.n	8005e82 <setCommand+0x4ca>
 8005e80:	e0dc      	b.n	800603c <setCommand+0x684>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 8005e82:	2206      	movs	r2, #6
 8005e84:	498e      	ldr	r1, [pc, #568]	; (80060c0 <setCommand+0x708>)
 8005e86:	0020      	movs	r0, r4
 8005e88:	f00e fc05 	bl	8014696 <strncmp>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d000      	beq.n	8005e92 <setCommand+0x4da>
 8005e90:	e0d7      	b.n	8006042 <setCommand+0x68a>
			temp81 = SUNDAY;
 8005e92:	2607      	movs	r6, #7
	BOS_Status result = BOS_OK; 
 8005e94:	2400      	movs	r4, #0
 8005e96:	e001      	b.n	8005e9c <setCommand+0x4e4>
			temp81 = MONDAY;
 8005e98:	2601      	movs	r6, #1
	BOS_Status result = BOS_OK; 
 8005e9a:	2400      	movs	r4, #0
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8005e9c:	4b7c      	ldr	r3, [pc, #496]	; (8006090 <setCommand+0x6d8>)
 8005e9e:	681d      	ldr	r5, [r3, #0]
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	4988      	ldr	r1, [pc, #544]	; (80060c4 <setCommand+0x70c>)
 8005ea4:	0028      	movs	r0, r5
 8005ea6:	f00e fbf6 	bl	8014696 <strncmp>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d100      	bne.n	8005eb0 <setCommand+0x4f8>
 8005eae:	e0ca      	b.n	8006046 <setCommand+0x68e>
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	4985      	ldr	r1, [pc, #532]	; (80060c8 <setCommand+0x710>)
 8005eb4:	0028      	movs	r0, r5
 8005eb6:	f00e fbee 	bl	8014696 <strncmp>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d100      	bne.n	8005ec0 <setCommand+0x508>
 8005ebe:	e0d6      	b.n	800606e <setCommand+0x6b6>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	4982      	ldr	r1, [pc, #520]	; (80060cc <setCommand+0x714>)
 8005ec4:	0028      	movs	r0, r5
 8005ec6:	f00e fbe6 	bl	8014696 <strncmp>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d100      	bne.n	8005ed0 <setCommand+0x518>
 8005ece:	e0d0      	b.n	8006072 <setCommand+0x6ba>
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	497f      	ldr	r1, [pc, #508]	; (80060d0 <setCommand+0x718>)
 8005ed4:	0028      	movs	r0, r5
 8005ed6:	f00e fbde 	bl	8014696 <strncmp>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d100      	bne.n	8005ee0 <setCommand+0x528>
 8005ede:	e0ca      	b.n	8006076 <setCommand+0x6be>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 8005ee0:	2205      	movs	r2, #5
 8005ee2:	497c      	ldr	r1, [pc, #496]	; (80060d4 <setCommand+0x71c>)
 8005ee4:	0028      	movs	r0, r5
 8005ee6:	f00e fbd6 	bl	8014696 <strncmp>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d100      	bne.n	8005ef0 <setCommand+0x538>
 8005eee:	e0c4      	b.n	800607a <setCommand+0x6c2>
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	4979      	ldr	r1, [pc, #484]	; (80060d8 <setCommand+0x720>)
 8005ef4:	0028      	movs	r0, r5
 8005ef6:	f00e fbce 	bl	8014696 <strncmp>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d100      	bne.n	8005f00 <setCommand+0x548>
 8005efe:	e0be      	b.n	800607e <setCommand+0x6c6>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 8005f00:	2205      	movs	r2, #5
 8005f02:	4976      	ldr	r1, [pc, #472]	; (80060dc <setCommand+0x724>)
 8005f04:	0028      	movs	r0, r5
 8005f06:	f00e fbc6 	bl	8014696 <strncmp>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d100      	bne.n	8005f10 <setCommand+0x558>
 8005f0e:	e0b8      	b.n	8006082 <setCommand+0x6ca>
 8005f10:	2202      	movs	r2, #2
 8005f12:	4973      	ldr	r1, [pc, #460]	; (80060e0 <setCommand+0x728>)
 8005f14:	0028      	movs	r0, r5
 8005f16:	f00e fbbe 	bl	8014696 <strncmp>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d100      	bne.n	8005f20 <setCommand+0x568>
 8005f1e:	e0b2      	b.n	8006086 <setCommand+0x6ce>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 8005f20:	2203      	movs	r2, #3
 8005f22:	4970      	ldr	r1, [pc, #448]	; (80060e4 <setCommand+0x72c>)
 8005f24:	0028      	movs	r0, r5
 8005f26:	f00e fbb6 	bl	8014696 <strncmp>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d100      	bne.n	8005f30 <setCommand+0x578>
 8005f2e:	e0fb      	b.n	8006128 <setCommand+0x770>
 8005f30:	2202      	movs	r2, #2
 8005f32:	496d      	ldr	r1, [pc, #436]	; (80060e8 <setCommand+0x730>)
 8005f34:	0028      	movs	r0, r5
 8005f36:	f00e fbae 	bl	8014696 <strncmp>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d100      	bne.n	8005f40 <setCommand+0x588>
 8005f3e:	e0f5      	b.n	800612c <setCommand+0x774>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 8005f40:	2204      	movs	r2, #4
 8005f42:	496a      	ldr	r1, [pc, #424]	; (80060ec <setCommand+0x734>)
 8005f44:	0028      	movs	r0, r5
 8005f46:	f00e fba6 	bl	8014696 <strncmp>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d100      	bne.n	8005f50 <setCommand+0x598>
 8005f4e:	e0ef      	b.n	8006130 <setCommand+0x778>
 8005f50:	2202      	movs	r2, #2
 8005f52:	4967      	ldr	r1, [pc, #412]	; (80060f0 <setCommand+0x738>)
 8005f54:	0028      	movs	r0, r5
 8005f56:	f00e fb9e 	bl	8014696 <strncmp>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d100      	bne.n	8005f60 <setCommand+0x5a8>
 8005f5e:	e0e9      	b.n	8006134 <setCommand+0x77c>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 8005f60:	2204      	movs	r2, #4
 8005f62:	4964      	ldr	r1, [pc, #400]	; (80060f4 <setCommand+0x73c>)
 8005f64:	0028      	movs	r0, r5
 8005f66:	f00e fb96 	bl	8014696 <strncmp>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d100      	bne.n	8005f70 <setCommand+0x5b8>
 8005f6e:	e0e3      	b.n	8006138 <setCommand+0x780>
 8005f70:	2202      	movs	r2, #2
 8005f72:	4961      	ldr	r1, [pc, #388]	; (80060f8 <setCommand+0x740>)
 8005f74:	0028      	movs	r0, r5
 8005f76:	f00e fb8e 	bl	8014696 <strncmp>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d100      	bne.n	8005f80 <setCommand+0x5c8>
 8005f7e:	e0dd      	b.n	800613c <setCommand+0x784>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 8005f80:	2205      	movs	r2, #5
 8005f82:	495e      	ldr	r1, [pc, #376]	; (80060fc <setCommand+0x744>)
 8005f84:	0028      	movs	r0, r5
 8005f86:	f00e fb86 	bl	8014696 <strncmp>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d100      	bne.n	8005f90 <setCommand+0x5d8>
 8005f8e:	e0d7      	b.n	8006140 <setCommand+0x788>
 8005f90:	2202      	movs	r2, #2
 8005f92:	495b      	ldr	r1, [pc, #364]	; (8006100 <setCommand+0x748>)
 8005f94:	0028      	movs	r0, r5
 8005f96:	f00e fb7e 	bl	8014696 <strncmp>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d100      	bne.n	8005fa0 <setCommand+0x5e8>
 8005f9e:	e0d1      	b.n	8006144 <setCommand+0x78c>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8005fa0:	2209      	movs	r2, #9
 8005fa2:	4958      	ldr	r1, [pc, #352]	; (8006104 <setCommand+0x74c>)
 8005fa4:	0028      	movs	r0, r5
 8005fa6:	f00e fb76 	bl	8014696 <strncmp>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d100      	bne.n	8005fb0 <setCommand+0x5f8>
 8005fae:	e0cb      	b.n	8006148 <setCommand+0x790>
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	4955      	ldr	r1, [pc, #340]	; (8006108 <setCommand+0x750>)
 8005fb4:	0028      	movs	r0, r5
 8005fb6:	f00e fb6e 	bl	8014696 <strncmp>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d100      	bne.n	8005fc0 <setCommand+0x608>
 8005fbe:	e0c5      	b.n	800614c <setCommand+0x794>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 8005fc0:	2207      	movs	r2, #7
 8005fc2:	4952      	ldr	r1, [pc, #328]	; (800610c <setCommand+0x754>)
 8005fc4:	0028      	movs	r0, r5
 8005fc6:	f00e fb66 	bl	8014696 <strncmp>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d100      	bne.n	8005fd0 <setCommand+0x618>
 8005fce:	e0bf      	b.n	8006150 <setCommand+0x798>
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	494f      	ldr	r1, [pc, #316]	; (8006110 <setCommand+0x758>)
 8005fd4:	0028      	movs	r0, r5
 8005fd6:	f00e fb5e 	bl	8014696 <strncmp>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d100      	bne.n	8005fe0 <setCommand+0x628>
 8005fde:	e0b9      	b.n	8006154 <setCommand+0x79c>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	494c      	ldr	r1, [pc, #304]	; (8006114 <setCommand+0x75c>)
 8005fe4:	0028      	movs	r0, r5
 8005fe6:	f00e fb56 	bl	8014696 <strncmp>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d100      	bne.n	8005ff0 <setCommand+0x638>
 8005fee:	e0b3      	b.n	8006158 <setCommand+0x7a0>
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	4949      	ldr	r1, [pc, #292]	; (8006118 <setCommand+0x760>)
 8005ff4:	0028      	movs	r0, r5
 8005ff6:	f00e fb4e 	bl	8014696 <strncmp>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d100      	bne.n	8006000 <setCommand+0x648>
 8005ffe:	e0ad      	b.n	800615c <setCommand+0x7a4>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006000:	2208      	movs	r2, #8
 8006002:	4946      	ldr	r1, [pc, #280]	; (800611c <setCommand+0x764>)
 8006004:	0028      	movs	r0, r5
 8006006:	f00e fb46 	bl	8014696 <strncmp>
 800600a:	2800      	cmp	r0, #0
 800600c:	d100      	bne.n	8006010 <setCommand+0x658>
 800600e:	e0a7      	b.n	8006160 <setCommand+0x7a8>
 8006010:	2202      	movs	r2, #2
 8006012:	4943      	ldr	r1, [pc, #268]	; (8006120 <setCommand+0x768>)
 8006014:	0028      	movs	r0, r5
 8006016:	f00e fb3e 	bl	8014696 <strncmp>
 800601a:	2800      	cmp	r0, #0
 800601c:	d000      	beq.n	8006020 <setCommand+0x668>
 800601e:	e0db      	b.n	80061d8 <setCommand+0x820>
			temp82 = DECEMBER;
 8006020:	250c      	movs	r5, #12
 8006022:	e011      	b.n	8006048 <setCommand+0x690>
			temp81 = TUESDAY;
 8006024:	2602      	movs	r6, #2
	BOS_Status result = BOS_OK; 
 8006026:	2400      	movs	r4, #0
 8006028:	e738      	b.n	8005e9c <setCommand+0x4e4>
			temp81 = WEDNESDAY;
 800602a:	2603      	movs	r6, #3
	BOS_Status result = BOS_OK; 
 800602c:	2400      	movs	r4, #0
 800602e:	e735      	b.n	8005e9c <setCommand+0x4e4>
			temp81 = THURSDAY;
 8006030:	2604      	movs	r6, #4
	BOS_Status result = BOS_OK; 
 8006032:	2400      	movs	r4, #0
 8006034:	e732      	b.n	8005e9c <setCommand+0x4e4>
			temp81 = FRIDAY;
 8006036:	2605      	movs	r6, #5
	BOS_Status result = BOS_OK; 
 8006038:	2400      	movs	r4, #0
 800603a:	e72f      	b.n	8005e9c <setCommand+0x4e4>
			temp81 = SATURDAY;
 800603c:	2606      	movs	r6, #6
	BOS_Status result = BOS_OK; 
 800603e:	2400      	movs	r4, #0
 8006040:	e72c      	b.n	8005e9c <setCommand+0x4e4>
			result = BOS_ERR_WrongValue;		
 8006042:	2468      	movs	r4, #104	; 0x68
 8006044:	e72a      	b.n	8005e9c <setCommand+0x4e4>
			temp82 = JANUARY;
 8006046:	2501      	movs	r5, #1
		if (result == BOS_OK) 
 8006048:	2c00      	cmp	r4, #0
 800604a:	d000      	beq.n	800604e <setCommand+0x696>
 800604c:	e0a1      	b.n	8006192 <setCommand+0x7da>
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 800604e:	464b      	mov	r3, r9
 8006050:	3b01      	subs	r3, #1
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b1e      	cmp	r3, #30
 8006056:	d900      	bls.n	800605a <setCommand+0x6a2>
 8006058:	e0c6      	b.n	80061e8 <setCommand+0x830>
 800605a:	23fa      	movs	r3, #250	; 0xfa
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	4598      	cmp	r8, r3
 8006060:	d200      	bcs.n	8006064 <setCommand+0x6ac>
 8006062:	e0c4      	b.n	80061ee <setCommand+0x836>
 8006064:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <setCommand+0x76c>)
 8006066:	4598      	cmp	r8, r3
 8006068:	d97c      	bls.n	8006164 <setCommand+0x7ac>
				result = BOS_ERR_WrongValue;
 800606a:	2468      	movs	r4, #104	; 0x68
 800606c:	e4d4      	b.n	8005a18 <setCommand+0x60>
			temp82 = JANUARY;
 800606e:	2501      	movs	r5, #1
 8006070:	e7ea      	b.n	8006048 <setCommand+0x690>
			temp82 = FEBRUARY;
 8006072:	2502      	movs	r5, #2
 8006074:	e7e8      	b.n	8006048 <setCommand+0x690>
 8006076:	2502      	movs	r5, #2
 8006078:	e7e6      	b.n	8006048 <setCommand+0x690>
			temp82 = MARCH;
 800607a:	2503      	movs	r5, #3
 800607c:	e7e4      	b.n	8006048 <setCommand+0x690>
 800607e:	2503      	movs	r5, #3
 8006080:	e7e2      	b.n	8006048 <setCommand+0x690>
			temp82 = APRIL;
 8006082:	2504      	movs	r5, #4
 8006084:	e7e0      	b.n	8006048 <setCommand+0x690>
 8006086:	2504      	movs	r5, #4
 8006088:	e7de      	b.n	8006048 <setCommand+0x690>
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	20000ac4 	.word	0x20000ac4
 8006090:	20000acc 	.word	0x20000acc
 8006094:	20000ad4 	.word	0x20000ad4
 8006098:	20000ad8 	.word	0x20000ad8
 800609c:	0801b20c 	.word	0x0801b20c
 80060a0:	080194ac 	.word	0x080194ac
 80060a4:	20006138 	.word	0x20006138
 80060a8:	080194b8 	.word	0x080194b8
 80060ac:	080194c0 	.word	0x080194c0
 80060b0:	080194c8 	.word	0x080194c8
 80060b4:	080194d4 	.word	0x080194d4
 80060b8:	080194e0 	.word	0x080194e0
 80060bc:	080194e8 	.word	0x080194e8
 80060c0:	080194f4 	.word	0x080194f4
 80060c4:	080194fc 	.word	0x080194fc
 80060c8:	08019504 	.word	0x08019504
 80060cc:	08019508 	.word	0x08019508
 80060d0:	08019514 	.word	0x08019514
 80060d4:	08019518 	.word	0x08019518
 80060d8:	08019520 	.word	0x08019520
 80060dc:	08019524 	.word	0x08019524
 80060e0:	0801952c 	.word	0x0801952c
 80060e4:	08019530 	.word	0x08019530
 80060e8:	08019534 	.word	0x08019534
 80060ec:	08019538 	.word	0x08019538
 80060f0:	08019540 	.word	0x08019540
 80060f4:	08019544 	.word	0x08019544
 80060f8:	0801954c 	.word	0x0801954c
 80060fc:	08019550 	.word	0x08019550
 8006100:	08019558 	.word	0x08019558
 8006104:	0801955c 	.word	0x0801955c
 8006108:	08019568 	.word	0x08019568
 800610c:	0801956c 	.word	0x0801956c
 8006110:	08019574 	.word	0x08019574
 8006114:	08019578 	.word	0x08019578
 8006118:	08019584 	.word	0x08019584
 800611c:	08019588 	.word	0x08019588
 8006120:	08019594 	.word	0x08019594
 8006124:	00000834 	.word	0x00000834
			temp82 = MAY;
 8006128:	2505      	movs	r5, #5
 800612a:	e78d      	b.n	8006048 <setCommand+0x690>
 800612c:	2505      	movs	r5, #5
 800612e:	e78b      	b.n	8006048 <setCommand+0x690>
			temp82 = JUNE;
 8006130:	2506      	movs	r5, #6
 8006132:	e789      	b.n	8006048 <setCommand+0x690>
 8006134:	2506      	movs	r5, #6
 8006136:	e787      	b.n	8006048 <setCommand+0x690>
			temp82 = JULY;
 8006138:	2507      	movs	r5, #7
 800613a:	e785      	b.n	8006048 <setCommand+0x690>
 800613c:	2507      	movs	r5, #7
 800613e:	e783      	b.n	8006048 <setCommand+0x690>
			temp82 = AUGUST;
 8006140:	2508      	movs	r5, #8
 8006142:	e781      	b.n	8006048 <setCommand+0x690>
 8006144:	2508      	movs	r5, #8
 8006146:	e77f      	b.n	8006048 <setCommand+0x690>
			temp82 = SEPTEMBER;
 8006148:	2509      	movs	r5, #9
 800614a:	e77d      	b.n	8006048 <setCommand+0x690>
 800614c:	2509      	movs	r5, #9
 800614e:	e77b      	b.n	8006048 <setCommand+0x690>
			temp82 = OCTOBER;
 8006150:	250a      	movs	r5, #10
 8006152:	e779      	b.n	8006048 <setCommand+0x690>
 8006154:	250a      	movs	r5, #10
 8006156:	e777      	b.n	8006048 <setCommand+0x690>
			temp82 = NOVEMBER;
 8006158:	250b      	movs	r5, #11
 800615a:	e775      	b.n	8006048 <setCommand+0x690>
 800615c:	250b      	movs	r5, #11
 800615e:	e773      	b.n	8006048 <setCommand+0x690>
			temp82 = DECEMBER;
 8006160:	250c      	movs	r5, #12
 8006162:	e771      	b.n	8006048 <setCommand+0x690>
				GetTimeDate();
 8006164:	f007 fdae 	bl	800dcc4 <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 8006168:	4b29      	ldr	r3, [pc, #164]	; (8006210 <setCommand+0x858>)
 800616a:	220c      	movs	r2, #12
 800616c:	569a      	ldrsb	r2, [r3, r2]
 800616e:	9204      	str	r2, [sp, #16]
 8006170:	7cda      	ldrb	r2, [r3, #19]
 8006172:	9203      	str	r2, [sp, #12]
 8006174:	7c9a      	ldrb	r2, [r3, #18]
 8006176:	9202      	str	r2, [sp, #8]
 8006178:	7c5a      	ldrb	r2, [r3, #17]
 800617a:	9201      	str	r2, [sp, #4]
 800617c:	7c1b      	ldrb	r3, [r3, #16]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	0033      	movs	r3, r6
 8006182:	4642      	mov	r2, r8
 8006184:	4649      	mov	r1, r9
 8006186:	0028      	movs	r0, r5
 8006188:	f007 fd42 	bl	800dc10 <BOS_CalendarConfig>
 800618c:	0004      	movs	r4, r0
 800618e:	e000      	b.n	8006192 <setCommand+0x7da>
				result = BOS_ERR_WrongValue;
 8006190:	2468      	movs	r4, #104	; 0x68
	if (result == BOS_OK) 
 8006192:	2c00      	cmp	r4, #0
 8006194:	d000      	beq.n	8006198 <setCommand+0x7e0>
 8006196:	e43f      	b.n	8005a18 <setCommand+0x60>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006198:	4b1e      	ldr	r3, [pc, #120]	; (8006214 <setCommand+0x85c>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800619e:	18d3      	adds	r3, r2, r3
 80061a0:	2100      	movs	r1, #0
 80061a2:	7019      	strb	r1, [r3, #0]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 80061a4:	4b1c      	ldr	r3, [pc, #112]	; (8006218 <setCommand+0x860>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	491c      	ldr	r1, [pc, #112]	; (800621c <setCommand+0x864>)
 80061aa:	0038      	movs	r0, r7
 80061ac:	f00e fa30 	bl	8014610 <siprintf>
		if (extraMessage == 1) {
 80061b0:	2c01      	cmp	r4, #1
 80061b2:	d000      	beq.n	80061b6 <setCommand+0x7fe>
 80061b4:	e438      	b.n	8005a28 <setCommand+0x70>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 80061b6:	0038      	movs	r0, r7
 80061b8:	f7f9 ffae 	bl	8000118 <strlen>
 80061bc:	1838      	adds	r0, r7, r0
 80061be:	2230      	movs	r2, #48	; 0x30
 80061c0:	4917      	ldr	r1, [pc, #92]	; (8006220 <setCommand+0x868>)
 80061c2:	f00d fa8b 	bl	80136dc <memcpy>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 80061c6:	0038      	movs	r0, r7
 80061c8:	f7f9 ffa6 	bl	8000118 <strlen>
 80061cc:	1838      	adds	r0, r7, r0
 80061ce:	22a3      	movs	r2, #163	; 0xa3
 80061d0:	4914      	ldr	r1, [pc, #80]	; (8006224 <setCommand+0x86c>)
 80061d2:	f00d fa83 	bl	80136dc <memcpy>
 80061d6:	e427      	b.n	8005a28 <setCommand+0x70>
			result = BOS_ERR_WrongValue;	
 80061d8:	2468      	movs	r4, #104	; 0x68
 80061da:	e7da      	b.n	8006192 <setCommand+0x7da>
				result = BOS_ERR_WrongValue;
 80061dc:	2468      	movs	r4, #104	; 0x68
 80061de:	f7ff fc1b 	bl	8005a18 <setCommand+0x60>
 80061e2:	2468      	movs	r4, #104	; 0x68
 80061e4:	f7ff fc18 	bl	8005a18 <setCommand+0x60>
				result = BOS_ERR_WrongValue;
 80061e8:	2468      	movs	r4, #104	; 0x68
 80061ea:	f7ff fc15 	bl	8005a18 <setCommand+0x60>
 80061ee:	2468      	movs	r4, #104	; 0x68
 80061f0:	f7ff fc12 	bl	8005a18 <setCommand+0x60>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 80061f4:	2213      	movs	r2, #19
 80061f6:	490c      	ldr	r1, [pc, #48]	; (8006228 <setCommand+0x870>)
 80061f8:	0038      	movs	r0, r7
 80061fa:	f00d fa6f 	bl	80136dc <memcpy>
 80061fe:	f7ff fc13 	bl	8005a28 <setCommand+0x70>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8006202:	220f      	movs	r2, #15
 8006204:	4909      	ldr	r1, [pc, #36]	; (800622c <setCommand+0x874>)
 8006206:	0038      	movs	r0, r7
 8006208:	f00d fa68 	bl	80136dc <memcpy>
 800620c:	f7ff fc0c 	bl	8005a28 <setCommand+0x70>
 8006210:	20006138 	.word	0x20006138
 8006214:	20000abc 	.word	0x20000abc
 8006218:	20000ac4 	.word	0x20000ac4
 800621c:	08019598 	.word	0x08019598
 8006220:	080195ac 	.word	0x080195ac
 8006224:	080195dc 	.word	0x080195dc
 8006228:	080193dc 	.word	0x080193dc
 800622c:	08019448 	.word	0x08019448

08006230 <removebuttonCommand>:
{
 8006230:	b530      	push	{r4, r5, lr}
 8006232:	b083      	sub	sp, #12
 8006234:	0005      	movs	r5, r0
 8006236:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8006238:	2300      	movs	r3, #0
 800623a:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 800623c:	2d00      	cmp	r5, #0
 800623e:	d010      	beq.n	8006262 <removebuttonCommand+0x32>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006240:	aa01      	add	r2, sp, #4
 8006242:	2101      	movs	r1, #1
 8006244:	f008 f9fe 	bl	800e644 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8006248:	2300      	movs	r3, #0
 800624a:	56c3      	ldrsb	r3, [r0, r3]
 800624c:	2b70      	cmp	r3, #112	; 0x70
 800624e:	d00a      	beq.n	8006266 <removebuttonCommand+0x36>
	uint8_t port = 0;
 8006250:	2400      	movs	r4, #0
	result = RemovePortButton(port);
 8006252:	0020      	movs	r0, r4
 8006254:	f001 fde4 	bl	8007e20 <RemovePortButton>
	if (result == BOS_OK) 
 8006258:	2800      	cmp	r0, #0
 800625a:	d009      	beq.n	8006270 <removebuttonCommand+0x40>
}
 800625c:	2000      	movs	r0, #0
 800625e:	b003      	add	sp, #12
 8006260:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 8006262:	b672      	cpsid	i
 8006264:	e7fe      	b.n	8006264 <removebuttonCommand+0x34>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8006266:	3001      	adds	r0, #1
 8006268:	f00d f9eb 	bl	8013642 <atol>
 800626c:	b2c4      	uxtb	r4, r0
 800626e:	e7f0      	b.n	8006252 <removebuttonCommand+0x22>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 8006270:	0023      	movs	r3, r4
 8006272:	0022      	movs	r2, r4
 8006274:	4902      	ldr	r1, [pc, #8]	; (8006280 <removebuttonCommand+0x50>)
 8006276:	0028      	movs	r0, r5
 8006278:	f00e f9ca 	bl	8014610 <siprintf>
 800627c:	e7ee      	b.n	800625c <removebuttonCommand+0x2c>
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	08019680 	.word	0x08019680

08006284 <addbuttonCommand>:
{
 8006284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006286:	b085      	sub	sp, #20
 8006288:	0005      	movs	r5, r0
 800628a:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 800628c:	2300      	movs	r3, #0
 800628e:	9303      	str	r3, [sp, #12]
 8006290:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 8006292:	2800      	cmp	r0, #0
 8006294:	d025      	beq.n	80062e2 <addbuttonCommand+0x5e>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006296:	aa03      	add	r2, sp, #12
 8006298:	2101      	movs	r1, #1
 800629a:	0038      	movs	r0, r7
 800629c:	f008 f9d2 	bl	800e644 <FreeRTOS_CLIGetParameter>
 80062a0:	0004      	movs	r4, r0
 80062a2:	4b27      	ldr	r3, [pc, #156]	; (8006340 <addbuttonCommand+0xbc>)
 80062a4:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 80062a6:	9e03      	ldr	r6, [sp, #12]
 80062a8:	0032      	movs	r2, r6
 80062aa:	4926      	ldr	r1, [pc, #152]	; (8006344 <addbuttonCommand+0xc0>)
 80062ac:	f00e f9f3 	bl	8014696 <strncmp>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d018      	beq.n	80062e6 <addbuttonCommand+0x62>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 80062b4:	0032      	movs	r2, r6
 80062b6:	4924      	ldr	r1, [pc, #144]	; (8006348 <addbuttonCommand+0xc4>)
 80062b8:	0020      	movs	r0, r4
 80062ba:	f00e f9ec 	bl	8014696 <strncmp>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d025      	beq.n	800630e <addbuttonCommand+0x8a>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 80062c2:	0032      	movs	r2, r6
 80062c4:	4921      	ldr	r1, [pc, #132]	; (800634c <addbuttonCommand+0xc8>)
 80062c6:	0020      	movs	r0, r4
 80062c8:	f00e f9e5 	bl	8014696 <strncmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d020      	beq.n	8006312 <addbuttonCommand+0x8e>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 80062d0:	0032      	movs	r2, r6
 80062d2:	491f      	ldr	r1, [pc, #124]	; (8006350 <addbuttonCommand+0xcc>)
 80062d4:	0020      	movs	r0, r4
 80062d6:	f00e f9de 	bl	8014696 <strncmp>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d01b      	beq.n	8006316 <addbuttonCommand+0x92>
	uint8_t port = 0, type = 0;
 80062de:	2600      	movs	r6, #0
 80062e0:	e002      	b.n	80062e8 <addbuttonCommand+0x64>
	configASSERT( pcWriteBuffer );
 80062e2:	b672      	cpsid	i
 80062e4:	e7fe      	b.n	80062e4 <addbuttonCommand+0x60>
		type = MOMENTARY_NO;
 80062e6:	2601      	movs	r6, #1
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80062e8:	aa02      	add	r2, sp, #8
 80062ea:	2102      	movs	r1, #2
 80062ec:	0038      	movs	r0, r7
 80062ee:	f008 f9a9 	bl	800e644 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 80062f2:	2300      	movs	r3, #0
 80062f4:	56c3      	ldrsb	r3, [r0, r3]
 80062f6:	2b70      	cmp	r3, #112	; 0x70
 80062f8:	d00f      	beq.n	800631a <addbuttonCommand+0x96>
	uint8_t port = 0, type = 0;
 80062fa:	2400      	movs	r4, #0
	result = AddPortButton(type, port);
 80062fc:	0021      	movs	r1, r4
 80062fe:	0030      	movs	r0, r6
 8006300:	f001 fcfc 	bl	8007cfc <AddPortButton>
	if (result == BOS_OK) 
 8006304:	2800      	cmp	r0, #0
 8006306:	d00d      	beq.n	8006324 <addbuttonCommand+0xa0>
}
 8006308:	2000      	movs	r0, #0
 800630a:	b005      	add	sp, #20
 800630c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		type = MOMENTARY_NC;
 800630e:	2602      	movs	r6, #2
 8006310:	e7ea      	b.n	80062e8 <addbuttonCommand+0x64>
		type = ONOFF_NO;
 8006312:	2603      	movs	r6, #3
 8006314:	e7e8      	b.n	80062e8 <addbuttonCommand+0x64>
		type = ONOFF_NC;
 8006316:	2604      	movs	r6, #4
 8006318:	e7e6      	b.n	80062e8 <addbuttonCommand+0x64>
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 800631a:	3001      	adds	r0, #1
 800631c:	f00d f991 	bl	8013642 <atol>
 8006320:	b2c4      	uxtb	r4, r0
 8006322:	e7eb      	b.n	80062fc <addbuttonCommand+0x78>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006324:	4b06      	ldr	r3, [pc, #24]	; (8006340 <addbuttonCommand+0xbc>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	18d3      	adds	r3, r2, r3
 800632c:	2100      	movs	r1, #0
 800632e:	7019      	strb	r1, [r3, #0]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8006330:	9400      	str	r4, [sp, #0]
 8006332:	0023      	movs	r3, r4
 8006334:	4907      	ldr	r1, [pc, #28]	; (8006354 <addbuttonCommand+0xd0>)
 8006336:	0028      	movs	r0, r5
 8006338:	f00e f96a 	bl	8014610 <siprintf>
 800633c:	e7e4      	b.n	8006308 <addbuttonCommand+0x84>
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	20000ab8 	.word	0x20000ab8
 8006344:	080196a8 	.word	0x080196a8
 8006348:	080196b8 	.word	0x080196b8
 800634c:	080196c8 	.word	0x080196c8
 8006350:	080196d4 	.word	0x080196d4
 8006354:	080196e0 	.word	0x080196e0

08006358 <scastCommand>:
{
 8006358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800635a:	46de      	mov	lr, fp
 800635c:	4657      	mov	r7, sl
 800635e:	464e      	mov	r6, r9
 8006360:	4645      	mov	r5, r8
 8006362:	b5e0      	push	{r5, r6, r7, lr}
 8006364:	b099      	sub	sp, #100	; 0x64
 8006366:	0006      	movs	r6, r0
 8006368:	9007      	str	r0, [sp, #28]
 800636a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 800636c:	2500      	movs	r5, #0
 800636e:	9517      	str	r5, [sp, #92]	; 0x5c
 8006370:	9516      	str	r5, [sp, #88]	; 0x58
 8006372:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8006374:	9514      	str	r5, [sp, #80]	; 0x50
 8006376:	9513      	str	r5, [sp, #76]	; 0x4c
 8006378:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 = 0;
 800637a:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 800637c:	950e      	str	r5, [sp, #56]	; 0x38
 800637e:	2206      	movs	r2, #6
 8006380:	2100      	movs	r1, #0
 8006382:	a80f      	add	r0, sp, #60	; 0x3c
 8006384:	f00d f9b3 	bl	80136ee <memset>
 8006388:	950b      	str	r5, [sp, #44]	; 0x2c
 800638a:	2206      	movs	r2, #6
 800638c:	2100      	movs	r1, #0
 800638e:	a80c      	add	r0, sp, #48	; 0x30
 8006390:	f00d f9ad 	bl	80136ee <memset>
 8006394:	9508      	str	r5, [sp, #32]
 8006396:	2206      	movs	r2, #6
 8006398:	2100      	movs	r1, #0
 800639a:	a809      	add	r0, sp, #36	; 0x24
 800639c:	f00d f9a7 	bl	80136ee <memset>
	configASSERT( pcWriteBuffer );
 80063a0:	2e00      	cmp	r6, #0
 80063a2:	d050      	beq.n	8006446 <scastCommand+0xee>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80063a4:	aa17      	add	r2, sp, #92	; 0x5c
 80063a6:	2101      	movs	r1, #1
 80063a8:	0020      	movs	r0, r4
 80063aa:	f008 f94b 	bl	800e644 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 80063ae:	2300      	movs	r3, #0
 80063b0:	56c3      	ldrsb	r3, [r0, r3]
 80063b2:	2b50      	cmp	r3, #80	; 0x50
 80063b4:	d049      	beq.n	800644a <scastCommand+0xf2>
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 80063b6:	2600      	movs	r6, #0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80063b8:	aa16      	add	r2, sp, #88	; 0x58
 80063ba:	2102      	movs	r1, #2
 80063bc:	0020      	movs	r0, r4
 80063be:	f008 f941 	bl	800e644 <FreeRTOS_CLIGetParameter>
 80063c2:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 80063c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063c6:	a80e      	add	r0, sp, #56	; 0x38
 80063c8:	f00e f976 	bl	80146b8 <strncpy>
	srcM = (uint8_t) GetID(par1);
 80063cc:	a80e      	add	r0, sp, #56	; 0x38
 80063ce:	f7fd fb0f 	bl	80039f0 <GetID>
 80063d2:	b2c3      	uxtb	r3, r0
 80063d4:	469b      	mov	fp, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80063d6:	aa15      	add	r2, sp, #84	; 0x54
 80063d8:	2103      	movs	r1, #3
 80063da:	0020      	movs	r0, r4
 80063dc:	f008 f932 	bl	800e644 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 80063e0:	2300      	movs	r3, #0
 80063e2:	56c3      	ldrsb	r3, [r0, r3]
 80063e4:	2b70      	cmp	r3, #112	; 0x70
 80063e6:	d035      	beq.n	8006454 <scastCommand+0xfc>
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 80063e8:	2700      	movs	r7, #0
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80063ea:	aa14      	add	r2, sp, #80	; 0x50
 80063ec:	2104      	movs	r1, #4
 80063ee:	0020      	movs	r0, r4
 80063f0:	f008 f928 	bl	800e644 <FreeRTOS_CLIGetParameter>
 80063f4:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 80063f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80063f8:	a80b      	add	r0, sp, #44	; 0x2c
 80063fa:	f00e f95d 	bl	80146b8 <strncpy>
	dstM = (uint8_t) GetID(par2);
 80063fe:	a80b      	add	r0, sp, #44	; 0x2c
 8006400:	f7fd faf6 	bl	80039f0 <GetID>
 8006404:	b2c3      	uxtb	r3, r0
 8006406:	4698      	mov	r8, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006408:	aa13      	add	r2, sp, #76	; 0x4c
 800640a:	2105      	movs	r1, #5
 800640c:	0020      	movs	r0, r4
 800640e:	f008 f919 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8006412:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8006414:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006416:	469a      	mov	sl, r3
 8006418:	001a      	movs	r2, r3
 800641a:	4931      	ldr	r1, [pc, #196]	; (80064e0 <scastCommand+0x188>)
 800641c:	f00e f93b 	bl	8014696 <strncmp>
 8006420:	2800      	cmp	r0, #0
 8006422:	d01c      	beq.n	800645e <scastCommand+0x106>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006424:	4652      	mov	r2, sl
 8006426:	492f      	ldr	r1, [pc, #188]	; (80064e4 <scastCommand+0x18c>)
 8006428:	0028      	movs	r0, r5
 800642a:	f00e f934 	bl	8014696 <strncmp>
 800642e:	2800      	cmp	r0, #0
 8006430:	d042      	beq.n	80064b8 <scastCommand+0x160>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 8006432:	4652      	mov	r2, sl
 8006434:	492c      	ldr	r1, [pc, #176]	; (80064e8 <scastCommand+0x190>)
 8006436:	0028      	movs	r0, r5
 8006438:	f00e f92d 	bl	8014696 <strncmp>
 800643c:	2800      	cmp	r0, #0
 800643e:	d03e      	beq.n	80064be <scastCommand+0x166>
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	4699      	mov	r9, r3
 8006444:	e00d      	b.n	8006462 <scastCommand+0x10a>
	configASSERT( pcWriteBuffer );
 8006446:	b672      	cpsid	i
 8006448:	e7fe      	b.n	8006448 <scastCommand+0xf0>
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800644a:	3001      	adds	r0, #1
 800644c:	f00d f8f9 	bl	8013642 <atol>
 8006450:	b2c6      	uxtb	r6, r0
 8006452:	e7b1      	b.n	80063b8 <scastCommand+0x60>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006454:	3001      	adds	r0, #1
 8006456:	f00d f8f4 	bl	8013642 <atol>
 800645a:	b2c7      	uxtb	r7, r0
 800645c:	e7c5      	b.n	80063ea <scastCommand+0x92>
		direction = FORWARD;
 800645e:	2300      	movs	r3, #0
 8006460:	4699      	mov	r9, r3
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 8006462:	4652      	mov	r2, sl
 8006464:	0029      	movs	r1, r5
 8006466:	a808      	add	r0, sp, #32
 8006468:	f00e f926 	bl	80146b8 <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 800646c:	aa12      	add	r2, sp, #72	; 0x48
 800646e:	2106      	movs	r1, #6
 8006470:	0020      	movs	r0, r4
 8006472:	f008 f8e7 	bl	800e644 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8006476:	f00d f8e4 	bl	8013642 <atol>
 800647a:	0005      	movs	r5, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 800647c:	aa11      	add	r2, sp, #68	; 0x44
 800647e:	2107      	movs	r1, #7
 8006480:	0020      	movs	r0, r4
 8006482:	f008 f8df 	bl	800e644 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8006486:	f00d f8dc 	bl	8013642 <atol>
 800648a:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 800648c:	2300      	movs	r3, #0
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	9002      	str	r0, [sp, #8]
 8006492:	9501      	str	r5, [sp, #4]
 8006494:	464b      	mov	r3, r9
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	4643      	mov	r3, r8
 800649a:	003a      	movs	r2, r7
 800649c:	4659      	mov	r1, fp
 800649e:	0030      	movs	r0, r6
 80064a0:	f002 fa22 	bl	80088e8 <StartScastDMAStream>
	if (result == BOS_OK) 
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d00d      	beq.n	80064c4 <scastCommand+0x16c>
}
 80064a8:	2000      	movs	r0, #0
 80064aa:	b019      	add	sp, #100	; 0x64
 80064ac:	bcf0      	pop	{r4, r5, r6, r7}
 80064ae:	46bb      	mov	fp, r7
 80064b0:	46b2      	mov	sl, r6
 80064b2:	46a9      	mov	r9, r5
 80064b4:	46a0      	mov	r8, r4
 80064b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		direction = BACKWARD;
 80064b8:	2301      	movs	r3, #1
 80064ba:	4699      	mov	r9, r3
 80064bc:	e7d1      	b.n	8006462 <scastCommand+0x10a>
		direction = BIDIRECTIONAL;
 80064be:	2302      	movs	r3, #2
 80064c0:	4699      	mov	r9, r3
 80064c2:	e7ce      	b.n	8006462 <scastCommand+0x10a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 80064c4:	9404      	str	r4, [sp, #16]
 80064c6:	9503      	str	r5, [sp, #12]
 80064c8:	ab0b      	add	r3, sp, #44	; 0x2c
 80064ca:	9302      	str	r3, [sp, #8]
 80064cc:	9701      	str	r7, [sp, #4]
 80064ce:	ab0e      	add	r3, sp, #56	; 0x38
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	0033      	movs	r3, r6
 80064d4:	aa08      	add	r2, sp, #32
 80064d6:	4905      	ldr	r1, [pc, #20]	; (80064ec <scastCommand+0x194>)
 80064d8:	9807      	ldr	r0, [sp, #28]
 80064da:	f00e f899 	bl	8014610 <siprintf>
 80064de:	e7e3      	b.n	80064a8 <scastCommand+0x150>
 80064e0:	08019714 	.word	0x08019714
 80064e4:	0801971c 	.word	0x0801971c
 80064e8:	08019728 	.word	0x08019728
 80064ec:	08019738 	.word	0x08019738

080064f0 <infoCommand>:
{
 80064f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f2:	b083      	sub	sp, #12
 80064f4:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80064f6:	d036      	beq.n	8006566 <infoCommand+0x76>
	if (N > 1)
 80064f8:	4b27      	ldr	r3, [pc, #156]	; (8006598 <infoCommand+0xa8>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d834      	bhi.n	800656a <infoCommand+0x7a>
	BOS_Status result = BOS_OK; 
 8006500:	2500      	movs	r5, #0
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 8006502:	4b25      	ldr	r3, [pc, #148]	; (8006598 <infoCommand+0xa8>)
 8006504:	781a      	ldrb	r2, [r3, #0]
 8006506:	4925      	ldr	r1, [pc, #148]	; (800659c <infoCommand+0xac>)
 8006508:	0020      	movs	r0, r4
 800650a:	f00e f881 	bl	8014610 <siprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800650e:	0020      	movs	r0, r4
 8006510:	f7f9 fe02 	bl	8000118 <strlen>
 8006514:	b282      	uxth	r2, r0
 8006516:	4e22      	ldr	r6, [pc, #136]	; (80065a0 <infoCommand+0xb0>)
 8006518:	7830      	ldrb	r0, [r6, #0]
 800651a:	2701      	movs	r7, #1
 800651c:	427f      	negs	r7, r7
 800651e:	9700      	str	r7, [sp, #0]
 8006520:	2332      	movs	r3, #50	; 0x32
 8006522:	0021      	movs	r1, r4
 8006524:	f007 fe34 	bl	800e190 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 8006528:	2213      	movs	r2, #19
 800652a:	491e      	ldr	r1, [pc, #120]	; (80065a4 <infoCommand+0xb4>)
 800652c:	0020      	movs	r0, r4
 800652e:	f00d f8d5 	bl	80136dc <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006532:	0020      	movs	r0, r4
 8006534:	f7f9 fdf0 	bl	8000118 <strlen>
 8006538:	b282      	uxth	r2, r0
 800653a:	7830      	ldrb	r0, [r6, #0]
 800653c:	9700      	str	r7, [sp, #0]
 800653e:	2332      	movs	r3, #50	; 0x32
 8006540:	0021      	movs	r1, r4
 8006542:	f007 fe25 	bl	800e190 <writePxMutex>
	DisplayTopology(PcPort);
 8006546:	7830      	ldrb	r0, [r6, #0]
 8006548:	f7fc ffb4 	bl	80034b4 <DisplayTopology>
	DisplayPortsDir(PcPort);
 800654c:	7830      	ldrb	r0, [r6, #0]
 800654e:	f7fd f87f 	bl	8003650 <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 8006552:	2d02      	cmp	r5, #2
 8006554:	d00d      	beq.n	8006572 <infoCommand+0x82>
	sprintf( ( char * ) pcWriteBuffer, " ");
 8006556:	2202      	movs	r2, #2
 8006558:	4913      	ldr	r1, [pc, #76]	; (80065a8 <infoCommand+0xb8>)
 800655a:	0020      	movs	r0, r4
 800655c:	f00d f8be 	bl	80136dc <memcpy>
}
 8006560:	2000      	movs	r0, #0
 8006562:	b003      	add	sp, #12
 8006564:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006566:	b672      	cpsid	i
 8006568:	e7fe      	b.n	8006568 <infoCommand+0x78>
		result = ReadPortsDir();
 800656a:	f7fd fb89 	bl	8003c80 <ReadPortsDir>
 800656e:	0005      	movs	r5, r0
 8006570:	e7c7      	b.n	8006502 <infoCommand+0x12>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 8006572:	2244      	movs	r2, #68	; 0x44
 8006574:	490d      	ldr	r1, [pc, #52]	; (80065ac <infoCommand+0xbc>)
 8006576:	0020      	movs	r0, r4
 8006578:	f00d f8b0 	bl	80136dc <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 800657c:	0020      	movs	r0, r4
 800657e:	f7f9 fdcb 	bl	8000118 <strlen>
 8006582:	b282      	uxth	r2, r0
 8006584:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <infoCommand+0xb0>)
 8006586:	7818      	ldrb	r0, [r3, #0]
 8006588:	003b      	movs	r3, r7
 800658a:	9700      	str	r7, [sp, #0]
 800658c:	3333      	adds	r3, #51	; 0x33
 800658e:	0021      	movs	r1, r4
 8006590:	f007 fdfe 	bl	800e190 <writePxMutex>
 8006594:	e7df      	b.n	8006556 <infoCommand+0x66>
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	2000001c 	.word	0x2000001c
 800659c:	080197c0 	.word	0x080197c0
 80065a0:	200002d7 	.word	0x200002d7
 80065a4:	080197dc 	.word	0x080197dc
 80065a8:	08018550 	.word	0x08018550
 80065ac:	080197f0 	.word	0x080197f0

080065b0 <statusCommand>:
{
 80065b0:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d004      	beq.n	80065c0 <statusCommand+0x10>
	DisplayModuleStatus(0);
 80065b6:	2000      	movs	r0, #0
 80065b8:	f7fd f8b2 	bl	8003720 <DisplayModuleStatus>
}
 80065bc:	2000      	movs	r0, #0
 80065be:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80065c0:	b672      	cpsid	i
 80065c2:	e7fe      	b.n	80065c2 <statusCommand+0x12>

080065c4 <groupCommand>:
{
 80065c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c6:	46ce      	mov	lr, r9
 80065c8:	4647      	mov	r7, r8
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b08f      	sub	sp, #60	; 0x3c
 80065ce:	0004      	movs	r4, r0
 80065d0:	0017      	movs	r7, r2
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 80065d2:	2500      	movs	r5, #0
 80065d4:	9504      	str	r5, [sp, #16]
 80065d6:	2223      	movs	r2, #35	; 0x23
 80065d8:	2100      	movs	r1, #0
 80065da:	a805      	add	r0, sp, #20
 80065dc:	f00d f887 	bl	80136ee <memset>
 80065e0:	9501      	str	r5, [sp, #4]
 80065e2:	2206      	movs	r2, #6
 80065e4:	2100      	movs	r1, #0
 80065e6:	a802      	add	r0, sp, #8
 80065e8:	f00d f881 	bl	80136ee <memset>
	configASSERT( pcWriteBuffer );
 80065ec:	2c00      	cmp	r4, #0
 80065ee:	d01a      	beq.n	8006626 <groupCommand+0x62>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80065f0:	4d5d      	ldr	r5, [pc, #372]	; (8006768 <groupCommand+0x1a4>)
 80065f2:	002a      	movs	r2, r5
 80065f4:	2101      	movs	r1, #1
 80065f6:	0038      	movs	r0, r7
 80065f8:	f008 f824 	bl	800e644 <FreeRTOS_CLIGetParameter>
 80065fc:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 80065fe:	682a      	ldr	r2, [r5, #0]
 8006600:	a801      	add	r0, sp, #4
 8006602:	f00e f859 	bl	80146b8 <strncpy>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8006606:	2500      	movs	r5, #0
 8006608:	2d09      	cmp	r5, #9
 800660a:	d80e      	bhi.n	800662a <groupCommand+0x66>
		if (!strcmp(alias, groupAlias[i]))	
 800660c:	00a9      	lsls	r1, r5, #2
 800660e:	1949      	adds	r1, r1, r5
 8006610:	0049      	lsls	r1, r1, #1
 8006612:	4b56      	ldr	r3, [pc, #344]	; (800676c <groupCommand+0x1a8>)
 8006614:	18c9      	adds	r1, r1, r3
 8006616:	a801      	add	r0, sp, #4
 8006618:	f7f9 fd74 	bl	8000104 <strcmp>
 800661c:	2800      	cmp	r0, #0
 800661e:	d019      	beq.n	8006654 <groupCommand+0x90>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8006620:	3501      	adds	r5, #1
 8006622:	b2ed      	uxtb	r5, r5
 8006624:	e7f0      	b.n	8006608 <groupCommand+0x44>
	configASSERT( pcWriteBuffer );
 8006626:	b672      	cpsid	i
 8006628:	e7fe      	b.n	8006628 <groupCommand+0x64>
	type = 1;
 800662a:	2301      	movs	r3, #1
 800662c:	4698      	mov	r8, r3
	count = 2;
 800662e:	4b50      	ldr	r3, [pc, #320]	; (8006770 <groupCommand+0x1ac>)
 8006630:	2202      	movs	r2, #2
 8006632:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 8006634:	3208      	adds	r2, #8
 8006636:	494f      	ldr	r1, [pc, #316]	; (8006774 <groupCommand+0x1b0>)
 8006638:	0020      	movs	r0, r4
 800663a:	f00d f84f 	bl	80136dc <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 800663e:	4a4e      	ldr	r2, [pc, #312]	; (8006778 <groupCommand+0x1b4>)
 8006640:	2102      	movs	r1, #2
 8006642:	0038      	movs	r0, r7
 8006644:	f007 fffe 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8006648:	4b4c      	ldr	r3, [pc, #304]	; (800677c <groupCommand+0x1b8>)
 800664a:	6018      	str	r0, [r3, #0]
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 800664c:	2300      	movs	r3, #0
 800664e:	4699      	mov	r9, r3
	BOS_Status result = BOS_OK; 
 8006650:	2500      	movs	r5, #0
	while (pcParameterString != NULL)
 8006652:	e010      	b.n	8006676 <groupCommand+0xb2>
			type = 0; break;
 8006654:	2300      	movs	r3, #0
 8006656:	4698      	mov	r8, r3
 8006658:	e7e9      	b.n	800662e <groupCommand+0x6a>
		strcat( ( char * ) pcWriteBuffer, module);
 800665a:	a904      	add	r1, sp, #16
 800665c:	0020      	movs	r0, r4
 800665e:	f00d fff7 	bl	8014650 <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 8006662:	1c71      	adds	r1, r6, #1
 8006664:	b249      	sxtb	r1, r1
 8006666:	4b42      	ldr	r3, [pc, #264]	; (8006770 <groupCommand+0x1ac>)
 8006668:	7019      	strb	r1, [r3, #0]
 800666a:	4a43      	ldr	r2, [pc, #268]	; (8006778 <groupCommand+0x1b4>)
 800666c:	0038      	movs	r0, r7
 800666e:	f007 ffe9 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8006672:	4b42      	ldr	r3, [pc, #264]	; (800677c <groupCommand+0x1b8>)
 8006674:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 8006676:	4b41      	ldr	r3, [pc, #260]	; (800677c <groupCommand+0x1b8>)
 8006678:	6819      	ldr	r1, [r3, #0]
 800667a:	2900      	cmp	r1, #0
 800667c:	d024      	beq.n	80066c8 <groupCommand+0x104>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 800667e:	4b3e      	ldr	r3, [pc, #248]	; (8006778 <groupCommand+0x1b4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4699      	mov	r9, r3
 8006684:	ae04      	add	r6, sp, #16
 8006686:	001a      	movs	r2, r3
 8006688:	0030      	movs	r0, r6
 800668a:	f00e f815 	bl	80146b8 <strncpy>
 800668e:	2300      	movs	r3, #0
 8006690:	464a      	mov	r2, r9
 8006692:	54b3      	strb	r3, [r6, r2]
		modID = GetID(module);
 8006694:	0030      	movs	r0, r6
 8006696:	f7fd f9ab 	bl	80039f0 <GetID>
 800669a:	4681      	mov	r9, r0
		if (modID < 0)	break;
 800669c:	2800      	cmp	r0, #0
 800669e:	db13      	blt.n	80066c8 <groupCommand+0x104>
		result = AddModuleToGroup(modID, alias);
 80066a0:	b2c0      	uxtb	r0, r0
 80066a2:	a901      	add	r1, sp, #4
 80066a4:	f7fd fa6c 	bl	8003b80 <AddModuleToGroup>
 80066a8:	1e05      	subs	r5, r0, #0
		if (result != BOS_OK)	break;
 80066aa:	d10d      	bne.n	80066c8 <groupCommand+0x104>
		if (count > 2)
 80066ac:	4b30      	ldr	r3, [pc, #192]	; (8006770 <groupCommand+0x1ac>)
 80066ae:	2600      	movs	r6, #0
 80066b0:	579e      	ldrsb	r6, [r3, r6]
 80066b2:	2e02      	cmp	r6, #2
 80066b4:	ddd1      	ble.n	800665a <groupCommand+0x96>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 80066b6:	0020      	movs	r0, r4
 80066b8:	f7f9 fd2e 	bl	8000118 <strlen>
 80066bc:	1820      	adds	r0, r4, r0
 80066be:	2203      	movs	r2, #3
 80066c0:	492f      	ldr	r1, [pc, #188]	; (8006780 <groupCommand+0x1bc>)
 80066c2:	f00d f80b 	bl	80136dc <memcpy>
 80066c6:	e7c8      	b.n	800665a <groupCommand+0x96>
	if (modID < 0) 
 80066c8:	464b      	mov	r3, r9
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	db1a      	blt.n	8006704 <groupCommand+0x140>
	else if (count == 2)
 80066ce:	4b28      	ldr	r3, [pc, #160]	; (8006770 <groupCommand+0x1ac>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d020      	beq.n	800671a <groupCommand+0x156>
	else if (result == BOS_OK && type) {
 80066d8:	2d00      	cmp	r5, #0
 80066da:	d102      	bne.n	80066e2 <groupCommand+0x11e>
 80066dc:	4643      	mov	r3, r8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d121      	bne.n	8006726 <groupCommand+0x162>
	} else if (result == BOS_OK && !type) {
 80066e2:	2d00      	cmp	r5, #0
 80066e4:	d102      	bne.n	80066ec <groupCommand+0x128>
 80066e6:	4643      	mov	r3, r8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d026      	beq.n	800673a <groupCommand+0x176>
	} else if (result == BOS_ERR_Keyword)
 80066ec:	2d06      	cmp	r5, #6
 80066ee:	d02e      	beq.n	800674e <groupCommand+0x18a>
	else if (result == BOS_ERR_ExistingAlias)
 80066f0:	2d07      	cmp	r5, #7
 80066f2:	d032      	beq.n	800675a <groupCommand+0x196>
	else if (result == BOS_ERR_ExistingCmd)
 80066f4:	2d08      	cmp	r5, #8
 80066f6:	d10a      	bne.n	800670e <groupCommand+0x14a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 80066f8:	aa01      	add	r2, sp, #4
 80066fa:	4922      	ldr	r1, [pc, #136]	; (8006784 <groupCommand+0x1c0>)
 80066fc:	0020      	movs	r0, r4
 80066fe:	f00d ff87 	bl	8014610 <siprintf>
 8006702:	e004      	b.n	800670e <groupCommand+0x14a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 8006704:	aa04      	add	r2, sp, #16
 8006706:	4920      	ldr	r1, [pc, #128]	; (8006788 <groupCommand+0x1c4>)
 8006708:	0020      	movs	r0, r4
 800670a:	f00d ff81 	bl	8014610 <siprintf>
}
 800670e:	2000      	movs	r0, #0
 8006710:	b00f      	add	sp, #60	; 0x3c
 8006712:	bcc0      	pop	{r6, r7}
 8006714:	46b9      	mov	r9, r7
 8006716:	46b0      	mov	r8, r6
 8006718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 800671a:	aa01      	add	r2, sp, #4
 800671c:	491b      	ldr	r1, [pc, #108]	; (800678c <groupCommand+0x1c8>)
 800671e:	0020      	movs	r0, r4
 8006720:	f00d ff76 	bl	8014610 <siprintf>
 8006724:	e7f3      	b.n	800670e <groupCommand+0x14a>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8006726:	aa01      	add	r2, sp, #4
 8006728:	4919      	ldr	r1, [pc, #100]	; (8006790 <groupCommand+0x1cc>)
 800672a:	a804      	add	r0, sp, #16
 800672c:	f00d ff70 	bl	8014610 <siprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8006730:	a904      	add	r1, sp, #16
 8006732:	0020      	movs	r0, r4
 8006734:	f00d ff8c 	bl	8014650 <strcat>
 8006738:	e7e9      	b.n	800670e <groupCommand+0x14a>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 800673a:	aa01      	add	r2, sp, #4
 800673c:	4915      	ldr	r1, [pc, #84]	; (8006794 <groupCommand+0x1d0>)
 800673e:	a804      	add	r0, sp, #16
 8006740:	f00d ff66 	bl	8014610 <siprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8006744:	a904      	add	r1, sp, #16
 8006746:	0020      	movs	r0, r4
 8006748:	f00d ff82 	bl	8014650 <strcat>
 800674c:	e7df      	b.n	800670e <groupCommand+0x14a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 800674e:	aa01      	add	r2, sp, #4
 8006750:	4911      	ldr	r1, [pc, #68]	; (8006798 <groupCommand+0x1d4>)
 8006752:	0020      	movs	r0, r4
 8006754:	f00d ff5c 	bl	8014610 <siprintf>
 8006758:	e7d9      	b.n	800670e <groupCommand+0x14a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 800675a:	aa01      	add	r2, sp, #4
 800675c:	490f      	ldr	r1, [pc, #60]	; (800679c <groupCommand+0x1d8>)
 800675e:	0020      	movs	r0, r4
 8006760:	f00d ff56 	bl	8014610 <siprintf>
 8006764:	e7d3      	b.n	800670e <groupCommand+0x14a>
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	20000ae4 	.word	0x20000ae4
 800676c:	20000684 	.word	0x20000684
 8006770:	20000aae 	.word	0x20000aae
 8006774:	08019834 	.word	0x08019834
 8006778:	20000adc 	.word	0x20000adc
 800677c:	20000ab0 	.word	0x20000ab0
 8006780:	08019840 	.word	0x08019840
 8006784:	08019944 	.word	0x08019944
 8006788:	08019844 	.word	0x08019844
 800678c:	08019868 	.word	0x08019868
 8006790:	08019894 	.word	0x08019894
 8006794:	080198b0 	.word	0x080198b0
 8006798:	080198d0 	.word	0x080198d0
 800679c:	08019910 	.word	0x08019910

080067a0 <nameCommand>:
{
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	0004      	movs	r4, r0
 80067a4:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 80067a6:	2c00      	cmp	r4, #0
 80067a8:	d01a      	beq.n	80067e0 <nameCommand+0x40>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80067aa:	4d1d      	ldr	r5, [pc, #116]	; (8006820 <nameCommand+0x80>)
 80067ac:	002a      	movs	r2, r5
 80067ae:	2101      	movs	r1, #1
 80067b0:	f007 ff48 	bl	800e644 <FreeRTOS_CLIGetParameter>
 80067b4:	0001      	movs	r1, r0
 80067b6:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <nameCommand+0x84>)
 80067b8:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 80067ba:	682b      	ldr	r3, [r5, #0]
 80067bc:	2b09      	cmp	r3, #9
 80067be:	dd01      	ble.n	80067c4 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 80067c0:	2300      	movs	r3, #0
 80067c2:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 80067c4:	4b18      	ldr	r3, [pc, #96]	; (8006828 <nameCommand+0x88>)
 80067c6:	7818      	ldrb	r0, [r3, #0]
 80067c8:	f7fd f974 	bl	8003ab4 <NameModule>
	if (result == BOS_OK)
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d009      	beq.n	80067e4 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 80067d0:	2806      	cmp	r0, #6
 80067d2:	d010      	beq.n	80067f6 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 80067d4:	2807      	cmp	r0, #7
 80067d6:	d015      	beq.n	8006804 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 80067d8:	2808      	cmp	r0, #8
 80067da:	d01a      	beq.n	8006812 <nameCommand+0x72>
}
 80067dc:	2000      	movs	r0, #0
 80067de:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 80067e0:	b672      	cpsid	i
 80067e2:	e7fe      	b.n	80067e2 <nameCommand+0x42>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 80067e4:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <nameCommand+0x84>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a0f      	ldr	r2, [pc, #60]	; (8006828 <nameCommand+0x88>)
 80067ea:	7812      	ldrb	r2, [r2, #0]
 80067ec:	490f      	ldr	r1, [pc, #60]	; (800682c <nameCommand+0x8c>)
 80067ee:	0020      	movs	r0, r4
 80067f0:	f00d ff0e 	bl	8014610 <siprintf>
 80067f4:	e7f2      	b.n	80067dc <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 80067f6:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <nameCommand+0x84>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	490d      	ldr	r1, [pc, #52]	; (8006830 <nameCommand+0x90>)
 80067fc:	0020      	movs	r0, r4
 80067fe:	f00d ff07 	bl	8014610 <siprintf>
 8006802:	e7eb      	b.n	80067dc <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 8006804:	4b07      	ldr	r3, [pc, #28]	; (8006824 <nameCommand+0x84>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	490a      	ldr	r1, [pc, #40]	; (8006834 <nameCommand+0x94>)
 800680a:	0020      	movs	r0, r4
 800680c:	f00d ff00 	bl	8014610 <siprintf>
 8006810:	e7e4      	b.n	80067dc <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 8006812:	4b04      	ldr	r3, [pc, #16]	; (8006824 <nameCommand+0x84>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4908      	ldr	r1, [pc, #32]	; (8006838 <nameCommand+0x98>)
 8006818:	0020      	movs	r0, r4
 800681a:	f00d fef9 	bl	8014610 <siprintf>
 800681e:	e7dd      	b.n	80067dc <nameCommand+0x3c>
 8006820:	20000ae0 	.word	0x20000ae0
 8006824:	20000ab4 	.word	0x20000ab4
 8006828:	2000089e 	.word	0x2000089e
 800682c:	08019984 	.word	0x08019984
 8006830:	080198d0 	.word	0x080198d0
 8006834:	08019910 	.word	0x08019910
 8006838:	08019944 	.word	0x08019944

0800683c <bootloaderUpdateCommand>:
{
 800683c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683e:	46c6      	mov	lr, r8
 8006840:	b500      	push	{lr}
 8006842:	b082      	sub	sp, #8
 8006844:	0004      	movs	r4, r0
 8006846:	0017      	movs	r7, r2
 8006848:	2600      	movs	r6, #0
 800684a:	2500      	movs	r5, #0
	configASSERT( pcWriteBuffer );
 800684c:	2800      	cmp	r0, #0
 800684e:	d04f      	beq.n	80068f0 <bootloaderUpdateCommand+0xb4>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006850:	4a4d      	ldr	r2, [pc, #308]	; (8006988 <bootloaderUpdateCommand+0x14c>)
 8006852:	2101      	movs	r1, #1
 8006854:	0038      	movs	r0, r7
 8006856:	f007 fef5 	bl	800e644 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 800685a:	2800      	cmp	r0, #0
 800685c:	d04a      	beq.n	80068f4 <bootloaderUpdateCommand+0xb8>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 800685e:	4b4a      	ldr	r3, [pc, #296]	; (8006988 <bootloaderUpdateCommand+0x14c>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	494a      	ldr	r1, [pc, #296]	; (800698c <bootloaderUpdateCommand+0x150>)
 8006864:	f00d ff17 	bl	8014696 <strncmp>
 8006868:	2800      	cmp	r0, #0
 800686a:	d137      	bne.n	80068dc <bootloaderUpdateCommand+0xa0>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800686c:	4a48      	ldr	r2, [pc, #288]	; (8006990 <bootloaderUpdateCommand+0x154>)
 800686e:	2102      	movs	r1, #2
 8006870:	0038      	movs	r0, r7
 8006872:	f007 fee7 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8006876:	4b47      	ldr	r3, [pc, #284]	; (8006994 <bootloaderUpdateCommand+0x158>)
 8006878:	4698      	mov	r8, r3
 800687a:	6018      	str	r0, [r3, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800687c:	4a46      	ldr	r2, [pc, #280]	; (8006998 <bootloaderUpdateCommand+0x15c>)
 800687e:	2103      	movs	r1, #3
 8006880:	0038      	movs	r0, r7
 8006882:	f007 fedf 	bl	800e644 <FreeRTOS_CLIGetParameter>
 8006886:	4b45      	ldr	r3, [pc, #276]	; (800699c <bootloaderUpdateCommand+0x160>)
 8006888:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 800688a:	4643      	mov	r3, r8
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	2300      	movs	r3, #0
 8006890:	56c3      	ldrsb	r3, [r0, r3]
 8006892:	2b23      	cmp	r3, #35	; 0x23
 8006894:	d058      	beq.n	8006948 <bootloaderUpdateCommand+0x10c>
				result = BOS_ERR_WrongValue;				
 8006896:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString3[0] == 'p') {
 8006898:	4b40      	ldr	r3, [pc, #256]	; (800699c <bootloaderUpdateCommand+0x160>)
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	2300      	movs	r3, #0
 800689e:	56c3      	ldrsb	r3, [r0, r3]
 80068a0:	2b70      	cmp	r3, #112	; 0x70
 80068a2:	d057      	beq.n	8006954 <bootloaderUpdateCommand+0x118>
				result = BOS_ERR_WrongValue;		
 80068a4:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 80068a6:	4b3e      	ldr	r3, [pc, #248]	; (80069a0 <bootloaderUpdateCommand+0x164>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	42b3      	cmp	r3, r6
 80068ac:	d057      	beq.n	800695e <bootloaderUpdateCommand+0x122>
				BOS.response = BOS_RESPONSE_NONE;							
 80068ae:	4b3d      	ldr	r3, [pc, #244]	; (80069a4 <bootloaderUpdateCommand+0x168>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 80068b4:	4b3c      	ldr	r3, [pc, #240]	; (80069a8 <bootloaderUpdateCommand+0x16c>)
 80068b6:	701d      	strb	r5, [r3, #0]
 80068b8:	3201      	adds	r2, #1
 80068ba:	211a      	movs	r1, #26
 80068bc:	0030      	movs	r0, r6
 80068be:	f001 ffed 	bl	800889c <SendMessageToModule>
				osDelay(100);			
 80068c2:	2064      	movs	r0, #100	; 0x64
 80068c4:	f007 fd9a 	bl	800e3fc <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 80068c8:	4b38      	ldr	r3, [pc, #224]	; (80069ac <bootloaderUpdateCommand+0x170>)
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	4b34      	ldr	r3, [pc, #208]	; (80069a0 <bootloaderUpdateCommand+0x164>)
 80068ce:	7818      	ldrb	r0, [r3, #0]
 80068d0:	002b      	movs	r3, r5
 80068d2:	0031      	movs	r1, r6
 80068d4:	f7fc fd6e 	bl	80033b4 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 80068d8:	2f68      	cmp	r7, #104	; 0x68
 80068da:	d104      	bne.n	80068e6 <bootloaderUpdateCommand+0xaa>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 80068dc:	220f      	movs	r2, #15
 80068de:	4934      	ldr	r1, [pc, #208]	; (80069b0 <bootloaderUpdateCommand+0x174>)
 80068e0:	0020      	movs	r0, r4
 80068e2:	f00c fefb 	bl	80136dc <memcpy>
}
 80068e6:	2000      	movs	r0, #0
 80068e8:	b002      	add	sp, #8
 80068ea:	bc80      	pop	{r7}
 80068ec:	46b8      	mov	r8, r7
 80068ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80068f0:	b672      	cpsid	i
 80068f2:	e7fe      	b.n	80068f2 <bootloaderUpdateCommand+0xb6>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 80068f4:	4b2a      	ldr	r3, [pc, #168]	; (80069a0 <bootloaderUpdateCommand+0x164>)
 80068f6:	781a      	ldrb	r2, [r3, #0]
 80068f8:	492e      	ldr	r1, [pc, #184]	; (80069b4 <bootloaderUpdateCommand+0x178>)
 80068fa:	0020      	movs	r0, r4
 80068fc:	f00d fe88 	bl	8014610 <siprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8006900:	4b2d      	ldr	r3, [pc, #180]	; (80069b8 <bootloaderUpdateCommand+0x17c>)
 8006902:	6819      	ldr	r1, [r3, #0]
 8006904:	0020      	movs	r0, r4
 8006906:	f00d fea3 	bl	8014650 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800690a:	0020      	movs	r0, r4
 800690c:	f7f9 fc04 	bl	8000118 <strlen>
 8006910:	b282      	uxth	r2, r0
 8006912:	4b26      	ldr	r3, [pc, #152]	; (80069ac <bootloaderUpdateCommand+0x170>)
 8006914:	7818      	ldrb	r0, [r3, #0]
 8006916:	2301      	movs	r3, #1
 8006918:	425b      	negs	r3, r3
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	3333      	adds	r3, #51	; 0x33
 800691e:	0021      	movs	r1, r4
 8006920:	f007 fc36 	bl	800e190 <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8006924:	4b25      	ldr	r3, [pc, #148]	; (80069bc <bootloaderUpdateCommand+0x180>)
 8006926:	4a26      	ldr	r2, [pc, #152]	; (80069c0 <bootloaderUpdateCommand+0x184>)
 8006928:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 800692a:	4b26      	ldr	r3, [pc, #152]	; (80069c4 <bootloaderUpdateCommand+0x188>)
 800692c:	2201      	movs	r2, #1
 800692e:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006930:	200a      	movs	r0, #10
 8006932:	f007 fd63 	bl	800e3fc <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	4b23      	ldr	r3, [pc, #140]	; (80069c8 <bootloaderUpdateCommand+0x18c>)
 800693c:	4a23      	ldr	r2, [pc, #140]	; (80069cc <bootloaderUpdateCommand+0x190>)
 800693e:	60da      	str	r2, [r3, #12]
 8006940:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006944:	46c0      	nop			; (mov r8, r8)
 8006946:	e7fd      	b.n	8006944 <bootloaderUpdateCommand+0x108>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006948:	3001      	adds	r0, #1
 800694a:	f00c fe7a 	bl	8013642 <atol>
 800694e:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 8006950:	2700      	movs	r7, #0
 8006952:	e7a1      	b.n	8006898 <bootloaderUpdateCommand+0x5c>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006954:	3001      	adds	r0, #1
 8006956:	f00c fe74 	bl	8013642 <atol>
 800695a:	b2c5      	uxtb	r5, r0
 800695c:	e7a3      	b.n	80068a6 <bootloaderUpdateCommand+0x6a>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 800695e:	2300      	movs	r3, #0
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	3319      	adds	r3, #25
 8006964:	2200      	movs	r2, #0
 8006966:	2100      	movs	r1, #0
 8006968:	0028      	movs	r0, r5
 800696a:	f001 fd8b 	bl	8008484 <SendMessageFromPort>
				osDelay(100);
 800696e:	2064      	movs	r0, #100	; 0x64
 8006970:	f007 fd44 	bl	800e3fc <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <bootloaderUpdateCommand+0x164>)
 8006976:	7818      	ldrb	r0, [r3, #0]
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <bootloaderUpdateCommand+0x170>)
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	002b      	movs	r3, r5
 800697e:	0001      	movs	r1, r0
 8006980:	f7fc fd18 	bl	80033b4 <remoteBootloaderUpdate>
 8006984:	e7a8      	b.n	80068d8 <bootloaderUpdateCommand+0x9c>
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	20000ae8 	.word	0x20000ae8
 800698c:	080199bc 	.word	0x080199bc
 8006990:	20000aec 	.word	0x20000aec
 8006994:	20000ac8 	.word	0x20000ac8
 8006998:	20000af0 	.word	0x20000af0
 800699c:	20000ad0 	.word	0x20000ad0
 80069a0:	2000089e 	.word	0x2000089e
 80069a4:	20006138 	.word	0x20006138
 80069a8:	20000760 	.word	0x20000760
 80069ac:	200002d7 	.word	0x200002d7
 80069b0:	08019448 	.word	0x08019448
 80069b4:	0801999c 	.word	0x0801999c
 80069b8:	20000074 	.word	0x20000074
 80069bc:	20007ff0 	.word	0x20007ff0
 80069c0:	deadbeef 	.word	0xdeadbeef
 80069c4:	2000071c 	.word	0x2000071c
 80069c8:	e000ed00 	.word	0xe000ed00
 80069cc:	05fa0004 	.word	0x05fa0004

080069d0 <pingCommand>:
{
 80069d0:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d01e      	beq.n	8006a14 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 80069d6:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <pingCommand+0x5c>)
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	0093      	lsls	r3, r2, #2
 80069dc:	189b      	adds	r3, r3, r2
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	4913      	ldr	r1, [pc, #76]	; (8006a30 <pingCommand+0x60>)
 80069e2:	5c5b      	ldrb	r3, [r3, r1]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d117      	bne.n	8006a18 <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 80069e8:	4912      	ldr	r1, [pc, #72]	; (8006a34 <pingCommand+0x64>)
 80069ea:	f00d fe11 	bl	8014610 <siprintf>
	RTOS_IND_blink(200);	
 80069ee:	2580      	movs	r5, #128	; 0x80
 80069f0:	012d      	lsls	r5, r5, #4
 80069f2:	2490      	movs	r4, #144	; 0x90
 80069f4:	05e4      	lsls	r4, r4, #23
 80069f6:	2201      	movs	r2, #1
 80069f8:	0029      	movs	r1, r5
 80069fa:	0020      	movs	r0, r4
 80069fc:	f00b f8cb 	bl	8011b96 <HAL_GPIO_WritePin>
 8006a00:	20c8      	movs	r0, #200	; 0xc8
 8006a02:	f007 fcfb 	bl	800e3fc <osDelay>
 8006a06:	2200      	movs	r2, #0
 8006a08:	0029      	movs	r1, r5
 8006a0a:	0020      	movs	r0, r4
 8006a0c:	f00b f8c3 	bl	8011b96 <HAL_GPIO_WritePin>
}
 8006a10:	2000      	movs	r0, #0
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8006a14:	b672      	cpsid	i
 8006a16:	e7fe      	b.n	8006a16 <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8006a18:	0093      	lsls	r3, r2, #2
 8006a1a:	189b      	adds	r3, r3, r2
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	4904      	ldr	r1, [pc, #16]	; (8006a30 <pingCommand+0x60>)
 8006a20:	185b      	adds	r3, r3, r1
 8006a22:	4905      	ldr	r1, [pc, #20]	; (8006a38 <pingCommand+0x68>)
 8006a24:	f00d fdf4 	bl	8014610 <siprintf>
 8006a28:	e7e1      	b.n	80069ee <pingCommand+0x1e>
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	2000089e 	.word	0x2000089e
 8006a30:	20000790 	.word	0x20000790
 8006a34:	080199c0 	.word	0x080199c0
 8006a38:	080199d4 	.word	0x080199d4

08006a3c <prvRunTimeStatsCommand>:
{
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006a40:	d009      	beq.n	8006a56 <prvRunTimeStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 8006a42:	2251      	movs	r2, #81	; 0x51
 8006a44:	4905      	ldr	r1, [pc, #20]	; (8006a5c <prvRunTimeStatsCommand+0x20>)
 8006a46:	f00c fe49 	bl	80136dc <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 8006a4a:	0020      	movs	r0, r4
 8006a4c:	3050      	adds	r0, #80	; 0x50
 8006a4e:	f009 f875 	bl	800fb3c <vTaskGetRunTimeStats>
}
 8006a52:	2000      	movs	r0, #0
 8006a54:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006a56:	b672      	cpsid	i
 8006a58:	e7fe      	b.n	8006a58 <prvRunTimeStatsCommand+0x1c>
 8006a5a:	46c0      	nop			; (mov r8, r8)
 8006a5c:	080199f0 	.word	0x080199f0

08006a60 <prvTaskStatsCommand>:
{
 8006a60:	b510      	push	{r4, lr}
 8006a62:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006a64:	d009      	beq.n	8006a7a <prvTaskStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 8006a66:	225b      	movs	r2, #91	; 0x5b
 8006a68:	4905      	ldr	r1, [pc, #20]	; (8006a80 <prvTaskStatsCommand+0x20>)
 8006a6a:	f00c fe37 	bl	80136dc <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 8006a6e:	0020      	movs	r0, r4
 8006a70:	305a      	adds	r0, #90	; 0x5a
 8006a72:	f009 f807 	bl	800fa84 <vTaskList>
}
 8006a76:	2000      	movs	r0, #0
 8006a78:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006a7a:	b672      	cpsid	i
 8006a7c:	e7fe      	b.n	8006a7c <prvTaskStatsCommand+0x1c>
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	08019a44 	.word	0x08019a44

08006a84 <resetCommand>:
	configASSERT( pcWriteBuffer );
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d008      	beq.n	8006a9a <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <resetCommand+0x1c>)
 8006a8e:	4a05      	ldr	r2, [pc, #20]	; (8006aa4 <resetCommand+0x20>)
 8006a90:	60da      	str	r2, [r3, #12]
 8006a92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	e7fd      	b.n	8006a96 <resetCommand+0x12>
 8006a9a:	b672      	cpsid	i
 8006a9c:	e7fe      	b.n	8006a9c <resetCommand+0x18>
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	e000ed00 	.word	0xe000ed00
 8006aa4:	05fa0004 	.word	0x05fa0004

08006aa8 <RegisterUserCLICommands>:
}
 8006aa8:	4770      	bx	lr
	...

08006aac <vRegisterCLICommands>:
{
 8006aac:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 8006aae:	482f      	ldr	r0, [pc, #188]	; (8006b6c <vRegisterCLICommands+0xc0>)
 8006ab0:	f007 fd40 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 8006ab4:	482e      	ldr	r0, [pc, #184]	; (8006b70 <vRegisterCLICommands+0xc4>)
 8006ab6:	f007 fd3d 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 8006aba:	482e      	ldr	r0, [pc, #184]	; (8006b74 <vRegisterCLICommands+0xc8>)
 8006abc:	f007 fd3a 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 8006ac0:	482d      	ldr	r0, [pc, #180]	; (8006b78 <vRegisterCLICommands+0xcc>)
 8006ac2:	f007 fd37 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 8006ac6:	482d      	ldr	r0, [pc, #180]	; (8006b7c <vRegisterCLICommands+0xd0>)
 8006ac8:	f007 fd34 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 8006acc:	482c      	ldr	r0, [pc, #176]	; (8006b80 <vRegisterCLICommands+0xd4>)
 8006ace:	f007 fd31 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 8006ad2:	482c      	ldr	r0, [pc, #176]	; (8006b84 <vRegisterCLICommands+0xd8>)
 8006ad4:	f007 fd2e 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 8006ad8:	482b      	ldr	r0, [pc, #172]	; (8006b88 <vRegisterCLICommands+0xdc>)
 8006ada:	f007 fd2b 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 8006ade:	482b      	ldr	r0, [pc, #172]	; (8006b8c <vRegisterCLICommands+0xe0>)
 8006ae0:	f007 fd28 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 8006ae4:	482a      	ldr	r0, [pc, #168]	; (8006b90 <vRegisterCLICommands+0xe4>)
 8006ae6:	f007 fd25 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 8006aea:	482a      	ldr	r0, [pc, #168]	; (8006b94 <vRegisterCLICommands+0xe8>)
 8006aec:	f007 fd22 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 8006af0:	4829      	ldr	r0, [pc, #164]	; (8006b98 <vRegisterCLICommands+0xec>)
 8006af2:	f007 fd1f 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 8006af6:	4829      	ldr	r0, [pc, #164]	; (8006b9c <vRegisterCLICommands+0xf0>)
 8006af8:	f007 fd1c 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 8006afc:	4828      	ldr	r0, [pc, #160]	; (8006ba0 <vRegisterCLICommands+0xf4>)
 8006afe:	f007 fd19 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 8006b02:	4828      	ldr	r0, [pc, #160]	; (8006ba4 <vRegisterCLICommands+0xf8>)
 8006b04:	f007 fd16 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 8006b08:	4827      	ldr	r0, [pc, #156]	; (8006ba8 <vRegisterCLICommands+0xfc>)
 8006b0a:	f007 fd13 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 8006b0e:	4827      	ldr	r0, [pc, #156]	; (8006bac <vRegisterCLICommands+0x100>)
 8006b10:	f007 fd10 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 8006b14:	4826      	ldr	r0, [pc, #152]	; (8006bb0 <vRegisterCLICommands+0x104>)
 8006b16:	f007 fd0d 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 8006b1a:	4826      	ldr	r0, [pc, #152]	; (8006bb4 <vRegisterCLICommands+0x108>)
 8006b1c:	f007 fd0a 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8006b20:	4825      	ldr	r0, [pc, #148]	; (8006bb8 <vRegisterCLICommands+0x10c>)
 8006b22:	f007 fd07 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 8006b26:	4825      	ldr	r0, [pc, #148]	; (8006bbc <vRegisterCLICommands+0x110>)
 8006b28:	f007 fd04 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 8006b2c:	4824      	ldr	r0, [pc, #144]	; (8006bc0 <vRegisterCLICommands+0x114>)
 8006b2e:	f007 fd01 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 8006b32:	4824      	ldr	r0, [pc, #144]	; (8006bc4 <vRegisterCLICommands+0x118>)
 8006b34:	f007 fcfe 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 8006b38:	4823      	ldr	r0, [pc, #140]	; (8006bc8 <vRegisterCLICommands+0x11c>)
 8006b3a:	f007 fcfb 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 8006b3e:	4823      	ldr	r0, [pc, #140]	; (8006bcc <vRegisterCLICommands+0x120>)
 8006b40:	f007 fcf8 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 8006b44:	4822      	ldr	r0, [pc, #136]	; (8006bd0 <vRegisterCLICommands+0x124>)
 8006b46:	f007 fcf5 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 8006b4a:	4822      	ldr	r0, [pc, #136]	; (8006bd4 <vRegisterCLICommands+0x128>)
 8006b4c:	f007 fcf2 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 8006b50:	4821      	ldr	r0, [pc, #132]	; (8006bd8 <vRegisterCLICommands+0x12c>)
 8006b52:	f007 fcef 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 8006b56:	4821      	ldr	r0, [pc, #132]	; (8006bdc <vRegisterCLICommands+0x130>)
 8006b58:	f007 fcec 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 8006b5c:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <vRegisterCLICommands+0x134>)
 8006b5e:	221d      	movs	r2, #29
 8006b60:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8006b62:	f004 fb9f 	bl	800b2a4 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8006b66:	f7ff ff9f 	bl	8006aa8 <RegisterUserCLICommands>
}
 8006b6a:	bd10      	pop	{r4, pc}
 8006b6c:	0801a928 	.word	0x0801a928
 8006b70:	0801a918 	.word	0x0801a918
 8006b74:	0801a908 	.word	0x0801a908
 8006b78:	0801a824 	.word	0x0801a824
 8006b7c:	0801a874 	.word	0x0801a874
 8006b80:	0801a948 	.word	0x0801a948
 8006b84:	0801a8e8 	.word	0x0801a8e8
 8006b88:	0801a8a4 	.word	0x0801a8a4
 8006b8c:	0801a998 	.word	0x0801a998
 8006b90:	0801a8c4 	.word	0x0801a8c4
 8006b94:	0801a958 	.word	0x0801a958
 8006b98:	0801a814 	.word	0x0801a814
 8006b9c:	0801a938 	.word	0x0801a938
 8006ba0:	0801a978 	.word	0x0801a978
 8006ba4:	0801a894 	.word	0x0801a894
 8006ba8:	0801a854 	.word	0x0801a854
 8006bac:	0801a9b8 	.word	0x0801a9b8
 8006bb0:	0801a844 	.word	0x0801a844
 8006bb4:	0801a968 	.word	0x0801a968
 8006bb8:	0801a9d8 	.word	0x0801a9d8
 8006bbc:	0801a8b4 	.word	0x0801a8b4
 8006bc0:	0801a884 	.word	0x0801a884
 8006bc4:	0801a988 	.word	0x0801a988
 8006bc8:	0801a804 	.word	0x0801a804
 8006bcc:	0801a8f8 	.word	0x0801a8f8
 8006bd0:	0801a864 	.word	0x0801a864
 8006bd4:	0801a834 	.word	0x0801a834
 8006bd8:	0801a9c8 	.word	0x0801a9c8
 8006bdc:	0801a9a8 	.word	0x0801a9a8
 8006be0:	200060bc 	.word	0x200060bc

08006be4 <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 8006be4:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 8006be6:	1e45      	subs	r5, r0, #1
 8006be8:	00ec      	lsls	r4, r5, #3
 8006bea:	1b60      	subs	r0, r4, r5
 8006bec:	00c0      	lsls	r0, r0, #3
 8006bee:	4e05      	ldr	r6, [pc, #20]	; (8006c04 <StopMsgDMA+0x20>)
 8006bf0:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8006bf2:	f00a f974 	bl	8010ede <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8006bf6:	1b64      	subs	r4, r4, r5
 8006bf8:	00e4      	lsls	r4, r4, #3
 8006bfa:	59a3      	ldr	r3, [r4, r6]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	605a      	str	r2, [r3, #4]
}
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	20000f3c 	.word	0x20000f3c

08006c08 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 8006c08:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 8006c0a:	1e44      	subs	r4, r0, #1
 8006c0c:	00e5      	lsls	r5, r4, #3
 8006c0e:	1b28      	subs	r0, r5, r4
 8006c10:	00c0      	lsls	r0, r0, #3
 8006c12:	4e07      	ldr	r6, [pc, #28]	; (8006c30 <StopStreamDMA+0x28>)
 8006c14:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8006c16:	f00a f962 	bl	8010ede <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8006c1a:	1b2d      	subs	r5, r5, r4
 8006c1c:	00ed      	lsls	r5, r5, #3
 8006c1e:	59aa      	ldr	r2, [r5, r6]
 8006c20:	2300      	movs	r3, #0
 8006c22:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 8006c24:	00a4      	lsls	r4, r4, #2
 8006c26:	4a03      	ldr	r2, [pc, #12]	; (8006c34 <StopStreamDMA+0x2c>)
 8006c28:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 8006c2a:	4a03      	ldr	r2, [pc, #12]	; (8006c38 <StopStreamDMA+0x30>)
 8006c2c:	50a3      	str	r3, [r4, r2]

}
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	20001134 	.word	0x20001134
 8006c34:	20000c7c 	.word	0x20000c7c
 8006c38:	20000ca4 	.word	0x20000ca4

08006c3c <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8006c40:	f7ff ffd0 	bl	8006be4 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 8006c44:	3c01      	subs	r4, #1
 8006c46:	00e0      	lsls	r0, r4, #3
 8006c48:	1b02      	subs	r2, r0, r4
 8006c4a:	00d2      	lsls	r2, r2, #3
 8006c4c:	4903      	ldr	r1, [pc, #12]	; (8006c5c <SwitchMsgDMAToStream+0x20>)
 8006c4e:	5851      	ldr	r1, [r2, r1]
 8006c50:	4b03      	ldr	r3, [pc, #12]	; (8006c60 <SwitchMsgDMAToStream+0x24>)
 8006c52:	18d0      	adds	r0, r2, r3
 8006c54:	f005 faac 	bl	800c1b0 <DMA_STREAM_CH_Init>
}
 8006c58:	bd10      	pop	{r4, pc}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	20000f3c 	.word	0x20000f3c
 8006c60:	20001134 	.word	0x20001134

08006c64 <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 8006c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c66:	46c6      	mov	lr, r8
 8006c68:	b500      	push	{lr}
 8006c6a:	0007      	movs	r7, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 8006c6c:	f7ff ffcc 	bl	8006c08 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 8006c70:	1e7c      	subs	r4, r7, #1
 8006c72:	00e5      	lsls	r5, r4, #3
 8006c74:	1b2e      	subs	r6, r5, r4
 8006c76:	00f6      	lsls	r6, r6, #3
 8006c78:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <SwitchStreamDMAToMsg+0x5c>)
 8006c7a:	18f6      	adds	r6, r6, r3
 8006c7c:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <SwitchStreamDMAToMsg+0x60>)
 8006c7e:	4698      	mov	r8, r3
 8006c80:	1b2b      	subs	r3, r5, r4
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	4642      	mov	r2, r8
 8006c86:	5899      	ldr	r1, [r3, r2]
 8006c88:	0030      	movs	r0, r6
 8006c8a:	f005 fa1b 	bl	800c0c4 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 8006c8e:	1b2b      	subs	r3, r5, r4
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	4443      	add	r3, r8
 8006c94:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006c96:	f004 fb25 	bl	800b2e4 <GetPort>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4a0a      	ldr	r2, [pc, #40]	; (8006cc8 <SwitchStreamDMAToMsg+0x64>)
 8006c9e:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 8006ca0:	1b2d      	subs	r5, r5, r4
 8006ca2:	00ed      	lsls	r5, r5, #3
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port-1] = 0;
 8006ca8:	00a4      	lsls	r4, r4, #2
 8006caa:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <SwitchStreamDMAToMsg+0x68>)
 8006cac:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 8006cae:	0038      	movs	r0, r7
 8006cb0:	f007 fa50 	bl	800e154 <GetUart>
 8006cb4:	0031      	movs	r1, r6
 8006cb6:	f005 ff79 	bl	800cbac <DMA_MSG_RX_Setup>
		
}
 8006cba:	bc80      	pop	{r7}
 8006cbc:	46b8      	mov	r8, r7
 8006cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc0:	20000f3c 	.word	0x20000f3c
 8006cc4:	20001134 	.word	0x20001134
 8006cc8:	20000918 	.word	0x20000918
 8006ccc:	20000c90 	.word	0x20000c90

08006cd0 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	0005      	movs	r5, r0
 8006cd4:	000e      	movs	r6, r1
 8006cd6:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 8006cd8:	f004 fb04 	bl	800b2e4 <GetPort>
 8006cdc:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8006cde:	4b0e      	ldr	r3, [pc, #56]	; (8006d18 <StartDMAstream+0x48>)
 8006ce0:	5c1b      	ldrb	r3, [r3, r0]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d903      	bls.n	8006cee <StartDMAstream+0x1e>
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d001      	beq.n	8006cee <StartDMAstream+0x1e>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8006cea:	2017      	movs	r0, #23
 8006cec:	e012      	b.n	8006d14 <StartDMAstream+0x44>
		SwitchMsgDMAToStream(srcPort);
 8006cee:	0020      	movs	r0, r4
 8006cf0:	f7ff ffa4 	bl	8006c3c <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 8006cf4:	1e63      	subs	r3, r4, #1
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4a08      	ldr	r2, [pc, #32]	; (8006d1c <StartDMAstream+0x4c>)
 8006cfa:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 8006cfc:	4a06      	ldr	r2, [pc, #24]	; (8006d18 <StartDMAstream+0x48>)
 8006cfe:	2102      	movs	r1, #2
 8006d00:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 8006d02:	4a07      	ldr	r2, [pc, #28]	; (8006d20 <StartDMAstream+0x50>)
 8006d04:	2100      	movs	r1, #0
 8006d06:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 8006d08:	003a      	movs	r2, r7
 8006d0a:	0031      	movs	r1, r6
 8006d0c:	0028      	movs	r0, r5
 8006d0e:	f005 ffab 	bl	800cc68 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8006d12:	2000      	movs	r0, #0
}
 8006d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	20000918 	.word	0x20000918
 8006d1c:	20000c90 	.word	0x20000c90
 8006d20:	20000c7c 	.word	0x20000c7c

08006d24 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 8006d28:	4b13      	ldr	r3, [pc, #76]	; (8006d78 <DMA_IRQHandler+0x54>)
 8006d2a:	5c1b      	ldrb	r3, [r3, r0]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d008      	beq.n	8006d42 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 8006d30:	3c01      	subs	r4, #1
 8006d32:	00e0      	lsls	r0, r4, #3
 8006d34:	1b00      	subs	r0, r0, r4
 8006d36:	00c0      	lsls	r0, r0, #3
 8006d38:	4c10      	ldr	r4, [pc, #64]	; (8006d7c <DMA_IRQHandler+0x58>)
 8006d3a:	1900      	adds	r0, r0, r4
 8006d3c:	f00a f8f8 	bl	8010f30 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 8006d40:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 8006d42:	1e45      	subs	r5, r0, #1
 8006d44:	00e8      	lsls	r0, r5, #3
 8006d46:	1b40      	subs	r0, r0, r5
 8006d48:	00c0      	lsls	r0, r0, #3
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <DMA_IRQHandler+0x5c>)
 8006d4c:	18c0      	adds	r0, r0, r3
 8006d4e:	f00a f8ef 	bl	8010f30 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 8006d52:	00aa      	lsls	r2, r5, #2
 8006d54:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <DMA_IRQHandler+0x60>)
 8006d56:	58d3      	ldr	r3, [r2, r3]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <DMA_IRQHandler+0x42>
			++dmaStreamCount[port-1];
 8006d5c:	490a      	ldr	r1, [pc, #40]	; (8006d88 <DMA_IRQHandler+0x64>)
 8006d5e:	0010      	movs	r0, r2
 8006d60:	5852      	ldr	r2, [r2, r1]
 8006d62:	3201      	adds	r2, #1
 8006d64:	5042      	str	r2, [r0, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 8006d66:	00ad      	lsls	r5, r5, #2
 8006d68:	4a07      	ldr	r2, [pc, #28]	; (8006d88 <DMA_IRQHandler+0x64>)
 8006d6a:	58aa      	ldr	r2, [r5, r2]
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d8e7      	bhi.n	8006d40 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8006d70:	0020      	movs	r0, r4
 8006d72:	f7ff ff49 	bl	8006c08 <StopStreamDMA>
}
 8006d76:	e7e3      	b.n	8006d40 <DMA_IRQHandler+0x1c>
 8006d78:	20000918 	.word	0x20000918
 8006d7c:	20000f3c 	.word	0x20000f3c
 8006d80:	20001134 	.word	0x20001134
 8006d84:	20000ca4 	.word	0x20000ca4
 8006d88:	20000c7c 	.word	0x20000c7c

08006d8c <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8006d8c:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <ResetUartORE+0x24>)
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	2308      	movs	r3, #8
 8006d92:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8006d94:	4a07      	ldr	r2, [pc, #28]	; (8006db4 <ResetUartORE+0x28>)
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8006d9a:	4a07      	ldr	r2, [pc, #28]	; (8006db8 <ResetUartORE+0x2c>)
 8006d9c:	6812      	ldr	r2, [r2, #0]
 8006d9e:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8006da0:	4a06      	ldr	r2, [pc, #24]	; (8006dbc <ResetUartORE+0x30>)
 8006da2:	6812      	ldr	r2, [r2, #0]
 8006da4:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8006da6:	4a06      	ldr	r2, [pc, #24]	; (8006dc0 <ResetUartORE+0x34>)
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	6213      	str	r3, [r2, #32]
#endif
}
 8006dac:	4770      	bx	lr
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	20006354 	.word	0x20006354
 8006db4:	2000643c 	.word	0x2000643c
 8006db8:	20006218 	.word	0x20006218
 8006dbc:	200062e0 	.word	0x200062e0
 8006dc0:	200063cc 	.word	0x200063cc

08006dc4 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGEA or PAGEB) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8006dc4:	0002      	movs	r2, r0
  uint16_t PageStatusA = 6, PageStatusB = 6;

  /* Get PageA actual status */
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8006dc6:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <EE_FindValidPage+0x50>)
 8006dc8:	8818      	ldrh	r0, [r3, #0]
 8006dca:	b280      	uxth	r0, r0

  /* Get PageB actual status */
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8006dcc:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <EE_FindValidPage+0x54>)
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3

  /* Write or read operation */
  switch (Operation)
 8006dd2:	2a00      	cmp	r2, #0
 8006dd4:	d011      	beq.n	8006dfa <EE_FindValidPage+0x36>
 8006dd6:	2a01      	cmp	r2, #1
 8006dd8:	d115      	bne.n	8006e06 <EE_FindValidPage+0x42>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatusB == VALID_PAGE)
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <EE_FindValidPage+0x28>
      {
        /* PageA receiving data */
        if (PageStatusA == RECEIVE_DATA)
 8006dde:	4a0f      	ldr	r2, [pc, #60]	; (8006e1c <EE_FindValidPage+0x58>)
 8006de0:	4290      	cmp	r0, r2
 8006de2:	d001      	beq.n	8006de8 <EE_FindValidPage+0x24>
        {
          return PAGEA;         /* PageA valid */
        }
        else
        {
          return PAGEB;         /* PageB valid */
 8006de4:	2002      	movs	r0, #2
 8006de6:	e00f      	b.n	8006e08 <EE_FindValidPage+0x44>
          return PAGEA;         /* PageA valid */
 8006de8:	0018      	movs	r0, r3
 8006dea:	e00d      	b.n	8006e08 <EE_FindValidPage+0x44>
        }
      }
      else if (PageStatusA == VALID_PAGE)
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d10c      	bne.n	8006e0a <EE_FindValidPage+0x46>
      {
        /* PageB receiving data */
        if (PageStatusB == RECEIVE_DATA)
 8006df0:	4a0a      	ldr	r2, [pc, #40]	; (8006e1c <EE_FindValidPage+0x58>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d108      	bne.n	8006e08 <EE_FindValidPage+0x44>
        {
          return PAGEB;         /* PageB valid */
 8006df6:	3002      	adds	r0, #2
 8006df8:	e006      	b.n	8006e08 <EE_FindValidPage+0x44>
      {
        return NO_VALID_PAGE;   /* No valid Page */
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatusA == VALID_PAGE)
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d004      	beq.n	8006e08 <EE_FindValidPage+0x44>
      {
        return PAGEA;           /* PageA valid */
      }
      else if (PageStatusB == VALID_PAGE)
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d105      	bne.n	8006e0e <EE_FindValidPage+0x4a>
      {
        return PAGEB;           /* PageB valid */
 8006e02:	2002      	movs	r0, #2
 8006e04:	e000      	b.n	8006e08 <EE_FindValidPage+0x44>
  switch (Operation)
 8006e06:	2000      	movs	r0, #0
      }

    default:
      return PAGEA;             /* PageA valid */
  }
}
 8006e08:	4770      	bx	lr
        return NO_VALID_PAGE;   /* No valid Page */
 8006e0a:	20ab      	movs	r0, #171	; 0xab
 8006e0c:	e7fc      	b.n	8006e08 <EE_FindValidPage+0x44>
        return NO_VALID_PAGE ;  /* No valid Page */
 8006e0e:	20ab      	movs	r0, #171	; 0xab
 8006e10:	e7fa      	b.n	8006e08 <EE_FindValidPage+0x44>
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	0801e000 	.word	0x0801e000
 8006e18:	0801f000 	.word	0x0801f000
 8006e1c:	0000eeee 	.word	0x0000eeee

08006e20 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	0005      	movs	r5, r0
 8006e24:	000e      	movs	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 8006e26:	f00a fccf 	bl	80117c8 <HAL_FLASH_Unlock>

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	f7ff ffca 	bl	8006dc4 <EE_FindValidPage>
 8006e30:	0003      	movs	r3, r0

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8006e32:	28ab      	cmp	r0, #171	; 0xab
 8006e34:	d03d      	beq.n	8006eb2 <EE_VerifyPageFullWriteVariable+0x92>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8006e36:	4a1f      	ldr	r2, [pc, #124]	; (8006eb4 <EE_VerifyPageFullWriteVariable+0x94>)
 8006e38:	1884      	adds	r4, r0, r2
 8006e3a:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	02db      	lsls	r3, r3, #11
 8006e40:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <EE_VerifyPageFullWriteVariable+0x98>)
 8006e42:	4694      	mov	ip, r2
 8006e44:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8006e46:	429c      	cmp	r4, r3
 8006e48:	d230      	bcs.n	8006eac <EE_VerifyPageFullWriteVariable+0x8c>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	3201      	adds	r2, #1
 8006e4e:	d001      	beq.n	8006e54 <EE_VerifyPageFullWriteVariable+0x34>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8006e50:	3404      	adds	r4, #4
 8006e52:	e7f8      	b.n	8006e46 <EE_VerifyPageFullWriteVariable+0x26>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 8006e54:	0032      	movs	r2, r6
 8006e56:	2300      	movs	r3, #0
 8006e58:	0021      	movs	r1, r4
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	f00a fcfe 	bl	801185c <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006e60:	4816      	ldr	r0, [pc, #88]	; (8006ebc <EE_VerifyPageFullWriteVariable+0x9c>)
 8006e62:	f00a fccf 	bl	8011804 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d003      	beq.n	8006e72 <EE_VerifyPageFullWriteVariable+0x52>
        return pFlash.ErrorCode;
 8006e6a:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <EE_VerifyPageFullWriteVariable+0xa0>)
 8006e6c:	69d8      	ldr	r0, [r3, #28]
 8006e6e:	b280      	uxth	r0, r0
 8006e70:	e01f      	b.n	8006eb2 <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006e72:	4a14      	ldr	r2, [pc, #80]	; (8006ec4 <EE_VerifyPageFullWriteVariable+0xa4>)
 8006e74:	6913      	ldr	r3, [r2, #16]
 8006e76:	2101      	movs	r1, #1
 8006e78:	438b      	bics	r3, r1
 8006e7a:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8006e7c:	1ca1      	adds	r1, r4, #2
 8006e7e:	002a      	movs	r2, r5
 8006e80:	2300      	movs	r3, #0
 8006e82:	2001      	movs	r0, #1
 8006e84:	f00a fcea 	bl	801185c <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006e88:	480c      	ldr	r0, [pc, #48]	; (8006ebc <EE_VerifyPageFullWriteVariable+0x9c>)
 8006e8a:	f00a fcbb 	bl	8011804 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d003      	beq.n	8006e9a <EE_VerifyPageFullWriteVariable+0x7a>
        return pFlash.ErrorCode;
 8006e92:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <EE_VerifyPageFullWriteVariable+0xa0>)
 8006e94:	69d8      	ldr	r0, [r3, #28]
 8006e96:	b280      	uxth	r0, r0
 8006e98:	e00b      	b.n	8006eb2 <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006e9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ec4 <EE_VerifyPageFullWriteVariable+0xa4>)
 8006e9c:	6913      	ldr	r3, [r2, #16]
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	438b      	bics	r3, r1
 8006ea2:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <EE_VerifyPageFullWriteVariable+0xa0>)
 8006ea6:	69d8      	ldr	r0, [r3, #28]
 8006ea8:	b280      	uxth	r0, r0
 8006eaa:	e002      	b.n	8006eb2 <EE_VerifyPageFullWriteVariable+0x92>
    }
  }
	
	HAL_FLASH_Lock();
 8006eac:	f00a fca0 	bl	80117f0 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8006eb0:	2080      	movs	r0, #128	; 0x80
}
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	0001003c 	.word	0x0001003c
 8006eb8:	0801dffe 	.word	0x0801dffe
 8006ebc:	0000c350 	.word	0x0000c350
 8006ec0:	20006638 	.word	0x20006638
 8006ec4:	40022000 	.word	0x40022000

08006ec8 <EE_ReadVariable>:
{
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	0005      	movs	r5, r0
 8006ecc:	000c      	movs	r4, r1
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7ff ff78 	bl	8006dc4 <EE_FindValidPage>
 8006ed4:	0003      	movs	r3, r0
  if (ValidPage == NO_VALID_PAGE)
 8006ed6:	28ab      	cmp	r0, #171	; 0xab
 8006ed8:	d016      	beq.n	8006f08 <EE_ReadVariable+0x40>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8006eda:	4a0c      	ldr	r2, [pc, #48]	; (8006f0c <EE_ReadVariable+0x44>)
 8006edc:	1881      	adds	r1, r0, r2
 8006ede:	02c9      	lsls	r1, r1, #11
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	02db      	lsls	r3, r3, #11
 8006ee4:	4a0a      	ldr	r2, [pc, #40]	; (8006f10 <EE_ReadVariable+0x48>)
 8006ee6:	4694      	mov	ip, r2
 8006ee8:	4463      	add	r3, ip
  while (Address > (PageStartAddress + 2))
 8006eea:	1c8a      	adds	r2, r1, #2
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d20a      	bcs.n	8006f06 <EE_ReadVariable+0x3e>
    AddressValue = (*(__IO uint16_t*)Address);
 8006ef0:	881a      	ldrh	r2, [r3, #0]
 8006ef2:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 8006ef4:	42aa      	cmp	r2, r5
 8006ef6:	d001      	beq.n	8006efc <EE_ReadVariable+0x34>
      Address = Address - 4;
 8006ef8:	3b04      	subs	r3, #4
 8006efa:	e7f6      	b.n	8006eea <EE_ReadVariable+0x22>
      *Data = (*(__IO uint16_t*)(Address - 2));
 8006efc:	3b02      	subs	r3, #2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	8023      	strh	r3, [r4, #0]
      ReadStatus = 0;
 8006f02:	2000      	movs	r0, #0
      break;
 8006f04:	e000      	b.n	8006f08 <EE_ReadVariable+0x40>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8006f06:	2001      	movs	r0, #1
}
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	0001003c 	.word	0x0001003c
 8006f10:	0801dffe 	.word	0x0801dffe

08006f14 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	0005      	movs	r5, r0
 8006f18:	000c      	movs	r4, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 8006f1a:	f00a fc55 	bl	80117c8 <HAL_FLASH_Unlock>

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f7ff ff50 	bl	8006dc4 <EE_FindValidPage>

  if (ValidPage == PAGEB)       /* PageB valid */
 8006f24:	2802      	cmp	r0, #2
 8006f26:	d013      	beq.n	8006f50 <EE_PageTransfer+0x3c>
    NewPageAddress = PAGEA1_BASE_ADDRESS;

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEB1_BASE_ADDRESS;
  }
  else if (ValidPage == PAGEA)  /* PageA valid */
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d000      	beq.n	8006f2e <EE_PageTransfer+0x1a>
 8006f2c:	e06d      	b.n	800700a <EE_PageTransfer+0xf6>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGEB1_BASE_ADDRESS;

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 8006f2e:	4f38      	ldr	r7, [pc, #224]	; (8007010 <EE_PageTransfer+0xfc>)
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 8006f30:	4e38      	ldr	r6, [pc, #224]	; (8007014 <EE_PageTransfer+0x100>)
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8006f32:	4a39      	ldr	r2, [pc, #228]	; (8007018 <EE_PageTransfer+0x104>)
 8006f34:	2300      	movs	r3, #0
 8006f36:	0031      	movs	r1, r6
 8006f38:	2001      	movs	r0, #1
 8006f3a:	f00a fc8f 	bl	801185c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006f3e:	4837      	ldr	r0, [pc, #220]	; (800701c <EE_PageTransfer+0x108>)
 8006f40:	f00a fc60 	bl	8011804 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d006      	beq.n	8006f56 <EE_PageTransfer+0x42>
  {
    return pFlash.ErrorCode;
 8006f48:	4b35      	ldr	r3, [pc, #212]	; (8007020 <EE_PageTransfer+0x10c>)
 8006f4a:	69d8      	ldr	r0, [r3, #28]
 8006f4c:	b280      	uxth	r0, r0
			
	HAL_FLASH_Lock();
	
  /* Return last operation flash status */
  return FlashStatus;
}
 8006f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 8006f50:	4f30      	ldr	r7, [pc, #192]	; (8007014 <EE_PageTransfer+0x100>)
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 8006f52:	4e2f      	ldr	r6, [pc, #188]	; (8007010 <EE_PageTransfer+0xfc>)
 8006f54:	e7ed      	b.n	8006f32 <EE_PageTransfer+0x1e>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006f56:	4a33      	ldr	r2, [pc, #204]	; (8007024 <EE_PageTransfer+0x110>)
 8006f58:	6913      	ldr	r3, [r2, #16]
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	438b      	bics	r3, r1
 8006f5e:	6113      	str	r3, [r2, #16]
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8006f60:	0021      	movs	r1, r4
 8006f62:	0028      	movs	r0, r5
 8006f64:	f7ff ff5c 	bl	8006e20 <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d1f0      	bne.n	8006f4e <EE_PageTransfer+0x3a>
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8006f6c:	2401      	movs	r4, #1
 8006f6e:	e001      	b.n	8006f74 <EE_PageTransfer+0x60>
 8006f70:	3401      	adds	r4, #1
 8006f72:	b2a4      	uxth	r4, r4
 8006f74:	2380      	movs	r3, #128	; 0x80
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	d80f      	bhi.n	8006f9c <EE_PageTransfer+0x88>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 8006f7c:	42ac      	cmp	r4, r5
 8006f7e:	d0f7      	beq.n	8006f70 <EE_PageTransfer+0x5c>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8006f80:	4929      	ldr	r1, [pc, #164]	; (8007028 <EE_PageTransfer+0x114>)
 8006f82:	0020      	movs	r0, r4
 8006f84:	f7ff ffa0 	bl	8006ec8 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 8006f88:	2801      	cmp	r0, #1
 8006f8a:	d0f1      	beq.n	8006f70 <EE_PageTransfer+0x5c>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8006f8c:	4b26      	ldr	r3, [pc, #152]	; (8007028 <EE_PageTransfer+0x114>)
 8006f8e:	8819      	ldrh	r1, [r3, #0]
 8006f90:	0020      	movs	r0, r4
 8006f92:	f7ff ff45 	bl	8006e20 <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d0ea      	beq.n	8006f70 <EE_PageTransfer+0x5c>
 8006f9a:	e7d8      	b.n	8006f4e <EE_PageTransfer+0x3a>
  FLASH_PageErase(OldPageAddress);
 8006f9c:	0038      	movs	r0, r7
 8006f9e:	f00a fcc3 	bl	8011928 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006fa2:	481e      	ldr	r0, [pc, #120]	; (800701c <EE_PageTransfer+0x108>)
 8006fa4:	f00a fc2e 	bl	8011804 <FLASH_WaitForLastOperation>
  if (FlashStatus != HAL_OK)
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d003      	beq.n	8006fb4 <EE_PageTransfer+0xa0>
    return pFlash.ErrorCode;
 8006fac:	4b1c      	ldr	r3, [pc, #112]	; (8007020 <EE_PageTransfer+0x10c>)
 8006fae:	69d8      	ldr	r0, [r3, #28]
 8006fb0:	b280      	uxth	r0, r0
 8006fb2:	e7cc      	b.n	8006f4e <EE_PageTransfer+0x3a>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8006fb4:	2380      	movs	r3, #128	; 0x80
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	18f8      	adds	r0, r7, r3
 8006fba:	f00a fcb5 	bl	8011928 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006fbe:	4817      	ldr	r0, [pc, #92]	; (800701c <EE_PageTransfer+0x108>)
 8006fc0:	f00a fc20 	bl	8011804 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d003      	beq.n	8006fd0 <EE_PageTransfer+0xbc>
			return pFlash.ErrorCode;
 8006fc8:	4b15      	ldr	r3, [pc, #84]	; (8007020 <EE_PageTransfer+0x10c>)
 8006fca:	69d8      	ldr	r0, [r3, #28]
 8006fcc:	b280      	uxth	r0, r0
 8006fce:	e7be      	b.n	8006f4e <EE_PageTransfer+0x3a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006fd0:	4a14      	ldr	r2, [pc, #80]	; (8007024 <EE_PageTransfer+0x110>)
 8006fd2:	6913      	ldr	r3, [r2, #16]
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	438b      	bics	r3, r1
 8006fd8:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8006fda:	2200      	movs	r2, #0
 8006fdc:	2300      	movs	r3, #0
 8006fde:	0031      	movs	r1, r6
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	f00a fc3b 	bl	801185c <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8006fe6:	480d      	ldr	r0, [pc, #52]	; (800701c <EE_PageTransfer+0x108>)
 8006fe8:	f00a fc0c 	bl	8011804 <FLASH_WaitForLastOperation>
 8006fec:	1e04      	subs	r4, r0, #0
  if (FlashStatus != HAL_OK)
 8006fee:	d003      	beq.n	8006ff8 <EE_PageTransfer+0xe4>
    return pFlash.ErrorCode;
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <EE_PageTransfer+0x10c>)
 8006ff2:	69d8      	ldr	r0, [r3, #28]
 8006ff4:	b280      	uxth	r0, r0
 8006ff6:	e7aa      	b.n	8006f4e <EE_PageTransfer+0x3a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006ff8:	4a0a      	ldr	r2, [pc, #40]	; (8007024 <EE_PageTransfer+0x110>)
 8006ffa:	6913      	ldr	r3, [r2, #16]
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	438b      	bics	r3, r1
 8007000:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007002:	f00a fbf5 	bl	80117f0 <HAL_FLASH_Lock>
  return FlashStatus;
 8007006:	b2a0      	uxth	r0, r4
 8007008:	e7a1      	b.n	8006f4e <EE_PageTransfer+0x3a>
    return NO_VALID_PAGE;       /* No valid Page */
 800700a:	20ab      	movs	r0, #171	; 0xab
 800700c:	e79f      	b.n	8006f4e <EE_PageTransfer+0x3a>
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	0801e000 	.word	0x0801e000
 8007014:	0801f000 	.word	0x0801f000
 8007018:	0000eeee 	.word	0x0000eeee
 800701c:	0000c350 	.word	0x0000c350
 8007020:	20006638 	.word	0x20006638
 8007024:	40022000 	.word	0x40022000
 8007028:	20000cb8 	.word	0x20000cb8

0800702c <EE_WriteVariable>:
{
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	0005      	movs	r5, r0
 8007030:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007032:	f00a fbc9 	bl	80117c8 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007036:	0031      	movs	r1, r6
 8007038:	0028      	movs	r0, r5
 800703a:	f7ff fef1 	bl	8006e20 <EE_VerifyPageFullWriteVariable>
 800703e:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 8007040:	2880      	cmp	r0, #128	; 0x80
 8007042:	d003      	beq.n	800704c <EE_WriteVariable+0x20>
	HAL_FLASH_Lock();
 8007044:	f00a fbd4 	bl	80117f0 <HAL_FLASH_Lock>
}
 8007048:	0020      	movs	r0, r4
 800704a:	bd70      	pop	{r4, r5, r6, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 800704c:	0031      	movs	r1, r6
 800704e:	0028      	movs	r0, r5
 8007050:	f7ff ff60 	bl	8006f14 <EE_PageTransfer>
 8007054:	0004      	movs	r4, r0
 8007056:	e7f5      	b.n	8007044 <EE_WriteVariable+0x18>

08007058 <EE_Format>:
{
 8007058:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800705a:	f00a fbb5 	bl	80117c8 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 800705e:	4829      	ldr	r0, [pc, #164]	; (8007104 <EE_Format+0xac>)
 8007060:	f00a fc62 	bl	8011928 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007064:	4828      	ldr	r0, [pc, #160]	; (8007108 <EE_Format+0xb0>)
 8007066:	f00a fbcd 	bl	8011804 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800706a:	2800      	cmp	r0, #0
 800706c:	d003      	beq.n	8007076 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800706e:	4b27      	ldr	r3, [pc, #156]	; (800710c <EE_Format+0xb4>)
 8007070:	69d8      	ldr	r0, [r3, #28]
 8007072:	b280      	uxth	r0, r0
}
 8007074:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007076:	4826      	ldr	r0, [pc, #152]	; (8007110 <EE_Format+0xb8>)
 8007078:	f00a fc56 	bl	8011928 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800707c:	4822      	ldr	r0, [pc, #136]	; (8007108 <EE_Format+0xb0>)
 800707e:	f00a fbc1 	bl	8011804 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007082:	2800      	cmp	r0, #0
 8007084:	d003      	beq.n	800708e <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007086:	4b21      	ldr	r3, [pc, #132]	; (800710c <EE_Format+0xb4>)
 8007088:	69d8      	ldr	r0, [r3, #28]
 800708a:	b280      	uxth	r0, r0
 800708c:	e7f2      	b.n	8007074 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800708e:	4a21      	ldr	r2, [pc, #132]	; (8007114 <EE_Format+0xbc>)
 8007090:	6913      	ldr	r3, [r2, #16]
 8007092:	2102      	movs	r1, #2
 8007094:	438b      	bics	r3, r1
 8007096:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007098:	2200      	movs	r2, #0
 800709a:	2300      	movs	r3, #0
 800709c:	4919      	ldr	r1, [pc, #100]	; (8007104 <EE_Format+0xac>)
 800709e:	2001      	movs	r0, #1
 80070a0:	f00a fbdc 	bl	801185c <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80070a4:	4818      	ldr	r0, [pc, #96]	; (8007108 <EE_Format+0xb0>)
 80070a6:	f00a fbad 	bl	8011804 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d003      	beq.n	80070b6 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 80070ae:	4b17      	ldr	r3, [pc, #92]	; (800710c <EE_Format+0xb4>)
 80070b0:	69d8      	ldr	r0, [r3, #28]
 80070b2:	b280      	uxth	r0, r0
 80070b4:	e7de      	b.n	8007074 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80070b6:	4a17      	ldr	r2, [pc, #92]	; (8007114 <EE_Format+0xbc>)
 80070b8:	6913      	ldr	r3, [r2, #16]
 80070ba:	2101      	movs	r1, #1
 80070bc:	438b      	bics	r3, r1
 80070be:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80070c0:	4815      	ldr	r0, [pc, #84]	; (8007118 <EE_Format+0xc0>)
 80070c2:	f00a fc31 	bl	8011928 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80070c6:	4810      	ldr	r0, [pc, #64]	; (8007108 <EE_Format+0xb0>)
 80070c8:	f00a fb9c 	bl	8011804 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d003      	beq.n	80070d8 <EE_Format+0x80>
		return pFlash.ErrorCode;
 80070d0:	4b0e      	ldr	r3, [pc, #56]	; (800710c <EE_Format+0xb4>)
 80070d2:	69d8      	ldr	r0, [r3, #28]
 80070d4:	b280      	uxth	r0, r0
 80070d6:	e7cd      	b.n	8007074 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80070d8:	4810      	ldr	r0, [pc, #64]	; (800711c <EE_Format+0xc4>)
 80070da:	f00a fc25 	bl	8011928 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80070de:	480a      	ldr	r0, [pc, #40]	; (8007108 <EE_Format+0xb0>)
 80070e0:	f00a fb90 	bl	8011804 <FLASH_WaitForLastOperation>
 80070e4:	1e04      	subs	r4, r0, #0
		if(FlashStatus != HAL_OK)
 80070e6:	d003      	beq.n	80070f0 <EE_Format+0x98>
			return pFlash.ErrorCode;
 80070e8:	4b08      	ldr	r3, [pc, #32]	; (800710c <EE_Format+0xb4>)
 80070ea:	69d8      	ldr	r0, [r3, #28]
 80070ec:	b280      	uxth	r0, r0
 80070ee:	e7c1      	b.n	8007074 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80070f0:	4a08      	ldr	r2, [pc, #32]	; (8007114 <EE_Format+0xbc>)
 80070f2:	6913      	ldr	r3, [r2, #16]
 80070f4:	2101      	movs	r1, #1
 80070f6:	438b      	bics	r3, r1
 80070f8:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 80070fa:	f00a fb79 	bl	80117f0 <HAL_FLASH_Lock>
  return FlashStatus;
 80070fe:	b2a0      	uxth	r0, r4
 8007100:	e7b8      	b.n	8007074 <EE_Format+0x1c>
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	0801e000 	.word	0x0801e000
 8007108:	0000c350 	.word	0x0000c350
 800710c:	20006638 	.word	0x20006638
 8007110:	0801e800 	.word	0x0801e800
 8007114:	40022000 	.word	0x40022000
 8007118:	0801f000 	.word	0x0801f000
 800711c:	0801f800 	.word	0x0801f800

08007120 <EE_Init>:
{
 8007120:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 8007122:	f00a fb51 	bl	80117c8 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007126:	4bbc      	ldr	r3, [pc, #752]	; (8007418 <EE_Init+0x2f8>)
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800712c:	4abb      	ldr	r2, [pc, #748]	; (800741c <EE_Init+0x2fc>)
 800712e:	8812      	ldrh	r2, [r2, #0]
 8007130:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8007132:	49bb      	ldr	r1, [pc, #748]	; (8007420 <EE_Init+0x300>)
 8007134:	428b      	cmp	r3, r1
 8007136:	d100      	bne.n	800713a <EE_Init+0x1a>
 8007138:	e072      	b.n	8007220 <EE_Init+0x100>
 800713a:	49ba      	ldr	r1, [pc, #744]	; (8007424 <EE_Init+0x304>)
 800713c:	428b      	cmp	r3, r1
 800713e:	d00f      	beq.n	8007160 <EE_Init+0x40>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d100      	bne.n	8007146 <EE_Init+0x26>
 8007144:	e106      	b.n	8007354 <EE_Init+0x234>
      FlashStatus = EE_Format();
 8007146:	f7ff ff87 	bl	8007058 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800714a:	48b7      	ldr	r0, [pc, #732]	; (8007428 <EE_Init+0x308>)
 800714c:	f00a fb5a 	bl	8011804 <FLASH_WaitForLastOperation>
 8007150:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8007152:	2d00      	cmp	r5, #0
 8007154:	d102      	bne.n	800715c <EE_Init+0x3c>
	HAL_FLASH_Lock();
 8007156:	f00a fb4b 	bl	80117f0 <HAL_FLASH_Lock>
  return HAL_OK;
 800715a:	2500      	movs	r5, #0
}
 800715c:	0028      	movs	r0, r5
 800715e:	bd70      	pop	{r4, r5, r6, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007160:	2a00      	cmp	r2, #0
 8007162:	d00d      	beq.n	8007180 <EE_Init+0x60>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007164:	4bae      	ldr	r3, [pc, #696]	; (8007420 <EE_Init+0x300>)
 8007166:	429a      	cmp	r2, r3
 8007168:	d028      	beq.n	80071bc <EE_Init+0x9c>
        FlashStatus = EE_Format();
 800716a:	f7ff ff75 	bl	8007058 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800716e:	48ae      	ldr	r0, [pc, #696]	; (8007428 <EE_Init+0x308>)
 8007170:	f00a fb48 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007174:	2800      	cmp	r0, #0
 8007176:	d0ee      	beq.n	8007156 <EE_Init+0x36>
          return pFlash.ErrorCode;
 8007178:	4bac      	ldr	r3, [pc, #688]	; (800742c <EE_Init+0x30c>)
 800717a:	69dd      	ldr	r5, [r3, #28]
 800717c:	b2ad      	uxth	r5, r5
 800717e:	e7ed      	b.n	800715c <EE_Init+0x3c>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8007180:	48a5      	ldr	r0, [pc, #660]	; (8007418 <EE_Init+0x2f8>)
 8007182:	f00a fbd1 	bl	8011928 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007186:	48a8      	ldr	r0, [pc, #672]	; (8007428 <EE_Init+0x308>)
 8007188:	f00a fb3c 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800718c:	2800      	cmp	r0, #0
 800718e:	d003      	beq.n	8007198 <EE_Init+0x78>
          return pFlash.ErrorCode;
 8007190:	4ba6      	ldr	r3, [pc, #664]	; (800742c <EE_Init+0x30c>)
 8007192:	69dd      	ldr	r5, [r3, #28]
 8007194:	b2ad      	uxth	r5, r5
 8007196:	e7e1      	b.n	800715c <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007198:	48a5      	ldr	r0, [pc, #660]	; (8007430 <EE_Init+0x310>)
 800719a:	f00a fbc5 	bl	8011928 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800719e:	48a2      	ldr	r0, [pc, #648]	; (8007428 <EE_Init+0x308>)
 80071a0:	f00a fb30 	bl	8011804 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d105      	bne.n	80071b4 <EE_Init+0x94>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80071a8:	4aa2      	ldr	r2, [pc, #648]	; (8007434 <EE_Init+0x314>)
 80071aa:	6913      	ldr	r3, [r2, #16]
 80071ac:	2102      	movs	r1, #2
 80071ae:	438b      	bics	r3, r1
 80071b0:	6113      	str	r3, [r2, #16]
 80071b2:	e7d0      	b.n	8007156 <EE_Init+0x36>
						return pFlash.ErrorCode;
 80071b4:	4b9d      	ldr	r3, [pc, #628]	; (800742c <EE_Init+0x30c>)
 80071b6:	69dd      	ldr	r5, [r3, #28]
 80071b8:	b2ad      	uxth	r5, r5
 80071ba:	e7cf      	b.n	800715c <EE_Init+0x3c>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80071bc:	4896      	ldr	r0, [pc, #600]	; (8007418 <EE_Init+0x2f8>)
 80071be:	f00a fbb3 	bl	8011928 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80071c2:	4899      	ldr	r0, [pc, #612]	; (8007428 <EE_Init+0x308>)
 80071c4:	f00a fb1e 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d003      	beq.n	80071d4 <EE_Init+0xb4>
          return pFlash.ErrorCode;
 80071cc:	4b97      	ldr	r3, [pc, #604]	; (800742c <EE_Init+0x30c>)
 80071ce:	69dd      	ldr	r5, [r3, #28]
 80071d0:	b2ad      	uxth	r5, r5
 80071d2:	e7c3      	b.n	800715c <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80071d4:	4896      	ldr	r0, [pc, #600]	; (8007430 <EE_Init+0x310>)
 80071d6:	f00a fba7 	bl	8011928 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80071da:	4893      	ldr	r0, [pc, #588]	; (8007428 <EE_Init+0x308>)
 80071dc:	f00a fb12 	bl	8011804 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d003      	beq.n	80071ec <EE_Init+0xcc>
						return pFlash.ErrorCode;
 80071e4:	4b91      	ldr	r3, [pc, #580]	; (800742c <EE_Init+0x30c>)
 80071e6:	69dd      	ldr	r5, [r3, #28]
 80071e8:	b2ad      	uxth	r5, r5
 80071ea:	e7b7      	b.n	800715c <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80071ec:	4a91      	ldr	r2, [pc, #580]	; (8007434 <EE_Init+0x314>)
 80071ee:	6913      	ldr	r3, [r2, #16]
 80071f0:	2102      	movs	r1, #2
 80071f2:	438b      	bics	r3, r1
 80071f4:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 80071f6:	2200      	movs	r2, #0
 80071f8:	2300      	movs	r3, #0
 80071fa:	4988      	ldr	r1, [pc, #544]	; (800741c <EE_Init+0x2fc>)
 80071fc:	2001      	movs	r0, #1
 80071fe:	f00a fb2d 	bl	801185c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007202:	4889      	ldr	r0, [pc, #548]	; (8007428 <EE_Init+0x308>)
 8007204:	f00a fafe 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007208:	2800      	cmp	r0, #0
 800720a:	d105      	bne.n	8007218 <EE_Init+0xf8>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800720c:	4a89      	ldr	r2, [pc, #548]	; (8007434 <EE_Init+0x314>)
 800720e:	6913      	ldr	r3, [r2, #16]
 8007210:	2101      	movs	r1, #1
 8007212:	438b      	bics	r3, r1
 8007214:	6113      	str	r3, [r2, #16]
 8007216:	e79e      	b.n	8007156 <EE_Init+0x36>
          return pFlash.ErrorCode;
 8007218:	4b84      	ldr	r3, [pc, #528]	; (800742c <EE_Init+0x30c>)
 800721a:	69dd      	ldr	r5, [r3, #28]
 800721c:	b2ad      	uxth	r5, r5
 800721e:	e79d      	b.n	800715c <EE_Init+0x3c>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007220:	2a00      	cmp	r2, #0
 8007222:	d02f      	beq.n	8007284 <EE_Init+0x164>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007224:	4b7f      	ldr	r3, [pc, #508]	; (8007424 <EE_Init+0x304>)
 8007226:	429a      	cmp	r2, r3
 8007228:	d062      	beq.n	80072f0 <EE_Init+0x1d0>
        FlashStatus = EE_Format();
 800722a:	f7ff ff15 	bl	8007058 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800722e:	487e      	ldr	r0, [pc, #504]	; (8007428 <EE_Init+0x308>)
 8007230:	f00a fae8 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007234:	2800      	cmp	r0, #0
 8007236:	d100      	bne.n	800723a <EE_Init+0x11a>
 8007238:	e78d      	b.n	8007156 <EE_Init+0x36>
          return pFlash.ErrorCode;
 800723a:	4b7c      	ldr	r3, [pc, #496]	; (800742c <EE_Init+0x30c>)
 800723c:	69dd      	ldr	r5, [r3, #28]
 800723e:	b2ad      	uxth	r5, r5
 8007240:	e78c      	b.n	800715c <EE_Init+0x3c>
            x = VarIdx;
 8007242:	b226      	sxth	r6, r4
 8007244:	e00a      	b.n	800725c <EE_Init+0x13c>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007246:	3401      	adds	r4, #1
 8007248:	b2a4      	uxth	r4, r4
 800724a:	2380      	movs	r3, #128	; 0x80
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	429c      	cmp	r4, r3
 8007250:	d81c      	bhi.n	800728c <EE_Init+0x16c>
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007252:	4b79      	ldr	r3, [pc, #484]	; (8007438 <EE_Init+0x318>)
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	42a3      	cmp	r3, r4
 800725a:	d0f2      	beq.n	8007242 <EE_Init+0x122>
          if (VarIdx != x)
 800725c:	42b4      	cmp	r4, r6
 800725e:	d0f2      	beq.n	8007246 <EE_Init+0x126>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007260:	4976      	ldr	r1, [pc, #472]	; (800743c <EE_Init+0x31c>)
 8007262:	0020      	movs	r0, r4
 8007264:	f7ff fe30 	bl	8006ec8 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007268:	2801      	cmp	r0, #1
 800726a:	d0ec      	beq.n	8007246 <EE_Init+0x126>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800726c:	4b73      	ldr	r3, [pc, #460]	; (800743c <EE_Init+0x31c>)
 800726e:	8819      	ldrh	r1, [r3, #0]
 8007270:	0020      	movs	r0, r4
 8007272:	f7ff fdd5 	bl	8006e20 <EE_VerifyPageFullWriteVariable>
 8007276:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007278:	486b      	ldr	r0, [pc, #428]	; (8007428 <EE_Init+0x308>)
 800727a:	f00a fac3 	bl	8011804 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 800727e:	2800      	cmp	r0, #0
 8007280:	d0e1      	beq.n	8007246 <EE_Init+0x126>
 8007282:	e76b      	b.n	800715c <EE_Init+0x3c>
  int16_t x = -1;
 8007284:	2601      	movs	r6, #1
 8007286:	4276      	negs	r6, r6
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007288:	2401      	movs	r4, #1
 800728a:	e7de      	b.n	800724a <EE_Init+0x12a>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800728c:	2200      	movs	r2, #0
 800728e:	2300      	movs	r3, #0
 8007290:	4961      	ldr	r1, [pc, #388]	; (8007418 <EE_Init+0x2f8>)
 8007292:	2001      	movs	r0, #1
 8007294:	f00a fae2 	bl	801185c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007298:	4863      	ldr	r0, [pc, #396]	; (8007428 <EE_Init+0x308>)
 800729a:	f00a fab3 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800729e:	2800      	cmp	r0, #0
 80072a0:	d003      	beq.n	80072aa <EE_Init+0x18a>
          return pFlash.ErrorCode;
 80072a2:	4b62      	ldr	r3, [pc, #392]	; (800742c <EE_Init+0x30c>)
 80072a4:	69dd      	ldr	r5, [r3, #28]
 80072a6:	b2ad      	uxth	r5, r5
 80072a8:	e758      	b.n	800715c <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80072aa:	4a62      	ldr	r2, [pc, #392]	; (8007434 <EE_Init+0x314>)
 80072ac:	6913      	ldr	r3, [r2, #16]
 80072ae:	2101      	movs	r1, #1
 80072b0:	438b      	bics	r3, r1
 80072b2:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80072b4:	4859      	ldr	r0, [pc, #356]	; (800741c <EE_Init+0x2fc>)
 80072b6:	f00a fb37 	bl	8011928 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80072ba:	485b      	ldr	r0, [pc, #364]	; (8007428 <EE_Init+0x308>)
 80072bc:	f00a faa2 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d003      	beq.n	80072cc <EE_Init+0x1ac>
          return pFlash.ErrorCode;
 80072c4:	4b59      	ldr	r3, [pc, #356]	; (800742c <EE_Init+0x30c>)
 80072c6:	69dd      	ldr	r5, [r3, #28]
 80072c8:	b2ad      	uxth	r5, r5
 80072ca:	e747      	b.n	800715c <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80072cc:	485c      	ldr	r0, [pc, #368]	; (8007440 <EE_Init+0x320>)
 80072ce:	f00a fb2b 	bl	8011928 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80072d2:	4855      	ldr	r0, [pc, #340]	; (8007428 <EE_Init+0x308>)
 80072d4:	f00a fa96 	bl	8011804 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80072d8:	2800      	cmp	r0, #0
 80072da:	d105      	bne.n	80072e8 <EE_Init+0x1c8>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80072dc:	4a55      	ldr	r2, [pc, #340]	; (8007434 <EE_Init+0x314>)
 80072de:	6913      	ldr	r3, [r2, #16]
 80072e0:	2102      	movs	r1, #2
 80072e2:	438b      	bics	r3, r1
 80072e4:	6113      	str	r3, [r2, #16]
 80072e6:	e736      	b.n	8007156 <EE_Init+0x36>
						return pFlash.ErrorCode;
 80072e8:	4b50      	ldr	r3, [pc, #320]	; (800742c <EE_Init+0x30c>)
 80072ea:	69dd      	ldr	r5, [r3, #28]
 80072ec:	b2ad      	uxth	r5, r5
 80072ee:	e735      	b.n	800715c <EE_Init+0x3c>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80072f0:	484a      	ldr	r0, [pc, #296]	; (800741c <EE_Init+0x2fc>)
 80072f2:	f00a fb19 	bl	8011928 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80072f6:	484c      	ldr	r0, [pc, #304]	; (8007428 <EE_Init+0x308>)
 80072f8:	f00a fa84 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d003      	beq.n	8007308 <EE_Init+0x1e8>
          return pFlash.ErrorCode;
 8007300:	4b4a      	ldr	r3, [pc, #296]	; (800742c <EE_Init+0x30c>)
 8007302:	69dd      	ldr	r5, [r3, #28]
 8007304:	b2ad      	uxth	r5, r5
 8007306:	e729      	b.n	800715c <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007308:	484d      	ldr	r0, [pc, #308]	; (8007440 <EE_Init+0x320>)
 800730a:	f00a fb0d 	bl	8011928 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800730e:	4846      	ldr	r0, [pc, #280]	; (8007428 <EE_Init+0x308>)
 8007310:	f00a fa78 	bl	8011804 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007314:	2800      	cmp	r0, #0
 8007316:	d003      	beq.n	8007320 <EE_Init+0x200>
						return pFlash.ErrorCode;
 8007318:	4b44      	ldr	r3, [pc, #272]	; (800742c <EE_Init+0x30c>)
 800731a:	69dd      	ldr	r5, [r3, #28]
 800731c:	b2ad      	uxth	r5, r5
 800731e:	e71d      	b.n	800715c <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007320:	4a44      	ldr	r2, [pc, #272]	; (8007434 <EE_Init+0x314>)
 8007322:	6913      	ldr	r3, [r2, #16]
 8007324:	2102      	movs	r1, #2
 8007326:	438b      	bics	r3, r1
 8007328:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800732a:	2200      	movs	r2, #0
 800732c:	2300      	movs	r3, #0
 800732e:	493a      	ldr	r1, [pc, #232]	; (8007418 <EE_Init+0x2f8>)
 8007330:	2001      	movs	r0, #1
 8007332:	f00a fa93 	bl	801185c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007336:	483c      	ldr	r0, [pc, #240]	; (8007428 <EE_Init+0x308>)
 8007338:	f00a fa64 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800733c:	2800      	cmp	r0, #0
 800733e:	d105      	bne.n	800734c <EE_Init+0x22c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007340:	4a3c      	ldr	r2, [pc, #240]	; (8007434 <EE_Init+0x314>)
 8007342:	6913      	ldr	r3, [r2, #16]
 8007344:	2101      	movs	r1, #1
 8007346:	438b      	bics	r3, r1
 8007348:	6113      	str	r3, [r2, #16]
 800734a:	e704      	b.n	8007156 <EE_Init+0x36>
          return pFlash.ErrorCode;
 800734c:	4b37      	ldr	r3, [pc, #220]	; (800742c <EE_Init+0x30c>)
 800734e:	69dd      	ldr	r5, [r3, #28]
 8007350:	b2ad      	uxth	r5, r5
 8007352:	e703      	b.n	800715c <EE_Init+0x3c>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007354:	2a00      	cmp	r2, #0
 8007356:	d006      	beq.n	8007366 <EE_Init+0x246>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007358:	4b32      	ldr	r3, [pc, #200]	; (8007424 <EE_Init+0x304>)
 800735a:	429a      	cmp	r2, r3
 800735c:	d00d      	beq.n	800737a <EE_Init+0x25a>
  int16_t x = -1;
 800735e:	2601      	movs	r6, #1
 8007360:	4276      	negs	r6, r6
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007362:	2401      	movs	r4, #1
 8007364:	e02b      	b.n	80073be <EE_Init+0x29e>
        FlashStatus = EE_Format();
 8007366:	f7ff fe77 	bl	8007058 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800736a:	482f      	ldr	r0, [pc, #188]	; (8007428 <EE_Init+0x308>)
 800736c:	f00a fa4a 	bl	8011804 <FLASH_WaitForLastOperation>
 8007370:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8007372:	2d00      	cmp	r5, #0
 8007374:	d100      	bne.n	8007378 <EE_Init+0x258>
 8007376:	e6ee      	b.n	8007156 <EE_Init+0x36>
 8007378:	e6f0      	b.n	800715c <EE_Init+0x3c>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800737a:	4828      	ldr	r0, [pc, #160]	; (800741c <EE_Init+0x2fc>)
 800737c:	f00a fad4 	bl	8011928 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007380:	4829      	ldr	r0, [pc, #164]	; (8007428 <EE_Init+0x308>)
 8007382:	f00a fa3f 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007386:	2800      	cmp	r0, #0
 8007388:	d003      	beq.n	8007392 <EE_Init+0x272>
          return pFlash.ErrorCode;
 800738a:	4b28      	ldr	r3, [pc, #160]	; (800742c <EE_Init+0x30c>)
 800738c:	69dd      	ldr	r5, [r3, #28]
 800738e:	b2ad      	uxth	r5, r5
 8007390:	e6e4      	b.n	800715c <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007392:	482b      	ldr	r0, [pc, #172]	; (8007440 <EE_Init+0x320>)
 8007394:	f00a fac8 	bl	8011928 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007398:	4823      	ldr	r0, [pc, #140]	; (8007428 <EE_Init+0x308>)
 800739a:	f00a fa33 	bl	8011804 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800739e:	2800      	cmp	r0, #0
 80073a0:	d105      	bne.n	80073ae <EE_Init+0x28e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80073a2:	4a24      	ldr	r2, [pc, #144]	; (8007434 <EE_Init+0x314>)
 80073a4:	6913      	ldr	r3, [r2, #16]
 80073a6:	2102      	movs	r1, #2
 80073a8:	438b      	bics	r3, r1
 80073aa:	6113      	str	r3, [r2, #16]
 80073ac:	e6d3      	b.n	8007156 <EE_Init+0x36>
						return pFlash.ErrorCode;
 80073ae:	4b1f      	ldr	r3, [pc, #124]	; (800742c <EE_Init+0x30c>)
 80073b0:	69dd      	ldr	r5, [r3, #28]
 80073b2:	b2ad      	uxth	r5, r5
 80073b4:	e6d2      	b.n	800715c <EE_Init+0x3c>
            x = VarIdx;
 80073b6:	b226      	sxth	r6, r4
 80073b8:	e00a      	b.n	80073d0 <EE_Init+0x2b0>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80073ba:	3401      	adds	r4, #1
 80073bc:	b2a4      	uxth	r4, r4
 80073be:	2380      	movs	r3, #128	; 0x80
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	429c      	cmp	r4, r3
 80073c4:	d818      	bhi.n	80073f8 <EE_Init+0x2d8>
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 80073c6:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <EE_Init+0x324>)
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	42a3      	cmp	r3, r4
 80073ce:	d0f2      	beq.n	80073b6 <EE_Init+0x296>
          if (VarIdx != x)
 80073d0:	42b4      	cmp	r4, r6
 80073d2:	d0f2      	beq.n	80073ba <EE_Init+0x29a>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80073d4:	4919      	ldr	r1, [pc, #100]	; (800743c <EE_Init+0x31c>)
 80073d6:	0020      	movs	r0, r4
 80073d8:	f7ff fd76 	bl	8006ec8 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 80073dc:	2801      	cmp	r0, #1
 80073de:	d0ec      	beq.n	80073ba <EE_Init+0x29a>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80073e0:	4b16      	ldr	r3, [pc, #88]	; (800743c <EE_Init+0x31c>)
 80073e2:	8819      	ldrh	r1, [r3, #0]
 80073e4:	0020      	movs	r0, r4
 80073e6:	f7ff fd1b 	bl	8006e20 <EE_VerifyPageFullWriteVariable>
 80073ea:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80073ec:	480e      	ldr	r0, [pc, #56]	; (8007428 <EE_Init+0x308>)
 80073ee:	f00a fa09 	bl	8011804 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d0e1      	beq.n	80073ba <EE_Init+0x29a>
 80073f6:	e6b1      	b.n	800715c <EE_Init+0x3c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 80073f8:	2200      	movs	r2, #0
 80073fa:	2300      	movs	r3, #0
 80073fc:	4907      	ldr	r1, [pc, #28]	; (800741c <EE_Init+0x2fc>)
 80073fe:	2001      	movs	r0, #1
 8007400:	f00a fa2c 	bl	801185c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007404:	4808      	ldr	r0, [pc, #32]	; (8007428 <EE_Init+0x308>)
 8007406:	f00a f9fd 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800740a:	2800      	cmp	r0, #0
 800740c:	d01c      	beq.n	8007448 <EE_Init+0x328>
          return pFlash.ErrorCode;
 800740e:	4b07      	ldr	r3, [pc, #28]	; (800742c <EE_Init+0x30c>)
 8007410:	69dd      	ldr	r5, [r3, #28]
 8007412:	b2ad      	uxth	r5, r5
 8007414:	e6a2      	b.n	800715c <EE_Init+0x3c>
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	0801e000 	.word	0x0801e000
 800741c:	0801f000 	.word	0x0801f000
 8007420:	0000eeee 	.word	0x0000eeee
 8007424:	0000ffff 	.word	0x0000ffff
 8007428:	0000c350 	.word	0x0000c350
 800742c:	20006638 	.word	0x20006638
 8007430:	0801e800 	.word	0x0801e800
 8007434:	40022000 	.word	0x40022000
 8007438:	0801e006 	.word	0x0801e006
 800743c:	20000cb8 	.word	0x20000cb8
 8007440:	0801f800 	.word	0x0801f800
 8007444:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007448:	4a11      	ldr	r2, [pc, #68]	; (8007490 <EE_Init+0x370>)
 800744a:	6913      	ldr	r3, [r2, #16]
 800744c:	2101      	movs	r1, #1
 800744e:	438b      	bics	r3, r1
 8007450:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007452:	4810      	ldr	r0, [pc, #64]	; (8007494 <EE_Init+0x374>)
 8007454:	f00a fa68 	bl	8011928 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007458:	480f      	ldr	r0, [pc, #60]	; (8007498 <EE_Init+0x378>)
 800745a:	f00a f9d3 	bl	8011804 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800745e:	2800      	cmp	r0, #0
 8007460:	d003      	beq.n	800746a <EE_Init+0x34a>
          return pFlash.ErrorCode;
 8007462:	4b0e      	ldr	r3, [pc, #56]	; (800749c <EE_Init+0x37c>)
 8007464:	69dd      	ldr	r5, [r3, #28]
 8007466:	b2ad      	uxth	r5, r5
 8007468:	e678      	b.n	800715c <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800746a:	480d      	ldr	r0, [pc, #52]	; (80074a0 <EE_Init+0x380>)
 800746c:	f00a fa5c 	bl	8011928 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007470:	4809      	ldr	r0, [pc, #36]	; (8007498 <EE_Init+0x378>)
 8007472:	f00a f9c7 	bl	8011804 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007476:	2800      	cmp	r0, #0
 8007478:	d105      	bne.n	8007486 <EE_Init+0x366>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800747a:	4a05      	ldr	r2, [pc, #20]	; (8007490 <EE_Init+0x370>)
 800747c:	6913      	ldr	r3, [r2, #16]
 800747e:	2102      	movs	r1, #2
 8007480:	438b      	bics	r3, r1
 8007482:	6113      	str	r3, [r2, #16]
 8007484:	e667      	b.n	8007156 <EE_Init+0x36>
						return pFlash.ErrorCode;
 8007486:	4b05      	ldr	r3, [pc, #20]	; (800749c <EE_Init+0x37c>)
 8007488:	69dd      	ldr	r5, [r3, #28]
 800748a:	b2ad      	uxth	r5, r5
 800748c:	e666      	b.n	800715c <EE_Init+0x3c>
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	40022000 	.word	0x40022000
 8007494:	0801e000 	.word	0x0801e000
 8007498:	0000c350 	.word	0x0000c350
 800749c:	20006638 	.word	0x20006638
 80074a0:	0801e800 	.word	0x0801e800

080074a4 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	e020      	b.n	80074ea <StartDefaultTask+0x46>
				RTOS_IND_blink(200);
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
 80074a8:	2580      	movs	r5, #128	; 0x80
 80074aa:	012d      	lsls	r5, r5, #4
 80074ac:	2490      	movs	r4, #144	; 0x90
 80074ae:	05e4      	lsls	r4, r4, #23
 80074b0:	2201      	movs	r2, #1
 80074b2:	0029      	movs	r1, r5
 80074b4:	0020      	movs	r0, r4
 80074b6:	f00a fb6e 	bl	8011b96 <HAL_GPIO_WritePin>
 80074ba:	2064      	movs	r0, #100	; 0x64
 80074bc:	f006 ff9e 	bl	800e3fc <osDelay>
 80074c0:	2200      	movs	r2, #0
 80074c2:	0029      	movs	r1, r5
 80074c4:	0020      	movs	r0, r4
 80074c6:	f00a fb66 	bl	8011b96 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 80074ca:	4b21      	ldr	r3, [pc, #132]	; (8007550 <StartDefaultTask+0xac>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	701a      	strb	r2, [r3, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 80074d0:	f000 f9d2 	bl	8007878 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 80074d4:	f7fd fbca 	bl	8004c6c <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 80074d8:	4b1e      	ldr	r3, [pc, #120]	; (8007554 <StartDefaultTask+0xb0>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <StartDefaultTask+0x42>
 80074e0:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <StartDefaultTask+0xb4>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 80074e6:	f008 fe87 	bl	80101f8 <vPortYield>
		switch (indMode)
 80074ea:	4b19      	ldr	r3, [pc, #100]	; (8007550 <StartDefaultTask+0xac>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d0da      	beq.n	80074a8 <StartDefaultTask+0x4>
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d016      	beq.n	8007524 <StartDefaultTask+0x80>
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d1ea      	bne.n	80074d0 <StartDefaultTask+0x2c>
				RTOS_IND_blink(200);
 80074fa:	2580      	movs	r5, #128	; 0x80
 80074fc:	012d      	lsls	r5, r5, #4
 80074fe:	2490      	movs	r4, #144	; 0x90
 8007500:	05e4      	lsls	r4, r4, #23
 8007502:	2201      	movs	r2, #1
 8007504:	0029      	movs	r1, r5
 8007506:	0020      	movs	r0, r4
 8007508:	f00a fb45 	bl	8011b96 <HAL_GPIO_WritePin>
 800750c:	20c8      	movs	r0, #200	; 0xc8
 800750e:	f006 ff75 	bl	800e3fc <osDelay>
 8007512:	2200      	movs	r2, #0
 8007514:	0029      	movs	r1, r5
 8007516:	0020      	movs	r0, r4
 8007518:	f00a fb3d 	bl	8011b96 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800751c:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <StartDefaultTask+0xac>)
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
				break;
 8007522:	e7d5      	b.n	80074d0 <StartDefaultTask+0x2c>
				RTOS_IND_blink(30);
 8007524:	2580      	movs	r5, #128	; 0x80
 8007526:	012d      	lsls	r5, r5, #4
 8007528:	2490      	movs	r4, #144	; 0x90
 800752a:	05e4      	lsls	r4, r4, #23
 800752c:	2201      	movs	r2, #1
 800752e:	0029      	movs	r1, r5
 8007530:	0020      	movs	r0, r4
 8007532:	f00a fb30 	bl	8011b96 <HAL_GPIO_WritePin>
 8007536:	201e      	movs	r0, #30
 8007538:	f006 ff60 	bl	800e3fc <osDelay>
 800753c:	2200      	movs	r2, #0
 800753e:	0029      	movs	r1, r5
 8007540:	0020      	movs	r0, r4
 8007542:	f00a fb28 	bl	8011b96 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007546:	4b02      	ldr	r3, [pc, #8]	; (8007550 <StartDefaultTask+0xac>)
 8007548:	2200      	movs	r2, #0
 800754a:	701a      	strb	r2, [r3, #0]
				break;
 800754c:	e7c0      	b.n	80074d0 <StartDefaultTask+0x2c>
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	2000071c 	.word	0x2000071c
 8007554:	20000d23 	.word	0x20000d23
 8007558:	20000d22 	.word	0x20000d22

0800755c <MX_FREERTOS_Init>:
{
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	b08e      	sub	sp, #56	; 0x38
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 8007560:	25a0      	movs	r5, #160	; 0xa0
 8007562:	006d      	lsls	r5, r5, #1
 8007564:	2400      	movs	r4, #0
 8007566:	9403      	str	r4, [sp, #12]
 8007568:	9402      	str	r4, [sp, #8]
 800756a:	4b53      	ldr	r3, [pc, #332]	; (80076b8 <MX_FREERTOS_Init+0x15c>)
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	2603      	movs	r6, #3
 8007570:	9600      	str	r6, [sp, #0]
 8007572:	2300      	movs	r3, #0
 8007574:	002a      	movs	r2, r5
 8007576:	4951      	ldr	r1, [pc, #324]	; (80076bc <MX_FREERTOS_Init+0x160>)
 8007578:	4851      	ldr	r0, [pc, #324]	; (80076c0 <MX_FREERTOS_Init+0x164>)
 800757a:	f007 fdd1 	bl	800f120 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 800757e:	9403      	str	r4, [sp, #12]
 8007580:	9402      	str	r4, [sp, #8]
 8007582:	4b50      	ldr	r3, [pc, #320]	; (80076c4 <MX_FREERTOS_Init+0x168>)
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	9600      	str	r6, [sp, #0]
 8007588:	2300      	movs	r3, #0
 800758a:	002a      	movs	r2, r5
 800758c:	494e      	ldr	r1, [pc, #312]	; (80076c8 <MX_FREERTOS_Init+0x16c>)
 800758e:	484f      	ldr	r0, [pc, #316]	; (80076cc <MX_FREERTOS_Init+0x170>)
 8007590:	f007 fdc6 	bl	800f120 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 8007594:	9403      	str	r4, [sp, #12]
 8007596:	9402      	str	r4, [sp, #8]
 8007598:	4b4d      	ldr	r3, [pc, #308]	; (80076d0 <MX_FREERTOS_Init+0x174>)
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	9600      	str	r6, [sp, #0]
 800759e:	2300      	movs	r3, #0
 80075a0:	002a      	movs	r2, r5
 80075a2:	494c      	ldr	r1, [pc, #304]	; (80076d4 <MX_FREERTOS_Init+0x178>)
 80075a4:	484c      	ldr	r0, [pc, #304]	; (80076d8 <MX_FREERTOS_Init+0x17c>)
 80075a6:	f007 fdbb 	bl	800f120 <xTaskGenericCreate>
	vRegisterCLICommands();
 80075aa:	f7ff fa7f 	bl	8006aac <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 80075ae:	9403      	str	r4, [sp, #12]
 80075b0:	9402      	str	r4, [sp, #8]
 80075b2:	4b4a      	ldr	r3, [pc, #296]	; (80076dc <MX_FREERTOS_Init+0x180>)
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	9600      	str	r6, [sp, #0]
 80075b8:	2300      	movs	r3, #0
 80075ba:	002a      	movs	r2, r5
 80075bc:	4948      	ldr	r1, [pc, #288]	; (80076e0 <MX_FREERTOS_Init+0x184>)
 80075be:	4849      	ldr	r0, [pc, #292]	; (80076e4 <MX_FREERTOS_Init+0x188>)
 80075c0:	f007 fdae 	bl	800f120 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 80075c4:	4d48      	ldr	r5, [pc, #288]	; (80076e8 <MX_FREERTOS_Init+0x18c>)
 80075c6:	9403      	str	r4, [sp, #12]
 80075c8:	9402      	str	r4, [sp, #8]
 80075ca:	4b48      	ldr	r3, [pc, #288]	; (80076ec <MX_FREERTOS_Init+0x190>)
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	3601      	adds	r6, #1
 80075d0:	9600      	str	r6, [sp, #0]
 80075d2:	2301      	movs	r3, #1
 80075d4:	22a0      	movs	r2, #160	; 0xa0
 80075d6:	4946      	ldr	r1, [pc, #280]	; (80076f0 <MX_FREERTOS_Init+0x194>)
 80075d8:	0028      	movs	r0, r5
 80075da:	f007 fda1 	bl	800f120 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 80075de:	9403      	str	r4, [sp, #12]
 80075e0:	9402      	str	r4, [sp, #8]
 80075e2:	4b44      	ldr	r3, [pc, #272]	; (80076f4 <MX_FREERTOS_Init+0x198>)
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	9600      	str	r6, [sp, #0]
 80075e8:	2302      	movs	r3, #2
 80075ea:	22a0      	movs	r2, #160	; 0xa0
 80075ec:	4942      	ldr	r1, [pc, #264]	; (80076f8 <MX_FREERTOS_Init+0x19c>)
 80075ee:	0028      	movs	r0, r5
 80075f0:	f007 fd96 	bl	800f120 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 80075f4:	9403      	str	r4, [sp, #12]
 80075f6:	9402      	str	r4, [sp, #8]
 80075f8:	4b40      	ldr	r3, [pc, #256]	; (80076fc <MX_FREERTOS_Init+0x1a0>)
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	9600      	str	r6, [sp, #0]
 80075fe:	2303      	movs	r3, #3
 8007600:	22a0      	movs	r2, #160	; 0xa0
 8007602:	493f      	ldr	r1, [pc, #252]	; (8007700 <MX_FREERTOS_Init+0x1a4>)
 8007604:	0028      	movs	r0, r5
 8007606:	f007 fd8b 	bl	800f120 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 800760a:	9403      	str	r4, [sp, #12]
 800760c:	9402      	str	r4, [sp, #8]
 800760e:	4b3d      	ldr	r3, [pc, #244]	; (8007704 <MX_FREERTOS_Init+0x1a8>)
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	9600      	str	r6, [sp, #0]
 8007614:	2304      	movs	r3, #4
 8007616:	22a0      	movs	r2, #160	; 0xa0
 8007618:	493b      	ldr	r1, [pc, #236]	; (8007708 <MX_FREERTOS_Init+0x1ac>)
 800761a:	0028      	movs	r0, r5
 800761c:	f007 fd80 	bl	800f120 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 8007620:	9403      	str	r4, [sp, #12]
 8007622:	9402      	str	r4, [sp, #8]
 8007624:	4b39      	ldr	r3, [pc, #228]	; (800770c <MX_FREERTOS_Init+0x1b0>)
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	9600      	str	r6, [sp, #0]
 800762a:	2305      	movs	r3, #5
 800762c:	22a0      	movs	r2, #160	; 0xa0
 800762e:	4938      	ldr	r1, [pc, #224]	; (8007710 <MX_FREERTOS_Init+0x1b4>)
 8007630:	0028      	movs	r0, r5
 8007632:	f007 fd75 	bl	800f120 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 8007636:	940d      	str	r4, [sp, #52]	; 0x34
 8007638:	2101      	movs	r1, #1
 800763a:	a80d      	add	r0, sp, #52	; 0x34
 800763c:	f006 fee6 	bl	800e40c <osSemaphoreCreate>
 8007640:	4e34      	ldr	r6, [pc, #208]	; (8007714 <MX_FREERTOS_Init+0x1b8>)
 8007642:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 8007644:	940c      	str	r4, [sp, #48]	; 0x30
 8007646:	2101      	movs	r1, #1
 8007648:	a80c      	add	r0, sp, #48	; 0x30
 800764a:	f006 fedf 	bl	800e40c <osSemaphoreCreate>
 800764e:	4d32      	ldr	r5, [pc, #200]	; (8007718 <MX_FREERTOS_Init+0x1bc>)
 8007650:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 8007652:	940b      	str	r4, [sp, #44]	; 0x2c
 8007654:	2101      	movs	r1, #1
 8007656:	a80b      	add	r0, sp, #44	; 0x2c
 8007658:	f006 fed8 	bl	800e40c <osSemaphoreCreate>
 800765c:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 800765e:	940a      	str	r4, [sp, #40]	; 0x28
 8007660:	2101      	movs	r1, #1
 8007662:	a80a      	add	r0, sp, #40	; 0x28
 8007664:	f006 fed2 	bl	800e40c <osSemaphoreCreate>
 8007668:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 800766a:	9409      	str	r4, [sp, #36]	; 0x24
 800766c:	2101      	movs	r1, #1
 800766e:	a809      	add	r0, sp, #36	; 0x24
 8007670:	f006 fecc 	bl	800e40c <osSemaphoreCreate>
 8007674:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 8007676:	9408      	str	r4, [sp, #32]
 8007678:	2101      	movs	r1, #1
 800767a:	a808      	add	r0, sp, #32
 800767c:	f006 fec6 	bl	800e40c <osSemaphoreCreate>
 8007680:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 8007682:	9407      	str	r4, [sp, #28]
 8007684:	2101      	movs	r1, #1
 8007686:	a807      	add	r0, sp, #28
 8007688:	f006 fec0 	bl	800e40c <osSemaphoreCreate>
 800768c:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 800768e:	9406      	str	r4, [sp, #24]
 8007690:	2101      	movs	r1, #1
 8007692:	a806      	add	r0, sp, #24
 8007694:	f006 feba 	bl	800e40c <osSemaphoreCreate>
 8007698:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 800769a:	9405      	str	r4, [sp, #20]
 800769c:	2101      	movs	r1, #1
 800769e:	a805      	add	r0, sp, #20
 80076a0:	f006 feb4 	bl	800e40c <osSemaphoreCreate>
 80076a4:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 80076a6:	9404      	str	r4, [sp, #16]
 80076a8:	2101      	movs	r1, #1
 80076aa:	a804      	add	r0, sp, #16
 80076ac:	f006 feae 	bl	800e40c <osSemaphoreCreate>
 80076b0:	6168      	str	r0, [r5, #20]
}
 80076b2:	b00e      	add	sp, #56	; 0x38
 80076b4:	bd70      	pop	{r4, r5, r6, pc}
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	20000cd8 	.word	0x20000cd8
 80076bc:	0801a9e8 	.word	0x0801a9e8
 80076c0:	080074a5 	.word	0x080074a5
 80076c4:	20000cbc 	.word	0x20000cbc
 80076c8:	0801a9f4 	.word	0x0801a9f4
 80076cc:	08008a71 	.word	0x08008a71
 80076d0:	20000cd4 	.word	0x20000cd4
 80076d4:	0801aa00 	.word	0x0801aa00
 80076d8:	0801362b 	.word	0x0801362b
 80076dc:	20000ce0 	.word	0x20000ce0
 80076e0:	0801aa0c 	.word	0x0801aa0c
 80076e4:	08004925 	.word	0x08004925
 80076e8:	08008df9 	.word	0x08008df9
 80076ec:	20000cc0 	.word	0x20000cc0
 80076f0:	0801aa14 	.word	0x0801aa14
 80076f4:	20000cc4 	.word	0x20000cc4
 80076f8:	0801aa20 	.word	0x0801aa20
 80076fc:	20000cc8 	.word	0x20000cc8
 8007700:	0801aa2c 	.word	0x0801aa2c
 8007704:	20000ccc 	.word	0x20000ccc
 8007708:	0801aa38 	.word	0x0801aa38
 800770c:	20000cd0 	.word	0x20000cd0
 8007710:	0801aa44 	.word	0x0801aa44
 8007714:	200061d4 	.word	0x200061d4
 8007718:	200061b8 	.word	0x200061b8

0800771c <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 800771c:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800771e:	4b04      	ldr	r3, [pc, #16]	; (8007730 <vMainConfigureTimerForRunTimeStats+0x14>)
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	4904      	ldr	r1, [pc, #16]	; (8007734 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007724:	f7f8 fd14 	bl	8000150 <__udivsi3>
 8007728:	4b03      	ldr	r3, [pc, #12]	; (8007738 <vMainConfigureTimerForRunTimeStats+0x1c>)
 800772a:	6018      	str	r0, [r3, #0]
}
 800772c:	bd10      	pop	{r4, pc}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	200000c8 	.word	0x200000c8
 8007734:	00002710 	.word	0x00002710
 8007738:	20000cdc 	.word	0x20000cdc

0800773c <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 800773c:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800773e:	4b0f      	ldr	r3, [pc, #60]	; (800777c <ulMainGetRunTimeCounterValue+0x40>)
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	21fa      	movs	r1, #250	; 0xfa
 8007744:	0089      	lsls	r1, r1, #2
 8007746:	f7f8 fd03 	bl	8000150 <__udivsi3>
 800774a:	1e44      	subs	r4, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800774c:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <ulMainGetRunTimeCounterValue+0x44>)
 800774e:	681d      	ldr	r5, [r3, #0]
 8007750:	1b65      	subs	r5, r4, r5

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 8007752:	f007 fe19 	bl	800f388 <xTaskGetTickCountFromISR>

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 8007756:	4b0b      	ldr	r3, [pc, #44]	; (8007784 <ulMainGetRunTimeCounterValue+0x48>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	015b      	lsls	r3, r3, #5
 800775c:	d503      	bpl.n	8007766 <ulMainGetRunTimeCounterValue+0x2a>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 800775e:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <ulMainGetRunTimeCounterValue+0x44>)
 8007762:	681d      	ldr	r5, [r3, #0]
 8007764:	1b65      	subs	r5, r4, r5
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 8007766:	0084      	lsls	r4, r0, #2
 8007768:	1824      	adds	r4, r4, r0
 800776a:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 800776c:	4b06      	ldr	r3, [pc, #24]	; (8007788 <ulMainGetRunTimeCounterValue+0x4c>)
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	0028      	movs	r0, r5
 8007772:	f7f8 fced 	bl	8000150 <__udivsi3>
 8007776:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 8007778:	bd70      	pop	{r4, r5, r6, pc}
 800777a:	46c0      	nop			; (mov r8, r8)
 800777c:	200000c8 	.word	0x200000c8
 8007780:	e000e018 	.word	0xe000e018
 8007784:	e000ed04 	.word	0xe000ed04
 8007788:	20000cdc 	.word	0x20000cdc

0800778c <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 800778c:	4770      	bx	lr

0800778e <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 800778e:	4770      	bx	lr

08007790 <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 8007790:	4770      	bx	lr

08007792 <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 8007792:	4770      	bx	lr

08007794 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 8007794:	4770      	bx	lr

08007796 <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 8007796:	4770      	bx	lr

08007798 <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 8007798:	b530      	push	{r4, r5, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 800779a:	00c3      	lsls	r3, r0, #3
 800779c:	181b      	adds	r3, r3, r0
 800779e:	4918      	ldr	r1, [pc, #96]	; (8007800 <CheckForTimedButtonPress+0x68>)
 80077a0:	18c9      	adds	r1, r1, r3
 80077a2:	788a      	ldrb	r2, [r1, #2]
 80077a4:	78cd      	ldrb	r5, [r1, #3]
 80077a6:	790c      	ldrb	r4, [r1, #4]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80077a8:	0153      	lsls	r3, r2, #5
 80077aa:	1a9b      	subs	r3, r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	189b      	adds	r3, r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	016a      	lsls	r2, r5, #5
 80077b4:	1b52      	subs	r2, r2, r5
 80077b6:	0092      	lsls	r2, r2, #2
 80077b8:	1952      	adds	r2, r2, r5
 80077ba:	00d2      	lsls	r2, r2, #3
 80077bc:	0161      	lsls	r1, r4, #5
 80077be:	1b09      	subs	r1, r1, r4
 80077c0:	0089      	lsls	r1, r1, #2
 80077c2:	1909      	adds	r1, r1, r4
 80077c4:	00c9      	lsls	r1, r1, #3
	
	if (pressCounter[port] == t1)	
 80077c6:	0085      	lsls	r5, r0, #2
 80077c8:	4c0e      	ldr	r4, [pc, #56]	; (8007804 <CheckForTimedButtonPress+0x6c>)
 80077ca:	592c      	ldr	r4, [r5, r4]
 80077cc:	429c      	cmp	r4, r3
 80077ce:	d009      	beq.n	80077e4 <CheckForTimedButtonPress+0x4c>
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 80077d0:	4294      	cmp	r4, r2
 80077d2:	d00e      	beq.n	80077f2 <CheckForTimedButtonPress+0x5a>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 80077d4:	428c      	cmp	r4, r1
 80077d6:	d10a      	bne.n	80077ee <CheckForTimedButtonPress+0x56>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 80077d8:	00c3      	lsls	r3, r0, #3
 80077da:	1818      	adds	r0, r3, r0
 80077dc:	4b08      	ldr	r3, [pc, #32]	; (8007800 <CheckForTimedButtonPress+0x68>)
 80077de:	220a      	movs	r2, #10
 80077e0:	54c2      	strb	r2, [r0, r3]
 80077e2:	e004      	b.n	80077ee <CheckForTimedButtonPress+0x56>
		button[port].state = PRESSED_FOR_X1_SEC;
 80077e4:	00c3      	lsls	r3, r0, #3
 80077e6:	1818      	adds	r0, r3, r0
 80077e8:	4b05      	ldr	r3, [pc, #20]	; (8007800 <CheckForTimedButtonPress+0x68>)
 80077ea:	2209      	movs	r2, #9
 80077ec:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 80077ee:	2000      	movs	r0, #0
 80077f0:	bd30      	pop	{r4, r5, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 80077f2:	00c3      	lsls	r3, r0, #3
 80077f4:	1818      	adds	r0, r3, r0
 80077f6:	4b02      	ldr	r3, [pc, #8]	; (8007800 <CheckForTimedButtonPress+0x68>)
 80077f8:	220a      	movs	r2, #10
 80077fa:	54c2      	strb	r2, [r0, r3]
 80077fc:	e7f7      	b.n	80077ee <CheckForTimedButtonPress+0x56>
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	20000ce4 	.word	0x20000ce4
 8007804:	20000d24 	.word	0x20000d24

08007808 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 8007808:	b530      	push	{r4, r5, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 800780a:	00c3      	lsls	r3, r0, #3
 800780c:	181b      	adds	r3, r3, r0
 800780e:	4918      	ldr	r1, [pc, #96]	; (8007870 <CheckForTimedButtonRelease+0x68>)
 8007810:	18c9      	adds	r1, r1, r3
 8007812:	794a      	ldrb	r2, [r1, #5]
 8007814:	798d      	ldrb	r5, [r1, #6]
 8007816:	79cc      	ldrb	r4, [r1, #7]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007818:	0153      	lsls	r3, r2, #5
 800781a:	1a9b      	subs	r3, r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	189b      	adds	r3, r3, r2
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	016a      	lsls	r2, r5, #5
 8007824:	1b52      	subs	r2, r2, r5
 8007826:	0092      	lsls	r2, r2, #2
 8007828:	1952      	adds	r2, r2, r5
 800782a:	00d2      	lsls	r2, r2, #3
 800782c:	0161      	lsls	r1, r4, #5
 800782e:	1b09      	subs	r1, r1, r4
 8007830:	0089      	lsls	r1, r1, #2
 8007832:	1909      	adds	r1, r1, r4
 8007834:	00c9      	lsls	r1, r1, #3
	
	if (releaseCounter[port] == t1)	
 8007836:	0085      	lsls	r5, r0, #2
 8007838:	4c0e      	ldr	r4, [pc, #56]	; (8007874 <CheckForTimedButtonRelease+0x6c>)
 800783a:	592c      	ldr	r4, [r5, r4]
 800783c:	429c      	cmp	r4, r3
 800783e:	d009      	beq.n	8007854 <CheckForTimedButtonRelease+0x4c>
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 8007840:	4294      	cmp	r4, r2
 8007842:	d00e      	beq.n	8007862 <CheckForTimedButtonRelease+0x5a>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 8007844:	428c      	cmp	r4, r1
 8007846:	d10a      	bne.n	800785e <CheckForTimedButtonRelease+0x56>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 8007848:	00c3      	lsls	r3, r0, #3
 800784a:	1818      	adds	r0, r3, r0
 800784c:	4b08      	ldr	r3, [pc, #32]	; (8007870 <CheckForTimedButtonRelease+0x68>)
 800784e:	220d      	movs	r2, #13
 8007850:	54c2      	strb	r2, [r0, r3]
 8007852:	e004      	b.n	800785e <CheckForTimedButtonRelease+0x56>
		button[port].state = RELEASED_FOR_Y1_SEC;
 8007854:	00c3      	lsls	r3, r0, #3
 8007856:	1818      	adds	r0, r3, r0
 8007858:	4b05      	ldr	r3, [pc, #20]	; (8007870 <CheckForTimedButtonRelease+0x68>)
 800785a:	220c      	movs	r2, #12
 800785c:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 800785e:	2000      	movs	r0, #0
 8007860:	bd30      	pop	{r4, r5, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 8007862:	00c3      	lsls	r3, r0, #3
 8007864:	1818      	adds	r0, r3, r0
 8007866:	4b02      	ldr	r3, [pc, #8]	; (8007870 <CheckForTimedButtonRelease+0x68>)
 8007868:	220d      	movs	r2, #13
 800786a:	54c2      	strb	r2, [r0, r3]
 800786c:	e7f7      	b.n	800785e <CheckForTimedButtonRelease+0x56>
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	20000ce4 	.word	0x20000ce4
 8007874:	20000d3c 	.word	0x20000d3c

08007878 <CheckAttachedButtons>:
{
 8007878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800787a:	46ce      	mov	lr, r9
 800787c:	4647      	mov	r7, r8
 800787e:	b580      	push	{r7, lr}
 8007880:	b087      	sub	sp, #28
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8007882:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8007884:	2600      	movs	r6, #0
 8007886:	2300      	movs	r3, #0
 8007888:	4698      	mov	r8, r3
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 800788a:	e11e      	b.n	8007aca <CheckAttachedButtons+0x252>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 800788c:	230e      	movs	r3, #14
 800788e:	446b      	add	r3, sp
 8007890:	8819      	ldrh	r1, [r3, #0]
 8007892:	2201      	movs	r2, #1
 8007894:	9805      	ldr	r0, [sp, #20]
 8007896:	f00a f97e 	bl	8011b96 <HAL_GPIO_WritePin>
 800789a:	200a      	movs	r0, #10
 800789c:	f006 faa8 	bl	800ddf0 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 80078a0:	ab03      	add	r3, sp, #12
 80078a2:	8819      	ldrh	r1, [r3, #0]
 80078a4:	9804      	ldr	r0, [sp, #16]
 80078a6:	f00a f96f 	bl	8011b88 <HAL_GPIO_ReadPin>
 80078aa:	4680      	mov	r8, r0
 80078ac:	e13b      	b.n	8007b26 <CheckAttachedButtons+0x2ae>
			switch (button[i].type)
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d10b      	bne.n	80078ca <CheckAttachedButtons+0x52>
					if (connected == GPIO_PIN_SET)	
 80078b2:	4643      	mov	r3, r8
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d041      	beq.n	800793c <CheckAttachedButtons+0xc4>
					else if (connected == GPIO_PIN_RESET) 
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <CheckAttachedButtons+0x52>
						state = ON;
 80078bc:	2602      	movs	r6, #2
 80078be:	e006      	b.n	80078ce <CheckAttachedButtons+0x56>
					if (connected == GPIO_PIN_SET)	
 80078c0:	4643      	mov	r3, r8
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d03c      	beq.n	8007940 <CheckAttachedButtons+0xc8>
					else if (connected == GPIO_PIN_RESET)
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d034      	beq.n	8007934 <CheckAttachedButtons+0xbc>
			if (state == CLOSED || state == ON)												
 80078ca:	2e04      	cmp	r6, #4
 80078cc:	d039      	beq.n	8007942 <CheckAttachedButtons+0xca>
 80078ce:	2e02      	cmp	r6, #2
 80078d0:	d037      	beq.n	8007942 <CheckAttachedButtons+0xca>
			if (state == OPEN || state == OFF)												
 80078d2:	2e03      	cmp	r6, #3
 80078d4:	d047      	beq.n	8007966 <CheckAttachedButtons+0xee>
 80078d6:	2e01      	cmp	r6, #1
 80078d8:	d045      	beq.n	8007966 <CheckAttachedButtons+0xee>
			if (pressCounter[i] < BOS.buttons.debounce) 									
 80078da:	00ab      	lsls	r3, r5, #2
 80078dc:	4ac3      	ldr	r2, [pc, #780]	; (8007bec <CheckAttachedButtons+0x374>)
 80078de:	589b      	ldr	r3, [r3, r2]
 80078e0:	4ac3      	ldr	r2, [pc, #780]	; (8007bf0 <CheckAttachedButtons+0x378>)
 80078e2:	8812      	ldrh	r2, [r2, #0]
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d200      	bcs.n	80078ea <CheckAttachedButtons+0x72>
 80078e8:	e092      	b.n	8007a10 <CheckAttachedButtons+0x198>
				if (pressCounter[i] == BOS.buttons.debounce)
 80078ea:	d065      	beq.n	80079b8 <CheckAttachedButtons+0x140>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 80078ec:	00ab      	lsls	r3, r5, #2
 80078ee:	49c1      	ldr	r1, [pc, #772]	; (8007bf4 <CheckAttachedButtons+0x37c>)
 80078f0:	585b      	ldr	r3, [r3, r1]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d203      	bcs.n	80078fe <CheckAttachedButtons+0x86>
					releaseCounter[i] = 0;					
 80078f6:	00ab      	lsls	r3, r5, #2
 80078f8:	000a      	movs	r2, r1
 80078fa:	2100      	movs	r1, #0
 80078fc:	5099      	str	r1, [r3, r2]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 80078fe:	00ab      	lsls	r3, r5, #2
 8007900:	4aba      	ldr	r2, [pc, #744]	; (8007bec <CheckAttachedButtons+0x374>)
 8007902:	589b      	ldr	r3, [r3, r2]
 8007904:	4aba      	ldr	r2, [pc, #744]	; (8007bf0 <CheckAttachedButtons+0x378>)
 8007906:	8852      	ldrh	r2, [r2, #2]
 8007908:	4293      	cmp	r3, r2
 800790a:	d972      	bls.n	80079f2 <CheckAttachedButtons+0x17a>
 800790c:	22fa      	movs	r2, #250	; 0xfa
 800790e:	0052      	lsls	r2, r2, #1
 8007910:	4293      	cmp	r3, r2
 8007912:	d26e      	bcs.n	80079f2 <CheckAttachedButtons+0x17a>
					if (clicked == 0)
 8007914:	4bb8      	ldr	r3, [pc, #736]	; (8007bf8 <CheckAttachedButtons+0x380>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d157      	bne.n	80079cc <CheckAttachedButtons+0x154>
						clicked = 1;																					// Record a possible single click 
 800791c:	4bb6      	ldr	r3, [pc, #728]	; (8007bf8 <CheckAttachedButtons+0x380>)
 800791e:	3af4      	subs	r2, #244	; 0xf4
 8007920:	3aff      	subs	r2, #255	; 0xff
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	e074      	b.n	8007a10 <CheckAttachedButtons+0x198>
					if (connected == GPIO_PIN_SET)	
 8007926:	4643      	mov	r3, r8
 8007928:	2b01      	cmp	r3, #1
 800792a:	d005      	beq.n	8007938 <CheckAttachedButtons+0xc0>
					else if (connected == GPIO_PIN_RESET) 
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1cc      	bne.n	80078ca <CheckAttachedButtons+0x52>
						state = OFF;
 8007930:	2601      	movs	r6, #1
 8007932:	e7cc      	b.n	80078ce <CheckAttachedButtons+0x56>
						state = OPEN;			
 8007934:	2603      	movs	r6, #3
 8007936:	e7ca      	b.n	80078ce <CheckAttachedButtons+0x56>
						state = ON;
 8007938:	2602      	movs	r6, #2
 800793a:	e7c8      	b.n	80078ce <CheckAttachedButtons+0x56>
						state = OFF;
 800793c:	4646      	mov	r6, r8
 800793e:	e7c6      	b.n	80078ce <CheckAttachedButtons+0x56>
						state = CLOSED;
 8007940:	2604      	movs	r6, #4
				if (pressCounter[i] < 0xFFFF)	
 8007942:	00ab      	lsls	r3, r5, #2
 8007944:	4aa9      	ldr	r2, [pc, #676]	; (8007bec <CheckAttachedButtons+0x374>)
 8007946:	589b      	ldr	r3, [r3, r2]
 8007948:	4aac      	ldr	r2, [pc, #688]	; (8007bfc <CheckAttachedButtons+0x384>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d806      	bhi.n	800795c <CheckAttachedButtons+0xe4>
					++pressCounter[i];																			// Advance the debounce counter
 800794e:	00aa      	lsls	r2, r5, #2
 8007950:	3301      	adds	r3, #1
 8007952:	49a6      	ldr	r1, [pc, #664]	; (8007bec <CheckAttachedButtons+0x374>)
 8007954:	5053      	str	r3, [r2, r1]
 8007956:	e7bc      	b.n	80078d2 <CheckAttachedButtons+0x5a>
						state = CLOSED;
 8007958:	2604      	movs	r6, #4
 800795a:	e7f2      	b.n	8007942 <CheckAttachedButtons+0xca>
					pressCounter[i] = 0;																		// Reset debounce counter					
 800795c:	00ab      	lsls	r3, r5, #2
 800795e:	4aa3      	ldr	r2, [pc, #652]	; (8007bec <CheckAttachedButtons+0x374>)
 8007960:	2100      	movs	r1, #0
 8007962:	5099      	str	r1, [r3, r2]
 8007964:	e7b5      	b.n	80078d2 <CheckAttachedButtons+0x5a>
				if (releaseCounter[i] < 0xFFFF)
 8007966:	00ab      	lsls	r3, r5, #2
 8007968:	4aa2      	ldr	r2, [pc, #648]	; (8007bf4 <CheckAttachedButtons+0x37c>)
 800796a:	589b      	ldr	r3, [r3, r2]
 800796c:	4aa3      	ldr	r2, [pc, #652]	; (8007bfc <CheckAttachedButtons+0x384>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d813      	bhi.n	800799a <CheckAttachedButtons+0x122>
					++releaseCounter[i];																		// Advance the debounce counter
 8007972:	00aa      	lsls	r2, r5, #2
 8007974:	3301      	adds	r3, #1
 8007976:	499f      	ldr	r1, [pc, #636]	; (8007bf4 <CheckAttachedButtons+0x37c>)
 8007978:	5053      	str	r3, [r2, r1]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 800797a:	4b9f      	ldr	r3, [pc, #636]	; (8007bf8 <CheckAttachedButtons+0x380>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b02      	cmp	r3, #2
 8007980:	d010      	beq.n	80079a4 <CheckAttachedButtons+0x12c>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 8007982:	4b9f      	ldr	r3, [pc, #636]	; (8007c00 <CheckAttachedButtons+0x388>)
 8007984:	5d5a      	ldrb	r2, [r3, r5]
 8007986:	4b9a      	ldr	r3, [pc, #616]	; (8007bf0 <CheckAttachedButtons+0x378>)
 8007988:	795b      	ldrb	r3, [r3, #5]
 800798a:	429a      	cmp	r2, r3
 800798c:	d9a5      	bls.n	80078da <CheckAttachedButtons+0x62>
					clicked = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	4a99      	ldr	r2, [pc, #612]	; (8007bf8 <CheckAttachedButtons+0x380>)
 8007992:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 8007994:	4a9a      	ldr	r2, [pc, #616]	; (8007c00 <CheckAttachedButtons+0x388>)
 8007996:	5553      	strb	r3, [r2, r5]
 8007998:	e79f      	b.n	80078da <CheckAttachedButtons+0x62>
					releaseCounter[i] = 0;																	// Reset debounce counter		
 800799a:	00ab      	lsls	r3, r5, #2
 800799c:	4a95      	ldr	r2, [pc, #596]	; (8007bf4 <CheckAttachedButtons+0x37c>)
 800799e:	2100      	movs	r1, #0
 80079a0:	5099      	str	r1, [r3, r2]
 80079a2:	e7ea      	b.n	800797a <CheckAttachedButtons+0x102>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80079a4:	4b96      	ldr	r3, [pc, #600]	; (8007c00 <CheckAttachedButtons+0x388>)
 80079a6:	5d5b      	ldrb	r3, [r3, r5]
 80079a8:	4a91      	ldr	r2, [pc, #580]	; (8007bf0 <CheckAttachedButtons+0x378>)
 80079aa:	7952      	ldrb	r2, [r2, #5]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d8e8      	bhi.n	8007982 <CheckAttachedButtons+0x10a>
					++dblCounter[i];			
 80079b0:	3301      	adds	r3, #1
 80079b2:	4a93      	ldr	r2, [pc, #588]	; (8007c00 <CheckAttachedButtons+0x388>)
 80079b4:	5553      	strb	r3, [r2, r5]
 80079b6:	e790      	b.n	80078da <CheckAttachedButtons+0x62>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 80079b8:	00e9      	lsls	r1, r5, #3
 80079ba:	1949      	adds	r1, r1, r5
 80079bc:	4891      	ldr	r0, [pc, #580]	; (8007c04 <CheckAttachedButtons+0x38c>)
 80079be:	2707      	movs	r7, #7
 80079c0:	540f      	strb	r7, [r1, r0]
					++pressCounter[i];
 80079c2:	00a9      	lsls	r1, r5, #2
 80079c4:	3301      	adds	r3, #1
 80079c6:	4889      	ldr	r0, [pc, #548]	; (8007bec <CheckAttachedButtons+0x374>)
 80079c8:	500b      	str	r3, [r1, r0]
 80079ca:	e78f      	b.n	80078ec <CheckAttachedButtons+0x74>
					else if (clicked == 2) {
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d11f      	bne.n	8007a10 <CheckAttachedButtons+0x198>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 80079d0:	4b8b      	ldr	r3, [pc, #556]	; (8007c00 <CheckAttachedButtons+0x388>)
 80079d2:	5d5b      	ldrb	r3, [r3, r5]
 80079d4:	4a86      	ldr	r2, [pc, #536]	; (8007bf0 <CheckAttachedButtons+0x378>)
 80079d6:	7912      	ldrb	r2, [r2, #4]
 80079d8:	4293      	cmp	r3, r2
 80079da:	d919      	bls.n	8007a10 <CheckAttachedButtons+0x198>
 80079dc:	4a84      	ldr	r2, [pc, #528]	; (8007bf0 <CheckAttachedButtons+0x378>)
 80079de:	7952      	ldrb	r2, [r2, #5]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d215      	bcs.n	8007a10 <CheckAttachedButtons+0x198>
							clicked = 3;																				// Record a possible double click 
 80079e4:	4b84      	ldr	r3, [pc, #528]	; (8007bf8 <CheckAttachedButtons+0x380>)
 80079e6:	2203      	movs	r2, #3
 80079e8:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 80079ea:	4b85      	ldr	r3, [pc, #532]	; (8007c00 <CheckAttachedButtons+0x388>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	555a      	strb	r2, [r3, r5]
 80079f0:	e00e      	b.n	8007a10 <CheckAttachedButtons+0x198>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 80079f2:	3bf5      	subs	r3, #245	; 0xf5
 80079f4:	3bff      	subs	r3, #255	; 0xff
 80079f6:	4a84      	ldr	r2, [pc, #528]	; (8007c08 <CheckAttachedButtons+0x390>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d809      	bhi.n	8007a10 <CheckAttachedButtons+0x198>
					if (clicked)	clicked = 0;															// Cannot be a click
 80079fc:	4b7e      	ldr	r3, [pc, #504]	; (8007bf8 <CheckAttachedButtons+0x380>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <CheckAttachedButtons+0x192>
 8007a04:	4b7c      	ldr	r3, [pc, #496]	; (8007bf8 <CheckAttachedButtons+0x380>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8007a0a:	0020      	movs	r0, r4
 8007a0c:	f7ff fec4 	bl	8007798 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 8007a10:	00ab      	lsls	r3, r5, #2
 8007a12:	4a78      	ldr	r2, [pc, #480]	; (8007bf4 <CheckAttachedButtons+0x37c>)
 8007a14:	589b      	ldr	r3, [r3, r2]
 8007a16:	4a76      	ldr	r2, [pc, #472]	; (8007bf0 <CheckAttachedButtons+0x378>)
 8007a18:	8812      	ldrh	r2, [r2, #0]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d33b      	bcc.n	8007a96 <CheckAttachedButtons+0x21e>
				if (releaseCounter[i] == BOS.buttons.debounce)
 8007a1e:	d022      	beq.n	8007a66 <CheckAttachedButtons+0x1ee>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8007a20:	00ab      	lsls	r3, r5, #2
 8007a22:	4972      	ldr	r1, [pc, #456]	; (8007bec <CheckAttachedButtons+0x374>)
 8007a24:	585b      	ldr	r3, [r3, r1]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d203      	bcs.n	8007a32 <CheckAttachedButtons+0x1ba>
					pressCounter[i] = 0;				
 8007a2a:	00ab      	lsls	r3, r5, #2
 8007a2c:	000a      	movs	r2, r1
 8007a2e:	2100      	movs	r1, #0
 8007a30:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 8007a32:	00ab      	lsls	r3, r5, #2
 8007a34:	4a6f      	ldr	r2, [pc, #444]	; (8007bf4 <CheckAttachedButtons+0x37c>)
 8007a36:	589b      	ldr	r3, [r3, r2]
 8007a38:	4a6d      	ldr	r2, [pc, #436]	; (8007bf0 <CheckAttachedButtons+0x378>)
 8007a3a:	8852      	ldrh	r2, [r2, #2]
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d925      	bls.n	8007a8c <CheckAttachedButtons+0x214>
 8007a40:	22fa      	movs	r2, #250	; 0xfa
 8007a42:	0052      	lsls	r2, r2, #1
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d221      	bcs.n	8007a8c <CheckAttachedButtons+0x214>
					if (clicked == 1)
 8007a48:	4b6b      	ldr	r3, [pc, #428]	; (8007bf8 <CheckAttachedButtons+0x380>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d014      	beq.n	8007a7a <CheckAttachedButtons+0x202>
					else if (clicked == 3)
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d120      	bne.n	8007a96 <CheckAttachedButtons+0x21e>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 8007a54:	00eb      	lsls	r3, r5, #3
 8007a56:	195b      	adds	r3, r3, r5
 8007a58:	4a6a      	ldr	r2, [pc, #424]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007a5a:	2106      	movs	r1, #6
 8007a5c:	5499      	strb	r1, [r3, r2]
						clicked = 0;																					// Prepare for a single click					
 8007a5e:	4b66      	ldr	r3, [pc, #408]	; (8007bf8 <CheckAttachedButtons+0x380>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	e017      	b.n	8007a96 <CheckAttachedButtons+0x21e>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 8007a66:	00e9      	lsls	r1, r5, #3
 8007a68:	1949      	adds	r1, r1, r5
 8007a6a:	4866      	ldr	r0, [pc, #408]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007a6c:	2708      	movs	r7, #8
 8007a6e:	540f      	strb	r7, [r1, r0]
					++releaseCounter[i];
 8007a70:	00a9      	lsls	r1, r5, #2
 8007a72:	3301      	adds	r3, #1
 8007a74:	485f      	ldr	r0, [pc, #380]	; (8007bf4 <CheckAttachedButtons+0x37c>)
 8007a76:	500b      	str	r3, [r1, r0]
 8007a78:	e7d2      	b.n	8007a20 <CheckAttachedButtons+0x1a8>
						button[i].state = CLICKED;														// Record a single button click event
 8007a7a:	00eb      	lsls	r3, r5, #3
 8007a7c:	195b      	adds	r3, r3, r5
 8007a7e:	4a61      	ldr	r2, [pc, #388]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007a80:	2105      	movs	r1, #5
 8007a82:	5499      	strb	r1, [r3, r2]
						clicked = 2;																					// Prepare for a double click
 8007a84:	4b5c      	ldr	r3, [pc, #368]	; (8007bf8 <CheckAttachedButtons+0x380>)
 8007a86:	2202      	movs	r2, #2
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	e004      	b.n	8007a96 <CheckAttachedButtons+0x21e>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 8007a8c:	3bf5      	subs	r3, #245	; 0xf5
 8007a8e:	3bff      	subs	r3, #255	; 0xff
 8007a90:	4a5d      	ldr	r2, [pc, #372]	; (8007c08 <CheckAttachedButtons+0x390>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d90b      	bls.n	8007aae <CheckAttachedButtons+0x236>
			switch (button[i].state)
 8007a96:	00eb      	lsls	r3, r5, #3
 8007a98:	195b      	adds	r3, r3, r5
 8007a9a:	4a5a      	ldr	r2, [pc, #360]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007a9c:	5c9b      	ldrb	r3, [r3, r2]
 8007a9e:	3b05      	subs	r3, #5
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	2a09      	cmp	r2, #9
 8007aa4:	d80f      	bhi.n	8007ac6 <CheckAttachedButtons+0x24e>
 8007aa6:	0093      	lsls	r3, r2, #2
 8007aa8:	4a58      	ldr	r2, [pc, #352]	; (8007c0c <CheckAttachedButtons+0x394>)
 8007aaa:	58d3      	ldr	r3, [r2, r3]
 8007aac:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8007aae:	0020      	movs	r0, r4
 8007ab0:	f7ff feaa 	bl	8007808 <CheckForTimedButtonRelease>
 8007ab4:	e7ef      	b.n	8007a96 <CheckAttachedButtons+0x21e>
					buttonPressedCallback(i);
 8007ab6:	0020      	movs	r0, r4
 8007ab8:	f7ff fe68 	bl	800778c <buttonPressedCallback>
					button[i].state = NONE;
 8007abc:	00eb      	lsls	r3, r5, #3
 8007abe:	195d      	adds	r5, r3, r5
 8007ac0:	4b50      	ldr	r3, [pc, #320]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	54ea      	strb	r2, [r5, r3]
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8007ac6:	3401      	adds	r4, #1
 8007ac8:	b2e4      	uxtb	r4, r4
 8007aca:	2c05      	cmp	r4, #5
 8007acc:	d900      	bls.n	8007ad0 <CheckAttachedButtons+0x258>
 8007ace:	e10b      	b.n	8007ce8 <CheckAttachedButtons+0x470>
		if (button[i].type)			// Only check defined butons
 8007ad0:	0025      	movs	r5, r4
 8007ad2:	00e2      	lsls	r2, r4, #3
 8007ad4:	1912      	adds	r2, r2, r4
 8007ad6:	4b4b      	ldr	r3, [pc, #300]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007ad8:	189b      	adds	r3, r3, r2
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0f2      	beq.n	8007ac6 <CheckAttachedButtons+0x24e>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 8007ae0:	4b4b      	ldr	r3, [pc, #300]	; (8007c10 <CheckAttachedButtons+0x398>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d103      	bne.n	8007af0 <CheckAttachedButtons+0x278>
 8007ae8:	0013      	movs	r3, r2
 8007aea:	4a46      	ldr	r2, [pc, #280]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007aec:	2100      	movs	r1, #0
 8007aee:	5499      	strb	r1, [r3, r2]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8007af0:	230e      	movs	r3, #14
 8007af2:	446b      	add	r3, sp
 8007af4:	4699      	mov	r9, r3
 8007af6:	af03      	add	r7, sp, #12
 8007af8:	9700      	str	r7, [sp, #0]
 8007afa:	ab04      	add	r3, sp, #16
 8007afc:	464a      	mov	r2, r9
 8007afe:	a905      	add	r1, sp, #20
 8007b00:	0020      	movs	r0, r4
 8007b02:	f005 fdf5 	bl	800d6f0 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8007b06:	464b      	mov	r3, r9
 8007b08:	8819      	ldrh	r1, [r3, #0]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	9805      	ldr	r0, [sp, #20]
 8007b0e:	f00a f842 	bl	8011b96 <HAL_GPIO_WritePin>
 8007b12:	200a      	movs	r0, #10
 8007b14:	f006 f96c 	bl	800ddf0 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8007b18:	8839      	ldrh	r1, [r7, #0]
 8007b1a:	9804      	ldr	r0, [sp, #16]
 8007b1c:	f00a f834 	bl	8011b88 <HAL_GPIO_ReadPin>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d100      	bne.n	8007b26 <CheckAttachedButtons+0x2ae>
 8007b24:	e6b2      	b.n	800788c <CheckAttachedButtons+0x14>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 8007b26:	230e      	movs	r3, #14
 8007b28:	446b      	add	r3, sp
 8007b2a:	8819      	ldrh	r1, [r3, #0]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	9805      	ldr	r0, [sp, #20]
 8007b30:	f00a f831 	bl	8011b96 <HAL_GPIO_WritePin>
			switch (button[i].type)
 8007b34:	00ea      	lsls	r2, r5, #3
 8007b36:	1952      	adds	r2, r2, r5
 8007b38:	4b32      	ldr	r3, [pc, #200]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007b3a:	189b      	adds	r3, r3, r2
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d100      	bne.n	8007b44 <CheckAttachedButtons+0x2cc>
 8007b42:	e6f0      	b.n	8007926 <CheckAttachedButtons+0xae>
 8007b44:	d900      	bls.n	8007b48 <CheckAttachedButtons+0x2d0>
 8007b46:	e6b2      	b.n	80078ae <CheckAttachedButtons+0x36>
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d100      	bne.n	8007b4e <CheckAttachedButtons+0x2d6>
 8007b4c:	e6b8      	b.n	80078c0 <CheckAttachedButtons+0x48>
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d000      	beq.n	8007b54 <CheckAttachedButtons+0x2dc>
 8007b52:	e6ba      	b.n	80078ca <CheckAttachedButtons+0x52>
					if (connected == GPIO_PIN_SET)	
 8007b54:	4643      	mov	r3, r8
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d100      	bne.n	8007b5c <CheckAttachedButtons+0x2e4>
 8007b5a:	e6fd      	b.n	8007958 <CheckAttachedButtons+0xe0>
					else if (connected == GPIO_PIN_RESET) 
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d000      	beq.n	8007b62 <CheckAttachedButtons+0x2ea>
 8007b60:	e6b3      	b.n	80078ca <CheckAttachedButtons+0x52>
						state = OPEN;	
 8007b62:	2603      	movs	r6, #3
 8007b64:	e6b3      	b.n	80078ce <CheckAttachedButtons+0x56>
					buttonReleasedCallback(i);
 8007b66:	0020      	movs	r0, r4
 8007b68:	f7ff fe11 	bl	800778e <buttonReleasedCallback>
					button[i].state = NONE;
 8007b6c:	00eb      	lsls	r3, r5, #3
 8007b6e:	195d      	adds	r5, r3, r5
 8007b70:	4b24      	ldr	r3, [pc, #144]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	54ea      	strb	r2, [r5, r3]
      		break;
 8007b76:	e7a6      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 8007b78:	4b25      	ldr	r3, [pc, #148]	; (8007c10 <CheckAttachedButtons+0x398>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1a2      	bne.n	8007ac6 <CheckAttachedButtons+0x24e>
 8007b80:	00eb      	lsls	r3, r5, #3
 8007b82:	195b      	adds	r3, r3, r5
 8007b84:	4d1f      	ldr	r5, [pc, #124]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007b86:	18ed      	adds	r5, r5, r3
 8007b88:	7a2b      	ldrb	r3, [r5, #8]
 8007b8a:	07db      	lsls	r3, r3, #31
 8007b8c:	d59b      	bpl.n	8007ac6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007b8e:	4b20      	ldr	r3, [pc, #128]	; (8007c10 <CheckAttachedButtons+0x398>)
 8007b90:	2201      	movs	r2, #1
 8007b92:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8007b94:	0020      	movs	r0, r4
 8007b96:	f7ff fdfb 	bl	8007790 <buttonClickedCallback>
 8007b9a:	e794      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 8007b9c:	4b1c      	ldr	r3, [pc, #112]	; (8007c10 <CheckAttachedButtons+0x398>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d190      	bne.n	8007ac6 <CheckAttachedButtons+0x24e>
 8007ba4:	00eb      	lsls	r3, r5, #3
 8007ba6:	195b      	adds	r3, r3, r5
 8007ba8:	4d16      	ldr	r5, [pc, #88]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007baa:	18ed      	adds	r5, r5, r3
 8007bac:	7a2b      	ldrb	r3, [r5, #8]
 8007bae:	079b      	lsls	r3, r3, #30
 8007bb0:	d589      	bpl.n	8007ac6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007bb2:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <CheckAttachedButtons+0x398>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8007bb8:	0020      	movs	r0, r4
 8007bba:	f7ff fdea 	bl	8007792 <buttonDblClickedCallback>
 8007bbe:	e782      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 8007bc0:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <CheckAttachedButtons+0x398>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d000      	beq.n	8007bca <CheckAttachedButtons+0x352>
 8007bc8:	e77d      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
 8007bca:	00eb      	lsls	r3, r5, #3
 8007bcc:	195b      	adds	r3, r3, r5
 8007bce:	4d0d      	ldr	r5, [pc, #52]	; (8007c04 <CheckAttachedButtons+0x38c>)
 8007bd0:	18ed      	adds	r5, r5, r3
 8007bd2:	7a2b      	ldrb	r3, [r5, #8]
 8007bd4:	075b      	lsls	r3, r3, #29
 8007bd6:	d400      	bmi.n	8007bda <CheckAttachedButtons+0x362>
 8007bd8:	e775      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007bda:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <CheckAttachedButtons+0x398>)
 8007bdc:	2201      	movs	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 8007be0:	2101      	movs	r1, #1
 8007be2:	0020      	movs	r0, r4
 8007be4:	f7ff fdd6 	bl	8007794 <buttonPressedForXCallback>
 8007be8:	e76d      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	20000d24 	.word	0x20000d24
 8007bf0:	20006138 	.word	0x20006138
 8007bf4:	20000d3c 	.word	0x20000d3c
 8007bf8:	20000d1a 	.word	0x20000d1a
 8007bfc:	0000fffe 	.word	0x0000fffe
 8007c00:	20000d1c 	.word	0x20000d1c
 8007c04:	20000ce4 	.word	0x20000ce4
 8007c08:	0000fe0a 	.word	0x0000fe0a
 8007c0c:	0801aa50 	.word	0x0801aa50
 8007c10:	20000d22 	.word	0x20000d22
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 8007c14:	4b37      	ldr	r3, [pc, #220]	; (8007cf4 <CheckAttachedButtons+0x47c>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d000      	beq.n	8007c1e <CheckAttachedButtons+0x3a6>
 8007c1c:	e753      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
 8007c1e:	00eb      	lsls	r3, r5, #3
 8007c20:	195b      	adds	r3, r3, r5
 8007c22:	4d35      	ldr	r5, [pc, #212]	; (8007cf8 <CheckAttachedButtons+0x480>)
 8007c24:	18ed      	adds	r5, r5, r3
 8007c26:	7a2b      	ldrb	r3, [r5, #8]
 8007c28:	071b      	lsls	r3, r3, #28
 8007c2a:	d400      	bmi.n	8007c2e <CheckAttachedButtons+0x3b6>
 8007c2c:	e74b      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007c2e:	4b31      	ldr	r3, [pc, #196]	; (8007cf4 <CheckAttachedButtons+0x47c>)
 8007c30:	2201      	movs	r2, #1
 8007c32:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 8007c34:	2102      	movs	r1, #2
 8007c36:	0020      	movs	r0, r4
 8007c38:	f7ff fdac 	bl	8007794 <buttonPressedForXCallback>
 8007c3c:	e743      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 8007c3e:	4b2d      	ldr	r3, [pc, #180]	; (8007cf4 <CheckAttachedButtons+0x47c>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d000      	beq.n	8007c48 <CheckAttachedButtons+0x3d0>
 8007c46:	e73e      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
 8007c48:	00eb      	lsls	r3, r5, #3
 8007c4a:	195b      	adds	r3, r3, r5
 8007c4c:	4d2a      	ldr	r5, [pc, #168]	; (8007cf8 <CheckAttachedButtons+0x480>)
 8007c4e:	18ed      	adds	r5, r5, r3
 8007c50:	7a2b      	ldrb	r3, [r5, #8]
 8007c52:	06db      	lsls	r3, r3, #27
 8007c54:	d400      	bmi.n	8007c58 <CheckAttachedButtons+0x3e0>
 8007c56:	e736      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007c58:	4b26      	ldr	r3, [pc, #152]	; (8007cf4 <CheckAttachedButtons+0x47c>)
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 8007c5e:	2103      	movs	r1, #3
 8007c60:	0020      	movs	r0, r4
 8007c62:	f7ff fd97 	bl	8007794 <buttonPressedForXCallback>
 8007c66:	e72e      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8007c68:	4b22      	ldr	r3, [pc, #136]	; (8007cf4 <CheckAttachedButtons+0x47c>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d000      	beq.n	8007c72 <CheckAttachedButtons+0x3fa>
 8007c70:	e729      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
 8007c72:	00eb      	lsls	r3, r5, #3
 8007c74:	195b      	adds	r3, r3, r5
 8007c76:	4d20      	ldr	r5, [pc, #128]	; (8007cf8 <CheckAttachedButtons+0x480>)
 8007c78:	18ed      	adds	r5, r5, r3
 8007c7a:	7a2b      	ldrb	r3, [r5, #8]
 8007c7c:	069b      	lsls	r3, r3, #26
 8007c7e:	d400      	bmi.n	8007c82 <CheckAttachedButtons+0x40a>
 8007c80:	e721      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007c82:	4b1c      	ldr	r3, [pc, #112]	; (8007cf4 <CheckAttachedButtons+0x47c>)
 8007c84:	2201      	movs	r2, #1
 8007c86:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 8007c88:	2101      	movs	r1, #1
 8007c8a:	0020      	movs	r0, r4
 8007c8c:	f7ff fd83 	bl	8007796 <buttonReleasedForYCallback>
 8007c90:	e719      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 8007c92:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <CheckAttachedButtons+0x47c>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d000      	beq.n	8007c9c <CheckAttachedButtons+0x424>
 8007c9a:	e714      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
 8007c9c:	00eb      	lsls	r3, r5, #3
 8007c9e:	195b      	adds	r3, r3, r5
 8007ca0:	4d15      	ldr	r5, [pc, #84]	; (8007cf8 <CheckAttachedButtons+0x480>)
 8007ca2:	18ed      	adds	r5, r5, r3
 8007ca4:	7a2b      	ldrb	r3, [r5, #8]
 8007ca6:	065b      	lsls	r3, r3, #25
 8007ca8:	d400      	bmi.n	8007cac <CheckAttachedButtons+0x434>
 8007caa:	e70c      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007cac:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <CheckAttachedButtons+0x47c>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	0020      	movs	r0, r4
 8007cb6:	f7ff fd6e 	bl	8007796 <buttonReleasedForYCallback>
 8007cba:	e704      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 8007cbc:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <CheckAttachedButtons+0x47c>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d000      	beq.n	8007cc6 <CheckAttachedButtons+0x44e>
 8007cc4:	e6ff      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
 8007cc6:	00eb      	lsls	r3, r5, #3
 8007cc8:	195b      	adds	r3, r3, r5
 8007cca:	4d0b      	ldr	r5, [pc, #44]	; (8007cf8 <CheckAttachedButtons+0x480>)
 8007ccc:	18ed      	adds	r5, r5, r3
 8007cce:	2308      	movs	r3, #8
 8007cd0:	56eb      	ldrsb	r3, [r5, r3]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	db00      	blt.n	8007cd8 <CheckAttachedButtons+0x460>
 8007cd6:	e6f6      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8007cd8:	4b06      	ldr	r3, [pc, #24]	; (8007cf4 <CheckAttachedButtons+0x47c>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 8007cde:	2103      	movs	r1, #3
 8007ce0:	0020      	movs	r0, r4
 8007ce2:	f7ff fd58 	bl	8007796 <buttonReleasedForYCallback>
 8007ce6:	e6ee      	b.n	8007ac6 <CheckAttachedButtons+0x24e>
}
 8007ce8:	b007      	add	sp, #28
 8007cea:	bcc0      	pop	{r6, r7}
 8007cec:	46b9      	mov	r9, r7
 8007cee:	46b0      	mov	r8, r6
 8007cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	20000d22 	.word	0x20000d22
 8007cf8:	20000ce4 	.word	0x20000ce4

08007cfc <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 8007cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cfe:	b08d      	sub	sp, #52	; 0x34
 8007d00:	0006      	movs	r6, r0
 8007d02:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8007d04:	4b41      	ldr	r3, [pc, #260]	; (8007e0c <AddPortButton+0x110>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d157      	bne.n	8007dbc <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 8007d0c:	4b40      	ldr	r3, [pc, #256]	; (8007e10 <AddPortButton+0x114>)
 8007d0e:	2204      	movs	r2, #4
 8007d10:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 8007d12:	4b3e      	ldr	r3, [pc, #248]	; (8007e0c <AddPortButton+0x110>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d15a      	bne.n	8007dd0 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 8007d1a:	2512      	movs	r5, #18
 8007d1c:	446d      	add	r5, sp
 8007d1e:	af04      	add	r7, sp, #16
 8007d20:	9700      	str	r7, [sp, #0]
 8007d22:	ab05      	add	r3, sp, #20
 8007d24:	002a      	movs	r2, r5
 8007d26:	a906      	add	r1, sp, #24
 8007d28:	0020      	movs	r0, r4
 8007d2a:	f005 fce1 	bl	800d6f0 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 8007d2e:	882b      	ldrh	r3, [r5, #0]
 8007d30:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d32:	2301      	movs	r3, #1
 8007d34:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d36:	2500      	movs	r5, #0
 8007d38:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8007d3a:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 8007d3c:	a907      	add	r1, sp, #28
 8007d3e:	9806      	ldr	r0, [sp, #24]
 8007d40:	f009 fe56 	bl	80119f0 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8007d44:	883b      	ldrh	r3, [r7, #0]
 8007d46:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d48:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 8007d4e:	a907      	add	r1, sp, #28
 8007d50:	9805      	ldr	r0, [sp, #20]
 8007d52:	f009 fe4d 	bl	80119f0 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 8007d56:	00e2      	lsls	r2, r4, #3
 8007d58:	1912      	adds	r2, r2, r4
 8007d5a:	4b2e      	ldr	r3, [pc, #184]	; (8007e14 <AddPortButton+0x118>)
 8007d5c:	189b      	adds	r3, r3, r2
 8007d5e:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8007d60:	0025      	movs	r5, r4
 8007d62:	353a      	adds	r5, #58	; 0x3a
 8007d64:	00ad      	lsls	r5, r5, #2
 8007d66:	210e      	movs	r1, #14
 8007d68:	4469      	add	r1, sp
 8007d6a:	0028      	movs	r0, r5
 8007d6c:	f7ff f8ac 	bl	8006ec8 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d133      	bne.n	8007ddc <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 8007d74:	230e      	movs	r3, #14
 8007d76:	446b      	add	r3, sp
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	0a1a      	lsrs	r2, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 8007d7c:	0b1b      	lsrs	r3, r3, #12
 8007d7e:	42a3      	cmp	r3, r4
 8007d80:	d103      	bne.n	8007d8a <AddPortButton+0x8e>
 8007d82:	230f      	movs	r3, #15
 8007d84:	4013      	ands	r3, r2
 8007d86:	42b3      	cmp	r3, r6
 8007d88:	d015      	beq.n	8007db6 <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8007d8a:	0324      	lsls	r4, r4, #12
 8007d8c:	0231      	lsls	r1, r6, #8
 8007d8e:	4321      	orrs	r1, r4
 8007d90:	b289      	uxth	r1, r1
 8007d92:	230e      	movs	r3, #14
 8007d94:	446b      	add	r3, sp
 8007d96:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8007d98:	0028      	movs	r0, r5
 8007d9a:	f7ff f947 	bl	800702c <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8007d9e:	1c68      	adds	r0, r5, #1
 8007da0:	2100      	movs	r1, #0
 8007da2:	f7ff f943 	bl	800702c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8007da6:	1ca8      	adds	r0, r5, #2
 8007da8:	2100      	movs	r1, #0
 8007daa:	f7ff f93f 	bl	800702c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8007dae:	1ce8      	adds	r0, r5, #3
 8007db0:	2100      	movs	r1, #0
 8007db2:	f7ff f93b 	bl	800702c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 8007db6:	2000      	movs	r0, #0
 8007db8:	b00d      	add	sp, #52	; 0x34
 8007dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 8007dbc:	008d      	lsls	r5, r1, #2
 8007dbe:	4b16      	ldr	r3, [pc, #88]	; (8007e18 <AddPortButton+0x11c>)
 8007dc0:	58e8      	ldr	r0, [r5, r3]
 8007dc2:	f006 fb69 	bl	800e498 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8007dc6:	4b15      	ldr	r3, [pc, #84]	; (8007e1c <AddPortButton+0x120>)
 8007dc8:	58e8      	ldr	r0, [r5, r3]
 8007dca:	f006 fb65 	bl	800e498 <osSemaphoreRelease>
 8007dce:	e79d      	b.n	8007d0c <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8007dd0:	0020      	movs	r0, r4
 8007dd2:	f006 f9bf 	bl	800e154 <GetUart>
 8007dd6:	f00a fe52 	bl	8012a7e <HAL_UART_DeInit>
 8007dda:	e79e      	b.n	8007d1a <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8007ddc:	0324      	lsls	r4, r4, #12
 8007dde:	0231      	lsls	r1, r6, #8
 8007de0:	4321      	orrs	r1, r4
 8007de2:	b289      	uxth	r1, r1
 8007de4:	230e      	movs	r3, #14
 8007de6:	446b      	add	r3, sp
 8007de8:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 8007dea:	0028      	movs	r0, r5
 8007dec:	f7ff f91e 	bl	800702c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8007df0:	1c68      	adds	r0, r5, #1
 8007df2:	2100      	movs	r1, #0
 8007df4:	f7ff f91a 	bl	800702c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8007df8:	1ca8      	adds	r0, r5, #2
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f7ff f916 	bl	800702c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8007e00:	1ce8      	adds	r0, r5, #3
 8007e02:	2100      	movs	r1, #0
 8007e04:	f7ff f912 	bl	800702c <EE_WriteVariable>
 8007e08:	e7d5      	b.n	8007db6 <AddPortButton+0xba>
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	200002d5 	.word	0x200002d5
 8007e10:	20000918 	.word	0x20000918
 8007e14:	20000ce4 	.word	0x20000ce4
 8007e18:	200061d4 	.word	0x200061d4
 8007e1c:	200061b8 	.word	0x200061b8

08007e20 <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 8007e20:	b570      	push	{r4, r5, r6, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	0004      	movs	r4, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 8007e26:	4836      	ldr	r0, [pc, #216]	; (8007f00 <RemovePortButton+0xe0>)
 8007e28:	00e1      	lsls	r1, r4, #3
 8007e2a:	1909      	adds	r1, r1, r4
 8007e2c:	1842      	adds	r2, r0, r1
 8007e2e:	2300      	movs	r3, #0
 8007e30:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 8007e32:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8007e34:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 8007e36:	7093      	strb	r3, [r2, #2]
 8007e38:	70d3      	strb	r3, [r2, #3]
 8007e3a:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 8007e3c:	7153      	strb	r3, [r2, #5]
 8007e3e:	7193      	strb	r3, [r2, #6]
 8007e40:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8007e42:	0025      	movs	r5, r4
 8007e44:	353a      	adds	r5, #58	; 0x3a
 8007e46:	00ad      	lsls	r5, r5, #2
 8007e48:	466b      	mov	r3, sp
 8007e4a:	1d99      	adds	r1, r3, #6
 8007e4c:	0028      	movs	r0, r5
 8007e4e:	f7ff f83b 	bl	8006ec8 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d01e      	beq.n	8007e94 <RemovePortButton+0x74>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 8007e56:	0020      	movs	r0, r4
 8007e58:	f006 f97c 	bl	800e154 <GetUart>
 8007e5c:	0005      	movs	r5, r0
	
	if (huart->Instance == USART1) 
 8007e5e:	6803      	ldr	r3, [r0, #0]
 8007e60:	4a28      	ldr	r2, [pc, #160]	; (8007f04 <RemovePortButton+0xe4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d027      	beq.n	8007eb6 <RemovePortButton+0x96>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 8007e66:	4a28      	ldr	r2, [pc, #160]	; (8007f08 <RemovePortButton+0xe8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d032      	beq.n	8007ed2 <RemovePortButton+0xb2>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 8007e6c:	4a27      	ldr	r2, [pc, #156]	; (8007f0c <RemovePortButton+0xec>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d033      	beq.n	8007eda <RemovePortButton+0xba>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 8007e72:	4a27      	ldr	r2, [pc, #156]	; (8007f10 <RemovePortButton+0xf0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d03e      	beq.n	8007ef6 <RemovePortButton+0xd6>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 8007e78:	4a26      	ldr	r2, [pc, #152]	; (8007f14 <RemovePortButton+0xf4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d031      	beq.n	8007ee2 <RemovePortButton+0xc2>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 8007e7e:	4a26      	ldr	r2, [pc, #152]	; (8007f18 <RemovePortButton+0xf8>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d032      	beq.n	8007eea <RemovePortButton+0xca>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 8007e84:	4a25      	ldr	r2, [pc, #148]	; (8007f1c <RemovePortButton+0xfc>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d037      	beq.n	8007efa <RemovePortButton+0xda>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 8007e8a:	4a25      	ldr	r2, [pc, #148]	; (8007f20 <RemovePortButton+0x100>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d030      	beq.n	8007ef2 <RemovePortButton+0xd2>
#ifdef _Usart8	
		MX_USART8_UART_Init();
#endif
	} 
	else
		result = BOS_ERROR;			
 8007e90:	26ff      	movs	r6, #255	; 0xff
 8007e92:	e013      	b.n	8007ebc <RemovePortButton+0x9c>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 8007e94:	2100      	movs	r1, #0
 8007e96:	0028      	movs	r0, r5
 8007e98:	f7ff f8c8 	bl	800702c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8007e9c:	1c68      	adds	r0, r5, #1
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	f7ff f8c4 	bl	800702c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8007ea4:	1ca8      	adds	r0, r5, #2
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	f7ff f8c0 	bl	800702c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 8007eac:	1ce8      	adds	r0, r5, #3
 8007eae:	2100      	movs	r1, #0
 8007eb0:	f7ff f8bc 	bl	800702c <EE_WriteVariable>
 8007eb4:	e7cf      	b.n	8007e56 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8007eb6:	f005 ffbf 	bl	800de38 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8007eba:	2600      	movs	r6, #0
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8007ebc:	4b19      	ldr	r3, [pc, #100]	; (8007f24 <RemovePortButton+0x104>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	551a      	strb	r2, [r3, r4]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 8007ec2:	3201      	adds	r2, #1
 8007ec4:	4918      	ldr	r1, [pc, #96]	; (8007f28 <RemovePortButton+0x108>)
 8007ec6:	0028      	movs	r0, r5
 8007ec8:	f00a fe32 	bl	8012b30 <HAL_UART_Receive_IT>
	
	return result;
}
 8007ecc:	0030      	movs	r0, r6
 8007ece:	b002      	add	sp, #8
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
		MX_USART2_UART_Init();
 8007ed2:	f005 ffc9 	bl	800de68 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8007ed6:	2600      	movs	r6, #0
 8007ed8:	e7f0      	b.n	8007ebc <RemovePortButton+0x9c>
		MX_USART3_UART_Init();
 8007eda:	f005 ffdd 	bl	800de98 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8007ede:	2600      	movs	r6, #0
 8007ee0:	e7ec      	b.n	8007ebc <RemovePortButton+0x9c>
		MX_USART5_UART_Init();
 8007ee2:	f005 fff1 	bl	800dec8 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	e7e8      	b.n	8007ebc <RemovePortButton+0x9c>
		MX_USART6_UART_Init();
 8007eea:	f006 f805 	bl	800def8 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8007eee:	2600      	movs	r6, #0
 8007ef0:	e7e4      	b.n	8007ebc <RemovePortButton+0x9c>
 8007ef2:	2600      	movs	r6, #0
 8007ef4:	e7e2      	b.n	8007ebc <RemovePortButton+0x9c>
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	e7e0      	b.n	8007ebc <RemovePortButton+0x9c>
 8007efa:	2600      	movs	r6, #0
 8007efc:	e7de      	b.n	8007ebc <RemovePortButton+0x9c>
 8007efe:	46c0      	nop			; (mov r8, r8)
 8007f00:	20000ce4 	.word	0x20000ce4
 8007f04:	40013800 	.word	0x40013800
 8007f08:	40004400 	.word	0x40004400
 8007f0c:	40004800 	.word	0x40004800
 8007f10:	40004c00 	.word	0x40004c00
 8007f14:	40005000 	.word	0x40005000
 8007f18:	40011400 	.word	0x40011400
 8007f1c:	40011800 	.word	0x40011800
 8007f20:	40011c00 	.word	0x40011c00
 8007f24:	20000918 	.word	0x20000918
 8007f28:	20000680 	.word	0x20000680

08007f2c <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 8007f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f2e:	46de      	mov	lr, fp
 8007f30:	4657      	mov	r7, sl
 8007f32:	464e      	mov	r6, r9
 8007f34:	4645      	mov	r5, r8
 8007f36:	b5e0      	push	{r5, r6, r7, lr}
 8007f38:	b085      	sub	sp, #20
 8007f3a:	0004      	movs	r4, r0
 8007f3c:	469c      	mov	ip, r3
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	ab0e      	add	r3, sp, #56	; 0x38
 8007f42:	781f      	ldrb	r7, [r3, #0]
 8007f44:	ab0f      	add	r3, sp, #60	; 0x3c
 8007f46:	781e      	ldrb	r6, [r3, #0]
 8007f48:	ab10      	add	r3, sp, #64	; 0x40
 8007f4a:	7818      	ldrb	r0, [r3, #0]
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	ab11      	add	r3, sp, #68	; 0x44
 8007f50:	7818      	ldrb	r0, [r3, #0]
 8007f52:	4681      	mov	r9, r0
 8007f54:	ab12      	add	r3, sp, #72	; 0x48
 8007f56:	7818      	ldrb	r0, [r3, #0]
 8007f58:	4680      	mov	r8, r0
 8007f5a:	ab13      	add	r3, sp, #76	; 0x4c
 8007f5c:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 8007f5e:	00e5      	lsls	r5, r4, #3
 8007f60:	192d      	adds	r5, r5, r4
 8007f62:	48b7      	ldr	r0, [pc, #732]	; (8008240 <SetButtonEvents+0x314>)
 8007f64:	1940      	adds	r0, r0, r5
 8007f66:	7840      	ldrb	r0, [r0, #1]
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d100      	bne.n	8007f6e <SetButtonEvents+0x42>
 8007f6c:	e164      	b.n	8008238 <SetButtonEvents+0x30c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 8007f6e:	00e5      	lsls	r5, r4, #3
 8007f70:	192d      	adds	r5, r5, r4
 8007f72:	48b3      	ldr	r0, [pc, #716]	; (8008240 <SetButtonEvents+0x314>)
 8007f74:	1940      	adds	r0, r0, r5
 8007f76:	4665      	mov	r5, ip
 8007f78:	7085      	strb	r5, [r0, #2]
 8007f7a:	70c7      	strb	r7, [r0, #3]
 8007f7c:	7106      	strb	r6, [r0, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 8007f7e:	4655      	mov	r5, sl
 8007f80:	7145      	strb	r5, [r0, #5]
 8007f82:	464d      	mov	r5, r9
 8007f84:	7185      	strb	r5, [r0, #6]
 8007f86:	4645      	mov	r5, r8
 8007f88:	71c5      	strb	r5, [r0, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d005      	beq.n	8007f9a <SetButtonEvents+0x6e>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d000      	beq.n	8007f94 <SetButtonEvents+0x68>
 8007f92:	e0d3      	b.n	800813c <SetButtonEvents+0x210>
 8007f94:	2900      	cmp	r1, #0
 8007f96:	d100      	bne.n	8007f9a <SetButtonEvents+0x6e>
 8007f98:	e0d0      	b.n	800813c <SetButtonEvents+0x210>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8007f9a:	00e0      	lsls	r0, r4, #3
 8007f9c:	1900      	adds	r0, r0, r4
 8007f9e:	49a8      	ldr	r1, [pc, #672]	; (8008240 <SetButtonEvents+0x314>)
 8007fa0:	1809      	adds	r1, r1, r0
 8007fa2:	7a08      	ldrb	r0, [r1, #8]
 8007fa4:	2501      	movs	r5, #1
 8007fa6:	4328      	orrs	r0, r5
 8007fa8:	7208      	strb	r0, [r1, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d005      	beq.n	8007fba <SetButtonEvents+0x8e>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d000      	beq.n	8007fb4 <SetButtonEvents+0x88>
 8007fb2:	e0cf      	b.n	8008154 <SetButtonEvents+0x228>
 8007fb4:	2a00      	cmp	r2, #0
 8007fb6:	d100      	bne.n	8007fba <SetButtonEvents+0x8e>
 8007fb8:	e0cc      	b.n	8008154 <SetButtonEvents+0x228>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8007fba:	00e1      	lsls	r1, r4, #3
 8007fbc:	1909      	adds	r1, r1, r4
 8007fbe:	4aa0      	ldr	r2, [pc, #640]	; (8008240 <SetButtonEvents+0x314>)
 8007fc0:	1852      	adds	r2, r2, r1
 8007fc2:	7a11      	ldrb	r1, [r2, #8]
 8007fc4:	2002      	movs	r0, #2
 8007fc6:	4301      	orrs	r1, r0
 8007fc8:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d006      	beq.n	8007fdc <SetButtonEvents+0xb0>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d000      	beq.n	8007fd4 <SetButtonEvents+0xa8>
 8007fd2:	e0cb      	b.n	800816c <SetButtonEvents+0x240>
 8007fd4:	9a00      	ldr	r2, [sp, #0]
 8007fd6:	2a00      	cmp	r2, #0
 8007fd8:	d100      	bne.n	8007fdc <SetButtonEvents+0xb0>
 8007fda:	e0c7      	b.n	800816c <SetButtonEvents+0x240>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8007fdc:	00e1      	lsls	r1, r4, #3
 8007fde:	1909      	adds	r1, r1, r4
 8007fe0:	4a97      	ldr	r2, [pc, #604]	; (8008240 <SetButtonEvents+0x314>)
 8007fe2:	1852      	adds	r2, r2, r1
 8007fe4:	7a11      	ldrb	r1, [r2, #8]
 8007fe6:	2004      	movs	r0, #4
 8007fe8:	4301      	orrs	r1, r0
 8007fea:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d005      	beq.n	8007ffc <SetButtonEvents+0xd0>
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d000      	beq.n	8007ff6 <SetButtonEvents+0xca>
 8007ff4:	e0c7      	b.n	8008186 <SetButtonEvents+0x25a>
 8007ff6:	2f00      	cmp	r7, #0
 8007ff8:	d100      	bne.n	8007ffc <SetButtonEvents+0xd0>
 8007ffa:	e0c4      	b.n	8008186 <SetButtonEvents+0x25a>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8007ffc:	00e1      	lsls	r1, r4, #3
 8007ffe:	1909      	adds	r1, r1, r4
 8008000:	4a8f      	ldr	r2, [pc, #572]	; (8008240 <SetButtonEvents+0x314>)
 8008002:	1852      	adds	r2, r2, r1
 8008004:	7a11      	ldrb	r1, [r2, #8]
 8008006:	2008      	movs	r0, #8
 8008008:	4301      	orrs	r1, r0
 800800a:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 800800c:	2b01      	cmp	r3, #1
 800800e:	d005      	beq.n	800801c <SetButtonEvents+0xf0>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d000      	beq.n	8008016 <SetButtonEvents+0xea>
 8008014:	e0c4      	b.n	80081a0 <SetButtonEvents+0x274>
 8008016:	2e00      	cmp	r6, #0
 8008018:	d100      	bne.n	800801c <SetButtonEvents+0xf0>
 800801a:	e0c1      	b.n	80081a0 <SetButtonEvents+0x274>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800801c:	00e1      	lsls	r1, r4, #3
 800801e:	1909      	adds	r1, r1, r4
 8008020:	4a87      	ldr	r2, [pc, #540]	; (8008240 <SetButtonEvents+0x314>)
 8008022:	1852      	adds	r2, r2, r1
 8008024:	7a11      	ldrb	r1, [r2, #8]
 8008026:	2010      	movs	r0, #16
 8008028:	4301      	orrs	r1, r0
 800802a:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 800802c:	2b01      	cmp	r3, #1
 800802e:	d006      	beq.n	800803e <SetButtonEvents+0x112>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d000      	beq.n	8008036 <SetButtonEvents+0x10a>
 8008034:	e0c1      	b.n	80081ba <SetButtonEvents+0x28e>
 8008036:	4652      	mov	r2, sl
 8008038:	2a00      	cmp	r2, #0
 800803a:	d100      	bne.n	800803e <SetButtonEvents+0x112>
 800803c:	e0bd      	b.n	80081ba <SetButtonEvents+0x28e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800803e:	00e1      	lsls	r1, r4, #3
 8008040:	1909      	adds	r1, r1, r4
 8008042:	4a7f      	ldr	r2, [pc, #508]	; (8008240 <SetButtonEvents+0x314>)
 8008044:	1852      	adds	r2, r2, r1
 8008046:	7a11      	ldrb	r1, [r2, #8]
 8008048:	2020      	movs	r0, #32
 800804a:	4301      	orrs	r1, r0
 800804c:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 800804e:	2b01      	cmp	r3, #1
 8008050:	d006      	beq.n	8008060 <SetButtonEvents+0x134>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d000      	beq.n	8008058 <SetButtonEvents+0x12c>
 8008056:	e0bd      	b.n	80081d4 <SetButtonEvents+0x2a8>
 8008058:	464a      	mov	r2, r9
 800805a:	2a00      	cmp	r2, #0
 800805c:	d100      	bne.n	8008060 <SetButtonEvents+0x134>
 800805e:	e0b9      	b.n	80081d4 <SetButtonEvents+0x2a8>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008060:	00e1      	lsls	r1, r4, #3
 8008062:	1909      	adds	r1, r1, r4
 8008064:	4a76      	ldr	r2, [pc, #472]	; (8008240 <SetButtonEvents+0x314>)
 8008066:	1852      	adds	r2, r2, r1
 8008068:	7a11      	ldrb	r1, [r2, #8]
 800806a:	2040      	movs	r0, #64	; 0x40
 800806c:	4301      	orrs	r1, r0
 800806e:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008070:	2b01      	cmp	r3, #1
 8008072:	d006      	beq.n	8008082 <SetButtonEvents+0x156>
 8008074:	2b00      	cmp	r3, #0
 8008076:	d000      	beq.n	800807a <SetButtonEvents+0x14e>
 8008078:	e0b9      	b.n	80081ee <SetButtonEvents+0x2c2>
 800807a:	4642      	mov	r2, r8
 800807c:	2a00      	cmp	r2, #0
 800807e:	d100      	bne.n	8008082 <SetButtonEvents+0x156>
 8008080:	e0b5      	b.n	80081ee <SetButtonEvents+0x2c2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 8008082:	00e2      	lsls	r2, r4, #3
 8008084:	1912      	adds	r2, r2, r4
 8008086:	4b6e      	ldr	r3, [pc, #440]	; (8008240 <SetButtonEvents+0x314>)
 8008088:	189b      	adds	r3, r3, r2
 800808a:	7a19      	ldrb	r1, [r3, #8]
 800808c:	2280      	movs	r2, #128	; 0x80
 800808e:	4252      	negs	r2, r2
 8008090:	430a      	orrs	r2, r1
 8008092:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
	}
	
	/* Add to EEPROM */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008094:	0025      	movs	r5, r4
 8008096:	353a      	adds	r5, #58	; 0x3a
 8008098:	00ad      	lsls	r5, r5, #2
 800809a:	ab02      	add	r3, sp, #8
 800809c:	1d99      	adds	r1, r3, #6
 800809e:	0028      	movs	r0, r5
 80080a0:	f7fe ff12 	bl	8006ec8 <EE_ReadVariable>
	if(!res)																														// This variable exists
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d000      	beq.n	80080aa <SetButtonEvents+0x17e>
 80080a8:	e0c8      	b.n	800823c <SetButtonEvents+0x310>
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 80080aa:	ab02      	add	r3, sp, #8
 80080ac:	3306      	adds	r3, #6
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	0a19      	lsrs	r1, r3, #8
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	00e2      	lsls	r2, r4, #3
 80080b6:	1912      	adds	r2, r2, r4
 80080b8:	4861      	ldr	r0, [pc, #388]	; (8008240 <SetButtonEvents+0x314>)
 80080ba:	1880      	adds	r0, r0, r2
 80080bc:	7a02      	ldrb	r2, [r0, #8]
 80080be:	4293      	cmp	r3, r2
 80080c0:	d000      	beq.n	80080c4 <SetButtonEvents+0x198>
 80080c2:	e0a1      	b.n	8008208 <SetButtonEvents+0x2dc>
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 80080c4:	1c6a      	adds	r2, r5, #1
 80080c6:	2306      	movs	r3, #6
 80080c8:	a902      	add	r1, sp, #8
 80080ca:	468c      	mov	ip, r1
 80080cc:	4463      	add	r3, ip
 80080ce:	469b      	mov	fp, r3
 80080d0:	0019      	movs	r1, r3
 80080d2:	9201      	str	r2, [sp, #4]
 80080d4:	0010      	movs	r0, r2
 80080d6:	f7fe fef7 	bl	8006ec8 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 80080da:	465b      	mov	r3, fp
 80080dc:	881a      	ldrh	r2, [r3, #0]
 80080de:	9b00      	ldr	r3, [sp, #0]
 80080e0:	021c      	lsls	r4, r3, #8
 80080e2:	4653      	mov	r3, sl
 80080e4:	4323      	orrs	r3, r4
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d000      	beq.n	80080ec <SetButtonEvents+0x1c0>
 80080ea:	e095      	b.n	8008218 <SetButtonEvents+0x2ec>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 80080ec:	1cac      	adds	r4, r5, #2
 80080ee:	2306      	movs	r3, #6
 80080f0:	aa02      	add	r2, sp, #8
 80080f2:	4694      	mov	ip, r2
 80080f4:	4463      	add	r3, ip
 80080f6:	469a      	mov	sl, r3
 80080f8:	0019      	movs	r1, r3
 80080fa:	0020      	movs	r0, r4
 80080fc:	f7fe fee4 	bl	8006ec8 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8008100:	4653      	mov	r3, sl
 8008102:	881a      	ldrh	r2, [r3, #0]
 8008104:	023f      	lsls	r7, r7, #8
 8008106:	464b      	mov	r3, r9
 8008108:	433b      	orrs	r3, r7
 800810a:	429a      	cmp	r2, r3
 800810c:	d000      	beq.n	8008110 <SetButtonEvents+0x1e4>
 800810e:	e088      	b.n	8008222 <SetButtonEvents+0x2f6>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008110:	3503      	adds	r5, #3
 8008112:	ab02      	add	r3, sp, #8
 8008114:	1d9c      	adds	r4, r3, #6
 8008116:	0021      	movs	r1, r4
 8008118:	0028      	movs	r0, r5
 800811a:	f7fe fed5 	bl	8006ec8 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 800811e:	8822      	ldrh	r2, [r4, #0]
 8008120:	0236      	lsls	r6, r6, #8
 8008122:	4643      	mov	r3, r8
 8008124:	4333      	orrs	r3, r6
 8008126:	429a      	cmp	r2, r3
 8008128:	d000      	beq.n	800812c <SetButtonEvents+0x200>
 800812a:	e07f      	b.n	800822c <SetButtonEvents+0x300>
	}	// TODO - var does not exist after adding button!
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
 800812c:	2000      	movs	r0, #0
}
 800812e:	b005      	add	sp, #20
 8008130:	bcf0      	pop	{r4, r5, r6, r7}
 8008132:	46bb      	mov	fp, r7
 8008134:	46b2      	mov	sl, r6
 8008136:	46a9      	mov	r9, r5
 8008138:	46a0      	mov	r8, r4
 800813a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
 800813c:	4319      	orrs	r1, r3
 800813e:	d000      	beq.n	8008142 <SetButtonEvents+0x216>
 8008140:	e733      	b.n	8007faa <SetButtonEvents+0x7e>
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8008142:	00e0      	lsls	r0, r4, #3
 8008144:	1900      	adds	r0, r0, r4
 8008146:	493e      	ldr	r1, [pc, #248]	; (8008240 <SetButtonEvents+0x314>)
 8008148:	1809      	adds	r1, r1, r0
 800814a:	7a08      	ldrb	r0, [r1, #8]
 800814c:	2501      	movs	r5, #1
 800814e:	43a8      	bics	r0, r5
 8008150:	7208      	strb	r0, [r1, #8]
 8008152:	e72a      	b.n	8007faa <SetButtonEvents+0x7e>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
 8008154:	431a      	orrs	r2, r3
 8008156:	d000      	beq.n	800815a <SetButtonEvents+0x22e>
 8008158:	e737      	b.n	8007fca <SetButtonEvents+0x9e>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 800815a:	00e1      	lsls	r1, r4, #3
 800815c:	1909      	adds	r1, r1, r4
 800815e:	4a38      	ldr	r2, [pc, #224]	; (8008240 <SetButtonEvents+0x314>)
 8008160:	1852      	adds	r2, r2, r1
 8008162:	7a11      	ldrb	r1, [r2, #8]
 8008164:	2002      	movs	r0, #2
 8008166:	4381      	bics	r1, r0
 8008168:	7211      	strb	r1, [r2, #8]
 800816a:	e72e      	b.n	8007fca <SetButtonEvents+0x9e>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
 800816c:	9a00      	ldr	r2, [sp, #0]
 800816e:	431a      	orrs	r2, r3
 8008170:	d000      	beq.n	8008174 <SetButtonEvents+0x248>
 8008172:	e73b      	b.n	8007fec <SetButtonEvents+0xc0>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8008174:	00e1      	lsls	r1, r4, #3
 8008176:	1909      	adds	r1, r1, r4
 8008178:	4a31      	ldr	r2, [pc, #196]	; (8008240 <SetButtonEvents+0x314>)
 800817a:	1852      	adds	r2, r2, r1
 800817c:	7a11      	ldrb	r1, [r2, #8]
 800817e:	2004      	movs	r0, #4
 8008180:	4381      	bics	r1, r0
 8008182:	7211      	strb	r1, [r2, #8]
 8008184:	e732      	b.n	8007fec <SetButtonEvents+0xc0>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
 8008186:	003a      	movs	r2, r7
 8008188:	431a      	orrs	r2, r3
 800818a:	d000      	beq.n	800818e <SetButtonEvents+0x262>
 800818c:	e73e      	b.n	800800c <SetButtonEvents+0xe0>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 800818e:	00e1      	lsls	r1, r4, #3
 8008190:	1909      	adds	r1, r1, r4
 8008192:	4a2b      	ldr	r2, [pc, #172]	; (8008240 <SetButtonEvents+0x314>)
 8008194:	1852      	adds	r2, r2, r1
 8008196:	7a11      	ldrb	r1, [r2, #8]
 8008198:	2008      	movs	r0, #8
 800819a:	4381      	bics	r1, r0
 800819c:	7211      	strb	r1, [r2, #8]
 800819e:	e735      	b.n	800800c <SetButtonEvents+0xe0>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
 80081a0:	0032      	movs	r2, r6
 80081a2:	431a      	orrs	r2, r3
 80081a4:	d000      	beq.n	80081a8 <SetButtonEvents+0x27c>
 80081a6:	e741      	b.n	800802c <SetButtonEvents+0x100>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 80081a8:	00e1      	lsls	r1, r4, #3
 80081aa:	1909      	adds	r1, r1, r4
 80081ac:	4a24      	ldr	r2, [pc, #144]	; (8008240 <SetButtonEvents+0x314>)
 80081ae:	1852      	adds	r2, r2, r1
 80081b0:	7a11      	ldrb	r1, [r2, #8]
 80081b2:	2010      	movs	r0, #16
 80081b4:	4381      	bics	r1, r0
 80081b6:	7211      	strb	r1, [r2, #8]
 80081b8:	e738      	b.n	800802c <SetButtonEvents+0x100>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
 80081ba:	4652      	mov	r2, sl
 80081bc:	431a      	orrs	r2, r3
 80081be:	d000      	beq.n	80081c2 <SetButtonEvents+0x296>
 80081c0:	e745      	b.n	800804e <SetButtonEvents+0x122>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 80081c2:	00e1      	lsls	r1, r4, #3
 80081c4:	1909      	adds	r1, r1, r4
 80081c6:	4a1e      	ldr	r2, [pc, #120]	; (8008240 <SetButtonEvents+0x314>)
 80081c8:	1852      	adds	r2, r2, r1
 80081ca:	7a11      	ldrb	r1, [r2, #8]
 80081cc:	2020      	movs	r0, #32
 80081ce:	4381      	bics	r1, r0
 80081d0:	7211      	strb	r1, [r2, #8]
 80081d2:	e73c      	b.n	800804e <SetButtonEvents+0x122>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
 80081d4:	464a      	mov	r2, r9
 80081d6:	431a      	orrs	r2, r3
 80081d8:	d000      	beq.n	80081dc <SetButtonEvents+0x2b0>
 80081da:	e749      	b.n	8008070 <SetButtonEvents+0x144>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 80081dc:	00e1      	lsls	r1, r4, #3
 80081de:	1909      	adds	r1, r1, r4
 80081e0:	4a17      	ldr	r2, [pc, #92]	; (8008240 <SetButtonEvents+0x314>)
 80081e2:	1852      	adds	r2, r2, r1
 80081e4:	7a11      	ldrb	r1, [r2, #8]
 80081e6:	2040      	movs	r0, #64	; 0x40
 80081e8:	4381      	bics	r1, r0
 80081ea:	7211      	strb	r1, [r2, #8]
 80081ec:	e740      	b.n	8008070 <SetButtonEvents+0x144>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
 80081ee:	4642      	mov	r2, r8
 80081f0:	4313      	orrs	r3, r2
 80081f2:	d000      	beq.n	80081f6 <SetButtonEvents+0x2ca>
 80081f4:	e74e      	b.n	8008094 <SetButtonEvents+0x168>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 80081f6:	00e2      	lsls	r2, r4, #3
 80081f8:	1912      	adds	r2, r2, r4
 80081fa:	4b11      	ldr	r3, [pc, #68]	; (8008240 <SetButtonEvents+0x314>)
 80081fc:	189b      	adds	r3, r3, r2
 80081fe:	7a19      	ldrb	r1, [r3, #8]
 8008200:	227f      	movs	r2, #127	; 0x7f
 8008202:	400a      	ands	r2, r1
 8008204:	721a      	strb	r2, [r3, #8]
 8008206:	e745      	b.n	8008094 <SetButtonEvents+0x168>
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008208:	0209      	lsls	r1, r1, #8
 800820a:	4311      	orrs	r1, r2
 800820c:	ab02      	add	r3, sp, #8
 800820e:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008210:	0028      	movs	r0, r5
 8008212:	f7fe ff0b 	bl	800702c <EE_WriteVariable>
 8008216:	e755      	b.n	80080c4 <SetButtonEvents+0x198>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8008218:	0019      	movs	r1, r3
 800821a:	9801      	ldr	r0, [sp, #4]
 800821c:	f7fe ff06 	bl	800702c <EE_WriteVariable>
 8008220:	e764      	b.n	80080ec <SetButtonEvents+0x1c0>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 8008222:	0019      	movs	r1, r3
 8008224:	0020      	movs	r0, r4
 8008226:	f7fe ff01 	bl	800702c <EE_WriteVariable>
 800822a:	e771      	b.n	8008110 <SetButtonEvents+0x1e4>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 800822c:	0019      	movs	r1, r3
 800822e:	0028      	movs	r0, r5
 8008230:	f7fe fefc 	bl	800702c <EE_WriteVariable>
	return result;
 8008234:	2000      	movs	r0, #0
 8008236:	e77a      	b.n	800812e <SetButtonEvents+0x202>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008238:	200b      	movs	r0, #11
 800823a:	e778      	b.n	800812e <SetButtonEvents+0x202>
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 800823c:	200b      	movs	r0, #11
 800823e:	e776      	b.n	800812e <SetButtonEvents+0x202>
 8008240:	20000ce4 	.word	0x20000ce4

08008244 <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 8008244:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8008246:	f007 ff70 	bl	801012a <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800824a:	b2c4      	uxtb	r4, r0
 800824c:	0020      	movs	r0, r4
 800824e:	f7fe fcdb 	bl	8006c08 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8008252:	0020      	movs	r0, r4
 8008254:	f7fe fd06 	bl	8006c64 <SwitchStreamDMAToMsg>
}
 8008258:	bd10      	pop	{r4, pc}
	...

0800825c <SetupDMAStreams>:
{
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	0005      	movs	r5, r0
 8008262:	000c      	movs	r4, r1
 8008264:	0016      	movs	r6, r2
 8008266:	220f      	movs	r2, #15
 8008268:	446a      	add	r2, sp
 800826a:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800826c:	0018      	movs	r0, r3
 800826e:	ab08      	add	r3, sp, #32
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	4298      	cmp	r0, r3
 8008274:	d00d      	beq.n	8008292 <SetupDMAStreams+0x36>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8008276:	2800      	cmp	r0, #0
 8008278:	d100      	bne.n	800827c <SetupDMAStreams+0x20>
 800827a:	e0b8      	b.n	80083ee <SetupDMAStreams+0x192>
 800827c:	2b00      	cmp	r3, #0
 800827e:	d100      	bne.n	8008282 <SetupDMAStreams+0x26>
 8008280:	e0b8      	b.n	80083f4 <SetupDMAStreams+0x198>
	if (direction == FORWARD) 
 8008282:	2d00      	cmp	r5, #0
 8008284:	d00a      	beq.n	800829c <SetupDMAStreams+0x40>
	else if (direction == BACKWARD) 
 8008286:	2d01      	cmp	r5, #1
 8008288:	d040      	beq.n	800830c <SetupDMAStreams+0xb0>
	else if (direction == BIDIRECTIONAL) 
 800828a:	2d02      	cmp	r5, #2
 800828c:	d068      	beq.n	8008360 <SetupDMAStreams+0x104>
		return BOS_ERR_WrongParam;
 800828e:	2067      	movs	r0, #103	; 0x67
 8008290:	e0ae      	b.n	80083f0 <SetupDMAStreams+0x194>
		portStatus[src] = STREAM;
 8008292:	4b5a      	ldr	r3, [pc, #360]	; (80083fc <SetupDMAStreams+0x1a0>)
 8008294:	2202      	movs	r2, #2
 8008296:	541a      	strb	r2, [r3, r0]
		return BOS_ERR_WrongParam;
 8008298:	2067      	movs	r0, #103	; 0x67
 800829a:	e0a9      	b.n	80083f0 <SetupDMAStreams+0x194>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 800829c:	f005 ff5a 	bl	800e154 <GetUart>
 80082a0:	0005      	movs	r5, r0
 80082a2:	ab08      	add	r3, sp, #32
 80082a4:	7818      	ldrb	r0, [r3, #0]
 80082a6:	f005 ff55 	bl	800e154 <GetUart>
 80082aa:	0001      	movs	r1, r0
 80082ac:	2201      	movs	r2, #1
 80082ae:	0028      	movs	r0, r5
 80082b0:	f7fe fd0e 	bl	8006cd0 <StartDMAstream>
 80082b4:	2817      	cmp	r0, #23
 80082b6:	d100      	bne.n	80082ba <SetupDMAStreams+0x5e>
 80082b8:	e09a      	b.n	80083f0 <SetupDMAStreams+0x194>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 80082ba:	0170      	lsls	r0, r6, #5
 80082bc:	1b80      	subs	r0, r0, r6
 80082be:	0080      	lsls	r0, r0, #2
 80082c0:	1980      	adds	r0, r0, r6
 80082c2:	00c0      	lsls	r0, r0, #3
 80082c4:	260f      	movs	r6, #15
 80082c6:	446e      	add	r6, sp
 80082c8:	21fa      	movs	r1, #250	; 0xfa
 80082ca:	0089      	lsls	r1, r1, #2
 80082cc:	f7f7 ff40 	bl	8000150 <__udivsi3>
 80082d0:	0001      	movs	r1, r0
 80082d2:	4b4b      	ldr	r3, [pc, #300]	; (8008400 <SetupDMAStreams+0x1a4>)
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	0033      	movs	r3, r6
 80082d8:	2200      	movs	r2, #0
 80082da:	484a      	ldr	r0, [pc, #296]	; (8008404 <SetupDMAStreams+0x1a8>)
 80082dc:	f007 fdc8 	bl	800fe70 <xTimerCreate>
 80082e0:	0005      	movs	r5, r0
		dmaStreamTotal[src-1] = count;
 80082e2:	7833      	ldrb	r3, [r6, #0]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4a47      	ldr	r2, [pc, #284]	; (8008408 <SetupDMAStreams+0x1ac>)
 80082ea:	509c      	str	r4, [r3, r2]
	if (xTimerStream != NULL)
 80082ec:	2d00      	cmp	r5, #0
 80082ee:	d100      	bne.n	80082f2 <SetupDMAStreams+0x96>
 80082f0:	e082      	b.n	80083f8 <SetupDMAStreams+0x19c>
		xTimerStart( xTimerStream, portMAX_DELAY );
 80082f2:	f007 f843 	bl	800f37c <xTaskGetTickCount>
 80082f6:	0002      	movs	r2, r0
 80082f8:	2301      	movs	r3, #1
 80082fa:	425b      	negs	r3, r3
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	2300      	movs	r3, #0
 8008300:	2101      	movs	r1, #1
 8008302:	0028      	movs	r0, r5
 8008304:	f007 fdd8 	bl	800feb8 <xTimerGenericCommand>
	return BOS_OK;
 8008308:	2000      	movs	r0, #0
 800830a:	e071      	b.n	80083f0 <SetupDMAStreams+0x194>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 800830c:	0018      	movs	r0, r3
 800830e:	f005 ff21 	bl	800e154 <GetUart>
 8008312:	0005      	movs	r5, r0
 8008314:	230f      	movs	r3, #15
 8008316:	446b      	add	r3, sp
 8008318:	7818      	ldrb	r0, [r3, #0]
 800831a:	f005 ff1b 	bl	800e154 <GetUart>
 800831e:	0001      	movs	r1, r0
 8008320:	2201      	movs	r2, #1
 8008322:	0028      	movs	r0, r5
 8008324:	f7fe fcd4 	bl	8006cd0 <StartDMAstream>
 8008328:	2817      	cmp	r0, #23
 800832a:	d061      	beq.n	80083f0 <SetupDMAStreams+0x194>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 800832c:	0170      	lsls	r0, r6, #5
 800832e:	1b80      	subs	r0, r0, r6
 8008330:	0080      	lsls	r0, r0, #2
 8008332:	1980      	adds	r0, r0, r6
 8008334:	00c0      	lsls	r0, r0, #3
 8008336:	21fa      	movs	r1, #250	; 0xfa
 8008338:	0089      	lsls	r1, r1, #2
 800833a:	f7f7 ff09 	bl	8000150 <__udivsi3>
 800833e:	0001      	movs	r1, r0
 8008340:	4b2f      	ldr	r3, [pc, #188]	; (8008400 <SetupDMAStreams+0x1a4>)
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	ab08      	add	r3, sp, #32
 8008346:	2200      	movs	r2, #0
 8008348:	482e      	ldr	r0, [pc, #184]	; (8008404 <SetupDMAStreams+0x1a8>)
 800834a:	f007 fd91 	bl	800fe70 <xTimerCreate>
 800834e:	0005      	movs	r5, r0
		dmaStreamTotal[src-1] = count;
 8008350:	230f      	movs	r3, #15
 8008352:	446b      	add	r3, sp
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	3b01      	subs	r3, #1
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4a2b      	ldr	r2, [pc, #172]	; (8008408 <SetupDMAStreams+0x1ac>)
 800835c:	509c      	str	r4, [r3, r2]
 800835e:	e7c5      	b.n	80082ec <SetupDMAStreams+0x90>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 8008360:	f005 fef8 	bl	800e154 <GetUart>
 8008364:	0005      	movs	r5, r0
 8008366:	ab08      	add	r3, sp, #32
 8008368:	7818      	ldrb	r0, [r3, #0]
 800836a:	f005 fef3 	bl	800e154 <GetUart>
 800836e:	0001      	movs	r1, r0
 8008370:	2201      	movs	r2, #1
 8008372:	0028      	movs	r0, r5
 8008374:	f7fe fcac 	bl	8006cd0 <StartDMAstream>
 8008378:	2817      	cmp	r0, #23
 800837a:	d039      	beq.n	80083f0 <SetupDMAStreams+0x194>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 800837c:	0170      	lsls	r0, r6, #5
 800837e:	1b80      	subs	r0, r0, r6
 8008380:	0080      	lsls	r0, r0, #2
 8008382:	1980      	adds	r0, r0, r6
 8008384:	00c0      	lsls	r0, r0, #3
 8008386:	21fa      	movs	r1, #250	; 0xfa
 8008388:	0089      	lsls	r1, r1, #2
 800838a:	f7f7 fee1 	bl	8000150 <__udivsi3>
 800838e:	0005      	movs	r5, r0
 8008390:	4b1b      	ldr	r3, [pc, #108]	; (8008400 <SetupDMAStreams+0x1a4>)
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	230f      	movs	r3, #15
 8008396:	446b      	add	r3, sp
 8008398:	2200      	movs	r2, #0
 800839a:	0001      	movs	r1, r0
 800839c:	4819      	ldr	r0, [pc, #100]	; (8008404 <SetupDMAStreams+0x1a8>)
 800839e:	f007 fd67 	bl	800fe70 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 80083a2:	466b      	mov	r3, sp
 80083a4:	7bdb      	ldrb	r3, [r3, #15]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4a17      	ldr	r2, [pc, #92]	; (8008408 <SetupDMAStreams+0x1ac>)
 80083ac:	509c      	str	r4, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80083ae:	ab08      	add	r3, sp, #32
 80083b0:	7818      	ldrb	r0, [r3, #0]
 80083b2:	f005 fecf 	bl	800e154 <GetUart>
 80083b6:	0006      	movs	r6, r0
 80083b8:	466b      	mov	r3, sp
 80083ba:	7bd8      	ldrb	r0, [r3, #15]
 80083bc:	f005 feca 	bl	800e154 <GetUart>
 80083c0:	0001      	movs	r1, r0
 80083c2:	2201      	movs	r2, #1
 80083c4:	0030      	movs	r0, r6
 80083c6:	f7fe fc83 	bl	8006cd0 <StartDMAstream>
 80083ca:	2817      	cmp	r0, #23
 80083cc:	d010      	beq.n	80083f0 <SetupDMAStreams+0x194>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 80083ce:	4b0c      	ldr	r3, [pc, #48]	; (8008400 <SetupDMAStreams+0x1a4>)
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	ab08      	add	r3, sp, #32
 80083d4:	2200      	movs	r2, #0
 80083d6:	0029      	movs	r1, r5
 80083d8:	480a      	ldr	r0, [pc, #40]	; (8008404 <SetupDMAStreams+0x1a8>)
 80083da:	f007 fd49 	bl	800fe70 <xTimerCreate>
 80083de:	0005      	movs	r5, r0
		dmaStreamTotal[dst-1] = count;
 80083e0:	ab08      	add	r3, sp, #32
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4a07      	ldr	r2, [pc, #28]	; (8008408 <SetupDMAStreams+0x1ac>)
 80083ea:	509c      	str	r4, [r3, r2]
 80083ec:	e77e      	b.n	80082ec <SetupDMAStreams+0x90>
		return BOS_ERR_WrongParam;
 80083ee:	2067      	movs	r0, #103	; 0x67
}
 80083f0:	b004      	add	sp, #16
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 80083f4:	2067      	movs	r0, #103	; 0x67
 80083f6:	e7fb      	b.n	80083f0 <SetupDMAStreams+0x194>
	return BOS_OK;
 80083f8:	2000      	movs	r0, #0
 80083fa:	e7f9      	b.n	80083f0 <SetupDMAStreams+0x194>
 80083fc:	20000918 	.word	0x20000918
 8008400:	08008245 	.word	0x08008245
 8008404:	0801aa78 	.word	0x0801aa78
 8008408:	20000ca4 	.word	0x20000ca4

0800840c <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 800840c:	b510      	push	{r4, lr}
	switch (port)
 800840e:	2805      	cmp	r0, #5
 8008410:	d80a      	bhi.n	8008428 <NotifyMessagingTask+0x1c>
 8008412:	0080      	lsls	r0, r0, #2
 8008414:	4b15      	ldr	r3, [pc, #84]	; (800846c <NotifyMessagingTask+0x60>)
 8008416:	581b      	ldr	r3, [r3, r0]
 8008418:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 800841a:	4b15      	ldr	r3, [pc, #84]	; (8008470 <NotifyMessagingTask+0x64>)
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	2300      	movs	r3, #0
 8008420:	2202      	movs	r2, #2
 8008422:	2100      	movs	r1, #0
 8008424:	f007 fc3c 	bl	800fca0 <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8008428:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 800842a:	4b12      	ldr	r3, [pc, #72]	; (8008474 <NotifyMessagingTask+0x68>)
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	2300      	movs	r3, #0
 8008430:	2202      	movs	r2, #2
 8008432:	2100      	movs	r1, #0
 8008434:	f007 fc34 	bl	800fca0 <xTaskGenericNotify>
 8008438:	e7f6      	b.n	8008428 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 800843a:	4b0f      	ldr	r3, [pc, #60]	; (8008478 <NotifyMessagingTask+0x6c>)
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	2300      	movs	r3, #0
 8008440:	2202      	movs	r2, #2
 8008442:	2100      	movs	r1, #0
 8008444:	f007 fc2c 	bl	800fca0 <xTaskGenericNotify>
 8008448:	e7ee      	b.n	8008428 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <NotifyMessagingTask+0x70>)
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	2300      	movs	r3, #0
 8008450:	2202      	movs	r2, #2
 8008452:	2100      	movs	r1, #0
 8008454:	f007 fc24 	bl	800fca0 <xTaskGenericNotify>
 8008458:	e7e6      	b.n	8008428 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 800845a:	4b09      	ldr	r3, [pc, #36]	; (8008480 <NotifyMessagingTask+0x74>)
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	2300      	movs	r3, #0
 8008460:	2202      	movs	r2, #2
 8008462:	2100      	movs	r1, #0
 8008464:	f007 fc1c 	bl	800fca0 <xTaskGenericNotify>
}
 8008468:	e7de      	b.n	8008428 <NotifyMessagingTask+0x1c>
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	0801aa84 	.word	0x0801aa84
 8008470:	20000cc0 	.word	0x20000cc0
 8008474:	20000cc4 	.word	0x20000cc4
 8008478:	20000cc8 	.word	0x20000cc8
 800847c:	20000ccc 	.word	0x20000ccc
 8008480:	20000cd0 	.word	0x20000cd0

08008484 <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 8008484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008486:	46de      	mov	lr, fp
 8008488:	4657      	mov	r7, sl
 800848a:	464e      	mov	r6, r9
 800848c:	4645      	mov	r5, r8
 800848e:	b5e0      	push	{r5, r6, r7, lr}
 8008490:	b085      	sub	sp, #20
 8008492:	0005      	movs	r5, r0
 8008494:	000f      	movs	r7, r1
 8008496:	0016      	movs	r6, r2
 8008498:	9302      	str	r3, [sp, #8]
 800849a:	ab0e      	add	r3, sp, #56	; 0x38
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	4699      	mov	r9, r3
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 80084a0:	0003      	movs	r3, r0
 80084a2:	4313      	orrs	r3, r2
 80084a4:	d100      	bne.n	80084a8 <SendMessageFromPort+0x24>
 80084a6:	e162      	b.n	800876e <SendMessageFromPort+0x2ea>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d104      	bne.n	80084b6 <SendMessageFromPort+0x32>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80084ac:	2aff      	cmp	r2, #255	; 0xff
 80084ae:	d002      	beq.n	80084b6 <SendMessageFromPort+0x32>
 80084b0:	2afe      	cmp	r2, #254	; 0xfe
 80084b2:	d000      	beq.n	80084b6 <SendMessageFromPort+0x32>
 80084b4:	e15d      	b.n	8008772 <SendMessageFromPort+0x2ee>
 80084b6:	2d00      	cmp	r5, #0
 80084b8:	d004      	beq.n	80084c4 <SendMessageFromPort+0x40>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 80084ba:	2f00      	cmp	r7, #0
 80084bc:	d002      	beq.n	80084c4 <SendMessageFromPort+0x40>
 80084be:	2e00      	cmp	r6, #0
 80084c0:	d100      	bne.n	80084c4 <SendMessageFromPort+0x40>
 80084c2:	e158      	b.n	8008776 <SendMessageFromPort+0x2f2>
		return BOS_ERR_WrongParam; 
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 80084c4:	2000      	movs	r0, #0
 80084c6:	f006 feb7 	bl	800f238 <uxTaskPriorityGet>
 80084ca:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 80084cc:	2105      	movs	r1, #5
 80084ce:	2000      	movs	r0, #0
 80084d0:	f006 fec2 	bl	800f258 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 80084d4:	4bac      	ldr	r3, [pc, #688]	; (8008788 <SendMessageFromPort+0x304>)
 80084d6:	2248      	movs	r2, #72	; 0x48
 80084d8:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 80084da:	3212      	adds	r2, #18
 80084dc:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80084de:	002b      	movs	r3, r5
 80084e0:	433b      	orrs	r3, r7
 80084e2:	d101      	bne.n	80084e8 <SendMessageFromPort+0x64>
 80084e4:	2efd      	cmp	r6, #253	; 0xfd
 80084e6:	d802      	bhi.n	80084ee <SendMessageFromPort+0x6a>
 80084e8:	9b02      	ldr	r3, [sp, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d135      	bne.n	800855a <SendMessageFromPort+0xd6>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 80084ee:	464b      	mov	r3, r9
 80084f0:	3b01      	subs	r3, #1
 80084f2:	4aa6      	ldr	r2, [pc, #664]	; (800878c <SendMessageFromPort+0x308>)
 80084f4:	5cd4      	ldrb	r4, [r2, r3]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 80084f6:	00d9      	lsls	r1, r3, #3
 80084f8:	1ac9      	subs	r1, r1, r3
 80084fa:	00c9      	lsls	r1, r1, #3
 80084fc:	4ba4      	ldr	r3, [pc, #656]	; (8008790 <SendMessageFromPort+0x30c>)
 80084fe:	18c9      	adds	r1, r1, r3
 8008500:	0022      	movs	r2, r4
 8008502:	48a4      	ldr	r0, [pc, #656]	; (8008794 <SendMessageFromPort+0x310>)
 8008504:	f00b f8ea 	bl	80136dc <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 8008508:	4b9f      	ldr	r3, [pc, #636]	; (8008788 <SendMessageFromPort+0x304>)
 800850a:	469a      	mov	sl, r3
 800850c:	709c      	strb	r4, [r3, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 800850e:	1ce3      	adds	r3, r4, #3
 8008510:	469b      	mov	fp, r3
 8008512:	4ba1      	ldr	r3, [pc, #644]	; (8008798 <SendMessageFromPort+0x314>)
 8008514:	4699      	mov	r9, r3
 8008516:	465a      	mov	r2, fp
 8008518:	4651      	mov	r1, sl
 800851a:	0018      	movs	r0, r3
 800851c:	f00b f8de 	bl	80136dc <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8008520:	b2a3      	uxth	r3, r4
 8008522:	4698      	mov	r8, r3
 8008524:	4659      	mov	r1, fp
 8008526:	4648      	mov	r0, r9
 8008528:	f005 f836 	bl	800d598 <CalculateCRC8>
 800852c:	4653      	mov	r3, sl
 800852e:	465a      	mov	r2, fp
 8008530:	5498      	strb	r0, [r3, r2]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 8008532:	2238      	movs	r2, #56	; 0x38
 8008534:	2100      	movs	r1, #0
 8008536:	4648      	mov	r0, r9
 8008538:	f00b f8d9 	bl	80136ee <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 800853c:	2efd      	cmp	r6, #253	; 0xfd
 800853e:	d800      	bhi.n	8008542 <SendMessageFromPort+0xbe>
 8008540:	e0e4      	b.n	800870c <SendMessageFromPort+0x288>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 8008542:	9b02      	ldr	r3, [sp, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d103      	bne.n	8008550 <SendMessageFromPort+0xcc>
 8008548:	2f00      	cmp	r7, #0
 800854a:	d101      	bne.n	8008550 <SendMessageFromPort+0xcc>
			src = message[4];
 800854c:	4b8e      	ldr	r3, [pc, #568]	; (8008788 <SendMessageFromPort+0x304>)
 800854e:	791f      	ldrb	r7, [r3, #4]
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8008550:	0038      	movs	r0, r7
 8008552:	f7fa fdef 	bl	8003134 <FindBroadcastRoutes>
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8008556:	2401      	movs	r4, #1
 8008558:	e0fc      	b.n	8008754 <SendMessageFromPort+0x2d0>
		if (src == 0)		src = myID;
 800855a:	2f00      	cmp	r7, #0
 800855c:	d101      	bne.n	8008562 <SendMessageFromPort+0xde>
 800855e:	4b8f      	ldr	r3, [pc, #572]	; (800879c <SendMessageFromPort+0x318>)
 8008560:	781f      	ldrb	r7, [r3, #0]
		if (code > 0xFF)	extendCode = true;
 8008562:	9b02      	ldr	r3, [sp, #8]
 8008564:	2bff      	cmp	r3, #255	; 0xff
 8008566:	d828      	bhi.n	80085ba <SendMessageFromPort+0x136>
	bool extendOptions = false, extendCode = false;
 8008568:	2100      	movs	r1, #0
		message[2] = length;	
 800856a:	4a87      	ldr	r2, [pc, #540]	; (8008788 <SendMessageFromPort+0x304>)
 800856c:	2300      	movs	r3, #0
 800856e:	7093      	strb	r3, [r2, #2]
		message[3] = dst;						
 8008570:	70d6      	strb	r6, [r2, #3]
		message[4] = src;
 8008572:	7117      	strb	r7, [r2, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8008574:	488a      	ldr	r0, [pc, #552]	; (80087a0 <SendMessageFromPort+0x31c>)
 8008576:	2306      	movs	r3, #6
 8008578:	56c3      	ldrsb	r3, [r0, r3]
 800857a:	79c0      	ldrb	r0, [r0, #7]
 800857c:	0080      	lsls	r0, r0, #2
 800857e:	4303      	orrs	r3, r0
 8008580:	b25b      	sxtb	r3, r3
 8008582:	0048      	lsls	r0, r1, #1
 8008584:	4303      	orrs	r3, r0
 8008586:	b2db      	uxtb	r3, r3
 8008588:	7153      	strb	r3, [r2, #5]
		message[6+shift] = (uint8_t) code;
 800858a:	9802      	ldr	r0, [sp, #8]
 800858c:	7190      	strb	r0, [r2, #6]
		if (extendCode == true) {
 800858e:	2900      	cmp	r1, #0
 8008590:	d015      	beq.n	80085be <SendMessageFromPort+0x13a>
			message[6+shift] = (uint8_t) (code >> 8);		
 8008592:	0a02      	lsrs	r2, r0, #8
 8008594:	497c      	ldr	r1, [pc, #496]	; (8008788 <SendMessageFromPort+0x304>)
 8008596:	71ca      	strb	r2, [r1, #7]
			++shift;
 8008598:	2201      	movs	r2, #1
 800859a:	4693      	mov	fp, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 800859c:	464a      	mov	r2, r9
 800859e:	2a2e      	cmp	r2, #46	; 0x2e
 80085a0:	d910      	bls.n	80085c4 <SendMessageFromPort+0x140>
			message[5] |= 0x80;		
 80085a2:	2280      	movs	r2, #128	; 0x80
 80085a4:	4252      	negs	r2, r2
 80085a6:	4313      	orrs	r3, r2
 80085a8:	4a77      	ldr	r2, [pc, #476]	; (8008788 <SendMessageFromPort+0x304>)
 80085aa:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 80085ac:	4b7d      	ldr	r3, [pc, #500]	; (80087a4 <SendMessageFromPort+0x320>)
 80085ae:	464a      	mov	r2, r9
 80085b0:	801a      	strh	r2, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
 80085b2:	2400      	movs	r4, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80085b4:	232e      	movs	r3, #46	; 0x2e
 80085b6:	4699      	mov	r9, r3
			while (totalNumberOfParams != 0)
 80085b8:	e038      	b.n	800862c <SendMessageFromPort+0x1a8>
		if (code > 0xFF)	extendCode = true;
 80085ba:	2101      	movs	r1, #1
 80085bc:	e7d5      	b.n	800856a <SendMessageFromPort+0xe6>
 80085be:	2200      	movs	r2, #0
 80085c0:	4693      	mov	fp, r2
 80085c2:	e7eb      	b.n	800859c <SendMessageFromPort+0x118>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80085c4:	465b      	mov	r3, fp
 80085c6:	3307      	adds	r3, #7
 80085c8:	486f      	ldr	r0, [pc, #444]	; (8008788 <SendMessageFromPort+0x304>)
 80085ca:	1818      	adds	r0, r3, r0
 80085cc:	4b76      	ldr	r3, [pc, #472]	; (80087a8 <SendMessageFromPort+0x324>)
 80085ce:	8819      	ldrh	r1, [r3, #0]
 80085d0:	4b76      	ldr	r3, [pc, #472]	; (80087ac <SendMessageFromPort+0x328>)
 80085d2:	18c9      	adds	r1, r1, r3
 80085d4:	f00b f882 	bl	80136dc <memcpy>
			length = numberOfParams + shift + 4;
 80085d8:	465c      	mov	r4, fp
 80085da:	444c      	add	r4, r9
 80085dc:	b2e4      	uxtb	r4, r4
 80085de:	3404      	adds	r4, #4
 80085e0:	b2e4      	uxtb	r4, r4
		if(AddBcastPayload == true)
 80085e2:	4b73      	ldr	r3, [pc, #460]	; (80087b0 <SendMessageFromPort+0x32c>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d08e      	beq.n	8008508 <SendMessageFromPort+0x84>
			if (dstGroupID < BOS_BROADCAST)
 80085ea:	4b72      	ldr	r3, [pc, #456]	; (80087b4 <SendMessageFromPort+0x330>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	4698      	mov	r8, r3
 80085f0:	2bff      	cmp	r3, #255	; 0xff
 80085f2:	d037      	beq.n	8008664 <SendMessageFromPort+0x1e0>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 80085f4:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 80085f6:	2100      	movs	r1, #0
 80085f8:	e038      	b.n	800866c <SendMessageFromPort+0x1e8>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 80085fa:	4863      	ldr	r0, [pc, #396]	; (8008788 <SendMessageFromPort+0x304>)
 80085fc:	7942      	ldrb	r2, [r0, #5]
 80085fe:	237f      	movs	r3, #127	; 0x7f
 8008600:	4013      	ands	r3, r2
 8008602:	7143      	strb	r3, [r0, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8008604:	465b      	mov	r3, fp
 8008606:	3307      	adds	r3, #7
 8008608:	1818      	adds	r0, r3, r0
 800860a:	4c67      	ldr	r4, [pc, #412]	; (80087a8 <SendMessageFromPort+0x324>)
 800860c:	8821      	ldrh	r1, [r4, #0]
 800860e:	4b67      	ldr	r3, [pc, #412]	; (80087ac <SendMessageFromPort+0x328>)
 8008610:	18c9      	adds	r1, r1, r3
 8008612:	4652      	mov	r2, sl
 8008614:	f00b f862 	bl	80136dc <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	8023      	strh	r3, [r4, #0]
 800861c:	4a61      	ldr	r2, [pc, #388]	; (80087a4 <SendMessageFromPort+0x320>)
 800861e:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 8008620:	465c      	mov	r4, fp
 8008622:	4454      	add	r4, sl
 8008624:	b2e4      	uxtb	r4, r4
 8008626:	3404      	adds	r4, #4
 8008628:	b2e4      	uxtb	r4, r4
					numberOfParams = totalNumberOfParams;
 800862a:	46d1      	mov	r9, sl
			while (totalNumberOfParams != 0)
 800862c:	4b5d      	ldr	r3, [pc, #372]	; (80087a4 <SendMessageFromPort+0x320>)
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	469a      	mov	sl, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0d5      	beq.n	80085e2 <SendMessageFromPort+0x15e>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 8008636:	45ca      	cmp	sl, r9
 8008638:	d3df      	bcc.n	80085fa <SendMessageFromPort+0x176>
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 800863a:	464b      	mov	r3, r9
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	9b02      	ldr	r3, [sp, #8]
 8008640:	0032      	movs	r2, r6
 8008642:	0039      	movs	r1, r7
 8008644:	0028      	movs	r0, r5
 8008646:	f7ff ff1d 	bl	8008484 <SendMessageFromPort>
					osDelay(10);
 800864a:	200a      	movs	r0, #10
 800864c:	f005 fed6 	bl	800e3fc <osDelay>
					totalNumberOfParams -= numberOfParams;
 8008650:	4a54      	ldr	r2, [pc, #336]	; (80087a4 <SendMessageFromPort+0x320>)
 8008652:	8813      	ldrh	r3, [r2, #0]
 8008654:	4649      	mov	r1, r9
 8008656:	1a5b      	subs	r3, r3, r1
 8008658:	8013      	strh	r3, [r2, #0]
					ptrShift += numberOfParams;
 800865a:	4a53      	ldr	r2, [pc, #332]	; (80087a8 <SendMessageFromPort+0x324>)
 800865c:	8813      	ldrh	r3, [r2, #0]
 800865e:	444b      	add	r3, r9
 8008660:	8013      	strh	r3, [r2, #0]
 8008662:	e7e3      	b.n	800862c <SendMessageFromPort+0x1a8>
			uint8_t groupMembers = 0;
 8008664:	2100      	movs	r1, #0
 8008666:	e022      	b.n	80086ae <SendMessageFromPort+0x22a>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8008668:	3301      	adds	r3, #1
 800866a:	b29b      	uxth	r3, r3
 800866c:	4852      	ldr	r0, [pc, #328]	; (80087b8 <SendMessageFromPort+0x334>)
 800866e:	7800      	ldrb	r0, [r0, #0]
 8008670:	4298      	cmp	r0, r3
 8008672:	d316      	bcc.n	80086a2 <SendMessageFromPort+0x21e>
					if (InGroup(i, dstGroupID))
 8008674:	1e58      	subs	r0, r3, #1
 8008676:	0040      	lsls	r0, r0, #1
 8008678:	4a50      	ldr	r2, [pc, #320]	; (80087bc <SendMessageFromPort+0x338>)
 800867a:	5a80      	ldrh	r0, [r0, r2]
 800867c:	4642      	mov	r2, r8
 800867e:	4110      	asrs	r0, r2
 8008680:	07c2      	lsls	r2, r0, #31
 8008682:	d5f1      	bpl.n	8008668 <SendMessageFromPort+0x1e4>
						++groupMembers;							// Add this member
 8008684:	3101      	adds	r1, #1
 8008686:	b2c9      	uxtb	r1, r1
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 8008688:	464a      	mov	r2, r9
 800868a:	1850      	adds	r0, r2, r1
 800868c:	282c      	cmp	r0, #44	; 0x2c
 800868e:	dd00      	ble.n	8008692 <SendMessageFromPort+0x20e>
 8008690:	e073      	b.n	800877a <SendMessageFromPort+0x2f6>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8008692:	465a      	mov	r2, fp
 8008694:	1dd0      	adds	r0, r2, #7
 8008696:	4448      	add	r0, r9
 8008698:	1808      	adds	r0, r1, r0
 800869a:	3801      	subs	r0, #1
 800869c:	4a3a      	ldr	r2, [pc, #232]	; (8008788 <SendMessageFromPort+0x304>)
 800869e:	5413      	strb	r3, [r2, r0]
 80086a0:	e7e2      	b.n	8008668 <SendMessageFromPort+0x1e4>
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 80086a2:	465b      	mov	r3, fp
 80086a4:	3307      	adds	r3, #7
 80086a6:	444b      	add	r3, r9
 80086a8:	18cb      	adds	r3, r1, r3
 80086aa:	4837      	ldr	r0, [pc, #220]	; (8008788 <SendMessageFromPort+0x304>)
 80086ac:	54c1      	strb	r1, [r0, r3]
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 80086ae:	4643      	mov	r3, r8
 80086b0:	2bff      	cmp	r3, #255	; 0xff
 80086b2:	d01a      	beq.n	80086ea <SendMessageFromPort+0x266>
			else if (dstGroupID == BOS_BROADCAST)
 80086b4:	4643      	mov	r3, r8
 80086b6:	2bff      	cmp	r3, #255	; 0xff
 80086b8:	d061      	beq.n	800877e <SendMessageFromPort+0x2fa>
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80086ba:	464b      	mov	r3, r9
 80086bc:	185b      	adds	r3, r3, r1
 80086be:	2b2b      	cmp	r3, #43	; 0x2b
 80086c0:	dc5f      	bgt.n	8008782 <SendMessageFromPort+0x2fe>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 80086c2:	4b3f      	ldr	r3, [pc, #252]	; (80087c0 <SendMessageFromPort+0x33c>)
 80086c4:	7818      	ldrb	r0, [r3, #0]
 80086c6:	3001      	adds	r0, #1
 80086c8:	b2c0      	uxtb	r0, r0
 80086ca:	7018      	strb	r0, [r3, #0]
 80086cc:	465b      	mov	r3, fp
 80086ce:	3307      	adds	r3, #7
 80086d0:	444b      	add	r3, r9
 80086d2:	18cb      	adds	r3, r1, r3
 80086d4:	3301      	adds	r3, #1
 80086d6:	4a2c      	ldr	r2, [pc, #176]	; (8008788 <SendMessageFromPort+0x304>)
 80086d8:	54d0      	strb	r0, [r2, r3]
			if (dstGroupID == BOS_BROADCAST)
 80086da:	4643      	mov	r3, r8
 80086dc:	2bff      	cmp	r3, #255	; 0xff
 80086de:	d012      	beq.n	8008706 <SendMessageFromPort+0x282>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80086e0:	1864      	adds	r4, r4, r1
 80086e2:	b2e4      	uxtb	r4, r4
 80086e4:	3402      	adds	r4, #2
 80086e6:	b2e4      	uxtb	r4, r4
 80086e8:	e70e      	b.n	8008508 <SendMessageFromPort+0x84>
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 80086ea:	464b      	mov	r3, r9
 80086ec:	2b2c      	cmp	r3, #44	; 0x2c
 80086ee:	d8e1      	bhi.n	80086b4 <SendMessageFromPort+0x230>
				message[7+shift+numberOfParams] = ++bcastID;
 80086f0:	4833      	ldr	r0, [pc, #204]	; (80087c0 <SendMessageFromPort+0x33c>)
 80086f2:	7803      	ldrb	r3, [r0, #0]
 80086f4:	3301      	adds	r3, #1
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	7003      	strb	r3, [r0, #0]
 80086fa:	4658      	mov	r0, fp
 80086fc:	3007      	adds	r0, #7
 80086fe:	4448      	add	r0, r9
 8008700:	4a21      	ldr	r2, [pc, #132]	; (8008788 <SendMessageFromPort+0x304>)
 8008702:	5413      	strb	r3, [r2, r0]
 8008704:	e7e9      	b.n	80086da <SendMessageFromPort+0x256>
				length += 1;		// + bcastID
 8008706:	3401      	adds	r4, #1
 8008708:	b2e4      	uxtb	r4, r4
 800870a:	e6fd      	b.n	8008508 <SendMessageFromPort+0x84>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 800870c:	4642      	mov	r2, r8
 800870e:	3204      	adds	r2, #4
 8008710:	b292      	uxth	r2, r2
 8008712:	2332      	movs	r3, #50	; 0x32
 8008714:	491c      	ldr	r1, [pc, #112]	; (8008788 <SendMessageFromPort+0x304>)
 8008716:	0028      	movs	r0, r5
 8008718:	f005 fd8a 	bl	800e230 <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 800871c:	9903      	ldr	r1, [sp, #12]
 800871e:	2000      	movs	r0, #0
 8008720:	f006 fd9a 	bl	800f258 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 8008724:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <SendMessageFromPort+0x340>)
 8008726:	2202      	movs	r2, #2
 8008728:	701a      	strb	r2, [r3, #0]
	
	return result;
 800872a:	2000      	movs	r0, #0
}
 800872c:	b005      	add	sp, #20
 800872e:	bcf0      	pop	{r4, r5, r6, r7}
 8008730:	46bb      	mov	fp, r7
 8008732:	46b2      	mov	sl, r6
 8008734:	46a9      	mov	r9, r5
 8008736:	46a0      	mov	r8, r4
 8008738:	bdf0      	pop	{r4, r5, r6, r7, pc}
				writePxDMAMutex(p, message, length+4, cmd50ms);
 800873a:	4643      	mov	r3, r8
 800873c:	1d1a      	adds	r2, r3, #4
 800873e:	b292      	uxth	r2, r2
 8008740:	2332      	movs	r3, #50	; 0x32
 8008742:	4911      	ldr	r1, [pc, #68]	; (8008788 <SendMessageFromPort+0x304>)
 8008744:	0020      	movs	r0, r4
 8008746:	f005 fd73 	bl	800e230 <writePxDMAMutex>
				Delay_ms(1);
 800874a:	2001      	movs	r0, #1
 800874c:	f007 fee4 	bl	8010518 <HAL_Delay>
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8008750:	3401      	adds	r4, #1
 8008752:	b2e4      	uxtb	r4, r4
 8008754:	2c05      	cmp	r4, #5
 8008756:	d8e1      	bhi.n	800871c <SendMessageFromPort+0x298>
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8008758:	4b10      	ldr	r3, [pc, #64]	; (800879c <SendMessageFromPort+0x318>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	3b01      	subs	r3, #1
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	4a19      	ldr	r2, [pc, #100]	; (80087c8 <SendMessageFromPort+0x344>)
 8008762:	5a9b      	ldrh	r3, [r3, r2]
 8008764:	1e62      	subs	r2, r4, #1
 8008766:	4113      	asrs	r3, r2
 8008768:	07db      	lsls	r3, r3, #31
 800876a:	d5f1      	bpl.n	8008750 <SendMessageFromPort+0x2cc>
 800876c:	e7e5      	b.n	800873a <SendMessageFromPort+0x2b6>
		return BOS_ERR_WrongParam; 
 800876e:	2067      	movs	r0, #103	; 0x67
 8008770:	e7dc      	b.n	800872c <SendMessageFromPort+0x2a8>
 8008772:	2067      	movs	r0, #103	; 0x67
 8008774:	e7da      	b.n	800872c <SendMessageFromPort+0x2a8>
 8008776:	2067      	movs	r0, #103	; 0x67
 8008778:	e7d8      	b.n	800872c <SendMessageFromPort+0x2a8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 800877a:	2069      	movs	r0, #105	; 0x69
 800877c:	e7d6      	b.n	800872c <SendMessageFromPort+0x2a8>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 800877e:	2069      	movs	r0, #105	; 0x69
 8008780:	e7d4      	b.n	800872c <SendMessageFromPort+0x2a8>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8008782:	2069      	movs	r0, #105	; 0x69
 8008784:	e7d2      	b.n	800872c <SendMessageFromPort+0x2a8>
 8008786:	46c0      	nop			; (mov r8, r8)
 8008788:	20000720 	.word	0x20000720
 800878c:	20000758 	.word	0x20000758
 8008790:	20000568 	.word	0x20000568
 8008794:	20000723 	.word	0x20000723
 8008798:	20000c44 	.word	0x20000c44
 800879c:	2000089e 	.word	0x2000089e
 80087a0:	20006138 	.word	0x20006138
 80087a4:	20000d56 	.word	0x20000d56
 80087a8:	20000d54 	.word	0x20000d54
 80087ac:	20000760 	.word	0x20000760
 80087b0:	200002d4 	.word	0x200002d4
 80087b4:	2000001d 	.word	0x2000001d
 80087b8:	2000001c 	.word	0x2000001c
 80087bc:	200006e8 	.word	0x200006e8
 80087c0:	20000514 	.word	0x20000514
 80087c4:	20000930 	.word	0x20000930
 80087c8:	20000518 	.word	0x20000518

080087cc <ForwardReceivedMessage>:
{
 80087cc:	b530      	push	{r4, r5, lr}
 80087ce:	b083      	sub	sp, #12
 80087d0:	0004      	movs	r4, r0
	AddBcastPayload = false; 	
 80087d2:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <ForwardReceivedMessage+0x34>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 80087d8:	1e42      	subs	r2, r0, #1
 80087da:	00d3      	lsls	r3, r2, #3
 80087dc:	1a9b      	subs	r3, r3, r2
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	4a08      	ldr	r2, [pc, #32]	; (8008804 <ForwardReceivedMessage+0x38>)
 80087e2:	5c9d      	ldrb	r5, [r3, r2]
	port = FindRoute(myID, dst); 
 80087e4:	4b08      	ldr	r3, [pc, #32]	; (8008808 <ForwardReceivedMessage+0x3c>)
 80087e6:	7818      	ldrb	r0, [r3, #0]
 80087e8:	0029      	movs	r1, r5
 80087ea:	f7fa fd3b 	bl	8003264 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 80087ee:	9400      	str	r4, [sp, #0]
 80087f0:	2300      	movs	r3, #0
 80087f2:	002a      	movs	r2, r5
 80087f4:	2100      	movs	r1, #0
 80087f6:	f7ff fe45 	bl	8008484 <SendMessageFromPort>
}
 80087fa:	2000      	movs	r0, #0
 80087fc:	b003      	add	sp, #12
 80087fe:	bd30      	pop	{r4, r5, pc}
 8008800:	200002d4 	.word	0x200002d4
 8008804:	20000568 	.word	0x20000568
 8008808:	2000089e 	.word	0x2000089e

0800880c <BroadcastReceivedMessage>:
{
 800880c:	b500      	push	{lr}
 800880e:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8008810:	4b0c      	ldr	r3, [pc, #48]	; (8008844 <BroadcastReceivedMessage+0x38>)
 8008812:	2200      	movs	r2, #0
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <BroadcastReceivedMessage+0x3c>)
 8008818:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 800881a:	28ff      	cmp	r0, #255	; 0xff
 800881c:	d009      	beq.n	8008832 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 800881e:	9100      	str	r1, [sp, #0]
 8008820:	2300      	movs	r3, #0
 8008822:	22fe      	movs	r2, #254	; 0xfe
 8008824:	2100      	movs	r1, #0
 8008826:	2000      	movs	r0, #0
 8008828:	f7ff fe2c 	bl	8008484 <SendMessageFromPort>
}
 800882c:	2000      	movs	r0, #0
 800882e:	b003      	add	sp, #12
 8008830:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 8008832:	9100      	str	r1, [sp, #0]
 8008834:	2300      	movs	r3, #0
 8008836:	32ff      	adds	r2, #255	; 0xff
 8008838:	2100      	movs	r1, #0
 800883a:	2000      	movs	r0, #0
 800883c:	f7ff fe22 	bl	8008484 <SendMessageFromPort>
 8008840:	e7f4      	b.n	800882c <BroadcastReceivedMessage+0x20>
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	200002d4 	.word	0x200002d4
 8008848:	2000001d 	.word	0x2000001d

0800884c <BroadcastMessage>:
{
 800884c:	b530      	push	{r4, r5, lr}
 800884e:	b083      	sub	sp, #12
 8008850:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 8008852:	4b0f      	ldr	r3, [pc, #60]	; (8008890 <BroadcastMessage+0x44>)
 8008854:	2501      	movs	r5, #1
 8008856:	701d      	strb	r5, [r3, #0]
 8008858:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <BroadcastMessage+0x48>)
 800885a:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 800885c:	29ff      	cmp	r1, #255	; 0xff
 800885e:	d00e      	beq.n	800887e <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 8008860:	9400      	str	r4, [sp, #0]
 8008862:	0013      	movs	r3, r2
 8008864:	22fe      	movs	r2, #254	; 0xfe
 8008866:	0001      	movs	r1, r0
 8008868:	2000      	movs	r0, #0
 800886a:	f7ff fe0b 	bl	8008484 <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 800886e:	0022      	movs	r2, r4
 8008870:	2100      	movs	r1, #0
 8008872:	4809      	ldr	r0, [pc, #36]	; (8008898 <BroadcastMessage+0x4c>)
 8008874:	f00a ff3b 	bl	80136ee <memset>
}
 8008878:	2000      	movs	r0, #0
 800887a:	b003      	add	sp, #12
 800887c:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 800887e:	9400      	str	r4, [sp, #0]
 8008880:	0013      	movs	r3, r2
 8008882:	22ff      	movs	r2, #255	; 0xff
 8008884:	0001      	movs	r1, r0
 8008886:	2000      	movs	r0, #0
 8008888:	f7ff fdfc 	bl	8008484 <SendMessageFromPort>
 800888c:	e7ef      	b.n	800886e <BroadcastMessage+0x22>
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	200002d4 	.word	0x200002d4
 8008894:	2000001d 	.word	0x2000001d
 8008898:	20000760 	.word	0x20000760

0800889c <SendMessageToModule>:
{
 800889c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889e:	b083      	sub	sp, #12
 80088a0:	0004      	movs	r4, r0
 80088a2:	000e      	movs	r6, r1
 80088a4:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 80088a6:	28ff      	cmp	r0, #255	; 0xff
 80088a8:	d012      	beq.n	80088d0 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 80088aa:	4f0d      	ldr	r7, [pc, #52]	; (80088e0 <SendMessageToModule+0x44>)
 80088ac:	7838      	ldrb	r0, [r7, #0]
 80088ae:	0021      	movs	r1, r4
 80088b0:	f7fa fcd8 	bl	8003264 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 80088b4:	7839      	ldrb	r1, [r7, #0]
 80088b6:	9500      	str	r5, [sp, #0]
 80088b8:	0033      	movs	r3, r6
 80088ba:	0022      	movs	r2, r4
 80088bc:	f7ff fde2 	bl	8008484 <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 80088c0:	002a      	movs	r2, r5
 80088c2:	2100      	movs	r1, #0
 80088c4:	4807      	ldr	r0, [pc, #28]	; (80088e4 <SendMessageToModule+0x48>)
 80088c6:	f00a ff12 	bl	80136ee <memset>
}
 80088ca:	2000      	movs	r0, #0
 80088cc:	b003      	add	sp, #12
 80088ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 80088d0:	4b03      	ldr	r3, [pc, #12]	; (80088e0 <SendMessageToModule+0x44>)
 80088d2:	7818      	ldrb	r0, [r3, #0]
 80088d4:	0013      	movs	r3, r2
 80088d6:	000a      	movs	r2, r1
 80088d8:	21ff      	movs	r1, #255	; 0xff
 80088da:	f7ff ffb7 	bl	800884c <BroadcastMessage>
 80088de:	e7f4      	b.n	80088ca <SendMessageToModule+0x2e>
 80088e0:	2000089e 	.word	0x2000089e
 80088e4:	20000760 	.word	0x20000760

080088e8 <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 80088e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ea:	46de      	mov	lr, fp
 80088ec:	4657      	mov	r7, sl
 80088ee:	464e      	mov	r6, r9
 80088f0:	4645      	mov	r5, r8
 80088f2:	b5e0      	push	{r5, r6, r7, lr}
 80088f4:	b08b      	sub	sp, #44	; 0x2c
 80088f6:	9009      	str	r0, [sp, #36]	; 0x24
 80088f8:	000e      	movs	r6, r1
 80088fa:	9208      	str	r2, [sp, #32]
 80088fc:	001d      	movs	r5, r3
 80088fe:	ab14      	add	r3, sp, #80	; 0x50
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	469b      	mov	fp, r3
 8008904:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008906:	4698      	mov	r8, r3
 8008908:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800890a:	4699      	mov	r9, r3
 800890c:	ab17      	add	r3, sp, #92	; 0x5c
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	469a      	mov	sl, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 8008912:	4b54      	ldr	r3, [pc, #336]	; (8008a64 <StartScastDMAStream+0x17c>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	428b      	cmp	r3, r1
 8008918:	d101      	bne.n	800891e <StartScastDMAStream+0x36>
		
		return result;
	}
	
	/* Inform participating modules */
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 800891a:	2400      	movs	r4, #0
 800891c:	e05e      	b.n	80089dc <StartScastDMAStream+0xf4>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 800891e:	4643      	mov	r3, r8
 8008920:	0e1a      	lsrs	r2, r3, #24
 8008922:	4b51      	ldr	r3, [pc, #324]	; (8008a68 <StartScastDMAStream+0x180>)
 8008924:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 8008926:	4642      	mov	r2, r8
 8008928:	0c12      	lsrs	r2, r2, #16
 800892a:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 800892c:	4642      	mov	r2, r8
 800892e:	0a12      	lsrs	r2, r2, #8
 8008930:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 8008932:	4642      	mov	r2, r8
 8008934:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8008936:	464a      	mov	r2, r9
 8008938:	0e12      	lsrs	r2, r2, #24
 800893a:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 800893c:	464a      	mov	r2, r9
 800893e:	0c12      	lsrs	r2, r2, #16
 8008940:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 8008942:	464a      	mov	r2, r9
 8008944:	0a12      	lsrs	r2, r2, #8
 8008946:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 8008948:	464a      	mov	r2, r9
 800894a:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 800894c:	465a      	mov	r2, fp
 800894e:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 8008950:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 8008952:	729d      	strb	r5, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 8008954:	9a08      	ldr	r2, [sp, #32]
 8008956:	72da      	strb	r2, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 8008958:	4652      	mov	r2, sl
 800895a:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 800895c:	220d      	movs	r2, #13
 800895e:	211c      	movs	r1, #28
 8008960:	0030      	movs	r0, r6
 8008962:	f7ff ff9b 	bl	800889c <SendMessageToModule>
		return result;
 8008966:	e060      	b.n	8008a2a <StartScastDMAStream+0x142>
		{
			/* Find out the inport and outport to this module from previous one */
			if (route[i+1]) {
				temp1 = FindRoute(route[i], route[i+1]);
			} else {
				temp1 = FindRoute(route[i], srcM);
 8008968:	0031      	movs	r1, r6
 800896a:	f7fa fc7b 	bl	8003264 <FindRoute>
 800896e:	9007      	str	r0, [sp, #28]
			}
			FindRoute(srcM, dstM);
 8008970:	0029      	movs	r1, r5
 8008972:	0030      	movs	r0, r6
 8008974:	f7fa fc76 	bl	8003264 <FindRoute>
			if (route[i] == dstM) {
 8008978:	4b3c      	ldr	r3, [pc, #240]	; (8008a6c <StartScastDMAStream+0x184>)
 800897a:	5dd8      	ldrb	r0, [r3, r7]
 800897c:	42a8      	cmp	r0, r5
 800897e:	d141      	bne.n	8008a04 <StartScastDMAStream+0x11c>
				temp2 = dstP;
 8008980:	9808      	ldr	r0, [sp, #32]
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008982:	4643      	mov	r3, r8
 8008984:	0e1a      	lsrs	r2, r3, #24
 8008986:	4b38      	ldr	r3, [pc, #224]	; (8008a68 <StartScastDMAStream+0x180>)
 8008988:	701a      	strb	r2, [r3, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 800898a:	4642      	mov	r2, r8
 800898c:	0c12      	lsrs	r2, r2, #16
 800898e:	705a      	strb	r2, [r3, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 8008990:	4642      	mov	r2, r8
 8008992:	0a12      	lsrs	r2, r2, #8
 8008994:	709a      	strb	r2, [r3, #2]
			messageParams[3] = (uint8_t) count;
 8008996:	4642      	mov	r2, r8
 8008998:	70da      	strb	r2, [r3, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 800899a:	464a      	mov	r2, r9
 800899c:	0e12      	lsrs	r2, r2, #24
 800899e:	711a      	strb	r2, [r3, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 80089a0:	464a      	mov	r2, r9
 80089a2:	0c12      	lsrs	r2, r2, #16
 80089a4:	715a      	strb	r2, [r3, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 80089a6:	464a      	mov	r2, r9
 80089a8:	0a12      	lsrs	r2, r2, #8
 80089aa:	719a      	strb	r2, [r3, #6]
			messageParams[7] = (uint8_t) timeout;
 80089ac:	464a      	mov	r2, r9
 80089ae:	71da      	strb	r2, [r3, #7]
			messageParams[8] = direction;										/* Stream direction */
 80089b0:	465a      	mov	r2, fp
 80089b2:	721a      	strb	r2, [r3, #8]
			messageParams[9] = temp1;												/* Source port */
 80089b4:	9a07      	ldr	r2, [sp, #28]
 80089b6:	725a      	strb	r2, [r3, #9]
			messageParams[10] = temp2;											/* destination port */
 80089b8:	7298      	strb	r0, [r3, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 80089ba:	4652      	mov	r2, sl
 80089bc:	72da      	strb	r2, [r3, #11]
			FindRoute(srcM, dstM);
 80089be:	0029      	movs	r1, r5
 80089c0:	0030      	movs	r0, r6
 80089c2:	f7fa fc4f 	bl	8003264 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 80089c6:	4b29      	ldr	r3, [pc, #164]	; (8008a6c <StartScastDMAStream+0x184>)
 80089c8:	5dd8      	ldrb	r0, [r3, r7]
 80089ca:	220c      	movs	r2, #12
 80089cc:	211b      	movs	r1, #27
 80089ce:	f7ff ff65 	bl	800889c <SendMessageToModule>
			osDelay(10);
 80089d2:	200a      	movs	r0, #10
 80089d4:	f005 fd12 	bl	800e3fc <osDelay>
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 80089d8:	3401      	adds	r4, #1
 80089da:	b2e4      	uxtb	r4, r4
 80089dc:	2c19      	cmp	r4, #25
 80089de:	d817      	bhi.n	8008a10 <StartScastDMAStream+0x128>
		FindRoute(srcM, dstM);
 80089e0:	0029      	movs	r1, r5
 80089e2:	0030      	movs	r0, r6
 80089e4:	f7fa fc3e 	bl	8003264 <FindRoute>
		if (route[i]) 
 80089e8:	0027      	movs	r7, r4
 80089ea:	4b20      	ldr	r3, [pc, #128]	; (8008a6c <StartScastDMAStream+0x184>)
 80089ec:	5d18      	ldrb	r0, [r3, r4]
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d0f2      	beq.n	80089d8 <StartScastDMAStream+0xf0>
			if (route[i+1]) {
 80089f2:	1c63      	adds	r3, r4, #1
 80089f4:	4a1d      	ldr	r2, [pc, #116]	; (8008a6c <StartScastDMAStream+0x184>)
 80089f6:	5cd1      	ldrb	r1, [r2, r3]
 80089f8:	2900      	cmp	r1, #0
 80089fa:	d0b5      	beq.n	8008968 <StartScastDMAStream+0x80>
				temp1 = FindRoute(route[i], route[i+1]);
 80089fc:	f7fa fc32 	bl	8003264 <FindRoute>
 8008a00:	9007      	str	r0, [sp, #28]
 8008a02:	e7b5      	b.n	8008970 <StartScastDMAStream+0x88>
				temp2 = FindRoute(route[i], route[i-1]);
 8008a04:	1e7b      	subs	r3, r7, #1
 8008a06:	4a19      	ldr	r2, [pc, #100]	; (8008a6c <StartScastDMAStream+0x184>)
 8008a08:	5cd1      	ldrb	r1, [r2, r3]
 8008a0a:	f7fa fc2b 	bl	8003264 <FindRoute>
 8008a0e:	e7b8      	b.n	8008982 <StartScastDMAStream+0x9a>
		}
	}
	
	if (srcM == dstM)
 8008a10:	42ae      	cmp	r6, r5
 8008a12:	d112      	bne.n	8008a3a <StartScastDMAStream+0x152>
		port = dstP;
	else
		port = FindRoute(srcM, dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction, count, timeout, srcP, port);
 8008a14:	9b08      	ldr	r3, [sp, #32]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1a:	464a      	mov	r2, r9
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	4658      	mov	r0, fp
 8008a20:	f7ff fc1c 	bl	800825c <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if (stored) {		
 8008a24:	4653      	mov	r3, sl
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10d      	bne.n	8008a46 <StartScastDMAStream+0x15e>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	b00b      	add	sp, #44	; 0x2c
 8008a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8008a30:	46bb      	mov	fp, r7
 8008a32:	46b2      	mov	sl, r6
 8008a34:	46a9      	mov	r9, r5
 8008a36:	46a0      	mov	r8, r4
 8008a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = FindRoute(srcM, dstM);
 8008a3a:	0029      	movs	r1, r5
 8008a3c:	0030      	movs	r0, r6
 8008a3e:	f7fa fc11 	bl	8003264 <FindRoute>
 8008a42:	9008      	str	r0, [sp, #32]
 8008a44:	e7e6      	b.n	8008a14 <StartScastDMAStream+0x12c>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 8008a46:	2300      	movs	r3, #0
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	9303      	str	r3, [sp, #12]
 8008a4c:	9302      	str	r3, [sp, #8]
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	9b08      	ldr	r3, [sp, #32]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a56:	464a      	mov	r2, r9
 8008a58:	4641      	mov	r1, r8
 8008a5a:	4658      	mov	r0, fp
 8008a5c:	f7fa f8c0 	bl	8002be0 <SaveEEstreams>
 8008a60:	e7e3      	b.n	8008a2a <StartScastDMAStream+0x142>
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	2000089e 	.word	0x2000089e
 8008a68:	20000760 	.word	0x20000760
 8008a6c:	200061f0 	.word	0x200061f0

08008a70 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 8008a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a72:	46de      	mov	lr, fp
 8008a74:	4657      	mov	r7, sl
 8008a76:	464e      	mov	r6, r9
 8008a78:	4645      	mov	r5, r8
 8008a7a:	b5e0      	push	{r5, r6, r7, lr}
 8008a7c:	b085      	sub	sp, #20
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
	uint8_t port; bool emptyBuffer = false;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9301      	str	r3, [sp, #4]
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8008a82:	469b      	mov	fp, r3
 8008a84:	e19c      	b.n	8008dc0 <BackEndTask+0x350>
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
			{	
				/* A.1. Look for HZ delimiter and determine packet start */
				/* Note this parses only a single packet on each pass TODO update to parse all */

				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8008a86:	1e6c      	subs	r4, r5, #1
 8008a88:	4bce      	ldr	r3, [pc, #824]	; (8008dc4 <BackEndTask+0x354>)
 8008a8a:	5d1f      	ldrb	r7, [r3, r4]
 8008a8c:	e004      	b.n	8008a98 <BackEndTask+0x28>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
					{	
						packetStart = i;	
						break;
					}	
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8008a8e:	2f3f      	cmp	r7, #63	; 0x3f
 8008a90:	d02b      	beq.n	8008aea <BackEndTask+0x7a>
						break;
					}							
					else 
					{
						/* B. Did not find any messaging packets. Check for CLI enter key (0xD) */
						if (i == MSG_RX_BUF_SIZE-1)		
 8008a92:	2f3f      	cmp	r7, #63	; 0x3f
 8008a94:	d037      	beq.n	8008b06 <BackEndTask+0x96>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8008a96:	3701      	adds	r7, #1
 8008a98:	2f3f      	cmp	r7, #63	; 0x3f
 8008a9a:	dc0f      	bgt.n	8008abc <BackEndTask+0x4c>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 8008a9c:	2f3e      	cmp	r7, #62	; 0x3e
 8008a9e:	dcf6      	bgt.n	8008a8e <BackEndTask+0x1e>
 8008aa0:	01a2      	lsls	r2, r4, #6
 8008aa2:	4bc9      	ldr	r3, [pc, #804]	; (8008dc8 <BackEndTask+0x358>)
 8008aa4:	189b      	adds	r3, r3, r2
 8008aa6:	5ddb      	ldrb	r3, [r3, r7]
 8008aa8:	2b48      	cmp	r3, #72	; 0x48
 8008aaa:	d1f0      	bne.n	8008a8e <BackEndTask+0x1e>
 8008aac:	1c7b      	adds	r3, r7, #1
 8008aae:	0011      	movs	r1, r2
 8008ab0:	4ac5      	ldr	r2, [pc, #788]	; (8008dc8 <BackEndTask+0x358>)
 8008ab2:	1852      	adds	r2, r2, r1
 8008ab4:	5cd3      	ldrb	r3, [r2, r3]
 8008ab6:	2b5a      	cmp	r3, #90	; 0x5a
 8008ab8:	d1e9      	bne.n	8008a8e <BackEndTask+0x1e>
						packetStart = i;	
 8008aba:	46bb      	mov	fp, r7
						}
					}						
				}
						
				/* Check parse status */
				if (emptyBuffer) {	
 8008abc:	9b01      	ldr	r3, [sp, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d000      	beq.n	8008ac4 <BackEndTask+0x54>
 8008ac2:	e178      	b.n	8008db6 <BackEndTask+0x346>
					emptyBuffer = false;
					continue;
				}
				
				/* A.2. Parse the length byte */
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 8008ac4:	465b      	mov	r3, fp
 8008ac6:	2b3d      	cmp	r3, #61	; 0x3d
 8008ac8:	d05d      	beq.n	8008b86 <BackEndTask+0x116>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
					parseStart = 0;				
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 8008aca:	2b3e      	cmp	r3, #62	; 0x3e
 8008acc:	d100      	bne.n	8008ad0 <BackEndTask+0x60>
 8008ace:	e080      	b.n	8008bd2 <BackEndTask+0x162>
					packetLength = UARTRxBuf[port-1][0];
					parseStart = 1;
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 8008ad0:	2b3f      	cmp	r3, #63	; 0x3f
 8008ad2:	d100      	bne.n	8008ad6 <BackEndTask+0x66>
 8008ad4:	e084      	b.n	8008be0 <BackEndTask+0x170>
					packetLength = UARTRxBuf[port-1][1];
					parseStart = 2;
				} else {
					packetLength = UARTRxBuf[port-1][packetStart+2];
 8008ad6:	3302      	adds	r3, #2
 8008ad8:	01a1      	lsls	r1, r4, #6
 8008ada:	4abb      	ldr	r2, [pc, #748]	; (8008dc8 <BackEndTask+0x358>)
 8008adc:	1852      	adds	r2, r2, r1
 8008ade:	5cd3      	ldrb	r3, [r2, r3]
 8008ae0:	469a      	mov	sl, r3
					parseStart = packetStart+3;
 8008ae2:	465b      	mov	r3, fp
 8008ae4:	3303      	adds	r3, #3
 8008ae6:	9302      	str	r3, [sp, #8]
 8008ae8:	e055      	b.n	8008b96 <BackEndTask+0x126>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8008aea:	01a2      	lsls	r2, r4, #6
 8008aec:	4bb6      	ldr	r3, [pc, #728]	; (8008dc8 <BackEndTask+0x358>)
 8008aee:	189b      	adds	r3, r3, r2
 8008af0:	333f      	adds	r3, #63	; 0x3f
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b48      	cmp	r3, #72	; 0x48
 8008af6:	d1cc      	bne.n	8008a92 <BackEndTask+0x22>
 8008af8:	0013      	movs	r3, r2
 8008afa:	4ab3      	ldr	r2, [pc, #716]	; (8008dc8 <BackEndTask+0x358>)
 8008afc:	5c9b      	ldrb	r3, [r3, r2]
 8008afe:	2b5a      	cmp	r3, #90	; 0x5a
 8008b00:	d1c7      	bne.n	8008a92 <BackEndTask+0x22>
						packetStart = MSG_RX_BUF_SIZE-1;	
 8008b02:	46bb      	mov	fp, r7
 8008b04:	e7da      	b.n	8008abc <BackEndTask+0x4c>
							if (BOS.disableCLI == false)
 8008b06:	4bb1      	ldr	r3, [pc, #708]	; (8008dcc <BackEndTask+0x35c>)
 8008b08:	7edb      	ldrb	r3, [r3, #27]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <BackEndTask+0xa4>
							emptyBuffer = true;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	e7c0      	b.n	8008a96 <BackEndTask+0x26>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8008b14:	4bab      	ldr	r3, [pc, #684]	; (8008dc4 <BackEndTask+0x354>)
 8008b16:	5d1b      	ldrb	r3, [r3, r4]
 8008b18:	e002      	b.n	8008b20 <BackEndTask+0xb0>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8008b1a:	2b3f      	cmp	r3, #63	; 0x3f
 8008b1c:	d02a      	beq.n	8008b74 <BackEndTask+0x104>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8008b1e:	3301      	adds	r3, #1
 8008b20:	2b3f      	cmp	r3, #63	; 0x3f
 8008b22:	dc2d      	bgt.n	8008b80 <BackEndTask+0x110>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8008b24:	01a1      	lsls	r1, r4, #6
 8008b26:	4aa8      	ldr	r2, [pc, #672]	; (8008dc8 <BackEndTask+0x358>)
 8008b28:	1852      	adds	r2, r2, r1
 8008b2a:	5cd2      	ldrb	r2, [r2, r3]
 8008b2c:	2a0d      	cmp	r2, #13
 8008b2e:	d1f6      	bne.n	8008b1e <BackEndTask+0xae>
 8008b30:	2b3e      	cmp	r3, #62	; 0x3e
 8008b32:	dcf2      	bgt.n	8008b1a <BackEndTask+0xaa>
 8008b34:	1c5a      	adds	r2, r3, #1
 8008b36:	0008      	movs	r0, r1
 8008b38:	49a3      	ldr	r1, [pc, #652]	; (8008dc8 <BackEndTask+0x358>)
 8008b3a:	1809      	adds	r1, r1, r0
 8008b3c:	5c8a      	ldrb	r2, [r1, r2]
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	d1eb      	bne.n	8008b1a <BackEndTask+0xaa>
										UARTRxBuf[port-1][j] = 0;
 8008b42:	01a1      	lsls	r1, r4, #6
 8008b44:	4aa0      	ldr	r2, [pc, #640]	; (8008dc8 <BackEndTask+0x358>)
 8008b46:	1852      	adds	r2, r2, r1
 8008b48:	2100      	movs	r1, #0
 8008b4a:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	4a9d      	ldr	r2, [pc, #628]	; (8008dc4 <BackEndTask+0x354>)
 8008b50:	5513      	strb	r3, [r2, r4]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 8008b52:	4b9f      	ldr	r3, [pc, #636]	; (8008dd0 <BackEndTask+0x360>)
 8008b54:	7818      	ldrb	r0, [r3, #0]
 8008b56:	4a9f      	ldr	r2, [pc, #636]	; (8008dd4 <BackEndTask+0x364>)
 8008b58:	5411      	strb	r1, [r2, r0]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 8008b5a:	3103      	adds	r1, #3
 8008b5c:	5591      	strb	r1, [r2, r6]
										PcPort = port;
 8008b5e:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 8008b60:	4b9d      	ldr	r3, [pc, #628]	; (8008dd8 <BackEndTask+0x368>)
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	2300      	movs	r3, #0
 8008b66:	2202      	movs	r2, #2
 8008b68:	2100      	movs	r1, #0
 8008b6a:	f007 f899 	bl	800fca0 <xTaskGenericNotify>
							emptyBuffer = true;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	9301      	str	r3, [sp, #4]
										break;
 8008b72:	e790      	b.n	8008a96 <BackEndTask+0x26>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8008b74:	01a2      	lsls	r2, r4, #6
 8008b76:	4994      	ldr	r1, [pc, #592]	; (8008dc8 <BackEndTask+0x358>)
 8008b78:	5c52      	ldrb	r2, [r2, r1]
 8008b7a:	2a00      	cmp	r2, #0
 8008b7c:	d1cf      	bne.n	8008b1e <BackEndTask+0xae>
 8008b7e:	e7e0      	b.n	8008b42 <BackEndTask+0xd2>
							emptyBuffer = true;
 8008b80:	2301      	movs	r3, #1
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	e787      	b.n	8008a96 <BackEndTask+0x26>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 8008b86:	01a2      	lsls	r2, r4, #6
 8008b88:	4b8f      	ldr	r3, [pc, #572]	; (8008dc8 <BackEndTask+0x358>)
 8008b8a:	189b      	adds	r3, r3, r2
 8008b8c:	333f      	adds	r3, #63	; 0x3f
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	469a      	mov	sl, r3
					parseStart = 0;				
 8008b92:	2300      	movs	r3, #0
 8008b94:	9302      	str	r3, [sp, #8]
				}
				
				/* A.3. Set packet end from packet start and length */			
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 8008b96:	2303      	movs	r3, #3
 8008b98:	4453      	add	r3, sl
 8008b9a:	4698      	mov	r8, r3
 8008b9c:	001f      	movs	r7, r3
 8008b9e:	445f      	add	r7, fp
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 8008ba0:	2f3f      	cmp	r7, #63	; 0x3f
 8008ba2:	dd00      	ble.n	8008ba6 <BackEndTask+0x136>
					packetEnd -= MSG_RX_BUF_SIZE;
 8008ba4:	3f40      	subs	r7, #64	; 0x40
			
				if (packetStart != packetEnd)										// Non-empty packet
 8008ba6:	45bb      	cmp	fp, r7
 8008ba8:	d122      	bne.n	8008bf0 <BackEndTask+0x180>
				}
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */                
				if (packetStart < packetEnd) {
 8008baa:	45bb      	cmp	fp, r7
 8008bac:	db00      	blt.n	8008bb0 <BackEndTask+0x140>
 8008bae:	e0c6      	b.n	8008d3e <BackEndTask+0x2ce>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8008bb0:	01a0      	lsls	r0, r4, #6
 8008bb2:	4458      	add	r0, fp
 8008bb4:	4b84      	ldr	r3, [pc, #528]	; (8008dc8 <BackEndTask+0x358>)
 8008bb6:	18c0      	adds	r0, r0, r3
 8008bb8:	4652      	mov	r2, sl
 8008bba:	3204      	adds	r2, #4
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	f00a fd96 	bl	80136ee <memset>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
				}    
				
				/* A.6.2 Advance buffer index */				
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8008bc2:	3701      	adds	r7, #1
 8008bc4:	4b7f      	ldr	r3, [pc, #508]	; (8008dc4 <BackEndTask+0x354>)
 8008bc6:	551f      	strb	r7, [r3, r4]
				++rejectedMsg;							
 8008bc8:	4a84      	ldr	r2, [pc, #528]	; (8008ddc <BackEndTask+0x36c>)
 8008bca:	8813      	ldrh	r3, [r2, #0]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	8013      	strh	r3, [r2, #0]
 8008bd0:	e0e2      	b.n	8008d98 <BackEndTask+0x328>
					packetLength = UARTRxBuf[port-1][0];
 8008bd2:	01a3      	lsls	r3, r4, #6
 8008bd4:	4a7c      	ldr	r2, [pc, #496]	; (8008dc8 <BackEndTask+0x358>)
 8008bd6:	5c9b      	ldrb	r3, [r3, r2]
 8008bd8:	469a      	mov	sl, r3
					parseStart = 1;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	9302      	str	r3, [sp, #8]
 8008bde:	e7da      	b.n	8008b96 <BackEndTask+0x126>
					packetLength = UARTRxBuf[port-1][1];
 8008be0:	01a2      	lsls	r2, r4, #6
 8008be2:	4b79      	ldr	r3, [pc, #484]	; (8008dc8 <BackEndTask+0x358>)
 8008be4:	189b      	adds	r3, r3, r2
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	469a      	mov	sl, r3
					parseStart = 2;
 8008bea:	2302      	movs	r3, #2
 8008bec:	9302      	str	r3, [sp, #8]
 8008bee:	e7d2      	b.n	8008b96 <BackEndTask+0x126>
					Delay_ms(1);
 8008bf0:	2001      	movs	r0, #1
 8008bf2:	f007 fc91 	bl	8010518 <HAL_Delay>
					if (packetStart < packetEnd) {
 8008bf6:	45bb      	cmp	fp, r7
 8008bf8:	da48      	bge.n	8008c8c <BackEndTask+0x21c>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 8008bfa:	01a1      	lsls	r1, r4, #6
 8008bfc:	4459      	add	r1, fp
 8008bfe:	4b72      	ldr	r3, [pc, #456]	; (8008dc8 <BackEndTask+0x358>)
 8008c00:	18c9      	adds	r1, r1, r3
 8008c02:	4642      	mov	r2, r8
 8008c04:	4876      	ldr	r0, [pc, #472]	; (8008de0 <BackEndTask+0x370>)
 8008c06:	f00a fd69 	bl	80136dc <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8008c0a:	4653      	mov	r3, sl
 8008c0c:	1cd9      	adds	r1, r3, #3
 8008c0e:	4b74      	ldr	r3, [pc, #464]	; (8008de0 <BackEndTask+0x370>)
 8008c10:	4699      	mov	r9, r3
 8008c12:	0018      	movs	r0, r3
 8008c14:	f004 fcc0 	bl	800d598 <CalculateCRC8>
 8008c18:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8008c1a:	2238      	movs	r2, #56	; 0x38
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4648      	mov	r0, r9
 8008c20:	f00a fd65 	bl	80136ee <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8008c24:	01a2      	lsls	r2, r4, #6
 8008c26:	4b68      	ldr	r3, [pc, #416]	; (8008dc8 <BackEndTask+0x358>)
 8008c28:	189b      	adds	r3, r3, r2
 8008c2a:	5ddb      	ldrb	r3, [r3, r7]
 8008c2c:	4598      	cmp	r8, r3
 8008c2e:	d1bc      	bne.n	8008baa <BackEndTask+0x13a>
						portStatus[port] = MSG;
 8008c30:	4b68      	ldr	r3, [pc, #416]	; (8008dd4 <BackEndTask+0x364>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	559a      	strb	r2, [r3, r6]
						messageLength[port-1] = packetLength;	
 8008c36:	4b6b      	ldr	r3, [pc, #428]	; (8008de4 <BackEndTask+0x374>)
 8008c38:	4652      	mov	r2, sl
 8008c3a:	551a      	strb	r2, [r3, r4]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 8008c3c:	233f      	movs	r3, #63	; 0x3f
 8008c3e:	9a02      	ldr	r2, [sp, #8]
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	4553      	cmp	r3, sl
 8008c44:	db3f      	blt.n	8008cc6 <BackEndTask+0x256>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 8008c46:	00e0      	lsls	r0, r4, #3
 8008c48:	1b00      	subs	r0, r0, r4
 8008c4a:	00c0      	lsls	r0, r0, #3
 8008c4c:	4b66      	ldr	r3, [pc, #408]	; (8008de8 <BackEndTask+0x378>)
 8008c4e:	18c0      	adds	r0, r0, r3
 8008c50:	01a1      	lsls	r1, r4, #6
 8008c52:	4694      	mov	ip, r2
 8008c54:	4461      	add	r1, ip
 8008c56:	4b5c      	ldr	r3, [pc, #368]	; (8008dc8 <BackEndTask+0x358>)
 8008c58:	18c9      	adds	r1, r1, r3
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	f00a fd3e 	bl	80136dc <memcpy>
						if (packetStart < packetEnd) {
 8008c60:	45bb      	cmp	fp, r7
 8008c62:	da54      	bge.n	8008d0e <BackEndTask+0x29e>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8008c64:	01a0      	lsls	r0, r4, #6
 8008c66:	4458      	add	r0, fp
 8008c68:	4b57      	ldr	r3, [pc, #348]	; (8008dc8 <BackEndTask+0x358>)
 8008c6a:	18c0      	adds	r0, r0, r3
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	3204      	adds	r2, #4
 8008c70:	2100      	movs	r1, #0
 8008c72:	f00a fd3c 	bl	80136ee <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8008c76:	3701      	adds	r7, #1
 8008c78:	4b52      	ldr	r3, [pc, #328]	; (8008dc4 <BackEndTask+0x354>)
 8008c7a:	551f      	strb	r7, [r3, r4]
						++acceptedMsg;
 8008c7c:	4a5b      	ldr	r2, [pc, #364]	; (8008dec <BackEndTask+0x37c>)
 8008c7e:	8813      	ldrh	r3, [r2, #0]
 8008c80:	3301      	adds	r3, #1
 8008c82:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 8008c84:	0028      	movs	r0, r5
 8008c86:	f7ff fbc1 	bl	800840c <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 8008c8a:	e07b      	b.n	8008d84 <BackEndTask+0x314>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 8008c8c:	01a3      	lsls	r3, r4, #6
 8008c8e:	9303      	str	r3, [sp, #12]
 8008c90:	0019      	movs	r1, r3
 8008c92:	4459      	add	r1, fp
 8008c94:	484c      	ldr	r0, [pc, #304]	; (8008dc8 <BackEndTask+0x358>)
 8008c96:	4684      	mov	ip, r0
 8008c98:	4461      	add	r1, ip
 8008c9a:	2240      	movs	r2, #64	; 0x40
 8008c9c:	4658      	mov	r0, fp
 8008c9e:	1a10      	subs	r0, r2, r0
 8008ca0:	4681      	mov	r9, r0
 8008ca2:	0002      	movs	r2, r0
 8008ca4:	484e      	ldr	r0, [pc, #312]	; (8008de0 <BackEndTask+0x370>)
 8008ca6:	f00a fd19 	bl	80136dc <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 8008caa:	494d      	ldr	r1, [pc, #308]	; (8008de0 <BackEndTask+0x370>)
 8008cac:	4449      	add	r1, r9
 8008cae:	0008      	movs	r0, r1
 8008cb0:	9a03      	ldr	r2, [sp, #12]
 8008cb2:	4b45      	ldr	r3, [pc, #276]	; (8008dc8 <BackEndTask+0x358>)
 8008cb4:	469c      	mov	ip, r3
 8008cb6:	4462      	add	r2, ip
 8008cb8:	0011      	movs	r1, r2
 8008cba:	4643      	mov	r3, r8
 8008cbc:	464a      	mov	r2, r9
 8008cbe:	1a9a      	subs	r2, r3, r2
 8008cc0:	f00a fd0c 	bl	80136dc <memcpy>
 8008cc4:	e7a1      	b.n	8008c0a <BackEndTask+0x19a>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 8008cc6:	00e6      	lsls	r6, r4, #3
 8008cc8:	1b30      	subs	r0, r6, r4
 8008cca:	00c0      	lsls	r0, r0, #3
 8008ccc:	4b46      	ldr	r3, [pc, #280]	; (8008de8 <BackEndTask+0x378>)
 8008cce:	4698      	mov	r8, r3
 8008cd0:	4440      	add	r0, r8
 8008cd2:	01a3      	lsls	r3, r4, #6
 8008cd4:	9a02      	ldr	r2, [sp, #8]
 8008cd6:	0011      	movs	r1, r2
 8008cd8:	9303      	str	r3, [sp, #12]
 8008cda:	469c      	mov	ip, r3
 8008cdc:	4461      	add	r1, ip
 8008cde:	4a3a      	ldr	r2, [pc, #232]	; (8008dc8 <BackEndTask+0x358>)
 8008ce0:	4694      	mov	ip, r2
 8008ce2:	4461      	add	r1, ip
 8008ce4:	2240      	movs	r2, #64	; 0x40
 8008ce6:	9b02      	ldr	r3, [sp, #8]
 8008ce8:	1ad2      	subs	r2, r2, r3
 8008cea:	4691      	mov	r9, r2
 8008cec:	f00a fcf6 	bl	80136dc <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 8008cf0:	1b30      	subs	r0, r6, r4
 8008cf2:	00c0      	lsls	r0, r0, #3
 8008cf4:	4448      	add	r0, r9
 8008cf6:	4440      	add	r0, r8
 8008cf8:	9b03      	ldr	r3, [sp, #12]
 8008cfa:	0019      	movs	r1, r3
 8008cfc:	4b32      	ldr	r3, [pc, #200]	; (8008dc8 <BackEndTask+0x358>)
 8008cfe:	4698      	mov	r8, r3
 8008d00:	4441      	add	r1, r8
 8008d02:	4653      	mov	r3, sl
 8008d04:	464a      	mov	r2, r9
 8008d06:	1a9a      	subs	r2, r3, r2
 8008d08:	f00a fce8 	bl	80136dc <memcpy>
 8008d0c:	e7a8      	b.n	8008c60 <BackEndTask+0x1f0>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8008d0e:	01a6      	lsls	r6, r4, #6
 8008d10:	465b      	mov	r3, fp
 8008d12:	18f0      	adds	r0, r6, r3
 8008d14:	4b2c      	ldr	r3, [pc, #176]	; (8008dc8 <BackEndTask+0x358>)
 8008d16:	4699      	mov	r9, r3
 8008d18:	4448      	add	r0, r9
 8008d1a:	2240      	movs	r2, #64	; 0x40
 8008d1c:	465b      	mov	r3, fp
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	4698      	mov	r8, r3
 8008d22:	001a      	movs	r2, r3
 8008d24:	2100      	movs	r1, #0
 8008d26:	f00a fce2 	bl	80136ee <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8008d2a:	0030      	movs	r0, r6
 8008d2c:	4448      	add	r0, r9
 8008d2e:	4652      	mov	r2, sl
 8008d30:	3204      	adds	r2, #4
 8008d32:	4643      	mov	r3, r8
 8008d34:	1ad2      	subs	r2, r2, r3
 8008d36:	2100      	movs	r1, #0
 8008d38:	f00a fcd9 	bl	80136ee <memset>
 8008d3c:	e79b      	b.n	8008c76 <BackEndTask+0x206>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8008d3e:	01a3      	lsls	r3, r4, #6
 8008d40:	4698      	mov	r8, r3
 8008d42:	0018      	movs	r0, r3
 8008d44:	4458      	add	r0, fp
 8008d46:	4b20      	ldr	r3, [pc, #128]	; (8008dc8 <BackEndTask+0x358>)
 8008d48:	469c      	mov	ip, r3
 8008d4a:	4460      	add	r0, ip
 8008d4c:	2240      	movs	r2, #64	; 0x40
 8008d4e:	465b      	mov	r3, fp
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	4699      	mov	r9, r3
 8008d54:	001a      	movs	r2, r3
 8008d56:	2100      	movs	r1, #0
 8008d58:	f00a fcc9 	bl	80136ee <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8008d5c:	4b1a      	ldr	r3, [pc, #104]	; (8008dc8 <BackEndTask+0x358>)
 8008d5e:	4443      	add	r3, r8
 8008d60:	0018      	movs	r0, r3
 8008d62:	4652      	mov	r2, sl
 8008d64:	3204      	adds	r2, #4
 8008d66:	464b      	mov	r3, r9
 8008d68:	1ad2      	subs	r2, r2, r3
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	f00a fcbf 	bl	80136ee <memset>
 8008d70:	e727      	b.n	8008bc2 <BackEndTask+0x152>
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
				MsgDMAStopped[port-1] = false;
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 8008d72:	0028      	movs	r0, r5
 8008d74:	f005 f9ee 	bl	800e154 <GetUart>
 8008d78:	01a4      	lsls	r4, r4, #6
 8008d7a:	4913      	ldr	r1, [pc, #76]	; (8008dc8 <BackEndTask+0x358>)
 8008d7c:	1861      	adds	r1, r4, r1
 8008d7e:	2240      	movs	r2, #64	; 0x40
 8008d80:	f009 ff9a 	bl	8012cb8 <HAL_UART_Receive_DMA>
		for (port=1 ; port <= NumOfPorts; port++)
 8008d84:	3501      	adds	r5, #1
 8008d86:	b2ed      	uxtb	r5, r5
 8008d88:	2d05      	cmp	r5, #5
 8008d8a:	d817      	bhi.n	8008dbc <BackEndTask+0x34c>
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 8008d8c:	002e      	movs	r6, r5
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <BackEndTask+0x364>)
 8008d90:	5d5b      	ldrb	r3, [r3, r5]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d800      	bhi.n	8008d98 <BackEndTask+0x328>
 8008d96:	e676      	b.n	8008a86 <BackEndTask+0x16>
			if (MsgDMAStopped[port-1] == true) {
 8008d98:	1e74      	subs	r4, r6, #1
 8008d9a:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <BackEndTask+0x380>)
 8008d9c:	5d1b      	ldrb	r3, [r3, r4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0f0      	beq.n	8008d84 <BackEndTask+0x314>
				MsgDMAStopped[port-1] = false;
 8008da2:	4b13      	ldr	r3, [pc, #76]	; (8008df0 <BackEndTask+0x380>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	551a      	strb	r2, [r3, r4]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 8008da8:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <BackEndTask+0x364>)
 8008daa:	5d9b      	ldrb	r3, [r3, r6]
 8008dac:	2b05      	cmp	r3, #5
 8008dae:	d1e0      	bne.n	8008d72 <BackEndTask+0x302>
 8008db0:	4b08      	ldr	r3, [pc, #32]	; (8008dd4 <BackEndTask+0x364>)
 8008db2:	559a      	strb	r2, [r3, r6]
 8008db4:	e7dd      	b.n	8008d72 <BackEndTask+0x302>
					emptyBuffer = false;
 8008db6:	2300      	movs	r3, #0
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	e7e3      	b.n	8008d84 <BackEndTask+0x314>
			}				
		}
		
		taskYIELD();
 8008dbc:	f007 fa1c 	bl	80101f8 <vPortYield>
		for (port=1 ; port <= NumOfPorts; port++)
 8008dc0:	2501      	movs	r5, #1
 8008dc2:	e7e1      	b.n	8008d88 <BackEndTask+0x318>
 8008dc4:	20000c3c 	.word	0x20000c3c
 8008dc8:	20000afc 	.word	0x20000afc
 8008dcc:	20006138 	.word	0x20006138
 8008dd0:	200002d7 	.word	0x200002d7
 8008dd4:	20000918 	.word	0x20000918
 8008dd8:	20000ce0 	.word	0x20000ce0
 8008ddc:	20000f00 	.word	0x20000f00
 8008de0:	20000c44 	.word	0x20000c44
 8008de4:	20000758 	.word	0x20000758
 8008de8:	20000568 	.word	0x20000568
 8008dec:	20000d58 	.word	0x20000d58
 8008df0:	20000af4 	.word	0x20000af4

08008df4 <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 8008df4:	2001      	movs	r0, #1
 8008df6:	4770      	bx	lr

08008df8 <PxMessagingTask>:
{
 8008df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dfa:	46de      	mov	lr, fp
 8008dfc:	4657      	mov	r7, sl
 8008dfe:	464e      	mov	r6, r9
 8008e00:	4645      	mov	r5, r8
 8008e02:	b5e0      	push	{r5, r6, r7, lr}
 8008e04:	b093      	sub	sp, #76	; 0x4c
 8008e06:	2300      	movs	r3, #0
 8008e08:	9304      	str	r3, [sp, #16]
	port = (int8_t)(unsigned) argument;
 8008e0a:	b2c3      	uxtb	r3, r0
 8008e0c:	9306      	str	r3, [sp, #24]
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9307      	str	r3, [sp, #28]
 8008e12:	2500      	movs	r5, #0
 8008e14:	4682      	mov	sl, r0
 8008e16:	469b      	mov	fp, r3
 8008e18:	e05d      	b.n	8008ed6 <PxMessagingTask+0xde>
				longMessage = 1;
 8008e1a:	4bd0      	ldr	r3, [pc, #832]	; (800915c <PxMessagingTask+0x364>)
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	7018      	strb	r0, [r3, #0]
 8008e20:	e074      	b.n	8008f0c <PxMessagingTask+0x114>
				code = cMessage[port-1][3+shift];
 8008e22:	464b      	mov	r3, r9
 8008e24:	1cda      	adds	r2, r3, #3
 8008e26:	00e3      	lsls	r3, r4, #3
 8008e28:	1b1b      	subs	r3, r3, r4
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	48cc      	ldr	r0, [pc, #816]	; (8009160 <PxMessagingTask+0x368>)
 8008e2e:	18c3      	adds	r3, r0, r3
 8008e30:	5c9e      	ldrb	r6, [r3, r2]
 8008e32:	e097      	b.n	8008f64 <PxMessagingTask+0x16c>
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8008e34:	2bfc      	cmp	r3, #252	; 0xfc
 8008e36:	d805      	bhi.n	8008e44 <PxMessagingTask+0x4c>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 8008e38:	4bca      	ldr	r3, [pc, #808]	; (8009164 <PxMessagingTask+0x36c>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	42bb      	cmp	r3, r7
 8008e3e:	d001      	beq.n	8008e44 <PxMessagingTask+0x4c>
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d01f      	beq.n	8008e84 <PxMessagingTask+0x8c>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008e44:	2fff      	cmp	r7, #255	; 0xff
 8008e46:	d100      	bne.n	8008e4a <PxMessagingTask+0x52>
 8008e48:	e0b9      	b.n	8008fbe <PxMessagingTask+0x1c6>
				else if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 8008e4a:	2fff      	cmp	r7, #255	; 0xff
 8008e4c:	d100      	bne.n	8008e50 <PxMessagingTask+0x58>
 8008e4e:	e0d5      	b.n	8008ffc <PxMessagingTask+0x204>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008e50:	2ffe      	cmp	r7, #254	; 0xfe
 8008e52:	d100      	bne.n	8008e56 <PxMessagingTask+0x5e>
 8008e54:	e0e0      	b.n	8009018 <PxMessagingTask+0x220>
				else if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 8008e56:	2ffe      	cmp	r7, #254	; 0xfe
 8008e58:	d100      	bne.n	8008e5c <PxMessagingTask+0x64>
 8008e5a:	e119      	b.n	8009090 <PxMessagingTask+0x298>
				shift += 4;
 8008e5c:	464b      	mov	r3, r9
 8008e5e:	3304      	adds	r3, #4
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	4699      	mov	r9, r3
				numOfParams = messageLength[port-1] - shift;
 8008e64:	4bc0      	ldr	r3, [pc, #768]	; (8009168 <PxMessagingTask+0x370>)
 8008e66:	5d19      	ldrb	r1, [r3, r4]
 8008e68:	464b      	mov	r3, r9
 8008e6a:	1aca      	subs	r2, r1, r3
 8008e6c:	b2d3      	uxtb	r3, r2
 8008e6e:	9305      	str	r3, [sp, #20]
				if (result == BOS_OK)
 8008e70:	2d00      	cmp	r5, #0
 8008e72:	d113      	bne.n	8008e9c <PxMessagingTask+0xa4>
					switch (code)
 8008e74:	2e23      	cmp	r6, #35	; 0x23
 8008e76:	d901      	bls.n	8008e7c <PxMessagingTask+0x84>
 8008e78:	f001 fbe9 	bl	800a64e <PxMessagingTask+0x1856>
 8008e7c:	00b3      	lsls	r3, r6, #2
 8008e7e:	4abb      	ldr	r2, [pc, #748]	; (800916c <PxMessagingTask+0x374>)
 8008e80:	58d3      	ldr	r3, [r2, r3]
 8008e82:	469f      	mov	pc, r3
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 8008e84:	2e10      	cmp	r6, #16
 8008e86:	d17a      	bne.n	8008f7e <PxMessagingTask+0x186>
 8008e88:	e7dc      	b.n	8008e44 <PxMessagingTask+0x4c>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 8008e8a:	2064      	movs	r0, #100	; 0x64
 8008e8c:	f007 fb44 	bl	8010518 <HAL_Delay>
 8008e90:	2300      	movs	r3, #0
 8008e92:	9a06      	ldr	r2, [sp, #24]
 8008e94:	0039      	movs	r1, r7
 8008e96:	4658      	mov	r0, fp
 8008e98:	f7fa fa8c 	bl	80033b4 <remoteBootloaderUpdate>
		if (result == BOS_ERR_UnknownMessage) {
 8008e9c:	2d01      	cmp	r5, #1
 8008e9e:	d101      	bne.n	8008ea4 <PxMessagingTask+0xac>
 8008ea0:	f001 fbed 	bl	800a67e <PxMessagingTask+0x1886>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8008ea4:	00e0      	lsls	r0, r4, #3
 8008ea6:	1b00      	subs	r0, r0, r4
 8008ea8:	00c0      	lsls	r0, r0, #3
 8008eaa:	4bad      	ldr	r3, [pc, #692]	; (8009160 <PxMessagingTask+0x368>)
 8008eac:	18c0      	adds	r0, r0, r3
 8008eae:	4eae      	ldr	r6, [pc, #696]	; (8009168 <PxMessagingTask+0x370>)
 8008eb0:	5d32      	ldrb	r2, [r6, r4]
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	f00a fc1b 	bl	80136ee <memset>
		messageLength[port-1] = 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	5533      	strb	r3, [r6, r4]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 8008ebc:	4bac      	ldr	r3, [pc, #688]	; (8009170 <PxMessagingTask+0x378>)
 8008ebe:	4642      	mov	r2, r8
 8008ec0:	5c9b      	ldrb	r3, [r3, r2]
 8008ec2:	3b02      	subs	r3, #2
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d903      	bls.n	8008ed2 <PxMessagingTask+0xda>
			portStatus[port] = FREE;
 8008eca:	4ba9      	ldr	r3, [pc, #676]	; (8009170 <PxMessagingTask+0x378>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	4641      	mov	r1, r8
 8008ed0:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008ed2:	f007 f991 	bl	80101f8 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	4249      	negs	r1, r1
 8008eda:	2001      	movs	r0, #1
 8008edc:	f006 fe94 	bl	800fc08 <ulTaskNotifyTake>
		if (messageLength[port-1])
 8008ee0:	23ff      	movs	r3, #255	; 0xff
 8008ee2:	4652      	mov	r2, sl
 8008ee4:	401a      	ands	r2, r3
 8008ee6:	4690      	mov	r8, r2
 8008ee8:	1e54      	subs	r4, r2, #1
 8008eea:	4b9f      	ldr	r3, [pc, #636]	; (8009168 <PxMessagingTask+0x370>)
 8008eec:	5d19      	ldrb	r1, [r3, r4]
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d0d4      	beq.n	8008e9c <PxMessagingTask+0xa4>
			if (cMessage[port-1][2]>>7) {
 8008ef2:	00e3      	lsls	r3, r4, #3
 8008ef4:	1b1b      	subs	r3, r3, r4
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	4a99      	ldr	r2, [pc, #612]	; (8009160 <PxMessagingTask+0x368>)
 8008efa:	18d3      	adds	r3, r2, r3
 8008efc:	789a      	ldrb	r2, [r3, #2]
 8008efe:	789b      	ldrb	r3, [r3, #2]
 8008f00:	b25b      	sxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	db89      	blt.n	8008e1a <PxMessagingTask+0x22>
				longMessage = 0;
 8008f06:	4b95      	ldr	r3, [pc, #596]	; (800915c <PxMessagingTask+0x364>)
 8008f08:	2000      	movs	r0, #0
 8008f0a:	7018      	strb	r0, [r3, #0]
			dst = cMessage[port-1][0]; 
 8008f0c:	4894      	ldr	r0, [pc, #592]	; (8009160 <PxMessagingTask+0x368>)
 8008f0e:	00e3      	lsls	r3, r4, #3
 8008f10:	1b1e      	subs	r6, r3, r4
 8008f12:	00f6      	lsls	r6, r6, #3
 8008f14:	5c37      	ldrb	r7, [r6, r0]
			src = cMessage[port-1][1];	
 8008f16:	1983      	adds	r3, r0, r6
 8008f18:	785b      	ldrb	r3, [r3, #1]
 8008f1a:	469b      	mov	fp, r3
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	0018      	movs	r0, r3
 8008f20:	4010      	ands	r0, r2
 8008f22:	4681      	mov	r9, r0
 8008f24:	4213      	tst	r3, r2
 8008f26:	d000      	beq.n	8008f2a <PxMessagingTask+0x132>
				++shift;				
 8008f28:	4699      	mov	r9, r3
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8008f2a:	0890      	lsrs	r0, r2, #2
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	4003      	ands	r3, r0
 8008f30:	4890      	ldr	r0, [pc, #576]	; (8009174 <PxMessagingTask+0x37c>)
 8008f32:	71c3      	strb	r3, [r0, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 8008f34:	2360      	movs	r3, #96	; 0x60
 8008f36:	4013      	ands	r3, r2
 8008f38:	7183      	strb	r3, [r0, #6]
			if (extendCode == true) {		
 8008f3a:	0793      	lsls	r3, r2, #30
 8008f3c:	d400      	bmi.n	8008f40 <PxMessagingTask+0x148>
 8008f3e:	e770      	b.n	8008e22 <PxMessagingTask+0x2a>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8008f40:	464b      	mov	r3, r9
 8008f42:	1d1a      	adds	r2, r3, #4
 8008f44:	00e3      	lsls	r3, r4, #3
 8008f46:	1b1b      	subs	r3, r3, r4
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	4885      	ldr	r0, [pc, #532]	; (8009160 <PxMessagingTask+0x368>)
 8008f4c:	18c3      	adds	r3, r0, r3
 8008f4e:	5c9e      	ldrb	r6, [r3, r2]
 8008f50:	0236      	lsls	r6, r6, #8
 8008f52:	464a      	mov	r2, r9
 8008f54:	3203      	adds	r2, #3
 8008f56:	5c9b      	ldrb	r3, [r3, r2]
 8008f58:	18f6      	adds	r6, r6, r3
 8008f5a:	b2b6      	uxth	r6, r6
				++shift;
 8008f5c:	464b      	mov	r3, r9
 8008f5e:	3301      	adds	r3, #1
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	4699      	mov	r9, r3
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8008f64:	1e7b      	subs	r3, r7, #1
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2bfc      	cmp	r3, #252	; 0xfc
 8008f6a:	d900      	bls.n	8008f6e <PxMessagingTask+0x176>
 8008f6c:	e762      	b.n	8008e34 <PxMessagingTask+0x3c>
 8008f6e:	4a7d      	ldr	r2, [pc, #500]	; (8009164 <PxMessagingTask+0x36c>)
 8008f70:	7812      	ldrb	r2, [r2, #0]
 8008f72:	42ba      	cmp	r2, r7
 8008f74:	d100      	bne.n	8008f78 <PxMessagingTask+0x180>
 8008f76:	e75d      	b.n	8008e34 <PxMessagingTask+0x3c>
 8008f78:	2a01      	cmp	r2, #1
 8008f7a:	d100      	bne.n	8008f7e <PxMessagingTask+0x186>
 8008f7c:	e75a      	b.n	8008e34 <PxMessagingTask+0x3c>
				ForwardReceivedMessage(port);
 8008f7e:	9806      	ldr	r0, [sp, #24]
 8008f80:	f7ff fc24 	bl	80087cc <ForwardReceivedMessage>
				if (BOS.trace)
 8008f84:	4b7b      	ldr	r3, [pc, #492]	; (8009174 <PxMessagingTask+0x37c>)
 8008f86:	79db      	ldrb	r3, [r3, #7]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d087      	beq.n	8008e9c <PxMessagingTask+0xa4>
					indMode = IND_SHORT_BLINK;
 8008f8c:	4b7a      	ldr	r3, [pc, #488]	; (8009178 <PxMessagingTask+0x380>)
 8008f8e:	2203      	movs	r2, #3
 8008f90:	701a      	strb	r2, [r3, #0]
					if (code == CODE_UPDATE) {		// Remote bootloader update
 8008f92:	2e19      	cmp	r6, #25
 8008f94:	d100      	bne.n	8008f98 <PxMessagingTask+0x1a0>
 8008f96:	e778      	b.n	8008e8a <PxMessagingTask+0x92>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8008f98:	2e1a      	cmp	r6, #26
 8008f9a:	d000      	beq.n	8008f9e <PxMessagingTask+0x1a6>
 8008f9c:	e77e      	b.n	8008e9c <PxMessagingTask+0xa4>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8008f9e:	2064      	movs	r0, #100	; 0x64
 8008fa0:	f007 faba 	bl	8010518 <HAL_Delay>
 8008fa4:	00e3      	lsls	r3, r4, #3
 8008fa6:	1b1b      	subs	r3, r3, r4
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	4a6d      	ldr	r2, [pc, #436]	; (8009160 <PxMessagingTask+0x368>)
 8008fac:	18d3      	adds	r3, r2, r3
 8008fae:	464a      	mov	r2, r9
 8008fb0:	5c9b      	ldrb	r3, [r3, r2]
 8008fb2:	9a06      	ldr	r2, [sp, #24]
 8008fb4:	0039      	movs	r1, r7
 8008fb6:	4658      	mov	r0, fp
 8008fb8:	f7fa f9fc 	bl	80033b4 <remoteBootloaderUpdate>
 8008fbc:	e76e      	b.n	8008e9c <PxMessagingTask+0xa4>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008fbe:	1e4a      	subs	r2, r1, #1
 8008fc0:	00e3      	lsls	r3, r4, #3
 8008fc2:	1b1b      	subs	r3, r3, r4
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	4866      	ldr	r0, [pc, #408]	; (8009160 <PxMessagingTask+0x368>)
 8008fc8:	18c3      	adds	r3, r0, r3
 8008fca:	5c9b      	ldrb	r3, [r3, r2]
 8008fcc:	4a6b      	ldr	r2, [pc, #428]	; (800917c <PxMessagingTask+0x384>)
 8008fce:	7812      	ldrb	r2, [r2, #0]
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d100      	bne.n	8008fd6 <PxMessagingTask+0x1de>
 8008fd4:	e739      	b.n	8008e4a <PxMessagingTask+0x52>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8008fd6:	4a69      	ldr	r2, [pc, #420]	; (800917c <PxMessagingTask+0x384>)
 8008fd8:	7013      	strb	r3, [r2, #0]
 8008fda:	4a69      	ldr	r2, [pc, #420]	; (8009180 <PxMessagingTask+0x388>)
 8008fdc:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8008fde:	9906      	ldr	r1, [sp, #24]
 8008fe0:	20ff      	movs	r0, #255	; 0xff
 8008fe2:	f7ff fc13 	bl	800880c <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8008fe6:	4b60      	ldr	r3, [pc, #384]	; (8009168 <PxMessagingTask+0x370>)
 8008fe8:	5d1a      	ldrb	r2, [r3, r4]
 8008fea:	3a01      	subs	r2, #1
 8008fec:	00e3      	lsls	r3, r4, #3
 8008fee:	1b1b      	subs	r3, r3, r4
 8008ff0:	00db      	lsls	r3, r3, #3
 8008ff2:	495b      	ldr	r1, [pc, #364]	; (8009160 <PxMessagingTask+0x368>)
 8008ff4:	18cb      	adds	r3, r1, r3
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	5499      	strb	r1, [r3, r2]
 8008ffa:	e729      	b.n	8008e50 <PxMessagingTask+0x58>
				else if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 8008ffc:	3901      	subs	r1, #1
 8008ffe:	00e3      	lsls	r3, r4, #3
 8009000:	1b1b      	subs	r3, r3, r4
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	4a56      	ldr	r2, [pc, #344]	; (8009160 <PxMessagingTask+0x368>)
 8009006:	18d3      	adds	r3, r2, r3
 8009008:	5c5a      	ldrb	r2, [r3, r1]
 800900a:	4b5c      	ldr	r3, [pc, #368]	; (800917c <PxMessagingTask+0x384>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d000      	beq.n	8009014 <PxMessagingTask+0x21c>
 8009012:	e71d      	b.n	8008e50 <PxMessagingTask+0x58>
					result = BOS_ERR_MSG_Reflection;
 8009014:	2503      	movs	r5, #3
 8009016:	e71b      	b.n	8008e50 <PxMessagingTask+0x58>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009018:	4b53      	ldr	r3, [pc, #332]	; (8009168 <PxMessagingTask+0x370>)
 800901a:	5d1a      	ldrb	r2, [r3, r4]
 800901c:	3a01      	subs	r2, #1
 800901e:	00e3      	lsls	r3, r4, #3
 8009020:	1b1b      	subs	r3, r3, r4
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	494e      	ldr	r1, [pc, #312]	; (8009160 <PxMessagingTask+0x368>)
 8009026:	18cb      	adds	r3, r1, r3
 8009028:	5c9b      	ldrb	r3, [r3, r2]
 800902a:	4a54      	ldr	r2, [pc, #336]	; (800917c <PxMessagingTask+0x384>)
 800902c:	7812      	ldrb	r2, [r2, #0]
 800902e:	4293      	cmp	r3, r2
 8009030:	d100      	bne.n	8009034 <PxMessagingTask+0x23c>
 8009032:	e710      	b.n	8008e56 <PxMessagingTask+0x5e>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009034:	4a51      	ldr	r2, [pc, #324]	; (800917c <PxMessagingTask+0x384>)
 8009036:	7013      	strb	r3, [r2, #0]
 8009038:	4a51      	ldr	r2, [pc, #324]	; (8009180 <PxMessagingTask+0x388>)
 800903a:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 800903c:	9906      	ldr	r1, [sp, #24]
 800903e:	20fe      	movs	r0, #254	; 0xfe
 8009040:	f7ff fbe4 	bl	800880c <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009044:	4b48      	ldr	r3, [pc, #288]	; (8009168 <PxMessagingTask+0x370>)
 8009046:	5d18      	ldrb	r0, [r3, r4]
 8009048:	1e42      	subs	r2, r0, #1
 800904a:	00e3      	lsls	r3, r4, #3
 800904c:	1b1b      	subs	r3, r3, r4
 800904e:	00db      	lsls	r3, r3, #3
 8009050:	4943      	ldr	r1, [pc, #268]	; (8009160 <PxMessagingTask+0x368>)
 8009052:	18cb      	adds	r3, r1, r3
 8009054:	2100      	movs	r1, #0
 8009056:	5499      	strb	r1, [r3, r2]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009058:	3802      	subs	r0, #2
 800905a:	5c1d      	ldrb	r5, [r3, r0]
 800905c:	9504      	str	r5, [sp, #16]
					for(i=0 ; i<temp ; i++)
 800905e:	2200      	movs	r2, #0
 8009060:	46b4      	mov	ip, r6
 8009062:	e001      	b.n	8009068 <PxMessagingTask+0x270>
 8009064:	3201      	adds	r2, #1
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	42aa      	cmp	r2, r5
 800906a:	d20e      	bcs.n	800908a <PxMessagingTask+0x292>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 800906c:	1b41      	subs	r1, r0, r5
 800906e:	1851      	adds	r1, r2, r1
 8009070:	00e3      	lsls	r3, r4, #3
 8009072:	1b1b      	subs	r3, r3, r4
 8009074:	00db      	lsls	r3, r3, #3
 8009076:	4e3a      	ldr	r6, [pc, #232]	; (8009160 <PxMessagingTask+0x368>)
 8009078:	18f3      	adds	r3, r6, r3
 800907a:	5c59      	ldrb	r1, [r3, r1]
 800907c:	4b39      	ldr	r3, [pc, #228]	; (8009164 <PxMessagingTask+0x36c>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	4299      	cmp	r1, r3
 8009082:	d1ef      	bne.n	8009064 <PxMessagingTask+0x26c>
 8009084:	4666      	mov	r6, ip
							result = BOS_OK;
 8009086:	2500      	movs	r5, #0
 8009088:	e6e8      	b.n	8008e5c <PxMessagingTask+0x64>
 800908a:	4666      	mov	r6, ip
					result = BOS_ERR_WrongID;
 800908c:	2566      	movs	r5, #102	; 0x66
 800908e:	e6e5      	b.n	8008e5c <PxMessagingTask+0x64>
				else if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] == bcastLastID) 
 8009090:	4b35      	ldr	r3, [pc, #212]	; (8009168 <PxMessagingTask+0x370>)
 8009092:	5d1a      	ldrb	r2, [r3, r4]
 8009094:	3a01      	subs	r2, #1
 8009096:	00e3      	lsls	r3, r4, #3
 8009098:	1b1b      	subs	r3, r3, r4
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	4930      	ldr	r1, [pc, #192]	; (8009160 <PxMessagingTask+0x368>)
 800909e:	18cb      	adds	r3, r1, r3
 80090a0:	5c9a      	ldrb	r2, [r3, r2]
 80090a2:	4b36      	ldr	r3, [pc, #216]	; (800917c <PxMessagingTask+0x384>)
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d000      	beq.n	80090ac <PxMessagingTask+0x2b4>
 80090aa:	e6d7      	b.n	8008e5c <PxMessagingTask+0x64>
					result = BOS_ERR_MSG_Reflection;
 80090ac:	2503      	movs	r5, #3
 80090ae:	e6d5      	b.n	8008e5c <PxMessagingTask+0x64>
							indMode = IND_PING;	osDelay(10);
 80090b0:	4b31      	ldr	r3, [pc, #196]	; (8009178 <PxMessagingTask+0x380>)
 80090b2:	2201      	movs	r2, #1
 80090b4:	701a      	strb	r2, [r3, #0]
 80090b6:	200a      	movs	r0, #10
 80090b8:	f005 f9a0 	bl	800e3fc <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 80090bc:	4b2d      	ldr	r3, [pc, #180]	; (8009174 <PxMessagingTask+0x37c>)
 80090be:	799b      	ldrb	r3, [r3, #6]
 80090c0:	2b60      	cmp	r3, #96	; 0x60
 80090c2:	d002      	beq.n	80090ca <PxMessagingTask+0x2d2>
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	d000      	beq.n	80090ca <PxMessagingTask+0x2d2>
 80090c8:	e6e8      	b.n	8008e9c <PxMessagingTask+0xa4>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 80090ca:	2200      	movs	r2, #0
 80090cc:	2102      	movs	r1, #2
 80090ce:	4658      	mov	r0, fp
 80090d0:	f7ff fbe4 	bl	800889c <SendMessageToModule>
 80090d4:	e6e2      	b.n	8008e9c <PxMessagingTask+0xa4>
							if (!moduleAlias[myID][0])
 80090d6:	4b23      	ldr	r3, [pc, #140]	; (8009164 <PxMessagingTask+0x36c>)
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	0093      	lsls	r3, r2, #2
 80090dc:	189b      	adds	r3, r3, r2
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	4a28      	ldr	r2, [pc, #160]	; (8009184 <PxMessagingTask+0x38c>)
 80090e2:	5c9b      	ldrb	r3, [r3, r2]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d116      	bne.n	8009116 <PxMessagingTask+0x31e>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 80090e8:	465a      	mov	r2, fp
 80090ea:	4927      	ldr	r1, [pc, #156]	; (8009188 <PxMessagingTask+0x390>)
 80090ec:	4827      	ldr	r0, [pc, #156]	; (800918c <PxMessagingTask+0x394>)
 80090ee:	f00b fa8f 	bl	8014610 <siprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80090f2:	4e26      	ldr	r6, [pc, #152]	; (800918c <PxMessagingTask+0x394>)
 80090f4:	0030      	movs	r0, r6
 80090f6:	f7f7 f80f 	bl	8000118 <strlen>
 80090fa:	b282      	uxth	r2, r0
 80090fc:	4b24      	ldr	r3, [pc, #144]	; (8009190 <PxMessagingTask+0x398>)
 80090fe:	7818      	ldrb	r0, [r3, #0]
 8009100:	2301      	movs	r3, #1
 8009102:	425b      	negs	r3, r3
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	3333      	adds	r3, #51	; 0x33
 8009108:	0031      	movs	r1, r6
 800910a:	f005 f841 	bl	800e190 <writePxMutex>
							responseStatus = BOS_OK;								
 800910e:	4b21      	ldr	r3, [pc, #132]	; (8009194 <PxMessagingTask+0x39c>)
 8009110:	2200      	movs	r2, #0
 8009112:	701a      	strb	r2, [r3, #0]
							break;
 8009114:	e6c2      	b.n	8008e9c <PxMessagingTask+0xa4>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8009116:	230a      	movs	r3, #10
 8009118:	465a      	mov	r2, fp
 800911a:	4353      	muls	r3, r2
 800911c:	4a19      	ldr	r2, [pc, #100]	; (8009184 <PxMessagingTask+0x38c>)
 800911e:	189b      	adds	r3, r3, r2
 8009120:	465a      	mov	r2, fp
 8009122:	491d      	ldr	r1, [pc, #116]	; (8009198 <PxMessagingTask+0x3a0>)
 8009124:	4819      	ldr	r0, [pc, #100]	; (800918c <PxMessagingTask+0x394>)
 8009126:	f00b fa73 	bl	8014610 <siprintf>
 800912a:	e7e2      	b.n	80090f2 <PxMessagingTask+0x2fa>
							IND_ON();
 800912c:	2180      	movs	r1, #128	; 0x80
 800912e:	2090      	movs	r0, #144	; 0x90
 8009130:	2201      	movs	r2, #1
 8009132:	0109      	lsls	r1, r1, #4
 8009134:	05c0      	lsls	r0, r0, #23
 8009136:	f008 fd2e 	bl	8011b96 <HAL_GPIO_WritePin>
							break;
 800913a:	e6af      	b.n	8008e9c <PxMessagingTask+0xa4>
							IND_OFF();
 800913c:	2180      	movs	r1, #128	; 0x80
 800913e:	2090      	movs	r0, #144	; 0x90
 8009140:	2200      	movs	r2, #0
 8009142:	0109      	lsls	r1, r1, #4
 8009144:	05c0      	lsls	r0, r0, #23
 8009146:	f008 fd26 	bl	8011b96 <HAL_GPIO_WritePin>
							break;
 800914a:	e6a7      	b.n	8008e9c <PxMessagingTask+0xa4>
							IND_toggle();
 800914c:	2180      	movs	r1, #128	; 0x80
 800914e:	2090      	movs	r0, #144	; 0x90
 8009150:	0109      	lsls	r1, r1, #4
 8009152:	05c0      	lsls	r0, r0, #23
 8009154:	f008 fd25 	bl	8011ba2 <HAL_GPIO_TogglePin>
							break;
 8009158:	e6a0      	b.n	8008e9c <PxMessagingTask+0xa4>
 800915a:	46c0      	nop			; (mov r8, r8)
 800915c:	2000071d 	.word	0x2000071d
 8009160:	20000568 	.word	0x20000568
 8009164:	2000089e 	.word	0x2000089e
 8009168:	20000758 	.word	0x20000758
 800916c:	0801aa9c 	.word	0x0801aa9c
 8009170:	20000918 	.word	0x20000918
 8009174:	20006138 	.word	0x20006138
 8009178:	2000071c 	.word	0x2000071c
 800917c:	20000d5a 	.word	0x20000d5a
 8009180:	20000514 	.word	0x20000514
 8009184:	20000790 	.word	0x20000790
 8009188:	080199c0 	.word	0x080199c0
 800918c:	20000eb0 	.word	0x20000eb0
 8009190:	200002d7 	.word	0x200002d7
 8009194:	20000930 	.word	0x20000930
 8009198:	080199d4 	.word	0x080199d4
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 800919c:	465b      	mov	r3, fp
 800919e:	021b      	lsls	r3, r3, #8
 80091a0:	464a      	mov	r2, r9
 80091a2:	1c91      	adds	r1, r2, #2
 80091a4:	00e2      	lsls	r2, r4, #3
 80091a6:	1b12      	subs	r2, r2, r4
 80091a8:	00d2      	lsls	r2, r2, #3
 80091aa:	48d7      	ldr	r0, [pc, #860]	; (8009508 <PxMessagingTask+0x710>)
 80091ac:	1880      	adds	r0, r0, r2
 80091ae:	5c42      	ldrb	r2, [r0, r1]
 80091b0:	189b      	adds	r3, r3, r2
 80091b2:	49d6      	ldr	r1, [pc, #856]	; (800950c <PxMessagingTask+0x714>)
 80091b4:	00a6      	lsls	r6, r4, #2
 80091b6:	538b      	strh	r3, [r1, r6]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 80091b8:	464b      	mov	r3, r9
 80091ba:	5cc2      	ldrb	r2, [r0, r3]
 80091bc:	0212      	lsls	r2, r2, #8
 80091be:	3301      	adds	r3, #1
 80091c0:	5cc3      	ldrb	r3, [r0, r3]
 80091c2:	18d2      	adds	r2, r2, r3
 80091c4:	1989      	adds	r1, r1, r6
 80091c6:	804a      	strh	r2, [r1, #2]
							messageParams[1] = (uint8_t) myPN;
 80091c8:	4bd1      	ldr	r3, [pc, #836]	; (8009510 <PxMessagingTask+0x718>)
 80091ca:	881a      	ldrh	r2, [r3, #0]
 80091cc:	7819      	ldrb	r1, [r3, #0]
 80091ce:	4bd1      	ldr	r3, [pc, #836]	; (8009514 <PxMessagingTask+0x71c>)
 80091d0:	7059      	strb	r1, [r3, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 80091d2:	0a12      	lsrs	r2, r2, #8
 80091d4:	701a      	strb	r2, [r3, #0]
							messageParams[2] = port;
 80091d6:	9e06      	ldr	r6, [sp, #24]
 80091d8:	709e      	strb	r6, [r3, #2]
							osDelay(2);
 80091da:	2002      	movs	r0, #2
 80091dc:	f005 f90e 	bl	800e3fc <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 80091e0:	2303      	movs	r3, #3
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	3308      	adds	r3, #8
 80091e6:	2200      	movs	r2, #0
 80091e8:	2100      	movs	r1, #0
 80091ea:	0030      	movs	r0, r6
 80091ec:	f7ff f94a 	bl	8008484 <SendMessageFromPort>
							break;
 80091f0:	e654      	b.n	8008e9c <PxMessagingTask+0xa4>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 80091f2:	465b      	mov	r3, fp
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	464a      	mov	r2, r9
 80091f8:	1c91      	adds	r1, r2, #2
 80091fa:	00e2      	lsls	r2, r4, #3
 80091fc:	1b12      	subs	r2, r2, r4
 80091fe:	00d2      	lsls	r2, r2, #3
 8009200:	48c1      	ldr	r0, [pc, #772]	; (8009508 <PxMessagingTask+0x710>)
 8009202:	1880      	adds	r0, r0, r2
 8009204:	5c42      	ldrb	r2, [r0, r1]
 8009206:	189b      	adds	r3, r3, r2
 8009208:	49c0      	ldr	r1, [pc, #768]	; (800950c <PxMessagingTask+0x714>)
 800920a:	00a6      	lsls	r6, r4, #2
 800920c:	538b      	strh	r3, [r1, r6]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 800920e:	464b      	mov	r3, r9
 8009210:	5cc2      	ldrb	r2, [r0, r3]
 8009212:	0212      	lsls	r2, r2, #8
 8009214:	3301      	adds	r3, #1
 8009216:	5cc3      	ldrb	r3, [r0, r3]
 8009218:	18d2      	adds	r2, r2, r3
 800921a:	1989      	adds	r1, r1, r6
 800921c:	804a      	strh	r2, [r1, #2]
							responseStatus = BOS_OK;
 800921e:	4bbe      	ldr	r3, [pc, #760]	; (8009518 <PxMessagingTask+0x720>)
 8009220:	2200      	movs	r2, #0
 8009222:	701a      	strb	r2, [r3, #0]
							break;
 8009224:	e63a      	b.n	8008e9c <PxMessagingTask+0xa4>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 8009226:	9806      	ldr	r0, [sp, #24]
 8009228:	f7f9 ff5e 	bl	80030e8 <ExploreNeighbors>
 800922c:	4bbb      	ldr	r3, [pc, #748]	; (800951c <PxMessagingTask+0x724>)
 800922e:	2202      	movs	r2, #2
 8009230:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 8009232:	200a      	movs	r0, #10
 8009234:	f005 f8e2 	bl	800e3fc <osDelay>
 8009238:	002f      	movs	r7, r5
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 800923a:	2601      	movs	r6, #1
 800923c:	e00d      	b.n	800925a <PxMessagingTask+0x462>
									messageParams[temp] = p;
 800923e:	4bb5      	ldr	r3, [pc, #724]	; (8009514 <PxMessagingTask+0x71c>)
 8009240:	55de      	strb	r6, [r3, r7]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 8009242:	1c78      	adds	r0, r7, #1
 8009244:	0011      	movs	r1, r2
 8009246:	4ab1      	ldr	r2, [pc, #708]	; (800950c <PxMessagingTask+0x714>)
 8009248:	1889      	adds	r1, r1, r2
 800924a:	18c0      	adds	r0, r0, r3
 800924c:	2204      	movs	r2, #4
 800924e:	f00a fa45 	bl	80136dc <memcpy>
									temp += 5;		
 8009252:	3705      	adds	r7, #5
 8009254:	b2ff      	uxtb	r7, r7
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8009256:	3601      	adds	r6, #1
 8009258:	b2f6      	uxtb	r6, r6
 800925a:	2e05      	cmp	r6, #5
 800925c:	d806      	bhi.n	800926c <PxMessagingTask+0x474>
								if (neighbors[p-1][0])
 800925e:	1e71      	subs	r1, r6, #1
 8009260:	008a      	lsls	r2, r1, #2
 8009262:	4baa      	ldr	r3, [pc, #680]	; (800950c <PxMessagingTask+0x714>)
 8009264:	5ad3      	ldrh	r3, [r2, r3]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f5      	beq.n	8009256 <PxMessagingTask+0x45e>
 800926a:	e7e8      	b.n	800923e <PxMessagingTask+0x446>
 800926c:	9704      	str	r7, [sp, #16]
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 800926e:	b2ba      	uxth	r2, r7
 8009270:	210d      	movs	r1, #13
 8009272:	4658      	mov	r0, fp
 8009274:	f7ff fb12 	bl	800889c <SendMessageToModule>
							break;
 8009278:	e610      	b.n	8008e9c <PxMessagingTask+0xa4>
							temp = numOfParams/5;
 800927a:	2105      	movs	r1, #5
 800927c:	9805      	ldr	r0, [sp, #20]
 800927e:	f7f6 ff67 	bl	8000150 <__udivsi3>
 8009282:	b2c3      	uxtb	r3, r0
 8009284:	9304      	str	r3, [sp, #16]
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009286:	002e      	movs	r6, r5
 8009288:	9505      	str	r5, [sp, #20]
 800928a:	464f      	mov	r7, r9
 800928c:	4699      	mov	r9, r3
 800928e:	454e      	cmp	r6, r9
 8009290:	d219      	bcs.n	80092c6 <PxMessagingTask+0x4ce>
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 8009292:	00b1      	lsls	r1, r6, #2
 8009294:	1989      	adds	r1, r1, r6
 8009296:	187d      	adds	r5, r7, r1
 8009298:	4a9b      	ldr	r2, [pc, #620]	; (8009508 <PxMessagingTask+0x710>)
 800929a:	00e3      	lsls	r3, r4, #3
 800929c:	1b18      	subs	r0, r3, r4
 800929e:	00c0      	lsls	r0, r0, #3
 80092a0:	1810      	adds	r0, r2, r0
 80092a2:	5d40      	ldrb	r0, [r0, r5]
 80092a4:	3801      	subs	r0, #1
 80092a6:	0080      	lsls	r0, r0, #2
 80092a8:	4d9d      	ldr	r5, [pc, #628]	; (8009520 <PxMessagingTask+0x728>)
 80092aa:	1940      	adds	r0, r0, r5
 80092ac:	1c7d      	adds	r5, r7, #1
 80092ae:	46ac      	mov	ip, r5
 80092b0:	448c      	add	ip, r1
 80092b2:	1b19      	subs	r1, r3, r4
 80092b4:	00c9      	lsls	r1, r1, #3
 80092b6:	4461      	add	r1, ip
 80092b8:	1889      	adds	r1, r1, r2
 80092ba:	2204      	movs	r2, #4
 80092bc:	f00a fa0e 	bl	80136dc <memcpy>
							for (uint8_t k=0 ; k<temp ; k++)  {
 80092c0:	3601      	adds	r6, #1
 80092c2:	b2f6      	uxtb	r6, r6
 80092c4:	e7e3      	b.n	800928e <PxMessagingTask+0x496>
 80092c6:	9d05      	ldr	r5, [sp, #20]
							responseStatus = BOS_OK;
 80092c8:	4b93      	ldr	r3, [pc, #588]	; (8009518 <PxMessagingTask+0x720>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	701a      	strb	r2, [r3, #0]
							break;
 80092ce:	e5e5      	b.n	8008e9c <PxMessagingTask+0xa4>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 80092d0:	3601      	adds	r6, #1
 80092d2:	b2f6      	uxtb	r6, r6
 80092d4:	2e05      	cmp	r6, #5
 80092d6:	d813      	bhi.n	8009300 <PxMessagingTask+0x508>
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 80092d8:	9b06      	ldr	r3, [sp, #24]
 80092da:	429e      	cmp	r6, r3
 80092dc:	d0f8      	beq.n	80092d0 <PxMessagingTask+0x4d8>
 80092de:	0030      	movs	r0, r6
 80092e0:	f004 ff38 	bl	800e154 <GetUart>
 80092e4:	19ba      	adds	r2, r7, r6
 80092e6:	3a01      	subs	r2, #1
 80092e8:	00e3      	lsls	r3, r4, #3
 80092ea:	1b1b      	subs	r3, r3, r4
 80092ec:	00db      	lsls	r3, r3, #3
 80092ee:	4986      	ldr	r1, [pc, #536]	; (8009508 <PxMessagingTask+0x710>)
 80092f0:	18cb      	adds	r3, r1, r3
 80092f2:	5c99      	ldrb	r1, [r3, r2]
 80092f4:	f004 ffc8 	bl	800e288 <SwapUartPins>
 80092f8:	e7ea      	b.n	80092d0 <PxMessagingTask+0x4d8>
				if (result == BOS_OK)
 80092fa:	2601      	movs	r6, #1
 80092fc:	464f      	mov	r7, r9
 80092fe:	e7e9      	b.n	80092d4 <PxMessagingTask+0x4dc>
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 8009300:	9806      	ldr	r0, [sp, #24]
 8009302:	f004 ff27 	bl	800e154 <GetUart>
 8009306:	003a      	movs	r2, r7
 8009308:	320a      	adds	r2, #10
 800930a:	00e3      	lsls	r3, r4, #3
 800930c:	1b1b      	subs	r3, r3, r4
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	497d      	ldr	r1, [pc, #500]	; (8009508 <PxMessagingTask+0x710>)
 8009312:	18cb      	adds	r3, r1, r3
 8009314:	5c99      	ldrb	r1, [r3, r2]
 8009316:	f004 ffb7 	bl	800e288 <SwapUartPins>
							break;
 800931a:	e5bf      	b.n	8008e9c <PxMessagingTask+0xa4>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 800931c:	00e3      	lsls	r3, r4, #3
 800931e:	1b1b      	subs	r3, r3, r4
 8009320:	00db      	lsls	r3, r3, #3
 8009322:	4a79      	ldr	r2, [pc, #484]	; (8009508 <PxMessagingTask+0x710>)
 8009324:	18d3      	adds	r3, r2, r3
 8009326:	464a      	mov	r2, r9
 8009328:	5c9b      	ldrb	r3, [r3, r2]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d109      	bne.n	8009342 <PxMessagingTask+0x54a>
								myID = cMessage[port-1][1+shift];
 800932e:	4649      	mov	r1, r9
 8009330:	3101      	adds	r1, #1
 8009332:	2238      	movs	r2, #56	; 0x38
 8009334:	4362      	muls	r2, r4
 8009336:	4b74      	ldr	r3, [pc, #464]	; (8009508 <PxMessagingTask+0x710>)
 8009338:	189b      	adds	r3, r3, r2
 800933a:	5c5a      	ldrb	r2, [r3, r1]
 800933c:	4b79      	ldr	r3, [pc, #484]	; (8009524 <PxMessagingTask+0x72c>)
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	e5ac      	b.n	8008e9c <PxMessagingTask+0xa4>
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 8009342:	2b01      	cmp	r3, #1
 8009344:	d000      	beq.n	8009348 <PxMessagingTask+0x550>
 8009346:	e5a9      	b.n	8008e9c <PxMessagingTask+0xa4>
								messageParams[0] = 0;											/* change own ID */
 8009348:	4a72      	ldr	r2, [pc, #456]	; (8009514 <PxMessagingTask+0x71c>)
 800934a:	2100      	movs	r1, #0
 800934c:	7011      	strb	r1, [r2, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 800934e:	464b      	mov	r3, r9
 8009350:	1c58      	adds	r0, r3, #1
 8009352:	2338      	movs	r3, #56	; 0x38
 8009354:	4363      	muls	r3, r4
 8009356:	4e6c      	ldr	r6, [pc, #432]	; (8009508 <PxMessagingTask+0x710>)
 8009358:	18f3      	adds	r3, r6, r3
 800935a:	5c18      	ldrb	r0, [r3, r0]
 800935c:	7050      	strb	r0, [r2, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 800935e:	464a      	mov	r2, r9
 8009360:	3202      	adds	r2, #2
 8009362:	5c98      	ldrb	r0, [r3, r2]
 8009364:	2303      	movs	r3, #3
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	330d      	adds	r3, #13
 800936a:	000a      	movs	r2, r1
 800936c:	f7ff f88a 	bl	8008484 <SendMessageFromPort>
 8009370:	e594      	b.n	8008e9c <PxMessagingTask+0xa4>
							if (longMessage) {
 8009372:	4b6d      	ldr	r3, [pc, #436]	; (8009528 <PxMessagingTask+0x730>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d011      	beq.n	800939e <PxMessagingTask+0x5a6>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 800937a:	4e6c      	ldr	r6, [pc, #432]	; (800952c <PxMessagingTask+0x734>)
 800937c:	8833      	ldrh	r3, [r6, #0]
 800937e:	486c      	ldr	r0, [pc, #432]	; (8009530 <PxMessagingTask+0x738>)
 8009380:	1818      	adds	r0, r3, r0
 8009382:	2138      	movs	r1, #56	; 0x38
 8009384:	4361      	muls	r1, r4
 8009386:	4449      	add	r1, r9
 8009388:	4b5f      	ldr	r3, [pc, #380]	; (8009508 <PxMessagingTask+0x710>)
 800938a:	18c9      	adds	r1, r1, r3
 800938c:	9f05      	ldr	r7, [sp, #20]
 800938e:	003a      	movs	r2, r7
 8009390:	f00a f9a4 	bl	80136dc <memcpy>
								longMessageLastPtr += numOfParams;
 8009394:	8832      	ldrh	r2, [r6, #0]
 8009396:	46bc      	mov	ip, r7
 8009398:	4462      	add	r2, ip
 800939a:	8032      	strh	r2, [r6, #0]
 800939c:	e57e      	b.n	8008e9c <PxMessagingTask+0xa4>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800939e:	4e63      	ldr	r6, [pc, #396]	; (800952c <PxMessagingTask+0x734>)
 80093a0:	8830      	ldrh	r0, [r6, #0]
 80093a2:	4b63      	ldr	r3, [pc, #396]	; (8009530 <PxMessagingTask+0x738>)
 80093a4:	469c      	mov	ip, r3
 80093a6:	4460      	add	r0, ip
 80093a8:	2138      	movs	r1, #56	; 0x38
 80093aa:	4361      	muls	r1, r4
 80093ac:	4449      	add	r1, r9
 80093ae:	4b56      	ldr	r3, [pc, #344]	; (8009508 <PxMessagingTask+0x710>)
 80093b0:	18c9      	adds	r1, r1, r3
 80093b2:	9b05      	ldr	r3, [sp, #20]
 80093b4:	4699      	mov	r9, r3
 80093b6:	001a      	movs	r2, r3
 80093b8:	f00a f990 	bl	80136dc <memcpy>
								longMessageLastPtr += numOfParams;
 80093bc:	8837      	ldrh	r7, [r6, #0]
 80093be:	444f      	add	r7, r9
 80093c0:	b2bf      	uxth	r7, r7
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 80093c2:	2116      	movs	r1, #22
 80093c4:	0038      	movs	r0, r7
 80093c6:	f7f6 fec3 	bl	8000150 <__udivsi3>
 80093ca:	4b5a      	ldr	r3, [pc, #360]	; (8009534 <PxMessagingTask+0x73c>)
 80093cc:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 80093ce:	003a      	movs	r2, r7
 80093d0:	4957      	ldr	r1, [pc, #348]	; (8009530 <PxMessagingTask+0x738>)
 80093d2:	4859      	ldr	r0, [pc, #356]	; (8009538 <PxMessagingTask+0x740>)
 80093d4:	f00a f982 	bl	80136dc <memcpy>
								longMessageLastPtr = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	8033      	strh	r3, [r6, #0]
 80093dc:	e55e      	b.n	8008e9c <PxMessagingTask+0xa4>
									messageParams[temp++] = p;
 80093de:	9904      	ldr	r1, [sp, #16]
 80093e0:	1c4b      	adds	r3, r1, #1
 80093e2:	4a4c      	ldr	r2, [pc, #304]	; (8009514 <PxMessagingTask+0x71c>)
 80093e4:	5456      	strb	r6, [r2, r1]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	9304      	str	r3, [sp, #16]
								for (p=1 ; p<=NumOfPorts ; p++) {
 80093ea:	3601      	adds	r6, #1
 80093ec:	b2f6      	uxtb	r6, r6
 80093ee:	2e05      	cmp	r6, #5
 80093f0:	d80b      	bhi.n	800940a <PxMessagingTask+0x612>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 80093f2:	0030      	movs	r0, r6
 80093f4:	f004 feae 	bl	800e154 <GetUart>
 80093f8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80093fa:	2380      	movs	r3, #128	; 0x80
 80093fc:	021b      	lsls	r3, r3, #8
 80093fe:	429a      	cmp	r2, r3
 8009400:	d1f3      	bne.n	80093ea <PxMessagingTask+0x5f2>
 8009402:	e7ec      	b.n	80093de <PxMessagingTask+0x5e6>
				if (result == BOS_OK)
 8009404:	9504      	str	r5, [sp, #16]
 8009406:	2601      	movs	r6, #1
 8009408:	e7f1      	b.n	80093ee <PxMessagingTask+0x5f6>
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 800940a:	466b      	mov	r3, sp
 800940c:	8a1a      	ldrh	r2, [r3, #16]
 800940e:	2114      	movs	r1, #20
 8009410:	4658      	mov	r0, fp
 8009412:	f7ff fa43 	bl	800889c <SendMessageToModule>
							break;
 8009416:	e541      	b.n	8008e9c <PxMessagingTask+0xa4>
				if (result == BOS_OK)
 8009418:	002b      	movs	r3, r5
 800941a:	465f      	mov	r7, fp
							for (p=0 ; p<numOfParams ; p++) 
 800941c:	9a05      	ldr	r2, [sp, #20]
 800941e:	4293      	cmp	r3, r2
 8009420:	d214      	bcs.n	800944c <PxMessagingTask+0x654>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 8009422:	1e7a      	subs	r2, r7, #1
 8009424:	4649      	mov	r1, r9
 8009426:	18c8      	adds	r0, r1, r3
 8009428:	00e1      	lsls	r1, r4, #3
 800942a:	1b09      	subs	r1, r1, r4
 800942c:	00c9      	lsls	r1, r1, #3
 800942e:	4e36      	ldr	r6, [pc, #216]	; (8009508 <PxMessagingTask+0x710>)
 8009430:	1871      	adds	r1, r6, r1
 8009432:	5c08      	ldrb	r0, [r1, r0]
 8009434:	3801      	subs	r0, #1
 8009436:	2680      	movs	r6, #128	; 0x80
 8009438:	0236      	lsls	r6, r6, #8
 800943a:	4106      	asrs	r6, r0
 800943c:	483f      	ldr	r0, [pc, #252]	; (800953c <PxMessagingTask+0x744>)
 800943e:	0052      	lsls	r2, r2, #1
 8009440:	5a11      	ldrh	r1, [r2, r0]
 8009442:	4331      	orrs	r1, r6
 8009444:	5211      	strh	r1, [r2, r0]
							for (p=0 ; p<numOfParams ; p++) 
 8009446:	3301      	adds	r3, #1
 8009448:	b2db      	uxtb	r3, r3
 800944a:	e7e7      	b.n	800941c <PxMessagingTask+0x624>
 800944c:	46bb      	mov	fp, r7
							responseStatus = BOS_OK;
 800944e:	4b32      	ldr	r3, [pc, #200]	; (8009518 <PxMessagingTask+0x720>)
 8009450:	2200      	movs	r2, #0
 8009452:	701a      	strb	r2, [r3, #0]
							break;		
 8009454:	e522      	b.n	8008e9c <PxMessagingTask+0xa4>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 8009456:	00e3      	lsls	r3, r4, #3
 8009458:	1b1b      	subs	r3, r3, r4
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	4a2a      	ldr	r2, [pc, #168]	; (8009508 <PxMessagingTask+0x710>)
 800945e:	18d3      	adds	r3, r2, r3
 8009460:	464a      	mov	r2, r9
 8009462:	5c9f      	ldrb	r7, [r3, r2]
 8009464:	063f      	lsls	r7, r7, #24
 8009466:	3201      	adds	r2, #1
 8009468:	5c9a      	ldrb	r2, [r3, r2]
 800946a:	0412      	lsls	r2, r2, #16
 800946c:	18bf      	adds	r7, r7, r2
 800946e:	464a      	mov	r2, r9
 8009470:	3202      	adds	r2, #2
 8009472:	5c9a      	ldrb	r2, [r3, r2]
 8009474:	0212      	lsls	r2, r2, #8
 8009476:	18bf      	adds	r7, r7, r2
 8009478:	464a      	mov	r2, r9
 800947a:	3203      	adds	r2, #3
 800947c:	5c9a      	ldrb	r2, [r3, r2]
 800947e:	18bf      	adds	r7, r7, r2
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 8009480:	2204      	movs	r2, #4
 8009482:	4694      	mov	ip, r2
 8009484:	44e1      	add	r9, ip
 8009486:	464a      	mov	r2, r9
 8009488:	5c9b      	ldrb	r3, [r3, r2]
 800948a:	2bff      	cmp	r3, #255	; 0xff
 800948c:	d00f      	beq.n	80094ae <PxMessagingTask+0x6b6>
									for (p=0 ; p<numOfParams ; p++) 
 800948e:	002e      	movs	r6, r5
 8009490:	9508      	str	r5, [sp, #32]
 8009492:	003b      	movs	r3, r7
 8009494:	464f      	mov	r7, r9
 8009496:	4699      	mov	r9, r3
 8009498:	e00d      	b.n	80094b6 <PxMessagingTask+0x6be>
										UpdateBaudrate(p, temp32); 
 800949a:	0039      	movs	r1, r7
 800949c:	0030      	movs	r0, r6
 800949e:	f004 fee9 	bl	800e274 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 80094a2:	3601      	adds	r6, #1
 80094a4:	b2f6      	uxtb	r6, r6
 80094a6:	2e05      	cmp	r6, #5
 80094a8:	d9f7      	bls.n	800949a <PxMessagingTask+0x6a2>
								temp = temp32 = 0;
 80094aa:	9504      	str	r5, [sp, #16]
 80094ac:	e4f6      	b.n	8008e9c <PxMessagingTask+0xa4>
									for (p=1 ; p<=NumOfPorts ; p++) 
 80094ae:	2601      	movs	r6, #1
 80094b0:	e7f9      	b.n	80094a6 <PxMessagingTask+0x6ae>
									for (p=0 ; p<numOfParams ; p++) 
 80094b2:	3601      	adds	r6, #1
 80094b4:	b2f6      	uxtb	r6, r6
 80094b6:	9b05      	ldr	r3, [sp, #20]
 80094b8:	429e      	cmp	r6, r3
 80094ba:	d20f      	bcs.n	80094dc <PxMessagingTask+0x6e4>
										temp = cMessage[port-1][4+shift+p];
 80094bc:	19f2      	adds	r2, r6, r7
 80094be:	00e3      	lsls	r3, r4, #3
 80094c0:	1b1b      	subs	r3, r3, r4
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4910      	ldr	r1, [pc, #64]	; (8009508 <PxMessagingTask+0x710>)
 80094c6:	18cb      	adds	r3, r1, r3
 80094c8:	5c9d      	ldrb	r5, [r3, r2]
										if (temp>0 && temp<=NumOfPorts)	{
 80094ca:	1e6b      	subs	r3, r5, #1
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d8ef      	bhi.n	80094b2 <PxMessagingTask+0x6ba>
											UpdateBaudrate(temp, temp32); 
 80094d2:	4649      	mov	r1, r9
 80094d4:	0028      	movs	r0, r5
 80094d6:	f004 fecd 	bl	800e274 <UpdateBaudrate>
 80094da:	e7ea      	b.n	80094b2 <PxMessagingTask+0x6ba>
 80094dc:	9504      	str	r5, [sp, #16]
 80094de:	9d08      	ldr	r5, [sp, #32]
 80094e0:	e4dc      	b.n	8008e9c <PxMessagingTask+0xa4>
								SaveToRO();
 80094e2:	f001 fd9b 	bl	800b01c <SaveToRO>
							SaveEEportsDir();
 80094e6:	f7f9 f9b7 	bl	8002858 <SaveEEportsDir>
							indMode = IND_PING;
 80094ea:	4b0c      	ldr	r3, [pc, #48]	; (800951c <PxMessagingTask+0x724>)
 80094ec:	2201      	movs	r2, #1
 80094ee:	701a      	strb	r2, [r3, #0]
							break;
 80094f0:	e4d4      	b.n	8008e9c <PxMessagingTask+0xa4>
							ClearEEportsDir();
 80094f2:	f7f9 f9cf 	bl	8002894 <ClearEEportsDir>
							ClearROtopology();
 80094f6:	f001 fe87 	bl	800b208 <ClearROtopology>
							osDelay(100);
 80094fa:	2064      	movs	r0, #100	; 0x64
 80094fc:	f004 ff7e 	bl	800e3fc <osDelay>
							indMode = IND_TOPOLOGY;
 8009500:	4b06      	ldr	r3, [pc, #24]	; (800951c <PxMessagingTask+0x724>)
 8009502:	2202      	movs	r2, #2
 8009504:	701a      	strb	r2, [r3, #0]
							break;
 8009506:	e4c9      	b.n	8008e9c <PxMessagingTask+0xa4>
 8009508:	20000568 	.word	0x20000568
 800950c:	200008a0 	.word	0x200008a0
 8009510:	20000050 	.word	0x20000050
 8009514:	20000760 	.word	0x20000760
 8009518:	20000930 	.word	0x20000930
 800951c:	2000071c 	.word	0x2000071c
 8009520:	200008b4 	.word	0x200008b4
 8009524:	2000089e 	.word	0x2000089e
 8009528:	2000071d 	.word	0x2000071d
 800952c:	2000071e 	.word	0x2000071e
 8009530:	20000d90 	.word	0x20000d90
 8009534:	2000001c 	.word	0x2000001c
 8009538:	200002d8 	.word	0x200002d8
 800953c:	200065c0 	.word	0x200065c0
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009540:	f005 f87c 	bl	800e63c <FreeRTOS_CLIGetOutputBuffer>
 8009544:	0006      	movs	r6, r0
							if (dst == BOS_BROADCAST)
 8009546:	2fff      	cmp	r7, #255	; 0xff
 8009548:	d00e      	beq.n	8009568 <PxMessagingTask+0x770>
							else if (dst == BOS_MULTICAST)
 800954a:	2ffe      	cmp	r7, #254	; 0xfe
 800954c:	d01a      	beq.n	8009584 <PxMessagingTask+0x78c>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 800954e:	2138      	movs	r1, #56	; 0x38
 8009550:	4361      	muls	r1, r4
 8009552:	4449      	add	r1, r9
 8009554:	4be6      	ldr	r3, [pc, #920]	; (80098f0 <PxMessagingTask+0xaf8>)
 8009556:	18c9      	adds	r1, r1, r3
 8009558:	9a05      	ldr	r2, [sp, #20]
 800955a:	48e6      	ldr	r0, [pc, #920]	; (80098f4 <PxMessagingTask+0xafc>)
 800955c:	f00a f8be 	bl	80136dc <memcpy>
 8009560:	46a1      	mov	r9, r4
 8009562:	9504      	str	r5, [sp, #16]
 8009564:	0034      	movs	r4, r6
 8009566:	e01f      	b.n	80095a8 <PxMessagingTask+0x7b0>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 8009568:	2138      	movs	r1, #56	; 0x38
 800956a:	4361      	muls	r1, r4
 800956c:	4449      	add	r1, r9
 800956e:	4be0      	ldr	r3, [pc, #896]	; (80098f0 <PxMessagingTask+0xaf8>)
 8009570:	18c9      	adds	r1, r1, r3
 8009572:	9a05      	ldr	r2, [sp, #20]
 8009574:	3a01      	subs	r2, #1
 8009576:	48df      	ldr	r0, [pc, #892]	; (80098f4 <PxMessagingTask+0xafc>)
 8009578:	f00a f8b0 	bl	80136dc <memcpy>
 800957c:	46a1      	mov	r9, r4
 800957e:	9504      	str	r5, [sp, #16]
 8009580:	0034      	movs	r4, r6
 8009582:	e011      	b.n	80095a8 <PxMessagingTask+0x7b0>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 8009584:	2138      	movs	r1, #56	; 0x38
 8009586:	4361      	muls	r1, r4
 8009588:	4449      	add	r1, r9
 800958a:	4bd9      	ldr	r3, [pc, #868]	; (80098f0 <PxMessagingTask+0xaf8>)
 800958c:	18c9      	adds	r1, r1, r3
 800958e:	9b05      	ldr	r3, [sp, #20]
 8009590:	9a04      	ldr	r2, [sp, #16]
 8009592:	1a9a      	subs	r2, r3, r2
 8009594:	3a02      	subs	r2, #2
 8009596:	48d7      	ldr	r0, [pc, #860]	; (80098f4 <PxMessagingTask+0xafc>)
 8009598:	f00a f8a0 	bl	80136dc <memcpy>
 800959c:	46a1      	mov	r9, r4
 800959e:	9504      	str	r5, [sp, #16]
 80095a0:	0034      	movs	r4, r6
 80095a2:	e001      	b.n	80095a8 <PxMessagingTask+0x7b0>
							while( xReturned != pdFALSE );								
 80095a4:	2d00      	cmp	r5, #0
 80095a6:	d023      	beq.n	80095f0 <PxMessagingTask+0x7f8>
								temp = PcPort; PcPort = port;
 80095a8:	4fd3      	ldr	r7, [pc, #844]	; (80098f8 <PxMessagingTask+0xb00>)
 80095aa:	783e      	ldrb	r6, [r7, #0]
 80095ac:	9b06      	ldr	r3, [sp, #24]
 80095ae:	703b      	strb	r3, [r7, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 80095b0:	2299      	movs	r2, #153	; 0x99
 80095b2:	0092      	lsls	r2, r2, #2
 80095b4:	0021      	movs	r1, r4
 80095b6:	48cf      	ldr	r0, [pc, #828]	; (80098f4 <PxMessagingTask+0xafc>)
 80095b8:	f004 ffd8 	bl	800e56c <FreeRTOS_CLIProcessCommand>
 80095bc:	0005      	movs	r5, r0
								PcPort = temp;
 80095be:	703e      	strb	r6, [r7, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 80095c0:	4bce      	ldr	r3, [pc, #824]	; (80098fc <PxMessagingTask+0xb04>)
 80095c2:	799b      	ldrb	r3, [r3, #6]
 80095c4:	2b60      	cmp	r3, #96	; 0x60
 80095c6:	d1ed      	bne.n	80095a4 <PxMessagingTask+0x7ac>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 80095c8:	0020      	movs	r0, r4
 80095ca:	f7f6 fda5 	bl	8000118 <strlen>
 80095ce:	0002      	movs	r2, r0
 80095d0:	0021      	movs	r1, r4
 80095d2:	48cb      	ldr	r0, [pc, #812]	; (8009900 <PxMessagingTask+0xb08>)
 80095d4:	f00a f882 	bl	80136dc <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 80095d8:	0020      	movs	r0, r4
 80095da:	f7f6 fd9d 	bl	8000118 <strlen>
 80095de:	b282      	uxth	r2, r0
 80095e0:	2118      	movs	r1, #24
 80095e2:	4658      	mov	r0, fp
 80095e4:	f7ff f95a 	bl	800889c <SendMessageToModule>
									osDelay(10); 
 80095e8:	200a      	movs	r0, #10
 80095ea:	f004 ff07 	bl	800e3fc <osDelay>
 80095ee:	e7d9      	b.n	80095a4 <PxMessagingTask+0x7ac>
 80095f0:	464c      	mov	r4, r9
 80095f2:	9d04      	ldr	r5, [sp, #16]
 80095f4:	9604      	str	r6, [sp, #16]
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 80095f6:	2232      	movs	r2, #50	; 0x32
 80095f8:	2100      	movs	r1, #0
 80095fa:	48be      	ldr	r0, [pc, #760]	; (80098f4 <PxMessagingTask+0xafc>)
 80095fc:	f00a f877 	bl	80136ee <memset>
							break;
 8009600:	e44c      	b.n	8008e9c <PxMessagingTask+0xa4>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009602:	f005 f81b 	bl	800e63c <FreeRTOS_CLIGetOutputBuffer>
 8009606:	0006      	movs	r6, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8009608:	f7f6 fd86 	bl	8000118 <strlen>
 800960c:	0002      	movs	r2, r0
 800960e:	2100      	movs	r1, #0
 8009610:	0030      	movs	r0, r6
 8009612:	f00a f86c 	bl	80136ee <memset>
							if (longMessage) {
 8009616:	4bbb      	ldr	r3, [pc, #748]	; (8009904 <PxMessagingTask+0xb0c>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d010      	beq.n	8009640 <PxMessagingTask+0x848>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800961e:	4fba      	ldr	r7, [pc, #744]	; (8009908 <PxMessagingTask+0xb10>)
 8009620:	8838      	ldrh	r0, [r7, #0]
 8009622:	1830      	adds	r0, r6, r0
 8009624:	2138      	movs	r1, #56	; 0x38
 8009626:	4361      	muls	r1, r4
 8009628:	4449      	add	r1, r9
 800962a:	4bb1      	ldr	r3, [pc, #708]	; (80098f0 <PxMessagingTask+0xaf8>)
 800962c:	18c9      	adds	r1, r1, r3
 800962e:	9e05      	ldr	r6, [sp, #20]
 8009630:	0032      	movs	r2, r6
 8009632:	f00a f853 	bl	80136dc <memcpy>
								longMessageLastPtr += numOfParams;
 8009636:	883a      	ldrh	r2, [r7, #0]
 8009638:	46b4      	mov	ip, r6
 800963a:	4462      	add	r2, ip
 800963c:	803a      	strh	r2, [r7, #0]
 800963e:	e42d      	b.n	8008e9c <PxMessagingTask+0xa4>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009640:	4fb1      	ldr	r7, [pc, #708]	; (8009908 <PxMessagingTask+0xb10>)
 8009642:	8838      	ldrh	r0, [r7, #0]
 8009644:	1830      	adds	r0, r6, r0
 8009646:	2138      	movs	r1, #56	; 0x38
 8009648:	4361      	muls	r1, r4
 800964a:	4449      	add	r1, r9
 800964c:	4ba8      	ldr	r3, [pc, #672]	; (80098f0 <PxMessagingTask+0xaf8>)
 800964e:	18c9      	adds	r1, r1, r3
 8009650:	9a05      	ldr	r2, [sp, #20]
 8009652:	f00a f843 	bl	80136dc <memcpy>
								longMessageLastPtr = 0;
 8009656:	2100      	movs	r1, #0
 8009658:	8039      	strh	r1, [r7, #0]
								responseStatus = BOS_OK;
 800965a:	4bac      	ldr	r3, [pc, #688]	; (800990c <PxMessagingTask+0xb14>)
 800965c:	7019      	strb	r1, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 800965e:	000b      	movs	r3, r1
 8009660:	000a      	movs	r2, r1
 8009662:	48ab      	ldr	r0, [pc, #684]	; (8009910 <PxMessagingTask+0xb18>)
 8009664:	6800      	ldr	r0, [r0, #0]
 8009666:	f006 fb1b 	bl	800fca0 <xTaskGenericNotify>
 800966a:	e417      	b.n	8008e9c <PxMessagingTask+0xa4>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 800966c:	4ba9      	ldr	r3, [pc, #676]	; (8009914 <PxMessagingTask+0xb1c>)
 800966e:	4aaa      	ldr	r2, [pc, #680]	; (8009918 <PxMessagingTask+0xb20>)
 8009670:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 8009672:	4baa      	ldr	r3, [pc, #680]	; (800991c <PxMessagingTask+0xb24>)
 8009674:	2201      	movs	r2, #1
 8009676:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 8009678:	200a      	movs	r0, #10
 800967a:	f004 febf 	bl	800e3fc <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	4ba7      	ldr	r3, [pc, #668]	; (8009920 <PxMessagingTask+0xb28>)
 8009684:	4aa7      	ldr	r2, [pc, #668]	; (8009924 <PxMessagingTask+0xb2c>)
 8009686:	60da      	str	r2, [r3, #12]
 8009688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800968c:	46c0      	nop			; (mov r8, r8)
 800968e:	e7fd      	b.n	800968c <PxMessagingTask+0x894>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 8009690:	00e3      	lsls	r3, r4, #3
 8009692:	1b1b      	subs	r3, r3, r4
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	4e96      	ldr	r6, [pc, #600]	; (80098f0 <PxMessagingTask+0xaf8>)
 8009698:	18f6      	adds	r6, r6, r3
 800969a:	464b      	mov	r3, r9
 800969c:	5cf0      	ldrb	r0, [r6, r3]
 800969e:	2300      	movs	r3, #0
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	3319      	adds	r3, #25
 80096a4:	2200      	movs	r2, #0
 80096a6:	2100      	movs	r1, #0
 80096a8:	f7fe feec 	bl	8008484 <SendMessageFromPort>
								osDelay(100);
 80096ac:	2064      	movs	r0, #100	; 0x64
 80096ae:	f004 fea5 	bl	800e3fc <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 80096b2:	464b      	mov	r3, r9
 80096b4:	5cf3      	ldrb	r3, [r6, r3]
 80096b6:	4a9c      	ldr	r2, [pc, #624]	; (8009928 <PxMessagingTask+0xb30>)
 80096b8:	7811      	ldrb	r1, [r2, #0]
 80096ba:	9a06      	ldr	r2, [sp, #24]
 80096bc:	4658      	mov	r0, fp
 80096be:	f7f9 fe79 	bl	80033b4 <remoteBootloaderUpdate>
								break;
 80096c2:	f7ff fbeb 	bl	8008e9c <PxMessagingTask+0xa4>
							temp = cMessage[port-1][11+shift];
 80096c6:	464b      	mov	r3, r9
 80096c8:	9308      	str	r3, [sp, #32]
 80096ca:	464f      	mov	r7, r9
 80096cc:	370b      	adds	r7, #11
 80096ce:	00e3      	lsls	r3, r4, #3
 80096d0:	1b1b      	subs	r3, r3, r4
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	4a86      	ldr	r2, [pc, #536]	; (80098f0 <PxMessagingTask+0xaf8>)
 80096d6:	18d3      	adds	r3, r2, r3
 80096d8:	5ddb      	ldrb	r3, [r3, r7]
 80096da:	9304      	str	r3, [sp, #16]
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 80096dc:	9b05      	ldr	r3, [sp, #20]
 80096de:	2b0f      	cmp	r3, #15
 80096e0:	d07c      	beq.n	80097dc <PxMessagingTask+0x9e4>
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 80096e2:	9b05      	ldr	r3, [sp, #20]
 80096e4:	2b11      	cmp	r3, #17
 80096e6:	d100      	bne.n	80096ea <PxMessagingTask+0x8f2>
 80096e8:	e080      	b.n	80097ec <PxMessagingTask+0x9f4>
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 80096ea:	00e3      	lsls	r3, r4, #3
 80096ec:	1b1b      	subs	r3, r3, r4
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4a7f      	ldr	r2, [pc, #508]	; (80098f0 <PxMessagingTask+0xaf8>)
 80096f2:	18d3      	adds	r3, r2, r3
 80096f4:	464a      	mov	r2, r9
 80096f6:	5c99      	ldrb	r1, [r3, r2]
 80096f8:	0609      	lsls	r1, r1, #24
 80096fa:	3201      	adds	r2, #1
 80096fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80096fe:	5c9a      	ldrb	r2, [r3, r2]
 8009700:	0412      	lsls	r2, r2, #16
 8009702:	188a      	adds	r2, r1, r2
 8009704:	4649      	mov	r1, r9
 8009706:	3102      	adds	r1, #2
 8009708:	910c      	str	r1, [sp, #48]	; 0x30
 800970a:	5c59      	ldrb	r1, [r3, r1]
 800970c:	0209      	lsls	r1, r1, #8
 800970e:	1852      	adds	r2, r2, r1
 8009710:	2103      	movs	r1, #3
 8009712:	4449      	add	r1, r9
 8009714:	468c      	mov	ip, r1
 8009716:	5c59      	ldrb	r1, [r3, r1]
 8009718:	1852      	adds	r2, r2, r1
 800971a:	9209      	str	r2, [sp, #36]	; 0x24
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 800971c:	464a      	mov	r2, r9
 800971e:	3204      	adds	r2, #4
 8009720:	920d      	str	r2, [sp, #52]	; 0x34
 8009722:	5c9e      	ldrb	r6, [r3, r2]
 8009724:	0636      	lsls	r6, r6, #24
 8009726:	464a      	mov	r2, r9
 8009728:	1d51      	adds	r1, r2, #5
 800972a:	5c5a      	ldrb	r2, [r3, r1]
 800972c:	0412      	lsls	r2, r2, #16
 800972e:	18b6      	adds	r6, r6, r2
 8009730:	464a      	mov	r2, r9
 8009732:	1d90      	adds	r0, r2, #6
 8009734:	5c1a      	ldrb	r2, [r3, r0]
 8009736:	0212      	lsls	r2, r2, #8
 8009738:	18b2      	adds	r2, r6, r2
 800973a:	464e      	mov	r6, r9
 800973c:	3607      	adds	r6, #7
 800973e:	5d9b      	ldrb	r3, [r3, r6]
 8009740:	18d3      	adds	r3, r2, r3
 8009742:	930a      	str	r3, [sp, #40]	; 0x28
							if (temp == false)
 8009744:	9b04      	ldr	r3, [sp, #16]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d172      	bne.n	8009830 <PxMessagingTask+0xa38>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 800974a:	00e3      	lsls	r3, r4, #3
 800974c:	1b1b      	subs	r3, r3, r4
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	4a67      	ldr	r2, [pc, #412]	; (80098f0 <PxMessagingTask+0xaf8>)
 8009752:	18d3      	adds	r3, r2, r3
 8009754:	464a      	mov	r2, r9
 8009756:	3209      	adds	r2, #9
 8009758:	5c9b      	ldrb	r3, [r3, r2]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d008      	beq.n	8009770 <PxMessagingTask+0x978>
 800975e:	2238      	movs	r2, #56	; 0x38
 8009760:	4362      	muls	r2, r4
 8009762:	4963      	ldr	r1, [pc, #396]	; (80098f0 <PxMessagingTask+0xaf8>)
 8009764:	1889      	adds	r1, r1, r2
 8009766:	464a      	mov	r2, r9
 8009768:	320a      	adds	r2, #10
 800976a:	5c8a      	ldrb	r2, [r1, r2]
 800976c:	2a00      	cmp	r2, #0
 800976e:	d146      	bne.n	80097fe <PxMessagingTask+0xa06>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 8009770:	00e3      	lsls	r3, r4, #3
 8009772:	1b1b      	subs	r3, r3, r4
 8009774:	00db      	lsls	r3, r3, #3
 8009776:	4a5e      	ldr	r2, [pc, #376]	; (80098f0 <PxMessagingTask+0xaf8>)
 8009778:	18d3      	adds	r3, r2, r3
 800977a:	5ddb      	ldrb	r3, [r3, r7]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d008      	beq.n	8009792 <PxMessagingTask+0x99a>
 8009780:	464a      	mov	r2, r9
 8009782:	320c      	adds	r2, #12
 8009784:	2038      	movs	r0, #56	; 0x38
 8009786:	4360      	muls	r0, r4
 8009788:	4959      	ldr	r1, [pc, #356]	; (80098f0 <PxMessagingTask+0xaf8>)
 800978a:	1809      	adds	r1, r1, r0
 800978c:	5c8a      	ldrb	r2, [r1, r2]
 800978e:	2a00      	cmp	r2, #0
 8009790:	d142      	bne.n	8009818 <PxMessagingTask+0xa20>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 8009792:	00e3      	lsls	r3, r4, #3
 8009794:	1b1b      	subs	r3, r3, r4
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	4a55      	ldr	r2, [pc, #340]	; (80098f0 <PxMessagingTask+0xaf8>)
 800979a:	18d3      	adds	r3, r2, r3
 800979c:	464a      	mov	r2, r9
 800979e:	320d      	adds	r2, #13
 80097a0:	5c9b      	ldrb	r3, [r3, r2]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <PxMessagingTask+0x9b2>
 80097a6:	f7ff fb79 	bl	8008e9c <PxMessagingTask+0xa4>
 80097aa:	2238      	movs	r2, #56	; 0x38
 80097ac:	4362      	muls	r2, r4
 80097ae:	4950      	ldr	r1, [pc, #320]	; (80098f0 <PxMessagingTask+0xaf8>)
 80097b0:	1889      	adds	r1, r1, r2
 80097b2:	464a      	mov	r2, r9
 80097b4:	320e      	adds	r2, #14
 80097b6:	5c8a      	ldrb	r2, [r1, r2]
 80097b8:	2a00      	cmp	r2, #0
 80097ba:	d101      	bne.n	80097c0 <PxMessagingTask+0x9c8>
 80097bc:	f7ff fb6e 	bl	8008e9c <PxMessagingTask+0xa4>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 80097c0:	4648      	mov	r0, r9
 80097c2:	3008      	adds	r0, #8
 80097c4:	2638      	movs	r6, #56	; 0x38
 80097c6:	4366      	muls	r6, r4
 80097c8:	4949      	ldr	r1, [pc, #292]	; (80098f0 <PxMessagingTask+0xaf8>)
 80097ca:	1989      	adds	r1, r1, r6
 80097cc:	5c08      	ldrb	r0, [r1, r0]
 80097ce:	9200      	str	r2, [sp, #0]
 80097d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097d4:	f7fe fd42 	bl	800825c <SetupDMAStreams>
 80097d8:	f7ff fb60 	bl	8008e9c <PxMessagingTask+0xa4>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 80097dc:	3329      	adds	r3, #41	; 0x29
 80097de:	4363      	muls	r3, r4
 80097e0:	18d2      	adds	r2, r2, r3
 80097e2:	464b      	mov	r3, r9
 80097e4:	330d      	adds	r3, #13
 80097e6:	5cd3      	ldrb	r3, [r2, r3]
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	e77a      	b.n	80096e2 <PxMessagingTask+0x8ea>
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 80097ec:	3327      	adds	r3, #39	; 0x27
 80097ee:	4363      	muls	r3, r4
 80097f0:	4a3f      	ldr	r2, [pc, #252]	; (80098f0 <PxMessagingTask+0xaf8>)
 80097f2:	18d2      	adds	r2, r2, r3
 80097f4:	464b      	mov	r3, r9
 80097f6:	330f      	adds	r3, #15
 80097f8:	5cd3      	ldrb	r3, [r2, r3]
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	e775      	b.n	80096ea <PxMessagingTask+0x8f2>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 80097fe:	4649      	mov	r1, r9
 8009800:	3108      	adds	r1, #8
 8009802:	2638      	movs	r6, #56	; 0x38
 8009804:	4366      	muls	r6, r4
 8009806:	483a      	ldr	r0, [pc, #232]	; (80098f0 <PxMessagingTask+0xaf8>)
 8009808:	1980      	adds	r0, r0, r6
 800980a:	5c40      	ldrb	r0, [r0, r1]
 800980c:	9200      	str	r2, [sp, #0]
 800980e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009812:	f7fe fd23 	bl	800825c <SetupDMAStreams>
 8009816:	e7ab      	b.n	8009770 <PxMessagingTask+0x978>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 8009818:	4649      	mov	r1, r9
 800981a:	3108      	adds	r1, #8
 800981c:	0006      	movs	r6, r0
 800981e:	4834      	ldr	r0, [pc, #208]	; (80098f0 <PxMessagingTask+0xaf8>)
 8009820:	1980      	adds	r0, r0, r6
 8009822:	5c40      	ldrb	r0, [r0, r1]
 8009824:	9200      	str	r2, [sp, #0]
 8009826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009828:	9909      	ldr	r1, [sp, #36]	; 0x24
 800982a:	f7fe fd17 	bl	800825c <SetupDMAStreams>
 800982e:	e7b0      	b.n	8009792 <PxMessagingTask+0x99a>
 8009830:	46ba      	mov	sl, r7
 8009832:	4663      	mov	r3, ip
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	4689      	mov	r9, r1
 8009838:	4680      	mov	r8, r0
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 800983a:	9f08      	ldr	r7, [sp, #32]
 800983c:	003b      	movs	r3, r7
 800983e:	3308      	adds	r3, #8
 8009840:	2238      	movs	r2, #56	; 0x38
 8009842:	4362      	muls	r2, r4
 8009844:	4d2a      	ldr	r5, [pc, #168]	; (80098f0 <PxMessagingTask+0xaf8>)
 8009846:	18ad      	adds	r5, r5, r2
 8009848:	5ce9      	ldrb	r1, [r5, r3]
 800984a:	20e4      	movs	r0, #228	; 0xe4
 800984c:	f7fd fbee 	bl	800702c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 8009850:	5de9      	ldrb	r1, [r5, r7]
 8009852:	0209      	lsls	r1, r1, #8
 8009854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009856:	5cab      	ldrb	r3, [r5, r2]
 8009858:	18c9      	adds	r1, r1, r3
 800985a:	b289      	uxth	r1, r1
 800985c:	20e5      	movs	r0, #229	; 0xe5
 800985e:	f7fd fbe5 	bl	800702c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 8009862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009864:	5ca9      	ldrb	r1, [r5, r2]
 8009866:	0209      	lsls	r1, r1, #8
 8009868:	9b04      	ldr	r3, [sp, #16]
 800986a:	5ceb      	ldrb	r3, [r5, r3]
 800986c:	18c9      	adds	r1, r1, r3
 800986e:	b289      	uxth	r1, r1
 8009870:	20e6      	movs	r0, #230	; 0xe6
 8009872:	f7fd fbdb 	bl	800702c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 8009876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009878:	5ce9      	ldrb	r1, [r5, r3]
 800987a:	0209      	lsls	r1, r1, #8
 800987c:	464b      	mov	r3, r9
 800987e:	5ceb      	ldrb	r3, [r5, r3]
 8009880:	18c9      	adds	r1, r1, r3
 8009882:	b289      	uxth	r1, r1
 8009884:	20e7      	movs	r0, #231	; 0xe7
 8009886:	f7fd fbd1 	bl	800702c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 800988a:	4643      	mov	r3, r8
 800988c:	5ce9      	ldrb	r1, [r5, r3]
 800988e:	0209      	lsls	r1, r1, #8
 8009890:	5dab      	ldrb	r3, [r5, r6]
 8009892:	18c9      	adds	r1, r1, r3
 8009894:	b289      	uxth	r1, r1
 8009896:	20e8      	movs	r0, #232	; 0xe8
 8009898:	f7fd fbc8 	bl	800702c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 800989c:	003b      	movs	r3, r7
 800989e:	3309      	adds	r3, #9
 80098a0:	5ce9      	ldrb	r1, [r5, r3]
 80098a2:	0209      	lsls	r1, r1, #8
 80098a4:	3301      	adds	r3, #1
 80098a6:	5ceb      	ldrb	r3, [r5, r3]
 80098a8:	18c9      	adds	r1, r1, r3
 80098aa:	b289      	uxth	r1, r1
 80098ac:	20e9      	movs	r0, #233	; 0xe9
 80098ae:	f7fd fbbd 	bl	800702c <EE_WriteVariable>
								if (numOfParams == 19)
 80098b2:	9b05      	ldr	r3, [sp, #20]
 80098b4:	2b13      	cmp	r3, #19
 80098b6:	d00b      	beq.n	80098d0 <PxMessagingTask+0xad8>
								if (numOfParams == 21)
 80098b8:	9b05      	ldr	r3, [sp, #20]
 80098ba:	2b15      	cmp	r3, #21
 80098bc:	d036      	beq.n	800992c <PxMessagingTask+0xb34>
  __ASM volatile ("dsb 0xF":::"memory");
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	4b17      	ldr	r3, [pc, #92]	; (8009920 <PxMessagingTask+0xb28>)
 80098c4:	4a17      	ldr	r2, [pc, #92]	; (8009924 <PxMessagingTask+0xb2c>)
 80098c6:	60da      	str	r2, [r3, #12]
 80098c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80098cc:	46c0      	nop			; (mov r8, r8)
 80098ce:	e7fd      	b.n	80098cc <PxMessagingTask+0xad4>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 80098d0:	2238      	movs	r2, #56	; 0x38
 80098d2:	4362      	muls	r2, r4
 80098d4:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <PxMessagingTask+0xaf8>)
 80098d6:	189b      	adds	r3, r3, r2
 80098d8:	4652      	mov	r2, sl
 80098da:	5c99      	ldrb	r1, [r3, r2]
 80098dc:	0209      	lsls	r1, r1, #8
 80098de:	9a08      	ldr	r2, [sp, #32]
 80098e0:	320c      	adds	r2, #12
 80098e2:	5c9b      	ldrb	r3, [r3, r2]
 80098e4:	18c9      	adds	r1, r1, r3
 80098e6:	b289      	uxth	r1, r1
 80098e8:	20ea      	movs	r0, #234	; 0xea
 80098ea:	f7fd fb9f 	bl	800702c <EE_WriteVariable>
 80098ee:	e7e3      	b.n	80098b8 <PxMessagingTask+0xac0>
 80098f0:	20000568 	.word	0x20000568
 80098f4:	20000d5c 	.word	0x20000d5c
 80098f8:	200002d7 	.word	0x200002d7
 80098fc:	20006138 	.word	0x20006138
 8009900:	20000760 	.word	0x20000760
 8009904:	2000071d 	.word	0x2000071d
 8009908:	2000071e 	.word	0x2000071e
 800990c:	20000930 	.word	0x20000930
 8009910:	20000ce0 	.word	0x20000ce0
 8009914:	20007ff0 	.word	0x20007ff0
 8009918:	deadbeef 	.word	0xdeadbeef
 800991c:	2000071c 	.word	0x2000071c
 8009920:	e000ed00 	.word	0xe000ed00
 8009924:	05fa0004 	.word	0x05fa0004
 8009928:	2000089e 	.word	0x2000089e
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 800992c:	9808      	ldr	r0, [sp, #32]
 800992e:	0002      	movs	r2, r0
 8009930:	320d      	adds	r2, #13
 8009932:	3323      	adds	r3, #35	; 0x23
 8009934:	4363      	muls	r3, r4
 8009936:	4cf0      	ldr	r4, [pc, #960]	; (8009cf8 <PxMessagingTask+0xf00>)
 8009938:	18e4      	adds	r4, r4, r3
 800993a:	5ca1      	ldrb	r1, [r4, r2]
 800993c:	0209      	lsls	r1, r1, #8
 800993e:	0003      	movs	r3, r0
 8009940:	330e      	adds	r3, #14
 8009942:	5ce3      	ldrb	r3, [r4, r3]
 8009944:	18c9      	adds	r1, r1, r3
 8009946:	b289      	uxth	r1, r1
 8009948:	20eb      	movs	r0, #235	; 0xeb
 800994a:	f7fd fb6f 	bl	800702c <EE_WriteVariable>
 800994e:	e7b6      	b.n	80098be <PxMessagingTask+0xac6>
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8009950:	00e3      	lsls	r3, r4, #3
 8009952:	1b1b      	subs	r3, r3, r4
 8009954:	00db      	lsls	r3, r3, #3
 8009956:	4ee8      	ldr	r6, [pc, #928]	; (8009cf8 <PxMessagingTask+0xf00>)
 8009958:	18f6      	adds	r6, r6, r3
 800995a:	464b      	mov	r3, r9
 800995c:	5cf3      	ldrb	r3, [r6, r3]
 800995e:	061b      	lsls	r3, r3, #24
 8009960:	464a      	mov	r2, r9
 8009962:	3201      	adds	r2, #1
 8009964:	5cb2      	ldrb	r2, [r6, r2]
 8009966:	0412      	lsls	r2, r2, #16
 8009968:	189b      	adds	r3, r3, r2
 800996a:	464a      	mov	r2, r9
 800996c:	3202      	adds	r2, #2
 800996e:	5cb2      	ldrb	r2, [r6, r2]
 8009970:	0212      	lsls	r2, r2, #8
 8009972:	189b      	adds	r3, r3, r2
 8009974:	464a      	mov	r2, r9
 8009976:	3203      	adds	r2, #3
 8009978:	5cb2      	ldrb	r2, [r6, r2]
 800997a:	189b      	adds	r3, r3, r2
 800997c:	9305      	str	r3, [sp, #20]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800997e:	464a      	mov	r2, r9
 8009980:	1d13      	adds	r3, r2, #4
 8009982:	5cf2      	ldrb	r2, [r6, r3]
 8009984:	0612      	lsls	r2, r2, #24
 8009986:	4649      	mov	r1, r9
 8009988:	1d4b      	adds	r3, r1, #5
 800998a:	5cf3      	ldrb	r3, [r6, r3]
 800998c:	041b      	lsls	r3, r3, #16
 800998e:	18d3      	adds	r3, r2, r3
 8009990:	464a      	mov	r2, r9
 8009992:	3206      	adds	r2, #6
 8009994:	5cb2      	ldrb	r2, [r6, r2]
 8009996:	0212      	lsls	r2, r2, #8
 8009998:	189b      	adds	r3, r3, r2
 800999a:	464a      	mov	r2, r9
 800999c:	3207      	adds	r2, #7
 800999e:	5cb2      	ldrb	r2, [r6, r2]
 80099a0:	189a      	adds	r2, r3, r2
 80099a2:	9208      	str	r2, [sp, #32]
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 80099a4:	4648      	mov	r0, r9
 80099a6:	3009      	adds	r0, #9
 80099a8:	464a      	mov	r2, r9
 80099aa:	320b      	adds	r2, #11
 80099ac:	464b      	mov	r3, r9
 80099ae:	330a      	adds	r3, #10
 80099b0:	2108      	movs	r1, #8
 80099b2:	4449      	add	r1, r9
 80099b4:	468c      	mov	ip, r1
 80099b6:	3104      	adds	r1, #4
 80099b8:	5c77      	ldrb	r7, [r6, r1]
 80099ba:	5cf3      	ldrb	r3, [r6, r3]
 80099bc:	5cb2      	ldrb	r2, [r6, r2]
 80099be:	49cf      	ldr	r1, [pc, #828]	; (8009cfc <PxMessagingTask+0xf04>)
 80099c0:	7809      	ldrb	r1, [r1, #0]
 80099c2:	4689      	mov	r9, r1
 80099c4:	5c30      	ldrb	r0, [r6, r0]
 80099c6:	1e79      	subs	r1, r7, #1
 80099c8:	418f      	sbcs	r7, r1
 80099ca:	9703      	str	r7, [sp, #12]
 80099cc:	9f08      	ldr	r7, [sp, #32]
 80099ce:	9702      	str	r7, [sp, #8]
 80099d0:	9f05      	ldr	r7, [sp, #20]
 80099d2:	9701      	str	r7, [sp, #4]
 80099d4:	4667      	mov	r7, ip
 80099d6:	5df6      	ldrb	r6, [r6, r7]
 80099d8:	9600      	str	r6, [sp, #0]
 80099da:	4649      	mov	r1, r9
 80099dc:	f7fe ff84 	bl	80088e8 <StartScastDMAStream>
							break;								
 80099e0:	f7ff fa5c 	bl	8008e9c <PxMessagingTask+0xa4>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 80099e4:	00e3      	lsls	r3, r4, #3
 80099e6:	1b1b      	subs	r3, r3, r4
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	4ac3      	ldr	r2, [pc, #780]	; (8009cf8 <PxMessagingTask+0xf00>)
 80099ec:	18d3      	adds	r3, r2, r3
 80099ee:	464a      	mov	r2, r9
 80099f0:	5c9b      	ldrb	r3, [r3, r2]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d000      	beq.n	80099f8 <PxMessagingTask+0xc00>
 80099f6:	e087      	b.n	8009b08 <PxMessagingTask+0xd10>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 80099f8:	1c91      	adds	r1, r2, #2
 80099fa:	2338      	movs	r3, #56	; 0x38
 80099fc:	4363      	muls	r3, r4
 80099fe:	4abe      	ldr	r2, [pc, #760]	; (8009cf8 <PxMessagingTask+0xf00>)
 8009a00:	18d2      	adds	r2, r2, r3
 8009a02:	5c53      	ldrb	r3, [r2, r1]
 8009a04:	061b      	lsls	r3, r3, #24
 8009a06:	4649      	mov	r1, r9
 8009a08:	3103      	adds	r1, #3
 8009a0a:	5c51      	ldrb	r1, [r2, r1]
 8009a0c:	0409      	lsls	r1, r1, #16
 8009a0e:	185b      	adds	r3, r3, r1
 8009a10:	4649      	mov	r1, r9
 8009a12:	3104      	adds	r1, #4
 8009a14:	5c51      	ldrb	r1, [r2, r1]
 8009a16:	0209      	lsls	r1, r1, #8
 8009a18:	185b      	adds	r3, r3, r1
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	3105      	adds	r1, #5
 8009a1e:	5c51      	ldrb	r1, [r2, r1]
 8009a20:	185b      	adds	r3, r3, r1
									switch (cMessage[port-1][1+shift])											// requested format
 8009a22:	4649      	mov	r1, r9
 8009a24:	3101      	adds	r1, #1
 8009a26:	5c52      	ldrb	r2, [r2, r1]
 8009a28:	3a01      	subs	r2, #1
 8009a2a:	b2d1      	uxtb	r1, r2
 8009a2c:	2907      	cmp	r1, #7
 8009a2e:	d901      	bls.n	8009a34 <PxMessagingTask+0xc3c>
 8009a30:	f7ff fa34 	bl	8008e9c <PxMessagingTask+0xa4>
 8009a34:	b2d2      	uxtb	r2, r2
 8009a36:	0092      	lsls	r2, r2, #2
 8009a38:	49b1      	ldr	r1, [pc, #708]	; (8009d00 <PxMessagingTask+0xf08>)
 8009a3a:	588a      	ldr	r2, [r1, r2]
 8009a3c:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 8009a3e:	781a      	ldrb	r2, [r3, #0]
 8009a40:	4bb0      	ldr	r3, [pc, #704]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009a42:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 8009a44:	2201      	movs	r2, #1
 8009a46:	211f      	movs	r1, #31
 8009a48:	4658      	mov	r0, fp
 8009a4a:	f7fe ff27 	bl	800889c <SendMessageToModule>
 8009a4e:	f7ff fa25 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[0] = *(__IO int8_t *)temp32; 
 8009a52:	781a      	ldrb	r2, [r3, #0]
 8009a54:	4bab      	ldr	r3, [pc, #684]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009a56:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 8009a58:	2201      	movs	r2, #1
 8009a5a:	211f      	movs	r1, #31
 8009a5c:	4658      	mov	r0, fp
 8009a5e:	f7fe ff1d 	bl	800889c <SendMessageToModule>
 8009a62:	f7ff fa1b 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 8009a66:	8819      	ldrh	r1, [r3, #0]
 8009a68:	4aa6      	ldr	r2, [pc, #664]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009a6a:	7011      	strb	r1, [r2, #0]
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009a72:	2202      	movs	r2, #2
 8009a74:	211f      	movs	r1, #31
 8009a76:	4658      	mov	r0, fp
 8009a78:	f7fe ff10 	bl	800889c <SendMessageToModule>
 8009a7c:	f7ff fa0e 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8009a80:	8819      	ldrh	r1, [r3, #0]
 8009a82:	4aa0      	ldr	r2, [pc, #640]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009a84:	7011      	strb	r1, [r2, #0]
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	b21b      	sxth	r3, r3
 8009a8a:	121b      	asrs	r3, r3, #8
 8009a8c:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009a8e:	2202      	movs	r2, #2
 8009a90:	211f      	movs	r1, #31
 8009a92:	4658      	mov	r0, fp
 8009a94:	f7fe ff02 	bl	800889c <SendMessageToModule>
 8009a98:	f7ff fa00 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8009a9c:	6819      	ldr	r1, [r3, #0]
 8009a9e:	4a99      	ldr	r2, [pc, #612]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009aa0:	7011      	strb	r1, [r2, #0]
 8009aa2:	6819      	ldr	r1, [r3, #0]
 8009aa4:	0a09      	lsrs	r1, r1, #8
 8009aa6:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8009aa8:	6819      	ldr	r1, [r3, #0]
 8009aaa:	0c09      	lsrs	r1, r1, #16
 8009aac:	7091      	strb	r1, [r2, #2]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	0e1b      	lsrs	r3, r3, #24
 8009ab2:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 8009ab4:	2204      	movs	r2, #4
 8009ab6:	211f      	movs	r1, #31
 8009ab8:	4658      	mov	r0, fp
 8009aba:	f7fe feef 	bl	800889c <SendMessageToModule>
 8009abe:	f7ff f9ed 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8009ac2:	6819      	ldr	r1, [r3, #0]
 8009ac4:	4a8f      	ldr	r2, [pc, #572]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009ac6:	7011      	strb	r1, [r2, #0]
 8009ac8:	6819      	ldr	r1, [r3, #0]
 8009aca:	1209      	asrs	r1, r1, #8
 8009acc:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8009ace:	6819      	ldr	r1, [r3, #0]
 8009ad0:	1409      	asrs	r1, r1, #16
 8009ad2:	7091      	strb	r1, [r2, #2]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	0e1b      	lsrs	r3, r3, #24
 8009ad8:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 8009ada:	2204      	movs	r2, #4
 8009adc:	211f      	movs	r1, #31
 8009ade:	4658      	mov	r0, fp
 8009ae0:	f7fe fedc 	bl	800889c <SendMessageToModule>
 8009ae4:	f7ff f9da 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 8009ae8:	7819      	ldrb	r1, [r3, #0]
 8009aea:	4a86      	ldr	r2, [pc, #536]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009aec:	7011      	strb	r1, [r2, #0]
 8009aee:	7859      	ldrb	r1, [r3, #1]
 8009af0:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 8009af2:	7899      	ldrb	r1, [r3, #2]
 8009af4:	7091      	strb	r1, [r2, #2]
 8009af6:	78db      	ldrb	r3, [r3, #3]
 8009af8:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 8009afa:	2208      	movs	r2, #8
 8009afc:	211f      	movs	r1, #31
 8009afe:	4658      	mov	r0, fp
 8009b00:	f7fe fecc 	bl	800889c <SendMessageToModule>
 8009b04:	f7ff f9ca 	bl	8008e9c <PxMessagingTask+0xa4>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d01b      	beq.n	8009b44 <PxMessagingTask+0xd4c>
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 8009b0c:	d801      	bhi.n	8009b12 <PxMessagingTask+0xd1a>
 8009b0e:	f7ff f9c5 	bl	8008e9c <PxMessagingTask+0xa4>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 8009b12:	3b04      	subs	r3, #4
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4a7c      	ldr	r2, [pc, #496]	; (8009d08 <PxMessagingTask+0xf10>)
 8009b18:	5899      	ldr	r1, [r3, r2]
 8009b1a:	220f      	movs	r2, #15
 8009b1c:	400a      	ands	r2, r1
 8009b1e:	4b79      	ldr	r3, [pc, #484]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009b20:	701a      	strb	r2, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 8009b22:	d100      	bne.n	8009b26 <PxMessagingTask+0xd2e>
 8009b24:	e09e      	b.n	8009c64 <PxMessagingTask+0xe6c>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 8009b26:	0c09      	lsrs	r1, r1, #16
 8009b28:	2380      	movs	r3, #128	; 0x80
 8009b2a:	059b      	lsls	r3, r3, #22
 8009b2c:	18cb      	adds	r3, r1, r3
										switch (messageParams[0])											// requested format
 8009b2e:	3a01      	subs	r2, #1
 8009b30:	b2d0      	uxtb	r0, r2
 8009b32:	2807      	cmp	r0, #7
 8009b34:	d901      	bls.n	8009b3a <PxMessagingTask+0xd42>
 8009b36:	f7ff f9b1 	bl	8008e9c <PxMessagingTask+0xa4>
 8009b3a:	b2d2      	uxtb	r2, r2
 8009b3c:	0092      	lsls	r2, r2, #2
 8009b3e:	4873      	ldr	r0, [pc, #460]	; (8009d0c <PxMessagingTask+0xf14>)
 8009b40:	5882      	ldr	r2, [r0, r2]
 8009b42:	4697      	mov	pc, r2
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 8009b44:	3901      	subs	r1, #1
 8009b46:	486c      	ldr	r0, [pc, #432]	; (8009cf8 <PxMessagingTask+0xf00>)
 8009b48:	3336      	adds	r3, #54	; 0x36
 8009b4a:	4363      	muls	r3, r4
 8009b4c:	18c2      	adds	r2, r0, r3
 8009b4e:	2600      	movs	r6, #0
 8009b50:	5456      	strb	r6, [r2, r1]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 8009b52:	464a      	mov	r2, r9
 8009b54:	3201      	adds	r2, #1
 8009b56:	189b      	adds	r3, r3, r2
 8009b58:	1818      	adds	r0, r3, r0
 8009b5a:	f7f9 fa65 	bl	8003028 <IsModuleParameter>
 8009b5e:	9004      	str	r0, [sp, #16]
									if (temp == 0) {																					// Parameter does not exist
 8009b60:	42b0      	cmp	r0, r6
 8009b62:	d013      	beq.n	8009b8c <PxMessagingTask+0xd94>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 8009b64:	3801      	subs	r0, #1
 8009b66:	4a6a      	ldr	r2, [pc, #424]	; (8009d10 <PxMessagingTask+0xf18>)
 8009b68:	230c      	movs	r3, #12
 8009b6a:	4358      	muls	r0, r3
 8009b6c:	5883      	ldr	r3, [r0, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 8009b6e:	1812      	adds	r2, r2, r0
 8009b70:	7912      	ldrb	r2, [r2, #4]
 8009b72:	4964      	ldr	r1, [pc, #400]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009b74:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 8009b76:	3a01      	subs	r2, #1
 8009b78:	b2d1      	uxtb	r1, r2
 8009b7a:	2907      	cmp	r1, #7
 8009b7c:	d901      	bls.n	8009b82 <PxMessagingTask+0xd8a>
 8009b7e:	f7ff f98d 	bl	8008e9c <PxMessagingTask+0xa4>
 8009b82:	b2d2      	uxtb	r2, r2
 8009b84:	0092      	lsls	r2, r2, #2
 8009b86:	4963      	ldr	r1, [pc, #396]	; (8009d14 <PxMessagingTask+0xf1c>)
 8009b88:	588a      	ldr	r2, [r1, r2]
 8009b8a:	4697      	mov	pc, r2
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	211f      	movs	r1, #31
 8009b90:	4658      	mov	r0, fp
 8009b92:	f7fe fe83 	bl	800889c <SendMessageToModule>
 8009b96:	f7ff f981 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[1] = *(__IO uint8_t *)temp32; 
 8009b9a:	781a      	ldrb	r2, [r3, #0]
 8009b9c:	4b59      	ldr	r3, [pc, #356]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009b9e:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	211f      	movs	r1, #31
 8009ba4:	4658      	mov	r0, fp
 8009ba6:	f7fe fe79 	bl	800889c <SendMessageToModule>
 8009baa:	f7ff f977 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[1] = *(__IO int8_t *)temp32; 
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	4b54      	ldr	r3, [pc, #336]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009bb2:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	211f      	movs	r1, #31
 8009bb8:	4658      	mov	r0, fp
 8009bba:	f7fe fe6f 	bl	800889c <SendMessageToModule>
 8009bbe:	f7ff f96d 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8009bc2:	8819      	ldrh	r1, [r3, #0]
 8009bc4:	4a4f      	ldr	r2, [pc, #316]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009bc6:	7051      	strb	r1, [r2, #1]
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	0a1b      	lsrs	r3, r3, #8
 8009bcc:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009bce:	2203      	movs	r2, #3
 8009bd0:	211f      	movs	r1, #31
 8009bd2:	4658      	mov	r0, fp
 8009bd4:	f7fe fe62 	bl	800889c <SendMessageToModule>
 8009bd8:	f7ff f960 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8009bdc:	8819      	ldrh	r1, [r3, #0]
 8009bde:	4a49      	ldr	r2, [pc, #292]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009be0:	7051      	strb	r1, [r2, #1]
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	b21b      	sxth	r3, r3
 8009be6:	121b      	asrs	r3, r3, #8
 8009be8:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009bea:	2203      	movs	r2, #3
 8009bec:	211f      	movs	r1, #31
 8009bee:	4658      	mov	r0, fp
 8009bf0:	f7fe fe54 	bl	800889c <SendMessageToModule>
 8009bf4:	f7ff f952 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8009bf8:	6819      	ldr	r1, [r3, #0]
 8009bfa:	4a42      	ldr	r2, [pc, #264]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009bfc:	7051      	strb	r1, [r2, #1]
 8009bfe:	6819      	ldr	r1, [r3, #0]
 8009c00:	0a09      	lsrs	r1, r1, #8
 8009c02:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8009c04:	6819      	ldr	r1, [r3, #0]
 8009c06:	0c09      	lsrs	r1, r1, #16
 8009c08:	70d1      	strb	r1, [r2, #3]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	0e1b      	lsrs	r3, r3, #24
 8009c0e:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8009c10:	2205      	movs	r2, #5
 8009c12:	211f      	movs	r1, #31
 8009c14:	4658      	mov	r0, fp
 8009c16:	f7fe fe41 	bl	800889c <SendMessageToModule>
 8009c1a:	f7ff f93f 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8009c1e:	6819      	ldr	r1, [r3, #0]
 8009c20:	4a38      	ldr	r2, [pc, #224]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009c22:	7051      	strb	r1, [r2, #1]
 8009c24:	6819      	ldr	r1, [r3, #0]
 8009c26:	1209      	asrs	r1, r1, #8
 8009c28:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8009c2a:	6819      	ldr	r1, [r3, #0]
 8009c2c:	1409      	asrs	r1, r1, #16
 8009c2e:	70d1      	strb	r1, [r2, #3]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	0e1b      	lsrs	r3, r3, #24
 8009c34:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 8009c36:	2205      	movs	r2, #5
 8009c38:	211f      	movs	r1, #31
 8009c3a:	4658      	mov	r0, fp
 8009c3c:	f7fe fe2e 	bl	800889c <SendMessageToModule>
 8009c40:	f7ff f92c 	bl	8008e9c <PxMessagingTask+0xa4>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 8009c44:	7819      	ldrb	r1, [r3, #0]
 8009c46:	4a2f      	ldr	r2, [pc, #188]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009c48:	7051      	strb	r1, [r2, #1]
 8009c4a:	7859      	ldrb	r1, [r3, #1]
 8009c4c:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 8009c4e:	7899      	ldrb	r1, [r3, #2]
 8009c50:	70d1      	strb	r1, [r2, #3]
 8009c52:	78db      	ldrb	r3, [r3, #3]
 8009c54:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8009c56:	2209      	movs	r2, #9
 8009c58:	211f      	movs	r1, #31
 8009c5a:	4658      	mov	r0, fp
 8009c5c:	f7fe fe1e 	bl	800889c <SendMessageToModule>
 8009c60:	f7ff f91c 	bl	8008e9c <PxMessagingTask+0xa4>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8009c64:	3201      	adds	r2, #1
 8009c66:	211f      	movs	r1, #31
 8009c68:	4658      	mov	r0, fp
 8009c6a:	f7fe fe17 	bl	800889c <SendMessageToModule>
 8009c6e:	f7ff f915 	bl	8008e9c <PxMessagingTask+0xa4>
												messageParams[1] = *(__IO uint8_t *)temp32; 
 8009c72:	781a      	ldrb	r2, [r3, #0]
 8009c74:	4b23      	ldr	r3, [pc, #140]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009c76:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009c78:	2202      	movs	r2, #2
 8009c7a:	211f      	movs	r1, #31
 8009c7c:	4658      	mov	r0, fp
 8009c7e:	f7fe fe0d 	bl	800889c <SendMessageToModule>
 8009c82:	f7ff f90b 	bl	8008e9c <PxMessagingTask+0xa4>
												messageParams[1] = *(__IO int8_t *)temp32; 
 8009c86:	781a      	ldrb	r2, [r3, #0]
 8009c88:	4b1e      	ldr	r3, [pc, #120]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009c8a:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	211f      	movs	r1, #31
 8009c90:	4658      	mov	r0, fp
 8009c92:	f7fe fe03 	bl	800889c <SendMessageToModule>
 8009c96:	f7ff f901 	bl	8008e9c <PxMessagingTask+0xa4>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8009c9a:	8819      	ldrh	r1, [r3, #0]
 8009c9c:	4a19      	ldr	r2, [pc, #100]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009c9e:	7051      	strb	r1, [r2, #1]
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	0a1b      	lsrs	r3, r3, #8
 8009ca4:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009ca6:	2203      	movs	r2, #3
 8009ca8:	211f      	movs	r1, #31
 8009caa:	4658      	mov	r0, fp
 8009cac:	f7fe fdf6 	bl	800889c <SendMessageToModule>
 8009cb0:	f7ff f8f4 	bl	8008e9c <PxMessagingTask+0xa4>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8009cb4:	8819      	ldrh	r1, [r3, #0]
 8009cb6:	4a13      	ldr	r2, [pc, #76]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009cb8:	7051      	strb	r1, [r2, #1]
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	b21b      	sxth	r3, r3
 8009cbe:	121b      	asrs	r3, r3, #8
 8009cc0:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8009cc2:	2203      	movs	r2, #3
 8009cc4:	211f      	movs	r1, #31
 8009cc6:	4658      	mov	r0, fp
 8009cc8:	f7fe fde8 	bl	800889c <SendMessageToModule>
 8009ccc:	f7ff f8e6 	bl	8008e9c <PxMessagingTask+0xa4>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8009cd0:	6819      	ldr	r1, [r3, #0]
 8009cd2:	4a0c      	ldr	r2, [pc, #48]	; (8009d04 <PxMessagingTask+0xf0c>)
 8009cd4:	7051      	strb	r1, [r2, #1]
 8009cd6:	6819      	ldr	r1, [r3, #0]
 8009cd8:	0a09      	lsrs	r1, r1, #8
 8009cda:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8009cdc:	6819      	ldr	r1, [r3, #0]
 8009cde:	0c09      	lsrs	r1, r1, #16
 8009ce0:	70d1      	strb	r1, [r2, #3]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	0e1b      	lsrs	r3, r3, #24
 8009ce6:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8009ce8:	2205      	movs	r2, #5
 8009cea:	211f      	movs	r1, #31
 8009cec:	4658      	mov	r0, fp
 8009cee:	f7fe fdd5 	bl	800889c <SendMessageToModule>
 8009cf2:	f7ff f8d3 	bl	8008e9c <PxMessagingTask+0xa4>
 8009cf6:	46c0      	nop			; (mov r8, r8)
 8009cf8:	20000568 	.word	0x20000568
 8009cfc:	2000089e 	.word	0x2000089e
 8009d00:	0801ab2c 	.word	0x0801ab2c
 8009d04:	20000760 	.word	0x20000760
 8009d08:	200060c0 	.word	0x200060c0
 8009d0c:	0801ab4c 	.word	0x0801ab4c
 8009d10:	20000084 	.word	0x20000084
 8009d14:	0801ab6c 	.word	0x0801ab6c
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8009d18:	6819      	ldr	r1, [r3, #0]
 8009d1a:	4ae3      	ldr	r2, [pc, #908]	; (800a0a8 <PxMessagingTask+0x12b0>)
 8009d1c:	7051      	strb	r1, [r2, #1]
 8009d1e:	6819      	ldr	r1, [r3, #0]
 8009d20:	1209      	asrs	r1, r1, #8
 8009d22:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8009d24:	6819      	ldr	r1, [r3, #0]
 8009d26:	1409      	asrs	r1, r1, #16
 8009d28:	70d1      	strb	r1, [r2, #3]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	0e1b      	lsrs	r3, r3, #24
 8009d2e:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 8009d30:	2205      	movs	r2, #5
 8009d32:	211f      	movs	r1, #31
 8009d34:	4658      	mov	r0, fp
 8009d36:	f7fe fdb1 	bl	800889c <SendMessageToModule>
 8009d3a:	f7ff f8af 	bl	8008e9c <PxMessagingTask+0xa4>
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 8009d3e:	781a      	ldrb	r2, [r3, #0]
 8009d40:	4bd9      	ldr	r3, [pc, #868]	; (800a0a8 <PxMessagingTask+0x12b0>)
 8009d42:	705a      	strb	r2, [r3, #1]
 8009d44:	4ad9      	ldr	r2, [pc, #868]	; (800a0ac <PxMessagingTask+0x12b4>)
 8009d46:	188a      	adds	r2, r1, r2
 8009d48:	7812      	ldrb	r2, [r2, #0]
 8009d4a:	709a      	strb	r2, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 8009d4c:	4ad8      	ldr	r2, [pc, #864]	; (800a0b0 <PxMessagingTask+0x12b8>)
 8009d4e:	188a      	adds	r2, r1, r2
 8009d50:	7812      	ldrb	r2, [r2, #0]
 8009d52:	70da      	strb	r2, [r3, #3]
 8009d54:	4ad7      	ldr	r2, [pc, #860]	; (800a0b4 <PxMessagingTask+0x12bc>)
 8009d56:	4694      	mov	ip, r2
 8009d58:	4461      	add	r1, ip
 8009d5a:	780a      	ldrb	r2, [r1, #0]
 8009d5c:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8009d5e:	2209      	movs	r2, #9
 8009d60:	211f      	movs	r1, #31
 8009d62:	4658      	mov	r0, fp
 8009d64:	f7fe fd9a 	bl	800889c <SendMessageToModule>
 8009d68:	f7ff f898 	bl	8008e9c <PxMessagingTask+0xa4>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8009d6c:	4bd2      	ldr	r3, [pc, #840]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009d6e:	681e      	ldr	r6, [r3, #0]
 8009d70:	685f      	ldr	r7, [r3, #4]
 8009d72:	2202      	movs	r2, #2
 8009d74:	4252      	negs	r2, r2
 8009d76:	17d3      	asrs	r3, r2, #31
 8009d78:	1992      	adds	r2, r2, r6
 8009d7a:	417b      	adcs	r3, r7
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00f      	beq.n	8009da0 <PxMessagingTask+0xfa8>
							else if (remoteBuffer == REMOTE_MEMORY_ADD)										// We requested a memory location
 8009d80:	0033      	movs	r3, r6
 8009d82:	433b      	orrs	r3, r7
 8009d84:	d121      	bne.n	8009dca <PxMessagingTask+0xfd2>
								switch (remoteBuffer)															// Requested format
 8009d86:	2208      	movs	r2, #8
 8009d88:	2300      	movs	r3, #0
 8009d8a:	0030      	movs	r0, r6
 8009d8c:	0039      	movs	r1, r7
 8009d8e:	f7f6 fbcd 	bl	800052c <__aeabi_ulcmp>
 8009d92:	3001      	adds	r0, #1
 8009d94:	2801      	cmp	r0, #1
 8009d96:	d818      	bhi.n	8009dca <PxMessagingTask+0xfd2>
 8009d98:	00b6      	lsls	r6, r6, #2
 8009d9a:	4bc8      	ldr	r3, [pc, #800]	; (800a0bc <PxMessagingTask+0x12c4>)
 8009d9c:	599b      	ldr	r3, [r3, r6]
 8009d9e:	469f      	mov	pc, r3
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <PxMessagingTask+0xfb0>
 8009da4:	2a01      	cmp	r2, #1
 8009da6:	d8eb      	bhi.n	8009d80 <PxMessagingTask+0xf88>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 8009da8:	2238      	movs	r2, #56	; 0x38
 8009daa:	4362      	muls	r2, r4
 8009dac:	4bc4      	ldr	r3, [pc, #784]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009dae:	189b      	adds	r3, r3, r2
 8009db0:	464a      	mov	r2, r9
 8009db2:	5c9b      	ldrb	r3, [r3, r2]
 8009db4:	4ac3      	ldr	r2, [pc, #780]	; (800a0c4 <PxMessagingTask+0x12cc>)
 8009db6:	7013      	strb	r3, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d806      	bhi.n	8009dca <PxMessagingTask+0xfd2>
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4ac2      	ldr	r2, [pc, #776]	; (800a0c8 <PxMessagingTask+0x12d0>)
 8009dc0:	58d3      	ldr	r3, [r2, r3]
 8009dc2:	469f      	mov	pc, r3
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 8009dc4:	4bc1      	ldr	r3, [pc, #772]	; (800a0cc <PxMessagingTask+0x12d4>)
 8009dc6:	2210      	movs	r2, #16
 8009dc8:	701a      	strb	r2, [r3, #0]
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 8009dca:	4bc0      	ldr	r3, [pc, #768]	; (800a0cc <PxMessagingTask+0x12d4>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2b10      	cmp	r3, #16
 8009dd0:	d101      	bne.n	8009dd6 <PxMessagingTask+0xfde>
 8009dd2:	f7ff f863 	bl	8008e9c <PxMessagingTask+0xa4>
 8009dd6:	4bbd      	ldr	r3, [pc, #756]	; (800a0cc <PxMessagingTask+0x12d4>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	f7ff f85e 	bl	8008e9c <PxMessagingTask+0xa4>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 8009de0:	4649      	mov	r1, r9
 8009de2:	3101      	adds	r1, #1
 8009de4:	2238      	movs	r2, #56	; 0x38
 8009de6:	4362      	muls	r2, r4
 8009de8:	4bb5      	ldr	r3, [pc, #724]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009dea:	189b      	adds	r3, r3, r2
 8009dec:	5c5a      	ldrb	r2, [r3, r1]
 8009dee:	4bb2      	ldr	r3, [pc, #712]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	2200      	movs	r2, #0
 8009df4:	605a      	str	r2, [r3, #4]
 8009df6:	e7e8      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 8009df8:	4649      	mov	r1, r9
 8009dfa:	3101      	adds	r1, #1
 8009dfc:	2238      	movs	r2, #56	; 0x38
 8009dfe:	4362      	muls	r2, r4
 8009e00:	4baf      	ldr	r3, [pc, #700]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009e02:	189b      	adds	r3, r3, r2
 8009e04:	565a      	ldrsb	r2, [r3, r1]
 8009e06:	17d1      	asrs	r1, r2, #31
 8009e08:	4bab      	ldr	r3, [pc, #684]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	6059      	str	r1, [r3, #4]
 8009e0e:	e7dc      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 8009e10:	464b      	mov	r3, r9
 8009e12:	1c59      	adds	r1, r3, #1
 8009e14:	2238      	movs	r2, #56	; 0x38
 8009e16:	4362      	muls	r2, r4
 8009e18:	4ba9      	ldr	r3, [pc, #676]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009e1a:	189b      	adds	r3, r3, r2
 8009e1c:	5c5a      	ldrb	r2, [r3, r1]
 8009e1e:	4649      	mov	r1, r9
 8009e20:	3102      	adds	r1, #2
 8009e22:	5c5b      	ldrb	r3, [r3, r1]
 8009e24:	021b      	lsls	r3, r3, #8
 8009e26:	18d3      	adds	r3, r2, r3
 8009e28:	4aa3      	ldr	r2, [pc, #652]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009e2a:	6013      	str	r3, [r2, #0]
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	6053      	str	r3, [r2, #4]
 8009e30:	e7cb      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 8009e32:	464b      	mov	r3, r9
 8009e34:	1c59      	adds	r1, r3, #1
 8009e36:	2238      	movs	r2, #56	; 0x38
 8009e38:	4362      	muls	r2, r4
 8009e3a:	4ba1      	ldr	r3, [pc, #644]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009e3c:	189b      	adds	r3, r3, r2
 8009e3e:	5c5a      	ldrb	r2, [r3, r1]
 8009e40:	4649      	mov	r1, r9
 8009e42:	3102      	adds	r1, #2
 8009e44:	5c5b      	ldrb	r3, [r3, r1]
 8009e46:	021b      	lsls	r3, r3, #8
 8009e48:	18d3      	adds	r3, r2, r3
 8009e4a:	4a9b      	ldr	r2, [pc, #620]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	6053      	str	r3, [r2, #4]
 8009e52:	e7ba      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8009e54:	464b      	mov	r3, r9
 8009e56:	1c59      	adds	r1, r3, #1
 8009e58:	2338      	movs	r3, #56	; 0x38
 8009e5a:	4363      	muls	r3, r4
 8009e5c:	4a98      	ldr	r2, [pc, #608]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009e5e:	18d2      	adds	r2, r2, r3
 8009e60:	5c53      	ldrb	r3, [r2, r1]
 8009e62:	4649      	mov	r1, r9
 8009e64:	3102      	adds	r1, #2
 8009e66:	5c51      	ldrb	r1, [r2, r1]
 8009e68:	0209      	lsls	r1, r1, #8
 8009e6a:	185b      	adds	r3, r3, r1
 8009e6c:	4649      	mov	r1, r9
 8009e6e:	3103      	adds	r1, #3
 8009e70:	5c51      	ldrb	r1, [r2, r1]
 8009e72:	0409      	lsls	r1, r1, #16
 8009e74:	185b      	adds	r3, r3, r1
 8009e76:	4649      	mov	r1, r9
 8009e78:	3104      	adds	r1, #4
 8009e7a:	5c52      	ldrb	r2, [r2, r1]
 8009e7c:	0612      	lsls	r2, r2, #24
 8009e7e:	189b      	adds	r3, r3, r2
 8009e80:	4a8d      	ldr	r2, [pc, #564]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	2300      	movs	r3, #0
 8009e86:	6053      	str	r3, [r2, #4]
 8009e88:	e79f      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	1c59      	adds	r1, r3, #1
 8009e8e:	2338      	movs	r3, #56	; 0x38
 8009e90:	4363      	muls	r3, r4
 8009e92:	4a8b      	ldr	r2, [pc, #556]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009e94:	18d2      	adds	r2, r2, r3
 8009e96:	5c53      	ldrb	r3, [r2, r1]
 8009e98:	4649      	mov	r1, r9
 8009e9a:	3102      	adds	r1, #2
 8009e9c:	5c51      	ldrb	r1, [r2, r1]
 8009e9e:	0209      	lsls	r1, r1, #8
 8009ea0:	185b      	adds	r3, r3, r1
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	3103      	adds	r1, #3
 8009ea6:	5c51      	ldrb	r1, [r2, r1]
 8009ea8:	0409      	lsls	r1, r1, #16
 8009eaa:	185b      	adds	r3, r3, r1
 8009eac:	4649      	mov	r1, r9
 8009eae:	3104      	adds	r1, #4
 8009eb0:	5c52      	ldrb	r2, [r2, r1]
 8009eb2:	0612      	lsls	r2, r2, #24
 8009eb4:	189b      	adds	r3, r3, r2
 8009eb6:	17d9      	asrs	r1, r3, #31
 8009eb8:	4a7f      	ldr	r2, [pc, #508]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	6051      	str	r1, [r2, #4]
 8009ebe:	e784      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8009ec0:	464b      	mov	r3, r9
 8009ec2:	1c59      	adds	r1, r3, #1
 8009ec4:	2338      	movs	r3, #56	; 0x38
 8009ec6:	4363      	muls	r3, r4
 8009ec8:	4a7d      	ldr	r2, [pc, #500]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009eca:	18d2      	adds	r2, r2, r3
 8009ecc:	5c53      	ldrb	r3, [r2, r1]
 8009ece:	4649      	mov	r1, r9
 8009ed0:	3102      	adds	r1, #2
 8009ed2:	5c51      	ldrb	r1, [r2, r1]
 8009ed4:	0209      	lsls	r1, r1, #8
 8009ed6:	185b      	adds	r3, r3, r1
 8009ed8:	4649      	mov	r1, r9
 8009eda:	3103      	adds	r1, #3
 8009edc:	5c51      	ldrb	r1, [r2, r1]
 8009ede:	0409      	lsls	r1, r1, #16
 8009ee0:	185b      	adds	r3, r3, r1
 8009ee2:	4649      	mov	r1, r9
 8009ee4:	3104      	adds	r1, #4
 8009ee6:	5c52      	ldrb	r2, [r2, r1]
 8009ee8:	0612      	lsls	r2, r2, #24
 8009eea:	189b      	adds	r3, r3, r2
 8009eec:	4a72      	ldr	r2, [pc, #456]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	6053      	str	r3, [r2, #4]
 8009ef4:	e769      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = cMessage[port-1][shift]; break;
 8009ef6:	2238      	movs	r2, #56	; 0x38
 8009ef8:	4362      	muls	r2, r4
 8009efa:	4b71      	ldr	r3, [pc, #452]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009efc:	189b      	adds	r3, r3, r2
 8009efe:	464a      	mov	r2, r9
 8009f00:	5c9a      	ldrb	r2, [r3, r2]
 8009f02:	4b6d      	ldr	r3, [pc, #436]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	2200      	movs	r2, #0
 8009f08:	605a      	str	r2, [r3, #4]
 8009f0a:	e75e      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = (int8_t)cMessage[port-1][shift]; break;
 8009f0c:	2238      	movs	r2, #56	; 0x38
 8009f0e:	4362      	muls	r2, r4
 8009f10:	4b6b      	ldr	r3, [pc, #428]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009f12:	189b      	adds	r3, r3, r2
 8009f14:	464a      	mov	r2, r9
 8009f16:	569a      	ldrsb	r2, [r3, r2]
 8009f18:	17d1      	asrs	r1, r2, #31
 8009f1a:	4b67      	ldr	r3, [pc, #412]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	6059      	str	r1, [r3, #4]
 8009f20:	e753      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = ((uint16_t)cMessage[port-1][shift]<<0) + ((uint16_t)cMessage[port-1][1+shift]<<8); break;
 8009f22:	2238      	movs	r2, #56	; 0x38
 8009f24:	4362      	muls	r2, r4
 8009f26:	4b66      	ldr	r3, [pc, #408]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009f28:	189b      	adds	r3, r3, r2
 8009f2a:	464a      	mov	r2, r9
 8009f2c:	5c9a      	ldrb	r2, [r3, r2]
 8009f2e:	4649      	mov	r1, r9
 8009f30:	3101      	adds	r1, #1
 8009f32:	5c5b      	ldrb	r3, [r3, r1]
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	18d3      	adds	r3, r2, r3
 8009f38:	4a5f      	ldr	r2, [pc, #380]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	6053      	str	r3, [r2, #4]
 8009f40:	e743      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = ((int16_t)cMessage[port-1][shift]<<0) + ((int16_t)cMessage[port-1][1+shift]<<8); break;
 8009f42:	2238      	movs	r2, #56	; 0x38
 8009f44:	4362      	muls	r2, r4
 8009f46:	4b5e      	ldr	r3, [pc, #376]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009f48:	189b      	adds	r3, r3, r2
 8009f4a:	464a      	mov	r2, r9
 8009f4c:	5c9a      	ldrb	r2, [r3, r2]
 8009f4e:	4649      	mov	r1, r9
 8009f50:	3101      	adds	r1, #1
 8009f52:	5c5b      	ldrb	r3, [r3, r1]
 8009f54:	021b      	lsls	r3, r3, #8
 8009f56:	18d3      	adds	r3, r2, r3
 8009f58:	4a57      	ldr	r2, [pc, #348]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	6053      	str	r3, [r2, #4]
 8009f60:	e733      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = ((uint32_t)cMessage[port-1][shift]<<0) + ((uint32_t)cMessage[port-1][1+shift]<<8) + ((uint32_t)cMessage[port-1][2+shift]<<16) + ((uint32_t)cMessage[port-1][3+shift]<<24); break;
 8009f62:	2338      	movs	r3, #56	; 0x38
 8009f64:	4363      	muls	r3, r4
 8009f66:	4a56      	ldr	r2, [pc, #344]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009f68:	18d2      	adds	r2, r2, r3
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	5cd3      	ldrb	r3, [r2, r3]
 8009f6e:	4649      	mov	r1, r9
 8009f70:	3101      	adds	r1, #1
 8009f72:	5c51      	ldrb	r1, [r2, r1]
 8009f74:	0209      	lsls	r1, r1, #8
 8009f76:	185b      	adds	r3, r3, r1
 8009f78:	4649      	mov	r1, r9
 8009f7a:	3102      	adds	r1, #2
 8009f7c:	5c51      	ldrb	r1, [r2, r1]
 8009f7e:	0409      	lsls	r1, r1, #16
 8009f80:	185b      	adds	r3, r3, r1
 8009f82:	4649      	mov	r1, r9
 8009f84:	3103      	adds	r1, #3
 8009f86:	5c52      	ldrb	r2, [r2, r1]
 8009f88:	0612      	lsls	r2, r2, #24
 8009f8a:	189b      	adds	r3, r3, r2
 8009f8c:	4a4a      	ldr	r2, [pc, #296]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	2300      	movs	r3, #0
 8009f92:	6053      	str	r3, [r2, #4]
 8009f94:	e719      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = ((int32_t)cMessage[port-1][shift]<<0) + ((int32_t)cMessage[port-1][1+shift]<<8) + ((int32_t)cMessage[port-1][2+shift]<<16) + ((int32_t)cMessage[port-1][3+shift]<<24); break;									
 8009f96:	2338      	movs	r3, #56	; 0x38
 8009f98:	4363      	muls	r3, r4
 8009f9a:	4a49      	ldr	r2, [pc, #292]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009f9c:	18d2      	adds	r2, r2, r3
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	5cd3      	ldrb	r3, [r2, r3]
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	3101      	adds	r1, #1
 8009fa6:	5c51      	ldrb	r1, [r2, r1]
 8009fa8:	0209      	lsls	r1, r1, #8
 8009faa:	185b      	adds	r3, r3, r1
 8009fac:	4649      	mov	r1, r9
 8009fae:	3102      	adds	r1, #2
 8009fb0:	5c51      	ldrb	r1, [r2, r1]
 8009fb2:	0409      	lsls	r1, r1, #16
 8009fb4:	185b      	adds	r3, r3, r1
 8009fb6:	4649      	mov	r1, r9
 8009fb8:	3103      	adds	r1, #3
 8009fba:	5c52      	ldrb	r2, [r2, r1]
 8009fbc:	0612      	lsls	r2, r2, #24
 8009fbe:	189b      	adds	r3, r3, r2
 8009fc0:	17d9      	asrs	r1, r3, #31
 8009fc2:	4a3d      	ldr	r2, [pc, #244]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	6051      	str	r1, [r2, #4]
 8009fc8:	e6ff      	b.n	8009dca <PxMessagingTask+0xfd2>
										remoteBuffer = ((uint32_t)cMessage[port-1][shift]<<0) + ((uint32_t)cMessage[port-1][1+shift]<<8) + ((uint32_t)cMessage[port-1][2+shift]<<16) + ((uint32_t)cMessage[port-1][3+shift]<<24); break;
 8009fca:	2338      	movs	r3, #56	; 0x38
 8009fcc:	4363      	muls	r3, r4
 8009fce:	4a3c      	ldr	r2, [pc, #240]	; (800a0c0 <PxMessagingTask+0x12c8>)
 8009fd0:	18d2      	adds	r2, r2, r3
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	5cd3      	ldrb	r3, [r2, r3]
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	3101      	adds	r1, #1
 8009fda:	5c51      	ldrb	r1, [r2, r1]
 8009fdc:	0209      	lsls	r1, r1, #8
 8009fde:	185b      	adds	r3, r3, r1
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	3102      	adds	r1, #2
 8009fe4:	5c51      	ldrb	r1, [r2, r1]
 8009fe6:	0409      	lsls	r1, r1, #16
 8009fe8:	185b      	adds	r3, r3, r1
 8009fea:	4649      	mov	r1, r9
 8009fec:	3103      	adds	r1, #3
 8009fee:	5c52      	ldrb	r2, [r2, r1]
 8009ff0:	0612      	lsls	r2, r2, #24
 8009ff2:	189b      	adds	r3, r3, r2
 8009ff4:	4a30      	ldr	r2, [pc, #192]	; (800a0b8 <PxMessagingTask+0x12c0>)
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	6053      	str	r3, [r2, #4]
 8009ffc:	e6e5      	b.n	8009dca <PxMessagingTask+0xfd2>
							responseStatus = BOS_OK;		// Initialize response
 8009ffe:	4b33      	ldr	r3, [pc, #204]	; (800a0cc <PxMessagingTask+0x12d4>)
 800a000:	2200      	movs	r2, #0
 800a002:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 800a004:	00e3      	lsls	r3, r4, #3
 800a006:	1b1b      	subs	r3, r3, r4
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	4a2d      	ldr	r2, [pc, #180]	; (800a0c0 <PxMessagingTask+0x12c8>)
 800a00c:	18d3      	adds	r3, r2, r3
 800a00e:	464a      	mov	r2, r9
 800a010:	5c9f      	ldrb	r7, [r3, r2]
 800a012:	2f00      	cmp	r7, #0
 800a014:	d100      	bne.n	800a018 <PxMessagingTask+0x1220>
 800a016:	e17b      	b.n	800a310 <PxMessagingTask+0x1518>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 800a018:	2f1e      	cmp	r7, #30
 800a01a:	d900      	bls.n	800a01e <PxMessagingTask+0x1226>
 800a01c:	e162      	b.n	800a2e4 <PxMessagingTask+0x14ec>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 800a01e:	3f01      	subs	r7, #1
 800a020:	00ba      	lsls	r2, r7, #2
 800a022:	4b2b      	ldr	r3, [pc, #172]	; (800a0d0 <PxMessagingTask+0x12d8>)
 800a024:	58d1      	ldr	r1, [r2, r3]
 800a026:	0c0b      	lsrs	r3, r1, #16
 800a028:	2280      	movs	r2, #128	; 0x80
 800a02a:	0592      	lsls	r2, r2, #22
 800a02c:	4694      	mov	ip, r2
 800a02e:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 800a030:	464a      	mov	r2, r9
 800a032:	1c56      	adds	r6, r2, #1
 800a034:	9605      	str	r6, [sp, #20]
 800a036:	2038      	movs	r0, #56	; 0x38
 800a038:	4360      	muls	r0, r4
 800a03a:	4a21      	ldr	r2, [pc, #132]	; (800a0c0 <PxMessagingTask+0x12c8>)
 800a03c:	1812      	adds	r2, r2, r0
 800a03e:	5d96      	ldrb	r6, [r2, r6]
 800a040:	1e72      	subs	r2, r6, #1
 800a042:	b2d0      	uxtb	r0, r2
 800a044:	2807      	cmp	r0, #7
 800a046:	d812      	bhi.n	800a06e <PxMessagingTask+0x1276>
 800a048:	b2d2      	uxtb	r2, r2
 800a04a:	0092      	lsls	r2, r2, #2
 800a04c:	4821      	ldr	r0, [pc, #132]	; (800a0d4 <PxMessagingTask+0x12dc>)
 800a04e:	5882      	ldr	r2, [r0, r2]
 800a050:	4697      	mov	pc, r2
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a052:	070a      	lsls	r2, r1, #28
 800a054:	d042      	beq.n	800a0dc <PxMessagingTask+0x12e4>
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a056:	4a1d      	ldr	r2, [pc, #116]	; (800a0cc <PxMessagingTask+0x12d4>)
 800a058:	7812      	ldrb	r2, [r2, #0]
 800a05a:	2a12      	cmp	r2, #18
 800a05c:	d007      	beq.n	800a06e <PxMessagingTask+0x1276>
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 800a05e:	464a      	mov	r2, r9
 800a060:	3202      	adds	r2, #2
 800a062:	2038      	movs	r0, #56	; 0x38
 800a064:	4360      	muls	r0, r4
 800a066:	4916      	ldr	r1, [pc, #88]	; (800a0c0 <PxMessagingTask+0x12c8>)
 800a068:	1809      	adds	r1, r1, r0
 800a06a:	5c8a      	ldrb	r2, [r1, r2]
 800a06c:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800a06e:	2338      	movs	r3, #56	; 0x38
 800a070:	4363      	muls	r3, r4
 800a072:	4a13      	ldr	r2, [pc, #76]	; (800a0c0 <PxMessagingTask+0x12c8>)
 800a074:	18d3      	adds	r3, r2, r3
 800a076:	464a      	mov	r2, r9
 800a078:	5c9a      	ldrb	r2, [r3, r2]
 800a07a:	3a01      	subs	r2, #1
 800a07c:	0090      	lsls	r0, r2, #2
 800a07e:	4914      	ldr	r1, [pc, #80]	; (800a0d0 <PxMessagingTask+0x12d8>)
 800a080:	5841      	ldr	r1, [r0, r1]
 800a082:	200f      	movs	r0, #15
 800a084:	4008      	ands	r0, r1
 800a086:	9e05      	ldr	r6, [sp, #20]
 800a088:	5d9b      	ldrb	r3, [r3, r6]
 800a08a:	4298      	cmp	r0, r3
 800a08c:	d100      	bne.n	800a090 <PxMessagingTask+0x1298>
 800a08e:	e12c      	b.n	800a2ea <PxMessagingTask+0x14f2>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 800a090:	4811      	ldr	r0, [pc, #68]	; (800a0d8 <PxMessagingTask+0x12e0>)
 800a092:	4684      	mov	ip, r0
 800a094:	4463      	add	r3, ip
 800a096:	0092      	lsls	r2, r2, #2
 800a098:	400b      	ands	r3, r1
 800a09a:	490d      	ldr	r1, [pc, #52]	; (800a0d0 <PxMessagingTask+0x12d8>)
 800a09c:	5053      	str	r3, [r2, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 800a09e:	4b0b      	ldr	r3, [pc, #44]	; (800a0cc <PxMessagingTask+0x12d4>)
 800a0a0:	2214      	movs	r2, #20
 800a0a2:	701a      	strb	r2, [r3, #0]
 800a0a4:	e121      	b.n	800a2ea <PxMessagingTask+0x14f2>
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	20000760 	.word	0x20000760
 800a0ac:	20000001 	.word	0x20000001
 800a0b0:	20000002 	.word	0x20000002
 800a0b4:	20000003 	.word	0x20000003
 800a0b8:	20000928 	.word	0x20000928
 800a0bc:	0801ab8c 	.word	0x0801ab8c
 800a0c0:	20000568 	.word	0x20000568
 800a0c4:	20000070 	.word	0x20000070
 800a0c8:	0801abb0 	.word	0x0801abb0
 800a0cc:	20000930 	.word	0x20000930
 800a0d0:	200060c0 	.word	0x200060c0
 800a0d4:	0801abd4 	.word	0x0801abd4
 800a0d8:	0000fff0 	.word	0x0000fff0
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 800a0dc:	2001      	movs	r0, #1
 800a0de:	f009 fadb 	bl	8013698 <malloc>
 800a0e2:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a0e4:	d005      	beq.n	800a0f2 <PxMessagingTask+0x12fa>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a0e6:	0400      	lsls	r0, r0, #16
 800a0e8:	1986      	adds	r6, r0, r6
 800a0ea:	00bf      	lsls	r7, r7, #2
 800a0ec:	4acf      	ldr	r2, [pc, #828]	; (800a42c <PxMessagingTask+0x1634>)
 800a0ee:	50be      	str	r6, [r7, r2]
 800a0f0:	e7b1      	b.n	800a056 <PxMessagingTask+0x125e>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a0f2:	4acf      	ldr	r2, [pc, #828]	; (800a430 <PxMessagingTask+0x1638>)
 800a0f4:	2112      	movs	r1, #18
 800a0f6:	7011      	strb	r1, [r2, #0]
 800a0f8:	e7ad      	b.n	800a056 <PxMessagingTask+0x125e>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a0fa:	070a      	lsls	r2, r1, #28
 800a0fc:	d00c      	beq.n	800a118 <PxMessagingTask+0x1320>
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a0fe:	4acc      	ldr	r2, [pc, #816]	; (800a430 <PxMessagingTask+0x1638>)
 800a100:	7812      	ldrb	r2, [r2, #0]
 800a102:	2a12      	cmp	r2, #18
 800a104:	d0b3      	beq.n	800a06e <PxMessagingTask+0x1276>
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 800a106:	464a      	mov	r2, r9
 800a108:	3202      	adds	r2, #2
 800a10a:	2038      	movs	r0, #56	; 0x38
 800a10c:	4360      	muls	r0, r4
 800a10e:	49c9      	ldr	r1, [pc, #804]	; (800a434 <PxMessagingTask+0x163c>)
 800a110:	1809      	adds	r1, r1, r0
 800a112:	568a      	ldrsb	r2, [r1, r2]
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	e7aa      	b.n	800a06e <PxMessagingTask+0x1276>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 800a118:	2001      	movs	r0, #1
 800a11a:	f009 fabd 	bl	8013698 <malloc>
 800a11e:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a120:	d005      	beq.n	800a12e <PxMessagingTask+0x1336>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a122:	0400      	lsls	r0, r0, #16
 800a124:	1986      	adds	r6, r0, r6
 800a126:	00bf      	lsls	r7, r7, #2
 800a128:	4ac0      	ldr	r2, [pc, #768]	; (800a42c <PxMessagingTask+0x1634>)
 800a12a:	50be      	str	r6, [r7, r2]
 800a12c:	e7e7      	b.n	800a0fe <PxMessagingTask+0x1306>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a12e:	4ac0      	ldr	r2, [pc, #768]	; (800a430 <PxMessagingTask+0x1638>)
 800a130:	2112      	movs	r1, #18
 800a132:	7011      	strb	r1, [r2, #0]
 800a134:	e7e3      	b.n	800a0fe <PxMessagingTask+0x1306>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a136:	070a      	lsls	r2, r1, #28
 800a138:	d012      	beq.n	800a160 <PxMessagingTask+0x1368>
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a13a:	4abd      	ldr	r2, [pc, #756]	; (800a430 <PxMessagingTask+0x1638>)
 800a13c:	7812      	ldrb	r2, [r2, #0]
 800a13e:	2a12      	cmp	r2, #18
 800a140:	d095      	beq.n	800a06e <PxMessagingTask+0x1276>
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 800a142:	464a      	mov	r2, r9
 800a144:	3202      	adds	r2, #2
 800a146:	2138      	movs	r1, #56	; 0x38
 800a148:	4361      	muls	r1, r4
 800a14a:	48ba      	ldr	r0, [pc, #744]	; (800a434 <PxMessagingTask+0x163c>)
 800a14c:	1841      	adds	r1, r0, r1
 800a14e:	5c8a      	ldrb	r2, [r1, r2]
 800a150:	4648      	mov	r0, r9
 800a152:	3003      	adds	r0, #3
 800a154:	5c09      	ldrb	r1, [r1, r0]
 800a156:	0209      	lsls	r1, r1, #8
 800a158:	1852      	adds	r2, r2, r1
 800a15a:	b292      	uxth	r2, r2
 800a15c:	801a      	strh	r2, [r3, #0]
 800a15e:	e786      	b.n	800a06e <PxMessagingTask+0x1276>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 800a160:	2002      	movs	r0, #2
 800a162:	f009 fa99 	bl	8013698 <malloc>
 800a166:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a168:	d005      	beq.n	800a176 <PxMessagingTask+0x137e>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a16a:	0400      	lsls	r0, r0, #16
 800a16c:	1986      	adds	r6, r0, r6
 800a16e:	00bf      	lsls	r7, r7, #2
 800a170:	4aae      	ldr	r2, [pc, #696]	; (800a42c <PxMessagingTask+0x1634>)
 800a172:	50be      	str	r6, [r7, r2]
 800a174:	e7e1      	b.n	800a13a <PxMessagingTask+0x1342>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a176:	4aae      	ldr	r2, [pc, #696]	; (800a430 <PxMessagingTask+0x1638>)
 800a178:	2112      	movs	r1, #18
 800a17a:	7011      	strb	r1, [r2, #0]
 800a17c:	e7dd      	b.n	800a13a <PxMessagingTask+0x1342>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a17e:	070a      	lsls	r2, r1, #28
 800a180:	d013      	beq.n	800a1aa <PxMessagingTask+0x13b2>
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a182:	4aab      	ldr	r2, [pc, #684]	; (800a430 <PxMessagingTask+0x1638>)
 800a184:	7812      	ldrb	r2, [r2, #0]
 800a186:	2a12      	cmp	r2, #18
 800a188:	d100      	bne.n	800a18c <PxMessagingTask+0x1394>
 800a18a:	e770      	b.n	800a06e <PxMessagingTask+0x1276>
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 800a18c:	464a      	mov	r2, r9
 800a18e:	3202      	adds	r2, #2
 800a190:	2138      	movs	r1, #56	; 0x38
 800a192:	4361      	muls	r1, r4
 800a194:	48a7      	ldr	r0, [pc, #668]	; (800a434 <PxMessagingTask+0x163c>)
 800a196:	1841      	adds	r1, r0, r1
 800a198:	5c8a      	ldrb	r2, [r1, r2]
 800a19a:	4648      	mov	r0, r9
 800a19c:	3003      	adds	r0, #3
 800a19e:	5c09      	ldrb	r1, [r1, r0]
 800a1a0:	0209      	lsls	r1, r1, #8
 800a1a2:	1852      	adds	r2, r2, r1
 800a1a4:	b212      	sxth	r2, r2
 800a1a6:	801a      	strh	r2, [r3, #0]
 800a1a8:	e761      	b.n	800a06e <PxMessagingTask+0x1276>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 800a1aa:	2002      	movs	r0, #2
 800a1ac:	f009 fa74 	bl	8013698 <malloc>
 800a1b0:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a1b2:	d005      	beq.n	800a1c0 <PxMessagingTask+0x13c8>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a1b4:	0400      	lsls	r0, r0, #16
 800a1b6:	1986      	adds	r6, r0, r6
 800a1b8:	00bf      	lsls	r7, r7, #2
 800a1ba:	4a9c      	ldr	r2, [pc, #624]	; (800a42c <PxMessagingTask+0x1634>)
 800a1bc:	50be      	str	r6, [r7, r2]
 800a1be:	e7e0      	b.n	800a182 <PxMessagingTask+0x138a>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a1c0:	4a9b      	ldr	r2, [pc, #620]	; (800a430 <PxMessagingTask+0x1638>)
 800a1c2:	2112      	movs	r1, #18
 800a1c4:	7011      	strb	r1, [r2, #0]
 800a1c6:	e7dc      	b.n	800a182 <PxMessagingTask+0x138a>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a1c8:	070a      	lsls	r2, r1, #28
 800a1ca:	d01c      	beq.n	800a206 <PxMessagingTask+0x140e>
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a1cc:	4a98      	ldr	r2, [pc, #608]	; (800a430 <PxMessagingTask+0x1638>)
 800a1ce:	7812      	ldrb	r2, [r2, #0]
 800a1d0:	2a12      	cmp	r2, #18
 800a1d2:	d100      	bne.n	800a1d6 <PxMessagingTask+0x13de>
 800a1d4:	e74b      	b.n	800a06e <PxMessagingTask+0x1276>
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 800a1d6:	464a      	mov	r2, r9
 800a1d8:	3202      	adds	r2, #2
 800a1da:	2138      	movs	r1, #56	; 0x38
 800a1dc:	4361      	muls	r1, r4
 800a1de:	4895      	ldr	r0, [pc, #596]	; (800a434 <PxMessagingTask+0x163c>)
 800a1e0:	1841      	adds	r1, r0, r1
 800a1e2:	5c8e      	ldrb	r6, [r1, r2]
 800a1e4:	464a      	mov	r2, r9
 800a1e6:	3203      	adds	r2, #3
 800a1e8:	5c88      	ldrb	r0, [r1, r2]
 800a1ea:	0200      	lsls	r0, r0, #8
 800a1ec:	1836      	adds	r6, r6, r0
 800a1ee:	464a      	mov	r2, r9
 800a1f0:	3204      	adds	r2, #4
 800a1f2:	5c8a      	ldrb	r2, [r1, r2]
 800a1f4:	0412      	lsls	r2, r2, #16
 800a1f6:	18b2      	adds	r2, r6, r2
 800a1f8:	4648      	mov	r0, r9
 800a1fa:	3005      	adds	r0, #5
 800a1fc:	5c09      	ldrb	r1, [r1, r0]
 800a1fe:	0609      	lsls	r1, r1, #24
 800a200:	1852      	adds	r2, r2, r1
 800a202:	601a      	str	r2, [r3, #0]
 800a204:	e733      	b.n	800a06e <PxMessagingTask+0x1276>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 800a206:	2004      	movs	r0, #4
 800a208:	f009 fa46 	bl	8013698 <malloc>
 800a20c:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a20e:	d005      	beq.n	800a21c <PxMessagingTask+0x1424>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a210:	0400      	lsls	r0, r0, #16
 800a212:	1986      	adds	r6, r0, r6
 800a214:	00bf      	lsls	r7, r7, #2
 800a216:	4a85      	ldr	r2, [pc, #532]	; (800a42c <PxMessagingTask+0x1634>)
 800a218:	50be      	str	r6, [r7, r2]
 800a21a:	e7d7      	b.n	800a1cc <PxMessagingTask+0x13d4>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a21c:	4a84      	ldr	r2, [pc, #528]	; (800a430 <PxMessagingTask+0x1638>)
 800a21e:	2112      	movs	r1, #18
 800a220:	7011      	strb	r1, [r2, #0]
 800a222:	e7d3      	b.n	800a1cc <PxMessagingTask+0x13d4>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a224:	070a      	lsls	r2, r1, #28
 800a226:	d01c      	beq.n	800a262 <PxMessagingTask+0x146a>
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a228:	4a81      	ldr	r2, [pc, #516]	; (800a430 <PxMessagingTask+0x1638>)
 800a22a:	7812      	ldrb	r2, [r2, #0]
 800a22c:	2a12      	cmp	r2, #18
 800a22e:	d100      	bne.n	800a232 <PxMessagingTask+0x143a>
 800a230:	e71d      	b.n	800a06e <PxMessagingTask+0x1276>
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 800a232:	464a      	mov	r2, r9
 800a234:	3202      	adds	r2, #2
 800a236:	2138      	movs	r1, #56	; 0x38
 800a238:	4361      	muls	r1, r4
 800a23a:	487e      	ldr	r0, [pc, #504]	; (800a434 <PxMessagingTask+0x163c>)
 800a23c:	1841      	adds	r1, r0, r1
 800a23e:	5c88      	ldrb	r0, [r1, r2]
 800a240:	464a      	mov	r2, r9
 800a242:	3203      	adds	r2, #3
 800a244:	5c8a      	ldrb	r2, [r1, r2]
 800a246:	0212      	lsls	r2, r2, #8
 800a248:	1880      	adds	r0, r0, r2
 800a24a:	464a      	mov	r2, r9
 800a24c:	3204      	adds	r2, #4
 800a24e:	5c8a      	ldrb	r2, [r1, r2]
 800a250:	0412      	lsls	r2, r2, #16
 800a252:	1882      	adds	r2, r0, r2
 800a254:	4648      	mov	r0, r9
 800a256:	3005      	adds	r0, #5
 800a258:	5c09      	ldrb	r1, [r1, r0]
 800a25a:	0609      	lsls	r1, r1, #24
 800a25c:	1852      	adds	r2, r2, r1
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	e705      	b.n	800a06e <PxMessagingTask+0x1276>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800a262:	2004      	movs	r0, #4
 800a264:	f009 fa18 	bl	8013698 <malloc>
 800a268:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a26a:	d005      	beq.n	800a278 <PxMessagingTask+0x1480>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a26c:	0400      	lsls	r0, r0, #16
 800a26e:	1986      	adds	r6, r0, r6
 800a270:	00bf      	lsls	r7, r7, #2
 800a272:	4a6e      	ldr	r2, [pc, #440]	; (800a42c <PxMessagingTask+0x1634>)
 800a274:	50be      	str	r6, [r7, r2]
 800a276:	e7d7      	b.n	800a228 <PxMessagingTask+0x1430>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a278:	4a6d      	ldr	r2, [pc, #436]	; (800a430 <PxMessagingTask+0x1638>)
 800a27a:	2112      	movs	r1, #18
 800a27c:	7011      	strb	r1, [r2, #0]
 800a27e:	e7d3      	b.n	800a228 <PxMessagingTask+0x1430>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a280:	070a      	lsls	r2, r1, #28
 800a282:	d020      	beq.n	800a2c6 <PxMessagingTask+0x14ce>
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) {			// Write remote value
 800a284:	4a6a      	ldr	r2, [pc, #424]	; (800a430 <PxMessagingTask+0x1638>)
 800a286:	7812      	ldrb	r2, [r2, #0]
 800a288:	2a12      	cmp	r2, #18
 800a28a:	d100      	bne.n	800a28e <PxMessagingTask+0x1496>
 800a28c:	e6ef      	b.n	800a06e <PxMessagingTask+0x1276>
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 800a28e:	464a      	mov	r2, r9
 800a290:	3202      	adds	r2, #2
 800a292:	2138      	movs	r1, #56	; 0x38
 800a294:	4361      	muls	r1, r4
 800a296:	4867      	ldr	r0, [pc, #412]	; (800a434 <PxMessagingTask+0x163c>)
 800a298:	1841      	adds	r1, r0, r1
 800a29a:	5c88      	ldrb	r0, [r1, r2]
 800a29c:	464a      	mov	r2, r9
 800a29e:	3203      	adds	r2, #3
 800a2a0:	5c8a      	ldrb	r2, [r1, r2]
 800a2a2:	0212      	lsls	r2, r2, #8
 800a2a4:	1880      	adds	r0, r0, r2
 800a2a6:	464a      	mov	r2, r9
 800a2a8:	3204      	adds	r2, #4
 800a2aa:	5c8a      	ldrb	r2, [r1, r2]
 800a2ac:	0412      	lsls	r2, r2, #16
 800a2ae:	1882      	adds	r2, r0, r2
 800a2b0:	4648      	mov	r0, r9
 800a2b2:	3005      	adds	r0, #5
 800a2b4:	5c09      	ldrb	r1, [r1, r0]
 800a2b6:	0609      	lsls	r1, r1, #24
 800a2b8:	1852      	adds	r2, r2, r1
 800a2ba:	495f      	ldr	r1, [pc, #380]	; (800a438 <PxMessagingTask+0x1640>)
 800a2bc:	600a      	str	r2, [r1, #0]
 800a2be:	2000      	movs	r0, #0
 800a2c0:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	e6d3      	b.n	800a06e <PxMessagingTask+0x1276>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800a2c6:	2004      	movs	r0, #4
 800a2c8:	f009 f9e6 	bl	8013698 <malloc>
 800a2cc:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a2ce:	d005      	beq.n	800a2dc <PxMessagingTask+0x14e4>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a2d0:	0400      	lsls	r0, r0, #16
 800a2d2:	1986      	adds	r6, r0, r6
 800a2d4:	00bf      	lsls	r7, r7, #2
 800a2d6:	4a55      	ldr	r2, [pc, #340]	; (800a42c <PxMessagingTask+0x1634>)
 800a2d8:	50be      	str	r6, [r7, r2]
 800a2da:	e7d3      	b.n	800a284 <PxMessagingTask+0x148c>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a2dc:	4a54      	ldr	r2, [pc, #336]	; (800a430 <PxMessagingTask+0x1638>)
 800a2de:	2112      	movs	r1, #18
 800a2e0:	7011      	strb	r1, [r2, #0]
 800a2e2:	e7cf      	b.n	800a284 <PxMessagingTask+0x148c>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 800a2e4:	4b52      	ldr	r3, [pc, #328]	; (800a430 <PxMessagingTask+0x1638>)
 800a2e6:	2213      	movs	r2, #19
 800a2e8:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 800a2ea:	4b54      	ldr	r3, [pc, #336]	; (800a43c <PxMessagingTask+0x1644>)
 800a2ec:	799b      	ldrb	r3, [r3, #6]
 800a2ee:	2b60      	cmp	r3, #96	; 0x60
 800a2f0:	d003      	beq.n	800a2fa <PxMessagingTask+0x1502>
 800a2f2:	2b20      	cmp	r3, #32
 800a2f4:	d001      	beq.n	800a2fa <PxMessagingTask+0x1502>
 800a2f6:	f7fe fdd1 	bl	8008e9c <PxMessagingTask+0xa4>
								messageParams[0] = responseStatus;
 800a2fa:	4b4d      	ldr	r3, [pc, #308]	; (800a430 <PxMessagingTask+0x1638>)
 800a2fc:	781a      	ldrb	r2, [r3, #0]
 800a2fe:	4b50      	ldr	r3, [pc, #320]	; (800a440 <PxMessagingTask+0x1648>)
 800a300:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 800a302:	2201      	movs	r2, #1
 800a304:	2121      	movs	r1, #33	; 0x21
 800a306:	4658      	mov	r0, fp
 800a308:	f7fe fac8 	bl	800889c <SendMessageToModule>
 800a30c:	f7fe fdc6 	bl	8008e9c <PxMessagingTask+0xa4>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a310:	3202      	adds	r2, #2
 800a312:	2338      	movs	r3, #56	; 0x38
 800a314:	4363      	muls	r3, r4
 800a316:	4947      	ldr	r1, [pc, #284]	; (800a434 <PxMessagingTask+0x163c>)
 800a318:	18cb      	adds	r3, r1, r3
 800a31a:	5c9f      	ldrb	r7, [r3, r2]
 800a31c:	063f      	lsls	r7, r7, #24
 800a31e:	464a      	mov	r2, r9
 800a320:	3203      	adds	r2, #3
 800a322:	5c9a      	ldrb	r2, [r3, r2]
 800a324:	0412      	lsls	r2, r2, #16
 800a326:	18bf      	adds	r7, r7, r2
 800a328:	464a      	mov	r2, r9
 800a32a:	3204      	adds	r2, #4
 800a32c:	5c9a      	ldrb	r2, [r3, r2]
 800a32e:	0212      	lsls	r2, r2, #8
 800a330:	18bf      	adds	r7, r7, r2
 800a332:	464a      	mov	r2, r9
 800a334:	3205      	adds	r2, #5
 800a336:	5c9b      	ldrb	r3, [r3, r2]
 800a338:	18ff      	adds	r7, r7, r3
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 800a33a:	23e0      	movs	r3, #224	; 0xe0
 800a33c:	061b      	lsls	r3, r3, #24
 800a33e:	18fa      	adds	r2, r7, r3
 800a340:	2380      	movs	r3, #128	; 0x80
 800a342:	021b      	lsls	r3, r3, #8
 800a344:	429a      	cmp	r2, r3
 800a346:	d300      	bcc.n	800a34a <PxMessagingTask+0x1552>
 800a348:	e09a      	b.n	800a480 <PxMessagingTask+0x1688>
									switch (cMessage[port-1][1+shift])															// Requested format
 800a34a:	464b      	mov	r3, r9
 800a34c:	3301      	adds	r3, #1
 800a34e:	2138      	movs	r1, #56	; 0x38
 800a350:	4361      	muls	r1, r4
 800a352:	4a38      	ldr	r2, [pc, #224]	; (800a434 <PxMessagingTask+0x163c>)
 800a354:	1852      	adds	r2, r2, r1
 800a356:	5cd3      	ldrb	r3, [r2, r3]
 800a358:	3b01      	subs	r3, #1
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	2a07      	cmp	r2, #7
 800a35e:	d8c4      	bhi.n	800a2ea <PxMessagingTask+0x14f2>
 800a360:	b2db      	uxtb	r3, r3
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4a37      	ldr	r2, [pc, #220]	; (800a444 <PxMessagingTask+0x164c>)
 800a366:	58d3      	ldr	r3, [r2, r3]
 800a368:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 800a36a:	4649      	mov	r1, r9
 800a36c:	3106      	adds	r1, #6
 800a36e:	2238      	movs	r2, #56	; 0x38
 800a370:	4362      	muls	r2, r4
 800a372:	4b30      	ldr	r3, [pc, #192]	; (800a434 <PxMessagingTask+0x163c>)
 800a374:	189b      	adds	r3, r3, r2
 800a376:	5c5b      	ldrb	r3, [r3, r1]
 800a378:	703b      	strb	r3, [r7, #0]
 800a37a:	e7b6      	b.n	800a2ea <PxMessagingTask+0x14f2>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 800a37c:	4649      	mov	r1, r9
 800a37e:	3106      	adds	r1, #6
 800a380:	2238      	movs	r2, #56	; 0x38
 800a382:	4362      	muls	r2, r4
 800a384:	4b2b      	ldr	r3, [pc, #172]	; (800a434 <PxMessagingTask+0x163c>)
 800a386:	189b      	adds	r3, r3, r2
 800a388:	565b      	ldrsb	r3, [r3, r1]
 800a38a:	703b      	strb	r3, [r7, #0]
 800a38c:	e7ad      	b.n	800a2ea <PxMessagingTask+0x14f2>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 800a38e:	464b      	mov	r3, r9
 800a390:	1d99      	adds	r1, r3, #6
 800a392:	2338      	movs	r3, #56	; 0x38
 800a394:	4363      	muls	r3, r4
 800a396:	4a27      	ldr	r2, [pc, #156]	; (800a434 <PxMessagingTask+0x163c>)
 800a398:	18d2      	adds	r2, r2, r3
 800a39a:	5c53      	ldrb	r3, [r2, r1]
 800a39c:	4649      	mov	r1, r9
 800a39e:	3107      	adds	r1, #7
 800a3a0:	5c52      	ldrb	r2, [r2, r1]
 800a3a2:	0212      	lsls	r2, r2, #8
 800a3a4:	189b      	adds	r3, r3, r2
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	803b      	strh	r3, [r7, #0]
 800a3aa:	e79e      	b.n	800a2ea <PxMessagingTask+0x14f2>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 800a3ac:	464b      	mov	r3, r9
 800a3ae:	1d99      	adds	r1, r3, #6
 800a3b0:	2338      	movs	r3, #56	; 0x38
 800a3b2:	4363      	muls	r3, r4
 800a3b4:	4a1f      	ldr	r2, [pc, #124]	; (800a434 <PxMessagingTask+0x163c>)
 800a3b6:	18d2      	adds	r2, r2, r3
 800a3b8:	5c53      	ldrb	r3, [r2, r1]
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	3107      	adds	r1, #7
 800a3be:	5c52      	ldrb	r2, [r2, r1]
 800a3c0:	0212      	lsls	r2, r2, #8
 800a3c2:	189b      	adds	r3, r3, r2
 800a3c4:	b21b      	sxth	r3, r3
 800a3c6:	803b      	strh	r3, [r7, #0]
 800a3c8:	e78f      	b.n	800a2ea <PxMessagingTask+0x14f2>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 800a3ca:	464b      	mov	r3, r9
 800a3cc:	1d99      	adds	r1, r3, #6
 800a3ce:	2338      	movs	r3, #56	; 0x38
 800a3d0:	4363      	muls	r3, r4
 800a3d2:	4a18      	ldr	r2, [pc, #96]	; (800a434 <PxMessagingTask+0x163c>)
 800a3d4:	18d2      	adds	r2, r2, r3
 800a3d6:	5c53      	ldrb	r3, [r2, r1]
 800a3d8:	4649      	mov	r1, r9
 800a3da:	3107      	adds	r1, #7
 800a3dc:	5c51      	ldrb	r1, [r2, r1]
 800a3de:	0209      	lsls	r1, r1, #8
 800a3e0:	185b      	adds	r3, r3, r1
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	3108      	adds	r1, #8
 800a3e6:	5c51      	ldrb	r1, [r2, r1]
 800a3e8:	0409      	lsls	r1, r1, #16
 800a3ea:	185b      	adds	r3, r3, r1
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	3109      	adds	r1, #9
 800a3f0:	5c52      	ldrb	r2, [r2, r1]
 800a3f2:	0612      	lsls	r2, r2, #24
 800a3f4:	189b      	adds	r3, r3, r2
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	e777      	b.n	800a2ea <PxMessagingTask+0x14f2>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	1d99      	adds	r1, r3, #6
 800a3fe:	2338      	movs	r3, #56	; 0x38
 800a400:	4363      	muls	r3, r4
 800a402:	4a0c      	ldr	r2, [pc, #48]	; (800a434 <PxMessagingTask+0x163c>)
 800a404:	18d2      	adds	r2, r2, r3
 800a406:	5c53      	ldrb	r3, [r2, r1]
 800a408:	4649      	mov	r1, r9
 800a40a:	3107      	adds	r1, #7
 800a40c:	5c51      	ldrb	r1, [r2, r1]
 800a40e:	0209      	lsls	r1, r1, #8
 800a410:	185b      	adds	r3, r3, r1
 800a412:	4649      	mov	r1, r9
 800a414:	3108      	adds	r1, #8
 800a416:	5c51      	ldrb	r1, [r2, r1]
 800a418:	0409      	lsls	r1, r1, #16
 800a41a:	185b      	adds	r3, r3, r1
 800a41c:	4649      	mov	r1, r9
 800a41e:	3109      	adds	r1, #9
 800a420:	5c52      	ldrb	r2, [r2, r1]
 800a422:	0612      	lsls	r2, r2, #24
 800a424:	189b      	adds	r3, r3, r2
 800a426:	603b      	str	r3, [r7, #0]
 800a428:	e75f      	b.n	800a2ea <PxMessagingTask+0x14f2>
 800a42a:	46c0      	nop			; (mov r8, r8)
 800a42c:	200060c0 	.word	0x200060c0
 800a430:	20000930 	.word	0x20000930
 800a434:	20000568 	.word	0x20000568
 800a438:	20000928 	.word	0x20000928
 800a43c:	20006138 	.word	0x20006138
 800a440:	20000760 	.word	0x20000760
 800a444:	0801abf4 	.word	0x0801abf4
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a448:	464b      	mov	r3, r9
 800a44a:	1d99      	adds	r1, r3, #6
 800a44c:	2338      	movs	r3, #56	; 0x38
 800a44e:	4363      	muls	r3, r4
 800a450:	4a8f      	ldr	r2, [pc, #572]	; (800a690 <PxMessagingTask+0x1898>)
 800a452:	18d2      	adds	r2, r2, r3
 800a454:	5c53      	ldrb	r3, [r2, r1]
 800a456:	4649      	mov	r1, r9
 800a458:	3107      	adds	r1, #7
 800a45a:	5c51      	ldrb	r1, [r2, r1]
 800a45c:	0209      	lsls	r1, r1, #8
 800a45e:	185b      	adds	r3, r3, r1
 800a460:	4649      	mov	r1, r9
 800a462:	3108      	adds	r1, #8
 800a464:	5c51      	ldrb	r1, [r2, r1]
 800a466:	0409      	lsls	r1, r1, #16
 800a468:	185b      	adds	r3, r3, r1
 800a46a:	4649      	mov	r1, r9
 800a46c:	3109      	adds	r1, #9
 800a46e:	5c52      	ldrb	r2, [r2, r1]
 800a470:	0612      	lsls	r2, r2, #24
 800a472:	189b      	adds	r3, r3, r2
 800a474:	4a87      	ldr	r2, [pc, #540]	; (800a694 <PxMessagingTask+0x189c>)
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	2100      	movs	r1, #0
 800a47a:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800a47c:	603b      	str	r3, [r7, #0]
 800a47e:	e734      	b.n	800a2ea <PxMessagingTask+0x14f2>
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800a480:	2280      	movs	r2, #128	; 0x80
 800a482:	0292      	lsls	r2, r2, #10
 800a484:	23f8      	movs	r3, #248	; 0xf8
 800a486:	061b      	lsls	r3, r3, #24
 800a488:	18fb      	adds	r3, r7, r3
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d303      	bcc.n	800a496 <PxMessagingTask+0x169e>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800a48e:	4b82      	ldr	r3, [pc, #520]	; (800a698 <PxMessagingTask+0x18a0>)
 800a490:	2215      	movs	r2, #21
 800a492:	701a      	strb	r2, [r3, #0]
 800a494:	e729      	b.n	800a2ea <PxMessagingTask+0x14f2>
									HAL_FLASH_Unlock();
 800a496:	f007 f997 	bl	80117c8 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800a49a:	2e22      	cmp	r6, #34	; 0x22
 800a49c:	d013      	beq.n	800a4c6 <PxMessagingTask+0x16ce>
									if (responseStatus == BOS_OK)
 800a49e:	4b7e      	ldr	r3, [pc, #504]	; (800a698 <PxMessagingTask+0x18a0>)
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d12a      	bne.n	800a4fc <PxMessagingTask+0x1704>
										switch (cMessage[port-1][1+shift])															// Requested format
 800a4a6:	464b      	mov	r3, r9
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	2138      	movs	r1, #56	; 0x38
 800a4ac:	4361      	muls	r1, r4
 800a4ae:	4a78      	ldr	r2, [pc, #480]	; (800a690 <PxMessagingTask+0x1898>)
 800a4b0:	1852      	adds	r2, r2, r1
 800a4b2:	5cd3      	ldrb	r3, [r2, r3]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	2a07      	cmp	r2, #7
 800a4ba:	d81f      	bhi.n	800a4fc <PxMessagingTask+0x1704>
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4a76      	ldr	r2, [pc, #472]	; (800a69c <PxMessagingTask+0x18a4>)
 800a4c2:	58d3      	ldr	r3, [r2, r3]
 800a4c4:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	930f      	str	r3, [sp, #60]	; 0x3c
										erase.PageAddress = temp32;
 800a4ca:	9710      	str	r7, [sp, #64]	; 0x40
										erase.NbPages = 1;
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	9311      	str	r3, [sp, #68]	; 0x44
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800a4d0:	a90e      	add	r1, sp, #56	; 0x38
 800a4d2:	a80f      	add	r0, sp, #60	; 0x3c
 800a4d4:	f007 fa3a 	bl	801194c <HAL_FLASHEx_Erase>
 800a4d8:	9007      	str	r0, [sp, #28]
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d102      	bne.n	800a4e4 <PxMessagingTask+0x16ec>
 800a4de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	d0dc      	beq.n	800a49e <PxMessagingTask+0x16a6>
 800a4e4:	4b6c      	ldr	r3, [pc, #432]	; (800a698 <PxMessagingTask+0x18a0>)
 800a4e6:	2216      	movs	r2, #22
 800a4e8:	701a      	strb	r2, [r3, #0]
 800a4ea:	e7d8      	b.n	800a49e <PxMessagingTask+0x16a6>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800a4ec:	883b      	ldrh	r3, [r7, #0]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	4a6b      	ldr	r2, [pc, #428]	; (800a6a0 <PxMessagingTask+0x18a8>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d00c      	beq.n	800a510 <PxMessagingTask+0x1718>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a4f6:	4b68      	ldr	r3, [pc, #416]	; (800a698 <PxMessagingTask+0x18a0>)
 800a4f8:	2216      	movs	r2, #22
 800a4fa:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800a4fc:	f007 f978 	bl	80117f0 <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800a500:	9b07      	ldr	r3, [sp, #28]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d100      	bne.n	800a508 <PxMessagingTask+0x1710>
 800a506:	e6f0      	b.n	800a2ea <PxMessagingTask+0x14f2>
 800a508:	4b63      	ldr	r3, [pc, #396]	; (800a698 <PxMessagingTask+0x18a0>)
 800a50a:	2216      	movs	r2, #22
 800a50c:	701a      	strb	r2, [r3, #0]
 800a50e:	e6ec      	b.n	800a2ea <PxMessagingTask+0x14f2>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800a510:	4649      	mov	r1, r9
 800a512:	3106      	adds	r1, #6
 800a514:	2238      	movs	r2, #56	; 0x38
 800a516:	4362      	muls	r2, r4
 800a518:	4b5d      	ldr	r3, [pc, #372]	; (800a690 <PxMessagingTask+0x1898>)
 800a51a:	189b      	adds	r3, r3, r2
 800a51c:	5c5a      	ldrb	r2, [r3, r1]
 800a51e:	2300      	movs	r3, #0
 800a520:	495c      	ldr	r1, [pc, #368]	; (800a694 <PxMessagingTask+0x189c>)
 800a522:	600a      	str	r2, [r1, #0]
 800a524:	604b      	str	r3, [r1, #4]
 800a526:	0039      	movs	r1, r7
 800a528:	2001      	movs	r0, #1
 800a52a:	f007 f997 	bl	801185c <HAL_FLASH_Program>
 800a52e:	9007      	str	r0, [sp, #28]
 800a530:	e7e4      	b.n	800a4fc <PxMessagingTask+0x1704>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800a532:	883b      	ldrh	r3, [r7, #0]
 800a534:	b29b      	uxth	r3, r3
 800a536:	4a5a      	ldr	r2, [pc, #360]	; (800a6a0 <PxMessagingTask+0x18a8>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d003      	beq.n	800a544 <PxMessagingTask+0x174c>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a53c:	4b56      	ldr	r3, [pc, #344]	; (800a698 <PxMessagingTask+0x18a0>)
 800a53e:	2216      	movs	r2, #22
 800a540:	701a      	strb	r2, [r3, #0]
 800a542:	e7db      	b.n	800a4fc <PxMessagingTask+0x1704>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800a544:	464b      	mov	r3, r9
 800a546:	1d99      	adds	r1, r3, #6
 800a548:	2238      	movs	r2, #56	; 0x38
 800a54a:	4362      	muls	r2, r4
 800a54c:	4b50      	ldr	r3, [pc, #320]	; (800a690 <PxMessagingTask+0x1898>)
 800a54e:	189b      	adds	r3, r3, r2
 800a550:	5c5a      	ldrb	r2, [r3, r1]
 800a552:	4649      	mov	r1, r9
 800a554:	3107      	adds	r1, #7
 800a556:	5c5b      	ldrb	r3, [r3, r1]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	18d2      	adds	r2, r2, r3
 800a55c:	2300      	movs	r3, #0
 800a55e:	494d      	ldr	r1, [pc, #308]	; (800a694 <PxMessagingTask+0x189c>)
 800a560:	600a      	str	r2, [r1, #0]
 800a562:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800a564:	0039      	movs	r1, r7
 800a566:	2001      	movs	r0, #1
 800a568:	f007 f978 	bl	801185c <HAL_FLASH_Program>
 800a56c:	9007      	str	r0, [sp, #28]
 800a56e:	e7c5      	b.n	800a4fc <PxMessagingTask+0x1704>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	3301      	adds	r3, #1
 800a574:	d003      	beq.n	800a57e <PxMessagingTask+0x1786>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a576:	4b48      	ldr	r3, [pc, #288]	; (800a698 <PxMessagingTask+0x18a0>)
 800a578:	2216      	movs	r2, #22
 800a57a:	701a      	strb	r2, [r3, #0]
 800a57c:	e7be      	b.n	800a4fc <PxMessagingTask+0x1704>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800a57e:	464b      	mov	r3, r9
 800a580:	1d9a      	adds	r2, r3, #6
 800a582:	2338      	movs	r3, #56	; 0x38
 800a584:	4363      	muls	r3, r4
 800a586:	4942      	ldr	r1, [pc, #264]	; (800a690 <PxMessagingTask+0x1898>)
 800a588:	18cb      	adds	r3, r1, r3
 800a58a:	5c9a      	ldrb	r2, [r3, r2]
 800a58c:	4649      	mov	r1, r9
 800a58e:	3107      	adds	r1, #7
 800a590:	5c59      	ldrb	r1, [r3, r1]
 800a592:	0209      	lsls	r1, r1, #8
 800a594:	1852      	adds	r2, r2, r1
 800a596:	4649      	mov	r1, r9
 800a598:	3108      	adds	r1, #8
 800a59a:	5c59      	ldrb	r1, [r3, r1]
 800a59c:	0409      	lsls	r1, r1, #16
 800a59e:	1852      	adds	r2, r2, r1
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	3109      	adds	r1, #9
 800a5a4:	5c5b      	ldrb	r3, [r3, r1]
 800a5a6:	061b      	lsls	r3, r3, #24
 800a5a8:	18d2      	adds	r2, r2, r3
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4939      	ldr	r1, [pc, #228]	; (800a694 <PxMessagingTask+0x189c>)
 800a5ae:	600a      	str	r2, [r1, #0]
 800a5b0:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800a5b2:	0039      	movs	r1, r7
 800a5b4:	2002      	movs	r0, #2
 800a5b6:	f007 f951 	bl	801185c <HAL_FLASH_Program>
 800a5ba:	9007      	str	r0, [sp, #28]
 800a5bc:	e79e      	b.n	800a4fc <PxMessagingTask+0x1704>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	d003      	beq.n	800a5cc <PxMessagingTask+0x17d4>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a5c4:	4b34      	ldr	r3, [pc, #208]	; (800a698 <PxMessagingTask+0x18a0>)
 800a5c6:	2216      	movs	r2, #22
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	e797      	b.n	800a4fc <PxMessagingTask+0x1704>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a5cc:	464b      	mov	r3, r9
 800a5ce:	1d9a      	adds	r2, r3, #6
 800a5d0:	2338      	movs	r3, #56	; 0x38
 800a5d2:	4363      	muls	r3, r4
 800a5d4:	492e      	ldr	r1, [pc, #184]	; (800a690 <PxMessagingTask+0x1898>)
 800a5d6:	18cb      	adds	r3, r1, r3
 800a5d8:	5c9a      	ldrb	r2, [r3, r2]
 800a5da:	4649      	mov	r1, r9
 800a5dc:	3107      	adds	r1, #7
 800a5de:	5c59      	ldrb	r1, [r3, r1]
 800a5e0:	0209      	lsls	r1, r1, #8
 800a5e2:	1852      	adds	r2, r2, r1
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	3108      	adds	r1, #8
 800a5e8:	5c59      	ldrb	r1, [r3, r1]
 800a5ea:	0409      	lsls	r1, r1, #16
 800a5ec:	1852      	adds	r2, r2, r1
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	3109      	adds	r1, #9
 800a5f2:	5c5b      	ldrb	r3, [r3, r1]
 800a5f4:	061b      	lsls	r3, r3, #24
 800a5f6:	18d2      	adds	r2, r2, r3
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4926      	ldr	r1, [pc, #152]	; (800a694 <PxMessagingTask+0x189c>)
 800a5fc:	600a      	str	r2, [r1, #0]
 800a5fe:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800a600:	0039      	movs	r1, r7
 800a602:	2003      	movs	r0, #3
 800a604:	f007 f92a 	bl	801185c <HAL_FLASH_Program>
 800a608:	9007      	str	r0, [sp, #28]
 800a60a:	e777      	b.n	800a4fc <PxMessagingTask+0x1704>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800a60c:	00e3      	lsls	r3, r4, #3
 800a60e:	1b1b      	subs	r3, r3, r4
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	4a1f      	ldr	r2, [pc, #124]	; (800a690 <PxMessagingTask+0x1898>)
 800a614:	18d3      	adds	r3, r2, r3
 800a616:	464a      	mov	r2, r9
 800a618:	5c9a      	ldrb	r2, [r3, r2]
 800a61a:	4b1f      	ldr	r3, [pc, #124]	; (800a698 <PxMessagingTask+0x18a0>)
 800a61c:	701a      	strb	r2, [r3, #0]
							break;	
 800a61e:	f7fe fc3d 	bl	8008e9c <PxMessagingTask+0xa4>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800a622:	464b      	mov	r3, r9
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	00e3      	lsls	r3, r4, #3
 800a628:	1b19      	subs	r1, r3, r4
 800a62a:	00c9      	lsls	r1, r1, #3
 800a62c:	1889      	adds	r1, r1, r2
 800a62e:	4818      	ldr	r0, [pc, #96]	; (800a690 <PxMessagingTask+0x1898>)
 800a630:	1809      	adds	r1, r1, r0
 800a632:	9a05      	ldr	r2, [sp, #20]
 800a634:	3a01      	subs	r2, #1
 800a636:	b292      	uxth	r2, r2
 800a638:	1b1b      	subs	r3, r3, r4
 800a63a:	00db      	lsls	r3, r3, #3
 800a63c:	18c3      	adds	r3, r0, r3
 800a63e:	4648      	mov	r0, r9
 800a640:	5c18      	ldrb	r0, [r3, r0]
 800a642:	230a      	movs	r3, #10
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	f003 fda3 	bl	800e190 <writePxMutex>
							break;
 800a64a:	f7fe fc27 	bl	8008e9c <PxMessagingTask+0xa4>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800a64e:	464b      	mov	r3, r9
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	003b      	movs	r3, r7
 800a654:	465a      	mov	r2, fp
 800a656:	9906      	ldr	r1, [sp, #24]
 800a658:	0030      	movs	r0, r6
 800a65a:	f7fe fbcb 	bl	8008df4 <User_MessagingParser>
 800a65e:	0005      	movs	r5, r0
							if (result == BOS_ERR_UnknownMessage) {
 800a660:	2801      	cmp	r0, #1
 800a662:	d001      	beq.n	800a668 <PxMessagingTask+0x1870>
 800a664:	f7fe fc1a 	bl	8008e9c <PxMessagingTask+0xa4>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800a668:	464b      	mov	r3, r9
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	003b      	movs	r3, r7
 800a66e:	465a      	mov	r2, fp
 800a670:	9906      	ldr	r1, [sp, #24]
 800a672:	0030      	movs	r0, r6
 800a674:	f001 fb84 	bl	800bd80 <Module_MessagingTask>
 800a678:	0005      	movs	r5, r0
 800a67a:	f7fe fc0f 	bl	8008e9c <PxMessagingTask+0xa4>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800a67e:	2200      	movs	r2, #0
 800a680:	2100      	movs	r1, #0
 800a682:	4658      	mov	r0, fp
 800a684:	f7fe f90a 	bl	800889c <SendMessageToModule>
			result = BOS_OK;			
 800a688:	2500      	movs	r5, #0
 800a68a:	f7fe fc0b 	bl	8008ea4 <PxMessagingTask+0xac>
 800a68e:	46c0      	nop			; (mov r8, r8)
 800a690:	20000568 	.word	0x20000568
 800a694:	20000928 	.word	0x20000928
 800a698:	20000930 	.word	0x20000930
 800a69c:	0801ac14 	.word	0x0801ac14
 800a6a0:	0000ffff 	.word	0x0000ffff

0800a6a4 <variantModParamCommand>:

}
/*-----------------------------------------------------------*/

static portBASE_TYPE variantModParamCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a6a4:	b510      	push	{r4, lr}

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d006      	beq.n	800a6b8 <variantModParamCommand+0x14>

	sprintf((char*) pcWriteBuffer, (char*) Msg, buf);
 800a6aa:	4b04      	ldr	r3, [pc, #16]	; (800a6bc <variantModParamCommand+0x18>)
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	4904      	ldr	r1, [pc, #16]	; (800a6c0 <variantModParamCommand+0x1c>)
 800a6b0:	f009 ffae 	bl	8014610 <siprintf>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800a6b8:	b672      	cpsid	i
 800a6ba:	e7fe      	b.n	800a6ba <variantModParamCommand+0x16>
 800a6bc:	20000f20 	.word	0x20000f20
 800a6c0:	0801ac34 	.word	0x0801ac34

0800a6c4 <xModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE xModParamCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	1e04      	subs	r4, r0, #0

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800a6c8:	d00b      	beq.n	800a6e2 <xModParamCommand+0x1e>

	sprintf((char*) pcWriteBuffer, (char*) Msg, Cbuf1);
 800a6ca:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <xModParamCommand+0x24>)
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	f7f7 fee1 	bl	8002494 <__aeabi_f2d>
 800a6d2:	0002      	movs	r2, r0
 800a6d4:	000b      	movs	r3, r1
 800a6d6:	4905      	ldr	r1, [pc, #20]	; (800a6ec <xModParamCommand+0x28>)
 800a6d8:	0020      	movs	r0, r4
 800a6da:	f009 ff99 	bl	8014610 <siprintf>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a6de:	2000      	movs	r0, #0
 800a6e0:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800a6e2:	b672      	cpsid	i
 800a6e4:	e7fe      	b.n	800a6e4 <xModParamCommand+0x20>
 800a6e6:	46c0      	nop			; (mov r8, r8)
 800a6e8:	20000f04 	.word	0x20000f04
 800a6ec:	0801ac3c 	.word	0x0801ac3c

0800a6f0 <yModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE yModParamCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	1e04      	subs	r4, r0, #0

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800a6f4:	d00b      	beq.n	800a70e <yModParamCommand+0x1e>

	sprintf((char*) pcWriteBuffer, (char*) Msg, Cbuf2);
 800a6f6:	4b07      	ldr	r3, [pc, #28]	; (800a714 <yModParamCommand+0x24>)
 800a6f8:	6818      	ldr	r0, [r3, #0]
 800a6fa:	f7f7 fecb 	bl	8002494 <__aeabi_f2d>
 800a6fe:	0002      	movs	r2, r0
 800a700:	000b      	movs	r3, r1
 800a702:	4905      	ldr	r1, [pc, #20]	; (800a718 <yModParamCommand+0x28>)
 800a704:	0020      	movs	r0, r4
 800a706:	f009 ff83 	bl	8014610 <siprintf>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a70a:	2000      	movs	r0, #0
 800a70c:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800a70e:	b672      	cpsid	i
 800a710:	e7fe      	b.n	800a710 <yModParamCommand+0x20>
 800a712:	46c0      	nop			; (mov r8, r8)
 800a714:	20000f08 	.word	0x20000f08
 800a718:	0801ac3c 	.word	0x0801ac3c

0800a71c <ADC_Select_CH8>:
static void ADC_Select_CH8(void) {
 800a71c:	b500      	push	{lr}
 800a71e:	b085      	sub	sp, #20
	sConfig.Channel = ADC_CHANNEL_8;
 800a720:	2308      	movs	r3, #8
 800a722:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a724:	2380      	movs	r3, #128	; 0x80
 800a726:	015b      	lsls	r3, r3, #5
 800a728:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a72a:	2304      	movs	r3, #4
 800a72c:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a72e:	a901      	add	r1, sp, #4
 800a730:	4802      	ldr	r0, [pc, #8]	; (800a73c <ADC_Select_CH8+0x20>)
 800a732:	f006 f939 	bl	80109a8 <HAL_ADC_ConfigChannel>
}
 800a736:	b005      	add	sp, #20
 800a738:	bd00      	pop	{pc}
 800a73a:	46c0      	nop			; (mov r8, r8)
 800a73c:	200064b8 	.word	0x200064b8

0800a740 <ADC_Deselect_CH8>:
static void ADC_Deselect_CH8(void) {
 800a740:	b500      	push	{lr}
 800a742:	b085      	sub	sp, #20
	sConfig.Channel = ADC_CHANNEL_8;
 800a744:	2308      	movs	r3, #8
 800a746:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800a748:	4b04      	ldr	r3, [pc, #16]	; (800a75c <ADC_Deselect_CH8+0x1c>)
 800a74a:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a74c:	2304      	movs	r3, #4
 800a74e:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a750:	a901      	add	r1, sp, #4
 800a752:	4803      	ldr	r0, [pc, #12]	; (800a760 <ADC_Deselect_CH8+0x20>)
 800a754:	f006 f928 	bl	80109a8 <HAL_ADC_ConfigChannel>
}
 800a758:	b005      	add	sp, #20
 800a75a:	bd00      	pop	{pc}
 800a75c:	00001001 	.word	0x00001001
 800a760:	200064b8 	.word	0x200064b8

0800a764 <ADC_Select_CH9>:
static void ADC_Select_CH9(void) {
 800a764:	b500      	push	{lr}
 800a766:	b085      	sub	sp, #20
	sConfig.Channel = ADC_CHANNEL_9;
 800a768:	2309      	movs	r3, #9
 800a76a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a76c:	2380      	movs	r3, #128	; 0x80
 800a76e:	015b      	lsls	r3, r3, #5
 800a770:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a772:	2304      	movs	r3, #4
 800a774:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a776:	a901      	add	r1, sp, #4
 800a778:	4802      	ldr	r0, [pc, #8]	; (800a784 <ADC_Select_CH9+0x20>)
 800a77a:	f006 f915 	bl	80109a8 <HAL_ADC_ConfigChannel>
}
 800a77e:	b005      	add	sp, #20
 800a780:	bd00      	pop	{pc}
 800a782:	46c0      	nop			; (mov r8, r8)
 800a784:	200064b8 	.word	0x200064b8

0800a788 <ADC_Deselect_CH9>:
static void ADC_Deselect_CH9(void) {
 800a788:	b500      	push	{lr}
 800a78a:	b085      	sub	sp, #20
	sConfig.Channel = ADC_CHANNEL_9;
 800a78c:	2309      	movs	r3, #9
 800a78e:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800a790:	4b04      	ldr	r3, [pc, #16]	; (800a7a4 <ADC_Deselect_CH9+0x1c>)
 800a792:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800a794:	2304      	movs	r3, #4
 800a796:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800a798:	a901      	add	r1, sp, #4
 800a79a:	4803      	ldr	r0, [pc, #12]	; (800a7a8 <ADC_Deselect_CH9+0x20>)
 800a79c:	f006 f904 	bl	80109a8 <HAL_ADC_ConfigChannel>
}
 800a7a0:	b005      	add	sp, #20
 800a7a2:	bd00      	pop	{pc}
 800a7a4:	00001001 	.word	0x00001001
 800a7a8:	200064b8 	.word	0x200064b8

0800a7ac <Adc_Calculation>:
static uint32_t Adc_Calculation(int selected) {
 800a7ac:	b510      	push	{r4, lr}
	switch (selected) {
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d004      	beq.n	800a7bc <Adc_Calculation+0x10>
 800a7b2:	2801      	cmp	r0, #1
 800a7b4:	d018      	beq.n	800a7e8 <Adc_Calculation+0x3c>
	return *vector;
 800a7b6:	4b17      	ldr	r3, [pc, #92]	; (800a814 <Adc_Calculation+0x68>)
 800a7b8:	6818      	ldr	r0, [r3, #0]
}
 800a7ba:	bd10      	pop	{r4, pc}
		ADC_Select_CH8();
 800a7bc:	f7ff ffae 	bl	800a71c <ADC_Select_CH8>
		HAL_ADC_Start(&hadc);
 800a7c0:	4c15      	ldr	r4, [pc, #84]	; (800a818 <Adc_Calculation+0x6c>)
 800a7c2:	0020      	movs	r0, r4
 800a7c4:	f006 f838 	bl	8010838 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800a7c8:	21fa      	movs	r1, #250	; 0xfa
 800a7ca:	0089      	lsls	r1, r1, #2
 800a7cc:	0020      	movs	r0, r4
 800a7ce:	f006 f885 	bl	80108dc <HAL_ADC_PollForConversion>
		vector[0] = HAL_ADC_GetValue(&hadc);
 800a7d2:	0020      	movs	r0, r4
 800a7d4:	f006 f8e2 	bl	801099c <HAL_ADC_GetValue>
 800a7d8:	4b0e      	ldr	r3, [pc, #56]	; (800a814 <Adc_Calculation+0x68>)
 800a7da:	6018      	str	r0, [r3, #0]
		HAL_ADC_Stop(&hadc);
 800a7dc:	0020      	movs	r0, r4
 800a7de:	f006 f85b 	bl	8010898 <HAL_ADC_Stop>
		ADC_Deselect_CH8();
 800a7e2:	f7ff ffad 	bl	800a740 <ADC_Deselect_CH8>
		break;
 800a7e6:	e7e6      	b.n	800a7b6 <Adc_Calculation+0xa>
		ADC_Select_CH9();
 800a7e8:	f7ff ffbc 	bl	800a764 <ADC_Select_CH9>
		HAL_ADC_Start(&hadc);
 800a7ec:	4c0a      	ldr	r4, [pc, #40]	; (800a818 <Adc_Calculation+0x6c>)
 800a7ee:	0020      	movs	r0, r4
 800a7f0:	f006 f822 	bl	8010838 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800a7f4:	21fa      	movs	r1, #250	; 0xfa
 800a7f6:	0089      	lsls	r1, r1, #2
 800a7f8:	0020      	movs	r0, r4
 800a7fa:	f006 f86f 	bl	80108dc <HAL_ADC_PollForConversion>
		vector[1] = HAL_ADC_GetValue(&hadc);
 800a7fe:	0020      	movs	r0, r4
 800a800:	f006 f8cc 	bl	801099c <HAL_ADC_GetValue>
 800a804:	4b03      	ldr	r3, [pc, #12]	; (800a814 <Adc_Calculation+0x68>)
 800a806:	6058      	str	r0, [r3, #4]
		HAL_ADC_Stop(&hadc);
 800a808:	0020      	movs	r0, r4
 800a80a:	f006 f845 	bl	8010898 <HAL_ADC_Stop>
		ADC_Deselect_CH9();
 800a80e:	f7ff ffbb 	bl	800a788 <ADC_Deselect_CH9>
		break;
 800a812:	e7d0      	b.n	800a7b6 <Adc_Calculation+0xa>
 800a814:	200064b0 	.word	0x200064b0
 800a818:	200064b8 	.word	0x200064b8

0800a81c <Get_Direction>:
static int Get_Direction(void) {
 800a81c:	b510      	push	{r4, lr}
	if (buttonB) {
 800a81e:	4b46      	ldr	r3, [pc, #280]	; (800a938 <Get_Direction+0x11c>)
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d100      	bne.n	800a828 <Get_Direction+0xc>
 800a826:	e085      	b.n	800a934 <Get_Direction+0x118>
		joystickState = BUTTON_CLICKED;
 800a828:	4b44      	ldr	r3, [pc, #272]	; (800a93c <Get_Direction+0x120>)
 800a82a:	2209      	movs	r2, #9
 800a82c:	701a      	strb	r2, [r3, #0]
		buttonB = 0;
 800a82e:	4b42      	ldr	r3, [pc, #264]	; (800a938 <Get_Direction+0x11c>)
 800a830:	2200      	movs	r2, #0
 800a832:	701a      	strb	r2, [r3, #0]
	return joystickState;
 800a834:	4b41      	ldr	r3, [pc, #260]	; (800a93c <Get_Direction+0x120>)
 800a836:	7818      	ldrb	r0, [r3, #0]
 800a838:	b2c0      	uxtb	r0, r0
}
 800a83a:	bd10      	pop	{r4, pc}
			if (vector[1] >= MIN_IDLE && vector[1] <= MAX_IDLE) {
 800a83c:	4b40      	ldr	r3, [pc, #256]	; (800a940 <Get_Direction+0x124>)
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	4b40      	ldr	r3, [pc, #256]	; (800a944 <Get_Direction+0x128>)
 800a842:	429a      	cmp	r2, r3
 800a844:	d907      	bls.n	800a856 <Get_Direction+0x3a>
 800a846:	4b3e      	ldr	r3, [pc, #248]	; (800a940 <Get_Direction+0x124>)
 800a848:	685a      	ldr	r2, [r3, #4]
 800a84a:	4b3f      	ldr	r3, [pc, #252]	; (800a948 <Get_Direction+0x12c>)
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d802      	bhi.n	800a856 <Get_Direction+0x3a>
				joystickState = IDLE;
 800a850:	4b3a      	ldr	r3, [pc, #232]	; (800a93c <Get_Direction+0x120>)
 800a852:	2200      	movs	r2, #0
 800a854:	701a      	strb	r2, [r3, #0]
			if (vector[0] > MAX_Y) {
 800a856:	4b3a      	ldr	r3, [pc, #232]	; (800a940 <Get_Direction+0x124>)
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	4b3c      	ldr	r3, [pc, #240]	; (800a94c <Get_Direction+0x130>)
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d902      	bls.n	800a866 <Get_Direction+0x4a>
				joystickState = UP;
 800a860:	4b36      	ldr	r3, [pc, #216]	; (800a93c <Get_Direction+0x120>)
 800a862:	2203      	movs	r2, #3
 800a864:	701a      	strb	r2, [r3, #0]
			if (vector[0] < MIN_Y) {
 800a866:	4b36      	ldr	r3, [pc, #216]	; (800a940 <Get_Direction+0x124>)
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	23c8      	movs	r3, #200	; 0xc8
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	429a      	cmp	r2, r3
 800a870:	d202      	bcs.n	800a878 <Get_Direction+0x5c>
				joystickState = DOWN;
 800a872:	4b32      	ldr	r3, [pc, #200]	; (800a93c <Get_Direction+0x120>)
 800a874:	2204      	movs	r2, #4
 800a876:	701a      	strb	r2, [r3, #0]
			if (vector[1] > MAX_X) {
 800a878:	4b31      	ldr	r3, [pc, #196]	; (800a940 <Get_Direction+0x124>)
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	4b33      	ldr	r3, [pc, #204]	; (800a94c <Get_Direction+0x130>)
 800a87e:	429a      	cmp	r2, r3
 800a880:	d902      	bls.n	800a888 <Get_Direction+0x6c>
				joystickState = LEFT;
 800a882:	4b2e      	ldr	r3, [pc, #184]	; (800a93c <Get_Direction+0x120>)
 800a884:	2202      	movs	r2, #2
 800a886:	701a      	strb	r2, [r3, #0]
			if (vector[1] < MIN_X) {
 800a888:	4b2d      	ldr	r3, [pc, #180]	; (800a940 <Get_Direction+0x124>)
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	23c8      	movs	r3, #200	; 0xc8
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	429a      	cmp	r2, r3
 800a892:	d202      	bcs.n	800a89a <Get_Direction+0x7e>
				joystickState = RIGHT;
 800a894:	4b29      	ldr	r3, [pc, #164]	; (800a93c <Get_Direction+0x120>)
 800a896:	2201      	movs	r2, #1
 800a898:	701a      	strb	r2, [r3, #0]
			if (vector[0] > MAX_Y && vector[1] < MIN_X) {
 800a89a:	4b29      	ldr	r3, [pc, #164]	; (800a940 <Get_Direction+0x124>)
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	4b2b      	ldr	r3, [pc, #172]	; (800a94c <Get_Direction+0x130>)
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d908      	bls.n	800a8b6 <Get_Direction+0x9a>
 800a8a4:	4b26      	ldr	r3, [pc, #152]	; (800a940 <Get_Direction+0x124>)
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	23c8      	movs	r3, #200	; 0xc8
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d202      	bcs.n	800a8b6 <Get_Direction+0x9a>
				joystickState = UP_RIGHT_CORNER;
 800a8b0:	4b22      	ldr	r3, [pc, #136]	; (800a93c <Get_Direction+0x120>)
 800a8b2:	2205      	movs	r2, #5
 800a8b4:	701a      	strb	r2, [r3, #0]
			if (vector[0] < MIN_Y && vector[1] < MIN_X) {
 800a8b6:	4b22      	ldr	r3, [pc, #136]	; (800a940 <Get_Direction+0x124>)
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	23c8      	movs	r3, #200	; 0xc8
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d208      	bcs.n	800a8d4 <Get_Direction+0xb8>
 800a8c2:	4b1f      	ldr	r3, [pc, #124]	; (800a940 <Get_Direction+0x124>)
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	23c8      	movs	r3, #200	; 0xc8
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d202      	bcs.n	800a8d4 <Get_Direction+0xb8>
				joystickState = DOWN_RIGHT_CORNER;
 800a8ce:	4b1b      	ldr	r3, [pc, #108]	; (800a93c <Get_Direction+0x120>)
 800a8d0:	2206      	movs	r2, #6
 800a8d2:	701a      	strb	r2, [r3, #0]
			if (vector[0] > MAX_Y && vector[1] > MAX_X) {
 800a8d4:	4b1a      	ldr	r3, [pc, #104]	; (800a940 <Get_Direction+0x124>)
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	4b1c      	ldr	r3, [pc, #112]	; (800a94c <Get_Direction+0x130>)
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d907      	bls.n	800a8ee <Get_Direction+0xd2>
 800a8de:	4b18      	ldr	r3, [pc, #96]	; (800a940 <Get_Direction+0x124>)
 800a8e0:	685a      	ldr	r2, [r3, #4]
 800a8e2:	4b1a      	ldr	r3, [pc, #104]	; (800a94c <Get_Direction+0x130>)
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d902      	bls.n	800a8ee <Get_Direction+0xd2>
				joystickState = UP_LEFT_CORNER;
 800a8e8:	4b14      	ldr	r3, [pc, #80]	; (800a93c <Get_Direction+0x120>)
 800a8ea:	2207      	movs	r2, #7
 800a8ec:	701a      	strb	r2, [r3, #0]
			if (vector[0] < MIN_Y && vector[1] > MAX_X) {
 800a8ee:	4b14      	ldr	r3, [pc, #80]	; (800a940 <Get_Direction+0x124>)
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	23c8      	movs	r3, #200	; 0xc8
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d207      	bcs.n	800a90a <Get_Direction+0xee>
 800a8fa:	4b11      	ldr	r3, [pc, #68]	; (800a940 <Get_Direction+0x124>)
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	4b13      	ldr	r3, [pc, #76]	; (800a94c <Get_Direction+0x130>)
 800a900:	429a      	cmp	r2, r3
 800a902:	d902      	bls.n	800a90a <Get_Direction+0xee>
				joystickState = DOWN_LEFT_CORNER;
 800a904:	4b0d      	ldr	r3, [pc, #52]	; (800a93c <Get_Direction+0x120>)
 800a906:	2208      	movs	r2, #8
 800a908:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 2; ++i) {
 800a90a:	3401      	adds	r4, #1
 800a90c:	2c01      	cmp	r4, #1
 800a90e:	dd00      	ble.n	800a912 <Get_Direction+0xf6>
 800a910:	e790      	b.n	800a834 <Get_Direction+0x18>
			Adc_Calculation(i);
 800a912:	0020      	movs	r0, r4
 800a914:	f7ff ff4a 	bl	800a7ac <Adc_Calculation>
			if (vector[0] >= MIN_IDLE && vector[0] <= MAX_IDLE) {
 800a918:	4b09      	ldr	r3, [pc, #36]	; (800a940 <Get_Direction+0x124>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	4b09      	ldr	r3, [pc, #36]	; (800a944 <Get_Direction+0x128>)
 800a91e:	429a      	cmp	r2, r3
 800a920:	d98c      	bls.n	800a83c <Get_Direction+0x20>
 800a922:	4b07      	ldr	r3, [pc, #28]	; (800a940 <Get_Direction+0x124>)
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	4b08      	ldr	r3, [pc, #32]	; (800a948 <Get_Direction+0x12c>)
 800a928:	429a      	cmp	r2, r3
 800a92a:	d887      	bhi.n	800a83c <Get_Direction+0x20>
				joystickState = IDLE;
 800a92c:	4b03      	ldr	r3, [pc, #12]	; (800a93c <Get_Direction+0x120>)
 800a92e:	2200      	movs	r2, #0
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	e783      	b.n	800a83c <Get_Direction+0x20>
		for (int i = 0; i < 2; ++i) {
 800a934:	2400      	movs	r4, #0
 800a936:	e7e9      	b.n	800a90c <Get_Direction+0xf0>
 800a938:	20000f24 	.word	0x20000f24
 800a93c:	20006288 	.word	0x20006288
 800a940:	200064b0 	.word	0x200064b0
 800a944:	0000076b 	.word	0x0000076b
 800a948:	00000834 	.word	0x00000834
 800a94c:	00000f3c 	.word	0x00000f3c

0800a950 <demoCommand>:
		const int8_t *pcCommandString) {
 800a950:	b510      	push	{r4, lr}
 800a952:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800a954:	d007      	beq.n	800a966 <demoCommand+0x16>
	directionNum = Get_Direction();
 800a956:	f7ff ff61 	bl	800a81c <Get_Direction>
	switch (directionNum) {
 800a95a:	2808      	cmp	r0, #8
 800a95c:	d833      	bhi.n	800a9c6 <demoCommand+0x76>
 800a95e:	0080      	lsls	r0, r0, #2
 800a960:	4b1b      	ldr	r3, [pc, #108]	; (800a9d0 <demoCommand+0x80>)
 800a962:	581b      	ldr	r3, [r3, r0]
 800a964:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 800a966:	b672      	cpsid	i
 800a968:	e7fe      	b.n	800a968 <demoCommand+0x18>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a96a:	4b1a      	ldr	r3, [pc, #104]	; (800a9d4 <demoCommand+0x84>)
 800a96c:	4a1a      	ldr	r2, [pc, #104]	; (800a9d8 <demoCommand+0x88>)
 800a96e:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Up";
 800a970:	4a1a      	ldr	r2, [pc, #104]	; (800a9dc <demoCommand+0x8c>)
	sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, directionVal);
 800a972:	4b18      	ldr	r3, [pc, #96]	; (800a9d4 <demoCommand+0x84>)
 800a974:	6819      	ldr	r1, [r3, #0]
 800a976:	0020      	movs	r0, r4
 800a978:	f009 fe4a 	bl	8014610 <siprintf>
}
 800a97c:	2000      	movs	r0, #0
 800a97e:	bd10      	pop	{r4, pc}
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a980:	4b14      	ldr	r3, [pc, #80]	; (800a9d4 <demoCommand+0x84>)
 800a982:	4a15      	ldr	r2, [pc, #84]	; (800a9d8 <demoCommand+0x88>)
 800a984:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Down";
 800a986:	4a16      	ldr	r2, [pc, #88]	; (800a9e0 <demoCommand+0x90>)
		break;
 800a988:	e7f3      	b.n	800a972 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a98a:	4b12      	ldr	r3, [pc, #72]	; (800a9d4 <demoCommand+0x84>)
 800a98c:	4a12      	ldr	r2, [pc, #72]	; (800a9d8 <demoCommand+0x88>)
 800a98e:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Right";
 800a990:	4a14      	ldr	r2, [pc, #80]	; (800a9e4 <demoCommand+0x94>)
		break;
 800a992:	e7ee      	b.n	800a972 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a994:	4b0f      	ldr	r3, [pc, #60]	; (800a9d4 <demoCommand+0x84>)
 800a996:	4a10      	ldr	r2, [pc, #64]	; (800a9d8 <demoCommand+0x88>)
 800a998:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Left";
 800a99a:	4a13      	ldr	r2, [pc, #76]	; (800a9e8 <demoCommand+0x98>)
		break;
 800a99c:	e7e9      	b.n	800a972 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a99e:	4b0d      	ldr	r3, [pc, #52]	; (800a9d4 <demoCommand+0x84>)
 800a9a0:	4a0d      	ldr	r2, [pc, #52]	; (800a9d8 <demoCommand+0x88>)
 800a9a2:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Up_Right_Corner";
 800a9a4:	4a11      	ldr	r2, [pc, #68]	; (800a9ec <demoCommand+0x9c>)
		break;
 800a9a6:	e7e4      	b.n	800a972 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a9a8:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <demoCommand+0x84>)
 800a9aa:	4a0b      	ldr	r2, [pc, #44]	; (800a9d8 <demoCommand+0x88>)
 800a9ac:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Down_Right_Corner";
 800a9ae:	4a10      	ldr	r2, [pc, #64]	; (800a9f0 <demoCommand+0xa0>)
		break;
 800a9b0:	e7df      	b.n	800a972 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a9b2:	4b08      	ldr	r3, [pc, #32]	; (800a9d4 <demoCommand+0x84>)
 800a9b4:	4a08      	ldr	r2, [pc, #32]	; (800a9d8 <demoCommand+0x88>)
 800a9b6:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Up_Left_Corner";
 800a9b8:	4a0e      	ldr	r2, [pc, #56]	; (800a9f4 <demoCommand+0xa4>)
		break;
 800a9ba:	e7da      	b.n	800a972 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are going: %s !!\r\n";
 800a9bc:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <demoCommand+0x84>)
 800a9be:	4a06      	ldr	r2, [pc, #24]	; (800a9d8 <demoCommand+0x88>)
 800a9c0:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Down_Left_Corner";
 800a9c2:	4a0d      	ldr	r2, [pc, #52]	; (800a9f8 <demoCommand+0xa8>)
		break;
 800a9c4:	e7d5      	b.n	800a972 <demoCommand+0x22>
		pcOKMessage = (int8_t*) "We are not moving (%s) !!\r\n";
 800a9c6:	4b03      	ldr	r3, [pc, #12]	; (800a9d4 <demoCommand+0x84>)
 800a9c8:	4a0c      	ldr	r2, [pc, #48]	; (800a9fc <demoCommand+0xac>)
 800a9ca:	601a      	str	r2, [r3, #0]
		directionVal = (char*) (int8_t*) "Idle";
 800a9cc:	4a0c      	ldr	r2, [pc, #48]	; (800aa00 <demoCommand+0xb0>)
		break;
 800a9ce:	e7d0      	b.n	800a972 <demoCommand+0x22>
 800a9d0:	0801ace4 	.word	0x0801ace4
 800a9d4:	200000b4 	.word	0x200000b4
 800a9d8:	0801acb0 	.word	0x0801acb0
 800a9dc:	0801ac44 	.word	0x0801ac44
 800a9e0:	0801ac48 	.word	0x0801ac48
 800a9e4:	0801ac50 	.word	0x0801ac50
 800a9e8:	0801ac58 	.word	0x0801ac58
 800a9ec:	0801ac60 	.word	0x0801ac60
 800a9f0:	0801ac70 	.word	0x0801ac70
 800a9f4:	0801ac84 	.word	0x0801ac84
 800a9f8:	0801ac94 	.word	0x0801ac94
 800a9fc:	0801acc8 	.word	0x0801acc8
 800aa00:	0801aca8 	.word	0x0801aca8

0800aa04 <cartesianCoordinates>:
static void cartesianCoordinates(void) {
 800aa04:	b510      	push	{r4, lr}
	for (int i = 0; i < 2; ++i) {
 800aa06:	2400      	movs	r4, #0
 800aa08:	e02f      	b.n	800aa6a <cartesianCoordinates+0x66>
		} else if (vector[0] > MAX_Y) {
 800aa0a:	4b2b      	ldr	r3, [pc, #172]	; (800aab8 <cartesianCoordinates+0xb4>)
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	4b2b      	ldr	r3, [pc, #172]	; (800aabc <cartesianCoordinates+0xb8>)
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d910      	bls.n	800aa36 <cartesianCoordinates+0x32>
			y = 100.0;
 800aa14:	4b2a      	ldr	r3, [pc, #168]	; (800aac0 <cartesianCoordinates+0xbc>)
 800aa16:	4a2b      	ldr	r2, [pc, #172]	; (800aac4 <cartesianCoordinates+0xc0>)
 800aa18:	601a      	str	r2, [r3, #0]
		if (vector[1] >= MIN_IDLE && vector[1] <= MAX_IDLE) {
 800aa1a:	4b27      	ldr	r3, [pc, #156]	; (800aab8 <cartesianCoordinates+0xb4>)
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	4b2a      	ldr	r3, [pc, #168]	; (800aac8 <cartesianCoordinates+0xc4>)
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d919      	bls.n	800aa58 <cartesianCoordinates+0x54>
 800aa24:	4b24      	ldr	r3, [pc, #144]	; (800aab8 <cartesianCoordinates+0xb4>)
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	4b28      	ldr	r3, [pc, #160]	; (800aacc <cartesianCoordinates+0xc8>)
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d814      	bhi.n	800aa58 <cartesianCoordinates+0x54>
			x = 0.0;
 800aa2e:	4b28      	ldr	r3, [pc, #160]	; (800aad0 <cartesianCoordinates+0xcc>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	e018      	b.n	800aa68 <cartesianCoordinates+0x64>
			y = (vector[0] / 20.475) - 100;
 800aa36:	4b20      	ldr	r3, [pc, #128]	; (800aab8 <cartesianCoordinates+0xb4>)
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	f7f7 fd05 	bl	8002448 <__aeabi_ui2d>
 800aa3e:	4a25      	ldr	r2, [pc, #148]	; (800aad4 <cartesianCoordinates+0xd0>)
 800aa40:	4b25      	ldr	r3, [pc, #148]	; (800aad8 <cartesianCoordinates+0xd4>)
 800aa42:	f7f6 fa79 	bl	8000f38 <__aeabi_ddiv>
 800aa46:	2200      	movs	r2, #0
 800aa48:	4b24      	ldr	r3, [pc, #144]	; (800aadc <cartesianCoordinates+0xd8>)
 800aa4a:	f7f7 f8e7 	bl	8001c1c <__aeabi_dsub>
 800aa4e:	f7f7 fd69 	bl	8002524 <__aeabi_d2f>
 800aa52:	4b1b      	ldr	r3, [pc, #108]	; (800aac0 <cartesianCoordinates+0xbc>)
 800aa54:	6018      	str	r0, [r3, #0]
 800aa56:	e7e0      	b.n	800aa1a <cartesianCoordinates+0x16>
		} else if (vector[1] > MAX_X) {
 800aa58:	4b17      	ldr	r3, [pc, #92]	; (800aab8 <cartesianCoordinates+0xb4>)
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	4b17      	ldr	r3, [pc, #92]	; (800aabc <cartesianCoordinates+0xb8>)
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d916      	bls.n	800aa90 <cartesianCoordinates+0x8c>
			x = -100.0;
 800aa62:	4b1b      	ldr	r3, [pc, #108]	; (800aad0 <cartesianCoordinates+0xcc>)
 800aa64:	4a1e      	ldr	r2, [pc, #120]	; (800aae0 <cartesianCoordinates+0xdc>)
 800aa66:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 2; ++i) {
 800aa68:	3401      	adds	r4, #1
 800aa6a:	2c01      	cmp	r4, #1
 800aa6c:	dc23      	bgt.n	800aab6 <cartesianCoordinates+0xb2>
		Adc_Calculation(i);
 800aa6e:	0020      	movs	r0, r4
 800aa70:	f7ff fe9c 	bl	800a7ac <Adc_Calculation>
		if (vector[0] >= MIN_IDLE && vector[0] <= MAX_IDLE) {
 800aa74:	4b10      	ldr	r3, [pc, #64]	; (800aab8 <cartesianCoordinates+0xb4>)
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	4b13      	ldr	r3, [pc, #76]	; (800aac8 <cartesianCoordinates+0xc4>)
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d9c5      	bls.n	800aa0a <cartesianCoordinates+0x6>
 800aa7e:	4b0e      	ldr	r3, [pc, #56]	; (800aab8 <cartesianCoordinates+0xb4>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	4b12      	ldr	r3, [pc, #72]	; (800aacc <cartesianCoordinates+0xc8>)
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d8c0      	bhi.n	800aa0a <cartesianCoordinates+0x6>
			y = 0.0;
 800aa88:	4b0d      	ldr	r3, [pc, #52]	; (800aac0 <cartesianCoordinates+0xbc>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	e7c4      	b.n	800aa1a <cartesianCoordinates+0x16>
			x = -(vector[1] / 20.475) + 100;
 800aa90:	4b09      	ldr	r3, [pc, #36]	; (800aab8 <cartesianCoordinates+0xb4>)
 800aa92:	6858      	ldr	r0, [r3, #4]
 800aa94:	f7f7 fcd8 	bl	8002448 <__aeabi_ui2d>
 800aa98:	4a0e      	ldr	r2, [pc, #56]	; (800aad4 <cartesianCoordinates+0xd0>)
 800aa9a:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <cartesianCoordinates+0xd4>)
 800aa9c:	f7f6 fa4c 	bl	8000f38 <__aeabi_ddiv>
 800aaa0:	0002      	movs	r2, r0
 800aaa2:	000b      	movs	r3, r1
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	490d      	ldr	r1, [pc, #52]	; (800aadc <cartesianCoordinates+0xd8>)
 800aaa8:	f7f7 f8b8 	bl	8001c1c <__aeabi_dsub>
 800aaac:	f7f7 fd3a 	bl	8002524 <__aeabi_d2f>
 800aab0:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <cartesianCoordinates+0xcc>)
 800aab2:	6018      	str	r0, [r3, #0]
 800aab4:	e7d8      	b.n	800aa68 <cartesianCoordinates+0x64>
}
 800aab6:	bd10      	pop	{r4, pc}
 800aab8:	200064b0 	.word	0x200064b0
 800aabc:	00000f3c 	.word	0x00000f3c
 800aac0:	200063c8 	.word	0x200063c8
 800aac4:	42c80000 	.word	0x42c80000
 800aac8:	0000076b 	.word	0x0000076b
 800aacc:	00000834 	.word	0x00000834
 800aad0:	20006210 	.word	0x20006210
 800aad4:	9999999a 	.word	0x9999999a
 800aad8:	40347999 	.word	0x40347999
 800aadc:	40590000 	.word	0x40590000
 800aae0:	c2c80000 	.word	0xc2c80000

0800aae4 <joystickStopMeasurement>:
static void joystickStopMeasurement(void) {
 800aae4:	b510      	push	{r4, lr}
	HAL_ADC_Stop(&hadc);
 800aae6:	4c06      	ldr	r4, [pc, #24]	; (800ab00 <joystickStopMeasurement+0x1c>)
 800aae8:	0020      	movs	r0, r4
 800aaea:	f005 fed5 	bl	8010898 <HAL_ADC_Stop>
	ADC_Deselect_CH8();
 800aaee:	f7ff fe27 	bl	800a740 <ADC_Deselect_CH8>
	HAL_ADC_Stop(&hadc);
 800aaf2:	0020      	movs	r0, r4
 800aaf4:	f005 fed0 	bl	8010898 <HAL_ADC_Stop>
	ADC_Deselect_CH9();
 800aaf8:	f7ff fe46 	bl	800a788 <ADC_Deselect_CH9>
}
 800aafc:	bd10      	pop	{r4, pc}
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	200064b8 	.word	0x200064b8

0800ab04 <calculateVariantValue>:
static int calculateVariantValue(bool vector, int maxInterval){
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	0005      	movs	r5, r0
 800ab08:	000c      	movs	r4, r1
	variantB = 1;
 800ab0a:	4b2c      	ldr	r3, [pc, #176]	; (800abbc <calculateVariantValue+0xb8>)
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	701a      	strb	r2, [r3, #0]
	Get_Direction();
 800ab10:	f7ff fe84 	bl	800a81c <Get_Direction>
	if (buf <= maxInterval) {
 800ab14:	4b2a      	ldr	r3, [pc, #168]	; (800abc0 <calculateVariantValue+0xbc>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	dc49      	bgt.n	800abb0 <calculateVariantValue+0xac>
		switch (vector) {
 800ab1c:	2d00      	cmp	r5, #0
 800ab1e:	d123      	bne.n	800ab68 <calculateVariantValue+0x64>
			if (joystickState == UP && buf < maxInterval
 800ab20:	4a28      	ldr	r2, [pc, #160]	; (800abc4 <calculateVariantValue+0xc0>)
 800ab22:	7812      	ldrb	r2, [r2, #0]
 800ab24:	2a03      	cmp	r2, #3
 800ab26:	d012      	beq.n	800ab4e <calculateVariantValue+0x4a>
			if (joystickState == DOWN && buf > BASE_RANGE
 800ab28:	4b26      	ldr	r3, [pc, #152]	; (800abc4 <calculateVariantValue+0xc0>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d141      	bne.n	800abb4 <calculateVariantValue+0xb0>
 800ab30:	4b23      	ldr	r3, [pc, #140]	; (800abc0 <calculateVariantValue+0xbc>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	dd3d      	ble.n	800abb4 <calculateVariantValue+0xb0>
					&& joystickState != IDLE) {
 800ab38:	4a22      	ldr	r2, [pc, #136]	; (800abc4 <calculateVariantValue+0xc0>)
 800ab3a:	7812      	ldrb	r2, [r2, #0]
 800ab3c:	2a00      	cmp	r2, #0
 800ab3e:	d039      	beq.n	800abb4 <calculateVariantValue+0xb0>
				buf -= 1;
 800ab40:	3b01      	subs	r3, #1
 800ab42:	4a1f      	ldr	r2, [pc, #124]	; (800abc0 <calculateVariantValue+0xbc>)
 800ab44:	6013      	str	r3, [r2, #0]
				Delay_us(10);
 800ab46:	200a      	movs	r0, #10
 800ab48:	f003 f952 	bl	800ddf0 <StartMicroDelay>
 800ab4c:	e032      	b.n	800abb4 <calculateVariantValue+0xb0>
			if (joystickState == UP && buf < maxInterval
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	daea      	bge.n	800ab28 <calculateVariantValue+0x24>
					&& joystickState != IDLE) {
 800ab52:	4a1c      	ldr	r2, [pc, #112]	; (800abc4 <calculateVariantValue+0xc0>)
 800ab54:	7812      	ldrb	r2, [r2, #0]
 800ab56:	2a00      	cmp	r2, #0
 800ab58:	d0e6      	beq.n	800ab28 <calculateVariantValue+0x24>
				buf += 1;
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	4a18      	ldr	r2, [pc, #96]	; (800abc0 <calculateVariantValue+0xbc>)
 800ab5e:	6013      	str	r3, [r2, #0]
				Delay_us(10);
 800ab60:	200a      	movs	r0, #10
 800ab62:	f003 f945 	bl	800ddf0 <StartMicroDelay>
 800ab66:	e7df      	b.n	800ab28 <calculateVariantValue+0x24>
			if (joystickState == RIGHT && buf < maxInterval
 800ab68:	4a16      	ldr	r2, [pc, #88]	; (800abc4 <calculateVariantValue+0xc0>)
 800ab6a:	7812      	ldrb	r2, [r2, #0]
 800ab6c:	2a01      	cmp	r2, #1
 800ab6e:	d012      	beq.n	800ab96 <calculateVariantValue+0x92>
			if (joystickState == LEFT && buf > BASE_RANGE
 800ab70:	4b14      	ldr	r3, [pc, #80]	; (800abc4 <calculateVariantValue+0xc0>)
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d11d      	bne.n	800abb4 <calculateVariantValue+0xb0>
 800ab78:	4b11      	ldr	r3, [pc, #68]	; (800abc0 <calculateVariantValue+0xbc>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	dd19      	ble.n	800abb4 <calculateVariantValue+0xb0>
					&& joystickState != IDLE) {
 800ab80:	4a10      	ldr	r2, [pc, #64]	; (800abc4 <calculateVariantValue+0xc0>)
 800ab82:	7812      	ldrb	r2, [r2, #0]
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	d015      	beq.n	800abb4 <calculateVariantValue+0xb0>
				buf -= 1;
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	4a0d      	ldr	r2, [pc, #52]	; (800abc0 <calculateVariantValue+0xbc>)
 800ab8c:	6013      	str	r3, [r2, #0]
				Delay_us(10);
 800ab8e:	200a      	movs	r0, #10
 800ab90:	f003 f92e 	bl	800ddf0 <StartMicroDelay>
 800ab94:	e00e      	b.n	800abb4 <calculateVariantValue+0xb0>
			if (joystickState == RIGHT && buf < maxInterval
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	daea      	bge.n	800ab70 <calculateVariantValue+0x6c>
					&& joystickState != IDLE) {
 800ab9a:	4a0a      	ldr	r2, [pc, #40]	; (800abc4 <calculateVariantValue+0xc0>)
 800ab9c:	7812      	ldrb	r2, [r2, #0]
 800ab9e:	2a00      	cmp	r2, #0
 800aba0:	d0e6      	beq.n	800ab70 <calculateVariantValue+0x6c>
				buf += 1;
 800aba2:	3301      	adds	r3, #1
 800aba4:	4a06      	ldr	r2, [pc, #24]	; (800abc0 <calculateVariantValue+0xbc>)
 800aba6:	6013      	str	r3, [r2, #0]
				Delay_us(10);
 800aba8:	200a      	movs	r0, #10
 800abaa:	f003 f921 	bl	800ddf0 <StartMicroDelay>
 800abae:	e7df      	b.n	800ab70 <calculateVariantValue+0x6c>
		buf = maxInterval;
 800abb0:	4b03      	ldr	r3, [pc, #12]	; (800abc0 <calculateVariantValue+0xbc>)
 800abb2:	601c      	str	r4, [r3, #0]
	return buf;
 800abb4:	4b02      	ldr	r3, [pc, #8]	; (800abc0 <calculateVariantValue+0xbc>)
 800abb6:	6818      	ldr	r0, [r3, #0]
}
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	46c0      	nop			; (mov r8, r8)
 800abbc:	20000f34 	.word	0x20000f34
 800abc0:	20000f20 	.word	0x20000f20
 800abc4:	20006288 	.word	0x20006288

0800abc8 <CheckForEnterKey>:
static void CheckForEnterKey(void) {
 800abc8:	b510      	push	{r4, lr}
 800abca:	b082      	sub	sp, #8
	stopB = 0;
 800abcc:	4b12      	ldr	r3, [pc, #72]	; (800ac18 <CheckForEnterKey+0x50>)
 800abce:	2200      	movs	r2, #0
 800abd0:	701a      	strb	r2, [r3, #0]
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800abd2:	2300      	movs	r3, #0
 800abd4:	2b3f      	cmp	r3, #63	; 0x3f
 800abd6:	d81d      	bhi.n	800ac14 <CheckForEnterKey+0x4c>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800abd8:	4a10      	ldr	r2, [pc, #64]	; (800ac1c <CheckForEnterKey+0x54>)
 800abda:	7812      	ldrb	r2, [r2, #0]
 800abdc:	3a01      	subs	r2, #1
 800abde:	001c      	movs	r4, r3
 800abe0:	0190      	lsls	r0, r2, #6
 800abe2:	490f      	ldr	r1, [pc, #60]	; (800ac20 <CheckForEnterKey+0x58>)
 800abe4:	1809      	adds	r1, r1, r0
 800abe6:	5cc9      	ldrb	r1, [r1, r3]
 800abe8:	290d      	cmp	r1, #13
 800abea:	d002      	beq.n	800abf2 <CheckForEnterKey+0x2a>
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800abec:	3301      	adds	r3, #1
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	e7f0      	b.n	800abd4 <CheckForEnterKey+0xc>
			UARTRxBuf[PcPort - 1][chr] = 0;
 800abf2:	4b0b      	ldr	r3, [pc, #44]	; (800ac20 <CheckForEnterKey+0x58>)
 800abf4:	181a      	adds	r2, r3, r0
 800abf6:	2300      	movs	r3, #0
 800abf8:	5513      	strb	r3, [r2, r4]
			joystickMode = REQ_STOP;		// Stop the streaming task
 800abfa:	4a0a      	ldr	r2, [pc, #40]	; (800ac24 <CheckForEnterKey+0x5c>)
 800abfc:	3102      	adds	r1, #2
 800abfe:	7011      	strb	r1, [r2, #0]
			xTimerStop(xTimerJoystick, 0); // Stop any running timeout timer
 800ac00:	4a09      	ldr	r2, [pc, #36]	; (800ac28 <CheckForEnterKey+0x60>)
 800ac02:	6810      	ldr	r0, [r2, #0]
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	2200      	movs	r2, #0
 800ac08:	390c      	subs	r1, #12
 800ac0a:	f005 f955 	bl	800feb8 <xTimerGenericCommand>
			stopB = 1;
 800ac0e:	4b02      	ldr	r3, [pc, #8]	; (800ac18 <CheckForEnterKey+0x50>)
 800ac10:	2201      	movs	r2, #1
 800ac12:	701a      	strb	r2, [r3, #0]
}
 800ac14:	b002      	add	sp, #8
 800ac16:	bd10      	pop	{r4, pc}
 800ac18:	20000f2d 	.word	0x20000f2d
 800ac1c:	200002d7 	.word	0x200002d7
 800ac20:	20000afc 	.word	0x20000afc
 800ac24:	200062d8 	.word	0x200062d8
 800ac28:	20000f38 	.word	0x20000f38

0800ac2c <SendMeasurementResult>:
		int *int_buffer, float *float_buffer1, float *float_buffer2) {
 800ac2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac2e:	46ce      	mov	lr, r9
 800ac30:	4647      	mov	r7, r8
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b089      	sub	sp, #36	; 0x24
 800ac36:	000c      	movs	r4, r1
 800ac38:	1c16      	adds	r6, r2, #0
 800ac3a:	1c1d      	adds	r5, r3, #0
 800ac3c:	ab10      	add	r3, sp, #64	; 0x40
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	4698      	mov	r8, r3
 800ac42:	ab11      	add	r3, sp, #68	; 0x44
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	4699      	mov	r9, r3
	float fXMessage = fXValue;
 800ac48:	9204      	str	r2, [sp, #16]
	float fYMessage = fYValue;
 800ac4a:	9503      	str	r5, [sp, #12]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800ac4c:	f003 fcf6 	bl	800e63c <FreeRTOS_CLIGetOutputBuffer>
 800ac50:	0007      	movs	r7, r0
	if (variantB) {
 800ac52:	4ba1      	ldr	r3, [pc, #644]	; (800aed8 <SendMeasurementResult+0x2ac>)
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d028      	beq.n	800acac <SendMeasurementResult+0x80>
		pcTMsg = (int8_t*) "%d\r\n";
 800ac5a:	4ba0      	ldr	r3, [pc, #640]	; (800aedc <SendMeasurementResult+0x2b0>)
 800ac5c:	4aa0      	ldr	r2, [pc, #640]	; (800aee0 <SendMeasurementResult+0x2b4>)
 800ac5e:	601a      	str	r2, [r3, #0]
		sendTVariant = int_value;
 800ac60:	9407      	str	r4, [sp, #28]
		variantB = 0;
 800ac62:	4b9d      	ldr	r3, [pc, #628]	; (800aed8 <SendMeasurementResult+0x2ac>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	701a      	strb	r2, [r3, #0]
	int8_t *message = (int8_t*) "";
 800ac68:	4a9e      	ldr	r2, [pc, #632]	; (800aee4 <SendMeasurementResult+0x2b8>)
	switch (joystickMode) {
 800ac6a:	4b9f      	ldr	r3, [pc, #636]	; (800aee8 <SendMeasurementResult+0x2bc>)
 800ac6c:	7819      	ldrb	r1, [r3, #0]
 800ac6e:	b2cb      	uxtb	r3, r1
 800ac70:	2904      	cmp	r1, #4
 800ac72:	d100      	bne.n	800ac76 <SendMeasurementResult+0x4a>
 800ac74:	e108      	b.n	800ae88 <SendMeasurementResult+0x25c>
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	d862      	bhi.n	800ad40 <SendMeasurementResult+0x114>
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d100      	bne.n	800ac80 <SendMeasurementResult+0x54>
 800ac7e:	e094      	b.n	800adaa <SendMeasurementResult+0x17e>
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	d175      	bne.n	800ad70 <SendMeasurementResult+0x144>
		if (type == directionStream) {
 800ac84:	4b99      	ldr	r3, [pc, #612]	; (800aeec <SendMeasurementResult+0x2c0>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d000      	beq.n	800ac8e <SendMeasurementResult+0x62>
 800ac8c:	e0c2      	b.n	800ae14 <SendMeasurementResult+0x1e8>
			if (module == myID) {
 800ac8e:	4b98      	ldr	r3, [pc, #608]	; (800aef0 <SendMeasurementResult+0x2c4>)
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	4543      	cmp	r3, r8
 800ac94:	d100      	bne.n	800ac98 <SendMeasurementResult+0x6c>
 800ac96:	e0b5      	b.n	800ae04 <SendMeasurementResult+0x1d8>
				messageParams[0] = port;
 800ac98:	4b96      	ldr	r3, [pc, #600]	; (800aef4 <SendMeasurementResult+0x2c8>)
 800ac9a:	464a      	mov	r2, r9
 800ac9c:	701a      	strb	r2, [r3, #0]
				messageParams[1] = (int_value);
 800ac9e:	705c      	strb	r4, [r3, #1]
				SendMessageToModule(module, CODE_PORT_FORWARD,
 800aca0:	2202      	movs	r2, #2
 800aca2:	2123      	movs	r1, #35	; 0x23
 800aca4:	4640      	mov	r0, r8
 800aca6:	f7fd fdf9 	bl	800889c <SendMessageToModule>
 800acaa:	e061      	b.n	800ad70 <SendMeasurementResult+0x144>
		if (type == directionStream) {
 800acac:	4b8f      	ldr	r3, [pc, #572]	; (800aeec <SendMeasurementResult+0x2c0>)
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d137      	bne.n	800ad24 <SendMeasurementResult+0xf8>
			switch (int_value) {
 800acb4:	2c09      	cmp	r4, #9
 800acb6:	d830      	bhi.n	800ad1a <SendMeasurementResult+0xee>
 800acb8:	00a3      	lsls	r3, r4, #2
 800acba:	4a8f      	ldr	r2, [pc, #572]	; (800aef8 <SendMeasurementResult+0x2cc>)
 800acbc:	58d3      	ldr	r3, [r2, r3]
 800acbe:	469f      	mov	pc, r3
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800acc0:	4b86      	ldr	r3, [pc, #536]	; (800aedc <SendMeasurementResult+0x2b0>)
 800acc2:	4a8e      	ldr	r2, [pc, #568]	; (800aefc <SendMeasurementResult+0x2d0>)
 800acc4:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Up";
 800acc6:	4a8e      	ldr	r2, [pc, #568]	; (800af00 <SendMeasurementResult+0x2d4>)
				break;
 800acc8:	e7cf      	b.n	800ac6a <SendMeasurementResult+0x3e>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800acca:	4b84      	ldr	r3, [pc, #528]	; (800aedc <SendMeasurementResult+0x2b0>)
 800accc:	4a8b      	ldr	r2, [pc, #556]	; (800aefc <SendMeasurementResult+0x2d0>)
 800acce:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Down";
 800acd0:	4a8c      	ldr	r2, [pc, #560]	; (800af04 <SendMeasurementResult+0x2d8>)
				break;
 800acd2:	e7ca      	b.n	800ac6a <SendMeasurementResult+0x3e>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800acd4:	4b81      	ldr	r3, [pc, #516]	; (800aedc <SendMeasurementResult+0x2b0>)
 800acd6:	4a89      	ldr	r2, [pc, #548]	; (800aefc <SendMeasurementResult+0x2d0>)
 800acd8:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Right";
 800acda:	4a8b      	ldr	r2, [pc, #556]	; (800af08 <SendMeasurementResult+0x2dc>)
				break;
 800acdc:	e7c5      	b.n	800ac6a <SendMeasurementResult+0x3e>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800acde:	4b7f      	ldr	r3, [pc, #508]	; (800aedc <SendMeasurementResult+0x2b0>)
 800ace0:	4a86      	ldr	r2, [pc, #536]	; (800aefc <SendMeasurementResult+0x2d0>)
 800ace2:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Left";
 800ace4:	4a89      	ldr	r2, [pc, #548]	; (800af0c <SendMeasurementResult+0x2e0>)
				break;
 800ace6:	e7c0      	b.n	800ac6a <SendMeasurementResult+0x3e>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800ace8:	4b7c      	ldr	r3, [pc, #496]	; (800aedc <SendMeasurementResult+0x2b0>)
 800acea:	4a84      	ldr	r2, [pc, #528]	; (800aefc <SendMeasurementResult+0x2d0>)
 800acec:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Up_Right_Corner";
 800acee:	4a88      	ldr	r2, [pc, #544]	; (800af10 <SendMeasurementResult+0x2e4>)
				break;
 800acf0:	e7bb      	b.n	800ac6a <SendMeasurementResult+0x3e>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800acf2:	4b7a      	ldr	r3, [pc, #488]	; (800aedc <SendMeasurementResult+0x2b0>)
 800acf4:	4a81      	ldr	r2, [pc, #516]	; (800aefc <SendMeasurementResult+0x2d0>)
 800acf6:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Down_Right_Corner";
 800acf8:	4a86      	ldr	r2, [pc, #536]	; (800af14 <SendMeasurementResult+0x2e8>)
				break;
 800acfa:	e7b6      	b.n	800ac6a <SendMeasurementResult+0x3e>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800acfc:	4b77      	ldr	r3, [pc, #476]	; (800aedc <SendMeasurementResult+0x2b0>)
 800acfe:	4a7f      	ldr	r2, [pc, #508]	; (800aefc <SendMeasurementResult+0x2d0>)
 800ad00:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Up_Left_Corner";
 800ad02:	4a85      	ldr	r2, [pc, #532]	; (800af18 <SendMeasurementResult+0x2ec>)
				break;
 800ad04:	e7b1      	b.n	800ac6a <SendMeasurementResult+0x3e>
				pcTMsg = (int8_t*) "We are going: %s !!\r\n";
 800ad06:	4b75      	ldr	r3, [pc, #468]	; (800aedc <SendMeasurementResult+0x2b0>)
 800ad08:	4a7c      	ldr	r2, [pc, #496]	; (800aefc <SendMeasurementResult+0x2d0>)
 800ad0a:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Down_Left_Corner";
 800ad0c:	4a83      	ldr	r2, [pc, #524]	; (800af1c <SendMeasurementResult+0x2f0>)
				break;
 800ad0e:	e7ac      	b.n	800ac6a <SendMeasurementResult+0x3e>
				pcTMsg = (int8_t*) "%s!!\r\n";
 800ad10:	4b72      	ldr	r3, [pc, #456]	; (800aedc <SendMeasurementResult+0x2b0>)
 800ad12:	4a83      	ldr	r2, [pc, #524]	; (800af20 <SendMeasurementResult+0x2f4>)
 800ad14:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Click";
 800ad16:	4a83      	ldr	r2, [pc, #524]	; (800af24 <SendMeasurementResult+0x2f8>)
				break;
 800ad18:	e7a7      	b.n	800ac6a <SendMeasurementResult+0x3e>
				pcTMsg = (int8_t*) "We are not moving (%s) !!\r\n";
 800ad1a:	4b70      	ldr	r3, [pc, #448]	; (800aedc <SendMeasurementResult+0x2b0>)
 800ad1c:	4a82      	ldr	r2, [pc, #520]	; (800af28 <SendMeasurementResult+0x2fc>)
 800ad1e:	601a      	str	r2, [r3, #0]
				message = (char*) (int8_t*) "Idle";
 800ad20:	4a82      	ldr	r2, [pc, #520]	; (800af2c <SendMeasurementResult+0x300>)
				break;
 800ad22:	e7a2      	b.n	800ac6a <SendMeasurementResult+0x3e>
		} else if (type == cartesianStream && joystickMode == REQ_STREAM_BUFFER) {
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d001      	beq.n	800ad2c <SendMeasurementResult+0x100>
	int8_t *message = (int8_t*) "";
 800ad28:	4a6e      	ldr	r2, [pc, #440]	; (800aee4 <SendMeasurementResult+0x2b8>)
 800ad2a:	e79e      	b.n	800ac6a <SendMeasurementResult+0x3e>
		} else if (type == cartesianStream && joystickMode == REQ_STREAM_BUFFER) {
 800ad2c:	4b6e      	ldr	r3, [pc, #440]	; (800aee8 <SendMeasurementResult+0x2bc>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	2b04      	cmp	r3, #4
 800ad32:	d001      	beq.n	800ad38 <SendMeasurementResult+0x10c>
	int8_t *message = (int8_t*) "";
 800ad34:	4a6b      	ldr	r2, [pc, #428]	; (800aee4 <SendMeasurementResult+0x2b8>)
 800ad36:	e798      	b.n	800ac6a <SendMeasurementResult+0x3e>
			sendCValue1 = fXValue;
 800ad38:	9606      	str	r6, [sp, #24]
			sendCValue2 = fYValue;
 800ad3a:	9505      	str	r5, [sp, #20]
	int8_t *message = (int8_t*) "";
 800ad3c:	4a69      	ldr	r2, [pc, #420]	; (800aee4 <SendMeasurementResult+0x2b8>)
 800ad3e:	e794      	b.n	800ac6a <SendMeasurementResult+0x3e>
	switch (joystickMode) {
 800ad40:	2b05      	cmp	r3, #5
 800ad42:	d115      	bne.n	800ad70 <SendMeasurementResult+0x144>
		if (type == directionStream) {
 800ad44:	4b69      	ldr	r3, [pc, #420]	; (800aeec <SendMeasurementResult+0x2c0>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d017      	beq.n	800ad7c <SendMeasurementResult+0x150>
		} else if (type == cartesianStream) {
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d01b      	beq.n	800ad88 <SendMeasurementResult+0x15c>
				strlen((char*) pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ad50:	0038      	movs	r0, r7
 800ad52:	f7f5 f9e1 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcOutputString,
 800ad56:	23fa      	movs	r3, #250	; 0xfa
 800ad58:	b282      	uxth	r2, r0
 800ad5a:	4975      	ldr	r1, [pc, #468]	; (800af30 <SendMeasurementResult+0x304>)
 800ad5c:	7808      	ldrb	r0, [r1, #0]
 800ad5e:	2101      	movs	r1, #1
 800ad60:	4249      	negs	r1, r1
 800ad62:	9100      	str	r1, [sp, #0]
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	0039      	movs	r1, r7
 800ad68:	f003 fa12 	bl	800e190 <writePxMutex>
		CheckForEnterKey();
 800ad6c:	f7ff ff2c 	bl	800abc8 <CheckForEnterKey>
}
 800ad70:	2000      	movs	r0, #0
 800ad72:	b009      	add	sp, #36	; 0x24
 800ad74:	bcc0      	pop	{r6, r7}
 800ad76:	46b9      	mov	r9, r7
 800ad78:	46b0      	mov	r8, r6
 800ad7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char*) pcOutputString, (char*) pcTMsg, message);
 800ad7c:	4b57      	ldr	r3, [pc, #348]	; (800aedc <SendMeasurementResult+0x2b0>)
 800ad7e:	6819      	ldr	r1, [r3, #0]
 800ad80:	0038      	movs	r0, r7
 800ad82:	f009 fc45 	bl	8014610 <siprintf>
 800ad86:	e7e3      	b.n	800ad50 <SendMeasurementResult+0x124>
			sprintf((char*) pcOutputString, (char*) pcDMsg, fXMessage,
 800ad88:	9804      	ldr	r0, [sp, #16]
 800ad8a:	f7f7 fb83 	bl	8002494 <__aeabi_f2d>
 800ad8e:	0004      	movs	r4, r0
 800ad90:	000d      	movs	r5, r1
 800ad92:	9803      	ldr	r0, [sp, #12]
 800ad94:	f7f7 fb7e 	bl	8002494 <__aeabi_f2d>
 800ad98:	9000      	str	r0, [sp, #0]
 800ad9a:	9101      	str	r1, [sp, #4]
 800ad9c:	0022      	movs	r2, r4
 800ad9e:	002b      	movs	r3, r5
 800ada0:	4964      	ldr	r1, [pc, #400]	; (800af34 <SendMeasurementResult+0x308>)
 800ada2:	0038      	movs	r0, r7
 800ada4:	f009 fc34 	bl	8014610 <siprintf>
 800ada8:	e7d2      	b.n	800ad50 <SendMeasurementResult+0x124>
		if (type == directionStream) {
 800adaa:	4b50      	ldr	r3, [pc, #320]	; (800aeec <SendMeasurementResult+0x2c0>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d012      	beq.n	800add8 <SendMeasurementResult+0x1ac>
		} else if (type == cartesianStream) {
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d015      	beq.n	800ade2 <SendMeasurementResult+0x1b6>
				strlen((char*) pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800adb6:	0038      	movs	r0, r7
 800adb8:	f7f5 f9ae 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcOutputString,
 800adbc:	23fa      	movs	r3, #250	; 0xfa
 800adbe:	b282      	uxth	r2, r0
 800adc0:	495b      	ldr	r1, [pc, #364]	; (800af30 <SendMeasurementResult+0x304>)
 800adc2:	7808      	ldrb	r0, [r1, #0]
 800adc4:	2101      	movs	r1, #1
 800adc6:	4249      	negs	r1, r1
 800adc8:	9100      	str	r1, [sp, #0]
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	0039      	movs	r1, r7
 800adce:	f003 f9df 	bl	800e190 <writePxMutex>
		CheckForEnterKey();
 800add2:	f7ff fef9 	bl	800abc8 <CheckForEnterKey>
		break;
 800add6:	e7cb      	b.n	800ad70 <SendMeasurementResult+0x144>
			sprintf((char*) pcOutputString, (char*) pcTRawMsg, message);
 800add8:	4957      	ldr	r1, [pc, #348]	; (800af38 <SendMeasurementResult+0x30c>)
 800adda:	0038      	movs	r0, r7
 800addc:	f009 fc18 	bl	8014610 <siprintf>
 800ade0:	e7e9      	b.n	800adb6 <SendMeasurementResult+0x18a>
			sprintf((char*) pcOutputString, (char*) pcDRawMsg, fXMessage,
 800ade2:	9804      	ldr	r0, [sp, #16]
 800ade4:	f7f7 fb56 	bl	8002494 <__aeabi_f2d>
 800ade8:	0004      	movs	r4, r0
 800adea:	000d      	movs	r5, r1
 800adec:	9803      	ldr	r0, [sp, #12]
 800adee:	f7f7 fb51 	bl	8002494 <__aeabi_f2d>
 800adf2:	9000      	str	r0, [sp, #0]
 800adf4:	9101      	str	r1, [sp, #4]
 800adf6:	0022      	movs	r2, r4
 800adf8:	002b      	movs	r3, r5
 800adfa:	4950      	ldr	r1, [pc, #320]	; (800af3c <SendMeasurementResult+0x310>)
 800adfc:	0038      	movs	r0, r7
 800adfe:	f009 fc07 	bl	8014610 <siprintf>
 800ae02:	e7d8      	b.n	800adb6 <SendMeasurementResult+0x18a>
				temp[0] = (int_value);
 800ae04:	494e      	ldr	r1, [pc, #312]	; (800af40 <SendMeasurementResult+0x314>)
 800ae06:	700c      	strb	r4, [r1, #0]
				writePxITMutex(port, (char*) &temp, sizeof(uint8_t), 10);
 800ae08:	230a      	movs	r3, #10
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	4648      	mov	r0, r9
 800ae0e:	f003 f9ef 	bl	800e1f0 <writePxITMutex>
 800ae12:	e7ad      	b.n	800ad70 <SendMeasurementResult+0x144>
		} else if (type == cartesianStream) {
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d1ab      	bne.n	800ad70 <SendMeasurementResult+0x144>
			if (module == myID) {
 800ae18:	4b35      	ldr	r3, [pc, #212]	; (800aef0 <SendMeasurementResult+0x2c4>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	4543      	cmp	r3, r8
 800ae1e:	d01a      	beq.n	800ae56 <SendMeasurementResult+0x22a>
				messageParams[0] = port;
 800ae20:	4b34      	ldr	r3, [pc, #208]	; (800aef4 <SendMeasurementResult+0x2c8>)
 800ae22:	464a      	mov	r2, r9
 800ae24:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&fXMessage) + 3);
 800ae26:	aa04      	add	r2, sp, #16
 800ae28:	78d1      	ldrb	r1, [r2, #3]
 800ae2a:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&fXMessage) + 2);
 800ae2c:	7891      	ldrb	r1, [r2, #2]
 800ae2e:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&fXMessage) + 1);
 800ae30:	7851      	ldrb	r1, [r2, #1]
 800ae32:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&fXMessage) + 0);
 800ae34:	7812      	ldrb	r2, [r2, #0]
 800ae36:	711a      	strb	r2, [r3, #4]
				messageParams[5] = *((__IO uint8_t*) (&fYMessage) + 3);
 800ae38:	aa03      	add	r2, sp, #12
 800ae3a:	78d1      	ldrb	r1, [r2, #3]
 800ae3c:	7159      	strb	r1, [r3, #5]
				messageParams[6] = *((__IO uint8_t*) (&fYMessage) + 2);
 800ae3e:	7891      	ldrb	r1, [r2, #2]
 800ae40:	7199      	strb	r1, [r3, #6]
				messageParams[7] = *((__IO uint8_t*) (&fYMessage) + 1);
 800ae42:	7851      	ldrb	r1, [r2, #1]
 800ae44:	71d9      	strb	r1, [r3, #7]
				messageParams[8] = *((__IO uint8_t*) (&fYMessage) + 0);
 800ae46:	7812      	ldrb	r2, [r2, #0]
 800ae48:	721a      	strb	r2, [r3, #8]
				SendMessageToModule(module, CODE_PORT_FORWARD,
 800ae4a:	2205      	movs	r2, #5
 800ae4c:	2123      	movs	r1, #35	; 0x23
 800ae4e:	4640      	mov	r0, r8
 800ae50:	f7fd fd24 	bl	800889c <SendMessageToModule>
 800ae54:	e78c      	b.n	800ad70 <SendMeasurementResult+0x144>
				temp[0] = *((__IO uint8_t*) (&fXMessage) + 3);
 800ae56:	ab04      	add	r3, sp, #16
 800ae58:	78da      	ldrb	r2, [r3, #3]
 800ae5a:	4939      	ldr	r1, [pc, #228]	; (800af40 <SendMeasurementResult+0x314>)
 800ae5c:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&fXMessage) + 2);
 800ae5e:	789a      	ldrb	r2, [r3, #2]
 800ae60:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&fXMessage) + 1);
 800ae62:	785a      	ldrb	r2, [r3, #1]
 800ae64:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&fXMessage) + 0);
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	70cb      	strb	r3, [r1, #3]
				temp[4] = *((__IO uint8_t*) (&fYMessage) + 3);
 800ae6a:	ab03      	add	r3, sp, #12
 800ae6c:	78da      	ldrb	r2, [r3, #3]
 800ae6e:	710a      	strb	r2, [r1, #4]
				temp[5] = *((__IO uint8_t*) (&fYMessage) + 2);
 800ae70:	789a      	ldrb	r2, [r3, #2]
 800ae72:	714a      	strb	r2, [r1, #5]
				temp[6] = *((__IO uint8_t*) (&fYMessage) + 1);
 800ae74:	785a      	ldrb	r2, [r3, #1]
 800ae76:	718a      	strb	r2, [r1, #6]
				temp[7] = *((__IO uint8_t*) (&fYMessage) + 0);
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	71cb      	strb	r3, [r1, #7]
				writePxITMutex(port, (char*) &temp[0], 8 * sizeof(uint8_t), 10);
 800ae7c:	230a      	movs	r3, #10
 800ae7e:	2208      	movs	r2, #8
 800ae80:	4648      	mov	r0, r9
 800ae82:	f003 f9b5 	bl	800e1f0 <writePxITMutex>
 800ae86:	e773      	b.n	800ad70 <SendMeasurementResult+0x144>
		if (type == directionStream) {
 800ae88:	4b18      	ldr	r3, [pc, #96]	; (800aeec <SendMeasurementResult+0x2c0>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d017      	beq.n	800aec0 <SendMeasurementResult+0x294>
		} else if (type == cartesianStream) {
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d000      	beq.n	800ae96 <SendMeasurementResult+0x26a>
 800ae94:	e76c      	b.n	800ad70 <SendMeasurementResult+0x144>
			memset(float_buffer1, 0, sizeof(float));
 800ae96:	2204      	movs	r2, #4
 800ae98:	2100      	movs	r1, #0
 800ae9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ae9c:	f008 fc27 	bl	80136ee <memset>
			memcpy(float_buffer1, &sendCValue1, sizeof(float));
 800aea0:	2204      	movs	r2, #4
 800aea2:	a906      	add	r1, sp, #24
 800aea4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800aea6:	f008 fc19 	bl	80136dc <memcpy>
			memset(float_buffer2, 0, sizeof(float));
 800aeaa:	2204      	movs	r2, #4
 800aeac:	2100      	movs	r1, #0
 800aeae:	9814      	ldr	r0, [sp, #80]	; 0x50
 800aeb0:	f008 fc1d 	bl	80136ee <memset>
			memcpy(float_buffer2, &sendCValue2, sizeof(float));
 800aeb4:	2204      	movs	r2, #4
 800aeb6:	a905      	add	r1, sp, #20
 800aeb8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800aeba:	f008 fc0f 	bl	80136dc <memcpy>
 800aebe:	e757      	b.n	800ad70 <SendMeasurementResult+0x144>
			memset(int_buffer, 0, sizeof(int));
 800aec0:	2204      	movs	r2, #4
 800aec2:	2100      	movs	r1, #0
 800aec4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aec6:	f008 fc12 	bl	80136ee <memset>
			memcpy(int_buffer, &sendTVariant, sizeof(int));
 800aeca:	2204      	movs	r2, #4
 800aecc:	a907      	add	r1, sp, #28
 800aece:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aed0:	f008 fc04 	bl	80136dc <memcpy>
 800aed4:	e74c      	b.n	800ad70 <SendMeasurementResult+0x144>
 800aed6:	46c0      	nop			; (mov r8, r8)
 800aed8:	20000f34 	.word	0x20000f34
 800aedc:	200000b8 	.word	0x200000b8
 800aee0:	0801ac34 	.word	0x0801ac34
 800aee4:	08018428 	.word	0x08018428
 800aee8:	200062d8 	.word	0x200062d8
 800aeec:	20006214 	.word	0x20006214
 800aef0:	2000089e 	.word	0x2000089e
 800aef4:	20000760 	.word	0x20000760
 800aef8:	0801ad5c 	.word	0x0801ad5c
 800aefc:	0801acb0 	.word	0x0801acb0
 800af00:	0801ac44 	.word	0x0801ac44
 800af04:	0801ac48 	.word	0x0801ac48
 800af08:	0801ac50 	.word	0x0801ac50
 800af0c:	0801ac58 	.word	0x0801ac58
 800af10:	0801ac60 	.word	0x0801ac60
 800af14:	0801ac70 	.word	0x0801ac70
 800af18:	0801ac84 	.word	0x0801ac84
 800af1c:	0801ac94 	.word	0x0801ac94
 800af20:	0801ad10 	.word	0x0801ad10
 800af24:	0801ad08 	.word	0x0801ad08
 800af28:	0801acc8 	.word	0x0801acc8
 800af2c:	0801aca8 	.word	0x0801aca8
 800af30:	200002d7 	.word	0x200002d7
 800af34:	0801ad18 	.word	0x0801ad18
 800af38:	0801ad44 	.word	0x0801ad44
 800af3c:	0801ad4c 	.word	0x0801ad4c
 800af40:	20000f30 	.word	0x20000f30

0800af44 <JoystickTimerCallback>:
void JoystickTimerCallback(TimerHandle_t xTimerJoystick) {
 800af44:	b510      	push	{r4, lr}
 800af46:	0004      	movs	r4, r0
	joystickStopMeasurement();
 800af48:	f7ff fdcc 	bl	800aae4 <joystickStopMeasurement>
	tid = (uint32_t) pvTimerGetTimerID(xTimerJoystick);
 800af4c:	0020      	movs	r0, r4
 800af4e:	f005 f8ec 	bl	801012a <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 800af52:	28ff      	cmp	r0, #255	; 0xff
 800af54:	d000      	beq.n	800af58 <JoystickTimerCallback+0x14>
}
 800af56:	bd10      	pop	{r4, pc}
		startMeasurement = STOP_MEASUREMENT;
 800af58:	2300      	movs	r3, #0
 800af5a:	4a02      	ldr	r2, [pc, #8]	; (800af64 <JoystickTimerCallback+0x20>)
 800af5c:	7013      	strb	r3, [r2, #0]
		joystickMode = REQ_IDLE;		// Stop the streaming task
 800af5e:	4a02      	ldr	r2, [pc, #8]	; (800af68 <JoystickTimerCallback+0x24>)
 800af60:	7013      	strb	r3, [r2, #0]
}
 800af62:	e7f8      	b.n	800af56 <JoystickTimerCallback+0x12>
 800af64:	20000f2c 	.word	0x20000f2c
 800af68:	200062d8 	.word	0x200062d8

0800af6c <SystemClock_Config>:
void SystemClock_Config(void) {
 800af6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af6e:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800af70:	2401      	movs	r4, #1
 800af72:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800af74:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800af76:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800af78:	2310      	movs	r3, #16
 800af7a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800af7c:	2702      	movs	r7, #2
 800af7e:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800af80:	2680      	movs	r6, #128	; 0x80
 800af82:	0276      	lsls	r6, r6, #9
 800af84:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800af86:	2380      	movs	r3, #128	; 0x80
 800af88:	035b      	lsls	r3, r3, #13
 800af8a:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800af8c:	2500      	movs	r5, #0
 800af8e:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800af90:	a80d      	add	r0, sp, #52	; 0x34
 800af92:	f006 fe23 	bl	8011bdc <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800af96:	2307      	movs	r3, #7
 800af98:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800af9a:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800af9c:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800af9e:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800afa0:	2101      	movs	r1, #1
 800afa2:	a809      	add	r0, sp, #36	; 0x24
 800afa4:	f007 f8c0 	bl	8012128 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800afa8:	4b1a      	ldr	r3, [pc, #104]	; (800b014 <SystemClock_Config+0xa8>)
 800afaa:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800afac:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800afae:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800afb0:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800afb2:	a802      	add	r0, sp, #8
 800afb4:	f007 fa4e 	bl	8012454 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800afb8:	4d17      	ldr	r5, [pc, #92]	; (800b018 <SystemClock_Config+0xac>)
 800afba:	69ea      	ldr	r2, [r5, #28]
 800afbc:	2180      	movs	r1, #128	; 0x80
 800afbe:	0549      	lsls	r1, r1, #21
 800afc0:	430a      	orrs	r2, r1
 800afc2:	61ea      	str	r2, [r5, #28]
 800afc4:	69eb      	ldr	r3, [r5, #28]
 800afc6:	400b      	ands	r3, r1
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800afcc:	f006 fdfc 	bl	8011bc8 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800afd0:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800afd2:	23c0      	movs	r3, #192	; 0xc0
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800afd8:	a802      	add	r0, sp, #8
 800afda:	f007 fa3b 	bl	8012454 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800afde:	f007 fa15 	bl	801240c <HAL_RCC_GetHCLKFreq>
 800afe2:	21fa      	movs	r1, #250	; 0xfa
 800afe4:	0089      	lsls	r1, r1, #2
 800afe6:	f7f5 f8b3 	bl	8000150 <__udivsi3>
 800afea:	f005 fdc7 	bl	8010b7c <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800afee:	2004      	movs	r0, #4
 800aff0:	f005 fde0 	bl	8010bb4 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE()
 800aff4:	69ab      	ldr	r3, [r5, #24]
 800aff6:	4323      	orrs	r3, r4
 800aff8:	61ab      	str	r3, [r5, #24]
 800affa:	69ab      	ldr	r3, [r5, #24]
 800affc:	401c      	ands	r4, r3
 800affe:	9401      	str	r4, [sp, #4]
 800b000:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b002:	2001      	movs	r0, #1
 800b004:	2200      	movs	r2, #0
 800b006:	2100      	movs	r1, #0
 800b008:	4240      	negs	r0, r0
 800b00a:	f005 fd73 	bl	8010af4 <HAL_NVIC_SetPriority>
}
 800b00e:	b01b      	add	sp, #108	; 0x6c
 800b010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b012:	46c0      	nop			; (mov r8, r8)
 800b014:	00040003 	.word	0x00040003
 800b018:	40021000 	.word	0x40021000

0800b01c <SaveToRO>:
uint8_t SaveToRO(void) {
 800b01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b01e:	46ce      	mov	lr, r9
 800b020:	4647      	mov	r7, r8
 800b022:	b580      	push	{r7, lr}
 800b024:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800b026:	2300      	movs	r3, #0
 800b028:	9302      	str	r3, [sp, #8]
 800b02a:	2211      	movs	r2, #17
 800b02c:	2100      	movs	r1, #0
 800b02e:	a803      	add	r0, sp, #12
 800b030:	f008 fb5d 	bl	80136ee <memset>
	HAL_FLASH_Unlock();
 800b034:	f006 fbc8 	bl	80117c8 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b038:	4869      	ldr	r0, [pc, #420]	; (800b1e0 <SaveToRO+0x1c4>)
 800b03a:	f006 fc75 	bl	8011928 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800b03e:	4869      	ldr	r0, [pc, #420]	; (800b1e4 <SaveToRO+0x1c8>)
 800b040:	f006 fbe0 	bl	8011804 <FLASH_WaitForLastOperation>
 800b044:	9001      	str	r0, [sp, #4]
 800b046:	4680      	mov	r8, r0
	if (FlashStatus != HAL_OK) {
 800b048:	2800      	cmp	r0, #0
 800b04a:	d10b      	bne.n	800b064 <SaveToRO+0x48>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b04c:	4a66      	ldr	r2, [pc, #408]	; (800b1e8 <SaveToRO+0x1cc>)
 800b04e:	6913      	ldr	r3, [r2, #16]
 800b050:	2102      	movs	r1, #2
 800b052:	438b      	bics	r3, r1
 800b054:	6113      	str	r3, [r2, #16]
	if (myID) {
 800b056:	4b65      	ldr	r3, [pc, #404]	; (800b1ec <SaveToRO+0x1d0>)
 800b058:	781a      	ldrb	r2, [r3, #0]
 800b05a:	2a00      	cmp	r2, #0
 800b05c:	d10c      	bne.n	800b078 <SaveToRO+0x5c>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b05e:	9c01      	ldr	r4, [sp, #4]
 800b060:	4e63      	ldr	r6, [pc, #396]	; (800b1f0 <SaveToRO+0x1d4>)
 800b062:	e088      	b.n	800b176 <SaveToRO+0x15a>
		return pFlash.ErrorCode;
 800b064:	4b63      	ldr	r3, [pc, #396]	; (800b1f4 <SaveToRO+0x1d8>)
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	4698      	mov	r8, r3
}
 800b06c:	4640      	mov	r0, r8
 800b06e:	b009      	add	sp, #36	; 0x24
 800b070:	bcc0      	pop	{r6, r7}
 800b072:	46b9      	mov	r9, r7
 800b074:	46b0      	mov	r8, r6
 800b076:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 800b078:	4b5f      	ldr	r3, [pc, #380]	; (800b1f8 <SaveToRO+0x1dc>)
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	021b      	lsls	r3, r3, #8
 800b07e:	18d2      	adds	r2, r2, r3
 800b080:	b292      	uxth	r2, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b082:	2300      	movs	r3, #0
 800b084:	4956      	ldr	r1, [pc, #344]	; (800b1e0 <SaveToRO+0x1c4>)
 800b086:	2001      	movs	r0, #1
 800b088:	f006 fbe8 	bl	801185c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800b08c:	4855      	ldr	r0, [pc, #340]	; (800b1e4 <SaveToRO+0x1c8>)
 800b08e:	f006 fbb9 	bl	8011804 <FLASH_WaitForLastOperation>
 800b092:	1e06      	subs	r6, r0, #0
		if (FlashStatus != HAL_OK) {
 800b094:	d107      	bne.n	800b0a6 <SaveToRO+0x8a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b096:	4a54      	ldr	r2, [pc, #336]	; (800b1e8 <SaveToRO+0x1cc>)
 800b098:	6913      	ldr	r3, [r2, #16]
 800b09a:	2101      	movs	r1, #1
 800b09c:	438b      	bics	r3, r1
 800b09e:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800b0a0:	2501      	movs	r5, #1
	uint16_t add = 2, temp = 0;
 800b0a2:	2702      	movs	r7, #2
		for (uint8_t i = 1; i <= N; i++) {
 800b0a4:	e030      	b.n	800b108 <SaveToRO+0xec>
			return pFlash.ErrorCode;
 800b0a6:	4b53      	ldr	r3, [pc, #332]	; (800b1f4 <SaveToRO+0x1d8>)
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	4698      	mov	r8, r3
 800b0ae:	e7dd      	b.n	800b06c <SaveToRO+0x50>
						return pFlash.ErrorCode;
 800b0b0:	4b50      	ldr	r3, [pc, #320]	; (800b1f4 <SaveToRO+0x1d8>)
 800b0b2:	69db      	ldr	r3, [r3, #28]
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	4698      	mov	r8, r3
 800b0b8:	e7d8      	b.n	800b06c <SaveToRO+0x50>
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800b0ba:	3401      	adds	r4, #1
 800b0bc:	b2e4      	uxtb	r4, r4
 800b0be:	2c0a      	cmp	r4, #10
 800b0c0:	d820      	bhi.n	800b104 <SaveToRO+0xe8>
				if (array[i - 1][0]) {
 800b0c2:	1e6a      	subs	r2, r5, #1
 800b0c4:	2316      	movs	r3, #22
 800b0c6:	4353      	muls	r3, r2
 800b0c8:	494c      	ldr	r1, [pc, #304]	; (800b1fc <SaveToRO+0x1e0>)
 800b0ca:	5a5b      	ldrh	r3, [r3, r1]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0f4      	beq.n	800b0ba <SaveToRO+0x9e>
					RO_START_ADDRESS + add, array[i - 1][j]);
 800b0d0:	0093      	lsls	r3, r2, #2
 800b0d2:	189b      	adds	r3, r3, r2
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	189b      	adds	r3, r3, r2
 800b0d8:	191b      	adds	r3, r3, r4
 800b0da:	005b      	lsls	r3, r3, #1
 800b0dc:	5a5a      	ldrh	r2, [r3, r1]
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800b0de:	4b40      	ldr	r3, [pc, #256]	; (800b1e0 <SaveToRO+0x1c4>)
 800b0e0:	18f9      	adds	r1, r7, r3
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	f006 fbb9 	bl	801185c <HAL_FLASH_Program>
					add += 2;
 800b0ea:	3702      	adds	r7, #2
 800b0ec:	b2bf      	uxth	r7, r7
					FlashStatus = FLASH_WaitForLastOperation(
 800b0ee:	483d      	ldr	r0, [pc, #244]	; (800b1e4 <SaveToRO+0x1c8>)
 800b0f0:	f006 fb88 	bl	8011804 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d1db      	bne.n	800b0b0 <SaveToRO+0x94>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b0f8:	4a3b      	ldr	r2, [pc, #236]	; (800b1e8 <SaveToRO+0x1cc>)
 800b0fa:	6913      	ldr	r3, [r2, #16]
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	438b      	bics	r3, r1
 800b100:	6113      	str	r3, [r2, #16]
 800b102:	e7da      	b.n	800b0ba <SaveToRO+0x9e>
		for (uint8_t i = 1; i <= N; i++) {
 800b104:	3501      	adds	r5, #1
 800b106:	b2ed      	uxtb	r5, r5
 800b108:	4b3b      	ldr	r3, [pc, #236]	; (800b1f8 <SaveToRO+0x1dc>)
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	42ab      	cmp	r3, r5
 800b10e:	d3a6      	bcc.n	800b05e <SaveToRO+0x42>
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800b110:	0034      	movs	r4, r6
 800b112:	e7d4      	b.n	800b0be <SaveToRO+0xa2>
					return pFlash.ErrorCode;
 800b114:	4b37      	ldr	r3, [pc, #220]	; (800b1f4 <SaveToRO+0x1d8>)
 800b116:	69db      	ldr	r3, [r3, #28]
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	4698      	mov	r8, r3
 800b11c:	e7a6      	b.n	800b06c <SaveToRO+0x50>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b11e:	4645      	mov	r5, r8
 800b120:	e007      	b.n	800b132 <SaveToRO+0x116>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b122:	4a31      	ldr	r2, [pc, #196]	; (800b1e8 <SaveToRO+0x1cc>)
 800b124:	6913      	ldr	r3, [r2, #16]
 800b126:	2101      	movs	r1, #1
 800b128:	438b      	bics	r3, r1
 800b12a:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b12c:	3602      	adds	r6, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b12e:	3501      	adds	r5, #1
 800b130:	b2ed      	uxtb	r5, r5
 800b132:	00bb      	lsls	r3, r7, #2
 800b134:	19db      	adds	r3, r3, r7
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4a31      	ldr	r2, [pc, #196]	; (800b200 <SaveToRO+0x1e4>)
 800b13a:	18d3      	adds	r3, r2, r3
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	4699      	mov	r9, r3
 800b140:	0018      	movs	r0, r3
 800b142:	f7f4 ffe9 	bl	8000118 <strlen>
 800b146:	3001      	adds	r0, #1
 800b148:	0840      	lsrs	r0, r0, #1
 800b14a:	4285      	cmp	r5, r0
 800b14c:	d211      	bcs.n	800b172 <SaveToRO+0x156>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800b14e:	006b      	lsls	r3, r5, #1
 800b150:	464a      	mov	r2, r9
 800b152:	5ad2      	ldrh	r2, [r2, r3]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800b154:	2300      	movs	r3, #0
 800b156:	0031      	movs	r1, r6
 800b158:	2001      	movs	r0, #1
 800b15a:	f006 fb7f 	bl	801185c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800b15e:	4821      	ldr	r0, [pc, #132]	; (800b1e4 <SaveToRO+0x1c8>)
 800b160:	f006 fb50 	bl	8011804 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b164:	2800      	cmp	r0, #0
 800b166:	d0dc      	beq.n	800b122 <SaveToRO+0x106>
					return pFlash.ErrorCode;
 800b168:	4b22      	ldr	r3, [pc, #136]	; (800b1f4 <SaveToRO+0x1d8>)
 800b16a:	69db      	ldr	r3, [r3, #28]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	4698      	mov	r8, r3
 800b170:	e77c      	b.n	800b06c <SaveToRO+0x50>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800b172:	3401      	adds	r4, #1
 800b174:	b2e4      	uxtb	r4, r4
 800b176:	4b23      	ldr	r3, [pc, #140]	; (800b204 <SaveToRO+0x1e8>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	42a3      	cmp	r3, r4
 800b17c:	d92d      	bls.n	800b1da <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) {
 800b17e:	0027      	movs	r7, r4
 800b180:	00a3      	lsls	r3, r4, #2
 800b182:	191b      	adds	r3, r3, r4
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4a1e      	ldr	r2, [pc, #120]	; (800b200 <SaveToRO+0x1e4>)
 800b188:	5c9b      	ldrb	r3, [r3, r2]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d0f1      	beq.n	800b172 <SaveToRO+0x156>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b18e:	23fe      	movs	r3, #254	; 0xfe
 800b190:	aa02      	add	r2, sp, #8
 800b192:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800b194:	00a1      	lsls	r1, r4, #2
 800b196:	1909      	adds	r1, r1, r4
 800b198:	0089      	lsls	r1, r1, #2
 800b19a:	4b19      	ldr	r3, [pc, #100]	; (800b200 <SaveToRO+0x1e4>)
 800b19c:	18c9      	adds	r1, r1, r3
 800b19e:	2214      	movs	r2, #20
 800b1a0:	ab02      	add	r3, sp, #8
 800b1a2:	1c58      	adds	r0, r3, #1
 800b1a4:	f008 fa9a 	bl	80136dc <memcpy>
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800b1a8:	4645      	mov	r5, r8
 800b1aa:	2d09      	cmp	r5, #9
 800b1ac:	d8b7      	bhi.n	800b11e <SaveToRO+0x102>
						*(uint16_t*) &snipBuffer[j * 2]);
 800b1ae:	006b      	lsls	r3, r5, #1
 800b1b0:	aa02      	add	r2, sp, #8
 800b1b2:	5ad2      	ldrh	r2, [r2, r3]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	0031      	movs	r1, r6
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	f006 fb4f 	bl	801185c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800b1be:	4809      	ldr	r0, [pc, #36]	; (800b1e4 <SaveToRO+0x1c8>)
 800b1c0:	f006 fb20 	bl	8011804 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d1a5      	bne.n	800b114 <SaveToRO+0xf8>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b1c8:	4a07      	ldr	r2, [pc, #28]	; (800b1e8 <SaveToRO+0x1cc>)
 800b1ca:	6913      	ldr	r3, [r2, #16]
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	438b      	bics	r3, r1
 800b1d0:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b1d2:	3602      	adds	r6, #2
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800b1d4:	3501      	adds	r5, #1
 800b1d6:	b2ed      	uxtb	r5, r5
 800b1d8:	e7e7      	b.n	800b1aa <SaveToRO+0x18e>
	HAL_FLASH_Lock();
 800b1da:	f006 fb09 	bl	80117f0 <HAL_FLASH_Lock>
	return result;
 800b1de:	e745      	b.n	800b06c <SaveToRO+0x50>
 800b1e0:	0801d800 	.word	0x0801d800
 800b1e4:	0000c350 	.word	0x0000c350
 800b1e8:	40022000 	.word	0x40022000
 800b1ec:	2000089e 	.word	0x2000089e
 800b1f0:	0801dc00 	.word	0x0801dc00
 800b1f4:	20006638 	.word	0x20006638
 800b1f8:	2000001c 	.word	0x2000001c
 800b1fc:	200002d8 	.word	0x200002d8
 800b200:	20006154 	.word	0x20006154
 800b204:	20000a3f 	.word	0x20000a3f

0800b208 <ClearROtopology>:
uint8_t ClearROtopology(void) {
 800b208:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b20a:	228f      	movs	r2, #143	; 0x8f
 800b20c:	0092      	lsls	r2, r2, #2
 800b20e:	2100      	movs	r1, #0
 800b210:	4805      	ldr	r0, [pc, #20]	; (800b228 <ClearROtopology+0x20>)
 800b212:	f008 fa6c 	bl	80136ee <memset>
	N = 1;
 800b216:	4b05      	ldr	r3, [pc, #20]	; (800b22c <ClearROtopology+0x24>)
 800b218:	2201      	movs	r2, #1
 800b21a:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800b21c:	4b04      	ldr	r3, [pc, #16]	; (800b230 <ClearROtopology+0x28>)
 800b21e:	2200      	movs	r2, #0
 800b220:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800b222:	f7ff fefb 	bl	800b01c <SaveToRO>
}
 800b226:	bd10      	pop	{r4, pc}
 800b228:	200002d8 	.word	0x200002d8
 800b22c:	2000001c 	.word	0x2000001c
 800b230:	2000089e 	.word	0x2000089e

0800b234 <Module_Init>:
void Module_Init(void) {
 800b234:	b500      	push	{lr}
 800b236:	b085      	sub	sp, #20
	MX_GPIO_Init();
 800b238:	f002 fa14 	bl	800d664 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800b23c:	f002 fdfc 	bl	800de38 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800b240:	f002 fe12 	bl	800de68 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800b244:	f002 fe28 	bl	800de98 <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 800b248:	f002 fe3e 	bl	800dec8 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800b24c:	f002 fe54 	bl	800def8 <MX_USART6_UART_Init>
	MX_ADC_Init();
 800b250:	f000 fee8 	bl	800c024 <MX_ADC_Init>
	xTimerJoystick = xTimerCreate("JoystickTimer", pdMS_TO_TICKS(1000), pdFALSE,
 800b254:	21fa      	movs	r1, #250	; 0xfa
 800b256:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <Module_Init+0x58>)
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	2301      	movs	r3, #1
 800b25c:	2200      	movs	r2, #0
 800b25e:	0089      	lsls	r1, r1, #2
 800b260:	480b      	ldr	r0, [pc, #44]	; (800b290 <Module_Init+0x5c>)
 800b262:	f004 fe05 	bl	800fe70 <xTimerCreate>
 800b266:	4b0b      	ldr	r3, [pc, #44]	; (800b294 <Module_Init+0x60>)
 800b268:	6018      	str	r0, [r3, #0]
	xTaskCreate(JoystickTask, (const char* ) "JoystickTask",
 800b26a:	22a0      	movs	r2, #160	; 0xa0
 800b26c:	2300      	movs	r3, #0
 800b26e:	9303      	str	r3, [sp, #12]
 800b270:	9302      	str	r3, [sp, #8]
 800b272:	4b09      	ldr	r3, [pc, #36]	; (800b298 <Module_Init+0x64>)
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	2303      	movs	r3, #3
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	2300      	movs	r3, #0
 800b27c:	0052      	lsls	r2, r2, #1
 800b27e:	4907      	ldr	r1, [pc, #28]	; (800b29c <Module_Init+0x68>)
 800b280:	4807      	ldr	r0, [pc, #28]	; (800b2a0 <Module_Init+0x6c>)
 800b282:	f003 ff4d 	bl	800f120 <xTaskGenericCreate>
}
 800b286:	b005      	add	sp, #20
 800b288:	bd00      	pop	{pc}
 800b28a:	46c0      	nop			; (mov r8, r8)
 800b28c:	0800af45 	.word	0x0800af45
 800b290:	0801ad84 	.word	0x0801ad84
 800b294:	20000f38 	.word	0x20000f38
 800b298:	20000f1c 	.word	0x20000f1c
 800b29c:	0801ad94 	.word	0x0801ad94
 800b2a0:	0800b3a9 	.word	0x0800b3a9

0800b2a4 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800b2a4:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&demoCommandDefinition);
 800b2a6:	4809      	ldr	r0, [pc, #36]	; (800b2cc <RegisterModuleCLICommands+0x28>)
 800b2a8:	f003 f944 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&joystickStreamCommandDefinition);
 800b2ac:	4808      	ldr	r0, [pc, #32]	; (800b2d0 <RegisterModuleCLICommands+0x2c>)
 800b2ae:	f003 f941 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&joystickStopCommandDefinition);
 800b2b2:	4808      	ldr	r0, [pc, #32]	; (800b2d4 <RegisterModuleCLICommands+0x30>)
 800b2b4:	f003 f93e 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&variantModParamCommandDefinition);
 800b2b8:	4807      	ldr	r0, [pc, #28]	; (800b2d8 <RegisterModuleCLICommands+0x34>)
 800b2ba:	f003 f93b 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xModParamCommandDefinition);
 800b2be:	4807      	ldr	r0, [pc, #28]	; (800b2dc <RegisterModuleCLICommands+0x38>)
 800b2c0:	f003 f938 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&yModParamCommandDefinition);
 800b2c4:	4806      	ldr	r0, [pc, #24]	; (800b2e0 <RegisterModuleCLICommands+0x3c>)
 800b2c6:	f003 f935 	bl	800e534 <FreeRTOS_CLIRegisterCommand>
}
 800b2ca:	bd10      	pop	{r4, pc}
 800b2cc:	0801b4b0 	.word	0x0801b4b0
 800b2d0:	0801b4d0 	.word	0x0801b4d0
 800b2d4:	0801b4c0 	.word	0x0801b4c0
 800b2d8:	0801b4e0 	.word	0x0801b4e0
 800b2dc:	0801b4f0 	.word	0x0801b4f0
 800b2e0:	0801b500 	.word	0x0801b500

0800b2e4 <GetPort>:
	if (huart->Instance == USART5)
 800b2e4:	6803      	ldr	r3, [r0, #0]
 800b2e6:	4a0d      	ldr	r2, [pc, #52]	; (800b31c <GetPort+0x38>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d00d      	beq.n	800b308 <GetPort+0x24>
	else if (huart->Instance == USART2)
 800b2ec:	4a0c      	ldr	r2, [pc, #48]	; (800b320 <GetPort+0x3c>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d00c      	beq.n	800b30c <GetPort+0x28>
	else if (huart->Instance == USART6)
 800b2f2:	4a0c      	ldr	r2, [pc, #48]	; (800b324 <GetPort+0x40>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d00b      	beq.n	800b310 <GetPort+0x2c>
	else if (huart->Instance == USART3)
 800b2f8:	4a0b      	ldr	r2, [pc, #44]	; (800b328 <GetPort+0x44>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d00a      	beq.n	800b314 <GetPort+0x30>
	else if (huart->Instance == USART1)
 800b2fe:	4a0b      	ldr	r2, [pc, #44]	; (800b32c <GetPort+0x48>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d009      	beq.n	800b318 <GetPort+0x34>
	return 0;
 800b304:	2000      	movs	r0, #0
}
 800b306:	4770      	bx	lr
		return P1;
 800b308:	2001      	movs	r0, #1
 800b30a:	e7fc      	b.n	800b306 <GetPort+0x22>
		return P2;
 800b30c:	2002      	movs	r0, #2
 800b30e:	e7fa      	b.n	800b306 <GetPort+0x22>
		return P3;
 800b310:	2003      	movs	r0, #3
 800b312:	e7f8      	b.n	800b306 <GetPort+0x22>
		return P4;
 800b314:	2004      	movs	r0, #4
 800b316:	e7f6      	b.n	800b306 <GetPort+0x22>
		return P5;
 800b318:	2005      	movs	r0, #5
 800b31a:	e7f4      	b.n	800b306 <GetPort+0x22>
 800b31c:	40005000 	.word	0x40005000
 800b320:	40004400 	.word	0x40004400
 800b324:	40011400 	.word	0x40011400
 800b328:	40004800 	.word	0x40004800
 800b32c:	40013800 	.word	0x40013800

0800b330 <HAL_GPIO_EXTI_Callback>:
	buttonB = !buttonB;
 800b330:	4a02      	ldr	r2, [pc, #8]	; (800b33c <HAL_GPIO_EXTI_Callback+0xc>)
 800b332:	7813      	ldrb	r3, [r2, #0]
 800b334:	2101      	movs	r1, #1
 800b336:	404b      	eors	r3, r1
 800b338:	7013      	strb	r3, [r2, #0]
}
 800b33a:	4770      	bx	lr
 800b33c:	20000f24 	.word	0x20000f24

0800b340 <Stop_Joystick>:
Module_Status Stop_Joystick(void) {
 800b340:	b500      	push	{lr}
 800b342:	b083      	sub	sp, #12
	joystickMode = REQ_IDLE;
 800b344:	2300      	movs	r3, #0
 800b346:	4a08      	ldr	r2, [pc, #32]	; (800b368 <Stop_Joystick+0x28>)
 800b348:	7013      	strb	r3, [r2, #0]
	startMeasurement = STOP_MEASUREMENT;
 800b34a:	4a08      	ldr	r2, [pc, #32]	; (800b36c <Stop_Joystick+0x2c>)
 800b34c:	7013      	strb	r3, [r2, #0]
	xTimerStop(xTimerJoystick, 0);
 800b34e:	4a08      	ldr	r2, [pc, #32]	; (800b370 <Stop_Joystick+0x30>)
 800b350:	6810      	ldr	r0, [r2, #0]
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	2200      	movs	r2, #0
 800b356:	2103      	movs	r1, #3
 800b358:	f004 fdae 	bl	800feb8 <xTimerGenericCommand>
	joystickStopMeasurement();
 800b35c:	f7ff fbc2 	bl	800aae4 <joystickStopMeasurement>
}
 800b360:	2000      	movs	r0, #0
 800b362:	b003      	add	sp, #12
 800b364:	bd00      	pop	{pc}
 800b366:	46c0      	nop			; (mov r8, r8)
 800b368:	200062d8 	.word	0x200062d8
 800b36c:	20000f2c 	.word	0x20000f2c
 800b370:	20000f38 	.word	0x20000f38

0800b374 <joystickStopCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE joystickStopCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800b374:	b510      	push	{r4, lr}
 800b376:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b378:	d00a      	beq.n	800b390 <joystickStopCommand+0x1c>

	result = Stop_Joystick();
 800b37a:	f7ff ffe1 	bl	800b340 <Stop_Joystick>

	if (H10R4_OK == result) {
 800b37e:	2800      	cmp	r0, #0
 800b380:	d108      	bne.n	800b394 <joystickStopCommand+0x20>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 800b382:	2221      	movs	r2, #33	; 0x21
 800b384:	4906      	ldr	r1, [pc, #24]	; (800b3a0 <joystickStopCommand+0x2c>)
 800b386:	0020      	movs	r0, r4
 800b388:	f008 f9a8 	bl	80136dc <memcpy>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800b38c:	2000      	movs	r0, #0
 800b38e:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800b390:	b672      	cpsid	i
 800b392:	e7fe      	b.n	800b392 <joystickStopCommand+0x1e>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800b394:	222d      	movs	r2, #45	; 0x2d
 800b396:	4903      	ldr	r1, [pc, #12]	; (800b3a4 <joystickStopCommand+0x30>)
 800b398:	0020      	movs	r0, r4
 800b39a:	f008 f99f 	bl	80136dc <memcpy>
 800b39e:	e7f5      	b.n	800b38c <joystickStopCommand+0x18>
 800b3a0:	0801ada4 	.word	0x0801ada4
 800b3a4:	0801adc8 	.word	0x0801adc8

0800b3a8 <JoystickTask>:
static void JoystickTask(void *argument) {
 800b3a8:	b530      	push	{r4, r5, lr}
 800b3aa:	b087      	sub	sp, #28
	uint32_t t0 = 0;
 800b3ac:	2400      	movs	r4, #0
 800b3ae:	e115      	b.n	800b5dc <JoystickTask+0x234>
			t0 = HAL_GetTick();
 800b3b0:	f005 f8ac 	bl	801050c <HAL_GetTick>
 800b3b4:	0004      	movs	r4, r0
			if (type == directionStream) {
 800b3b6:	4b91      	ldr	r3, [pc, #580]	; (800b5fc <JoystickTask+0x254>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d012      	beq.n	800b3e4 <JoystickTask+0x3c>
			} else if (type == cartesianStream) {
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d025      	beq.n	800b40e <JoystickTask+0x66>
			while (HAL_GetTick() - t0 < (joystickPeriod - 1) && !stopB) {
 800b3c2:	f005 f8a3 	bl	801050c <HAL_GetTick>
 800b3c6:	1b00      	subs	r0, r0, r4
 800b3c8:	4b8d      	ldr	r3, [pc, #564]	; (800b600 <JoystickTask+0x258>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	4298      	cmp	r0, r3
 800b3d0:	d300      	bcc.n	800b3d4 <JoystickTask+0x2c>
 800b3d2:	e101      	b.n	800b5d8 <JoystickTask+0x230>
 800b3d4:	4b8b      	ldr	r3, [pc, #556]	; (800b604 <JoystickTask+0x25c>)
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d000      	beq.n	800b3de <JoystickTask+0x36>
 800b3dc:	e0fc      	b.n	800b5d8 <JoystickTask+0x230>
				taskYIELD();
 800b3de:	f004 ff0b 	bl	80101f8 <vPortYield>
 800b3e2:	e7ee      	b.n	800b3c2 <JoystickTask+0x1a>
				joystickState = Get_Direction();
 800b3e4:	f7ff fa1a 	bl	800a81c <Get_Direction>
 800b3e8:	b2c0      	uxtb	r0, r0
 800b3ea:	4b87      	ldr	r3, [pc, #540]	; (800b608 <JoystickTask+0x260>)
 800b3ec:	7018      	strb	r0, [r3, #0]
				SendMeasurementResult(joystickMode, joystickState, 0, 0, 0, 0,
 800b3ee:	4a87      	ldr	r2, [pc, #540]	; (800b60c <JoystickTask+0x264>)
 800b3f0:	7810      	ldrb	r0, [r2, #0]
 800b3f2:	b2c0      	uxtb	r0, r0
 800b3f4:	7819      	ldrb	r1, [r3, #0]
 800b3f6:	b2c9      	uxtb	r1, r1
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2500      	movs	r5, #0
 800b3fc:	9504      	str	r5, [sp, #16]
 800b3fe:	9503      	str	r5, [sp, #12]
 800b400:	9502      	str	r5, [sp, #8]
 800b402:	9501      	str	r5, [sp, #4]
 800b404:	9500      	str	r5, [sp, #0]
 800b406:	1c13      	adds	r3, r2, #0
 800b408:	f7ff fc10 	bl	800ac2c <SendMeasurementResult>
 800b40c:	e7d9      	b.n	800b3c2 <JoystickTask+0x1a>
				cartesianCoordinates();
 800b40e:	f7ff faf9 	bl	800aa04 <cartesianCoordinates>
				SendMeasurementResult(joystickMode, 0, x, y, 0, 0,
 800b412:	4b7e      	ldr	r3, [pc, #504]	; (800b60c <JoystickTask+0x264>)
 800b414:	7818      	ldrb	r0, [r3, #0]
 800b416:	b2c0      	uxtb	r0, r0
 800b418:	4b7d      	ldr	r3, [pc, #500]	; (800b610 <JoystickTask+0x268>)
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	4b7d      	ldr	r3, [pc, #500]	; (800b614 <JoystickTask+0x26c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2100      	movs	r1, #0
 800b422:	9104      	str	r1, [sp, #16]
 800b424:	9103      	str	r1, [sp, #12]
 800b426:	9102      	str	r1, [sp, #8]
 800b428:	9101      	str	r1, [sp, #4]
 800b42a:	9100      	str	r1, [sp, #0]
 800b42c:	f7ff fbfe 	bl	800ac2c <SendMeasurementResult>
 800b430:	e7c7      	b.n	800b3c2 <JoystickTask+0x1a>
			t0 = HAL_GetTick();
 800b432:	f005 f86b 	bl	801050c <HAL_GetTick>
 800b436:	0004      	movs	r4, r0
			if (type == directionStream) {
 800b438:	4b70      	ldr	r3, [pc, #448]	; (800b5fc <JoystickTask+0x254>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d012      	beq.n	800b466 <JoystickTask+0xbe>
			} else if (type == cartesianStream) {
 800b440:	2b01      	cmp	r3, #1
 800b442:	d025      	beq.n	800b490 <JoystickTask+0xe8>
			while (HAL_GetTick() - t0 < (joystickPeriod - 1) && !stopB) {
 800b444:	f005 f862 	bl	801050c <HAL_GetTick>
 800b448:	1b00      	subs	r0, r0, r4
 800b44a:	4b6d      	ldr	r3, [pc, #436]	; (800b600 <JoystickTask+0x258>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3b01      	subs	r3, #1
 800b450:	4298      	cmp	r0, r3
 800b452:	d300      	bcc.n	800b456 <JoystickTask+0xae>
 800b454:	e0c0      	b.n	800b5d8 <JoystickTask+0x230>
 800b456:	4b6b      	ldr	r3, [pc, #428]	; (800b604 <JoystickTask+0x25c>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d000      	beq.n	800b460 <JoystickTask+0xb8>
 800b45e:	e0bb      	b.n	800b5d8 <JoystickTask+0x230>
				taskYIELD();
 800b460:	f004 feca 	bl	80101f8 <vPortYield>
 800b464:	e7ee      	b.n	800b444 <JoystickTask+0x9c>
				joystickState = Get_Direction();
 800b466:	f7ff f9d9 	bl	800a81c <Get_Direction>
 800b46a:	b2c0      	uxtb	r0, r0
 800b46c:	4b66      	ldr	r3, [pc, #408]	; (800b608 <JoystickTask+0x260>)
 800b46e:	7018      	strb	r0, [r3, #0]
				SendMeasurementResult(joystickMode, joystickState, 0, 0, 0, 0,
 800b470:	4a66      	ldr	r2, [pc, #408]	; (800b60c <JoystickTask+0x264>)
 800b472:	7810      	ldrb	r0, [r2, #0]
 800b474:	b2c0      	uxtb	r0, r0
 800b476:	7819      	ldrb	r1, [r3, #0]
 800b478:	b2c9      	uxtb	r1, r1
 800b47a:	2200      	movs	r2, #0
 800b47c:	2500      	movs	r5, #0
 800b47e:	9504      	str	r5, [sp, #16]
 800b480:	9503      	str	r5, [sp, #12]
 800b482:	9502      	str	r5, [sp, #8]
 800b484:	9501      	str	r5, [sp, #4]
 800b486:	9500      	str	r5, [sp, #0]
 800b488:	1c13      	adds	r3, r2, #0
 800b48a:	f7ff fbcf 	bl	800ac2c <SendMeasurementResult>
 800b48e:	e7d9      	b.n	800b444 <JoystickTask+0x9c>
				cartesianCoordinates();
 800b490:	f7ff fab8 	bl	800aa04 <cartesianCoordinates>
				SendMeasurementResult(joystickMode, 0, x, y, 0, 0,
 800b494:	4b5d      	ldr	r3, [pc, #372]	; (800b60c <JoystickTask+0x264>)
 800b496:	7818      	ldrb	r0, [r3, #0]
 800b498:	b2c0      	uxtb	r0, r0
 800b49a:	4b5d      	ldr	r3, [pc, #372]	; (800b610 <JoystickTask+0x268>)
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	4b5d      	ldr	r3, [pc, #372]	; (800b614 <JoystickTask+0x26c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	9104      	str	r1, [sp, #16]
 800b4a6:	9103      	str	r1, [sp, #12]
 800b4a8:	9102      	str	r1, [sp, #8]
 800b4aa:	9101      	str	r1, [sp, #4]
 800b4ac:	9100      	str	r1, [sp, #0]
 800b4ae:	f7ff fbbd 	bl	800ac2c <SendMeasurementResult>
 800b4b2:	e7c7      	b.n	800b444 <JoystickTask+0x9c>
			if (type == directionStream) {
 800b4b4:	4b51      	ldr	r3, [pc, #324]	; (800b5fc <JoystickTask+0x254>)
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d011      	beq.n	800b4e0 <JoystickTask+0x138>
			} else if (type == cartesianStream) {
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d029      	beq.n	800b514 <JoystickTask+0x16c>
			while (HAL_GetTick() - t0 < (joystickPeriod - 1) && !stopB) {
 800b4c0:	f005 f824 	bl	801050c <HAL_GetTick>
 800b4c4:	1b00      	subs	r0, r0, r4
 800b4c6:	4b4e      	ldr	r3, [pc, #312]	; (800b600 <JoystickTask+0x258>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	4298      	cmp	r0, r3
 800b4ce:	d300      	bcc.n	800b4d2 <JoystickTask+0x12a>
 800b4d0:	e082      	b.n	800b5d8 <JoystickTask+0x230>
 800b4d2:	4b4c      	ldr	r3, [pc, #304]	; (800b604 <JoystickTask+0x25c>)
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d17e      	bne.n	800b5d8 <JoystickTask+0x230>
				taskYIELD();
 800b4da:	f004 fe8d 	bl	80101f8 <vPortYield>
 800b4de:	e7ef      	b.n	800b4c0 <JoystickTask+0x118>
				t0 = HAL_GetTick();
 800b4e0:	f005 f814 	bl	801050c <HAL_GetTick>
 800b4e4:	0004      	movs	r4, r0
				joystickState = Get_Direction();
 800b4e6:	f7ff f999 	bl	800a81c <Get_Direction>
 800b4ea:	b2c0      	uxtb	r0, r0
 800b4ec:	4b46      	ldr	r3, [pc, #280]	; (800b608 <JoystickTask+0x260>)
 800b4ee:	7018      	strb	r0, [r3, #0]
				SendMeasurementResult(joystickMode, joystickState, 0, 0, 0,
 800b4f0:	4a46      	ldr	r2, [pc, #280]	; (800b60c <JoystickTask+0x264>)
 800b4f2:	7810      	ldrb	r0, [r2, #0]
 800b4f4:	b2c0      	uxtb	r0, r0
 800b4f6:	7819      	ldrb	r1, [r3, #0]
 800b4f8:	b2c9      	uxtb	r1, r1
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2500      	movs	r5, #0
 800b4fe:	9504      	str	r5, [sp, #16]
 800b500:	9503      	str	r5, [sp, #12]
 800b502:	9502      	str	r5, [sp, #8]
 800b504:	4b44      	ldr	r3, [pc, #272]	; (800b618 <JoystickTask+0x270>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	9500      	str	r5, [sp, #0]
 800b50c:	1c13      	adds	r3, r2, #0
 800b50e:	f7ff fb8d 	bl	800ac2c <SendMeasurementResult>
 800b512:	e7d5      	b.n	800b4c0 <JoystickTask+0x118>
				cartesianCoordinates();
 800b514:	f7ff fa76 	bl	800aa04 <cartesianCoordinates>
				SendMeasurementResult(joystickMode, 0, x, y, 0, joystickPort,
 800b518:	4b3c      	ldr	r3, [pc, #240]	; (800b60c <JoystickTask+0x264>)
 800b51a:	7818      	ldrb	r0, [r3, #0]
 800b51c:	b2c0      	uxtb	r0, r0
 800b51e:	4b3c      	ldr	r3, [pc, #240]	; (800b610 <JoystickTask+0x268>)
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	4b3c      	ldr	r3, [pc, #240]	; (800b614 <JoystickTask+0x26c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2100      	movs	r1, #0
 800b528:	9104      	str	r1, [sp, #16]
 800b52a:	9103      	str	r1, [sp, #12]
 800b52c:	9102      	str	r1, [sp, #8]
 800b52e:	4d3a      	ldr	r5, [pc, #232]	; (800b618 <JoystickTask+0x270>)
 800b530:	782d      	ldrb	r5, [r5, #0]
 800b532:	9501      	str	r5, [sp, #4]
 800b534:	9100      	str	r1, [sp, #0]
 800b536:	f7ff fb79 	bl	800ac2c <SendMeasurementResult>
 800b53a:	e7c1      	b.n	800b4c0 <JoystickTask+0x118>
			if (type == directionStream) {
 800b53c:	4b2f      	ldr	r3, [pc, #188]	; (800b5fc <JoystickTask+0x254>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d010      	beq.n	800b566 <JoystickTask+0x1be>
			} else if (type == cartesianStream) {
 800b544:	2b01      	cmp	r3, #1
 800b546:	d02c      	beq.n	800b5a2 <JoystickTask+0x1fa>
			while (HAL_GetTick() - t0 < (joystickPeriod - 1) && !stopB) {
 800b548:	f004 ffe0 	bl	801050c <HAL_GetTick>
 800b54c:	1b00      	subs	r0, r0, r4
 800b54e:	4b2c      	ldr	r3, [pc, #176]	; (800b600 <JoystickTask+0x258>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3b01      	subs	r3, #1
 800b554:	4298      	cmp	r0, r3
 800b556:	d23f      	bcs.n	800b5d8 <JoystickTask+0x230>
 800b558:	4b2a      	ldr	r3, [pc, #168]	; (800b604 <JoystickTask+0x25c>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d13b      	bne.n	800b5d8 <JoystickTask+0x230>
				taskYIELD();
 800b560:	f004 fe4a 	bl	80101f8 <vPortYield>
 800b564:	e7f0      	b.n	800b548 <JoystickTask+0x1a0>
				t0 = HAL_GetTick();
 800b566:	f004 ffd1 	bl	801050c <HAL_GetTick>
 800b56a:	0004      	movs	r4, r0
				v = calculateVariantValue(joystickVector, joystickMaxInterval);
 800b56c:	4b2b      	ldr	r3, [pc, #172]	; (800b61c <JoystickTask+0x274>)
 800b56e:	6819      	ldr	r1, [r3, #0]
 800b570:	4b2b      	ldr	r3, [pc, #172]	; (800b620 <JoystickTask+0x278>)
 800b572:	7818      	ldrb	r0, [r3, #0]
 800b574:	f7ff fac6 	bl	800ab04 <calculateVariantValue>
 800b578:	b2c1      	uxtb	r1, r0
 800b57a:	4b2a      	ldr	r3, [pc, #168]	; (800b624 <JoystickTask+0x27c>)
 800b57c:	7019      	strb	r1, [r3, #0]
				SendMeasurementResult(joystickMode, v, 0, 0, joystickModule, 0,
 800b57e:	4b23      	ldr	r3, [pc, #140]	; (800b60c <JoystickTask+0x264>)
 800b580:	7818      	ldrb	r0, [r3, #0]
 800b582:	b2c0      	uxtb	r0, r0
 800b584:	2200      	movs	r2, #0
 800b586:	2500      	movs	r5, #0
 800b588:	9504      	str	r5, [sp, #16]
 800b58a:	9503      	str	r5, [sp, #12]
 800b58c:	4b26      	ldr	r3, [pc, #152]	; (800b628 <JoystickTask+0x280>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	9302      	str	r3, [sp, #8]
 800b592:	9501      	str	r5, [sp, #4]
 800b594:	4b25      	ldr	r3, [pc, #148]	; (800b62c <JoystickTask+0x284>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	1c13      	adds	r3, r2, #0
 800b59c:	f7ff fb46 	bl	800ac2c <SendMeasurementResult>
 800b5a0:	e7d2      	b.n	800b548 <JoystickTask+0x1a0>
				cartesianCoordinates();
 800b5a2:	f7ff fa2f 	bl	800aa04 <cartesianCoordinates>
				SendMeasurementResult(joystickMode, 0, x, y, joystickModule, 0,
 800b5a6:	4b19      	ldr	r3, [pc, #100]	; (800b60c <JoystickTask+0x264>)
 800b5a8:	7818      	ldrb	r0, [r3, #0]
 800b5aa:	b2c0      	uxtb	r0, r0
 800b5ac:	4b18      	ldr	r3, [pc, #96]	; (800b610 <JoystickTask+0x268>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	4b18      	ldr	r3, [pc, #96]	; (800b614 <JoystickTask+0x26c>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	491e      	ldr	r1, [pc, #120]	; (800b630 <JoystickTask+0x288>)
 800b5b6:	6809      	ldr	r1, [r1, #0]
 800b5b8:	9104      	str	r1, [sp, #16]
 800b5ba:	491e      	ldr	r1, [pc, #120]	; (800b634 <JoystickTask+0x28c>)
 800b5bc:	6809      	ldr	r1, [r1, #0]
 800b5be:	9103      	str	r1, [sp, #12]
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	9102      	str	r1, [sp, #8]
 800b5c4:	9101      	str	r1, [sp, #4]
 800b5c6:	4919      	ldr	r1, [pc, #100]	; (800b62c <JoystickTask+0x284>)
 800b5c8:	7809      	ldrb	r1, [r1, #0]
 800b5ca:	9100      	str	r1, [sp, #0]
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	f7ff fb2d 	bl	800ac2c <SendMeasurementResult>
 800b5d2:	e7b9      	b.n	800b548 <JoystickTask+0x1a0>
			Stop_Joystick();
 800b5d4:	f7ff feb4 	bl	800b340 <Stop_Joystick>
		taskYIELD();
 800b5d8:	f004 fe0e 	bl	80101f8 <vPortYield>
		switch (joystickMode) {
 800b5dc:	4b0b      	ldr	r3, [pc, #44]	; (800b60c <JoystickTask+0x264>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	2b0f      	cmp	r3, #15
 800b5e4:	d803      	bhi.n	800b5ee <JoystickTask+0x246>
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4a13      	ldr	r2, [pc, #76]	; (800b638 <JoystickTask+0x290>)
 800b5ea:	58d3      	ldr	r3, [r2, r3]
 800b5ec:	469f      	mov	pc, r3
			joystickMode = REQ_IDLE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	4a06      	ldr	r2, [pc, #24]	; (800b60c <JoystickTask+0x264>)
 800b5f2:	7013      	strb	r3, [r2, #0]
			buttonB = 0;
 800b5f4:	4a11      	ldr	r2, [pc, #68]	; (800b63c <JoystickTask+0x294>)
 800b5f6:	7013      	strb	r3, [r2, #0]
			break;
 800b5f8:	e7ee      	b.n	800b5d8 <JoystickTask+0x230>
 800b5fa:	46c0      	nop			; (mov r8, r8)
 800b5fc:	20006214 	.word	0x20006214
 800b600:	20006294 	.word	0x20006294
 800b604:	20000f2d 	.word	0x20000f2d
 800b608:	20006288 	.word	0x20006288
 800b60c:	200062d8 	.word	0x200062d8
 800b610:	20006210 	.word	0x20006210
 800b614:	200063c8 	.word	0x200063c8
 800b618:	20006290 	.word	0x20006290
 800b61c:	20000f28 	.word	0x20000f28
 800b620:	20006350 	.word	0x20006350
 800b624:	200063c4 	.word	0x200063c4
 800b628:	200000bc 	.word	0x200000bc
 800b62c:	2000628a 	.word	0x2000628a
 800b630:	200000c4 	.word	0x200000c4
 800b634:	200000c0 	.word	0x200000c0
 800b638:	0801adf8 	.word	0x0801adf8
 800b63c:	20000f24 	.word	0x20000f24

0800b640 <Stream_To_CLI>:
Module_Status Stream_To_CLI(uint32_t Period, uint32_t Timeout) {
 800b640:	b510      	push	{r4, lr}
 800b642:	b082      	sub	sp, #8
	joystickPeriod = Period;
 800b644:	4b19      	ldr	r3, [pc, #100]	; (800b6ac <Stream_To_CLI+0x6c>)
 800b646:	6018      	str	r0, [r3, #0]
	joystickTimeout = Timeout;
 800b648:	4b19      	ldr	r3, [pc, #100]	; (800b6b0 <Stream_To_CLI+0x70>)
 800b64a:	6019      	str	r1, [r3, #0]
	joystickMode = REQ_STREAM_CLI;
 800b64c:	4b19      	ldr	r3, [pc, #100]	; (800b6b4 <Stream_To_CLI+0x74>)
 800b64e:	2205      	movs	r2, #5
 800b650:	701a      	strb	r2, [r3, #0]
	if ((joystickTimeout > 0) && (joystickTimeout < 0xFFFFFFFF)) {
 800b652:	1e4b      	subs	r3, r1, #1
 800b654:	3303      	adds	r3, #3
 800b656:	d909      	bls.n	800b66c <Stream_To_CLI+0x2c>
	if (joystickTimeout > 0) {
 800b658:	4b15      	ldr	r3, [pc, #84]	; (800b6b0 <Stream_To_CLI+0x70>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <Stream_To_CLI+0x26>
		startMeasurement = START_MEASUREMENT;
 800b660:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <Stream_To_CLI+0x78>)
 800b662:	2201      	movs	r2, #1
 800b664:	701a      	strb	r2, [r3, #0]
}
 800b666:	2000      	movs	r0, #0
 800b668:	b002      	add	sp, #8
 800b66a:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(joystickTimeout), pdFALSE,
 800b66c:	0148      	lsls	r0, r1, #5
 800b66e:	1a40      	subs	r0, r0, r1
 800b670:	0080      	lsls	r0, r0, #2
 800b672:	1840      	adds	r0, r0, r1
 800b674:	00c0      	lsls	r0, r0, #3
		xTimerJoystick = xTimerCreate("JoystickTimer",
 800b676:	21fa      	movs	r1, #250	; 0xfa
 800b678:	0089      	lsls	r1, r1, #2
 800b67a:	f7f4 fd69 	bl	8000150 <__udivsi3>
 800b67e:	0001      	movs	r1, r0
 800b680:	4b0e      	ldr	r3, [pc, #56]	; (800b6bc <Stream_To_CLI+0x7c>)
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	23ff      	movs	r3, #255	; 0xff
 800b686:	2200      	movs	r2, #0
 800b688:	480d      	ldr	r0, [pc, #52]	; (800b6c0 <Stream_To_CLI+0x80>)
 800b68a:	f004 fbf1 	bl	800fe70 <xTimerCreate>
 800b68e:	0004      	movs	r4, r0
 800b690:	4b0c      	ldr	r3, [pc, #48]	; (800b6c4 <Stream_To_CLI+0x84>)
 800b692:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerJoystick, portMAX_DELAY);
 800b694:	f003 fe72 	bl	800f37c <xTaskGetTickCount>
 800b698:	0002      	movs	r2, r0
 800b69a:	2301      	movs	r3, #1
 800b69c:	425b      	negs	r3, r3
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	2101      	movs	r1, #1
 800b6a4:	0020      	movs	r0, r4
 800b6a6:	f004 fc07 	bl	800feb8 <xTimerGenericCommand>
 800b6aa:	e7d5      	b.n	800b658 <Stream_To_CLI+0x18>
 800b6ac:	20006294 	.word	0x20006294
 800b6b0:	200064ac 	.word	0x200064ac
 800b6b4:	200062d8 	.word	0x200062d8
 800b6b8:	20000f2c 	.word	0x20000f2c
 800b6bc:	0800af45 	.word	0x0800af45
 800b6c0:	0801ad84 	.word	0x0801ad84
 800b6c4:	20000f38 	.word	0x20000f38

0800b6c8 <Stream_To_CLI_R>:
Module_Status Stream_To_CLI_R(uint32_t Period, uint32_t Timeout) {
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	b082      	sub	sp, #8
	joystickPeriod = Period;
 800b6cc:	4b19      	ldr	r3, [pc, #100]	; (800b734 <Stream_To_CLI_R+0x6c>)
 800b6ce:	6018      	str	r0, [r3, #0]
	joystickTimeout = Timeout;
 800b6d0:	4b19      	ldr	r3, [pc, #100]	; (800b738 <Stream_To_CLI_R+0x70>)
 800b6d2:	6019      	str	r1, [r3, #0]
	joystickMode = REQ_STREAM_RAW;
 800b6d4:	4b19      	ldr	r3, [pc, #100]	; (800b73c <Stream_To_CLI_R+0x74>)
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	701a      	strb	r2, [r3, #0]
	if ((joystickTimeout > 0) && (joystickTimeout < 0xFFFFFFFF)) {
 800b6da:	1e4b      	subs	r3, r1, #1
 800b6dc:	3303      	adds	r3, #3
 800b6de:	d909      	bls.n	800b6f4 <Stream_To_CLI_R+0x2c>
	if (joystickTimeout > 0) {
 800b6e0:	4b15      	ldr	r3, [pc, #84]	; (800b738 <Stream_To_CLI_R+0x70>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <Stream_To_CLI_R+0x26>
		startMeasurement = START_MEASUREMENT;
 800b6e8:	4b15      	ldr	r3, [pc, #84]	; (800b740 <Stream_To_CLI_R+0x78>)
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	701a      	strb	r2, [r3, #0]
}
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	b002      	add	sp, #8
 800b6f2:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(joystickTimeout), pdFALSE,
 800b6f4:	0148      	lsls	r0, r1, #5
 800b6f6:	1a40      	subs	r0, r0, r1
 800b6f8:	0080      	lsls	r0, r0, #2
 800b6fa:	1840      	adds	r0, r0, r1
 800b6fc:	00c0      	lsls	r0, r0, #3
		xTimerJoystick = xTimerCreate("JoystickTimer",
 800b6fe:	21fa      	movs	r1, #250	; 0xfa
 800b700:	0089      	lsls	r1, r1, #2
 800b702:	f7f4 fd25 	bl	8000150 <__udivsi3>
 800b706:	0001      	movs	r1, r0
 800b708:	4b0e      	ldr	r3, [pc, #56]	; (800b744 <Stream_To_CLI_R+0x7c>)
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	23ff      	movs	r3, #255	; 0xff
 800b70e:	2200      	movs	r2, #0
 800b710:	480d      	ldr	r0, [pc, #52]	; (800b748 <Stream_To_CLI_R+0x80>)
 800b712:	f004 fbad 	bl	800fe70 <xTimerCreate>
 800b716:	0004      	movs	r4, r0
 800b718:	4b0c      	ldr	r3, [pc, #48]	; (800b74c <Stream_To_CLI_R+0x84>)
 800b71a:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerJoystick, portMAX_DELAY);
 800b71c:	f003 fe2e 	bl	800f37c <xTaskGetTickCount>
 800b720:	0002      	movs	r2, r0
 800b722:	2301      	movs	r3, #1
 800b724:	425b      	negs	r3, r3
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	2300      	movs	r3, #0
 800b72a:	2101      	movs	r1, #1
 800b72c:	0020      	movs	r0, r4
 800b72e:	f004 fbc3 	bl	800feb8 <xTimerGenericCommand>
 800b732:	e7d5      	b.n	800b6e0 <Stream_To_CLI_R+0x18>
 800b734:	20006294 	.word	0x20006294
 800b738:	200064ac 	.word	0x200064ac
 800b73c:	200062d8 	.word	0x200062d8
 800b740:	20000f2c 	.word	0x20000f2c
 800b744:	0800af45 	.word	0x0800af45
 800b748:	0801ad84 	.word	0x0801ad84
 800b74c:	20000f38 	.word	0x20000f38

0800b750 <Stream_To_Port>:
		uint32_t Timeout) {
 800b750:	b510      	push	{r4, lr}
 800b752:	b082      	sub	sp, #8
	joystickPort = Port;
 800b754:	4c18      	ldr	r4, [pc, #96]	; (800b7b8 <Stream_To_Port+0x68>)
 800b756:	7020      	strb	r0, [r4, #0]
	joystickModule = Module;
 800b758:	4818      	ldr	r0, [pc, #96]	; (800b7bc <Stream_To_Port+0x6c>)
 800b75a:	7001      	strb	r1, [r0, #0]
	joystickPeriod = Period;
 800b75c:	4918      	ldr	r1, [pc, #96]	; (800b7c0 <Stream_To_Port+0x70>)
 800b75e:	600a      	str	r2, [r1, #0]
	joystickTimeout = Timeout;
 800b760:	4a18      	ldr	r2, [pc, #96]	; (800b7c4 <Stream_To_Port+0x74>)
 800b762:	6013      	str	r3, [r2, #0]
	joystickMode = REQ_STREAM_PORT;
 800b764:	4a18      	ldr	r2, [pc, #96]	; (800b7c8 <Stream_To_Port+0x78>)
 800b766:	2103      	movs	r1, #3
 800b768:	7011      	strb	r1, [r2, #0]
	if ((joystickTimeout > 0) && (joystickTimeout < 0xFFFFFFFF)) {
 800b76a:	1e5a      	subs	r2, r3, #1
 800b76c:	3203      	adds	r2, #3
 800b76e:	d902      	bls.n	800b776 <Stream_To_Port+0x26>
}
 800b770:	2000      	movs	r0, #0
 800b772:	b002      	add	sp, #8
 800b774:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(joystickTimeout), pdFALSE,
 800b776:	0158      	lsls	r0, r3, #5
 800b778:	1ac0      	subs	r0, r0, r3
 800b77a:	0080      	lsls	r0, r0, #2
 800b77c:	18c0      	adds	r0, r0, r3
 800b77e:	00c0      	lsls	r0, r0, #3
		xTimerJoystick = xTimerCreate("JoystickTimer",
 800b780:	21fa      	movs	r1, #250	; 0xfa
 800b782:	0089      	lsls	r1, r1, #2
 800b784:	f7f4 fce4 	bl	8000150 <__udivsi3>
 800b788:	0001      	movs	r1, r0
 800b78a:	4b10      	ldr	r3, [pc, #64]	; (800b7cc <Stream_To_Port+0x7c>)
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	23ff      	movs	r3, #255	; 0xff
 800b790:	2200      	movs	r2, #0
 800b792:	480f      	ldr	r0, [pc, #60]	; (800b7d0 <Stream_To_Port+0x80>)
 800b794:	f004 fb6c 	bl	800fe70 <xTimerCreate>
 800b798:	0004      	movs	r4, r0
 800b79a:	4b0e      	ldr	r3, [pc, #56]	; (800b7d4 <Stream_To_Port+0x84>)
 800b79c:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerJoystick, portMAX_DELAY);
 800b79e:	f003 fded 	bl	800f37c <xTaskGetTickCount>
 800b7a2:	0002      	movs	r2, r0
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	425b      	negs	r3, r3
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	0020      	movs	r0, r4
 800b7b0:	f004 fb82 	bl	800feb8 <xTimerGenericCommand>
 800b7b4:	e7dc      	b.n	800b770 <Stream_To_Port+0x20>
 800b7b6:	46c0      	nop			; (mov r8, r8)
 800b7b8:	20006290 	.word	0x20006290
 800b7bc:	2000628a 	.word	0x2000628a
 800b7c0:	20006294 	.word	0x20006294
 800b7c4:	200064ac 	.word	0x200064ac
 800b7c8:	200062d8 	.word	0x200062d8
 800b7cc:	0800af45 	.word	0x0800af45
 800b7d0:	0801ad84 	.word	0x0801ad84
 800b7d4:	20000f38 	.word	0x20000f38

0800b7d8 <Stream_To_Buffer>:
Module_Status Stream_To_Buffer(int *Buffer, uint32_t Period, uint32_t Timeout) {
 800b7d8:	b510      	push	{r4, lr}
 800b7da:	b082      	sub	sp, #8
	joystickPeriod = Period;
 800b7dc:	4b17      	ldr	r3, [pc, #92]	; (800b83c <Stream_To_Buffer+0x64>)
 800b7de:	6019      	str	r1, [r3, #0]
	joystickTimeout = Timeout;
 800b7e0:	4b17      	ldr	r3, [pc, #92]	; (800b840 <Stream_To_Buffer+0x68>)
 800b7e2:	601a      	str	r2, [r3, #0]
	ptrBuf = Buffer;
 800b7e4:	4b17      	ldr	r3, [pc, #92]	; (800b844 <Stream_To_Buffer+0x6c>)
 800b7e6:	6018      	str	r0, [r3, #0]
	joystickMode = REQ_STREAM_BUFFER;
 800b7e8:	4b17      	ldr	r3, [pc, #92]	; (800b848 <Stream_To_Buffer+0x70>)
 800b7ea:	2104      	movs	r1, #4
 800b7ec:	7019      	strb	r1, [r3, #0]
	if ((joystickTimeout > 0) && (joystickTimeout < 0xFFFFFFFF)) {
 800b7ee:	1e53      	subs	r3, r2, #1
 800b7f0:	3303      	adds	r3, #3
 800b7f2:	d902      	bls.n	800b7fa <Stream_To_Buffer+0x22>
}
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	b002      	add	sp, #8
 800b7f8:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(joystickTimeout), pdFALSE,
 800b7fa:	0150      	lsls	r0, r2, #5
 800b7fc:	1a80      	subs	r0, r0, r2
 800b7fe:	0080      	lsls	r0, r0, #2
 800b800:	1880      	adds	r0, r0, r2
 800b802:	00c0      	lsls	r0, r0, #3
		xTimerJoystick = xTimerCreate("JoystickTimer",
 800b804:	21fa      	movs	r1, #250	; 0xfa
 800b806:	0089      	lsls	r1, r1, #2
 800b808:	f7f4 fca2 	bl	8000150 <__udivsi3>
 800b80c:	0001      	movs	r1, r0
 800b80e:	4b0f      	ldr	r3, [pc, #60]	; (800b84c <Stream_To_Buffer+0x74>)
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	23ff      	movs	r3, #255	; 0xff
 800b814:	2200      	movs	r2, #0
 800b816:	480e      	ldr	r0, [pc, #56]	; (800b850 <Stream_To_Buffer+0x78>)
 800b818:	f004 fb2a 	bl	800fe70 <xTimerCreate>
 800b81c:	0004      	movs	r4, r0
 800b81e:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <Stream_To_Buffer+0x7c>)
 800b820:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerJoystick, portMAX_DELAY);
 800b822:	f003 fdab 	bl	800f37c <xTaskGetTickCount>
 800b826:	0002      	movs	r2, r0
 800b828:	2301      	movs	r3, #1
 800b82a:	425b      	negs	r3, r3
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	2300      	movs	r3, #0
 800b830:	2101      	movs	r1, #1
 800b832:	0020      	movs	r0, r4
 800b834:	f004 fb40 	bl	800feb8 <xTimerGenericCommand>
 800b838:	e7dc      	b.n	800b7f4 <Stream_To_Buffer+0x1c>
 800b83a:	46c0      	nop			; (mov r8, r8)
 800b83c:	20006294 	.word	0x20006294
 800b840:	200064ac 	.word	0x200064ac
 800b844:	200000bc 	.word	0x200000bc
 800b848:	200062d8 	.word	0x200062d8
 800b84c:	0800af45 	.word	0x0800af45
 800b850:	0801ad84 	.word	0x0801ad84
 800b854:	20000f38 	.word	0x20000f38

0800b858 <Stream_To_Cbuffer>:
		uint32_t Timeout) {
 800b858:	b510      	push	{r4, lr}
 800b85a:	b082      	sub	sp, #8
	joystickPeriod = Period;
 800b85c:	4c18      	ldr	r4, [pc, #96]	; (800b8c0 <Stream_To_Cbuffer+0x68>)
 800b85e:	6022      	str	r2, [r4, #0]
	joystickTimeout = Timeout;
 800b860:	4a18      	ldr	r2, [pc, #96]	; (800b8c4 <Stream_To_Cbuffer+0x6c>)
 800b862:	6013      	str	r3, [r2, #0]
	ptrCbuf1 = Buffer1;
 800b864:	4a18      	ldr	r2, [pc, #96]	; (800b8c8 <Stream_To_Cbuffer+0x70>)
 800b866:	6010      	str	r0, [r2, #0]
	ptrCbuf2 = Buffer2;
 800b868:	4a18      	ldr	r2, [pc, #96]	; (800b8cc <Stream_To_Cbuffer+0x74>)
 800b86a:	6011      	str	r1, [r2, #0]
	joystickMode = REQ_STREAM_BUFFER;
 800b86c:	4a18      	ldr	r2, [pc, #96]	; (800b8d0 <Stream_To_Cbuffer+0x78>)
 800b86e:	2104      	movs	r1, #4
 800b870:	7011      	strb	r1, [r2, #0]
	if ((joystickTimeout > 0) && (joystickTimeout < 0xFFFFFFFF)) {
 800b872:	1e5a      	subs	r2, r3, #1
 800b874:	3203      	adds	r2, #3
 800b876:	d902      	bls.n	800b87e <Stream_To_Cbuffer+0x26>
}
 800b878:	2000      	movs	r0, #0
 800b87a:	b002      	add	sp, #8
 800b87c:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(joystickTimeout), pdFALSE,
 800b87e:	0158      	lsls	r0, r3, #5
 800b880:	1ac0      	subs	r0, r0, r3
 800b882:	0080      	lsls	r0, r0, #2
 800b884:	18c0      	adds	r0, r0, r3
 800b886:	00c0      	lsls	r0, r0, #3
		xTimerJoystick = xTimerCreate("JoystickTimer",
 800b888:	21fa      	movs	r1, #250	; 0xfa
 800b88a:	0089      	lsls	r1, r1, #2
 800b88c:	f7f4 fc60 	bl	8000150 <__udivsi3>
 800b890:	0001      	movs	r1, r0
 800b892:	4b10      	ldr	r3, [pc, #64]	; (800b8d4 <Stream_To_Cbuffer+0x7c>)
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	23ff      	movs	r3, #255	; 0xff
 800b898:	2200      	movs	r2, #0
 800b89a:	480f      	ldr	r0, [pc, #60]	; (800b8d8 <Stream_To_Cbuffer+0x80>)
 800b89c:	f004 fae8 	bl	800fe70 <xTimerCreate>
 800b8a0:	0004      	movs	r4, r0
 800b8a2:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <Stream_To_Cbuffer+0x84>)
 800b8a4:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimerJoystick, portMAX_DELAY);
 800b8a6:	f003 fd69 	bl	800f37c <xTaskGetTickCount>
 800b8aa:	0002      	movs	r2, r0
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	425b      	negs	r3, r3
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	0020      	movs	r0, r4
 800b8b8:	f004 fafe 	bl	800feb8 <xTimerGenericCommand>
 800b8bc:	e7dc      	b.n	800b878 <Stream_To_Cbuffer+0x20>
 800b8be:	46c0      	nop			; (mov r8, r8)
 800b8c0:	20006294 	.word	0x20006294
 800b8c4:	200064ac 	.word	0x200064ac
 800b8c8:	200000c0 	.word	0x200000c0
 800b8cc:	200000c4 	.word	0x200000c4
 800b8d0:	200062d8 	.word	0x200062d8
 800b8d4:	0800af45 	.word	0x0800af45
 800b8d8:	0801ad84 	.word	0x0801ad84
 800b8dc:	20000f38 	.word	0x20000f38

0800b8e0 <joystickStreamCommand>:
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800b8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8e2:	46de      	mov	lr, fp
 800b8e4:	4657      	mov	r7, sl
 800b8e6:	464e      	mov	r6, r9
 800b8e8:	4645      	mov	r5, r8
 800b8ea:	b5e0      	push	{r5, r6, r7, lr}
 800b8ec:	b089      	sub	sp, #36	; 0x24
 800b8ee:	0004      	movs	r4, r0
 800b8f0:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9307      	str	r3, [sp, #28]
	portBASE_TYPE xParameterStringLength2 = 0;
 800b8f6:	9306      	str	r3, [sp, #24]
	portBASE_TYPE xParameterStringLength3 = 0;
 800b8f8:	9305      	str	r3, [sp, #20]
	portBASE_TYPE xParameterStringLength4 = 0;
 800b8fa:	9304      	str	r3, [sp, #16]
	portBASE_TYPE xParameterStringLength5 = 0;
 800b8fc:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength6 = 0;
 800b8fe:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 800b900:	2800      	cmp	r0, #0
 800b902:	d100      	bne.n	800b906 <joystickStreamCommand+0x26>
 800b904:	e084      	b.n	800ba10 <joystickStreamCommand+0x130>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800b906:	aa07      	add	r2, sp, #28
 800b908:	2101      	movs	r1, #1
 800b90a:	0028      	movs	r0, r5
 800b90c:	f002 fe9a 	bl	800e644 <FreeRTOS_CLIGetParameter>
 800b910:	4683      	mov	fp, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800b912:	aa06      	add	r2, sp, #24
 800b914:	2102      	movs	r1, #2
 800b916:	0028      	movs	r0, r5
 800b918:	f002 fe94 	bl	800e644 <FreeRTOS_CLIGetParameter>
 800b91c:	0007      	movs	r7, r0
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800b91e:	aa05      	add	r2, sp, #20
 800b920:	2103      	movs	r1, #3
 800b922:	0028      	movs	r0, r5
 800b924:	f002 fe8e 	bl	800e644 <FreeRTOS_CLIGetParameter>
 800b928:	4680      	mov	r8, r0
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,
 800b92a:	aa04      	add	r2, sp, #16
 800b92c:	2104      	movs	r1, #4
 800b92e:	0028      	movs	r0, r5
 800b930:	f002 fe88 	bl	800e644 <FreeRTOS_CLIGetParameter>
 800b934:	0006      	movs	r6, r0
	pcParameterString5 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 5,
 800b936:	aa03      	add	r2, sp, #12
 800b938:	2105      	movs	r1, #5
 800b93a:	0028      	movs	r0, r5
 800b93c:	f002 fe82 	bl	800e644 <FreeRTOS_CLIGetParameter>
 800b940:	4682      	mov	sl, r0
	pcParameterString6 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 6,
 800b942:	aa02      	add	r2, sp, #8
 800b944:	2106      	movs	r1, #6
 800b946:	0028      	movs	r0, r5
 800b948:	f002 fe7c 	bl	800e644 <FreeRTOS_CLIGetParameter>
 800b94c:	4681      	mov	r9, r0
	if (NULL != pcParameterString1
 800b94e:	465b      	mov	r3, fp
 800b950:	2b00      	cmp	r3, #0
 800b952:	d05f      	beq.n	800ba14 <joystickStreamCommand+0x134>
			&& !strncmp((const char*) pcParameterString1, "-d", 2)) {
 800b954:	2202      	movs	r2, #2
 800b956:	49c6      	ldr	r1, [pc, #792]	; (800bc70 <joystickStreamCommand+0x390>)
 800b958:	4658      	mov	r0, fp
 800b95a:	f008 fe9c 	bl	8014696 <strncmp>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d158      	bne.n	800ba14 <joystickStreamCommand+0x134>
		type = directionStream;
 800b962:	4bc4      	ldr	r3, [pc, #784]	; (800bc74 <joystickStreamCommand+0x394>)
 800b964:	2200      	movs	r2, #0
 800b966:	701a      	strb	r2, [r3, #0]
	Module_Status result = H10R4_OK;
 800b968:	2500      	movs	r5, #0
	if (NULL != pcParameterString3) {
 800b96a:	4643      	mov	r3, r8
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d064      	beq.n	800ba3a <joystickStreamCommand+0x15a>
		Period = atoi((char*) pcParameterString3);
 800b970:	4640      	mov	r0, r8
 800b972:	f007 fe60 	bl	8013636 <atoi>
 800b976:	4680      	mov	r8, r0
	if (NULL != pcParameterString4) {
 800b978:	2e00      	cmp	r6, #0
 800b97a:	d067      	beq.n	800ba4c <joystickStreamCommand+0x16c>
		if (!strncmp((const char*) pcParameterString4, "inf", 3)) {
 800b97c:	2203      	movs	r2, #3
 800b97e:	49be      	ldr	r1, [pc, #760]	; (800bc78 <joystickStreamCommand+0x398>)
 800b980:	0030      	movs	r0, r6
 800b982:	f008 fe88 	bl	8014696 <strncmp>
 800b986:	2800      	cmp	r0, #0
 800b988:	d15b      	bne.n	800ba42 <joystickStreamCommand+0x162>
			Timeout = portMAX_DELAY;
 800b98a:	2601      	movs	r6, #1
 800b98c:	4276      	negs	r6, r6
	if (NULL != pcParameterString2
 800b98e:	2f00      	cmp	r7, #0
 800b990:	d05f      	beq.n	800ba52 <joystickStreamCommand+0x172>
			&& !strncmp((const char*) pcParameterString2, "cli", 3)) {
 800b992:	2203      	movs	r2, #3
 800b994:	49b9      	ldr	r1, [pc, #740]	; (800bc7c <joystickStreamCommand+0x39c>)
 800b996:	0038      	movs	r0, r7
 800b998:	f008 fe7d 	bl	8014696 <strncmp>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d158      	bne.n	800ba52 <joystickStreamCommand+0x172>
		option = cli;
 800b9a0:	4bb7      	ldr	r3, [pc, #732]	; (800bc80 <joystickStreamCommand+0x3a0>)
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	701a      	strb	r2, [r3, #0]
	switch (type) {
 800b9a6:	4bb3      	ldr	r3, [pc, #716]	; (800bc74 <joystickStreamCommand+0x394>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d100      	bne.n	800b9b0 <joystickStreamCommand+0xd0>
 800b9ae:	e088      	b.n	800bac2 <joystickStreamCommand+0x1e2>
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d100      	bne.n	800b9b6 <joystickStreamCommand+0xd6>
 800b9b4:	e10a      	b.n	800bbcc <joystickStreamCommand+0x2ec>
	if (H10R4_ERR_WrongParams == result) {
 800b9b6:	2d04      	cmp	r5, #4
 800b9b8:	d100      	bne.n	800b9bc <joystickStreamCommand+0xdc>
 800b9ba:	e1ba      	b.n	800bd32 <joystickStreamCommand+0x452>
	if (stopB) {
 800b9bc:	4bb1      	ldr	r3, [pc, #708]	; (800bc84 <joystickStreamCommand+0x3a4>)
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d100      	bne.n	800b9c6 <joystickStreamCommand+0xe6>
 800b9c4:	e1c8      	b.n	800bd58 <joystickStreamCommand+0x478>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageStopMsg);
 800b9c6:	2221      	movs	r2, #33	; 0x21
 800b9c8:	49af      	ldr	r1, [pc, #700]	; (800bc88 <joystickStreamCommand+0x3a8>)
 800b9ca:	0020      	movs	r0, r4
 800b9cc:	f007 fe86 	bl	80136dc <memcpy>
				strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800b9d0:	0020      	movs	r0, r4
 800b9d2:	f7f4 fba1 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800b9d6:	b282      	uxth	r2, r0
 800b9d8:	4bac      	ldr	r3, [pc, #688]	; (800bc8c <joystickStreamCommand+0x3ac>)
 800b9da:	7818      	ldrb	r0, [r3, #0]
 800b9dc:	2301      	movs	r3, #1
 800b9de:	425b      	negs	r3, r3
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	3333      	adds	r3, #51	; 0x33
 800b9e4:	0021      	movs	r1, r4
 800b9e6:	f002 fbd3 	bl	800e190 <writePxMutex>
		memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800b9ea:	0020      	movs	r0, r4
 800b9ec:	f7f4 fb94 	bl	8000118 <strlen>
 800b9f0:	0002      	movs	r2, r0
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	0020      	movs	r0, r4
 800b9f6:	f007 fe7a 	bl	80136ee <memset>
		stopB = 0;
 800b9fa:	4ba2      	ldr	r3, [pc, #648]	; (800bc84 <joystickStreamCommand+0x3a4>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	701a      	strb	r2, [r3, #0]
}
 800ba00:	2000      	movs	r0, #0
 800ba02:	b009      	add	sp, #36	; 0x24
 800ba04:	bcf0      	pop	{r4, r5, r6, r7}
 800ba06:	46bb      	mov	fp, r7
 800ba08:	46b2      	mov	sl, r6
 800ba0a:	46a9      	mov	r9, r5
 800ba0c:	46a0      	mov	r8, r4
 800ba0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 800ba10:	b672      	cpsid	i
 800ba12:	e7fe      	b.n	800ba12 <joystickStreamCommand+0x132>
	} else if (NULL != pcParameterString1
 800ba14:	465b      	mov	r3, fp
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00b      	beq.n	800ba32 <joystickStreamCommand+0x152>
			&& !strncmp((const char*) pcParameterString1, "-c", 2)) {
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	499c      	ldr	r1, [pc, #624]	; (800bc90 <joystickStreamCommand+0x3b0>)
 800ba1e:	4658      	mov	r0, fp
 800ba20:	f008 fe39 	bl	8014696 <strncmp>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d106      	bne.n	800ba36 <joystickStreamCommand+0x156>
		type = cartesianStream;
 800ba28:	4b92      	ldr	r3, [pc, #584]	; (800bc74 <joystickStreamCommand+0x394>)
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	701a      	strb	r2, [r3, #0]
	Module_Status result = H10R4_OK;
 800ba2e:	2500      	movs	r5, #0
		type = cartesianStream;
 800ba30:	e79b      	b.n	800b96a <joystickStreamCommand+0x8a>
		result = H10R4_ERR_WrongParams;
 800ba32:	2504      	movs	r5, #4
 800ba34:	e799      	b.n	800b96a <joystickStreamCommand+0x8a>
 800ba36:	2504      	movs	r5, #4
 800ba38:	e797      	b.n	800b96a <joystickStreamCommand+0x8a>
		result = H10R4_ERR_WrongParams;
 800ba3a:	2504      	movs	r5, #4
	uint32_t Period = 0;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4698      	mov	r8, r3
 800ba40:	e79a      	b.n	800b978 <joystickStreamCommand+0x98>
			Timeout = atoi((char*) pcParameterString4);
 800ba42:	0030      	movs	r0, r6
 800ba44:	f007 fdf7 	bl	8013636 <atoi>
 800ba48:	0006      	movs	r6, r0
 800ba4a:	e7a0      	b.n	800b98e <joystickStreamCommand+0xae>
		result = H10R4_ERR_WrongParams;
 800ba4c:	2504      	movs	r5, #4
	uint32_t Timeout = 0;
 800ba4e:	2600      	movs	r6, #0
 800ba50:	e79d      	b.n	800b98e <joystickStreamCommand+0xae>
	} else if (NULL != pcParameterString2
 800ba52:	2f00      	cmp	r7, #0
 800ba54:	d00a      	beq.n	800ba6c <joystickStreamCommand+0x18c>
			&& !strncmp((const char*) pcParameterString2, "raw", 3)) {
 800ba56:	2203      	movs	r2, #3
 800ba58:	498e      	ldr	r1, [pc, #568]	; (800bc94 <joystickStreamCommand+0x3b4>)
 800ba5a:	0038      	movs	r0, r7
 800ba5c:	f008 fe1b 	bl	8014696 <strncmp>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d103      	bne.n	800ba6c <joystickStreamCommand+0x18c>
		option = raw;
 800ba64:	4b86      	ldr	r3, [pc, #536]	; (800bc80 <joystickStreamCommand+0x3a0>)
 800ba66:	2201      	movs	r2, #1
 800ba68:	701a      	strb	r2, [r3, #0]
 800ba6a:	e79c      	b.n	800b9a6 <joystickStreamCommand+0xc6>
	} else if (NULL != pcParameterString2
 800ba6c:	2f00      	cmp	r7, #0
 800ba6e:	d00a      	beq.n	800ba86 <joystickStreamCommand+0x1a6>
			&& !strncmp((const char*) pcParameterString2, "variant", 7)) {
 800ba70:	2207      	movs	r2, #7
 800ba72:	4989      	ldr	r1, [pc, #548]	; (800bc98 <joystickStreamCommand+0x3b8>)
 800ba74:	0038      	movs	r0, r7
 800ba76:	f008 fe0e 	bl	8014696 <strncmp>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d103      	bne.n	800ba86 <joystickStreamCommand+0x1a6>
		option = variant;
 800ba7e:	4b80      	ldr	r3, [pc, #512]	; (800bc80 <joystickStreamCommand+0x3a0>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
 800ba84:	e78f      	b.n	800b9a6 <joystickStreamCommand+0xc6>
	} else if (NULL != pcParameterString2
 800ba86:	2f00      	cmp	r7, #0
 800ba88:	d00a      	beq.n	800baa0 <joystickStreamCommand+0x1c0>
			&& !strncmp((const char*) pcParameterString2, "port", 4)) {
 800ba8a:	2204      	movs	r2, #4
 800ba8c:	4983      	ldr	r1, [pc, #524]	; (800bc9c <joystickStreamCommand+0x3bc>)
 800ba8e:	0038      	movs	r0, r7
 800ba90:	f008 fe01 	bl	8014696 <strncmp>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d103      	bne.n	800baa0 <joystickStreamCommand+0x1c0>
		option = port;
 800ba98:	4b79      	ldr	r3, [pc, #484]	; (800bc80 <joystickStreamCommand+0x3a0>)
 800ba9a:	2203      	movs	r2, #3
 800ba9c:	701a      	strb	r2, [r3, #0]
 800ba9e:	e782      	b.n	800b9a6 <joystickStreamCommand+0xc6>
	} else if (NULL != pcParameterString2
 800baa0:	2f00      	cmp	r7, #0
 800baa2:	d00a      	beq.n	800baba <joystickStreamCommand+0x1da>
			&& !strncmp((const char*) pcParameterString2, "buffer", 6)) {
 800baa4:	2206      	movs	r2, #6
 800baa6:	497e      	ldr	r1, [pc, #504]	; (800bca0 <joystickStreamCommand+0x3c0>)
 800baa8:	0038      	movs	r0, r7
 800baaa:	f008 fdf4 	bl	8014696 <strncmp>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d105      	bne.n	800babe <joystickStreamCommand+0x1de>
		option = buffer;
 800bab2:	4b73      	ldr	r3, [pc, #460]	; (800bc80 <joystickStreamCommand+0x3a0>)
 800bab4:	2204      	movs	r2, #4
 800bab6:	701a      	strb	r2, [r3, #0]
 800bab8:	e775      	b.n	800b9a6 <joystickStreamCommand+0xc6>
		result = H10R4_ERR_WrongParams;
 800baba:	2504      	movs	r5, #4
 800babc:	e773      	b.n	800b9a6 <joystickStreamCommand+0xc6>
 800babe:	2504      	movs	r5, #4
 800bac0:	e771      	b.n	800b9a6 <joystickStreamCommand+0xc6>
		switch (option) {
 800bac2:	4b6f      	ldr	r3, [pc, #444]	; (800bc80 <joystickStreamCommand+0x3a0>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d05f      	beq.n	800bb8a <joystickStreamCommand+0x2aa>
 800baca:	d81e      	bhi.n	800bb0a <joystickStreamCommand+0x22a>
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d03b      	beq.n	800bb48 <joystickStreamCommand+0x268>
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d000      	beq.n	800bad6 <joystickStreamCommand+0x1f6>
 800bad4:	e12d      	b.n	800bd32 <joystickStreamCommand+0x452>
			if(result == H10R4_OK){
 800bad6:	2d00      	cmp	r5, #0
 800bad8:	d000      	beq.n	800badc <joystickStreamCommand+0x1fc>
 800bada:	e76c      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800badc:	2225      	movs	r2, #37	; 0x25
 800bade:	4971      	ldr	r1, [pc, #452]	; (800bca4 <joystickStreamCommand+0x3c4>)
 800bae0:	0020      	movs	r0, r4
 800bae2:	f007 fdfb 	bl	80136dc <memcpy>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bae6:	0020      	movs	r0, r4
 800bae8:	f7f4 fb16 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800baec:	b282      	uxth	r2, r0
 800baee:	4b67      	ldr	r3, [pc, #412]	; (800bc8c <joystickStreamCommand+0x3ac>)
 800baf0:	7818      	ldrb	r0, [r3, #0]
 800baf2:	2301      	movs	r3, #1
 800baf4:	425b      	negs	r3, r3
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	3333      	adds	r3, #51	; 0x33
 800bafa:	0021      	movs	r1, r4
 800bafc:	f002 fb48 	bl	800e190 <writePxMutex>
			Stream_To_CLI_R(Period, Timeout);
 800bb00:	0031      	movs	r1, r6
 800bb02:	4640      	mov	r0, r8
 800bb04:	f7ff fde0 	bl	800b6c8 <Stream_To_CLI_R>
			while (startMeasurement != STOP_MEASUREMENT) {
 800bb08:	e03a      	b.n	800bb80 <joystickStreamCommand+0x2a0>
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d000      	beq.n	800bb10 <joystickStreamCommand+0x230>
 800bb0e:	e110      	b.n	800bd32 <joystickStreamCommand+0x452>
			if(result == H10R4_OK){
 800bb10:	2d00      	cmp	r5, #0
 800bb12:	d000      	beq.n	800bb16 <joystickStreamCommand+0x236>
 800bb14:	e74f      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			Port = (uint8_t) atol((char*) pcParameterString5);
 800bb16:	4650      	mov	r0, sl
 800bb18:	f007 fd93 	bl	8013642 <atol>
 800bb1c:	0005      	movs	r5, r0
 800bb1e:	b2c7      	uxtb	r7, r0
			Module = (uint8_t) atol((char*) pcParameterString6);
 800bb20:	4648      	mov	r0, r9
 800bb22:	f007 fd8e 	bl	8013642 <atol>
 800bb26:	0003      	movs	r3, r0
 800bb28:	b2c2      	uxtb	r2, r0
 800bb2a:	4691      	mov	r9, r2
				sprintf((char*) pcWriteBuffer, (char*) pcMessageModule, Port,
 800bb2c:	22ff      	movs	r2, #255	; 0xff
 800bb2e:	4013      	ands	r3, r2
 800bb30:	402a      	ands	r2, r5
 800bb32:	495d      	ldr	r1, [pc, #372]	; (800bca8 <joystickStreamCommand+0x3c8>)
 800bb34:	0020      	movs	r0, r4
 800bb36:	f008 fd6b 	bl	8014610 <siprintf>
				Stream_To_Port(Port, Module, Period, Timeout);
 800bb3a:	0033      	movs	r3, r6
 800bb3c:	4642      	mov	r2, r8
 800bb3e:	4649      	mov	r1, r9
 800bb40:	0038      	movs	r0, r7
 800bb42:	f7ff fe05 	bl	800b750 <Stream_To_Port>
				return pdFALSE;
 800bb46:	e75b      	b.n	800ba00 <joystickStreamCommand+0x120>
			if(result == H10R4_OK){
 800bb48:	2d00      	cmp	r5, #0
 800bb4a:	d000      	beq.n	800bb4e <joystickStreamCommand+0x26e>
 800bb4c:	e733      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			joystickVector = atoi((char*) pcParameterString5);
 800bb4e:	4650      	mov	r0, sl
 800bb50:	f007 fd71 	bl	8013636 <atoi>
 800bb54:	1e43      	subs	r3, r0, #1
 800bb56:	4198      	sbcs	r0, r3
 800bb58:	4b54      	ldr	r3, [pc, #336]	; (800bcac <joystickStreamCommand+0x3cc>)
 800bb5a:	7018      	strb	r0, [r3, #0]
			joystickMaxInterval = atoi((char*) pcParameterString6);
 800bb5c:	4648      	mov	r0, r9
 800bb5e:	f007 fd6a 	bl	8013636 <atoi>
 800bb62:	4b53      	ldr	r3, [pc, #332]	; (800bcb0 <joystickStreamCommand+0x3d0>)
 800bb64:	6018      	str	r0, [r3, #0]
			strcpy((char*) pcWriteBuffer, (char*) pcMessageTbuffer);
 800bb66:	2260      	movs	r2, #96	; 0x60
 800bb68:	4952      	ldr	r1, [pc, #328]	; (800bcb4 <joystickStreamCommand+0x3d4>)
 800bb6a:	0020      	movs	r0, r4
 800bb6c:	f007 fdb6 	bl	80136dc <memcpy>
			Stream_To_Buffer(&buf, Period, Timeout);
 800bb70:	0032      	movs	r2, r6
 800bb72:	4641      	mov	r1, r8
 800bb74:	4850      	ldr	r0, [pc, #320]	; (800bcb8 <joystickStreamCommand+0x3d8>)
 800bb76:	f7ff fe2f 	bl	800b7d8 <Stream_To_Buffer>
 800bb7a:	e71c      	b.n	800b9b6 <joystickStreamCommand+0xd6>
				taskYIELD();
 800bb7c:	f004 fb3c 	bl	80101f8 <vPortYield>
			while (startMeasurement != STOP_MEASUREMENT) {
 800bb80:	4b4e      	ldr	r3, [pc, #312]	; (800bcbc <joystickStreamCommand+0x3dc>)
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1f9      	bne.n	800bb7c <joystickStreamCommand+0x29c>
 800bb88:	e715      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			if(result == H10R4_OK){
 800bb8a:	2d00      	cmp	r5, #0
 800bb8c:	d000      	beq.n	800bb90 <joystickStreamCommand+0x2b0>
 800bb8e:	e712      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800bb90:	2225      	movs	r2, #37	; 0x25
 800bb92:	4944      	ldr	r1, [pc, #272]	; (800bca4 <joystickStreamCommand+0x3c4>)
 800bb94:	0020      	movs	r0, r4
 800bb96:	f007 fda1 	bl	80136dc <memcpy>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bb9a:	0020      	movs	r0, r4
 800bb9c:	f7f4 fabc 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800bba0:	b282      	uxth	r2, r0
 800bba2:	4b3a      	ldr	r3, [pc, #232]	; (800bc8c <joystickStreamCommand+0x3ac>)
 800bba4:	7818      	ldrb	r0, [r3, #0]
 800bba6:	2301      	movs	r3, #1
 800bba8:	425b      	negs	r3, r3
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	3333      	adds	r3, #51	; 0x33
 800bbae:	0021      	movs	r1, r4
 800bbb0:	f002 faee 	bl	800e190 <writePxMutex>
			Stream_To_CLI(Period, Timeout);
 800bbb4:	0031      	movs	r1, r6
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	f7ff fd42 	bl	800b640 <Stream_To_CLI>
			while (startMeasurement != STOP_MEASUREMENT) {
 800bbbc:	e001      	b.n	800bbc2 <joystickStreamCommand+0x2e2>
				taskYIELD();
 800bbbe:	f004 fb1b 	bl	80101f8 <vPortYield>
			while (startMeasurement != STOP_MEASUREMENT) {
 800bbc2:	4b3e      	ldr	r3, [pc, #248]	; (800bcbc <joystickStreamCommand+0x3dc>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1f9      	bne.n	800bbbe <joystickStreamCommand+0x2de>
 800bbca:	e6f4      	b.n	800b9b6 <joystickStreamCommand+0xd6>
		switch (option) {
 800bbcc:	4b2c      	ldr	r3, [pc, #176]	; (800bc80 <joystickStreamCommand+0x3a0>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b03      	cmp	r3, #3
 800bbd2:	d100      	bne.n	800bbd6 <joystickStreamCommand+0x2f6>
 800bbd4:	e088      	b.n	800bce8 <joystickStreamCommand+0x408>
 800bbd6:	d81e      	bhi.n	800bc16 <joystickStreamCommand+0x336>
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d02e      	beq.n	800bc3a <joystickStreamCommand+0x35a>
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d000      	beq.n	800bbe2 <joystickStreamCommand+0x302>
 800bbe0:	e0a7      	b.n	800bd32 <joystickStreamCommand+0x452>
			if(result == H10R4_OK){
 800bbe2:	2d00      	cmp	r5, #0
 800bbe4:	d000      	beq.n	800bbe8 <joystickStreamCommand+0x308>
 800bbe6:	e6e6      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800bbe8:	2225      	movs	r2, #37	; 0x25
 800bbea:	492e      	ldr	r1, [pc, #184]	; (800bca4 <joystickStreamCommand+0x3c4>)
 800bbec:	0020      	movs	r0, r4
 800bbee:	f007 fd75 	bl	80136dc <memcpy>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bbf2:	0020      	movs	r0, r4
 800bbf4:	f7f4 fa90 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800bbf8:	b282      	uxth	r2, r0
 800bbfa:	4b24      	ldr	r3, [pc, #144]	; (800bc8c <joystickStreamCommand+0x3ac>)
 800bbfc:	7818      	ldrb	r0, [r3, #0]
 800bbfe:	2301      	movs	r3, #1
 800bc00:	425b      	negs	r3, r3
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	3333      	adds	r3, #51	; 0x33
 800bc06:	0021      	movs	r1, r4
 800bc08:	f002 fac2 	bl	800e190 <writePxMutex>
			Stream_To_CLI(Period, Timeout);
 800bc0c:	0031      	movs	r1, r6
 800bc0e:	4640      	mov	r0, r8
 800bc10:	f7ff fd16 	bl	800b640 <Stream_To_CLI>
			while (startMeasurement != STOP_MEASUREMENT) {
 800bc14:	e063      	b.n	800bcde <joystickStreamCommand+0x3fe>
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	d000      	beq.n	800bc1c <joystickStreamCommand+0x33c>
 800bc1a:	e08a      	b.n	800bd32 <joystickStreamCommand+0x452>
			if(result == H10R4_OK){
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	d000      	beq.n	800bc22 <joystickStreamCommand+0x342>
 800bc20:	e6c9      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageCbuffer);
 800bc22:	225f      	movs	r2, #95	; 0x5f
 800bc24:	4926      	ldr	r1, [pc, #152]	; (800bcc0 <joystickStreamCommand+0x3e0>)
 800bc26:	0020      	movs	r0, r4
 800bc28:	f007 fd58 	bl	80136dc <memcpy>
			Stream_To_Cbuffer(&Cbuf1, &Cbuf2, Period, Timeout);
 800bc2c:	0033      	movs	r3, r6
 800bc2e:	4642      	mov	r2, r8
 800bc30:	4924      	ldr	r1, [pc, #144]	; (800bcc4 <joystickStreamCommand+0x3e4>)
 800bc32:	4825      	ldr	r0, [pc, #148]	; (800bcc8 <joystickStreamCommand+0x3e8>)
 800bc34:	f7ff fe10 	bl	800b858 <Stream_To_Cbuffer>
 800bc38:	e6bd      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			if(result == H10R4_OK){
 800bc3a:	2d00      	cmp	r5, #0
 800bc3c:	d000      	beq.n	800bc40 <joystickStreamCommand+0x360>
 800bc3e:	e6ba      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageCLI);
 800bc40:	2225      	movs	r2, #37	; 0x25
 800bc42:	4918      	ldr	r1, [pc, #96]	; (800bca4 <joystickStreamCommand+0x3c4>)
 800bc44:	0020      	movs	r0, r4
 800bc46:	f007 fd49 	bl	80136dc <memcpy>
					strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bc4a:	0020      	movs	r0, r4
 800bc4c:	f7f4 fa64 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcWriteBuffer,
 800bc50:	b282      	uxth	r2, r0
 800bc52:	4b0e      	ldr	r3, [pc, #56]	; (800bc8c <joystickStreamCommand+0x3ac>)
 800bc54:	7818      	ldrb	r0, [r3, #0]
 800bc56:	2301      	movs	r3, #1
 800bc58:	425b      	negs	r3, r3
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	3333      	adds	r3, #51	; 0x33
 800bc5e:	0021      	movs	r1, r4
 800bc60:	f002 fa96 	bl	800e190 <writePxMutex>
			Stream_To_CLI_R(Period, Timeout);
 800bc64:	0031      	movs	r1, r6
 800bc66:	4640      	mov	r0, r8
 800bc68:	f7ff fd2e 	bl	800b6c8 <Stream_To_CLI_R>
			while (startMeasurement != STOP_MEASUREMENT) {
 800bc6c:	e030      	b.n	800bcd0 <joystickStreamCommand+0x3f0>
 800bc6e:	46c0      	nop			; (mov r8, r8)
 800bc70:	0801ae38 	.word	0x0801ae38
 800bc74:	20006214 	.word	0x20006214
 800bc78:	0801ae40 	.word	0x0801ae40
 800bc7c:	080194a0 	.word	0x080194a0
 800bc80:	20006289 	.word	0x20006289
 800bc84:	20000f2d 	.word	0x20000f2d
 800bc88:	0801afa4 	.word	0x0801afa4
 800bc8c:	200002d7 	.word	0x200002d7
 800bc90:	0801ae3c 	.word	0x0801ae3c
 800bc94:	0801ae44 	.word	0x0801ae44
 800bc98:	0801ae48 	.word	0x0801ae48
 800bc9c:	0801ae50 	.word	0x0801ae50
 800bca0:	0801ae58 	.word	0x0801ae58
 800bca4:	0801aec0 	.word	0x0801aec0
 800bca8:	0801aee8 	.word	0x0801aee8
 800bcac:	20006350 	.word	0x20006350
 800bcb0:	20000f28 	.word	0x20000f28
 800bcb4:	0801ae60 	.word	0x0801ae60
 800bcb8:	20000f20 	.word	0x20000f20
 800bcbc:	20000f2c 	.word	0x20000f2c
 800bcc0:	0801af1c 	.word	0x0801af1c
 800bcc4:	20000f08 	.word	0x20000f08
 800bcc8:	20000f04 	.word	0x20000f04
				taskYIELD();
 800bccc:	f004 fa94 	bl	80101f8 <vPortYield>
			while (startMeasurement != STOP_MEASUREMENT) {
 800bcd0:	4b26      	ldr	r3, [pc, #152]	; (800bd6c <joystickStreamCommand+0x48c>)
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1f9      	bne.n	800bccc <joystickStreamCommand+0x3ec>
 800bcd8:	e66d      	b.n	800b9b6 <joystickStreamCommand+0xd6>
				taskYIELD();
 800bcda:	f004 fa8d 	bl	80101f8 <vPortYield>
			while (startMeasurement != STOP_MEASUREMENT) {
 800bcde:	4b23      	ldr	r3, [pc, #140]	; (800bd6c <joystickStreamCommand+0x48c>)
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1f9      	bne.n	800bcda <joystickStreamCommand+0x3fa>
 800bce6:	e666      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			if(result == H10R4_OK){
 800bce8:	2d00      	cmp	r5, #0
 800bcea:	d000      	beq.n	800bcee <joystickStreamCommand+0x40e>
 800bcec:	e663      	b.n	800b9b6 <joystickStreamCommand+0xd6>
			Port = (uint8_t) atol((char*) pcParameterString5);
 800bcee:	4650      	mov	r0, sl
 800bcf0:	f007 fca7 	bl	8013642 <atol>
 800bcf4:	0007      	movs	r7, r0
 800bcf6:	b2c3      	uxtb	r3, r0
 800bcf8:	469a      	mov	sl, r3
			Module = (uint8_t) atol((char*) pcParameterString6);
 800bcfa:	4648      	mov	r0, r9
 800bcfc:	f007 fca1 	bl	8013642 <atol>
 800bd00:	0003      	movs	r3, r0
 800bd02:	b2c2      	uxtb	r2, r0
 800bd04:	4691      	mov	r9, r2
			if (Module != (uint8_t) BOS_ERR_WrongName) {
 800bd06:	2a64      	cmp	r2, #100	; 0x64
 800bd08:	d00d      	beq.n	800bd26 <joystickStreamCommand+0x446>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageModule, Port,
 800bd0a:	22ff      	movs	r2, #255	; 0xff
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	403a      	ands	r2, r7
 800bd10:	4917      	ldr	r1, [pc, #92]	; (800bd70 <joystickStreamCommand+0x490>)
 800bd12:	0020      	movs	r0, r4
 800bd14:	f008 fc7c 	bl	8014610 <siprintf>
				Stream_To_Port(Port, Module, Period, Timeout);
 800bd18:	0033      	movs	r3, r6
 800bd1a:	4642      	mov	r2, r8
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	4650      	mov	r0, sl
 800bd20:	f7ff fd16 	bl	800b750 <Stream_To_Port>
				return pdFALSE;
 800bd24:	e66c      	b.n	800ba00 <joystickStreamCommand+0x120>
				strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongName);
 800bd26:	2214      	movs	r2, #20
 800bd28:	4912      	ldr	r1, [pc, #72]	; (800bd74 <joystickStreamCommand+0x494>)
 800bd2a:	0020      	movs	r0, r4
 800bd2c:	f007 fcd6 	bl	80136dc <memcpy>
 800bd30:	e641      	b.n	800b9b6 <joystickStreamCommand+0xd6>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800bd32:	2212      	movs	r2, #18
 800bd34:	4910      	ldr	r1, [pc, #64]	; (800bd78 <joystickStreamCommand+0x498>)
 800bd36:	0020      	movs	r0, r4
 800bd38:	f007 fcd0 	bl	80136dc <memcpy>
						strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800bd3c:	0020      	movs	r0, r4
 800bd3e:	f7f4 f9eb 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800bd42:	b282      	uxth	r2, r0
 800bd44:	4b0d      	ldr	r3, [pc, #52]	; (800bd7c <joystickStreamCommand+0x49c>)
 800bd46:	7818      	ldrb	r0, [r3, #0]
 800bd48:	2301      	movs	r3, #1
 800bd4a:	425b      	negs	r3, r3
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	3333      	adds	r3, #51	; 0x33
 800bd50:	0021      	movs	r1, r4
 800bd52:	f002 fa1d 	bl	800e190 <writePxMutex>
 800bd56:	e631      	b.n	800b9bc <joystickStreamCommand+0xdc>
		memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800bd58:	0020      	movs	r0, r4
 800bd5a:	f7f4 f9dd 	bl	8000118 <strlen>
 800bd5e:	0002      	movs	r2, r0
 800bd60:	2100      	movs	r1, #0
 800bd62:	0020      	movs	r0, r4
 800bd64:	f007 fcc3 	bl	80136ee <memset>
 800bd68:	e64a      	b.n	800ba00 <joystickStreamCommand+0x120>
 800bd6a:	46c0      	nop			; (mov r8, r8)
 800bd6c:	20000f2c 	.word	0x20000f2c
 800bd70:	0801aee8 	.word	0x0801aee8
 800bd74:	0801af7c 	.word	0x0801af7c
 800bd78:	0801af90 	.word	0x0801af90
 800bd7c:	200002d7 	.word	0x200002d7

0800bd80 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800bd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd82:	46c6      	mov	lr, r8
 800bd84:	b500      	push	{lr}
 800bd86:	ab06      	add	r3, sp, #24
 800bd88:	781c      	ldrb	r4, [r3, #0]
	switch (code) {
 800bd8a:	4b9f      	ldr	r3, [pc, #636]	; (800c008 <Module_MessagingTask+0x288>)
 800bd8c:	469c      	mov	ip, r3
 800bd8e:	4460      	add	r0, ip
 800bd90:	b283      	uxth	r3, r0
 800bd92:	2b06      	cmp	r3, #6
 800bd94:	d900      	bls.n	800bd98 <Module_MessagingTask+0x18>
 800bd96:	e134      	b.n	800c002 <Module_MessagingTask+0x282>
 800bd98:	0098      	lsls	r0, r3, #2
 800bd9a:	4b9c      	ldr	r3, [pc, #624]	; (800c00c <Module_MessagingTask+0x28c>)
 800bd9c:	581b      	ldr	r3, [r3, r0]
 800bd9e:	469f      	mov	pc, r3
		if (cMessage[port-1][shift] == 0)
 800bda0:	3901      	subs	r1, #1
 800bda2:	00cb      	lsls	r3, r1, #3
 800bda4:	1a59      	subs	r1, r3, r1
 800bda6:	00c9      	lsls	r1, r1, #3
 800bda8:	4b99      	ldr	r3, [pc, #612]	; (800c010 <Module_MessagingTask+0x290>)
 800bdaa:	1859      	adds	r1, r3, r1
 800bdac:	5d08      	ldrb	r0, [r1, r4]
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	d103      	bne.n	800bdba <Module_MessagingTask+0x3a>
			H10R4_STREAM_TYPE = 0;
 800bdb2:	4b98      	ldr	r3, [pc, #608]	; (800c014 <Module_MessagingTask+0x294>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	701a      	strb	r2, [r3, #0]
 800bdb8:	e008      	b.n	800bdcc <Module_MessagingTask+0x4c>
			H10R4_STREAM_TYPE = 1;
 800bdba:	4b96      	ldr	r3, [pc, #600]	; (800c014 <Module_MessagingTask+0x294>)
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	701a      	strb	r2, [r3, #0]
	Module_Status result = H10R4_OK;
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e003      	b.n	800bdcc <Module_MessagingTask+0x4c>
		joystickMode = REQ_STOP;
 800bdc4:	4b94      	ldr	r3, [pc, #592]	; (800c018 <Module_MessagingTask+0x298>)
 800bdc6:	220f      	movs	r2, #15
 800bdc8:	701a      	strb	r2, [r3, #0]
	Module_Status result = H10R4_OK;
 800bdca:	2000      	movs	r0, #0
}
 800bdcc:	bc80      	pop	{r7}
 800bdce:	46b8      	mov	r8, r7
 800bdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		period = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];
 800bdd2:	3901      	subs	r1, #1
 800bdd4:	1ca3      	adds	r3, r4, #2
 800bdd6:	4e8e      	ldr	r6, [pc, #568]	; (800c010 <Module_MessagingTask+0x290>)
 800bdd8:	00cd      	lsls	r5, r1, #3
 800bdda:	1a68      	subs	r0, r5, r1
 800bddc:	00c0      	lsls	r0, r0, #3
 800bdde:	1830      	adds	r0, r6, r0
 800bde0:	5cc2      	ldrb	r2, [r0, r3]
 800bde2:	0612      	lsls	r2, r2, #24
 800bde4:	1ce3      	adds	r3, r4, #3
 800bde6:	5cc3      	ldrb	r3, [r0, r3]
 800bde8:	041b      	lsls	r3, r3, #16
 800bdea:	18d2      	adds	r2, r2, r3
 800bdec:	1d23      	adds	r3, r4, #4
 800bdee:	5cc3      	ldrb	r3, [r0, r3]
 800bdf0:	021b      	lsls	r3, r3, #8
 800bdf2:	18d2      	adds	r2, r2, r3
 800bdf4:	1d63      	adds	r3, r4, #5
 800bdf6:	5cc3      	ldrb	r3, [r0, r3]
 800bdf8:	18d2      	adds	r2, r2, r3
		timeout = ( (uint32_t) cMessage[port-1][6+shift] << 24 ) + ( (uint32_t) cMessage[port-1][7+shift] << 16 ) + ( (uint32_t) cMessage[port-1][8+shift] << 8 ) + cMessage[port-1][9+shift];
 800bdfa:	1da3      	adds	r3, r4, #6
 800bdfc:	5cc3      	ldrb	r3, [r0, r3]
 800bdfe:	061b      	lsls	r3, r3, #24
 800be00:	1de7      	adds	r7, r4, #7
 800be02:	5dc7      	ldrb	r7, [r0, r7]
 800be04:	043f      	lsls	r7, r7, #16
 800be06:	19db      	adds	r3, r3, r7
 800be08:	0027      	movs	r7, r4
 800be0a:	3708      	adds	r7, #8
 800be0c:	5dc7      	ldrb	r7, [r0, r7]
 800be0e:	023f      	lsls	r7, r7, #8
 800be10:	19db      	adds	r3, r3, r7
 800be12:	0027      	movs	r7, r4
 800be14:	3709      	adds	r7, #9
 800be16:	5dc7      	ldrb	r7, [r0, r7]
 800be18:	19db      	adds	r3, r3, r7
		Stream_To_Port(cMessage[port-1][shift], cMessage[port-1][1+shift], period, timeout);
 800be1a:	1c67      	adds	r7, r4, #1
 800be1c:	5dc7      	ldrb	r7, [r0, r7]
 800be1e:	5d00      	ldrb	r0, [r0, r4]
 800be20:	0039      	movs	r1, r7
 800be22:	f7ff fc95 	bl	800b750 <Stream_To_Port>
	Module_Status result = H10R4_OK;
 800be26:	2000      	movs	r0, #0
		break;
 800be28:	e7d0      	b.n	800bdcc <Module_MessagingTask+0x4c>
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800be2a:	3901      	subs	r1, #1
 800be2c:	4e78      	ldr	r6, [pc, #480]	; (800c010 <Module_MessagingTask+0x290>)
 800be2e:	00cd      	lsls	r5, r1, #3
 800be30:	1a6b      	subs	r3, r5, r1
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	18f3      	adds	r3, r6, r3
 800be36:	5d18      	ldrb	r0, [r3, r4]
 800be38:	0600      	lsls	r0, r0, #24
 800be3a:	1c62      	adds	r2, r4, #1
 800be3c:	5c9a      	ldrb	r2, [r3, r2]
 800be3e:	0412      	lsls	r2, r2, #16
 800be40:	1880      	adds	r0, r0, r2
 800be42:	1ca2      	adds	r2, r4, #2
 800be44:	5c9a      	ldrb	r2, [r3, r2]
 800be46:	0212      	lsls	r2, r2, #8
 800be48:	1880      	adds	r0, r0, r2
 800be4a:	1ce2      	adds	r2, r4, #3
 800be4c:	5c9a      	ldrb	r2, [r3, r2]
 800be4e:	1880      	adds	r0, r0, r2
			timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800be50:	1d22      	adds	r2, r4, #4
 800be52:	5c9a      	ldrb	r2, [r3, r2]
 800be54:	0612      	lsls	r2, r2, #24
 800be56:	1d67      	adds	r7, r4, #5
 800be58:	5ddf      	ldrb	r7, [r3, r7]
 800be5a:	043f      	lsls	r7, r7, #16
 800be5c:	19d2      	adds	r2, r2, r7
 800be5e:	1da7      	adds	r7, r4, #6
 800be60:	5ddb      	ldrb	r3, [r3, r7]
 800be62:	021b      	lsls	r3, r3, #8
 800be64:	18d3      	adds	r3, r2, r3
 800be66:	3407      	adds	r4, #7
 800be68:	1a69      	subs	r1, r5, r1
 800be6a:	00c9      	lsls	r1, r1, #3
 800be6c:	1871      	adds	r1, r6, r1
 800be6e:	5d09      	ldrb	r1, [r1, r4]
 800be70:	1859      	adds	r1, r3, r1
			Stream_To_CLI(period, timeout);
 800be72:	f7ff fbe5 	bl	800b640 <Stream_To_CLI>
	Module_Status result = H10R4_OK;
 800be76:	2000      	movs	r0, #0
			break;
 800be78:	e7a8      	b.n	800bdcc <Module_MessagingTask+0x4c>
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800be7a:	3901      	subs	r1, #1
 800be7c:	4e64      	ldr	r6, [pc, #400]	; (800c010 <Module_MessagingTask+0x290>)
 800be7e:	00cd      	lsls	r5, r1, #3
 800be80:	1a6b      	subs	r3, r5, r1
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	18f3      	adds	r3, r6, r3
 800be86:	5d18      	ldrb	r0, [r3, r4]
 800be88:	0600      	lsls	r0, r0, #24
 800be8a:	1c62      	adds	r2, r4, #1
 800be8c:	5c9a      	ldrb	r2, [r3, r2]
 800be8e:	0412      	lsls	r2, r2, #16
 800be90:	1880      	adds	r0, r0, r2
 800be92:	1ca2      	adds	r2, r4, #2
 800be94:	5c9a      	ldrb	r2, [r3, r2]
 800be96:	0212      	lsls	r2, r2, #8
 800be98:	1880      	adds	r0, r0, r2
 800be9a:	1ce2      	adds	r2, r4, #3
 800be9c:	5c9a      	ldrb	r2, [r3, r2]
 800be9e:	1880      	adds	r0, r0, r2
			timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800bea0:	1d22      	adds	r2, r4, #4
 800bea2:	5c9a      	ldrb	r2, [r3, r2]
 800bea4:	0612      	lsls	r2, r2, #24
 800bea6:	1d67      	adds	r7, r4, #5
 800bea8:	5ddf      	ldrb	r7, [r3, r7]
 800beaa:	043f      	lsls	r7, r7, #16
 800beac:	19d2      	adds	r2, r2, r7
 800beae:	1da7      	adds	r7, r4, #6
 800beb0:	5ddb      	ldrb	r3, [r3, r7]
 800beb2:	021b      	lsls	r3, r3, #8
 800beb4:	18d3      	adds	r3, r2, r3
 800beb6:	3407      	adds	r4, #7
 800beb8:	1a69      	subs	r1, r5, r1
 800beba:	00c9      	lsls	r1, r1, #3
 800bebc:	1871      	adds	r1, r6, r1
 800bebe:	5d09      	ldrb	r1, [r1, r4]
 800bec0:	1859      	adds	r1, r3, r1
			Stream_To_CLI_R(period, timeout);
 800bec2:	f7ff fc01 	bl	800b6c8 <Stream_To_CLI_R>
	Module_Status result = H10R4_OK;
 800bec6:	2000      	movs	r0, #0
			break;
 800bec8:	e780      	b.n	800bdcc <Module_MessagingTask+0x4c>
		period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800beca:	1e4b      	subs	r3, r1, #1
 800becc:	4a50      	ldr	r2, [pc, #320]	; (800c010 <Module_MessagingTask+0x290>)
 800bece:	4690      	mov	r8, r2
 800bed0:	00da      	lsls	r2, r3, #3
 800bed2:	1ad0      	subs	r0, r2, r3
 800bed4:	00c0      	lsls	r0, r0, #3
 800bed6:	4440      	add	r0, r8
 800bed8:	5d05      	ldrb	r5, [r0, r4]
 800beda:	062d      	lsls	r5, r5, #24
 800bedc:	1c62      	adds	r2, r4, #1
 800bede:	5c82      	ldrb	r2, [r0, r2]
 800bee0:	0412      	lsls	r2, r2, #16
 800bee2:	18ad      	adds	r5, r5, r2
 800bee4:	1ca2      	adds	r2, r4, #2
 800bee6:	5c82      	ldrb	r2, [r0, r2]
 800bee8:	0212      	lsls	r2, r2, #8
 800beea:	18ad      	adds	r5, r5, r2
 800beec:	1ce2      	adds	r2, r4, #3
 800beee:	5c82      	ldrb	r2, [r0, r2]
 800bef0:	18ad      	adds	r5, r5, r2
		timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800bef2:	1d22      	adds	r2, r4, #4
 800bef4:	5c86      	ldrb	r6, [r0, r2]
 800bef6:	0636      	lsls	r6, r6, #24
 800bef8:	1d62      	adds	r2, r4, #5
 800befa:	5c82      	ldrb	r2, [r0, r2]
 800befc:	0412      	lsls	r2, r2, #16
 800befe:	18b6      	adds	r6, r6, r2
 800bf00:	1da2      	adds	r2, r4, #6
 800bf02:	5c82      	ldrb	r2, [r0, r2]
 800bf04:	0212      	lsls	r2, r2, #8
 800bf06:	18b6      	adds	r6, r6, r2
 800bf08:	1de2      	adds	r2, r4, #7
 800bf0a:	5c82      	ldrb	r2, [r0, r2]
 800bf0c:	18b6      	adds	r6, r6, r2
		buf = ( (uint32_t) cMessage[port-1][8+shift] << 24 ) + ( (uint32_t) cMessage[port-1][9+shift] << 16 ) + ( (uint32_t) cMessage[port-1][10+shift] << 8 ) + cMessage[port-1][11+shift];
 800bf0e:	0022      	movs	r2, r4
 800bf10:	3208      	adds	r2, #8
 800bf12:	5c82      	ldrb	r2, [r0, r2]
 800bf14:	0612      	lsls	r2, r2, #24
 800bf16:	0021      	movs	r1, r4
 800bf18:	3109      	adds	r1, #9
 800bf1a:	5c41      	ldrb	r1, [r0, r1]
 800bf1c:	0409      	lsls	r1, r1, #16
 800bf1e:	1852      	adds	r2, r2, r1
 800bf20:	0021      	movs	r1, r4
 800bf22:	310a      	adds	r1, #10
 800bf24:	5c41      	ldrb	r1, [r0, r1]
 800bf26:	0209      	lsls	r1, r1, #8
 800bf28:	1852      	adds	r2, r2, r1
 800bf2a:	0021      	movs	r1, r4
 800bf2c:	310b      	adds	r1, #11
 800bf2e:	5c41      	ldrb	r1, [r0, r1]
 800bf30:	1852      	adds	r2, r2, r1
 800bf32:	4f3a      	ldr	r7, [pc, #232]	; (800c01c <Module_MessagingTask+0x29c>)
 800bf34:	603a      	str	r2, [r7, #0]
		max = ( (uint32_t) cMessage[port-1][12+shift] << 24 ) + ( (uint32_t) cMessage[port-1][13+shift] << 16 ) + ( (uint32_t) cMessage[port-1][14+shift] << 8 ) + cMessage[port-1][15+shift];
 800bf36:	0022      	movs	r2, r4
 800bf38:	320c      	adds	r2, #12
 800bf3a:	5c81      	ldrb	r1, [r0, r2]
 800bf3c:	0609      	lsls	r1, r1, #24
 800bf3e:	3201      	adds	r2, #1
 800bf40:	5c82      	ldrb	r2, [r0, r2]
 800bf42:	0412      	lsls	r2, r2, #16
 800bf44:	1889      	adds	r1, r1, r2
 800bf46:	0022      	movs	r2, r4
 800bf48:	320e      	adds	r2, #14
 800bf4a:	5c82      	ldrb	r2, [r0, r2]
 800bf4c:	0212      	lsls	r2, r2, #8
 800bf4e:	1889      	adds	r1, r1, r2
 800bf50:	0022      	movs	r2, r4
 800bf52:	320f      	adds	r2, #15
 800bf54:	5c82      	ldrb	r2, [r0, r2]
 800bf56:	1889      	adds	r1, r1, r2
		vector = ((bool) cMessage[port-1][16+shift]);
 800bf58:	3410      	adds	r4, #16
 800bf5a:	5d00      	ldrb	r0, [r0, r4]
 800bf5c:	1e43      	subs	r3, r0, #1
 800bf5e:	4198      	sbcs	r0, r3
 800bf60:	b2c0      	uxtb	r0, r0
		calculateVariantValue(vector, max);
 800bf62:	f7fe fdcf 	bl	800ab04 <calculateVariantValue>
		Stream_To_Buffer(&buf, period, timeout);
 800bf66:	0032      	movs	r2, r6
 800bf68:	0029      	movs	r1, r5
 800bf6a:	0038      	movs	r0, r7
 800bf6c:	f7ff fc34 	bl	800b7d8 <Stream_To_Buffer>
	Module_Status result = H10R4_OK;
 800bf70:	2000      	movs	r0, #0
		break;
 800bf72:	e72b      	b.n	800bdcc <Module_MessagingTask+0x4c>
		period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800bf74:	3901      	subs	r1, #1
 800bf76:	4b26      	ldr	r3, [pc, #152]	; (800c010 <Module_MessagingTask+0x290>)
 800bf78:	4698      	mov	r8, r3
 800bf7a:	00cb      	lsls	r3, r1, #3
 800bf7c:	1a5d      	subs	r5, r3, r1
 800bf7e:	00ed      	lsls	r5, r5, #3
 800bf80:	4445      	add	r5, r8
 800bf82:	5d2e      	ldrb	r6, [r5, r4]
 800bf84:	0636      	lsls	r6, r6, #24
 800bf86:	1c60      	adds	r0, r4, #1
 800bf88:	5c28      	ldrb	r0, [r5, r0]
 800bf8a:	0400      	lsls	r0, r0, #16
 800bf8c:	1836      	adds	r6, r6, r0
 800bf8e:	1ca0      	adds	r0, r4, #2
 800bf90:	5c28      	ldrb	r0, [r5, r0]
 800bf92:	0200      	lsls	r0, r0, #8
 800bf94:	1836      	adds	r6, r6, r0
 800bf96:	1ce0      	adds	r0, r4, #3
 800bf98:	5c28      	ldrb	r0, [r5, r0]
 800bf9a:	1836      	adds	r6, r6, r0
		timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800bf9c:	1d20      	adds	r0, r4, #4
 800bf9e:	5c2f      	ldrb	r7, [r5, r0]
 800bfa0:	063f      	lsls	r7, r7, #24
 800bfa2:	1d60      	adds	r0, r4, #5
 800bfa4:	5c28      	ldrb	r0, [r5, r0]
 800bfa6:	0400      	lsls	r0, r0, #16
 800bfa8:	183f      	adds	r7, r7, r0
 800bfaa:	1da0      	adds	r0, r4, #6
 800bfac:	5c28      	ldrb	r0, [r5, r0]
 800bfae:	0200      	lsls	r0, r0, #8
 800bfb0:	183f      	adds	r7, r7, r0
 800bfb2:	1de0      	adds	r0, r4, #7
 800bfb4:	5c28      	ldrb	r0, [r5, r0]
 800bfb6:	183f      	adds	r7, r7, r0
		Cbuf1 = ( (uint32_t) cMessage[port-1][12+shift] << 24 ) + ( (uint32_t) cMessage[port-1][13+shift] << 16 ) + ( (uint32_t) cMessage[port-1][14+shift] << 8 ) + cMessage[port-1][15+shift];
 800bfb8:	0020      	movs	r0, r4
 800bfba:	300c      	adds	r0, #12
 800bfbc:	5c28      	ldrb	r0, [r5, r0]
 800bfbe:	0600      	lsls	r0, r0, #24
 800bfc0:	220d      	movs	r2, #13
 800bfc2:	4694      	mov	ip, r2
 800bfc4:	44a4      	add	ip, r4
 800bfc6:	4662      	mov	r2, ip
 800bfc8:	5caa      	ldrb	r2, [r5, r2]
 800bfca:	0412      	lsls	r2, r2, #16
 800bfcc:	4694      	mov	ip, r2
 800bfce:	4460      	add	r0, ip
 800bfd0:	220e      	movs	r2, #14
 800bfd2:	4694      	mov	ip, r2
 800bfd4:	44a4      	add	ip, r4
 800bfd6:	4662      	mov	r2, ip
 800bfd8:	5cad      	ldrb	r5, [r5, r2]
 800bfda:	022d      	lsls	r5, r5, #8
 800bfdc:	1940      	adds	r0, r0, r5
 800bfde:	340f      	adds	r4, #15
 800bfe0:	1a59      	subs	r1, r3, r1
 800bfe2:	00c9      	lsls	r1, r1, #3
 800bfe4:	4441      	add	r1, r8
 800bfe6:	5d0b      	ldrb	r3, [r1, r4]
 800bfe8:	18c0      	adds	r0, r0, r3
 800bfea:	4c0d      	ldr	r4, [pc, #52]	; (800c020 <Module_MessagingTask+0x2a0>)
 800bfec:	f7f4 fbfe 	bl	80007ec <__aeabi_ui2f>
 800bff0:	6020      	str	r0, [r4, #0]
		Stream_To_Cbuffer(&Cbuf1, &Cbuf1, period, timeout);
 800bff2:	003b      	movs	r3, r7
 800bff4:	0032      	movs	r2, r6
 800bff6:	0021      	movs	r1, r4
 800bff8:	0020      	movs	r0, r4
 800bffa:	f7ff fc2d 	bl	800b858 <Stream_To_Cbuffer>
	Module_Status result = H10R4_OK;
 800bffe:	2000      	movs	r0, #0
		break;
 800c000:	e6e4      	b.n	800bdcc <Module_MessagingTask+0x4c>
	Module_Status result = H10R4_OK;
 800c002:	2001      	movs	r0, #1
 800c004:	e6e2      	b.n	800bdcc <Module_MessagingTask+0x4c>
 800c006:	46c0      	nop			; (mov r8, r8)
 800c008:	fffffab0 	.word	0xfffffab0
 800c00c:	0801afc8 	.word	0x0801afc8
 800c010:	20000568 	.word	0x20000568
 800c014:	20000f0c 	.word	0x20000f0c
 800c018:	200062d8 	.word	0x200062d8
 800c01c:	20000f20 	.word	0x20000f20
 800c020:	20000f04 	.word	0x20000f04

0800c024 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;


/* ADC init function */
void MX_ADC_Init(void)
{
 800c024:	b510      	push	{r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800c026:	480c      	ldr	r0, [pc, #48]	; (800c058 <MX_ADC_Init+0x34>)
 800c028:	4b0c      	ldr	r3, [pc, #48]	; (800c05c <MX_ADC_Init+0x38>)
 800c02a:	6003      	str	r3, [r0, #0]
    hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800c02c:	2300      	movs	r3, #0
 800c02e:	6043      	str	r3, [r0, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c030:	6083      	str	r3, [r0, #8]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c032:	60c3      	str	r3, [r0, #12]
    hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c034:	2201      	movs	r2, #1
 800c036:	6102      	str	r2, [r0, #16]
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c038:	2104      	movs	r1, #4
 800c03a:	6141      	str	r1, [r0, #20]
    hadc.Init.LowPowerAutoWait = DISABLE;
 800c03c:	6183      	str	r3, [r0, #24]
    hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c03e:	61c3      	str	r3, [r0, #28]
    hadc.Init.ContinuousConvMode = ENABLE;
 800c040:	6202      	str	r2, [r0, #32]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 800c042:	6243      	str	r3, [r0, #36]	; 0x24
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c044:	21c2      	movs	r1, #194	; 0xc2
 800c046:	31ff      	adds	r1, #255	; 0xff
 800c048:	6281      	str	r1, [r0, #40]	; 0x28
    hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c04a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc.Init.DMAContinuousRequests = DISABLE;
 800c04c:	6303      	str	r3, [r0, #48]	; 0x30
    hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c04e:	6342      	str	r2, [r0, #52]	; 0x34
    if (HAL_ADC_Init(&hadc) != HAL_OK)
 800c050:	f004 fb3c 	bl	80106cc <HAL_ADC_Init>
    {

    }

}
 800c054:	bd10      	pop	{r4, pc}
 800c056:	46c0      	nop			; (mov r8, r8)
 800c058:	200064b8 	.word	0x200064b8
 800c05c:	40012400 	.word	0x40012400

0800c060 <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800c060:	b510      	push	{r4, lr}
 800c062:	b088      	sub	sp, #32
 800c064:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c066:	2214      	movs	r2, #20
 800c068:	2100      	movs	r1, #0
 800c06a:	a803      	add	r0, sp, #12
 800c06c:	f007 fb3f 	bl	80136ee <memset>
  if(adcHandle->Instance==ADC1)
 800c070:	6822      	ldr	r2, [r4, #0]
 800c072:	4b11      	ldr	r3, [pc, #68]	; (800c0b8 <HAL_ADC_MspInit+0x58>)
 800c074:	429a      	cmp	r2, r3
 800c076:	d001      	beq.n	800c07c <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800c078:	b008      	add	sp, #32
 800c07a:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c07c:	4b0f      	ldr	r3, [pc, #60]	; (800c0bc <HAL_ADC_MspInit+0x5c>)
 800c07e:	6999      	ldr	r1, [r3, #24]
 800c080:	2080      	movs	r0, #128	; 0x80
 800c082:	0080      	lsls	r0, r0, #2
 800c084:	4301      	orrs	r1, r0
 800c086:	6199      	str	r1, [r3, #24]
 800c088:	699a      	ldr	r2, [r3, #24]
 800c08a:	4002      	ands	r2, r0
 800c08c:	9201      	str	r2, [sp, #4]
 800c08e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c090:	695a      	ldr	r2, [r3, #20]
 800c092:	2180      	movs	r1, #128	; 0x80
 800c094:	02c9      	lsls	r1, r1, #11
 800c096:	430a      	orrs	r2, r1
 800c098:	615a      	str	r2, [r3, #20]
 800c09a:	695b      	ldr	r3, [r3, #20]
 800c09c:	400b      	ands	r3, r1
 800c09e:	9302      	str	r3, [sp, #8]
 800c0a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c0a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0ac:	a903      	add	r1, sp, #12
 800c0ae:	4804      	ldr	r0, [pc, #16]	; (800c0c0 <HAL_ADC_MspInit+0x60>)
 800c0b0:	f005 fc9e 	bl	80119f0 <HAL_GPIO_Init>
}
 800c0b4:	e7e0      	b.n	800c078 <HAL_ADC_MspInit+0x18>
 800c0b6:	46c0      	nop			; (mov r8, r8)
 800c0b8:	40012400 	.word	0x40012400
 800c0bc:	40021000 	.word	0x40021000
 800c0c0:	48000400 	.word	0x48000400

0800c0c4 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c0c4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c0c6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c0cc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c0ce:	2280      	movs	r2, #128	; 0x80
 800c0d0:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c0d2:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c0d4:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c0d6:	3320      	adds	r3, #32
 800c0d8:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c0da:	2380      	movs	r3, #128	; 0x80
 800c0dc:	019b      	lsls	r3, r3, #6
 800c0de:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c0e0:	f004 feaa 	bl	8010e38 <HAL_DMA_Init>
}
 800c0e4:	bd10      	pop	{r4, pc}

0800c0e6 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c0e6:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c0e8:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c0ea:	2310      	movs	r3, #16
 800c0ec:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c0f2:	2280      	movs	r2, #128	; 0x80
 800c0f4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c0f6:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c0f8:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c0fa:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c0fc:	2380      	movs	r3, #128	; 0x80
 800c0fe:	019b      	lsls	r3, r3, #6
 800c100:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c102:	f004 fe99 	bl	8010e38 <HAL_DMA_Init>
}
 800c106:	bd10      	pop	{r4, pc}

0800c108 <DMA_Init>:
{
 800c108:	b510      	push	{r4, lr}
 800c10a:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800c10c:	4b1d      	ldr	r3, [pc, #116]	; (800c184 <DMA_Init+0x7c>)
 800c10e:	6959      	ldr	r1, [r3, #20]
 800c110:	2201      	movs	r2, #1
 800c112:	4311      	orrs	r1, r2
 800c114:	6159      	str	r1, [r3, #20]
 800c116:	6959      	ldr	r1, [r3, #20]
 800c118:	400a      	ands	r2, r1
 800c11a:	9200      	str	r2, [sp, #0]
 800c11c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800c11e:	6959      	ldr	r1, [r3, #20]
 800c120:	2202      	movs	r2, #2
 800c122:	4311      	orrs	r1, r2
 800c124:	6159      	str	r1, [r3, #20]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	401a      	ands	r2, r3
 800c12a:	9201      	str	r2, [sp, #4]
 800c12c:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800c12e:	4c16      	ldr	r4, [pc, #88]	; (800c188 <DMA_Init+0x80>)
 800c130:	4916      	ldr	r1, [pc, #88]	; (800c18c <DMA_Init+0x84>)
 800c132:	0020      	movs	r0, r4
 800c134:	f7ff ffc6 	bl	800c0c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800c138:	0020      	movs	r0, r4
 800c13a:	3038      	adds	r0, #56	; 0x38
 800c13c:	4914      	ldr	r1, [pc, #80]	; (800c190 <DMA_Init+0x88>)
 800c13e:	f7ff ffc1 	bl	800c0c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800c142:	0020      	movs	r0, r4
 800c144:	3070      	adds	r0, #112	; 0x70
 800c146:	4913      	ldr	r1, [pc, #76]	; (800c194 <DMA_Init+0x8c>)
 800c148:	f7ff ffbc 	bl	800c0c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800c14c:	0020      	movs	r0, r4
 800c14e:	30a8      	adds	r0, #168	; 0xa8
 800c150:	4911      	ldr	r1, [pc, #68]	; (800c198 <DMA_Init+0x90>)
 800c152:	f7ff ffb7 	bl	800c0c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800c156:	0020      	movs	r0, r4
 800c158:	30e0      	adds	r0, #224	; 0xe0
 800c15a:	4910      	ldr	r1, [pc, #64]	; (800c19c <DMA_Init+0x94>)
 800c15c:	f7ff ffb2 	bl	800c0c4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800c160:	4c0f      	ldr	r4, [pc, #60]	; (800c1a0 <DMA_Init+0x98>)
 800c162:	4910      	ldr	r1, [pc, #64]	; (800c1a4 <DMA_Init+0x9c>)
 800c164:	0020      	movs	r0, r4
 800c166:	f7ff ffbe 	bl	800c0e6 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800c16a:	0020      	movs	r0, r4
 800c16c:	3038      	adds	r0, #56	; 0x38
 800c16e:	490e      	ldr	r1, [pc, #56]	; (800c1a8 <DMA_Init+0xa0>)
 800c170:	f7ff ffb9 	bl	800c0e6 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800c174:	0020      	movs	r0, r4
 800c176:	3070      	adds	r0, #112	; 0x70
 800c178:	490c      	ldr	r1, [pc, #48]	; (800c1ac <DMA_Init+0xa4>)
 800c17a:	f7ff ffb4 	bl	800c0e6 <DMA_MSG_TX_CH_Init>
}
 800c17e:	b002      	add	sp, #8
 800c180:	bd10      	pop	{r4, pc}
 800c182:	46c0      	nop			; (mov r8, r8)
 800c184:	40021000 	.word	0x40021000
 800c188:	20000f3c 	.word	0x20000f3c
 800c18c:	40020008 	.word	0x40020008
 800c190:	40020030 	.word	0x40020030
 800c194:	40020058 	.word	0x40020058
 800c198:	4002006c 	.word	0x4002006c
 800c19c:	4002041c 	.word	0x4002041c
 800c1a0:	2000108c 	.word	0x2000108c
 800c1a4:	4002001c 	.word	0x4002001c
 800c1a8:	40020044 	.word	0x40020044
 800c1ac:	40020080 	.word	0x40020080

0800c1b0 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c1b0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c1b2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c1b8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800c1ba:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c1bc:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c1be:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c1c0:	3320      	adds	r3, #32
 800c1c2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800c1c4:	2380      	movs	r3, #128	; 0x80
 800c1c6:	015b      	lsls	r3, r3, #5
 800c1c8:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c1ca:	f004 fe35 	bl	8010e38 <HAL_DMA_Init>
}
 800c1ce:	bd10      	pop	{r4, pc}

0800c1d0 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800c1d0:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c1d2:	6803      	ldr	r3, [r0, #0]
 800c1d4:	4a21      	ldr	r2, [pc, #132]	; (800c25c <SetupDMAInterrupts+0x8c>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d037      	beq.n	800c24a <SetupDMAInterrupts+0x7a>
 800c1da:	d90e      	bls.n	800c1fa <SetupDMAInterrupts+0x2a>
 800c1dc:	4a20      	ldr	r2, [pc, #128]	; (800c260 <SetupDMAInterrupts+0x90>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d033      	beq.n	800c24a <SetupDMAInterrupts+0x7a>
 800c1e2:	d919      	bls.n	800c218 <SetupDMAInterrupts+0x48>
 800c1e4:	4a1f      	ldr	r2, [pc, #124]	; (800c264 <SetupDMAInterrupts+0x94>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d024      	beq.n	800c234 <SetupDMAInterrupts+0x64>
 800c1ea:	d92b      	bls.n	800c244 <SetupDMAInterrupts+0x74>
 800c1ec:	4a1e      	ldr	r2, [pc, #120]	; (800c268 <SetupDMAInterrupts+0x98>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d020      	beq.n	800c234 <SetupDMAInterrupts+0x64>
 800c1f2:	4a1e      	ldr	r2, [pc, #120]	; (800c26c <SetupDMAInterrupts+0x9c>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d01d      	beq.n	800c234 <SetupDMAInterrupts+0x64>
 800c1f8:	e00d      	b.n	800c216 <SetupDMAInterrupts+0x46>
 800c1fa:	4a1d      	ldr	r2, [pc, #116]	; (800c270 <SetupDMAInterrupts+0xa0>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d107      	bne.n	800c210 <SetupDMAInterrupts+0x40>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800c200:	2200      	movs	r2, #0
 800c202:	2009      	movs	r0, #9
 800c204:	f004 fc76 	bl	8010af4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800c208:	2009      	movs	r0, #9
 800c20a:	f004 fca3 	bl	8010b54 <HAL_NVIC_EnableIRQ>
			break;
 800c20e:	e002      	b.n	800c216 <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800c210:	4a18      	ldr	r2, [pc, #96]	; (800c274 <SetupDMAInterrupts+0xa4>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d019      	beq.n	800c24a <SetupDMAInterrupts+0x7a>
			break;
		
		default:
			break;
	}			
}
 800c216:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c218:	4a17      	ldr	r2, [pc, #92]	; (800c278 <SetupDMAInterrupts+0xa8>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d00a      	beq.n	800c234 <SetupDMAInterrupts+0x64>
 800c21e:	d903      	bls.n	800c228 <SetupDMAInterrupts+0x58>
 800c220:	4a16      	ldr	r2, [pc, #88]	; (800c27c <SetupDMAInterrupts+0xac>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d006      	beq.n	800c234 <SetupDMAInterrupts+0x64>
 800c226:	e7f6      	b.n	800c216 <SetupDMAInterrupts+0x46>
 800c228:	4a15      	ldr	r2, [pc, #84]	; (800c280 <SetupDMAInterrupts+0xb0>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d002      	beq.n	800c234 <SetupDMAInterrupts+0x64>
 800c22e:	4a15      	ldr	r2, [pc, #84]	; (800c284 <SetupDMAInterrupts+0xb4>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d1f0      	bne.n	800c216 <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800c234:	2200      	movs	r2, #0
 800c236:	200b      	movs	r0, #11
 800c238:	f004 fc5c 	bl	8010af4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c23c:	200b      	movs	r0, #11
 800c23e:	f004 fc89 	bl	8010b54 <HAL_NVIC_EnableIRQ>
}
 800c242:	e7e8      	b.n	800c216 <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800c244:	4a10      	ldr	r2, [pc, #64]	; (800c288 <SetupDMAInterrupts+0xb8>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d1e5      	bne.n	800c216 <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800c24a:	2200      	movs	r2, #0
 800c24c:	200a      	movs	r0, #10
 800c24e:	f004 fc51 	bl	8010af4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c252:	200a      	movs	r0, #10
 800c254:	f004 fc7e 	bl	8010b54 <HAL_NVIC_EnableIRQ>
			break;
 800c258:	e7dd      	b.n	800c216 <SetupDMAInterrupts+0x46>
 800c25a:	46c0      	nop			; (mov r8, r8)
 800c25c:	40020030 	.word	0x40020030
 800c260:	40020408 	.word	0x40020408
 800c264:	40020430 	.word	0x40020430
 800c268:	40020444 	.word	0x40020444
 800c26c:	40020458 	.word	0x40020458
 800c270:	40020008 	.word	0x40020008
 800c274:	4002001c 	.word	0x4002001c
 800c278:	4002006c 	.word	0x4002006c
 800c27c:	40020080 	.word	0x40020080
 800c280:	40020044 	.word	0x40020044
 800c284:	40020058 	.word	0x40020058
 800c288:	4002041c 	.word	0x4002041c

0800c28c <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800c28c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c28e:	6803      	ldr	r3, [r0, #0]
 800c290:	4a1b      	ldr	r2, [pc, #108]	; (800c300 <UnSetupDMAInterrupts+0x74>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d02f      	beq.n	800c2f6 <UnSetupDMAInterrupts+0x6a>
 800c296:	d90e      	bls.n	800c2b6 <UnSetupDMAInterrupts+0x2a>
 800c298:	4a1a      	ldr	r2, [pc, #104]	; (800c304 <UnSetupDMAInterrupts+0x78>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d02b      	beq.n	800c2f6 <UnSetupDMAInterrupts+0x6a>
 800c29e:	d915      	bls.n	800c2cc <UnSetupDMAInterrupts+0x40>
 800c2a0:	4a19      	ldr	r2, [pc, #100]	; (800c308 <UnSetupDMAInterrupts+0x7c>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d020      	beq.n	800c2e8 <UnSetupDMAInterrupts+0x5c>
 800c2a6:	d923      	bls.n	800c2f0 <UnSetupDMAInterrupts+0x64>
 800c2a8:	4a18      	ldr	r2, [pc, #96]	; (800c30c <UnSetupDMAInterrupts+0x80>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d01c      	beq.n	800c2e8 <UnSetupDMAInterrupts+0x5c>
 800c2ae:	4a18      	ldr	r2, [pc, #96]	; (800c310 <UnSetupDMAInterrupts+0x84>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d019      	beq.n	800c2e8 <UnSetupDMAInterrupts+0x5c>
 800c2b4:	e009      	b.n	800c2ca <UnSetupDMAInterrupts+0x3e>
 800c2b6:	4a17      	ldr	r2, [pc, #92]	; (800c314 <UnSetupDMAInterrupts+0x88>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d103      	bne.n	800c2c4 <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800c2bc:	2009      	movs	r0, #9
 800c2be:	f004 fc53 	bl	8010b68 <HAL_NVIC_DisableIRQ>
			break;
 800c2c2:	e002      	b.n	800c2ca <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800c2c4:	4a14      	ldr	r2, [pc, #80]	; (800c318 <UnSetupDMAInterrupts+0x8c>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d015      	beq.n	800c2f6 <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800c2ca:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c2cc:	4a13      	ldr	r2, [pc, #76]	; (800c31c <UnSetupDMAInterrupts+0x90>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d00a      	beq.n	800c2e8 <UnSetupDMAInterrupts+0x5c>
 800c2d2:	d903      	bls.n	800c2dc <UnSetupDMAInterrupts+0x50>
 800c2d4:	4a12      	ldr	r2, [pc, #72]	; (800c320 <UnSetupDMAInterrupts+0x94>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d006      	beq.n	800c2e8 <UnSetupDMAInterrupts+0x5c>
 800c2da:	e7f6      	b.n	800c2ca <UnSetupDMAInterrupts+0x3e>
 800c2dc:	4a11      	ldr	r2, [pc, #68]	; (800c324 <UnSetupDMAInterrupts+0x98>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d002      	beq.n	800c2e8 <UnSetupDMAInterrupts+0x5c>
 800c2e2:	4a11      	ldr	r2, [pc, #68]	; (800c328 <UnSetupDMAInterrupts+0x9c>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d1f0      	bne.n	800c2ca <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c2e8:	200b      	movs	r0, #11
 800c2ea:	f004 fc3d 	bl	8010b68 <HAL_NVIC_DisableIRQ>
}
 800c2ee:	e7ec      	b.n	800c2ca <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800c2f0:	4a0e      	ldr	r2, [pc, #56]	; (800c32c <UnSetupDMAInterrupts+0xa0>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d1e9      	bne.n	800c2ca <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c2f6:	200a      	movs	r0, #10
 800c2f8:	f004 fc36 	bl	8010b68 <HAL_NVIC_DisableIRQ>
			break;
 800c2fc:	e7e5      	b.n	800c2ca <UnSetupDMAInterrupts+0x3e>
 800c2fe:	46c0      	nop			; (mov r8, r8)
 800c300:	40020030 	.word	0x40020030
 800c304:	40020408 	.word	0x40020408
 800c308:	40020430 	.word	0x40020430
 800c30c:	40020444 	.word	0x40020444
 800c310:	40020458 	.word	0x40020458
 800c314:	40020008 	.word	0x40020008
 800c318:	4002001c 	.word	0x4002001c
 800c31c:	4002006c 	.word	0x4002006c
 800c320:	40020080 	.word	0x40020080
 800c324:	40020044 	.word	0x40020044
 800c328:	40020058 	.word	0x40020058
 800c32c:	4002041c 	.word	0x4002041c

0800c330 <DMA_MSG_TX_UnSetup>:
{	
 800c330:	b510      	push	{r4, lr}
 800c332:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800c334:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c336:	f7ff ffa9 	bl	800c28c <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800c33a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c33c:	2300      	movs	r3, #0
 800c33e:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800c340:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c342:	bd10      	pop	{r4, pc}

0800c344 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c344:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c346:	6803      	ldr	r3, [r0, #0]
 800c348:	4acc      	ldr	r2, [pc, #816]	; (800c67c <RemapAndLinkDMAtoUARTRx+0x338>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d100      	bne.n	800c350 <RemapAndLinkDMAtoUARTRx+0xc>
 800c34e:	e0ca      	b.n	800c4e6 <RemapAndLinkDMAtoUARTRx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c350:	4aca      	ldr	r2, [pc, #808]	; (800c67c <RemapAndLinkDMAtoUARTRx+0x338>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d100      	bne.n	800c358 <RemapAndLinkDMAtoUARTRx+0x14>
 800c356:	e0d8      	b.n	800c50a <RemapAndLinkDMAtoUARTRx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c358:	4ac8      	ldr	r2, [pc, #800]	; (800c67c <RemapAndLinkDMAtoUARTRx+0x338>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d100      	bne.n	800c360 <RemapAndLinkDMAtoUARTRx+0x1c>
 800c35e:	e0e5      	b.n	800c52c <RemapAndLinkDMAtoUARTRx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c360:	4ac6      	ldr	r2, [pc, #792]	; (800c67c <RemapAndLinkDMAtoUARTRx+0x338>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d100      	bne.n	800c368 <RemapAndLinkDMAtoUARTRx+0x24>
 800c366:	e0f2      	b.n	800c54e <RemapAndLinkDMAtoUARTRx+0x20a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c368:	4ac4      	ldr	r2, [pc, #784]	; (800c67c <RemapAndLinkDMAtoUARTRx+0x338>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d100      	bne.n	800c370 <RemapAndLinkDMAtoUARTRx+0x2c>
 800c36e:	e0ff      	b.n	800c570 <RemapAndLinkDMAtoUARTRx+0x22c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c370:	4ac2      	ldr	r2, [pc, #776]	; (800c67c <RemapAndLinkDMAtoUARTRx+0x338>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d100      	bne.n	800c378 <RemapAndLinkDMAtoUARTRx+0x34>
 800c376:	e10b      	b.n	800c590 <RemapAndLinkDMAtoUARTRx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c378:	4ac1      	ldr	r2, [pc, #772]	; (800c680 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d100      	bne.n	800c380 <RemapAndLinkDMAtoUARTRx+0x3c>
 800c37e:	e118      	b.n	800c5b2 <RemapAndLinkDMAtoUARTRx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c380:	4abf      	ldr	r2, [pc, #764]	; (800c680 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d100      	bne.n	800c388 <RemapAndLinkDMAtoUARTRx+0x44>
 800c386:	e124      	b.n	800c5d2 <RemapAndLinkDMAtoUARTRx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c388:	4abd      	ldr	r2, [pc, #756]	; (800c680 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d100      	bne.n	800c390 <RemapAndLinkDMAtoUARTRx+0x4c>
 800c38e:	e131      	b.n	800c5f4 <RemapAndLinkDMAtoUARTRx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c390:	4abb      	ldr	r2, [pc, #748]	; (800c680 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d100      	bne.n	800c398 <RemapAndLinkDMAtoUARTRx+0x54>
 800c396:	e13e      	b.n	800c616 <RemapAndLinkDMAtoUARTRx+0x2d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c398:	4ab9      	ldr	r2, [pc, #740]	; (800c680 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d100      	bne.n	800c3a0 <RemapAndLinkDMAtoUARTRx+0x5c>
 800c39e:	e14b      	b.n	800c638 <RemapAndLinkDMAtoUARTRx+0x2f4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c3a0:	4ab7      	ldr	r2, [pc, #732]	; (800c680 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d100      	bne.n	800c3a8 <RemapAndLinkDMAtoUARTRx+0x64>
 800c3a6:	e157      	b.n	800c658 <RemapAndLinkDMAtoUARTRx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c3a8:	4ab6      	ldr	r2, [pc, #728]	; (800c684 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d100      	bne.n	800c3b0 <RemapAndLinkDMAtoUARTRx+0x6c>
 800c3ae:	e18b      	b.n	800c6c8 <RemapAndLinkDMAtoUARTRx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c3b0:	4ab4      	ldr	r2, [pc, #720]	; (800c684 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d100      	bne.n	800c3b8 <RemapAndLinkDMAtoUARTRx+0x74>
 800c3b6:	e197      	b.n	800c6e8 <RemapAndLinkDMAtoUARTRx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c3b8:	4ab2      	ldr	r2, [pc, #712]	; (800c684 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d100      	bne.n	800c3c0 <RemapAndLinkDMAtoUARTRx+0x7c>
 800c3be:	e1a4      	b.n	800c70a <RemapAndLinkDMAtoUARTRx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c3c0:	4ab0      	ldr	r2, [pc, #704]	; (800c684 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d100      	bne.n	800c3c8 <RemapAndLinkDMAtoUARTRx+0x84>
 800c3c6:	e1b1      	b.n	800c72c <RemapAndLinkDMAtoUARTRx+0x3e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c3c8:	4aae      	ldr	r2, [pc, #696]	; (800c684 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d100      	bne.n	800c3d0 <RemapAndLinkDMAtoUARTRx+0x8c>
 800c3ce:	e1be      	b.n	800c74e <RemapAndLinkDMAtoUARTRx+0x40a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c3d0:	4aac      	ldr	r2, [pc, #688]	; (800c684 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d100      	bne.n	800c3d8 <RemapAndLinkDMAtoUARTRx+0x94>
 800c3d6:	e1ca      	b.n	800c76e <RemapAndLinkDMAtoUARTRx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c3d8:	4aab      	ldr	r2, [pc, #684]	; (800c688 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d100      	bne.n	800c3e0 <RemapAndLinkDMAtoUARTRx+0x9c>
 800c3de:	e1d7      	b.n	800c790 <RemapAndLinkDMAtoUARTRx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c3e0:	4aa9      	ldr	r2, [pc, #676]	; (800c688 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d100      	bne.n	800c3e8 <RemapAndLinkDMAtoUARTRx+0xa4>
 800c3e6:	e1e3      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c3e8:	4aa7      	ldr	r2, [pc, #668]	; (800c688 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d100      	bne.n	800c3f0 <RemapAndLinkDMAtoUARTRx+0xac>
 800c3ee:	e1f0      	b.n	800c7d2 <RemapAndLinkDMAtoUARTRx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c3f0:	4aa5      	ldr	r2, [pc, #660]	; (800c688 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d100      	bne.n	800c3f8 <RemapAndLinkDMAtoUARTRx+0xb4>
 800c3f6:	e1fd      	b.n	800c7f4 <RemapAndLinkDMAtoUARTRx+0x4b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c3f8:	4aa3      	ldr	r2, [pc, #652]	; (800c688 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d100      	bne.n	800c400 <RemapAndLinkDMAtoUARTRx+0xbc>
 800c3fe:	e20a      	b.n	800c816 <RemapAndLinkDMAtoUARTRx+0x4d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c400:	4aa1      	ldr	r2, [pc, #644]	; (800c688 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d100      	bne.n	800c408 <RemapAndLinkDMAtoUARTRx+0xc4>
 800c406:	e216      	b.n	800c836 <RemapAndLinkDMAtoUARTRx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c408:	4aa0      	ldr	r2, [pc, #640]	; (800c68c <RemapAndLinkDMAtoUARTRx+0x348>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d100      	bne.n	800c410 <RemapAndLinkDMAtoUARTRx+0xcc>
 800c40e:	e223      	b.n	800c858 <RemapAndLinkDMAtoUARTRx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c410:	4a9e      	ldr	r2, [pc, #632]	; (800c68c <RemapAndLinkDMAtoUARTRx+0x348>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d100      	bne.n	800c418 <RemapAndLinkDMAtoUARTRx+0xd4>
 800c416:	e22f      	b.n	800c878 <RemapAndLinkDMAtoUARTRx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c418:	4a9c      	ldr	r2, [pc, #624]	; (800c68c <RemapAndLinkDMAtoUARTRx+0x348>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d100      	bne.n	800c420 <RemapAndLinkDMAtoUARTRx+0xdc>
 800c41e:	e23c      	b.n	800c89a <RemapAndLinkDMAtoUARTRx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c420:	4a9a      	ldr	r2, [pc, #616]	; (800c68c <RemapAndLinkDMAtoUARTRx+0x348>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d100      	bne.n	800c428 <RemapAndLinkDMAtoUARTRx+0xe4>
 800c426:	e249      	b.n	800c8bc <RemapAndLinkDMAtoUARTRx+0x578>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c428:	4a98      	ldr	r2, [pc, #608]	; (800c68c <RemapAndLinkDMAtoUARTRx+0x348>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d100      	bne.n	800c430 <RemapAndLinkDMAtoUARTRx+0xec>
 800c42e:	e256      	b.n	800c8de <RemapAndLinkDMAtoUARTRx+0x59a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c430:	4a96      	ldr	r2, [pc, #600]	; (800c68c <RemapAndLinkDMAtoUARTRx+0x348>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d100      	bne.n	800c438 <RemapAndLinkDMAtoUARTRx+0xf4>
 800c436:	e262      	b.n	800c8fe <RemapAndLinkDMAtoUARTRx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c438:	4a95      	ldr	r2, [pc, #596]	; (800c690 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d100      	bne.n	800c440 <RemapAndLinkDMAtoUARTRx+0xfc>
 800c43e:	e26f      	b.n	800c920 <RemapAndLinkDMAtoUARTRx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c440:	4a93      	ldr	r2, [pc, #588]	; (800c690 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d100      	bne.n	800c448 <RemapAndLinkDMAtoUARTRx+0x104>
 800c446:	e27b      	b.n	800c940 <RemapAndLinkDMAtoUARTRx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c448:	4a91      	ldr	r2, [pc, #580]	; (800c690 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d100      	bne.n	800c450 <RemapAndLinkDMAtoUARTRx+0x10c>
 800c44e:	e288      	b.n	800c962 <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c450:	4a8f      	ldr	r2, [pc, #572]	; (800c690 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d100      	bne.n	800c458 <RemapAndLinkDMAtoUARTRx+0x114>
 800c456:	e295      	b.n	800c984 <RemapAndLinkDMAtoUARTRx+0x640>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c458:	4a8d      	ldr	r2, [pc, #564]	; (800c690 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d100      	bne.n	800c460 <RemapAndLinkDMAtoUARTRx+0x11c>
 800c45e:	e2a2      	b.n	800c9a6 <RemapAndLinkDMAtoUARTRx+0x662>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c460:	4a8b      	ldr	r2, [pc, #556]	; (800c690 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d100      	bne.n	800c468 <RemapAndLinkDMAtoUARTRx+0x124>
 800c466:	e2ae      	b.n	800c9c6 <RemapAndLinkDMAtoUARTRx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c468:	4a8a      	ldr	r2, [pc, #552]	; (800c694 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d100      	bne.n	800c470 <RemapAndLinkDMAtoUARTRx+0x12c>
 800c46e:	e2bb      	b.n	800c9e8 <RemapAndLinkDMAtoUARTRx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c470:	4a88      	ldr	r2, [pc, #544]	; (800c694 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d100      	bne.n	800c478 <RemapAndLinkDMAtoUARTRx+0x134>
 800c476:	e2c7      	b.n	800ca08 <RemapAndLinkDMAtoUARTRx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c478:	4a86      	ldr	r2, [pc, #536]	; (800c694 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d100      	bne.n	800c480 <RemapAndLinkDMAtoUARTRx+0x13c>
 800c47e:	e2d4      	b.n	800ca2a <RemapAndLinkDMAtoUARTRx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c480:	4a84      	ldr	r2, [pc, #528]	; (800c694 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d100      	bne.n	800c488 <RemapAndLinkDMAtoUARTRx+0x144>
 800c486:	e2f7      	b.n	800ca78 <RemapAndLinkDMAtoUARTRx+0x734>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c488:	4a82      	ldr	r2, [pc, #520]	; (800c694 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d100      	bne.n	800c490 <RemapAndLinkDMAtoUARTRx+0x14c>
 800c48e:	e304      	b.n	800ca9a <RemapAndLinkDMAtoUARTRx+0x756>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c490:	4a80      	ldr	r2, [pc, #512]	; (800c694 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d100      	bne.n	800c498 <RemapAndLinkDMAtoUARTRx+0x154>
 800c496:	e310      	b.n	800caba <RemapAndLinkDMAtoUARTRx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c498:	4a7f      	ldr	r2, [pc, #508]	; (800c698 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d100      	bne.n	800c4a0 <RemapAndLinkDMAtoUARTRx+0x15c>
 800c49e:	e31d      	b.n	800cadc <RemapAndLinkDMAtoUARTRx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c4a0:	4a7d      	ldr	r2, [pc, #500]	; (800c698 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d100      	bne.n	800c4a8 <RemapAndLinkDMAtoUARTRx+0x164>
 800c4a6:	e328      	b.n	800cafa <RemapAndLinkDMAtoUARTRx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c4a8:	4a7b      	ldr	r2, [pc, #492]	; (800c698 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d100      	bne.n	800c4b0 <RemapAndLinkDMAtoUARTRx+0x16c>
 800c4ae:	e335      	b.n	800cb1c <RemapAndLinkDMAtoUARTRx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c4b0:	4a79      	ldr	r2, [pc, #484]	; (800c698 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d100      	bne.n	800c4b8 <RemapAndLinkDMAtoUARTRx+0x174>
 800c4b6:	e342      	b.n	800cb3e <RemapAndLinkDMAtoUARTRx+0x7fa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c4b8:	4a77      	ldr	r2, [pc, #476]	; (800c698 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d100      	bne.n	800c4c0 <RemapAndLinkDMAtoUARTRx+0x17c>
 800c4be:	e34f      	b.n	800cb60 <RemapAndLinkDMAtoUARTRx+0x81c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c4c0:	4a75      	ldr	r2, [pc, #468]	; (800c698 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d11e      	bne.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800c4c6:	4b75      	ldr	r3, [pc, #468]	; (800c69c <RemapAndLinkDMAtoUARTRx+0x358>)
 800c4c8:	680a      	ldr	r2, [r1, #0]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d11a      	bne.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c4ce:	4a74      	ldr	r2, [pc, #464]	; (800c6a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c4d0:	23a8      	movs	r3, #168	; 0xa8
 800c4d2:	58d4      	ldr	r4, [r2, r3]
 800c4d4:	4d73      	ldr	r5, [pc, #460]	; (800c6a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c4d6:	402c      	ands	r4, r5
 800c4d8:	50d4      	str	r4, [r2, r3]
 800c4da:	58d5      	ldr	r5, [r2, r3]
 800c4dc:	24f0      	movs	r4, #240	; 0xf0
 800c4de:	0124      	lsls	r4, r4, #4
 800c4e0:	432c      	orrs	r4, r5
 800c4e2:	50d4      	str	r4, [r2, r3]
 800c4e4:	e00e      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c4e6:	4a70      	ldr	r2, [pc, #448]	; (800c6a8 <RemapAndLinkDMAtoUARTRx+0x364>)
 800c4e8:	680c      	ldr	r4, [r1, #0]
 800c4ea:	4294      	cmp	r4, r2
 800c4ec:	d000      	beq.n	800c4f0 <RemapAndLinkDMAtoUARTRx+0x1ac>
 800c4ee:	e72f      	b.n	800c350 <RemapAndLinkDMAtoUARTRx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c4f0:	4a6e      	ldr	r2, [pc, #440]	; (800c6ac <RemapAndLinkDMAtoUARTRx+0x368>)
 800c4f2:	23a8      	movs	r3, #168	; 0xa8
 800c4f4:	58d4      	ldr	r4, [r2, r3]
 800c4f6:	250f      	movs	r5, #15
 800c4f8:	43ac      	bics	r4, r5
 800c4fa:	50d4      	str	r4, [r2, r3]
 800c4fc:	58d4      	ldr	r4, [r2, r3]
 800c4fe:	3d07      	subs	r5, #7
 800c500:	432c      	orrs	r4, r5
 800c502:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c504:	6641      	str	r1, [r0, #100]	; 0x64
 800c506:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c508:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c50a:	4a69      	ldr	r2, [pc, #420]	; (800c6b0 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800c50c:	680c      	ldr	r4, [r1, #0]
 800c50e:	4294      	cmp	r4, r2
 800c510:	d000      	beq.n	800c514 <RemapAndLinkDMAtoUARTRx+0x1d0>
 800c512:	e721      	b.n	800c358 <RemapAndLinkDMAtoUARTRx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c514:	4a65      	ldr	r2, [pc, #404]	; (800c6ac <RemapAndLinkDMAtoUARTRx+0x368>)
 800c516:	23a8      	movs	r3, #168	; 0xa8
 800c518:	58d4      	ldr	r4, [r2, r3]
 800c51a:	4d62      	ldr	r5, [pc, #392]	; (800c6a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c51c:	402c      	ands	r4, r5
 800c51e:	50d4      	str	r4, [r2, r3]
 800c520:	58d5      	ldr	r5, [r2, r3]
 800c522:	2480      	movs	r4, #128	; 0x80
 800c524:	0124      	lsls	r4, r4, #4
 800c526:	432c      	orrs	r4, r5
 800c528:	50d4      	str	r4, [r2, r3]
 800c52a:	e7eb      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c52c:	4a61      	ldr	r2, [pc, #388]	; (800c6b4 <RemapAndLinkDMAtoUARTRx+0x370>)
 800c52e:	680c      	ldr	r4, [r1, #0]
 800c530:	4294      	cmp	r4, r2
 800c532:	d000      	beq.n	800c536 <RemapAndLinkDMAtoUARTRx+0x1f2>
 800c534:	e714      	b.n	800c360 <RemapAndLinkDMAtoUARTRx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c536:	4a5d      	ldr	r2, [pc, #372]	; (800c6ac <RemapAndLinkDMAtoUARTRx+0x368>)
 800c538:	23a8      	movs	r3, #168	; 0xa8
 800c53a:	58d4      	ldr	r4, [r2, r3]
 800c53c:	4d5e      	ldr	r5, [pc, #376]	; (800c6b8 <RemapAndLinkDMAtoUARTRx+0x374>)
 800c53e:	402c      	ands	r4, r5
 800c540:	50d4      	str	r4, [r2, r3]
 800c542:	58d5      	ldr	r5, [r2, r3]
 800c544:	2480      	movs	r4, #128	; 0x80
 800c546:	0324      	lsls	r4, r4, #12
 800c548:	432c      	orrs	r4, r5
 800c54a:	50d4      	str	r4, [r2, r3]
 800c54c:	e7da      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c54e:	4a5b      	ldr	r2, [pc, #364]	; (800c6bc <RemapAndLinkDMAtoUARTRx+0x378>)
 800c550:	680c      	ldr	r4, [r1, #0]
 800c552:	4294      	cmp	r4, r2
 800c554:	d000      	beq.n	800c558 <RemapAndLinkDMAtoUARTRx+0x214>
 800c556:	e707      	b.n	800c368 <RemapAndLinkDMAtoUARTRx+0x24>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c558:	4a54      	ldr	r2, [pc, #336]	; (800c6ac <RemapAndLinkDMAtoUARTRx+0x368>)
 800c55a:	23a8      	movs	r3, #168	; 0xa8
 800c55c:	58d4      	ldr	r4, [r2, r3]
 800c55e:	4d58      	ldr	r5, [pc, #352]	; (800c6c0 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800c560:	402c      	ands	r4, r5
 800c562:	50d4      	str	r4, [r2, r3]
 800c564:	58d5      	ldr	r5, [r2, r3]
 800c566:	2480      	movs	r4, #128	; 0x80
 800c568:	0424      	lsls	r4, r4, #16
 800c56a:	432c      	orrs	r4, r5
 800c56c:	50d4      	str	r4, [r2, r3]
 800c56e:	e7c9      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c570:	4a54      	ldr	r2, [pc, #336]	; (800c6c4 <RemapAndLinkDMAtoUARTRx+0x380>)
 800c572:	680c      	ldr	r4, [r1, #0]
 800c574:	4294      	cmp	r4, r2
 800c576:	d000      	beq.n	800c57a <RemapAndLinkDMAtoUARTRx+0x236>
 800c578:	e6fa      	b.n	800c370 <RemapAndLinkDMAtoUARTRx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c57a:	4a49      	ldr	r2, [pc, #292]	; (800c6a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c57c:	23a8      	movs	r3, #168	; 0xa8
 800c57e:	58d4      	ldr	r4, [r2, r3]
 800c580:	25f0      	movs	r5, #240	; 0xf0
 800c582:	43ac      	bics	r4, r5
 800c584:	50d4      	str	r4, [r2, r3]
 800c586:	58d4      	ldr	r4, [r2, r3]
 800c588:	3d70      	subs	r5, #112	; 0x70
 800c58a:	432c      	orrs	r4, r5
 800c58c:	50d4      	str	r4, [r2, r3]
 800c58e:	e7b9      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c590:	4a42      	ldr	r2, [pc, #264]	; (800c69c <RemapAndLinkDMAtoUARTRx+0x358>)
 800c592:	680c      	ldr	r4, [r1, #0]
 800c594:	4294      	cmp	r4, r2
 800c596:	d000      	beq.n	800c59a <RemapAndLinkDMAtoUARTRx+0x256>
 800c598:	e6ee      	b.n	800c378 <RemapAndLinkDMAtoUARTRx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c59a:	4a41      	ldr	r2, [pc, #260]	; (800c6a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c59c:	23a8      	movs	r3, #168	; 0xa8
 800c59e:	58d4      	ldr	r4, [r2, r3]
 800c5a0:	4d40      	ldr	r5, [pc, #256]	; (800c6a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c5a2:	402c      	ands	r4, r5
 800c5a4:	50d4      	str	r4, [r2, r3]
 800c5a6:	58d5      	ldr	r5, [r2, r3]
 800c5a8:	2480      	movs	r4, #128	; 0x80
 800c5aa:	0124      	lsls	r4, r4, #4
 800c5ac:	432c      	orrs	r4, r5
 800c5ae:	50d4      	str	r4, [r2, r3]
 800c5b0:	e7a8      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c5b2:	4a3d      	ldr	r2, [pc, #244]	; (800c6a8 <RemapAndLinkDMAtoUARTRx+0x364>)
 800c5b4:	680c      	ldr	r4, [r1, #0]
 800c5b6:	4294      	cmp	r4, r2
 800c5b8:	d000      	beq.n	800c5bc <RemapAndLinkDMAtoUARTRx+0x278>
 800c5ba:	e6e1      	b.n	800c380 <RemapAndLinkDMAtoUARTRx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800c5bc:	4a3b      	ldr	r2, [pc, #236]	; (800c6ac <RemapAndLinkDMAtoUARTRx+0x368>)
 800c5be:	23a8      	movs	r3, #168	; 0xa8
 800c5c0:	58d4      	ldr	r4, [r2, r3]
 800c5c2:	250f      	movs	r5, #15
 800c5c4:	43ac      	bics	r4, r5
 800c5c6:	50d4      	str	r4, [r2, r3]
 800c5c8:	58d4      	ldr	r4, [r2, r3]
 800c5ca:	3d06      	subs	r5, #6
 800c5cc:	432c      	orrs	r4, r5
 800c5ce:	50d4      	str	r4, [r2, r3]
 800c5d0:	e798      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c5d2:	4a37      	ldr	r2, [pc, #220]	; (800c6b0 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800c5d4:	680c      	ldr	r4, [r1, #0]
 800c5d6:	4294      	cmp	r4, r2
 800c5d8:	d000      	beq.n	800c5dc <RemapAndLinkDMAtoUARTRx+0x298>
 800c5da:	e6d5      	b.n	800c388 <RemapAndLinkDMAtoUARTRx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800c5dc:	4a33      	ldr	r2, [pc, #204]	; (800c6ac <RemapAndLinkDMAtoUARTRx+0x368>)
 800c5de:	23a8      	movs	r3, #168	; 0xa8
 800c5e0:	58d4      	ldr	r4, [r2, r3]
 800c5e2:	4d30      	ldr	r5, [pc, #192]	; (800c6a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c5e4:	402c      	ands	r4, r5
 800c5e6:	50d4      	str	r4, [r2, r3]
 800c5e8:	58d5      	ldr	r5, [r2, r3]
 800c5ea:	2490      	movs	r4, #144	; 0x90
 800c5ec:	0124      	lsls	r4, r4, #4
 800c5ee:	432c      	orrs	r4, r5
 800c5f0:	50d4      	str	r4, [r2, r3]
 800c5f2:	e787      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c5f4:	4a2f      	ldr	r2, [pc, #188]	; (800c6b4 <RemapAndLinkDMAtoUARTRx+0x370>)
 800c5f6:	680c      	ldr	r4, [r1, #0]
 800c5f8:	4294      	cmp	r4, r2
 800c5fa:	d000      	beq.n	800c5fe <RemapAndLinkDMAtoUARTRx+0x2ba>
 800c5fc:	e6c8      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800c5fe:	4a2b      	ldr	r2, [pc, #172]	; (800c6ac <RemapAndLinkDMAtoUARTRx+0x368>)
 800c600:	23a8      	movs	r3, #168	; 0xa8
 800c602:	58d4      	ldr	r4, [r2, r3]
 800c604:	4d2c      	ldr	r5, [pc, #176]	; (800c6b8 <RemapAndLinkDMAtoUARTRx+0x374>)
 800c606:	402c      	ands	r4, r5
 800c608:	50d4      	str	r4, [r2, r3]
 800c60a:	58d5      	ldr	r5, [r2, r3]
 800c60c:	2490      	movs	r4, #144	; 0x90
 800c60e:	0324      	lsls	r4, r4, #12
 800c610:	432c      	orrs	r4, r5
 800c612:	50d4      	str	r4, [r2, r3]
 800c614:	e776      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c616:	4a29      	ldr	r2, [pc, #164]	; (800c6bc <RemapAndLinkDMAtoUARTRx+0x378>)
 800c618:	680c      	ldr	r4, [r1, #0]
 800c61a:	4294      	cmp	r4, r2
 800c61c:	d000      	beq.n	800c620 <RemapAndLinkDMAtoUARTRx+0x2dc>
 800c61e:	e6bb      	b.n	800c398 <RemapAndLinkDMAtoUARTRx+0x54>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800c620:	4a22      	ldr	r2, [pc, #136]	; (800c6ac <RemapAndLinkDMAtoUARTRx+0x368>)
 800c622:	23a8      	movs	r3, #168	; 0xa8
 800c624:	58d4      	ldr	r4, [r2, r3]
 800c626:	4d26      	ldr	r5, [pc, #152]	; (800c6c0 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800c628:	402c      	ands	r4, r5
 800c62a:	50d4      	str	r4, [r2, r3]
 800c62c:	58d5      	ldr	r5, [r2, r3]
 800c62e:	2490      	movs	r4, #144	; 0x90
 800c630:	0424      	lsls	r4, r4, #16
 800c632:	432c      	orrs	r4, r5
 800c634:	50d4      	str	r4, [r2, r3]
 800c636:	e765      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c638:	4a22      	ldr	r2, [pc, #136]	; (800c6c4 <RemapAndLinkDMAtoUARTRx+0x380>)
 800c63a:	680c      	ldr	r4, [r1, #0]
 800c63c:	4294      	cmp	r4, r2
 800c63e:	d000      	beq.n	800c642 <RemapAndLinkDMAtoUARTRx+0x2fe>
 800c640:	e6ae      	b.n	800c3a0 <RemapAndLinkDMAtoUARTRx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800c642:	4a17      	ldr	r2, [pc, #92]	; (800c6a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c644:	23a8      	movs	r3, #168	; 0xa8
 800c646:	58d4      	ldr	r4, [r2, r3]
 800c648:	25f0      	movs	r5, #240	; 0xf0
 800c64a:	43ac      	bics	r4, r5
 800c64c:	50d4      	str	r4, [r2, r3]
 800c64e:	58d4      	ldr	r4, [r2, r3]
 800c650:	3d60      	subs	r5, #96	; 0x60
 800c652:	432c      	orrs	r4, r5
 800c654:	50d4      	str	r4, [r2, r3]
 800c656:	e755      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c658:	4a10      	ldr	r2, [pc, #64]	; (800c69c <RemapAndLinkDMAtoUARTRx+0x358>)
 800c65a:	680c      	ldr	r4, [r1, #0]
 800c65c:	4294      	cmp	r4, r2
 800c65e:	d000      	beq.n	800c662 <RemapAndLinkDMAtoUARTRx+0x31e>
 800c660:	e6a2      	b.n	800c3a8 <RemapAndLinkDMAtoUARTRx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c662:	4a0f      	ldr	r2, [pc, #60]	; (800c6a0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c664:	23a8      	movs	r3, #168	; 0xa8
 800c666:	58d4      	ldr	r4, [r2, r3]
 800c668:	4d0e      	ldr	r5, [pc, #56]	; (800c6a4 <RemapAndLinkDMAtoUARTRx+0x360>)
 800c66a:	402c      	ands	r4, r5
 800c66c:	50d4      	str	r4, [r2, r3]
 800c66e:	58d5      	ldr	r5, [r2, r3]
 800c670:	2490      	movs	r4, #144	; 0x90
 800c672:	0124      	lsls	r4, r4, #4
 800c674:	432c      	orrs	r4, r5
 800c676:	50d4      	str	r4, [r2, r3]
 800c678:	e744      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800c67a:	46c0      	nop			; (mov r8, r8)
 800c67c:	40013800 	.word	0x40013800
 800c680:	40004400 	.word	0x40004400
 800c684:	40004800 	.word	0x40004800
 800c688:	40004c00 	.word	0x40004c00
 800c68c:	40005000 	.word	0x40005000
 800c690:	40011400 	.word	0x40011400
 800c694:	40011800 	.word	0x40011800
 800c698:	40011c00 	.word	0x40011c00
 800c69c:	40020430 	.word	0x40020430
 800c6a0:	40020400 	.word	0x40020400
 800c6a4:	fffff0ff 	.word	0xfffff0ff
 800c6a8:	40020008 	.word	0x40020008
 800c6ac:	40020000 	.word	0x40020000
 800c6b0:	40020030 	.word	0x40020030
 800c6b4:	40020058 	.word	0x40020058
 800c6b8:	fff0ffff 	.word	0xfff0ffff
 800c6bc:	4002006c 	.word	0x4002006c
 800c6c0:	ff0fffff 	.word	0xff0fffff
 800c6c4:	4002041c 	.word	0x4002041c
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c6c8:	4ae0      	ldr	r2, [pc, #896]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x708>)
 800c6ca:	680c      	ldr	r4, [r1, #0]
 800c6cc:	4294      	cmp	r4, r2
 800c6ce:	d000      	beq.n	800c6d2 <RemapAndLinkDMAtoUARTRx+0x38e>
 800c6d0:	e66e      	b.n	800c3b0 <RemapAndLinkDMAtoUARTRx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800c6d2:	4adf      	ldr	r2, [pc, #892]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c6d4:	23a8      	movs	r3, #168	; 0xa8
 800c6d6:	58d4      	ldr	r4, [r2, r3]
 800c6d8:	250f      	movs	r5, #15
 800c6da:	43ac      	bics	r4, r5
 800c6dc:	50d4      	str	r4, [r2, r3]
 800c6de:	58d4      	ldr	r4, [r2, r3]
 800c6e0:	3d05      	subs	r5, #5
 800c6e2:	432c      	orrs	r4, r5
 800c6e4:	50d4      	str	r4, [r2, r3]
 800c6e6:	e70d      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c6e8:	4ada      	ldr	r2, [pc, #872]	; (800ca54 <RemapAndLinkDMAtoUARTRx+0x710>)
 800c6ea:	680c      	ldr	r4, [r1, #0]
 800c6ec:	4294      	cmp	r4, r2
 800c6ee:	d000      	beq.n	800c6f2 <RemapAndLinkDMAtoUARTRx+0x3ae>
 800c6f0:	e662      	b.n	800c3b8 <RemapAndLinkDMAtoUARTRx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c6f2:	4ad7      	ldr	r2, [pc, #860]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c6f4:	23a8      	movs	r3, #168	; 0xa8
 800c6f6:	58d4      	ldr	r4, [r2, r3]
 800c6f8:	4dd7      	ldr	r5, [pc, #860]	; (800ca58 <RemapAndLinkDMAtoUARTRx+0x714>)
 800c6fa:	402c      	ands	r4, r5
 800c6fc:	50d4      	str	r4, [r2, r3]
 800c6fe:	58d5      	ldr	r5, [r2, r3]
 800c700:	24a0      	movs	r4, #160	; 0xa0
 800c702:	0124      	lsls	r4, r4, #4
 800c704:	432c      	orrs	r4, r5
 800c706:	50d4      	str	r4, [r2, r3]
 800c708:	e6fc      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c70a:	4ad4      	ldr	r2, [pc, #848]	; (800ca5c <RemapAndLinkDMAtoUARTRx+0x718>)
 800c70c:	680c      	ldr	r4, [r1, #0]
 800c70e:	4294      	cmp	r4, r2
 800c710:	d000      	beq.n	800c714 <RemapAndLinkDMAtoUARTRx+0x3d0>
 800c712:	e655      	b.n	800c3c0 <RemapAndLinkDMAtoUARTRx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c714:	4ace      	ldr	r2, [pc, #824]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c716:	23a8      	movs	r3, #168	; 0xa8
 800c718:	58d4      	ldr	r4, [r2, r3]
 800c71a:	4dd1      	ldr	r5, [pc, #836]	; (800ca60 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800c71c:	402c      	ands	r4, r5
 800c71e:	50d4      	str	r4, [r2, r3]
 800c720:	58d5      	ldr	r5, [r2, r3]
 800c722:	24a0      	movs	r4, #160	; 0xa0
 800c724:	0324      	lsls	r4, r4, #12
 800c726:	432c      	orrs	r4, r5
 800c728:	50d4      	str	r4, [r2, r3]
 800c72a:	e6eb      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c72c:	4acd      	ldr	r2, [pc, #820]	; (800ca64 <RemapAndLinkDMAtoUARTRx+0x720>)
 800c72e:	680c      	ldr	r4, [r1, #0]
 800c730:	4294      	cmp	r4, r2
 800c732:	d000      	beq.n	800c736 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800c734:	e648      	b.n	800c3c8 <RemapAndLinkDMAtoUARTRx+0x84>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c736:	4ac6      	ldr	r2, [pc, #792]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c738:	23a8      	movs	r3, #168	; 0xa8
 800c73a:	58d4      	ldr	r4, [r2, r3]
 800c73c:	4dca      	ldr	r5, [pc, #808]	; (800ca68 <RemapAndLinkDMAtoUARTRx+0x724>)
 800c73e:	402c      	ands	r4, r5
 800c740:	50d4      	str	r4, [r2, r3]
 800c742:	58d5      	ldr	r5, [r2, r3]
 800c744:	24a0      	movs	r4, #160	; 0xa0
 800c746:	0424      	lsls	r4, r4, #16
 800c748:	432c      	orrs	r4, r5
 800c74a:	50d4      	str	r4, [r2, r3]
 800c74c:	e6da      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c74e:	4ac7      	ldr	r2, [pc, #796]	; (800ca6c <RemapAndLinkDMAtoUARTRx+0x728>)
 800c750:	680c      	ldr	r4, [r1, #0]
 800c752:	4294      	cmp	r4, r2
 800c754:	d000      	beq.n	800c758 <RemapAndLinkDMAtoUARTRx+0x414>
 800c756:	e63b      	b.n	800c3d0 <RemapAndLinkDMAtoUARTRx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c758:	4ac5      	ldr	r2, [pc, #788]	; (800ca70 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c75a:	23a8      	movs	r3, #168	; 0xa8
 800c75c:	58d4      	ldr	r4, [r2, r3]
 800c75e:	25f0      	movs	r5, #240	; 0xf0
 800c760:	43ac      	bics	r4, r5
 800c762:	50d4      	str	r4, [r2, r3]
 800c764:	58d4      	ldr	r4, [r2, r3]
 800c766:	3d50      	subs	r5, #80	; 0x50
 800c768:	432c      	orrs	r4, r5
 800c76a:	50d4      	str	r4, [r2, r3]
 800c76c:	e6ca      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c76e:	4ac1      	ldr	r2, [pc, #772]	; (800ca74 <RemapAndLinkDMAtoUARTRx+0x730>)
 800c770:	680c      	ldr	r4, [r1, #0]
 800c772:	4294      	cmp	r4, r2
 800c774:	d000      	beq.n	800c778 <RemapAndLinkDMAtoUARTRx+0x434>
 800c776:	e62f      	b.n	800c3d8 <RemapAndLinkDMAtoUARTRx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c778:	4abd      	ldr	r2, [pc, #756]	; (800ca70 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c77a:	23a8      	movs	r3, #168	; 0xa8
 800c77c:	58d4      	ldr	r4, [r2, r3]
 800c77e:	4db6      	ldr	r5, [pc, #728]	; (800ca58 <RemapAndLinkDMAtoUARTRx+0x714>)
 800c780:	402c      	ands	r4, r5
 800c782:	50d4      	str	r4, [r2, r3]
 800c784:	58d5      	ldr	r5, [r2, r3]
 800c786:	24a0      	movs	r4, #160	; 0xa0
 800c788:	0124      	lsls	r4, r4, #4
 800c78a:	432c      	orrs	r4, r5
 800c78c:	50d4      	str	r4, [r2, r3]
 800c78e:	e6b9      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c790:	4aae      	ldr	r2, [pc, #696]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x708>)
 800c792:	680c      	ldr	r4, [r1, #0]
 800c794:	4294      	cmp	r4, r2
 800c796:	d000      	beq.n	800c79a <RemapAndLinkDMAtoUARTRx+0x456>
 800c798:	e622      	b.n	800c3e0 <RemapAndLinkDMAtoUARTRx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c79a:	4aad      	ldr	r2, [pc, #692]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c79c:	23a8      	movs	r3, #168	; 0xa8
 800c79e:	58d4      	ldr	r4, [r2, r3]
 800c7a0:	250f      	movs	r5, #15
 800c7a2:	43ac      	bics	r4, r5
 800c7a4:	50d4      	str	r4, [r2, r3]
 800c7a6:	58d4      	ldr	r4, [r2, r3]
 800c7a8:	3d04      	subs	r5, #4
 800c7aa:	432c      	orrs	r4, r5
 800c7ac:	50d4      	str	r4, [r2, r3]
 800c7ae:	e6a9      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c7b0:	4aa8      	ldr	r2, [pc, #672]	; (800ca54 <RemapAndLinkDMAtoUARTRx+0x710>)
 800c7b2:	680c      	ldr	r4, [r1, #0]
 800c7b4:	4294      	cmp	r4, r2
 800c7b6:	d000      	beq.n	800c7ba <RemapAndLinkDMAtoUARTRx+0x476>
 800c7b8:	e616      	b.n	800c3e8 <RemapAndLinkDMAtoUARTRx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c7ba:	4aa5      	ldr	r2, [pc, #660]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c7bc:	23a8      	movs	r3, #168	; 0xa8
 800c7be:	58d4      	ldr	r4, [r2, r3]
 800c7c0:	4da5      	ldr	r5, [pc, #660]	; (800ca58 <RemapAndLinkDMAtoUARTRx+0x714>)
 800c7c2:	402c      	ands	r4, r5
 800c7c4:	50d4      	str	r4, [r2, r3]
 800c7c6:	58d5      	ldr	r5, [r2, r3]
 800c7c8:	24b0      	movs	r4, #176	; 0xb0
 800c7ca:	0124      	lsls	r4, r4, #4
 800c7cc:	432c      	orrs	r4, r5
 800c7ce:	50d4      	str	r4, [r2, r3]
 800c7d0:	e698      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c7d2:	4aa2      	ldr	r2, [pc, #648]	; (800ca5c <RemapAndLinkDMAtoUARTRx+0x718>)
 800c7d4:	680c      	ldr	r4, [r1, #0]
 800c7d6:	4294      	cmp	r4, r2
 800c7d8:	d000      	beq.n	800c7dc <RemapAndLinkDMAtoUARTRx+0x498>
 800c7da:	e609      	b.n	800c3f0 <RemapAndLinkDMAtoUARTRx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c7dc:	4a9c      	ldr	r2, [pc, #624]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c7de:	23a8      	movs	r3, #168	; 0xa8
 800c7e0:	58d4      	ldr	r4, [r2, r3]
 800c7e2:	4d9f      	ldr	r5, [pc, #636]	; (800ca60 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800c7e4:	402c      	ands	r4, r5
 800c7e6:	50d4      	str	r4, [r2, r3]
 800c7e8:	58d5      	ldr	r5, [r2, r3]
 800c7ea:	24b0      	movs	r4, #176	; 0xb0
 800c7ec:	0324      	lsls	r4, r4, #12
 800c7ee:	432c      	orrs	r4, r5
 800c7f0:	50d4      	str	r4, [r2, r3]
 800c7f2:	e687      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c7f4:	4a9b      	ldr	r2, [pc, #620]	; (800ca64 <RemapAndLinkDMAtoUARTRx+0x720>)
 800c7f6:	680c      	ldr	r4, [r1, #0]
 800c7f8:	4294      	cmp	r4, r2
 800c7fa:	d000      	beq.n	800c7fe <RemapAndLinkDMAtoUARTRx+0x4ba>
 800c7fc:	e5fc      	b.n	800c3f8 <RemapAndLinkDMAtoUARTRx+0xb4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c7fe:	4a94      	ldr	r2, [pc, #592]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c800:	23a8      	movs	r3, #168	; 0xa8
 800c802:	58d4      	ldr	r4, [r2, r3]
 800c804:	4d98      	ldr	r5, [pc, #608]	; (800ca68 <RemapAndLinkDMAtoUARTRx+0x724>)
 800c806:	402c      	ands	r4, r5
 800c808:	50d4      	str	r4, [r2, r3]
 800c80a:	58d5      	ldr	r5, [r2, r3]
 800c80c:	24b0      	movs	r4, #176	; 0xb0
 800c80e:	0424      	lsls	r4, r4, #16
 800c810:	432c      	orrs	r4, r5
 800c812:	50d4      	str	r4, [r2, r3]
 800c814:	e676      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c816:	4a95      	ldr	r2, [pc, #596]	; (800ca6c <RemapAndLinkDMAtoUARTRx+0x728>)
 800c818:	680c      	ldr	r4, [r1, #0]
 800c81a:	4294      	cmp	r4, r2
 800c81c:	d000      	beq.n	800c820 <RemapAndLinkDMAtoUARTRx+0x4dc>
 800c81e:	e5ef      	b.n	800c400 <RemapAndLinkDMAtoUARTRx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800c820:	4a93      	ldr	r2, [pc, #588]	; (800ca70 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c822:	23a8      	movs	r3, #168	; 0xa8
 800c824:	58d4      	ldr	r4, [r2, r3]
 800c826:	25f0      	movs	r5, #240	; 0xf0
 800c828:	43ac      	bics	r4, r5
 800c82a:	50d4      	str	r4, [r2, r3]
 800c82c:	58d4      	ldr	r4, [r2, r3]
 800c82e:	3d40      	subs	r5, #64	; 0x40
 800c830:	432c      	orrs	r4, r5
 800c832:	50d4      	str	r4, [r2, r3]
 800c834:	e666      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c836:	4a8f      	ldr	r2, [pc, #572]	; (800ca74 <RemapAndLinkDMAtoUARTRx+0x730>)
 800c838:	680c      	ldr	r4, [r1, #0]
 800c83a:	4294      	cmp	r4, r2
 800c83c:	d000      	beq.n	800c840 <RemapAndLinkDMAtoUARTRx+0x4fc>
 800c83e:	e5e3      	b.n	800c408 <RemapAndLinkDMAtoUARTRx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c840:	4a8b      	ldr	r2, [pc, #556]	; (800ca70 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c842:	23a8      	movs	r3, #168	; 0xa8
 800c844:	58d4      	ldr	r4, [r2, r3]
 800c846:	4d84      	ldr	r5, [pc, #528]	; (800ca58 <RemapAndLinkDMAtoUARTRx+0x714>)
 800c848:	402c      	ands	r4, r5
 800c84a:	50d4      	str	r4, [r2, r3]
 800c84c:	58d5      	ldr	r5, [r2, r3]
 800c84e:	24b0      	movs	r4, #176	; 0xb0
 800c850:	0124      	lsls	r4, r4, #4
 800c852:	432c      	orrs	r4, r5
 800c854:	50d4      	str	r4, [r2, r3]
 800c856:	e655      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c858:	4a7c      	ldr	r2, [pc, #496]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x708>)
 800c85a:	680c      	ldr	r4, [r1, #0]
 800c85c:	4294      	cmp	r4, r2
 800c85e:	d000      	beq.n	800c862 <RemapAndLinkDMAtoUARTRx+0x51e>
 800c860:	e5d6      	b.n	800c410 <RemapAndLinkDMAtoUARTRx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800c862:	4a7b      	ldr	r2, [pc, #492]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c864:	23a8      	movs	r3, #168	; 0xa8
 800c866:	58d4      	ldr	r4, [r2, r3]
 800c868:	250f      	movs	r5, #15
 800c86a:	43ac      	bics	r4, r5
 800c86c:	50d4      	str	r4, [r2, r3]
 800c86e:	58d4      	ldr	r4, [r2, r3]
 800c870:	3d03      	subs	r5, #3
 800c872:	432c      	orrs	r4, r5
 800c874:	50d4      	str	r4, [r2, r3]
 800c876:	e645      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c878:	4a76      	ldr	r2, [pc, #472]	; (800ca54 <RemapAndLinkDMAtoUARTRx+0x710>)
 800c87a:	680c      	ldr	r4, [r1, #0]
 800c87c:	4294      	cmp	r4, r2
 800c87e:	d000      	beq.n	800c882 <RemapAndLinkDMAtoUARTRx+0x53e>
 800c880:	e5ca      	b.n	800c418 <RemapAndLinkDMAtoUARTRx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800c882:	4a73      	ldr	r2, [pc, #460]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c884:	23a8      	movs	r3, #168	; 0xa8
 800c886:	58d4      	ldr	r4, [r2, r3]
 800c888:	4d73      	ldr	r5, [pc, #460]	; (800ca58 <RemapAndLinkDMAtoUARTRx+0x714>)
 800c88a:	402c      	ands	r4, r5
 800c88c:	50d4      	str	r4, [r2, r3]
 800c88e:	58d5      	ldr	r5, [r2, r3]
 800c890:	24c0      	movs	r4, #192	; 0xc0
 800c892:	0124      	lsls	r4, r4, #4
 800c894:	432c      	orrs	r4, r5
 800c896:	50d4      	str	r4, [r2, r3]
 800c898:	e634      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c89a:	4a70      	ldr	r2, [pc, #448]	; (800ca5c <RemapAndLinkDMAtoUARTRx+0x718>)
 800c89c:	680c      	ldr	r4, [r1, #0]
 800c89e:	4294      	cmp	r4, r2
 800c8a0:	d000      	beq.n	800c8a4 <RemapAndLinkDMAtoUARTRx+0x560>
 800c8a2:	e5bd      	b.n	800c420 <RemapAndLinkDMAtoUARTRx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800c8a4:	4a6a      	ldr	r2, [pc, #424]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c8a6:	23a8      	movs	r3, #168	; 0xa8
 800c8a8:	58d4      	ldr	r4, [r2, r3]
 800c8aa:	4d6d      	ldr	r5, [pc, #436]	; (800ca60 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800c8ac:	402c      	ands	r4, r5
 800c8ae:	50d4      	str	r4, [r2, r3]
 800c8b0:	58d5      	ldr	r5, [r2, r3]
 800c8b2:	24c0      	movs	r4, #192	; 0xc0
 800c8b4:	0324      	lsls	r4, r4, #12
 800c8b6:	432c      	orrs	r4, r5
 800c8b8:	50d4      	str	r4, [r2, r3]
 800c8ba:	e623      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c8bc:	4a69      	ldr	r2, [pc, #420]	; (800ca64 <RemapAndLinkDMAtoUARTRx+0x720>)
 800c8be:	680c      	ldr	r4, [r1, #0]
 800c8c0:	4294      	cmp	r4, r2
 800c8c2:	d000      	beq.n	800c8c6 <RemapAndLinkDMAtoUARTRx+0x582>
 800c8c4:	e5b0      	b.n	800c428 <RemapAndLinkDMAtoUARTRx+0xe4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800c8c6:	4a62      	ldr	r2, [pc, #392]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c8c8:	23a8      	movs	r3, #168	; 0xa8
 800c8ca:	58d4      	ldr	r4, [r2, r3]
 800c8cc:	4d66      	ldr	r5, [pc, #408]	; (800ca68 <RemapAndLinkDMAtoUARTRx+0x724>)
 800c8ce:	402c      	ands	r4, r5
 800c8d0:	50d4      	str	r4, [r2, r3]
 800c8d2:	58d5      	ldr	r5, [r2, r3]
 800c8d4:	24c0      	movs	r4, #192	; 0xc0
 800c8d6:	0424      	lsls	r4, r4, #16
 800c8d8:	432c      	orrs	r4, r5
 800c8da:	50d4      	str	r4, [r2, r3]
 800c8dc:	e612      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c8de:	4a63      	ldr	r2, [pc, #396]	; (800ca6c <RemapAndLinkDMAtoUARTRx+0x728>)
 800c8e0:	680c      	ldr	r4, [r1, #0]
 800c8e2:	4294      	cmp	r4, r2
 800c8e4:	d000      	beq.n	800c8e8 <RemapAndLinkDMAtoUARTRx+0x5a4>
 800c8e6:	e5a3      	b.n	800c430 <RemapAndLinkDMAtoUARTRx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800c8e8:	4a61      	ldr	r2, [pc, #388]	; (800ca70 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c8ea:	23a8      	movs	r3, #168	; 0xa8
 800c8ec:	58d4      	ldr	r4, [r2, r3]
 800c8ee:	25f0      	movs	r5, #240	; 0xf0
 800c8f0:	43ac      	bics	r4, r5
 800c8f2:	50d4      	str	r4, [r2, r3]
 800c8f4:	58d4      	ldr	r4, [r2, r3]
 800c8f6:	3d30      	subs	r5, #48	; 0x30
 800c8f8:	432c      	orrs	r4, r5
 800c8fa:	50d4      	str	r4, [r2, r3]
 800c8fc:	e602      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c8fe:	4a5d      	ldr	r2, [pc, #372]	; (800ca74 <RemapAndLinkDMAtoUARTRx+0x730>)
 800c900:	680c      	ldr	r4, [r1, #0]
 800c902:	4294      	cmp	r4, r2
 800c904:	d000      	beq.n	800c908 <RemapAndLinkDMAtoUARTRx+0x5c4>
 800c906:	e597      	b.n	800c438 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800c908:	4a59      	ldr	r2, [pc, #356]	; (800ca70 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c90a:	23a8      	movs	r3, #168	; 0xa8
 800c90c:	58d4      	ldr	r4, [r2, r3]
 800c90e:	4d52      	ldr	r5, [pc, #328]	; (800ca58 <RemapAndLinkDMAtoUARTRx+0x714>)
 800c910:	402c      	ands	r4, r5
 800c912:	50d4      	str	r4, [r2, r3]
 800c914:	58d5      	ldr	r5, [r2, r3]
 800c916:	24c0      	movs	r4, #192	; 0xc0
 800c918:	0124      	lsls	r4, r4, #4
 800c91a:	432c      	orrs	r4, r5
 800c91c:	50d4      	str	r4, [r2, r3]
 800c91e:	e5f1      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c920:	4a4a      	ldr	r2, [pc, #296]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x708>)
 800c922:	680c      	ldr	r4, [r1, #0]
 800c924:	4294      	cmp	r4, r2
 800c926:	d000      	beq.n	800c92a <RemapAndLinkDMAtoUARTRx+0x5e6>
 800c928:	e58a      	b.n	800c440 <RemapAndLinkDMAtoUARTRx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800c92a:	4a49      	ldr	r2, [pc, #292]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c92c:	23a8      	movs	r3, #168	; 0xa8
 800c92e:	58d4      	ldr	r4, [r2, r3]
 800c930:	250f      	movs	r5, #15
 800c932:	43ac      	bics	r4, r5
 800c934:	50d4      	str	r4, [r2, r3]
 800c936:	58d4      	ldr	r4, [r2, r3]
 800c938:	3d02      	subs	r5, #2
 800c93a:	432c      	orrs	r4, r5
 800c93c:	50d4      	str	r4, [r2, r3]
 800c93e:	e5e1      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c940:	4a44      	ldr	r2, [pc, #272]	; (800ca54 <RemapAndLinkDMAtoUARTRx+0x710>)
 800c942:	680c      	ldr	r4, [r1, #0]
 800c944:	4294      	cmp	r4, r2
 800c946:	d000      	beq.n	800c94a <RemapAndLinkDMAtoUARTRx+0x606>
 800c948:	e57e      	b.n	800c448 <RemapAndLinkDMAtoUARTRx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800c94a:	4a41      	ldr	r2, [pc, #260]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c94c:	23a8      	movs	r3, #168	; 0xa8
 800c94e:	58d4      	ldr	r4, [r2, r3]
 800c950:	4d41      	ldr	r5, [pc, #260]	; (800ca58 <RemapAndLinkDMAtoUARTRx+0x714>)
 800c952:	402c      	ands	r4, r5
 800c954:	50d4      	str	r4, [r2, r3]
 800c956:	58d5      	ldr	r5, [r2, r3]
 800c958:	24d0      	movs	r4, #208	; 0xd0
 800c95a:	0124      	lsls	r4, r4, #4
 800c95c:	432c      	orrs	r4, r5
 800c95e:	50d4      	str	r4, [r2, r3]
 800c960:	e5d0      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c962:	4a3e      	ldr	r2, [pc, #248]	; (800ca5c <RemapAndLinkDMAtoUARTRx+0x718>)
 800c964:	680c      	ldr	r4, [r1, #0]
 800c966:	4294      	cmp	r4, r2
 800c968:	d000      	beq.n	800c96c <RemapAndLinkDMAtoUARTRx+0x628>
 800c96a:	e571      	b.n	800c450 <RemapAndLinkDMAtoUARTRx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800c96c:	4a38      	ldr	r2, [pc, #224]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c96e:	23a8      	movs	r3, #168	; 0xa8
 800c970:	58d4      	ldr	r4, [r2, r3]
 800c972:	4d3b      	ldr	r5, [pc, #236]	; (800ca60 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800c974:	402c      	ands	r4, r5
 800c976:	50d4      	str	r4, [r2, r3]
 800c978:	58d5      	ldr	r5, [r2, r3]
 800c97a:	24d0      	movs	r4, #208	; 0xd0
 800c97c:	0324      	lsls	r4, r4, #12
 800c97e:	432c      	orrs	r4, r5
 800c980:	50d4      	str	r4, [r2, r3]
 800c982:	e5bf      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c984:	4a37      	ldr	r2, [pc, #220]	; (800ca64 <RemapAndLinkDMAtoUARTRx+0x720>)
 800c986:	680c      	ldr	r4, [r1, #0]
 800c988:	4294      	cmp	r4, r2
 800c98a:	d000      	beq.n	800c98e <RemapAndLinkDMAtoUARTRx+0x64a>
 800c98c:	e564      	b.n	800c458 <RemapAndLinkDMAtoUARTRx+0x114>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c98e:	4a30      	ldr	r2, [pc, #192]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c990:	23a8      	movs	r3, #168	; 0xa8
 800c992:	58d4      	ldr	r4, [r2, r3]
 800c994:	4d34      	ldr	r5, [pc, #208]	; (800ca68 <RemapAndLinkDMAtoUARTRx+0x724>)
 800c996:	402c      	ands	r4, r5
 800c998:	50d4      	str	r4, [r2, r3]
 800c99a:	58d5      	ldr	r5, [r2, r3]
 800c99c:	24d0      	movs	r4, #208	; 0xd0
 800c99e:	0424      	lsls	r4, r4, #16
 800c9a0:	432c      	orrs	r4, r5
 800c9a2:	50d4      	str	r4, [r2, r3]
 800c9a4:	e5ae      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c9a6:	4a31      	ldr	r2, [pc, #196]	; (800ca6c <RemapAndLinkDMAtoUARTRx+0x728>)
 800c9a8:	680c      	ldr	r4, [r1, #0]
 800c9aa:	4294      	cmp	r4, r2
 800c9ac:	d000      	beq.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x66c>
 800c9ae:	e557      	b.n	800c460 <RemapAndLinkDMAtoUARTRx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c9b0:	4a2f      	ldr	r2, [pc, #188]	; (800ca70 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c9b2:	23a8      	movs	r3, #168	; 0xa8
 800c9b4:	58d4      	ldr	r4, [r2, r3]
 800c9b6:	25f0      	movs	r5, #240	; 0xf0
 800c9b8:	43ac      	bics	r4, r5
 800c9ba:	50d4      	str	r4, [r2, r3]
 800c9bc:	58d4      	ldr	r4, [r2, r3]
 800c9be:	3d20      	subs	r5, #32
 800c9c0:	432c      	orrs	r4, r5
 800c9c2:	50d4      	str	r4, [r2, r3]
 800c9c4:	e59e      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c9c6:	4a2b      	ldr	r2, [pc, #172]	; (800ca74 <RemapAndLinkDMAtoUARTRx+0x730>)
 800c9c8:	680c      	ldr	r4, [r1, #0]
 800c9ca:	4294      	cmp	r4, r2
 800c9cc:	d000      	beq.n	800c9d0 <RemapAndLinkDMAtoUARTRx+0x68c>
 800c9ce:	e54b      	b.n	800c468 <RemapAndLinkDMAtoUARTRx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800c9d0:	4a27      	ldr	r2, [pc, #156]	; (800ca70 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800c9d2:	23a8      	movs	r3, #168	; 0xa8
 800c9d4:	58d4      	ldr	r4, [r2, r3]
 800c9d6:	4d20      	ldr	r5, [pc, #128]	; (800ca58 <RemapAndLinkDMAtoUARTRx+0x714>)
 800c9d8:	402c      	ands	r4, r5
 800c9da:	50d4      	str	r4, [r2, r3]
 800c9dc:	58d5      	ldr	r5, [r2, r3]
 800c9de:	24d0      	movs	r4, #208	; 0xd0
 800c9e0:	0124      	lsls	r4, r4, #4
 800c9e2:	432c      	orrs	r4, r5
 800c9e4:	50d4      	str	r4, [r2, r3]
 800c9e6:	e58d      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c9e8:	4a18      	ldr	r2, [pc, #96]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x708>)
 800c9ea:	680c      	ldr	r4, [r1, #0]
 800c9ec:	4294      	cmp	r4, r2
 800c9ee:	d000      	beq.n	800c9f2 <RemapAndLinkDMAtoUARTRx+0x6ae>
 800c9f0:	e53e      	b.n	800c470 <RemapAndLinkDMAtoUARTRx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c9f2:	4a17      	ldr	r2, [pc, #92]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800c9f4:	23a8      	movs	r3, #168	; 0xa8
 800c9f6:	58d4      	ldr	r4, [r2, r3]
 800c9f8:	250f      	movs	r5, #15
 800c9fa:	43ac      	bics	r4, r5
 800c9fc:	50d4      	str	r4, [r2, r3]
 800c9fe:	58d4      	ldr	r4, [r2, r3]
 800ca00:	3d01      	subs	r5, #1
 800ca02:	432c      	orrs	r4, r5
 800ca04:	50d4      	str	r4, [r2, r3]
 800ca06:	e57d      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800ca08:	4a12      	ldr	r2, [pc, #72]	; (800ca54 <RemapAndLinkDMAtoUARTRx+0x710>)
 800ca0a:	680c      	ldr	r4, [r1, #0]
 800ca0c:	4294      	cmp	r4, r2
 800ca0e:	d000      	beq.n	800ca12 <RemapAndLinkDMAtoUARTRx+0x6ce>
 800ca10:	e532      	b.n	800c478 <RemapAndLinkDMAtoUARTRx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800ca12:	4a0f      	ldr	r2, [pc, #60]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ca14:	23a8      	movs	r3, #168	; 0xa8
 800ca16:	58d4      	ldr	r4, [r2, r3]
 800ca18:	4d0f      	ldr	r5, [pc, #60]	; (800ca58 <RemapAndLinkDMAtoUARTRx+0x714>)
 800ca1a:	402c      	ands	r4, r5
 800ca1c:	50d4      	str	r4, [r2, r3]
 800ca1e:	58d5      	ldr	r5, [r2, r3]
 800ca20:	24e0      	movs	r4, #224	; 0xe0
 800ca22:	0124      	lsls	r4, r4, #4
 800ca24:	432c      	orrs	r4, r5
 800ca26:	50d4      	str	r4, [r2, r3]
 800ca28:	e56c      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800ca2a:	4a0c      	ldr	r2, [pc, #48]	; (800ca5c <RemapAndLinkDMAtoUARTRx+0x718>)
 800ca2c:	680c      	ldr	r4, [r1, #0]
 800ca2e:	4294      	cmp	r4, r2
 800ca30:	d000      	beq.n	800ca34 <RemapAndLinkDMAtoUARTRx+0x6f0>
 800ca32:	e525      	b.n	800c480 <RemapAndLinkDMAtoUARTRx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800ca34:	4a06      	ldr	r2, [pc, #24]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ca36:	23a8      	movs	r3, #168	; 0xa8
 800ca38:	58d4      	ldr	r4, [r2, r3]
 800ca3a:	4d09      	ldr	r5, [pc, #36]	; (800ca60 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800ca3c:	402c      	ands	r4, r5
 800ca3e:	50d4      	str	r4, [r2, r3]
 800ca40:	58d5      	ldr	r5, [r2, r3]
 800ca42:	24e0      	movs	r4, #224	; 0xe0
 800ca44:	0324      	lsls	r4, r4, #12
 800ca46:	432c      	orrs	r4, r5
 800ca48:	50d4      	str	r4, [r2, r3]
 800ca4a:	e55b      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800ca4c:	40020008 	.word	0x40020008
 800ca50:	40020000 	.word	0x40020000
 800ca54:	40020030 	.word	0x40020030
 800ca58:	fffff0ff 	.word	0xfffff0ff
 800ca5c:	40020058 	.word	0x40020058
 800ca60:	fff0ffff 	.word	0xfff0ffff
 800ca64:	4002006c 	.word	0x4002006c
 800ca68:	ff0fffff 	.word	0xff0fffff
 800ca6c:	4002041c 	.word	0x4002041c
 800ca70:	40020400 	.word	0x40020400
 800ca74:	40020430 	.word	0x40020430
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800ca78:	4a41      	ldr	r2, [pc, #260]	; (800cb80 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800ca7a:	680c      	ldr	r4, [r1, #0]
 800ca7c:	4294      	cmp	r4, r2
 800ca7e:	d000      	beq.n	800ca82 <RemapAndLinkDMAtoUARTRx+0x73e>
 800ca80:	e502      	b.n	800c488 <RemapAndLinkDMAtoUARTRx+0x144>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800ca82:	4a40      	ldr	r2, [pc, #256]	; (800cb84 <RemapAndLinkDMAtoUARTRx+0x840>)
 800ca84:	23a8      	movs	r3, #168	; 0xa8
 800ca86:	58d4      	ldr	r4, [r2, r3]
 800ca88:	4d3f      	ldr	r5, [pc, #252]	; (800cb88 <RemapAndLinkDMAtoUARTRx+0x844>)
 800ca8a:	402c      	ands	r4, r5
 800ca8c:	50d4      	str	r4, [r2, r3]
 800ca8e:	58d5      	ldr	r5, [r2, r3]
 800ca90:	24e0      	movs	r4, #224	; 0xe0
 800ca92:	0424      	lsls	r4, r4, #16
 800ca94:	432c      	orrs	r4, r5
 800ca96:	50d4      	str	r4, [r2, r3]
 800ca98:	e534      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800ca9a:	4a3c      	ldr	r2, [pc, #240]	; (800cb8c <RemapAndLinkDMAtoUARTRx+0x848>)
 800ca9c:	680c      	ldr	r4, [r1, #0]
 800ca9e:	4294      	cmp	r4, r2
 800caa0:	d000      	beq.n	800caa4 <RemapAndLinkDMAtoUARTRx+0x760>
 800caa2:	e4f5      	b.n	800c490 <RemapAndLinkDMAtoUARTRx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800caa4:	4a3a      	ldr	r2, [pc, #232]	; (800cb90 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800caa6:	23a8      	movs	r3, #168	; 0xa8
 800caa8:	58d4      	ldr	r4, [r2, r3]
 800caaa:	25f0      	movs	r5, #240	; 0xf0
 800caac:	43ac      	bics	r4, r5
 800caae:	50d4      	str	r4, [r2, r3]
 800cab0:	58d4      	ldr	r4, [r2, r3]
 800cab2:	3d10      	subs	r5, #16
 800cab4:	432c      	orrs	r4, r5
 800cab6:	50d4      	str	r4, [r2, r3]
 800cab8:	e524      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800caba:	4a36      	ldr	r2, [pc, #216]	; (800cb94 <RemapAndLinkDMAtoUARTRx+0x850>)
 800cabc:	680c      	ldr	r4, [r1, #0]
 800cabe:	4294      	cmp	r4, r2
 800cac0:	d000      	beq.n	800cac4 <RemapAndLinkDMAtoUARTRx+0x780>
 800cac2:	e4e9      	b.n	800c498 <RemapAndLinkDMAtoUARTRx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800cac4:	4a32      	ldr	r2, [pc, #200]	; (800cb90 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800cac6:	23a8      	movs	r3, #168	; 0xa8
 800cac8:	58d4      	ldr	r4, [r2, r3]
 800caca:	4d33      	ldr	r5, [pc, #204]	; (800cb98 <RemapAndLinkDMAtoUARTRx+0x854>)
 800cacc:	402c      	ands	r4, r5
 800cace:	50d4      	str	r4, [r2, r3]
 800cad0:	58d5      	ldr	r5, [r2, r3]
 800cad2:	24e0      	movs	r4, #224	; 0xe0
 800cad4:	0124      	lsls	r4, r4, #4
 800cad6:	432c      	orrs	r4, r5
 800cad8:	50d4      	str	r4, [r2, r3]
 800cada:	e513      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800cadc:	4a2f      	ldr	r2, [pc, #188]	; (800cb9c <RemapAndLinkDMAtoUARTRx+0x858>)
 800cade:	680c      	ldr	r4, [r1, #0]
 800cae0:	4294      	cmp	r4, r2
 800cae2:	d000      	beq.n	800cae6 <RemapAndLinkDMAtoUARTRx+0x7a2>
 800cae4:	e4dc      	b.n	800c4a0 <RemapAndLinkDMAtoUARTRx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800cae6:	4a27      	ldr	r2, [pc, #156]	; (800cb84 <RemapAndLinkDMAtoUARTRx+0x840>)
 800cae8:	23a8      	movs	r3, #168	; 0xa8
 800caea:	58d5      	ldr	r5, [r2, r3]
 800caec:	260f      	movs	r6, #15
 800caee:	43b5      	bics	r5, r6
 800caf0:	50d5      	str	r5, [r2, r3]
 800caf2:	58d4      	ldr	r4, [r2, r3]
 800caf4:	4334      	orrs	r4, r6
 800caf6:	50d4      	str	r4, [r2, r3]
 800caf8:	e504      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800cafa:	4a29      	ldr	r2, [pc, #164]	; (800cba0 <RemapAndLinkDMAtoUARTRx+0x85c>)
 800cafc:	680c      	ldr	r4, [r1, #0]
 800cafe:	4294      	cmp	r4, r2
 800cb00:	d000      	beq.n	800cb04 <RemapAndLinkDMAtoUARTRx+0x7c0>
 800cb02:	e4d1      	b.n	800c4a8 <RemapAndLinkDMAtoUARTRx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800cb04:	4a1f      	ldr	r2, [pc, #124]	; (800cb84 <RemapAndLinkDMAtoUARTRx+0x840>)
 800cb06:	23a8      	movs	r3, #168	; 0xa8
 800cb08:	58d4      	ldr	r4, [r2, r3]
 800cb0a:	4d23      	ldr	r5, [pc, #140]	; (800cb98 <RemapAndLinkDMAtoUARTRx+0x854>)
 800cb0c:	402c      	ands	r4, r5
 800cb0e:	50d4      	str	r4, [r2, r3]
 800cb10:	58d5      	ldr	r5, [r2, r3]
 800cb12:	24f0      	movs	r4, #240	; 0xf0
 800cb14:	0124      	lsls	r4, r4, #4
 800cb16:	432c      	orrs	r4, r5
 800cb18:	50d4      	str	r4, [r2, r3]
 800cb1a:	e4f3      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800cb1c:	4a21      	ldr	r2, [pc, #132]	; (800cba4 <RemapAndLinkDMAtoUARTRx+0x860>)
 800cb1e:	680c      	ldr	r4, [r1, #0]
 800cb20:	4294      	cmp	r4, r2
 800cb22:	d000      	beq.n	800cb26 <RemapAndLinkDMAtoUARTRx+0x7e2>
 800cb24:	e4c4      	b.n	800c4b0 <RemapAndLinkDMAtoUARTRx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800cb26:	4a17      	ldr	r2, [pc, #92]	; (800cb84 <RemapAndLinkDMAtoUARTRx+0x840>)
 800cb28:	23a8      	movs	r3, #168	; 0xa8
 800cb2a:	58d4      	ldr	r4, [r2, r3]
 800cb2c:	4d1e      	ldr	r5, [pc, #120]	; (800cba8 <RemapAndLinkDMAtoUARTRx+0x864>)
 800cb2e:	402c      	ands	r4, r5
 800cb30:	50d4      	str	r4, [r2, r3]
 800cb32:	58d5      	ldr	r5, [r2, r3]
 800cb34:	24f0      	movs	r4, #240	; 0xf0
 800cb36:	0324      	lsls	r4, r4, #12
 800cb38:	432c      	orrs	r4, r5
 800cb3a:	50d4      	str	r4, [r2, r3]
 800cb3c:	e4e2      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800cb3e:	4a10      	ldr	r2, [pc, #64]	; (800cb80 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800cb40:	680c      	ldr	r4, [r1, #0]
 800cb42:	4294      	cmp	r4, r2
 800cb44:	d000      	beq.n	800cb48 <RemapAndLinkDMAtoUARTRx+0x804>
 800cb46:	e4b7      	b.n	800c4b8 <RemapAndLinkDMAtoUARTRx+0x174>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800cb48:	4a0e      	ldr	r2, [pc, #56]	; (800cb84 <RemapAndLinkDMAtoUARTRx+0x840>)
 800cb4a:	23a8      	movs	r3, #168	; 0xa8
 800cb4c:	58d4      	ldr	r4, [r2, r3]
 800cb4e:	4d0e      	ldr	r5, [pc, #56]	; (800cb88 <RemapAndLinkDMAtoUARTRx+0x844>)
 800cb50:	402c      	ands	r4, r5
 800cb52:	50d4      	str	r4, [r2, r3]
 800cb54:	58d5      	ldr	r5, [r2, r3]
 800cb56:	24f0      	movs	r4, #240	; 0xf0
 800cb58:	0424      	lsls	r4, r4, #16
 800cb5a:	432c      	orrs	r4, r5
 800cb5c:	50d4      	str	r4, [r2, r3]
 800cb5e:	e4d1      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800cb60:	4a0a      	ldr	r2, [pc, #40]	; (800cb8c <RemapAndLinkDMAtoUARTRx+0x848>)
 800cb62:	680c      	ldr	r4, [r1, #0]
 800cb64:	4294      	cmp	r4, r2
 800cb66:	d000      	beq.n	800cb6a <RemapAndLinkDMAtoUARTRx+0x826>
 800cb68:	e4aa      	b.n	800c4c0 <RemapAndLinkDMAtoUARTRx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800cb6a:	4a09      	ldr	r2, [pc, #36]	; (800cb90 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800cb6c:	23a8      	movs	r3, #168	; 0xa8
 800cb6e:	58d5      	ldr	r5, [r2, r3]
 800cb70:	26f0      	movs	r6, #240	; 0xf0
 800cb72:	43b5      	bics	r5, r6
 800cb74:	50d5      	str	r5, [r2, r3]
 800cb76:	58d4      	ldr	r4, [r2, r3]
 800cb78:	4334      	orrs	r4, r6
 800cb7a:	50d4      	str	r4, [r2, r3]
 800cb7c:	e4c2      	b.n	800c504 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800cb7e:	46c0      	nop			; (mov r8, r8)
 800cb80:	4002006c 	.word	0x4002006c
 800cb84:	40020000 	.word	0x40020000
 800cb88:	ff0fffff 	.word	0xff0fffff
 800cb8c:	4002041c 	.word	0x4002041c
 800cb90:	40020400 	.word	0x40020400
 800cb94:	40020430 	.word	0x40020430
 800cb98:	fffff0ff 	.word	0xfffff0ff
 800cb9c:	40020008 	.word	0x40020008
 800cba0:	40020030 	.word	0x40020030
 800cba4:	40020058 	.word	0x40020058
 800cba8:	fff0ffff 	.word	0xfff0ffff

0800cbac <DMA_MSG_RX_Setup>:
{	
 800cbac:	b570      	push	{r4, r5, r6, lr}
 800cbae:	0004      	movs	r4, r0
 800cbb0:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800cbb2:	f7ff fbc7 	bl	800c344 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	0028      	movs	r0, r5
 800cbba:	f7ff fb09 	bl	800c1d0 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800cbbe:	0020      	movs	r0, r4
 800cbc0:	f7fe fb90 	bl	800b2e4 <GetPort>
 800cbc4:	1e41      	subs	r1, r0, #1
 800cbc6:	0189      	lsls	r1, r1, #6
 800cbc8:	4803      	ldr	r0, [pc, #12]	; (800cbd8 <DMA_MSG_RX_Setup+0x2c>)
 800cbca:	1809      	adds	r1, r1, r0
 800cbcc:	2240      	movs	r2, #64	; 0x40
 800cbce:	0020      	movs	r0, r4
 800cbd0:	f006 f872 	bl	8012cb8 <HAL_UART_Receive_DMA>
}
 800cbd4:	bd70      	pop	{r4, r5, r6, pc}
 800cbd6:	46c0      	nop			; (mov r8, r8)
 800cbd8:	20000afc 	.word	0x20000afc

0800cbdc <SetupMessagingRxDMAs>:
{	
 800cbdc:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800cbde:	4b17      	ldr	r3, [pc, #92]	; (800cc3c <SetupMessagingRxDMAs+0x60>)
 800cbe0:	785b      	ldrb	r3, [r3, #1]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d010      	beq.n	800cc08 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800cbe6:	4b15      	ldr	r3, [pc, #84]	; (800cc3c <SetupMessagingRxDMAs+0x60>)
 800cbe8:	789b      	ldrb	r3, [r3, #2]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d011      	beq.n	800cc12 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800cbee:	4b13      	ldr	r3, [pc, #76]	; (800cc3c <SetupMessagingRxDMAs+0x60>)
 800cbf0:	78db      	ldrb	r3, [r3, #3]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d012      	beq.n	800cc1c <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800cbf6:	4b11      	ldr	r3, [pc, #68]	; (800cc3c <SetupMessagingRxDMAs+0x60>)
 800cbf8:	791b      	ldrb	r3, [r3, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d013      	beq.n	800cc26 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <SetupMessagingRxDMAs+0x60>)
 800cc00:	795b      	ldrb	r3, [r3, #5]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d014      	beq.n	800cc30 <SetupMessagingRxDMAs+0x54>
}
 800cc06:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800cc08:	490d      	ldr	r1, [pc, #52]	; (800cc40 <SetupMessagingRxDMAs+0x64>)
 800cc0a:	480e      	ldr	r0, [pc, #56]	; (800cc44 <SetupMessagingRxDMAs+0x68>)
 800cc0c:	f7ff ffce 	bl	800cbac <DMA_MSG_RX_Setup>
 800cc10:	e7e9      	b.n	800cbe6 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800cc12:	490d      	ldr	r1, [pc, #52]	; (800cc48 <SetupMessagingRxDMAs+0x6c>)
 800cc14:	480d      	ldr	r0, [pc, #52]	; (800cc4c <SetupMessagingRxDMAs+0x70>)
 800cc16:	f7ff ffc9 	bl	800cbac <DMA_MSG_RX_Setup>
 800cc1a:	e7e8      	b.n	800cbee <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800cc1c:	490c      	ldr	r1, [pc, #48]	; (800cc50 <SetupMessagingRxDMAs+0x74>)
 800cc1e:	480d      	ldr	r0, [pc, #52]	; (800cc54 <SetupMessagingRxDMAs+0x78>)
 800cc20:	f7ff ffc4 	bl	800cbac <DMA_MSG_RX_Setup>
 800cc24:	e7e7      	b.n	800cbf6 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800cc26:	490c      	ldr	r1, [pc, #48]	; (800cc58 <SetupMessagingRxDMAs+0x7c>)
 800cc28:	480c      	ldr	r0, [pc, #48]	; (800cc5c <SetupMessagingRxDMAs+0x80>)
 800cc2a:	f7ff ffbf 	bl	800cbac <DMA_MSG_RX_Setup>
 800cc2e:	e7e6      	b.n	800cbfe <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800cc30:	490b      	ldr	r1, [pc, #44]	; (800cc60 <SetupMessagingRxDMAs+0x84>)
 800cc32:	480c      	ldr	r0, [pc, #48]	; (800cc64 <SetupMessagingRxDMAs+0x88>)
 800cc34:	f7ff ffba 	bl	800cbac <DMA_MSG_RX_Setup>
}
 800cc38:	e7e5      	b.n	800cc06 <SetupMessagingRxDMAs+0x2a>
 800cc3a:	46c0      	nop			; (mov r8, r8)
 800cc3c:	20000918 	.word	0x20000918
 800cc40:	20000f3c 	.word	0x20000f3c
 800cc44:	200062e0 	.word	0x200062e0
 800cc48:	20000f74 	.word	0x20000f74
 800cc4c:	2000643c 	.word	0x2000643c
 800cc50:	20000fac 	.word	0x20000fac
 800cc54:	200063cc 	.word	0x200063cc
 800cc58:	20000fe4 	.word	0x20000fe4
 800cc5c:	20006218 	.word	0x20006218
 800cc60:	2000101c 	.word	0x2000101c
 800cc64:	20006354 	.word	0x20006354

0800cc68 <DMA_STREAM_Setup>:
{	
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	0005      	movs	r5, r0
 800cc6c:	000f      	movs	r7, r1
 800cc6e:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800cc70:	f7fe fb38 	bl	800b2e4 <GetPort>
	hDMA = &streamDMA[port-1];
 800cc74:	3801      	subs	r0, #1
 800cc76:	00c4      	lsls	r4, r0, #3
 800cc78:	1a24      	subs	r4, r4, r0
 800cc7a:	00e4      	lsls	r4, r4, #3
 800cc7c:	4809      	ldr	r0, [pc, #36]	; (800cca4 <DMA_STREAM_Setup+0x3c>)
 800cc7e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800cc80:	0021      	movs	r1, r4
 800cc82:	0028      	movs	r0, r5
 800cc84:	f7ff fb5e 	bl	800c344 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800cc88:	2101      	movs	r1, #1
 800cc8a:	0020      	movs	r0, r4
 800cc8c:	f7ff faa0 	bl	800c1d0 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800cc90:	2369      	movs	r3, #105	; 0x69
 800cc92:	2201      	movs	r2, #1
 800cc94:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	3128      	adds	r1, #40	; 0x28
 800cc9a:	0032      	movs	r2, r6
 800cc9c:	0028      	movs	r0, r5
 800cc9e:	f006 f80b 	bl	8012cb8 <HAL_UART_Receive_DMA>
}
 800cca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cca4:	20001134 	.word	0x20001134

0800cca8 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800cca8:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800ccaa:	6803      	ldr	r3, [r0, #0]
 800ccac:	4acc      	ldr	r2, [pc, #816]	; (800cfe0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d100      	bne.n	800ccb4 <RemapAndLinkDMAtoUARTTx+0xc>
 800ccb2:	e0ca      	b.n	800ce4a <RemapAndLinkDMAtoUARTTx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800ccb4:	4aca      	ldr	r2, [pc, #808]	; (800cfe0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d100      	bne.n	800ccbc <RemapAndLinkDMAtoUARTTx+0x14>
 800ccba:	e0d8      	b.n	800ce6e <RemapAndLinkDMAtoUARTTx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800ccbc:	4ac8      	ldr	r2, [pc, #800]	; (800cfe0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d100      	bne.n	800ccc4 <RemapAndLinkDMAtoUARTTx+0x1c>
 800ccc2:	e0e5      	b.n	800ce90 <RemapAndLinkDMAtoUARTTx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800ccc4:	4ac6      	ldr	r2, [pc, #792]	; (800cfe0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d100      	bne.n	800cccc <RemapAndLinkDMAtoUARTTx+0x24>
 800ccca:	e0f2      	b.n	800ceb2 <RemapAndLinkDMAtoUARTTx+0x20a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800cccc:	4ac4      	ldr	r2, [pc, #784]	; (800cfe0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d100      	bne.n	800ccd4 <RemapAndLinkDMAtoUARTTx+0x2c>
 800ccd2:	e0fe      	b.n	800ced2 <RemapAndLinkDMAtoUARTTx+0x22a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800ccd4:	4ac2      	ldr	r2, [pc, #776]	; (800cfe0 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d100      	bne.n	800ccdc <RemapAndLinkDMAtoUARTTx+0x34>
 800ccda:	e10b      	b.n	800cef4 <RemapAndLinkDMAtoUARTTx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800ccdc:	4ac1      	ldr	r2, [pc, #772]	; (800cfe4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d100      	bne.n	800cce4 <RemapAndLinkDMAtoUARTTx+0x3c>
 800cce2:	e118      	b.n	800cf16 <RemapAndLinkDMAtoUARTTx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800cce4:	4abf      	ldr	r2, [pc, #764]	; (800cfe4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d100      	bne.n	800ccec <RemapAndLinkDMAtoUARTTx+0x44>
 800ccea:	e124      	b.n	800cf36 <RemapAndLinkDMAtoUARTTx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800ccec:	4abd      	ldr	r2, [pc, #756]	; (800cfe4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d100      	bne.n	800ccf4 <RemapAndLinkDMAtoUARTTx+0x4c>
 800ccf2:	e131      	b.n	800cf58 <RemapAndLinkDMAtoUARTTx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800ccf4:	4abb      	ldr	r2, [pc, #748]	; (800cfe4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d100      	bne.n	800ccfc <RemapAndLinkDMAtoUARTTx+0x54>
 800ccfa:	e13e      	b.n	800cf7a <RemapAndLinkDMAtoUARTTx+0x2d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800ccfc:	4ab9      	ldr	r2, [pc, #740]	; (800cfe4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d100      	bne.n	800cd04 <RemapAndLinkDMAtoUARTTx+0x5c>
 800cd02:	e14a      	b.n	800cf9a <RemapAndLinkDMAtoUARTTx+0x2f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800cd04:	4ab7      	ldr	r2, [pc, #732]	; (800cfe4 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d100      	bne.n	800cd0c <RemapAndLinkDMAtoUARTTx+0x64>
 800cd0a:	e157      	b.n	800cfbc <RemapAndLinkDMAtoUARTTx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800cd0c:	4ab6      	ldr	r2, [pc, #728]	; (800cfe8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d100      	bne.n	800cd14 <RemapAndLinkDMAtoUARTTx+0x6c>
 800cd12:	e18b      	b.n	800d02c <RemapAndLinkDMAtoUARTTx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800cd14:	4ab4      	ldr	r2, [pc, #720]	; (800cfe8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d100      	bne.n	800cd1c <RemapAndLinkDMAtoUARTTx+0x74>
 800cd1a:	e197      	b.n	800d04c <RemapAndLinkDMAtoUARTTx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800cd1c:	4ab2      	ldr	r2, [pc, #712]	; (800cfe8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d100      	bne.n	800cd24 <RemapAndLinkDMAtoUARTTx+0x7c>
 800cd22:	e1a4      	b.n	800d06e <RemapAndLinkDMAtoUARTTx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800cd24:	4ab0      	ldr	r2, [pc, #704]	; (800cfe8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d100      	bne.n	800cd2c <RemapAndLinkDMAtoUARTTx+0x84>
 800cd2a:	e1b1      	b.n	800d090 <RemapAndLinkDMAtoUARTTx+0x3e8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800cd2c:	4aae      	ldr	r2, [pc, #696]	; (800cfe8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d100      	bne.n	800cd34 <RemapAndLinkDMAtoUARTTx+0x8c>
 800cd32:	e1bd      	b.n	800d0b0 <RemapAndLinkDMAtoUARTTx+0x408>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800cd34:	4aac      	ldr	r2, [pc, #688]	; (800cfe8 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d100      	bne.n	800cd3c <RemapAndLinkDMAtoUARTTx+0x94>
 800cd3a:	e1ca      	b.n	800d0d2 <RemapAndLinkDMAtoUARTTx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800cd3c:	4aab      	ldr	r2, [pc, #684]	; (800cfec <RemapAndLinkDMAtoUARTTx+0x344>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d100      	bne.n	800cd44 <RemapAndLinkDMAtoUARTTx+0x9c>
 800cd42:	e1d7      	b.n	800d0f4 <RemapAndLinkDMAtoUARTTx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800cd44:	4aa9      	ldr	r2, [pc, #676]	; (800cfec <RemapAndLinkDMAtoUARTTx+0x344>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d100      	bne.n	800cd4c <RemapAndLinkDMAtoUARTTx+0xa4>
 800cd4a:	e1e3      	b.n	800d114 <RemapAndLinkDMAtoUARTTx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800cd4c:	4aa7      	ldr	r2, [pc, #668]	; (800cfec <RemapAndLinkDMAtoUARTTx+0x344>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d100      	bne.n	800cd54 <RemapAndLinkDMAtoUARTTx+0xac>
 800cd52:	e1f0      	b.n	800d136 <RemapAndLinkDMAtoUARTTx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800cd54:	4aa5      	ldr	r2, [pc, #660]	; (800cfec <RemapAndLinkDMAtoUARTTx+0x344>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d100      	bne.n	800cd5c <RemapAndLinkDMAtoUARTTx+0xb4>
 800cd5a:	e1fd      	b.n	800d158 <RemapAndLinkDMAtoUARTTx+0x4b0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800cd5c:	4aa3      	ldr	r2, [pc, #652]	; (800cfec <RemapAndLinkDMAtoUARTTx+0x344>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d100      	bne.n	800cd64 <RemapAndLinkDMAtoUARTTx+0xbc>
 800cd62:	e209      	b.n	800d178 <RemapAndLinkDMAtoUARTTx+0x4d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800cd64:	4aa1      	ldr	r2, [pc, #644]	; (800cfec <RemapAndLinkDMAtoUARTTx+0x344>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d100      	bne.n	800cd6c <RemapAndLinkDMAtoUARTTx+0xc4>
 800cd6a:	e216      	b.n	800d19a <RemapAndLinkDMAtoUARTTx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800cd6c:	4aa0      	ldr	r2, [pc, #640]	; (800cff0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d100      	bne.n	800cd74 <RemapAndLinkDMAtoUARTTx+0xcc>
 800cd72:	e223      	b.n	800d1bc <RemapAndLinkDMAtoUARTTx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800cd74:	4a9e      	ldr	r2, [pc, #632]	; (800cff0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d100      	bne.n	800cd7c <RemapAndLinkDMAtoUARTTx+0xd4>
 800cd7a:	e22f      	b.n	800d1dc <RemapAndLinkDMAtoUARTTx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800cd7c:	4a9c      	ldr	r2, [pc, #624]	; (800cff0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d100      	bne.n	800cd84 <RemapAndLinkDMAtoUARTTx+0xdc>
 800cd82:	e23c      	b.n	800d1fe <RemapAndLinkDMAtoUARTTx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800cd84:	4a9a      	ldr	r2, [pc, #616]	; (800cff0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d100      	bne.n	800cd8c <RemapAndLinkDMAtoUARTTx+0xe4>
 800cd8a:	e249      	b.n	800d220 <RemapAndLinkDMAtoUARTTx+0x578>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800cd8c:	4a98      	ldr	r2, [pc, #608]	; (800cff0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d100      	bne.n	800cd94 <RemapAndLinkDMAtoUARTTx+0xec>
 800cd92:	e255      	b.n	800d240 <RemapAndLinkDMAtoUARTTx+0x598>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800cd94:	4a96      	ldr	r2, [pc, #600]	; (800cff0 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d100      	bne.n	800cd9c <RemapAndLinkDMAtoUARTTx+0xf4>
 800cd9a:	e262      	b.n	800d262 <RemapAndLinkDMAtoUARTTx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800cd9c:	4a95      	ldr	r2, [pc, #596]	; (800cff4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d100      	bne.n	800cda4 <RemapAndLinkDMAtoUARTTx+0xfc>
 800cda2:	e26f      	b.n	800d284 <RemapAndLinkDMAtoUARTTx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800cda4:	4a93      	ldr	r2, [pc, #588]	; (800cff4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d100      	bne.n	800cdac <RemapAndLinkDMAtoUARTTx+0x104>
 800cdaa:	e27b      	b.n	800d2a4 <RemapAndLinkDMAtoUARTTx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800cdac:	4a91      	ldr	r2, [pc, #580]	; (800cff4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d100      	bne.n	800cdb4 <RemapAndLinkDMAtoUARTTx+0x10c>
 800cdb2:	e288      	b.n	800d2c6 <RemapAndLinkDMAtoUARTTx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800cdb4:	4a8f      	ldr	r2, [pc, #572]	; (800cff4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d100      	bne.n	800cdbc <RemapAndLinkDMAtoUARTTx+0x114>
 800cdba:	e295      	b.n	800d2e8 <RemapAndLinkDMAtoUARTTx+0x640>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800cdbc:	4a8d      	ldr	r2, [pc, #564]	; (800cff4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d100      	bne.n	800cdc4 <RemapAndLinkDMAtoUARTTx+0x11c>
 800cdc2:	e2a1      	b.n	800d308 <RemapAndLinkDMAtoUARTTx+0x660>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800cdc4:	4a8b      	ldr	r2, [pc, #556]	; (800cff4 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d100      	bne.n	800cdcc <RemapAndLinkDMAtoUARTTx+0x124>
 800cdca:	e2ae      	b.n	800d32a <RemapAndLinkDMAtoUARTTx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800cdcc:	4a8a      	ldr	r2, [pc, #552]	; (800cff8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d100      	bne.n	800cdd4 <RemapAndLinkDMAtoUARTTx+0x12c>
 800cdd2:	e2bb      	b.n	800d34c <RemapAndLinkDMAtoUARTTx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800cdd4:	4a88      	ldr	r2, [pc, #544]	; (800cff8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d100      	bne.n	800cddc <RemapAndLinkDMAtoUARTTx+0x134>
 800cdda:	e2c7      	b.n	800d36c <RemapAndLinkDMAtoUARTTx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800cddc:	4a86      	ldr	r2, [pc, #536]	; (800cff8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d100      	bne.n	800cde4 <RemapAndLinkDMAtoUARTTx+0x13c>
 800cde2:	e2d4      	b.n	800d38e <RemapAndLinkDMAtoUARTTx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800cde4:	4a84      	ldr	r2, [pc, #528]	; (800cff8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d100      	bne.n	800cdec <RemapAndLinkDMAtoUARTTx+0x144>
 800cdea:	e2f7      	b.n	800d3dc <RemapAndLinkDMAtoUARTTx+0x734>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800cdec:	4a82      	ldr	r2, [pc, #520]	; (800cff8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d100      	bne.n	800cdf4 <RemapAndLinkDMAtoUARTTx+0x14c>
 800cdf2:	e303      	b.n	800d3fc <RemapAndLinkDMAtoUARTTx+0x754>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800cdf4:	4a80      	ldr	r2, [pc, #512]	; (800cff8 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d100      	bne.n	800cdfc <RemapAndLinkDMAtoUARTTx+0x154>
 800cdfa:	e310      	b.n	800d41e <RemapAndLinkDMAtoUARTTx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800cdfc:	4a7f      	ldr	r2, [pc, #508]	; (800cffc <RemapAndLinkDMAtoUARTTx+0x354>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d100      	bne.n	800ce04 <RemapAndLinkDMAtoUARTTx+0x15c>
 800ce02:	e31d      	b.n	800d440 <RemapAndLinkDMAtoUARTTx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800ce04:	4a7d      	ldr	r2, [pc, #500]	; (800cffc <RemapAndLinkDMAtoUARTTx+0x354>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d100      	bne.n	800ce0c <RemapAndLinkDMAtoUARTTx+0x164>
 800ce0a:	e328      	b.n	800d45e <RemapAndLinkDMAtoUARTTx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800ce0c:	4a7b      	ldr	r2, [pc, #492]	; (800cffc <RemapAndLinkDMAtoUARTTx+0x354>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d100      	bne.n	800ce14 <RemapAndLinkDMAtoUARTTx+0x16c>
 800ce12:	e335      	b.n	800d480 <RemapAndLinkDMAtoUARTTx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800ce14:	4a79      	ldr	r2, [pc, #484]	; (800cffc <RemapAndLinkDMAtoUARTTx+0x354>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d100      	bne.n	800ce1c <RemapAndLinkDMAtoUARTTx+0x174>
 800ce1a:	e342      	b.n	800d4a2 <RemapAndLinkDMAtoUARTTx+0x7fa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800ce1c:	4a77      	ldr	r2, [pc, #476]	; (800cffc <RemapAndLinkDMAtoUARTTx+0x354>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d100      	bne.n	800ce24 <RemapAndLinkDMAtoUARTTx+0x17c>
 800ce22:	e34d      	b.n	800d4c0 <RemapAndLinkDMAtoUARTTx+0x818>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800ce24:	4a75      	ldr	r2, [pc, #468]	; (800cffc <RemapAndLinkDMAtoUARTTx+0x354>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d11e      	bne.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800ce2a:	4b75      	ldr	r3, [pc, #468]	; (800d000 <RemapAndLinkDMAtoUARTTx+0x358>)
 800ce2c:	680a      	ldr	r2, [r1, #0]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d11a      	bne.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800ce32:	4a74      	ldr	r2, [pc, #464]	; (800d004 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800ce34:	23a8      	movs	r3, #168	; 0xa8
 800ce36:	58d4      	ldr	r4, [r2, r3]
 800ce38:	4d73      	ldr	r5, [pc, #460]	; (800d008 <RemapAndLinkDMAtoUARTTx+0x360>)
 800ce3a:	402c      	ands	r4, r5
 800ce3c:	50d4      	str	r4, [r2, r3]
 800ce3e:	58d5      	ldr	r5, [r2, r3]
 800ce40:	24f0      	movs	r4, #240	; 0xf0
 800ce42:	0324      	lsls	r4, r4, #12
 800ce44:	432c      	orrs	r4, r5
 800ce46:	50d4      	str	r4, [r2, r3]
 800ce48:	e00e      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800ce4a:	4a70      	ldr	r2, [pc, #448]	; (800d00c <RemapAndLinkDMAtoUARTTx+0x364>)
 800ce4c:	680c      	ldr	r4, [r1, #0]
 800ce4e:	4294      	cmp	r4, r2
 800ce50:	d000      	beq.n	800ce54 <RemapAndLinkDMAtoUARTTx+0x1ac>
 800ce52:	e72f      	b.n	800ccb4 <RemapAndLinkDMAtoUARTTx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800ce54:	4a6e      	ldr	r2, [pc, #440]	; (800d010 <RemapAndLinkDMAtoUARTTx+0x368>)
 800ce56:	23a8      	movs	r3, #168	; 0xa8
 800ce58:	58d4      	ldr	r4, [r2, r3]
 800ce5a:	25f0      	movs	r5, #240	; 0xf0
 800ce5c:	43ac      	bics	r4, r5
 800ce5e:	50d4      	str	r4, [r2, r3]
 800ce60:	58d4      	ldr	r4, [r2, r3]
 800ce62:	3d70      	subs	r5, #112	; 0x70
 800ce64:	432c      	orrs	r4, r5
 800ce66:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800ce68:	6601      	str	r1, [r0, #96]	; 0x60
 800ce6a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800ce6c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800ce6e:	4a69      	ldr	r2, [pc, #420]	; (800d014 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800ce70:	680c      	ldr	r4, [r1, #0]
 800ce72:	4294      	cmp	r4, r2
 800ce74:	d000      	beq.n	800ce78 <RemapAndLinkDMAtoUARTTx+0x1d0>
 800ce76:	e721      	b.n	800ccbc <RemapAndLinkDMAtoUARTTx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800ce78:	4a65      	ldr	r2, [pc, #404]	; (800d010 <RemapAndLinkDMAtoUARTTx+0x368>)
 800ce7a:	23a8      	movs	r3, #168	; 0xa8
 800ce7c:	58d4      	ldr	r4, [r2, r3]
 800ce7e:	4d66      	ldr	r5, [pc, #408]	; (800d018 <RemapAndLinkDMAtoUARTTx+0x370>)
 800ce80:	402c      	ands	r4, r5
 800ce82:	50d4      	str	r4, [r2, r3]
 800ce84:	58d5      	ldr	r5, [r2, r3]
 800ce86:	2480      	movs	r4, #128	; 0x80
 800ce88:	0224      	lsls	r4, r4, #8
 800ce8a:	432c      	orrs	r4, r5
 800ce8c:	50d4      	str	r4, [r2, r3]
 800ce8e:	e7eb      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800ce90:	4a62      	ldr	r2, [pc, #392]	; (800d01c <RemapAndLinkDMAtoUARTTx+0x374>)
 800ce92:	680c      	ldr	r4, [r1, #0]
 800ce94:	4294      	cmp	r4, r2
 800ce96:	d000      	beq.n	800ce9a <RemapAndLinkDMAtoUARTTx+0x1f2>
 800ce98:	e714      	b.n	800ccc4 <RemapAndLinkDMAtoUARTTx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800ce9a:	4a5d      	ldr	r2, [pc, #372]	; (800d010 <RemapAndLinkDMAtoUARTTx+0x368>)
 800ce9c:	23a8      	movs	r3, #168	; 0xa8
 800ce9e:	58d4      	ldr	r4, [r2, r3]
 800cea0:	4d5f      	ldr	r5, [pc, #380]	; (800d020 <RemapAndLinkDMAtoUARTTx+0x378>)
 800cea2:	402c      	ands	r4, r5
 800cea4:	50d4      	str	r4, [r2, r3]
 800cea6:	58d5      	ldr	r5, [r2, r3]
 800cea8:	2480      	movs	r4, #128	; 0x80
 800ceaa:	0524      	lsls	r4, r4, #20
 800ceac:	432c      	orrs	r4, r5
 800ceae:	50d4      	str	r4, [r2, r3]
 800ceb0:	e7da      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800ceb2:	4a5c      	ldr	r2, [pc, #368]	; (800d024 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800ceb4:	680c      	ldr	r4, [r1, #0]
 800ceb6:	4294      	cmp	r4, r2
 800ceb8:	d000      	beq.n	800cebc <RemapAndLinkDMAtoUARTTx+0x214>
 800ceba:	e707      	b.n	800cccc <RemapAndLinkDMAtoUARTTx+0x24>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800cebc:	4a51      	ldr	r2, [pc, #324]	; (800d004 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cebe:	23a8      	movs	r3, #168	; 0xa8
 800cec0:	58d4      	ldr	r4, [r2, r3]
 800cec2:	250f      	movs	r5, #15
 800cec4:	43ac      	bics	r4, r5
 800cec6:	50d4      	str	r4, [r2, r3]
 800cec8:	58d4      	ldr	r4, [r2, r3]
 800ceca:	3d07      	subs	r5, #7
 800cecc:	432c      	orrs	r4, r5
 800cece:	50d4      	str	r4, [r2, r3]
 800ced0:	e7ca      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800ced2:	4a55      	ldr	r2, [pc, #340]	; (800d028 <RemapAndLinkDMAtoUARTTx+0x380>)
 800ced4:	680c      	ldr	r4, [r1, #0]
 800ced6:	4294      	cmp	r4, r2
 800ced8:	d000      	beq.n	800cedc <RemapAndLinkDMAtoUARTTx+0x234>
 800ceda:	e6fb      	b.n	800ccd4 <RemapAndLinkDMAtoUARTTx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800cedc:	4a49      	ldr	r2, [pc, #292]	; (800d004 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cede:	23a8      	movs	r3, #168	; 0xa8
 800cee0:	58d4      	ldr	r4, [r2, r3]
 800cee2:	4d4d      	ldr	r5, [pc, #308]	; (800d018 <RemapAndLinkDMAtoUARTTx+0x370>)
 800cee4:	402c      	ands	r4, r5
 800cee6:	50d4      	str	r4, [r2, r3]
 800cee8:	58d5      	ldr	r5, [r2, r3]
 800ceea:	2480      	movs	r4, #128	; 0x80
 800ceec:	0224      	lsls	r4, r4, #8
 800ceee:	432c      	orrs	r4, r5
 800cef0:	50d4      	str	r4, [r2, r3]
 800cef2:	e7b9      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800cef4:	4a42      	ldr	r2, [pc, #264]	; (800d000 <RemapAndLinkDMAtoUARTTx+0x358>)
 800cef6:	680c      	ldr	r4, [r1, #0]
 800cef8:	4294      	cmp	r4, r2
 800cefa:	d000      	beq.n	800cefe <RemapAndLinkDMAtoUARTTx+0x256>
 800cefc:	e6ee      	b.n	800ccdc <RemapAndLinkDMAtoUARTTx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800cefe:	4a41      	ldr	r2, [pc, #260]	; (800d004 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cf00:	23a8      	movs	r3, #168	; 0xa8
 800cf02:	58d4      	ldr	r4, [r2, r3]
 800cf04:	4d40      	ldr	r5, [pc, #256]	; (800d008 <RemapAndLinkDMAtoUARTTx+0x360>)
 800cf06:	402c      	ands	r4, r5
 800cf08:	50d4      	str	r4, [r2, r3]
 800cf0a:	58d5      	ldr	r5, [r2, r3]
 800cf0c:	2480      	movs	r4, #128	; 0x80
 800cf0e:	0324      	lsls	r4, r4, #12
 800cf10:	432c      	orrs	r4, r5
 800cf12:	50d4      	str	r4, [r2, r3]
 800cf14:	e7a8      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800cf16:	4a3d      	ldr	r2, [pc, #244]	; (800d00c <RemapAndLinkDMAtoUARTTx+0x364>)
 800cf18:	680c      	ldr	r4, [r1, #0]
 800cf1a:	4294      	cmp	r4, r2
 800cf1c:	d000      	beq.n	800cf20 <RemapAndLinkDMAtoUARTTx+0x278>
 800cf1e:	e6e1      	b.n	800cce4 <RemapAndLinkDMAtoUARTTx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800cf20:	4a3b      	ldr	r2, [pc, #236]	; (800d010 <RemapAndLinkDMAtoUARTTx+0x368>)
 800cf22:	23a8      	movs	r3, #168	; 0xa8
 800cf24:	58d4      	ldr	r4, [r2, r3]
 800cf26:	25f0      	movs	r5, #240	; 0xf0
 800cf28:	43ac      	bics	r4, r5
 800cf2a:	50d4      	str	r4, [r2, r3]
 800cf2c:	58d4      	ldr	r4, [r2, r3]
 800cf2e:	3d60      	subs	r5, #96	; 0x60
 800cf30:	432c      	orrs	r4, r5
 800cf32:	50d4      	str	r4, [r2, r3]
 800cf34:	e798      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800cf36:	4a37      	ldr	r2, [pc, #220]	; (800d014 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800cf38:	680c      	ldr	r4, [r1, #0]
 800cf3a:	4294      	cmp	r4, r2
 800cf3c:	d000      	beq.n	800cf40 <RemapAndLinkDMAtoUARTTx+0x298>
 800cf3e:	e6d5      	b.n	800ccec <RemapAndLinkDMAtoUARTTx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800cf40:	4a33      	ldr	r2, [pc, #204]	; (800d010 <RemapAndLinkDMAtoUARTTx+0x368>)
 800cf42:	23a8      	movs	r3, #168	; 0xa8
 800cf44:	58d4      	ldr	r4, [r2, r3]
 800cf46:	4d34      	ldr	r5, [pc, #208]	; (800d018 <RemapAndLinkDMAtoUARTTx+0x370>)
 800cf48:	402c      	ands	r4, r5
 800cf4a:	50d4      	str	r4, [r2, r3]
 800cf4c:	58d5      	ldr	r5, [r2, r3]
 800cf4e:	2490      	movs	r4, #144	; 0x90
 800cf50:	0224      	lsls	r4, r4, #8
 800cf52:	432c      	orrs	r4, r5
 800cf54:	50d4      	str	r4, [r2, r3]
 800cf56:	e787      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800cf58:	4a30      	ldr	r2, [pc, #192]	; (800d01c <RemapAndLinkDMAtoUARTTx+0x374>)
 800cf5a:	680c      	ldr	r4, [r1, #0]
 800cf5c:	4294      	cmp	r4, r2
 800cf5e:	d000      	beq.n	800cf62 <RemapAndLinkDMAtoUARTTx+0x2ba>
 800cf60:	e6c8      	b.n	800ccf4 <RemapAndLinkDMAtoUARTTx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800cf62:	4a2b      	ldr	r2, [pc, #172]	; (800d010 <RemapAndLinkDMAtoUARTTx+0x368>)
 800cf64:	23a8      	movs	r3, #168	; 0xa8
 800cf66:	58d4      	ldr	r4, [r2, r3]
 800cf68:	4d2d      	ldr	r5, [pc, #180]	; (800d020 <RemapAndLinkDMAtoUARTTx+0x378>)
 800cf6a:	402c      	ands	r4, r5
 800cf6c:	50d4      	str	r4, [r2, r3]
 800cf6e:	58d5      	ldr	r5, [r2, r3]
 800cf70:	2490      	movs	r4, #144	; 0x90
 800cf72:	0524      	lsls	r4, r4, #20
 800cf74:	432c      	orrs	r4, r5
 800cf76:	50d4      	str	r4, [r2, r3]
 800cf78:	e776      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800cf7a:	4a2a      	ldr	r2, [pc, #168]	; (800d024 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800cf7c:	680c      	ldr	r4, [r1, #0]
 800cf7e:	4294      	cmp	r4, r2
 800cf80:	d000      	beq.n	800cf84 <RemapAndLinkDMAtoUARTTx+0x2dc>
 800cf82:	e6bb      	b.n	800ccfc <RemapAndLinkDMAtoUARTTx+0x54>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800cf84:	4a1f      	ldr	r2, [pc, #124]	; (800d004 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cf86:	23a8      	movs	r3, #168	; 0xa8
 800cf88:	58d4      	ldr	r4, [r2, r3]
 800cf8a:	250f      	movs	r5, #15
 800cf8c:	43ac      	bics	r4, r5
 800cf8e:	50d4      	str	r4, [r2, r3]
 800cf90:	58d4      	ldr	r4, [r2, r3]
 800cf92:	3d06      	subs	r5, #6
 800cf94:	432c      	orrs	r4, r5
 800cf96:	50d4      	str	r4, [r2, r3]
 800cf98:	e766      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800cf9a:	4a23      	ldr	r2, [pc, #140]	; (800d028 <RemapAndLinkDMAtoUARTTx+0x380>)
 800cf9c:	680c      	ldr	r4, [r1, #0]
 800cf9e:	4294      	cmp	r4, r2
 800cfa0:	d000      	beq.n	800cfa4 <RemapAndLinkDMAtoUARTTx+0x2fc>
 800cfa2:	e6af      	b.n	800cd04 <RemapAndLinkDMAtoUARTTx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800cfa4:	4a17      	ldr	r2, [pc, #92]	; (800d004 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cfa6:	23a8      	movs	r3, #168	; 0xa8
 800cfa8:	58d4      	ldr	r4, [r2, r3]
 800cfaa:	4d1b      	ldr	r5, [pc, #108]	; (800d018 <RemapAndLinkDMAtoUARTTx+0x370>)
 800cfac:	402c      	ands	r4, r5
 800cfae:	50d4      	str	r4, [r2, r3]
 800cfb0:	58d5      	ldr	r5, [r2, r3]
 800cfb2:	2490      	movs	r4, #144	; 0x90
 800cfb4:	0224      	lsls	r4, r4, #8
 800cfb6:	432c      	orrs	r4, r5
 800cfb8:	50d4      	str	r4, [r2, r3]
 800cfba:	e755      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800cfbc:	4a10      	ldr	r2, [pc, #64]	; (800d000 <RemapAndLinkDMAtoUARTTx+0x358>)
 800cfbe:	680c      	ldr	r4, [r1, #0]
 800cfc0:	4294      	cmp	r4, r2
 800cfc2:	d000      	beq.n	800cfc6 <RemapAndLinkDMAtoUARTTx+0x31e>
 800cfc4:	e6a2      	b.n	800cd0c <RemapAndLinkDMAtoUARTTx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800cfc6:	4a0f      	ldr	r2, [pc, #60]	; (800d004 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cfc8:	23a8      	movs	r3, #168	; 0xa8
 800cfca:	58d4      	ldr	r4, [r2, r3]
 800cfcc:	4d0e      	ldr	r5, [pc, #56]	; (800d008 <RemapAndLinkDMAtoUARTTx+0x360>)
 800cfce:	402c      	ands	r4, r5
 800cfd0:	50d4      	str	r4, [r2, r3]
 800cfd2:	58d5      	ldr	r5, [r2, r3]
 800cfd4:	2490      	movs	r4, #144	; 0x90
 800cfd6:	0324      	lsls	r4, r4, #12
 800cfd8:	432c      	orrs	r4, r5
 800cfda:	50d4      	str	r4, [r2, r3]
 800cfdc:	e744      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800cfde:	46c0      	nop			; (mov r8, r8)
 800cfe0:	40013800 	.word	0x40013800
 800cfe4:	40004400 	.word	0x40004400
 800cfe8:	40004800 	.word	0x40004800
 800cfec:	40004c00 	.word	0x40004c00
 800cff0:	40005000 	.word	0x40005000
 800cff4:	40011400 	.word	0x40011400
 800cff8:	40011800 	.word	0x40011800
 800cffc:	40011c00 	.word	0x40011c00
 800d000:	40020458 	.word	0x40020458
 800d004:	40020400 	.word	0x40020400
 800d008:	fff0ffff 	.word	0xfff0ffff
 800d00c:	4002001c 	.word	0x4002001c
 800d010:	40020000 	.word	0x40020000
 800d014:	40020044 	.word	0x40020044
 800d018:	ffff0fff 	.word	0xffff0fff
 800d01c:	40020080 	.word	0x40020080
 800d020:	f0ffffff 	.word	0xf0ffffff
 800d024:	40020408 	.word	0x40020408
 800d028:	40020444 	.word	0x40020444
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d02c:	4ae0      	ldr	r2, [pc, #896]	; (800d3b0 <RemapAndLinkDMAtoUARTTx+0x708>)
 800d02e:	680c      	ldr	r4, [r1, #0]
 800d030:	4294      	cmp	r4, r2
 800d032:	d000      	beq.n	800d036 <RemapAndLinkDMAtoUARTTx+0x38e>
 800d034:	e66e      	b.n	800cd14 <RemapAndLinkDMAtoUARTTx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d036:	4adf      	ldr	r2, [pc, #892]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d038:	23a8      	movs	r3, #168	; 0xa8
 800d03a:	58d4      	ldr	r4, [r2, r3]
 800d03c:	25f0      	movs	r5, #240	; 0xf0
 800d03e:	43ac      	bics	r4, r5
 800d040:	50d4      	str	r4, [r2, r3]
 800d042:	58d4      	ldr	r4, [r2, r3]
 800d044:	3d50      	subs	r5, #80	; 0x50
 800d046:	432c      	orrs	r4, r5
 800d048:	50d4      	str	r4, [r2, r3]
 800d04a:	e70d      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d04c:	4ada      	ldr	r2, [pc, #872]	; (800d3b8 <RemapAndLinkDMAtoUARTTx+0x710>)
 800d04e:	680c      	ldr	r4, [r1, #0]
 800d050:	4294      	cmp	r4, r2
 800d052:	d000      	beq.n	800d056 <RemapAndLinkDMAtoUARTTx+0x3ae>
 800d054:	e662      	b.n	800cd1c <RemapAndLinkDMAtoUARTTx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d056:	4ad7      	ldr	r2, [pc, #860]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d058:	23a8      	movs	r3, #168	; 0xa8
 800d05a:	58d4      	ldr	r4, [r2, r3]
 800d05c:	4dd7      	ldr	r5, [pc, #860]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x714>)
 800d05e:	402c      	ands	r4, r5
 800d060:	50d4      	str	r4, [r2, r3]
 800d062:	58d5      	ldr	r5, [r2, r3]
 800d064:	24a0      	movs	r4, #160	; 0xa0
 800d066:	0224      	lsls	r4, r4, #8
 800d068:	432c      	orrs	r4, r5
 800d06a:	50d4      	str	r4, [r2, r3]
 800d06c:	e6fc      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d06e:	4ad4      	ldr	r2, [pc, #848]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x718>)
 800d070:	680c      	ldr	r4, [r1, #0]
 800d072:	4294      	cmp	r4, r2
 800d074:	d000      	beq.n	800d078 <RemapAndLinkDMAtoUARTTx+0x3d0>
 800d076:	e655      	b.n	800cd24 <RemapAndLinkDMAtoUARTTx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d078:	4ace      	ldr	r2, [pc, #824]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d07a:	23a8      	movs	r3, #168	; 0xa8
 800d07c:	58d4      	ldr	r4, [r2, r3]
 800d07e:	4dd1      	ldr	r5, [pc, #836]	; (800d3c4 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800d080:	402c      	ands	r4, r5
 800d082:	50d4      	str	r4, [r2, r3]
 800d084:	58d5      	ldr	r5, [r2, r3]
 800d086:	24a0      	movs	r4, #160	; 0xa0
 800d088:	0524      	lsls	r4, r4, #20
 800d08a:	432c      	orrs	r4, r5
 800d08c:	50d4      	str	r4, [r2, r3]
 800d08e:	e6eb      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d090:	4acd      	ldr	r2, [pc, #820]	; (800d3c8 <RemapAndLinkDMAtoUARTTx+0x720>)
 800d092:	680c      	ldr	r4, [r1, #0]
 800d094:	4294      	cmp	r4, r2
 800d096:	d000      	beq.n	800d09a <RemapAndLinkDMAtoUARTTx+0x3f2>
 800d098:	e648      	b.n	800cd2c <RemapAndLinkDMAtoUARTTx+0x84>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d09a:	4acc      	ldr	r2, [pc, #816]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d09c:	23a8      	movs	r3, #168	; 0xa8
 800d09e:	58d4      	ldr	r4, [r2, r3]
 800d0a0:	250f      	movs	r5, #15
 800d0a2:	43ac      	bics	r4, r5
 800d0a4:	50d4      	str	r4, [r2, r3]
 800d0a6:	58d4      	ldr	r4, [r2, r3]
 800d0a8:	3d05      	subs	r5, #5
 800d0aa:	432c      	orrs	r4, r5
 800d0ac:	50d4      	str	r4, [r2, r3]
 800d0ae:	e6db      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d0b0:	4ac7      	ldr	r2, [pc, #796]	; (800d3d0 <RemapAndLinkDMAtoUARTTx+0x728>)
 800d0b2:	680c      	ldr	r4, [r1, #0]
 800d0b4:	4294      	cmp	r4, r2
 800d0b6:	d000      	beq.n	800d0ba <RemapAndLinkDMAtoUARTTx+0x412>
 800d0b8:	e63c      	b.n	800cd34 <RemapAndLinkDMAtoUARTTx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d0ba:	4ac4      	ldr	r2, [pc, #784]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d0bc:	23a8      	movs	r3, #168	; 0xa8
 800d0be:	58d4      	ldr	r4, [r2, r3]
 800d0c0:	4dbe      	ldr	r5, [pc, #760]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x714>)
 800d0c2:	402c      	ands	r4, r5
 800d0c4:	50d4      	str	r4, [r2, r3]
 800d0c6:	58d5      	ldr	r5, [r2, r3]
 800d0c8:	24a0      	movs	r4, #160	; 0xa0
 800d0ca:	0224      	lsls	r4, r4, #8
 800d0cc:	432c      	orrs	r4, r5
 800d0ce:	50d4      	str	r4, [r2, r3]
 800d0d0:	e6ca      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d0d2:	4ac0      	ldr	r2, [pc, #768]	; (800d3d4 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800d0d4:	680c      	ldr	r4, [r1, #0]
 800d0d6:	4294      	cmp	r4, r2
 800d0d8:	d000      	beq.n	800d0dc <RemapAndLinkDMAtoUARTTx+0x434>
 800d0da:	e62f      	b.n	800cd3c <RemapAndLinkDMAtoUARTTx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800d0dc:	4abb      	ldr	r2, [pc, #748]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d0de:	23a8      	movs	r3, #168	; 0xa8
 800d0e0:	58d4      	ldr	r4, [r2, r3]
 800d0e2:	4dbd      	ldr	r5, [pc, #756]	; (800d3d8 <RemapAndLinkDMAtoUARTTx+0x730>)
 800d0e4:	402c      	ands	r4, r5
 800d0e6:	50d4      	str	r4, [r2, r3]
 800d0e8:	58d5      	ldr	r5, [r2, r3]
 800d0ea:	24a0      	movs	r4, #160	; 0xa0
 800d0ec:	0324      	lsls	r4, r4, #12
 800d0ee:	432c      	orrs	r4, r5
 800d0f0:	50d4      	str	r4, [r2, r3]
 800d0f2:	e6b9      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d0f4:	4aae      	ldr	r2, [pc, #696]	; (800d3b0 <RemapAndLinkDMAtoUARTTx+0x708>)
 800d0f6:	680c      	ldr	r4, [r1, #0]
 800d0f8:	4294      	cmp	r4, r2
 800d0fa:	d000      	beq.n	800d0fe <RemapAndLinkDMAtoUARTTx+0x456>
 800d0fc:	e622      	b.n	800cd44 <RemapAndLinkDMAtoUARTTx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d0fe:	4aad      	ldr	r2, [pc, #692]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d100:	23a8      	movs	r3, #168	; 0xa8
 800d102:	58d4      	ldr	r4, [r2, r3]
 800d104:	25f0      	movs	r5, #240	; 0xf0
 800d106:	43ac      	bics	r4, r5
 800d108:	50d4      	str	r4, [r2, r3]
 800d10a:	58d4      	ldr	r4, [r2, r3]
 800d10c:	3d40      	subs	r5, #64	; 0x40
 800d10e:	432c      	orrs	r4, r5
 800d110:	50d4      	str	r4, [r2, r3]
 800d112:	e6a9      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d114:	4aa8      	ldr	r2, [pc, #672]	; (800d3b8 <RemapAndLinkDMAtoUARTTx+0x710>)
 800d116:	680c      	ldr	r4, [r1, #0]
 800d118:	4294      	cmp	r4, r2
 800d11a:	d000      	beq.n	800d11e <RemapAndLinkDMAtoUARTTx+0x476>
 800d11c:	e616      	b.n	800cd4c <RemapAndLinkDMAtoUARTTx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d11e:	4aa5      	ldr	r2, [pc, #660]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d120:	23a8      	movs	r3, #168	; 0xa8
 800d122:	58d4      	ldr	r4, [r2, r3]
 800d124:	4da5      	ldr	r5, [pc, #660]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x714>)
 800d126:	402c      	ands	r4, r5
 800d128:	50d4      	str	r4, [r2, r3]
 800d12a:	58d5      	ldr	r5, [r2, r3]
 800d12c:	24b0      	movs	r4, #176	; 0xb0
 800d12e:	0224      	lsls	r4, r4, #8
 800d130:	432c      	orrs	r4, r5
 800d132:	50d4      	str	r4, [r2, r3]
 800d134:	e698      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d136:	4aa2      	ldr	r2, [pc, #648]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x718>)
 800d138:	680c      	ldr	r4, [r1, #0]
 800d13a:	4294      	cmp	r4, r2
 800d13c:	d000      	beq.n	800d140 <RemapAndLinkDMAtoUARTTx+0x498>
 800d13e:	e609      	b.n	800cd54 <RemapAndLinkDMAtoUARTTx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d140:	4a9c      	ldr	r2, [pc, #624]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d142:	23a8      	movs	r3, #168	; 0xa8
 800d144:	58d4      	ldr	r4, [r2, r3]
 800d146:	4d9f      	ldr	r5, [pc, #636]	; (800d3c4 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800d148:	402c      	ands	r4, r5
 800d14a:	50d4      	str	r4, [r2, r3]
 800d14c:	58d5      	ldr	r5, [r2, r3]
 800d14e:	24b0      	movs	r4, #176	; 0xb0
 800d150:	0524      	lsls	r4, r4, #20
 800d152:	432c      	orrs	r4, r5
 800d154:	50d4      	str	r4, [r2, r3]
 800d156:	e687      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d158:	4a9b      	ldr	r2, [pc, #620]	; (800d3c8 <RemapAndLinkDMAtoUARTTx+0x720>)
 800d15a:	680c      	ldr	r4, [r1, #0]
 800d15c:	4294      	cmp	r4, r2
 800d15e:	d000      	beq.n	800d162 <RemapAndLinkDMAtoUARTTx+0x4ba>
 800d160:	e5fc      	b.n	800cd5c <RemapAndLinkDMAtoUARTTx+0xb4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d162:	4a9a      	ldr	r2, [pc, #616]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d164:	23a8      	movs	r3, #168	; 0xa8
 800d166:	58d4      	ldr	r4, [r2, r3]
 800d168:	250f      	movs	r5, #15
 800d16a:	43ac      	bics	r4, r5
 800d16c:	50d4      	str	r4, [r2, r3]
 800d16e:	58d4      	ldr	r4, [r2, r3]
 800d170:	3d04      	subs	r5, #4
 800d172:	432c      	orrs	r4, r5
 800d174:	50d4      	str	r4, [r2, r3]
 800d176:	e677      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d178:	4a95      	ldr	r2, [pc, #596]	; (800d3d0 <RemapAndLinkDMAtoUARTTx+0x728>)
 800d17a:	680c      	ldr	r4, [r1, #0]
 800d17c:	4294      	cmp	r4, r2
 800d17e:	d000      	beq.n	800d182 <RemapAndLinkDMAtoUARTTx+0x4da>
 800d180:	e5f0      	b.n	800cd64 <RemapAndLinkDMAtoUARTTx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d182:	4a92      	ldr	r2, [pc, #584]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d184:	23a8      	movs	r3, #168	; 0xa8
 800d186:	58d4      	ldr	r4, [r2, r3]
 800d188:	4d8c      	ldr	r5, [pc, #560]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x714>)
 800d18a:	402c      	ands	r4, r5
 800d18c:	50d4      	str	r4, [r2, r3]
 800d18e:	58d5      	ldr	r5, [r2, r3]
 800d190:	24b0      	movs	r4, #176	; 0xb0
 800d192:	0224      	lsls	r4, r4, #8
 800d194:	432c      	orrs	r4, r5
 800d196:	50d4      	str	r4, [r2, r3]
 800d198:	e666      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d19a:	4a8e      	ldr	r2, [pc, #568]	; (800d3d4 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800d19c:	680c      	ldr	r4, [r1, #0]
 800d19e:	4294      	cmp	r4, r2
 800d1a0:	d000      	beq.n	800d1a4 <RemapAndLinkDMAtoUARTTx+0x4fc>
 800d1a2:	e5e3      	b.n	800cd6c <RemapAndLinkDMAtoUARTTx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800d1a4:	4a89      	ldr	r2, [pc, #548]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d1a6:	23a8      	movs	r3, #168	; 0xa8
 800d1a8:	58d4      	ldr	r4, [r2, r3]
 800d1aa:	4d8b      	ldr	r5, [pc, #556]	; (800d3d8 <RemapAndLinkDMAtoUARTTx+0x730>)
 800d1ac:	402c      	ands	r4, r5
 800d1ae:	50d4      	str	r4, [r2, r3]
 800d1b0:	58d5      	ldr	r5, [r2, r3]
 800d1b2:	24b0      	movs	r4, #176	; 0xb0
 800d1b4:	0324      	lsls	r4, r4, #12
 800d1b6:	432c      	orrs	r4, r5
 800d1b8:	50d4      	str	r4, [r2, r3]
 800d1ba:	e655      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d1bc:	4a7c      	ldr	r2, [pc, #496]	; (800d3b0 <RemapAndLinkDMAtoUARTTx+0x708>)
 800d1be:	680c      	ldr	r4, [r1, #0]
 800d1c0:	4294      	cmp	r4, r2
 800d1c2:	d000      	beq.n	800d1c6 <RemapAndLinkDMAtoUARTTx+0x51e>
 800d1c4:	e5d6      	b.n	800cd74 <RemapAndLinkDMAtoUARTTx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d1c6:	4a7b      	ldr	r2, [pc, #492]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d1c8:	23a8      	movs	r3, #168	; 0xa8
 800d1ca:	58d4      	ldr	r4, [r2, r3]
 800d1cc:	25f0      	movs	r5, #240	; 0xf0
 800d1ce:	43ac      	bics	r4, r5
 800d1d0:	50d4      	str	r4, [r2, r3]
 800d1d2:	58d4      	ldr	r4, [r2, r3]
 800d1d4:	3d30      	subs	r5, #48	; 0x30
 800d1d6:	432c      	orrs	r4, r5
 800d1d8:	50d4      	str	r4, [r2, r3]
 800d1da:	e645      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d1dc:	4a76      	ldr	r2, [pc, #472]	; (800d3b8 <RemapAndLinkDMAtoUARTTx+0x710>)
 800d1de:	680c      	ldr	r4, [r1, #0]
 800d1e0:	4294      	cmp	r4, r2
 800d1e2:	d000      	beq.n	800d1e6 <RemapAndLinkDMAtoUARTTx+0x53e>
 800d1e4:	e5ca      	b.n	800cd7c <RemapAndLinkDMAtoUARTTx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d1e6:	4a73      	ldr	r2, [pc, #460]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d1e8:	23a8      	movs	r3, #168	; 0xa8
 800d1ea:	58d4      	ldr	r4, [r2, r3]
 800d1ec:	4d73      	ldr	r5, [pc, #460]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x714>)
 800d1ee:	402c      	ands	r4, r5
 800d1f0:	50d4      	str	r4, [r2, r3]
 800d1f2:	58d5      	ldr	r5, [r2, r3]
 800d1f4:	24c0      	movs	r4, #192	; 0xc0
 800d1f6:	0224      	lsls	r4, r4, #8
 800d1f8:	432c      	orrs	r4, r5
 800d1fa:	50d4      	str	r4, [r2, r3]
 800d1fc:	e634      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d1fe:	4a70      	ldr	r2, [pc, #448]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x718>)
 800d200:	680c      	ldr	r4, [r1, #0]
 800d202:	4294      	cmp	r4, r2
 800d204:	d000      	beq.n	800d208 <RemapAndLinkDMAtoUARTTx+0x560>
 800d206:	e5bd      	b.n	800cd84 <RemapAndLinkDMAtoUARTTx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d208:	4a6a      	ldr	r2, [pc, #424]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d20a:	23a8      	movs	r3, #168	; 0xa8
 800d20c:	58d4      	ldr	r4, [r2, r3]
 800d20e:	4d6d      	ldr	r5, [pc, #436]	; (800d3c4 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800d210:	402c      	ands	r4, r5
 800d212:	50d4      	str	r4, [r2, r3]
 800d214:	58d5      	ldr	r5, [r2, r3]
 800d216:	24c0      	movs	r4, #192	; 0xc0
 800d218:	0524      	lsls	r4, r4, #20
 800d21a:	432c      	orrs	r4, r5
 800d21c:	50d4      	str	r4, [r2, r3]
 800d21e:	e623      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d220:	4a69      	ldr	r2, [pc, #420]	; (800d3c8 <RemapAndLinkDMAtoUARTTx+0x720>)
 800d222:	680c      	ldr	r4, [r1, #0]
 800d224:	4294      	cmp	r4, r2
 800d226:	d000      	beq.n	800d22a <RemapAndLinkDMAtoUARTTx+0x582>
 800d228:	e5b0      	b.n	800cd8c <RemapAndLinkDMAtoUARTTx+0xe4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d22a:	4a68      	ldr	r2, [pc, #416]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d22c:	23a8      	movs	r3, #168	; 0xa8
 800d22e:	58d4      	ldr	r4, [r2, r3]
 800d230:	250f      	movs	r5, #15
 800d232:	43ac      	bics	r4, r5
 800d234:	50d4      	str	r4, [r2, r3]
 800d236:	58d4      	ldr	r4, [r2, r3]
 800d238:	3d03      	subs	r5, #3
 800d23a:	432c      	orrs	r4, r5
 800d23c:	50d4      	str	r4, [r2, r3]
 800d23e:	e613      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d240:	4a63      	ldr	r2, [pc, #396]	; (800d3d0 <RemapAndLinkDMAtoUARTTx+0x728>)
 800d242:	680c      	ldr	r4, [r1, #0]
 800d244:	4294      	cmp	r4, r2
 800d246:	d000      	beq.n	800d24a <RemapAndLinkDMAtoUARTTx+0x5a2>
 800d248:	e5a4      	b.n	800cd94 <RemapAndLinkDMAtoUARTTx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d24a:	4a60      	ldr	r2, [pc, #384]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d24c:	23a8      	movs	r3, #168	; 0xa8
 800d24e:	58d4      	ldr	r4, [r2, r3]
 800d250:	4d5a      	ldr	r5, [pc, #360]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x714>)
 800d252:	402c      	ands	r4, r5
 800d254:	50d4      	str	r4, [r2, r3]
 800d256:	58d5      	ldr	r5, [r2, r3]
 800d258:	24c0      	movs	r4, #192	; 0xc0
 800d25a:	0224      	lsls	r4, r4, #8
 800d25c:	432c      	orrs	r4, r5
 800d25e:	50d4      	str	r4, [r2, r3]
 800d260:	e602      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d262:	4a5c      	ldr	r2, [pc, #368]	; (800d3d4 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800d264:	680c      	ldr	r4, [r1, #0]
 800d266:	4294      	cmp	r4, r2
 800d268:	d000      	beq.n	800d26c <RemapAndLinkDMAtoUARTTx+0x5c4>
 800d26a:	e597      	b.n	800cd9c <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d26c:	4a57      	ldr	r2, [pc, #348]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d26e:	23a8      	movs	r3, #168	; 0xa8
 800d270:	58d4      	ldr	r4, [r2, r3]
 800d272:	4d59      	ldr	r5, [pc, #356]	; (800d3d8 <RemapAndLinkDMAtoUARTTx+0x730>)
 800d274:	402c      	ands	r4, r5
 800d276:	50d4      	str	r4, [r2, r3]
 800d278:	58d5      	ldr	r5, [r2, r3]
 800d27a:	24c0      	movs	r4, #192	; 0xc0
 800d27c:	0324      	lsls	r4, r4, #12
 800d27e:	432c      	orrs	r4, r5
 800d280:	50d4      	str	r4, [r2, r3]
 800d282:	e5f1      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d284:	4a4a      	ldr	r2, [pc, #296]	; (800d3b0 <RemapAndLinkDMAtoUARTTx+0x708>)
 800d286:	680c      	ldr	r4, [r1, #0]
 800d288:	4294      	cmp	r4, r2
 800d28a:	d000      	beq.n	800d28e <RemapAndLinkDMAtoUARTTx+0x5e6>
 800d28c:	e58a      	b.n	800cda4 <RemapAndLinkDMAtoUARTTx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d28e:	4a49      	ldr	r2, [pc, #292]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d290:	23a8      	movs	r3, #168	; 0xa8
 800d292:	58d4      	ldr	r4, [r2, r3]
 800d294:	25f0      	movs	r5, #240	; 0xf0
 800d296:	43ac      	bics	r4, r5
 800d298:	50d4      	str	r4, [r2, r3]
 800d29a:	58d4      	ldr	r4, [r2, r3]
 800d29c:	3d20      	subs	r5, #32
 800d29e:	432c      	orrs	r4, r5
 800d2a0:	50d4      	str	r4, [r2, r3]
 800d2a2:	e5e1      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d2a4:	4a44      	ldr	r2, [pc, #272]	; (800d3b8 <RemapAndLinkDMAtoUARTTx+0x710>)
 800d2a6:	680c      	ldr	r4, [r1, #0]
 800d2a8:	4294      	cmp	r4, r2
 800d2aa:	d000      	beq.n	800d2ae <RemapAndLinkDMAtoUARTTx+0x606>
 800d2ac:	e57e      	b.n	800cdac <RemapAndLinkDMAtoUARTTx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d2ae:	4a41      	ldr	r2, [pc, #260]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d2b0:	23a8      	movs	r3, #168	; 0xa8
 800d2b2:	58d4      	ldr	r4, [r2, r3]
 800d2b4:	4d41      	ldr	r5, [pc, #260]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x714>)
 800d2b6:	402c      	ands	r4, r5
 800d2b8:	50d4      	str	r4, [r2, r3]
 800d2ba:	58d5      	ldr	r5, [r2, r3]
 800d2bc:	24d0      	movs	r4, #208	; 0xd0
 800d2be:	0224      	lsls	r4, r4, #8
 800d2c0:	432c      	orrs	r4, r5
 800d2c2:	50d4      	str	r4, [r2, r3]
 800d2c4:	e5d0      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d2c6:	4a3e      	ldr	r2, [pc, #248]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x718>)
 800d2c8:	680c      	ldr	r4, [r1, #0]
 800d2ca:	4294      	cmp	r4, r2
 800d2cc:	d000      	beq.n	800d2d0 <RemapAndLinkDMAtoUARTTx+0x628>
 800d2ce:	e571      	b.n	800cdb4 <RemapAndLinkDMAtoUARTTx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d2d0:	4a38      	ldr	r2, [pc, #224]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d2d2:	23a8      	movs	r3, #168	; 0xa8
 800d2d4:	58d4      	ldr	r4, [r2, r3]
 800d2d6:	4d3b      	ldr	r5, [pc, #236]	; (800d3c4 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800d2d8:	402c      	ands	r4, r5
 800d2da:	50d4      	str	r4, [r2, r3]
 800d2dc:	58d5      	ldr	r5, [r2, r3]
 800d2de:	24d0      	movs	r4, #208	; 0xd0
 800d2e0:	0524      	lsls	r4, r4, #20
 800d2e2:	432c      	orrs	r4, r5
 800d2e4:	50d4      	str	r4, [r2, r3]
 800d2e6:	e5bf      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d2e8:	4a37      	ldr	r2, [pc, #220]	; (800d3c8 <RemapAndLinkDMAtoUARTTx+0x720>)
 800d2ea:	680c      	ldr	r4, [r1, #0]
 800d2ec:	4294      	cmp	r4, r2
 800d2ee:	d000      	beq.n	800d2f2 <RemapAndLinkDMAtoUARTTx+0x64a>
 800d2f0:	e564      	b.n	800cdbc <RemapAndLinkDMAtoUARTTx+0x114>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d2f2:	4a36      	ldr	r2, [pc, #216]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d2f4:	23a8      	movs	r3, #168	; 0xa8
 800d2f6:	58d4      	ldr	r4, [r2, r3]
 800d2f8:	250f      	movs	r5, #15
 800d2fa:	43ac      	bics	r4, r5
 800d2fc:	50d4      	str	r4, [r2, r3]
 800d2fe:	58d4      	ldr	r4, [r2, r3]
 800d300:	3d02      	subs	r5, #2
 800d302:	432c      	orrs	r4, r5
 800d304:	50d4      	str	r4, [r2, r3]
 800d306:	e5af      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d308:	4a31      	ldr	r2, [pc, #196]	; (800d3d0 <RemapAndLinkDMAtoUARTTx+0x728>)
 800d30a:	680c      	ldr	r4, [r1, #0]
 800d30c:	4294      	cmp	r4, r2
 800d30e:	d000      	beq.n	800d312 <RemapAndLinkDMAtoUARTTx+0x66a>
 800d310:	e558      	b.n	800cdc4 <RemapAndLinkDMAtoUARTTx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d312:	4a2e      	ldr	r2, [pc, #184]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d314:	23a8      	movs	r3, #168	; 0xa8
 800d316:	58d4      	ldr	r4, [r2, r3]
 800d318:	4d28      	ldr	r5, [pc, #160]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x714>)
 800d31a:	402c      	ands	r4, r5
 800d31c:	50d4      	str	r4, [r2, r3]
 800d31e:	58d5      	ldr	r5, [r2, r3]
 800d320:	24d0      	movs	r4, #208	; 0xd0
 800d322:	0224      	lsls	r4, r4, #8
 800d324:	432c      	orrs	r4, r5
 800d326:	50d4      	str	r4, [r2, r3]
 800d328:	e59e      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d32a:	4a2a      	ldr	r2, [pc, #168]	; (800d3d4 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800d32c:	680c      	ldr	r4, [r1, #0]
 800d32e:	4294      	cmp	r4, r2
 800d330:	d000      	beq.n	800d334 <RemapAndLinkDMAtoUARTTx+0x68c>
 800d332:	e54b      	b.n	800cdcc <RemapAndLinkDMAtoUARTTx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d334:	4a25      	ldr	r2, [pc, #148]	; (800d3cc <RemapAndLinkDMAtoUARTTx+0x724>)
 800d336:	23a8      	movs	r3, #168	; 0xa8
 800d338:	58d4      	ldr	r4, [r2, r3]
 800d33a:	4d27      	ldr	r5, [pc, #156]	; (800d3d8 <RemapAndLinkDMAtoUARTTx+0x730>)
 800d33c:	402c      	ands	r4, r5
 800d33e:	50d4      	str	r4, [r2, r3]
 800d340:	58d5      	ldr	r5, [r2, r3]
 800d342:	24d0      	movs	r4, #208	; 0xd0
 800d344:	0324      	lsls	r4, r4, #12
 800d346:	432c      	orrs	r4, r5
 800d348:	50d4      	str	r4, [r2, r3]
 800d34a:	e58d      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d34c:	4a18      	ldr	r2, [pc, #96]	; (800d3b0 <RemapAndLinkDMAtoUARTTx+0x708>)
 800d34e:	680c      	ldr	r4, [r1, #0]
 800d350:	4294      	cmp	r4, r2
 800d352:	d000      	beq.n	800d356 <RemapAndLinkDMAtoUARTTx+0x6ae>
 800d354:	e53e      	b.n	800cdd4 <RemapAndLinkDMAtoUARTTx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d356:	4a17      	ldr	r2, [pc, #92]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d358:	23a8      	movs	r3, #168	; 0xa8
 800d35a:	58d4      	ldr	r4, [r2, r3]
 800d35c:	25f0      	movs	r5, #240	; 0xf0
 800d35e:	43ac      	bics	r4, r5
 800d360:	50d4      	str	r4, [r2, r3]
 800d362:	58d4      	ldr	r4, [r2, r3]
 800d364:	3d10      	subs	r5, #16
 800d366:	432c      	orrs	r4, r5
 800d368:	50d4      	str	r4, [r2, r3]
 800d36a:	e57d      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d36c:	4a12      	ldr	r2, [pc, #72]	; (800d3b8 <RemapAndLinkDMAtoUARTTx+0x710>)
 800d36e:	680c      	ldr	r4, [r1, #0]
 800d370:	4294      	cmp	r4, r2
 800d372:	d000      	beq.n	800d376 <RemapAndLinkDMAtoUARTTx+0x6ce>
 800d374:	e532      	b.n	800cddc <RemapAndLinkDMAtoUARTTx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d376:	4a0f      	ldr	r2, [pc, #60]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d378:	23a8      	movs	r3, #168	; 0xa8
 800d37a:	58d4      	ldr	r4, [r2, r3]
 800d37c:	4d0f      	ldr	r5, [pc, #60]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x714>)
 800d37e:	402c      	ands	r4, r5
 800d380:	50d4      	str	r4, [r2, r3]
 800d382:	58d5      	ldr	r5, [r2, r3]
 800d384:	24e0      	movs	r4, #224	; 0xe0
 800d386:	0224      	lsls	r4, r4, #8
 800d388:	432c      	orrs	r4, r5
 800d38a:	50d4      	str	r4, [r2, r3]
 800d38c:	e56c      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d38e:	4a0c      	ldr	r2, [pc, #48]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x718>)
 800d390:	680c      	ldr	r4, [r1, #0]
 800d392:	4294      	cmp	r4, r2
 800d394:	d000      	beq.n	800d398 <RemapAndLinkDMAtoUARTTx+0x6f0>
 800d396:	e525      	b.n	800cde4 <RemapAndLinkDMAtoUARTTx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d398:	4a06      	ldr	r2, [pc, #24]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800d39a:	23a8      	movs	r3, #168	; 0xa8
 800d39c:	58d4      	ldr	r4, [r2, r3]
 800d39e:	4d09      	ldr	r5, [pc, #36]	; (800d3c4 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800d3a0:	402c      	ands	r4, r5
 800d3a2:	50d4      	str	r4, [r2, r3]
 800d3a4:	58d5      	ldr	r5, [r2, r3]
 800d3a6:	24e0      	movs	r4, #224	; 0xe0
 800d3a8:	0524      	lsls	r4, r4, #20
 800d3aa:	432c      	orrs	r4, r5
 800d3ac:	50d4      	str	r4, [r2, r3]
 800d3ae:	e55b      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800d3b0:	4002001c 	.word	0x4002001c
 800d3b4:	40020000 	.word	0x40020000
 800d3b8:	40020044 	.word	0x40020044
 800d3bc:	ffff0fff 	.word	0xffff0fff
 800d3c0:	40020080 	.word	0x40020080
 800d3c4:	f0ffffff 	.word	0xf0ffffff
 800d3c8:	40020408 	.word	0x40020408
 800d3cc:	40020400 	.word	0x40020400
 800d3d0:	40020444 	.word	0x40020444
 800d3d4:	40020458 	.word	0x40020458
 800d3d8:	fff0ffff 	.word	0xfff0ffff
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d3dc:	4a41      	ldr	r2, [pc, #260]	; (800d4e4 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800d3de:	680c      	ldr	r4, [r1, #0]
 800d3e0:	4294      	cmp	r4, r2
 800d3e2:	d000      	beq.n	800d3e6 <RemapAndLinkDMAtoUARTTx+0x73e>
 800d3e4:	e502      	b.n	800cdec <RemapAndLinkDMAtoUARTTx+0x144>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d3e6:	4a40      	ldr	r2, [pc, #256]	; (800d4e8 <RemapAndLinkDMAtoUARTTx+0x840>)
 800d3e8:	23a8      	movs	r3, #168	; 0xa8
 800d3ea:	58d4      	ldr	r4, [r2, r3]
 800d3ec:	250f      	movs	r5, #15
 800d3ee:	43ac      	bics	r4, r5
 800d3f0:	50d4      	str	r4, [r2, r3]
 800d3f2:	58d4      	ldr	r4, [r2, r3]
 800d3f4:	3d01      	subs	r5, #1
 800d3f6:	432c      	orrs	r4, r5
 800d3f8:	50d4      	str	r4, [r2, r3]
 800d3fa:	e535      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d3fc:	4a3b      	ldr	r2, [pc, #236]	; (800d4ec <RemapAndLinkDMAtoUARTTx+0x844>)
 800d3fe:	680c      	ldr	r4, [r1, #0]
 800d400:	4294      	cmp	r4, r2
 800d402:	d000      	beq.n	800d406 <RemapAndLinkDMAtoUARTTx+0x75e>
 800d404:	e4f6      	b.n	800cdf4 <RemapAndLinkDMAtoUARTTx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d406:	4a38      	ldr	r2, [pc, #224]	; (800d4e8 <RemapAndLinkDMAtoUARTTx+0x840>)
 800d408:	23a8      	movs	r3, #168	; 0xa8
 800d40a:	58d4      	ldr	r4, [r2, r3]
 800d40c:	4d38      	ldr	r5, [pc, #224]	; (800d4f0 <RemapAndLinkDMAtoUARTTx+0x848>)
 800d40e:	402c      	ands	r4, r5
 800d410:	50d4      	str	r4, [r2, r3]
 800d412:	58d5      	ldr	r5, [r2, r3]
 800d414:	24e0      	movs	r4, #224	; 0xe0
 800d416:	0224      	lsls	r4, r4, #8
 800d418:	432c      	orrs	r4, r5
 800d41a:	50d4      	str	r4, [r2, r3]
 800d41c:	e524      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d41e:	4a35      	ldr	r2, [pc, #212]	; (800d4f4 <RemapAndLinkDMAtoUARTTx+0x84c>)
 800d420:	680c      	ldr	r4, [r1, #0]
 800d422:	4294      	cmp	r4, r2
 800d424:	d000      	beq.n	800d428 <RemapAndLinkDMAtoUARTTx+0x780>
 800d426:	e4e9      	b.n	800cdfc <RemapAndLinkDMAtoUARTTx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d428:	4a2f      	ldr	r2, [pc, #188]	; (800d4e8 <RemapAndLinkDMAtoUARTTx+0x840>)
 800d42a:	23a8      	movs	r3, #168	; 0xa8
 800d42c:	58d4      	ldr	r4, [r2, r3]
 800d42e:	4d32      	ldr	r5, [pc, #200]	; (800d4f8 <RemapAndLinkDMAtoUARTTx+0x850>)
 800d430:	402c      	ands	r4, r5
 800d432:	50d4      	str	r4, [r2, r3]
 800d434:	58d5      	ldr	r5, [r2, r3]
 800d436:	24e0      	movs	r4, #224	; 0xe0
 800d438:	0324      	lsls	r4, r4, #12
 800d43a:	432c      	orrs	r4, r5
 800d43c:	50d4      	str	r4, [r2, r3]
 800d43e:	e513      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d440:	4a2e      	ldr	r2, [pc, #184]	; (800d4fc <RemapAndLinkDMAtoUARTTx+0x854>)
 800d442:	680c      	ldr	r4, [r1, #0]
 800d444:	4294      	cmp	r4, r2
 800d446:	d000      	beq.n	800d44a <RemapAndLinkDMAtoUARTTx+0x7a2>
 800d448:	e4dc      	b.n	800ce04 <RemapAndLinkDMAtoUARTTx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d44a:	4a2d      	ldr	r2, [pc, #180]	; (800d500 <RemapAndLinkDMAtoUARTTx+0x858>)
 800d44c:	23a8      	movs	r3, #168	; 0xa8
 800d44e:	58d5      	ldr	r5, [r2, r3]
 800d450:	26f0      	movs	r6, #240	; 0xf0
 800d452:	43b5      	bics	r5, r6
 800d454:	50d5      	str	r5, [r2, r3]
 800d456:	58d4      	ldr	r4, [r2, r3]
 800d458:	4334      	orrs	r4, r6
 800d45a:	50d4      	str	r4, [r2, r3]
 800d45c:	e504      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d45e:	4a29      	ldr	r2, [pc, #164]	; (800d504 <RemapAndLinkDMAtoUARTTx+0x85c>)
 800d460:	680c      	ldr	r4, [r1, #0]
 800d462:	4294      	cmp	r4, r2
 800d464:	d000      	beq.n	800d468 <RemapAndLinkDMAtoUARTTx+0x7c0>
 800d466:	e4d1      	b.n	800ce0c <RemapAndLinkDMAtoUARTTx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d468:	4a25      	ldr	r2, [pc, #148]	; (800d500 <RemapAndLinkDMAtoUARTTx+0x858>)
 800d46a:	23a8      	movs	r3, #168	; 0xa8
 800d46c:	58d4      	ldr	r4, [r2, r3]
 800d46e:	4d20      	ldr	r5, [pc, #128]	; (800d4f0 <RemapAndLinkDMAtoUARTTx+0x848>)
 800d470:	402c      	ands	r4, r5
 800d472:	50d4      	str	r4, [r2, r3]
 800d474:	58d5      	ldr	r5, [r2, r3]
 800d476:	24f0      	movs	r4, #240	; 0xf0
 800d478:	0224      	lsls	r4, r4, #8
 800d47a:	432c      	orrs	r4, r5
 800d47c:	50d4      	str	r4, [r2, r3]
 800d47e:	e4f3      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d480:	4a21      	ldr	r2, [pc, #132]	; (800d508 <RemapAndLinkDMAtoUARTTx+0x860>)
 800d482:	680c      	ldr	r4, [r1, #0]
 800d484:	4294      	cmp	r4, r2
 800d486:	d000      	beq.n	800d48a <RemapAndLinkDMAtoUARTTx+0x7e2>
 800d488:	e4c4      	b.n	800ce14 <RemapAndLinkDMAtoUARTTx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d48a:	4a1d      	ldr	r2, [pc, #116]	; (800d500 <RemapAndLinkDMAtoUARTTx+0x858>)
 800d48c:	23a8      	movs	r3, #168	; 0xa8
 800d48e:	58d4      	ldr	r4, [r2, r3]
 800d490:	4d1e      	ldr	r5, [pc, #120]	; (800d50c <RemapAndLinkDMAtoUARTTx+0x864>)
 800d492:	402c      	ands	r4, r5
 800d494:	50d4      	str	r4, [r2, r3]
 800d496:	58d5      	ldr	r5, [r2, r3]
 800d498:	24f0      	movs	r4, #240	; 0xf0
 800d49a:	0524      	lsls	r4, r4, #20
 800d49c:	432c      	orrs	r4, r5
 800d49e:	50d4      	str	r4, [r2, r3]
 800d4a0:	e4e2      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d4a2:	4a10      	ldr	r2, [pc, #64]	; (800d4e4 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800d4a4:	680c      	ldr	r4, [r1, #0]
 800d4a6:	4294      	cmp	r4, r2
 800d4a8:	d000      	beq.n	800d4ac <RemapAndLinkDMAtoUARTTx+0x804>
 800d4aa:	e4b7      	b.n	800ce1c <RemapAndLinkDMAtoUARTTx+0x174>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d4ac:	4a0e      	ldr	r2, [pc, #56]	; (800d4e8 <RemapAndLinkDMAtoUARTTx+0x840>)
 800d4ae:	23a8      	movs	r3, #168	; 0xa8
 800d4b0:	58d5      	ldr	r5, [r2, r3]
 800d4b2:	260f      	movs	r6, #15
 800d4b4:	43b5      	bics	r5, r6
 800d4b6:	50d5      	str	r5, [r2, r3]
 800d4b8:	58d4      	ldr	r4, [r2, r3]
 800d4ba:	4334      	orrs	r4, r6
 800d4bc:	50d4      	str	r4, [r2, r3]
 800d4be:	e4d3      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d4c0:	4a0a      	ldr	r2, [pc, #40]	; (800d4ec <RemapAndLinkDMAtoUARTTx+0x844>)
 800d4c2:	680c      	ldr	r4, [r1, #0]
 800d4c4:	4294      	cmp	r4, r2
 800d4c6:	d000      	beq.n	800d4ca <RemapAndLinkDMAtoUARTTx+0x822>
 800d4c8:	e4ac      	b.n	800ce24 <RemapAndLinkDMAtoUARTTx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d4ca:	4a07      	ldr	r2, [pc, #28]	; (800d4e8 <RemapAndLinkDMAtoUARTTx+0x840>)
 800d4cc:	23a8      	movs	r3, #168	; 0xa8
 800d4ce:	58d4      	ldr	r4, [r2, r3]
 800d4d0:	4d07      	ldr	r5, [pc, #28]	; (800d4f0 <RemapAndLinkDMAtoUARTTx+0x848>)
 800d4d2:	402c      	ands	r4, r5
 800d4d4:	50d4      	str	r4, [r2, r3]
 800d4d6:	58d5      	ldr	r5, [r2, r3]
 800d4d8:	24f0      	movs	r4, #240	; 0xf0
 800d4da:	0224      	lsls	r4, r4, #8
 800d4dc:	432c      	orrs	r4, r5
 800d4de:	50d4      	str	r4, [r2, r3]
 800d4e0:	e4c2      	b.n	800ce68 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800d4e2:	46c0      	nop			; (mov r8, r8)
 800d4e4:	40020408 	.word	0x40020408
 800d4e8:	40020400 	.word	0x40020400
 800d4ec:	40020444 	.word	0x40020444
 800d4f0:	ffff0fff 	.word	0xffff0fff
 800d4f4:	40020458 	.word	0x40020458
 800d4f8:	fff0ffff 	.word	0xfff0ffff
 800d4fc:	4002001c 	.word	0x4002001c
 800d500:	40020000 	.word	0x40020000
 800d504:	40020044 	.word	0x40020044
 800d508:	40020080 	.word	0x40020080
 800d50c:	f0ffffff 	.word	0xf0ffffff

0800d510 <DMA_MSG_TX_Setup>:
{	
 800d510:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d512:	4b0d      	ldr	r3, [pc, #52]	; (800d548 <DMA_MSG_TX_Setup+0x38>)
 800d514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d516:	2b00      	cmp	r3, #0
 800d518:	d010      	beq.n	800d53c <DMA_MSG_TX_Setup+0x2c>
	else if (msgTxDMA[1].Parent == NULL)
 800d51a:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <DMA_MSG_TX_Setup+0x38>)
 800d51c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00e      	beq.n	800d540 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[2].Parent == NULL)
 800d522:	4a09      	ldr	r2, [pc, #36]	; (800d548 <DMA_MSG_TX_Setup+0x38>)
 800d524:	2394      	movs	r3, #148	; 0x94
 800d526:	58d3      	ldr	r3, [r2, r3]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00b      	beq.n	800d544 <DMA_MSG_TX_Setup+0x34>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d52c:	0021      	movs	r1, r4
 800d52e:	f7ff fbbb 	bl	800cca8 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d532:	2100      	movs	r1, #0
 800d534:	0020      	movs	r0, r4
 800d536:	f7fe fe4b 	bl	800c1d0 <SetupDMAInterrupts>
}
 800d53a:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[0];
 800d53c:	4c02      	ldr	r4, [pc, #8]	; (800d548 <DMA_MSG_TX_Setup+0x38>)
 800d53e:	e7f5      	b.n	800d52c <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800d540:	4c02      	ldr	r4, [pc, #8]	; (800d54c <DMA_MSG_TX_Setup+0x3c>)
 800d542:	e7f3      	b.n	800d52c <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[2];  
 800d544:	4c02      	ldr	r4, [pc, #8]	; (800d550 <DMA_MSG_TX_Setup+0x40>)
 800d546:	e7f1      	b.n	800d52c <DMA_MSG_TX_Setup+0x1c>
 800d548:	2000108c 	.word	0x2000108c
 800d54c:	200010c4 	.word	0x200010c4
 800d550:	200010fc 	.word	0x200010fc

0800d554 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800d554:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800d556:	4807      	ldr	r0, [pc, #28]	; (800d574 <CRC_Init+0x20>)
 800d558:	4b07      	ldr	r3, [pc, #28]	; (800d578 <CRC_Init+0x24>)
 800d55a:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d55c:	2310      	movs	r3, #16
 800d55e:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800d560:	2300      	movs	r3, #0
 800d562:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d564:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800d566:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800d568:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d56a:	3303      	adds	r3, #3
 800d56c:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d56e:	f003 fb86 	bl	8010c7e <HAL_CRC_Init>
}
 800d572:	bd10      	pop	{r4, pc}
 800d574:	20006504 	.word	0x20006504
 800d578:	40023000 	.word	0x40023000

0800d57c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d57c:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d57e:	4a05      	ldr	r2, [pc, #20]	; (800d594 <HAL_CRC_MspInit+0x18>)
 800d580:	6951      	ldr	r1, [r2, #20]
 800d582:	2340      	movs	r3, #64	; 0x40
 800d584:	4319      	orrs	r1, r3
 800d586:	6151      	str	r1, [r2, #20]
 800d588:	6952      	ldr	r2, [r2, #20]
 800d58a:	4013      	ands	r3, r2
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	9b01      	ldr	r3, [sp, #4]
}
 800d590:	b002      	add	sp, #8
 800d592:	4770      	bx	lr
 800d594:	40021000 	.word	0x40021000

0800d598 <CalculateCRC8>:
/*-----------------------------------------------------------*/
/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	0004      	movs	r4, r0
 800d59c:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d014      	beq.n	800d5cc <CalculateCRC8+0x34>
 800d5a2:	2900      	cmp	r1, #0
 800d5a4:	d101      	bne.n	800d5aa <CalculateCRC8+0x12>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800d5a6:	2000      	movs	r0, #0
}
 800d5a8:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d5aa:	088e      	lsrs	r6, r1, #2
 800d5ac:	0032      	movs	r2, r6
 800d5ae:	0001      	movs	r1, r0
 800d5b0:	4807      	ldr	r0, [pc, #28]	; (800d5d0 <CalculateCRC8+0x38>)
 800d5b2:	f003 fbbf 	bl	8010d34 <HAL_CRC_Calculate>
 800d5b6:	b2c0      	uxtb	r0, r0
		if ((size%4)!=0)
 800d5b8:	07ab      	lsls	r3, r5, #30
 800d5ba:	d0f5      	beq.n	800d5a8 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800d5bc:	0131      	lsls	r1, r6, #4
 800d5be:	1861      	adds	r1, r4, r1
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	4803      	ldr	r0, [pc, #12]	; (800d5d0 <CalculateCRC8+0x38>)
 800d5c4:	f003 fb8c 	bl	8010ce0 <HAL_CRC_Accumulate>
 800d5c8:	b2c0      	uxtb	r0, r0
		return pTemp;
 800d5ca:	e7ed      	b.n	800d5a8 <CalculateCRC8+0x10>
	return 0;
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	e7eb      	b.n	800d5a8 <CalculateCRC8+0x10>
 800d5d0:	20006504 	.word	0x20006504

0800d5d4 <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800d5d4:	b500      	push	{lr}
 800d5d6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800d5d8:	2380      	movs	r3, #128	; 0x80
 800d5da:	011b      	lsls	r3, r3, #4
 800d5dc:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d5e6:	3303      	adds	r3, #3
 800d5e8:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d5ea:	2090      	movs	r0, #144	; 0x90
 800d5ec:	a901      	add	r1, sp, #4
 800d5ee:	05c0      	lsls	r0, r0, #23
 800d5f0:	f004 f9fe 	bl	80119f0 <HAL_GPIO_Init>
}
 800d5f4:	b007      	add	sp, #28
 800d5f6:	bd00      	pop	{pc}

0800d5f8 <GPIO_Init>:
{
 800d5f8:	b500      	push	{lr}
 800d5fa:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d5fc:	4b18      	ldr	r3, [pc, #96]	; (800d660 <GPIO_Init+0x68>)
 800d5fe:	6959      	ldr	r1, [r3, #20]
 800d600:	2080      	movs	r0, #128	; 0x80
 800d602:	0300      	lsls	r0, r0, #12
 800d604:	4301      	orrs	r1, r0
 800d606:	6159      	str	r1, [r3, #20]
 800d608:	695a      	ldr	r2, [r3, #20]
 800d60a:	4002      	ands	r2, r0
 800d60c:	9201      	str	r2, [sp, #4]
 800d60e:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d610:	6959      	ldr	r1, [r3, #20]
 800d612:	2080      	movs	r0, #128	; 0x80
 800d614:	0280      	lsls	r0, r0, #10
 800d616:	4301      	orrs	r1, r0
 800d618:	6159      	str	r1, [r3, #20]
 800d61a:	695a      	ldr	r2, [r3, #20]
 800d61c:	4002      	ands	r2, r0
 800d61e:	9202      	str	r2, [sp, #8]
 800d620:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d622:	6959      	ldr	r1, [r3, #20]
 800d624:	2080      	movs	r0, #128	; 0x80
 800d626:	0340      	lsls	r0, r0, #13
 800d628:	4301      	orrs	r1, r0
 800d62a:	6159      	str	r1, [r3, #20]
 800d62c:	695a      	ldr	r2, [r3, #20]
 800d62e:	4002      	ands	r2, r0
 800d630:	9203      	str	r2, [sp, #12]
 800d632:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d634:	6959      	ldr	r1, [r3, #20]
 800d636:	2080      	movs	r0, #128	; 0x80
 800d638:	02c0      	lsls	r0, r0, #11
 800d63a:	4301      	orrs	r1, r0
 800d63c:	6159      	str	r1, [r3, #20]
 800d63e:	695a      	ldr	r2, [r3, #20]
 800d640:	4002      	ands	r2, r0
 800d642:	9204      	str	r2, [sp, #16]
 800d644:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d646:	695a      	ldr	r2, [r3, #20]
 800d648:	2180      	movs	r1, #128	; 0x80
 800d64a:	03c9      	lsls	r1, r1, #15
 800d64c:	430a      	orrs	r2, r1
 800d64e:	615a      	str	r2, [r3, #20]
 800d650:	695b      	ldr	r3, [r3, #20]
 800d652:	400b      	ands	r3, r1
 800d654:	9305      	str	r3, [sp, #20]
 800d656:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800d658:	f7ff ffbc 	bl	800d5d4 <IND_LED_Init>
}
 800d65c:	b007      	add	sp, #28
 800d65e:	bd00      	pop	{pc}
 800d660:	40021000 	.word	0x40021000

0800d664 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 800d664:	b530      	push	{r4, r5, lr}
 800d666:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d668:	2214      	movs	r2, #20
 800d66a:	2100      	movs	r1, #0
 800d66c:	a803      	add	r0, sp, #12
 800d66e:	f006 f83e 	bl	80136ee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d672:	4b1c      	ldr	r3, [pc, #112]	; (800d6e4 <MX_GPIO_Init+0x80>)
 800d674:	6959      	ldr	r1, [r3, #20]
 800d676:	2080      	movs	r0, #128	; 0x80
 800d678:	02c0      	lsls	r0, r0, #11
 800d67a:	4301      	orrs	r1, r0
 800d67c:	6159      	str	r1, [r3, #20]
 800d67e:	695a      	ldr	r2, [r3, #20]
 800d680:	4002      	ands	r2, r0
 800d682:	9201      	str	r2, [sp, #4]
 800d684:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d686:	695a      	ldr	r2, [r3, #20]
 800d688:	2180      	movs	r1, #128	; 0x80
 800d68a:	0289      	lsls	r1, r1, #10
 800d68c:	430a      	orrs	r2, r1
 800d68e:	615a      	str	r2, [r3, #20]
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	400b      	ands	r3, r1
 800d694:	9302      	str	r3, [sp, #8]
 800d696:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800d698:	2480      	movs	r4, #128	; 0x80
 800d69a:	0124      	lsls	r4, r4, #4
 800d69c:	2590      	movs	r5, #144	; 0x90
 800d69e:	05ed      	lsls	r5, r5, #23
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	0021      	movs	r1, r4
 800d6a4:	0028      	movs	r0, r5
 800d6a6:	f004 fa76 	bl	8011b96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800d6aa:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6ac:	2401      	movs	r4, #1
 800d6ae:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800d6b4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6b6:	a903      	add	r1, sp, #12
 800d6b8:	0028      	movs	r0, r5
 800d6ba:	f004 f999 	bl	80119f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d6be:	2340      	movs	r3, #64	; 0x40
 800d6c0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d6c2:	4b09      	ldr	r3, [pc, #36]	; (800d6e8 <MX_GPIO_Init+0x84>)
 800d6c4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d6c6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6c8:	a903      	add	r1, sp, #12
 800d6ca:	4808      	ldr	r0, [pc, #32]	; (800d6ec <MX_GPIO_Init+0x88>)
 800d6cc:	f004 f990 	bl	80119f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	2007      	movs	r0, #7
 800d6d6:	f003 fa0d 	bl	8010af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800d6da:	2007      	movs	r0, #7
 800d6dc:	f003 fa3a 	bl	8010b54 <HAL_NVIC_EnableIRQ>

}
 800d6e0:	b009      	add	sp, #36	; 0x24
 800d6e2:	bd30      	pop	{r4, r5, pc}
 800d6e4:	40021000 	.word	0x40021000
 800d6e8:	10210000 	.word	0x10210000
 800d6ec:	48000400 	.word	0x48000400

0800d6f0 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800d6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f2:	000e      	movs	r6, r1
 800d6f4:	0017      	movs	r7, r2
 800d6f6:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800d6f8:	f000 fd2c 	bl	800e154 <GetUart>
	
	if (huart == &huart1) 
 800d6fc:	4c24      	ldr	r4, [pc, #144]	; (800d790 <GetPortGPIOs+0xa0>)
 800d6fe:	42a0      	cmp	r0, r4
 800d700:	d00d      	beq.n	800d71e <GetPortGPIOs+0x2e>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800d702:	4b24      	ldr	r3, [pc, #144]	; (800d794 <GetPortGPIOs+0xa4>)
 800d704:	4298      	cmp	r0, r3
 800d706:	d017      	beq.n	800d738 <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800d708:	4b23      	ldr	r3, [pc, #140]	; (800d798 <GetPortGPIOs+0xa8>)
 800d70a:	4298      	cmp	r0, r3
 800d70c:	d01f      	beq.n	800d74e <GetPortGPIOs+0x5e>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800d70e:	4b23      	ldr	r3, [pc, #140]	; (800d79c <GetPortGPIOs+0xac>)
 800d710:	4298      	cmp	r0, r3
 800d712:	d028      	beq.n	800d766 <GetPortGPIOs+0x76>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800d714:	4b22      	ldr	r3, [pc, #136]	; (800d7a0 <GetPortGPIOs+0xb0>)
 800d716:	4298      	cmp	r0, r3
 800d718:	d02f      	beq.n	800d77a <GetPortGPIOs+0x8a>
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800d71a:	20ff      	movs	r0, #255	; 0xff
 800d71c:	e00b      	b.n	800d736 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800d71e:	2390      	movs	r3, #144	; 0x90
 800d720:	05db      	lsls	r3, r3, #23
 800d722:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800d724:	2280      	movs	r2, #128	; 0x80
 800d726:	0092      	lsls	r2, r2, #2
 800d728:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800d72a:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART1_RX_PIN;
 800d72c:	2380      	movs	r3, #128	; 0x80
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	9a06      	ldr	r2, [sp, #24]
 800d732:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d734:	2000      	movs	r0, #0
	
	return result;	
}
 800d736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800d738:	2390      	movs	r3, #144	; 0x90
 800d73a:	05db      	lsls	r3, r3, #23
 800d73c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800d73e:	2204      	movs	r2, #4
 800d740:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800d742:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800d744:	2308      	movs	r3, #8
 800d746:	9a06      	ldr	r2, [sp, #24]
 800d748:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d74a:	2000      	movs	r0, #0
 800d74c:	e7f3      	b.n	800d736 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800d74e:	4b15      	ldr	r3, [pc, #84]	; (800d7a4 <GetPortGPIOs+0xb4>)
 800d750:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800d752:	2280      	movs	r2, #128	; 0x80
 800d754:	00d2      	lsls	r2, r2, #3
 800d756:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800d758:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800d75a:	2380      	movs	r3, #128	; 0x80
 800d75c:	011b      	lsls	r3, r3, #4
 800d75e:	9a06      	ldr	r2, [sp, #24]
 800d760:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d762:	2000      	movs	r0, #0
 800d764:	e7e7      	b.n	800d736 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800d766:	4b0f      	ldr	r3, [pc, #60]	; (800d7a4 <GetPortGPIOs+0xb4>)
 800d768:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800d76a:	2208      	movs	r2, #8
 800d76c:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800d76e:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART5_RX_PIN;
 800d770:	2310      	movs	r3, #16
 800d772:	9a06      	ldr	r2, [sp, #24]
 800d774:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d776:	2000      	movs	r0, #0
 800d778:	e7dd      	b.n	800d736 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800d77a:	2390      	movs	r3, #144	; 0x90
 800d77c:	05db      	lsls	r3, r3, #23
 800d77e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800d780:	2210      	movs	r2, #16
 800d782:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800d784:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART6_RX_PIN;
 800d786:	2320      	movs	r3, #32
 800d788:	9a06      	ldr	r2, [sp, #24]
 800d78a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d78c:	2000      	movs	r0, #0
 800d78e:	e7d2      	b.n	800d736 <GetPortGPIOs+0x46>
 800d790:	20006354 	.word	0x20006354
 800d794:	2000643c 	.word	0x2000643c
 800d798:	20006218 	.word	0x20006218
 800d79c:	200062e0 	.word	0x200062e0
 800d7a0:	200063cc 	.word	0x200063cc
 800d7a4:	48000400 	.word	0x48000400

0800d7a8 <IsFactoryReset>:
{
 800d7a8:	b530      	push	{r4, r5, lr}
 800d7aa:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800d7ac:	4b39      	ldr	r3, [pc, #228]	; (800d894 <IsFactoryReset+0xec>)
 800d7ae:	6959      	ldr	r1, [r3, #20]
 800d7b0:	2080      	movs	r0, #128	; 0x80
 800d7b2:	0280      	lsls	r0, r0, #10
 800d7b4:	4301      	orrs	r1, r0
 800d7b6:	6159      	str	r1, [r3, #20]
 800d7b8:	695a      	ldr	r2, [r3, #20]
 800d7ba:	4002      	ands	r2, r0
 800d7bc:	9203      	str	r2, [sp, #12]
 800d7be:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d7c0:	6959      	ldr	r1, [r3, #20]
 800d7c2:	2080      	movs	r0, #128	; 0x80
 800d7c4:	02c0      	lsls	r0, r0, #11
 800d7c6:	4301      	orrs	r1, r0
 800d7c8:	6159      	str	r1, [r3, #20]
 800d7ca:	695a      	ldr	r2, [r3, #20]
 800d7cc:	4002      	ands	r2, r0
 800d7ce:	9204      	str	r2, [sp, #16]
 800d7d0:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800d7d2:	6959      	ldr	r1, [r3, #20]
 800d7d4:	2080      	movs	r0, #128	; 0x80
 800d7d6:	0300      	lsls	r0, r0, #12
 800d7d8:	4301      	orrs	r1, r0
 800d7da:	6159      	str	r1, [r3, #20]
 800d7dc:	695a      	ldr	r2, [r3, #20]
 800d7de:	4002      	ands	r2, r0
 800d7e0:	9205      	str	r2, [sp, #20]
 800d7e2:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800d7e4:	695a      	ldr	r2, [r3, #20]
 800d7e6:	2180      	movs	r1, #128	; 0x80
 800d7e8:	0349      	lsls	r1, r1, #13
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	615a      	str	r2, [r3, #20]
 800d7ee:	695b      	ldr	r3, [r3, #20]
 800d7f0:	400b      	ands	r3, r1
 800d7f2:	9306      	str	r3, [sp, #24]
 800d7f4:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d7f6:	ab08      	add	r3, sp, #32
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	ab0b      	add	r3, sp, #44	; 0x2c
 800d7fc:	2222      	movs	r2, #34	; 0x22
 800d7fe:	446a      	add	r2, sp
 800d800:	a90c      	add	r1, sp, #48	; 0x30
 800d802:	2001      	movs	r0, #1
 800d804:	f7ff ff74 	bl	800d6f0 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d808:	ac07      	add	r4, sp, #28
 800d80a:	9400      	str	r4, [sp, #0]
 800d80c:	ab09      	add	r3, sp, #36	; 0x24
 800d80e:	221e      	movs	r2, #30
 800d810:	446a      	add	r2, sp
 800d812:	a90a      	add	r1, sp, #40	; 0x28
 800d814:	2005      	movs	r0, #5
 800d816:	f7ff ff6b 	bl	800d6f0 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d81a:	2301      	movs	r3, #1
 800d81c:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d81e:	2500      	movs	r5, #0
 800d820:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d822:	466b      	mov	r3, sp
 800d824:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d826:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d828:	a90d      	add	r1, sp, #52	; 0x34
 800d82a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d82c:	f004 f8e0 	bl	80119f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d830:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800d832:	2302      	movs	r3, #2
 800d834:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d836:	8823      	ldrh	r3, [r4, #0]
 800d838:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d83a:	a90d      	add	r1, sp, #52	; 0x34
 800d83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d83e:	f004 f8d7 	bl	80119f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800d842:	466b      	mov	r3, sp
 800d844:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800d846:	2200      	movs	r2, #0
 800d848:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d84a:	f004 f9a4 	bl	8011b96 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800d84e:	2005      	movs	r0, #5
 800d850:	f000 fae0 	bl	800de14 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800d854:	8821      	ldrh	r1, [r4, #0]
 800d856:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d858:	f004 f996 	bl	8011b88 <HAL_GPIO_ReadPin>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d006      	beq.n	800d86e <IsFactoryReset+0xc6>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d860:	4b0d      	ldr	r3, [pc, #52]	; (800d898 <IsFactoryReset+0xf0>)
 800d862:	2201      	movs	r2, #1
 800d864:	4252      	negs	r2, r2
 800d866:	601a      	str	r2, [r3, #0]
	return 0;
 800d868:	2000      	movs	r0, #0
}
 800d86a:	b013      	add	sp, #76	; 0x4c
 800d86c:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800d86e:	2322      	movs	r3, #34	; 0x22
 800d870:	446b      	add	r3, sp
 800d872:	8819      	ldrh	r1, [r3, #0]
 800d874:	2201      	movs	r2, #1
 800d876:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d878:	f004 f98d 	bl	8011b96 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800d87c:	2005      	movs	r0, #5
 800d87e:	f000 fac9 	bl	800de14 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800d882:	ab07      	add	r3, sp, #28
 800d884:	8819      	ldrh	r1, [r3, #0]
 800d886:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d888:	f004 f97e 	bl	8011b88 <HAL_GPIO_ReadPin>
 800d88c:	2801      	cmp	r0, #1
 800d88e:	d1e7      	bne.n	800d860 <IsFactoryReset+0xb8>
 800d890:	e7eb      	b.n	800d86a <IsFactoryReset+0xc2>
 800d892:	46c0      	nop			; (mov r8, r8)
 800d894:	40021000 	.word	0x40021000
 800d898:	20007ff0 	.word	0x20007ff0

0800d89c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d89c:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d89e:	f002 fe2d 	bl	80104fc <HAL_IncTick>
  osSystickHandler();  
 800d8a2:	f000 fe25 	bl	800e4f0 <osSystickHandler>

}
 800d8a6:	bd10      	pop	{r4, pc}

0800d8a8 <HardFault_Handler>:
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
	/* Loop here */
	for(;;) {};  
 800d8a8:	e7fe      	b.n	800d8a8 <HardFault_Handler>
	...

0800d8ac <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d8ac:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d8ae:	4802      	ldr	r0, [pc, #8]	; (800d8b8 <USART1_IRQHandler+0xc>)
 800d8b0:	f005 fe31 	bl	8013516 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d8b4:	bd10      	pop	{r4, pc}
 800d8b6:	46c0      	nop			; (mov r8, r8)
 800d8b8:	20006354 	.word	0x20006354

0800d8bc <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d8bc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d8be:	4802      	ldr	r0, [pc, #8]	; (800d8c8 <USART2_IRQHandler+0xc>)
 800d8c0:	f005 fe29 	bl	8013516 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d8c4:	bd10      	pop	{r4, pc}
 800d8c6:	46c0      	nop			; (mov r8, r8)
 800d8c8:	2000643c 	.word	0x2000643c

0800d8cc <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d8cc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d8ce:	4805      	ldr	r0, [pc, #20]	; (800d8e4 <USART3_8_IRQHandler+0x18>)
 800d8d0:	f005 fe21 	bl	8013516 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d8d4:	4804      	ldr	r0, [pc, #16]	; (800d8e8 <USART3_8_IRQHandler+0x1c>)
 800d8d6:	f005 fe1e 	bl	8013516 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d8da:	4804      	ldr	r0, [pc, #16]	; (800d8ec <USART3_8_IRQHandler+0x20>)
 800d8dc:	f005 fe1b 	bl	8013516 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d8e0:	bd10      	pop	{r4, pc}
 800d8e2:	46c0      	nop			; (mov r8, r8)
 800d8e4:	20006218 	.word	0x20006218
 800d8e8:	200062e0 	.word	0x200062e0
 800d8ec:	200063cc 	.word	0x200063cc

0800d8f0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d8f0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d8f2:	4b0c      	ldr	r3, [pc, #48]	; (800d924 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	06db      	lsls	r3, r3, #27
 800d8f8:	d40b      	bmi.n	800d912 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d8fa:	4b0b      	ldr	r3, [pc, #44]	; (800d928 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	05db      	lsls	r3, r3, #23
 800d900:	d40b      	bmi.n	800d91a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d902:	4b09      	ldr	r3, [pc, #36]	; (800d928 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	06db      	lsls	r3, r3, #27
 800d908:	d506      	bpl.n	800d918 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d90a:	4808      	ldr	r0, [pc, #32]	; (800d92c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d90c:	f003 fb10 	bl	8010f30 <HAL_DMA_IRQHandler>
	}
}
 800d910:	e002      	b.n	800d918 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P5);
 800d912:	2005      	movs	r0, #5
 800d914:	f7f9 fa06 	bl	8006d24 <DMA_IRQHandler>
}
 800d918:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800d91a:	2002      	movs	r0, #2
 800d91c:	f7f9 fa02 	bl	8006d24 <DMA_IRQHandler>
 800d920:	e7fa      	b.n	800d918 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800d922:	46c0      	nop			; (mov r8, r8)
 800d924:	40020400 	.word	0x40020400
 800d928:	40020000 	.word	0x40020000
 800d92c:	2000108c 	.word	0x2000108c

0800d930 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d930:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d932:	4b14      	ldr	r3, [pc, #80]	; (800d984 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	03db      	lsls	r3, r3, #15
 800d938:	d413      	bmi.n	800d962 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d93a:	4b12      	ldr	r3, [pc, #72]	; (800d984 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	02db      	lsls	r3, r3, #11
 800d940:	d413      	bmi.n	800d96a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d942:	4b11      	ldr	r3, [pc, #68]	; (800d988 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	05db      	lsls	r3, r3, #23
 800d948:	d413      	bmi.n	800d972 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d94a:	4b0e      	ldr	r3, [pc, #56]	; (800d984 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	04db      	lsls	r3, r3, #19
 800d950:	d413      	bmi.n	800d97a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d952:	4b0c      	ldr	r3, [pc, #48]	; (800d984 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	01db      	lsls	r3, r3, #7
 800d958:	d506      	bpl.n	800d968 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d95a:	480c      	ldr	r0, [pc, #48]	; (800d98c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800d95c:	f003 fae8 	bl	8010f30 <HAL_DMA_IRQHandler>
	}
}
 800d960:	e002      	b.n	800d968 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800d962:	2003      	movs	r0, #3
 800d964:	f7f9 f9de 	bl	8006d24 <DMA_IRQHandler>
}
 800d968:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d96a:	2004      	movs	r0, #4
 800d96c:	f7f9 f9da 	bl	8006d24 <DMA_IRQHandler>
 800d970:	e7fa      	b.n	800d968 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800d972:	2006      	movs	r0, #6
 800d974:	f7f9 f9d6 	bl	8006d24 <DMA_IRQHandler>
 800d978:	e7f6      	b.n	800d968 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d97a:	4805      	ldr	r0, [pc, #20]	; (800d990 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800d97c:	f003 fad8 	bl	8010f30 <HAL_DMA_IRQHandler>
 800d980:	e7f2      	b.n	800d968 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800d982:	46c0      	nop			; (mov r8, r8)
 800d984:	40020000 	.word	0x40020000
 800d988:	40020400 	.word	0x40020400
 800d98c:	200010fc 	.word	0x200010fc
 800d990:	200010c4 	.word	0x200010c4

0800d994 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d994:	b510      	push	{r4, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d99a:	2300      	movs	r3, #0
 800d99c:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d99e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d001      	beq.n	800d9a8 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d9a4:	f7fe fcc4 	bl	800c330 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d9a8:	0020      	movs	r0, r4
 800d9aa:	f7fd fc9b 	bl	800b2e4 <GetPort>
 800d9ae:	0080      	lsls	r0, r0, #2
 800d9b0:	4b03      	ldr	r3, [pc, #12]	; (800d9c0 <HAL_UART_TxCpltCallback+0x2c>)
 800d9b2:	58c0      	ldr	r0, [r0, r3]
 800d9b4:	a901      	add	r1, sp, #4
 800d9b6:	f001 f92c 	bl	800ec12 <xQueueGiveFromISR>
}
 800d9ba:	b002      	add	sp, #8
 800d9bc:	bd10      	pop	{r4, pc}
 800d9be:	46c0      	nop			; (mov r8, r8)
 800d9c0:	200061b8 	.word	0x200061b8

0800d9c4 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d9c8:	2369      	movs	r3, #105	; 0x69
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d9ce:	f7fd fc89 	bl	800b2e4 <GetPort>
	if (portStatus[port] == STREAM) {
 800d9d2:	4b0b      	ldr	r3, [pc, #44]	; (800da00 <HAL_UART_ErrorCallback+0x3c>)
 800d9d4:	5c1b      	ldrb	r3, [r3, r0]
 800d9d6:	2b02      	cmp	r3, #2
 800d9d8:	d004      	beq.n	800d9e4 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d9da:	3801      	subs	r0, #1
 800d9dc:	4b09      	ldr	r3, [pc, #36]	; (800da04 <HAL_UART_ErrorCallback+0x40>)
 800d9de:	2201      	movs	r2, #1
 800d9e0:	541a      	strb	r2, [r3, r0]
	}	
}
 800d9e2:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d9e4:	1e43      	subs	r3, r0, #1
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4a07      	ldr	r2, [pc, #28]	; (800da08 <HAL_UART_ErrorCallback+0x44>)
 800d9ea:	589b      	ldr	r3, [r3, r2]
 800d9ec:	6819      	ldr	r1, [r3, #0]
 800d9ee:	3128      	adds	r1, #40	; 0x28
 800d9f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	685a      	ldr	r2, [r3, #4]
 800d9f6:	b292      	uxth	r2, r2
 800d9f8:	0020      	movs	r0, r4
 800d9fa:	f005 f95d 	bl	8012cb8 <HAL_UART_Receive_DMA>
 800d9fe:	e7f0      	b.n	800d9e2 <HAL_UART_ErrorCallback+0x1e>
 800da00:	20000918 	.word	0x20000918
 800da04:	20000af4 	.word	0x20000af4
 800da08:	20000c90 	.word	0x20000c90

0800da0c <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800da0c:	b510      	push	{r4, lr}
 800da0e:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800da10:	f7fd fc68 	bl	800b2e4 <GetPort>
 800da14:	4b12      	ldr	r3, [pc, #72]	; (800da60 <HAL_UART_RxCpltCallback+0x54>)
 800da16:	5c1b      	ldrb	r3, [r3, r0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d006      	beq.n	800da2a <HAL_UART_RxCpltCallback+0x1e>
 800da1c:	0020      	movs	r0, r4
 800da1e:	f7fd fc61 	bl	800b2e4 <GetPort>
 800da22:	4b0f      	ldr	r3, [pc, #60]	; (800da60 <HAL_UART_RxCpltCallback+0x54>)
 800da24:	5c1b      	ldrb	r3, [r3, r0]
 800da26:	2b01      	cmp	r3, #1
 800da28:	d118      	bne.n	800da5c <HAL_UART_RxCpltCallback+0x50>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800da2a:	0020      	movs	r0, r4
 800da2c:	f7fd fc5a 	bl	800b2e4 <GetPort>
 800da30:	4b0c      	ldr	r3, [pc, #48]	; (800da64 <HAL_UART_RxCpltCallback+0x58>)
 800da32:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800da34:	0020      	movs	r0, r4
 800da36:	f7fd fc55 	bl	800b2e4 <GetPort>
 800da3a:	4b09      	ldr	r3, [pc, #36]	; (800da60 <HAL_UART_RxCpltCallback+0x54>)
 800da3c:	2205      	movs	r2, #5
 800da3e:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800da40:	0020      	movs	r0, r4
 800da42:	f7fd fc4f 	bl	800b2e4 <GetPort>
 800da46:	3801      	subs	r0, #1
 800da48:	4b07      	ldr	r3, [pc, #28]	; (800da68 <HAL_UART_RxCpltCallback+0x5c>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	541a      	strb	r2, [r3, r0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800da4e:	0020      	movs	r0, r4
 800da50:	f7fd fc48 	bl	800b2e4 <GetPort>
 800da54:	3801      	subs	r0, #1
 800da56:	4b05      	ldr	r3, [pc, #20]	; (800da6c <HAL_UART_RxCpltCallback+0x60>)
 800da58:	2201      	movs	r2, #1
 800da5a:	541a      	strb	r2, [r3, r0]
	}
}
 800da5c:	bd10      	pop	{r4, pc}
 800da5e:	46c0      	nop			; (mov r8, r8)
 800da60:	20000918 	.word	0x20000918
 800da64:	20006138 	.word	0x20006138
 800da68:	20000c3c 	.word	0x20000c3c
 800da6c:	20000af4 	.word	0x20000af4

0800da70 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800da70:	b672      	cpsid	i
	for( ;; );
 800da72:	e7fe      	b.n	800da72 <vApplicationStackOverflowHook+0x2>

0800da74 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800da74:	b672      	cpsid	i
	for( ;; );
 800da76:	e7fe      	b.n	800da76 <vApplicationMallocFailedHook+0x2>

0800da78 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800da78:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800da7a:	2040      	movs	r0, #64	; 0x40
 800da7c:	f004 f896 	bl	8011bac <HAL_GPIO_EXTI_IRQHandler>
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );

}
 800da80:	bd10      	pop	{r4, pc}
	...

0800da84 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800da84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da86:	46d6      	mov	lr, sl
 800da88:	464f      	mov	r7, r9
 800da8a:	4646      	mov	r6, r8
 800da8c:	b5c0      	push	{r6, r7, lr}
 800da8e:	b08c      	sub	sp, #48	; 0x30
 800da90:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800da92:	ac03      	add	r4, sp, #12
 800da94:	4b35      	ldr	r3, [pc, #212]	; (800db6c <RTC_CalendarConfig+0xe8>)
 800da96:	0022      	movs	r2, r4
 800da98:	cb43      	ldmia	r3!, {r0, r1, r6}
 800da9a:	c243      	stmia	r2!, {r0, r1, r6}
 800da9c:	466a      	mov	r2, sp
 800da9e:	4b34      	ldr	r3, [pc, #208]	; (800db70 <RTC_CalendarConfig+0xec>)
 800daa0:	cb03      	ldmia	r3!, {r0, r1}
 800daa2:	c203      	stmia	r2!, {r0, r1}
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800daa8:	2015      	movs	r0, #21
 800daaa:	4468      	add	r0, sp
 800daac:	f005 fdc3 	bl	8013636 <atoi>
 800dab0:	b2c7      	uxtb	r7, r0
  *(comDate + 6) = 0;
 800dab2:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800dab4:	a804      	add	r0, sp, #16
 800dab6:	f005 fdbe 	bl	8013636 <atoi>
 800daba:	b2c6      	uxtb	r6, r0
  *(comDate + 3) = 0;
 800dabc:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800dabe:	2400      	movs	r4, #0
 800dac0:	e001      	b.n	800dac6 <RTC_CalendarConfig+0x42>
 800dac2:	3401      	adds	r4, #1
 800dac4:	b2e4      	uxtb	r4, r4
 800dac6:	2c0b      	cmp	r4, #11
 800dac8:	d80a      	bhi.n	800dae0 <RTC_CalendarConfig+0x5c>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800daca:	00a3      	lsls	r3, r4, #2
 800dacc:	4a29      	ldr	r2, [pc, #164]	; (800db74 <RTC_CalendarConfig+0xf0>)
 800dace:	5899      	ldr	r1, [r3, r2]
 800dad0:	a803      	add	r0, sp, #12
 800dad2:	f7f2 fb17 	bl	8000104 <strcmp>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d1f3      	bne.n	800dac2 <RTC_CalendarConfig+0x3e>
			month = i + 1;
 800dada:	1c65      	adds	r5, r4, #1
 800dadc:	b2ed      	uxtb	r5, r5
 800dade:	e7f0      	b.n	800dac2 <RTC_CalendarConfig+0x3e>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800dae0:	466b      	mov	r3, sp
 800dae2:	1d98      	adds	r0, r3, #6
 800dae4:	f005 fda7 	bl	8013636 <atoi>
 800dae8:	b2c3      	uxtb	r3, r0
 800daea:	4698      	mov	r8, r3
	*(comDate + 5) = 0;
 800daec:	ac03      	add	r4, sp, #12
 800daee:	2300      	movs	r3, #0
 800daf0:	469a      	mov	sl, r3
 800daf2:	7163      	strb	r3, [r4, #5]
	minutes = atoi(comTime + 3);
 800daf4:	466b      	mov	r3, sp
 800daf6:	1cd8      	adds	r0, r3, #3
 800daf8:	f005 fd9d 	bl	8013636 <atoi>
 800dafc:	b2c3      	uxtb	r3, r0
 800dafe:	4699      	mov	r9, r3
	*(comDate + 2) = 0;
 800db00:	4653      	mov	r3, sl
 800db02:	70a3      	strb	r3, [r4, #2]
	hours = atoi(comTime);
 800db04:	4668      	mov	r0, sp
 800db06:	f005 fd96 	bl	8013636 <atoi>
 800db0a:	b2c4      	uxtb	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800db0c:	a90b      	add	r1, sp, #44	; 0x2c
 800db0e:	70cf      	strb	r7, [r1, #3]
  sdatestructure.Month = month;
 800db10:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800db12:	708e      	strb	r6, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800db14:	2301      	movs	r3, #1
 800db16:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800db18:	2200      	movs	r2, #0
 800db1a:	4817      	ldr	r0, [pc, #92]	; (800db78 <RTC_CalendarConfig+0xf4>)
 800db1c:	f004 fe44 	bl	80127a8 <HAL_RTC_SetDate>
 800db20:	2800      	cmp	r0, #0
 800db22:	d11e      	bne.n	800db62 <RTC_CalendarConfig+0xde>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800db24:	a906      	add	r1, sp, #24
 800db26:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800db28:	464b      	mov	r3, r9
 800db2a:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800db2c:	4643      	mov	r3, r8
 800db2e:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800db30:	2300      	movs	r3, #0
 800db32:	720b      	strb	r3, [r1, #8]
 800db34:	4a11      	ldr	r2, [pc, #68]	; (800db7c <RTC_CalendarConfig+0xf8>)
 800db36:	3018      	adds	r0, #24
 800db38:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800db3a:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800db3c:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800db3e:	2200      	movs	r2, #0
 800db40:	480d      	ldr	r0, [pc, #52]	; (800db78 <RTC_CalendarConfig+0xf4>)
 800db42:	f004 fdb3 	bl	80126ac <HAL_RTC_SetTime>
 800db46:	1e04      	subs	r4, r0, #0
 800db48:	d10d      	bne.n	800db66 <RTC_CalendarConfig+0xe2>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800db4a:	4a0d      	ldr	r2, [pc, #52]	; (800db80 <RTC_CalendarConfig+0xfc>)
 800db4c:	2101      	movs	r1, #1
 800db4e:	480a      	ldr	r0, [pc, #40]	; (800db78 <RTC_CalendarConfig+0xf4>)
 800db50:	f004 feec 	bl	801292c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800db54:	0020      	movs	r0, r4
 800db56:	b00c      	add	sp, #48	; 0x30
 800db58:	bce0      	pop	{r5, r6, r7}
 800db5a:	46ba      	mov	sl, r7
 800db5c:	46b1      	mov	r9, r6
 800db5e:	46a8      	mov	r8, r5
 800db60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800db62:	24ff      	movs	r4, #255	; 0xff
 800db64:	e7f6      	b.n	800db54 <RTC_CalendarConfig+0xd0>
		return BOS_ERROR;
 800db66:	24ff      	movs	r4, #255	; 0xff
 800db68:	e7f4      	b.n	800db54 <RTC_CalendarConfig+0xd0>
 800db6a:	46c0      	nop			; (mov r8, r8)
 800db6c:	080184ec 	.word	0x080184ec
 800db70:	08018510 	.word	0x08018510
 800db74:	20000020 	.word	0x20000020
 800db78:	20006528 	.word	0x20006528
 800db7c:	20006138 	.word	0x20006138
 800db80:	000032f2 	.word	0x000032f2

0800db84 <RTC_Init>:
{
 800db84:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800db86:	4a1c      	ldr	r2, [pc, #112]	; (800dbf8 <RTC_Init+0x74>)
 800db88:	6a11      	ldr	r1, [r2, #32]
 800db8a:	2380      	movs	r3, #128	; 0x80
 800db8c:	021b      	lsls	r3, r3, #8
 800db8e:	430b      	orrs	r3, r1
 800db90:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800db92:	481a      	ldr	r0, [pc, #104]	; (800dbfc <RTC_Init+0x78>)
 800db94:	4b1a      	ldr	r3, [pc, #104]	; (800dc00 <RTC_Init+0x7c>)
 800db96:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800db98:	2300      	movs	r3, #0
 800db9a:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800db9c:	227c      	movs	r2, #124	; 0x7c
 800db9e:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800dba0:	4a18      	ldr	r2, [pc, #96]	; (800dc04 <RTC_Init+0x80>)
 800dba2:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800dba4:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800dba6:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dba8:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800dbaa:	f004 fd23 	bl	80125f4 <HAL_RTC_Init>
 800dbae:	1e04      	subs	r4, r0, #0
 800dbb0:	d11f      	bne.n	800dbf2 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800dbb2:	2101      	movs	r1, #1
 800dbb4:	4811      	ldr	r0, [pc, #68]	; (800dbfc <RTC_Init+0x78>)
 800dbb6:	f004 febf 	bl	8012938 <HAL_RTCEx_BKUPRead>
 800dbba:	4b13      	ldr	r3, [pc, #76]	; (800dc08 <RTC_Init+0x84>)
 800dbbc:	4298      	cmp	r0, r3
 800dbbe:	d10e      	bne.n	800dbde <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800dbc0:	4b0d      	ldr	r3, [pc, #52]	; (800dbf8 <RTC_Init+0x74>)
 800dbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc4:	011b      	lsls	r3, r3, #4
 800dbc6:	d502      	bpl.n	800dbce <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800dbc8:	4b10      	ldr	r3, [pc, #64]	; (800dc0c <RTC_Init+0x88>)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800dbce:	4b0a      	ldr	r3, [pc, #40]	; (800dbf8 <RTC_Init+0x74>)
 800dbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd2:	015b      	lsls	r3, r3, #5
 800dbd4:	d505      	bpl.n	800dbe2 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800dbd6:	4b0d      	ldr	r3, [pc, #52]	; (800dc0c <RTC_Init+0x88>)
 800dbd8:	2201      	movs	r2, #1
 800dbda:	701a      	strb	r2, [r3, #0]
 800dbdc:	e001      	b.n	800dbe2 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800dbde:	f7ff ff51 	bl	800da84 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800dbe2:	4a05      	ldr	r2, [pc, #20]	; (800dbf8 <RTC_Init+0x74>)
 800dbe4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800dbe6:	2380      	movs	r3, #128	; 0x80
 800dbe8:	045b      	lsls	r3, r3, #17
 800dbea:	430b      	orrs	r3, r1
 800dbec:	6253      	str	r3, [r2, #36]	; 0x24
}
 800dbee:	0020      	movs	r0, r4
 800dbf0:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800dbf2:	24ff      	movs	r4, #255	; 0xff
 800dbf4:	e7fb      	b.n	800dbee <RTC_Init+0x6a>
 800dbf6:	46c0      	nop			; (mov r8, r8)
 800dbf8:	40021000 	.word	0x40021000
 800dbfc:	20006528 	.word	0x20006528
 800dc00:	40002800 	.word	0x40002800
 800dc04:	000007cf 	.word	0x000007cf
 800dc08:	000032f2 	.word	0x000032f2
 800dc0c:	20001284 	.word	0x20001284

0800dc10 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800dc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc12:	46c6      	mov	lr, r8
 800dc14:	b500      	push	{lr}
 800dc16:	b086      	sub	sp, #24
 800dc18:	ac0c      	add	r4, sp, #48	; 0x30
 800dc1a:	7827      	ldrb	r7, [r4, #0]
 800dc1c:	ac0d      	add	r4, sp, #52	; 0x34
 800dc1e:	7824      	ldrb	r4, [r4, #0]
 800dc20:	46a0      	mov	r8, r4
 800dc22:	ac0e      	add	r4, sp, #56	; 0x38
 800dc24:	7825      	ldrb	r5, [r4, #0]
 800dc26:	ac0f      	add	r4, sp, #60	; 0x3c
 800dc28:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800dc2a:	3230      	adds	r2, #48	; 0x30
 800dc2c:	ac05      	add	r4, sp, #20
 800dc2e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800dc30:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800dc32:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800dc34:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800dc36:	2200      	movs	r2, #0
 800dc38:	0021      	movs	r1, r4
 800dc3a:	481f      	ldr	r0, [pc, #124]	; (800dcb8 <BOS_CalendarConfig+0xa8>)
 800dc3c:	f004 fdb4 	bl	80127a8 <HAL_RTC_SetDate>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d134      	bne.n	800dcae <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800dc44:	466b      	mov	r3, sp
 800dc46:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800dc48:	4642      	mov	r2, r8
 800dc4a:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800dc4c:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800dc4e:	2300      	movs	r3, #0
 800dc50:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800dc52:	2e01      	cmp	r6, #1
 800dc54:	d01e      	beq.n	800dc94 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800dc56:	2e02      	cmp	r6, #2
 800dc58:	d022      	beq.n	800dca0 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800dc5a:	4b18      	ldr	r3, [pc, #96]	; (800dcbc <BOS_CalendarConfig+0xac>)
 800dc5c:	2218      	movs	r2, #24
 800dc5e:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dc60:	2200      	movs	r2, #0
 800dc62:	4669      	mov	r1, sp
 800dc64:	4814      	ldr	r0, [pc, #80]	; (800dcb8 <BOS_CalendarConfig+0xa8>)
 800dc66:	f004 fd21 	bl	80126ac <HAL_RTC_SetTime>
 800dc6a:	1e04      	subs	r4, r0, #0
 800dc6c:	d121      	bne.n	800dcb2 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800dc6e:	4a13      	ldr	r2, [pc, #76]	; (800dcbc <BOS_CalendarConfig+0xac>)
 800dc70:	7b53      	ldrb	r3, [r2, #13]
 800dc72:	021b      	lsls	r3, r3, #8
 800dc74:	7911      	ldrb	r1, [r2, #4]
 800dc76:	4319      	orrs	r1, r3
 800dc78:	208d      	movs	r0, #141	; 0x8d
 800dc7a:	0040      	lsls	r0, r0, #1
 800dc7c:	f7f9 f9d6 	bl	800702c <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800dc80:	4a0f      	ldr	r2, [pc, #60]	; (800dcc0 <BOS_CalendarConfig+0xb0>)
 800dc82:	2101      	movs	r1, #1
 800dc84:	480c      	ldr	r0, [pc, #48]	; (800dcb8 <BOS_CalendarConfig+0xa8>)
 800dc86:	f004 fe51 	bl	801292c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800dc8a:	0020      	movs	r0, r4
 800dc8c:	b006      	add	sp, #24
 800dc8e:	bc80      	pop	{r7}
 800dc90:	46b8      	mov	r8, r7
 800dc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800dc94:	466a      	mov	r2, sp
 800dc96:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800dc98:	4b08      	ldr	r3, [pc, #32]	; (800dcbc <BOS_CalendarConfig+0xac>)
 800dc9a:	220c      	movs	r2, #12
 800dc9c:	735a      	strb	r2, [r3, #13]
 800dc9e:	e7df      	b.n	800dc60 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800dca0:	2340      	movs	r3, #64	; 0x40
 800dca2:	466a      	mov	r2, sp
 800dca4:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800dca6:	4b05      	ldr	r3, [pc, #20]	; (800dcbc <BOS_CalendarConfig+0xac>)
 800dca8:	220c      	movs	r2, #12
 800dcaa:	735a      	strb	r2, [r3, #13]
 800dcac:	e7d8      	b.n	800dc60 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800dcae:	24ff      	movs	r4, #255	; 0xff
 800dcb0:	e7eb      	b.n	800dc8a <BOS_CalendarConfig+0x7a>
		return BOS_ERROR;
 800dcb2:	24ff      	movs	r4, #255	; 0xff
 800dcb4:	e7e9      	b.n	800dc8a <BOS_CalendarConfig+0x7a>
 800dcb6:	46c0      	nop			; (mov r8, r8)
 800dcb8:	20006528 	.word	0x20006528
 800dcbc:	20006138 	.word	0x20006138
 800dcc0:	000032f2 	.word	0x000032f2

0800dcc4 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800dcc4:	b530      	push	{r4, r5, lr}
 800dcc6:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800dcc8:	4d16      	ldr	r5, [pc, #88]	; (800dd24 <GetTimeDate+0x60>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	a902      	add	r1, sp, #8
 800dcce:	0028      	movs	r0, r5
 800dcd0:	f004 fde0 	bl	8012894 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800dcd4:	ac07      	add	r4, sp, #28
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	0021      	movs	r1, r4
 800dcda:	0028      	movs	r0, r5
 800dcdc:	f004 fe02 	bl	80128e4 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800dce0:	ab02      	add	r3, sp, #8
 800dce2:	7a1a      	ldrb	r2, [r3, #8]
 800dce4:	09d2      	lsrs	r2, r2, #7
 800dce6:	3201      	adds	r2, #1
 800dce8:	4b0f      	ldr	r3, [pc, #60]	; (800dd28 <GetTimeDate+0x64>)
 800dcea:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800dcec:	9a03      	ldr	r2, [sp, #12]
 800dcee:	9201      	str	r2, [sp, #4]
 800dcf0:	0852      	lsrs	r2, r2, #1
 800dcf2:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800dcf4:	aa02      	add	r2, sp, #8
 800dcf6:	7892      	ldrb	r2, [r2, #2]
 800dcf8:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800dcfa:	aa02      	add	r2, sp, #8
 800dcfc:	7852      	ldrb	r2, [r2, #1]
 800dcfe:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800dd00:	aa02      	add	r2, sp, #8
 800dd02:	7812      	ldrb	r2, [r2, #0]
 800dd04:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800dd06:	78a2      	ldrb	r2, [r4, #2]
 800dd08:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800dd0a:	7862      	ldrb	r2, [r4, #1]
 800dd0c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800dd0e:	7822      	ldrb	r2, [r4, #0]
 800dd10:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800dd12:	78e2      	ldrb	r2, [r4, #3]
 800dd14:	21fa      	movs	r1, #250	; 0xfa
 800dd16:	00c9      	lsls	r1, r1, #3
 800dd18:	468c      	mov	ip, r1
 800dd1a:	4462      	add	r2, ip
 800dd1c:	831a      	strh	r2, [r3, #24]
}
 800dd1e:	b009      	add	sp, #36	; 0x24
 800dd20:	bd30      	pop	{r4, r5, pc}
 800dd22:	46c0      	nop			; (mov r8, r8)
 800dd24:	20006528 	.word	0x20006528
 800dd28:	20006138 	.word	0x20006138

0800dd2c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800dd2c:	b530      	push	{r4, r5, lr}
 800dd2e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800dd30:	4a12      	ldr	r2, [pc, #72]	; (800dd7c <TIM_USEC_Init+0x50>)
 800dd32:	69d1      	ldr	r1, [r2, #28]
 800dd34:	2080      	movs	r0, #128	; 0x80
 800dd36:	0040      	lsls	r0, r0, #1
 800dd38:	4301      	orrs	r1, r0
 800dd3a:	61d1      	str	r1, [r2, #28]
 800dd3c:	69d3      	ldr	r3, [r2, #28]
 800dd3e:	4003      	ands	r3, r0
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800dd44:	4c0e      	ldr	r4, [pc, #56]	; (800dd80 <TIM_USEC_Init+0x54>)
 800dd46:	4b0f      	ldr	r3, [pc, #60]	; (800dd84 <TIM_USEC_Init+0x58>)
 800dd48:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800dd4a:	f004 fb73 	bl	8012434 <HAL_RCC_GetPCLK1Freq>
 800dd4e:	490e      	ldr	r1, [pc, #56]	; (800dd88 <TIM_USEC_Init+0x5c>)
 800dd50:	f7f2 f9fe 	bl	8000150 <__udivsi3>
 800dd54:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd56:	2500      	movs	r5, #0
 800dd58:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800dd5a:	4b0c      	ldr	r3, [pc, #48]	; (800dd8c <TIM_USEC_Init+0x60>)
 800dd5c:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800dd5e:	0020      	movs	r0, r4
 800dd60:	f004 fe4c 	bl	80129fc <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd64:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd66:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800dd68:	a902      	add	r1, sp, #8
 800dd6a:	0020      	movs	r0, r4
 800dd6c:	f004 fe60 	bl	8012a30 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800dd70:	0020      	movs	r0, r4
 800dd72:	f004 fde8 	bl	8012946 <HAL_TIM_Base_Start>
}
 800dd76:	b005      	add	sp, #20
 800dd78:	bd30      	pop	{r4, r5, pc}
 800dd7a:	46c0      	nop			; (mov r8, r8)
 800dd7c:	40021000 	.word	0x40021000
 800dd80:	20006584 	.word	0x20006584
 800dd84:	40002000 	.word	0x40002000
 800dd88:	000f4240 	.word	0x000f4240
 800dd8c:	0000ffff 	.word	0x0000ffff

0800dd90 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800dd90:	b530      	push	{r4, r5, lr}
 800dd92:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800dd94:	4a12      	ldr	r2, [pc, #72]	; (800dde0 <TIM_MSEC_Init+0x50>)
 800dd96:	6991      	ldr	r1, [r2, #24]
 800dd98:	2080      	movs	r0, #128	; 0x80
 800dd9a:	0240      	lsls	r0, r0, #9
 800dd9c:	4301      	orrs	r1, r0
 800dd9e:	6191      	str	r1, [r2, #24]
 800dda0:	6993      	ldr	r3, [r2, #24]
 800dda2:	4003      	ands	r3, r0
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800dda8:	4c0e      	ldr	r4, [pc, #56]	; (800dde4 <TIM_MSEC_Init+0x54>)
 800ddaa:	4b0f      	ldr	r3, [pc, #60]	; (800dde8 <TIM_MSEC_Init+0x58>)
 800ddac:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800ddae:	f004 fb41 	bl	8012434 <HAL_RCC_GetPCLK1Freq>
 800ddb2:	21fa      	movs	r1, #250	; 0xfa
 800ddb4:	0089      	lsls	r1, r1, #2
 800ddb6:	f7f2 f9cb 	bl	8000150 <__udivsi3>
 800ddba:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ddbc:	2500      	movs	r5, #0
 800ddbe:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <TIM_MSEC_Init+0x5c>)
 800ddc2:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800ddc4:	0020      	movs	r0, r4
 800ddc6:	f004 fe19 	bl	80129fc <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ddca:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ddcc:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800ddce:	a902      	add	r1, sp, #8
 800ddd0:	0020      	movs	r0, r4
 800ddd2:	f004 fe2d 	bl	8012a30 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800ddd6:	0020      	movs	r0, r4
 800ddd8:	f004 fdb5 	bl	8012946 <HAL_TIM_Base_Start>
}
 800dddc:	b005      	add	sp, #20
 800ddde:	bd30      	pop	{r4, r5, pc}
 800dde0:	40021000 	.word	0x40021000
 800dde4:	20006548 	.word	0x20006548
 800dde8:	40014000 	.word	0x40014000
 800ddec:	0000ffff 	.word	0x0000ffff

0800ddf0 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800ddf0:	b510      	push	{r4, lr}
 800ddf2:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800ddf4:	f002 fa0c 	bl	8010210 <vPortEnterCritical>
	
	if (Delay)
 800ddf8:	2c00      	cmp	r4, #0
 800ddfa:	d006      	beq.n	800de0a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800ddfc:	4b04      	ldr	r3, [pc, #16]	; (800de10 <StartMicroDelay+0x20>)
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800de02:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800de04:	1a5b      	subs	r3, r3, r1
 800de06:	42a3      	cmp	r3, r4
 800de08:	d9fb      	bls.n	800de02 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800de0a:	f002 fa0d 	bl	8010228 <vPortExitCritical>
}
 800de0e:	bd10      	pop	{r4, pc}
 800de10:	20006584 	.word	0x20006584

0800de14 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800de14:	b510      	push	{r4, lr}
 800de16:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800de18:	f002 f9fa 	bl	8010210 <vPortEnterCritical>
	
	if (Delay)
 800de1c:	2c00      	cmp	r4, #0
 800de1e:	d006      	beq.n	800de2e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800de20:	4b04      	ldr	r3, [pc, #16]	; (800de34 <StartMilliDelay+0x20>)
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800de26:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800de28:	1a5b      	subs	r3, r3, r1
 800de2a:	42a3      	cmp	r3, r4
 800de2c:	d9fb      	bls.n	800de26 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800de2e:	f002 f9fb 	bl	8010228 <vPortExitCritical>
}
 800de32:	bd10      	pop	{r4, pc}
 800de34:	20006548 	.word	0x20006548

0800de38 <MX_USART1_UART_Init>:
	 uint16_t arrayPortsDir[__N];
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void) {
 800de38:	b510      	push	{r4, lr}
	huart1.Instance = USART1;
 800de3a:	4809      	ldr	r0, [pc, #36]	; (800de60 <MX_USART1_UART_Init+0x28>)
 800de3c:	4b09      	ldr	r3, [pc, #36]	; (800de64 <MX_USART1_UART_Init+0x2c>)
 800de3e:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800de40:	23e1      	movs	r3, #225	; 0xe1
 800de42:	031b      	lsls	r3, r3, #12
 800de44:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800de46:	2300      	movs	r3, #0
 800de48:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800de4a:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800de4c:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800de4e:	220c      	movs	r2, #12
 800de50:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800de52:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800de54:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800de56:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800de58:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800de5a:	f005 fa83 	bl	8013364 <HAL_UART_Init>
#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800de5e:	bd10      	pop	{r4, pc}
 800de60:	20006354 	.word	0x20006354
 800de64:	40013800 	.word	0x40013800

0800de68 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void) {
 800de68:	b510      	push	{r4, lr}
	huart2.Instance = USART2;
 800de6a:	4809      	ldr	r0, [pc, #36]	; (800de90 <MX_USART2_UART_Init+0x28>)
 800de6c:	4b09      	ldr	r3, [pc, #36]	; (800de94 <MX_USART2_UART_Init+0x2c>)
 800de6e:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800de70:	23e1      	movs	r3, #225	; 0xe1
 800de72:	031b      	lsls	r3, r3, #12
 800de74:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800de76:	2300      	movs	r3, #0
 800de78:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800de7a:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800de7c:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800de7e:	220c      	movs	r2, #12
 800de80:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800de82:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800de84:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800de86:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800de88:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800de8a:	f005 fa6b 	bl	8013364 <HAL_UART_Init>
#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800de8e:	bd10      	pop	{r4, pc}
 800de90:	2000643c 	.word	0x2000643c
 800de94:	40004400 	.word	0x40004400

0800de98 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void) {
 800de98:	b510      	push	{r4, lr}
	huart3.Instance = USART3;
 800de9a:	4809      	ldr	r0, [pc, #36]	; (800dec0 <MX_USART3_UART_Init+0x28>)
 800de9c:	4b09      	ldr	r3, [pc, #36]	; (800dec4 <MX_USART3_UART_Init+0x2c>)
 800de9e:	6003      	str	r3, [r0, #0]
	huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dea0:	23e1      	movs	r3, #225	; 0xe1
 800dea2:	031b      	lsls	r3, r3, #12
 800dea4:	6043      	str	r3, [r0, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dea6:	2300      	movs	r3, #0
 800dea8:	6083      	str	r3, [r0, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800deaa:	60c3      	str	r3, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800deac:	6103      	str	r3, [r0, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800deae:	220c      	movs	r2, #12
 800deb0:	6142      	str	r2, [r0, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800deb2:	6183      	str	r3, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800deb4:	61c3      	str	r3, [r0, #28]
	huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800deb6:	6203      	str	r3, [r0, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800deb8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800deba:	f005 fa53 	bl	8013364 <HAL_UART_Init>
#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800debe:	bd10      	pop	{r4, pc}
 800dec0:	20006218 	.word	0x20006218
 800dec4:	40004800 	.word	0x40004800

0800dec8 <MX_USART5_UART_Init>:
}
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void) {
 800dec8:	b510      	push	{r4, lr}
	huart5.Instance = USART5;
 800deca:	4809      	ldr	r0, [pc, #36]	; (800def0 <MX_USART5_UART_Init+0x28>)
 800decc:	4b09      	ldr	r3, [pc, #36]	; (800def4 <MX_USART5_UART_Init+0x2c>)
 800dece:	6003      	str	r3, [r0, #0]
	huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800ded0:	23e1      	movs	r3, #225	; 0xe1
 800ded2:	031b      	lsls	r3, r3, #12
 800ded4:	6043      	str	r3, [r0, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800ded6:	2300      	movs	r3, #0
 800ded8:	6083      	str	r3, [r0, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 800deda:	60c3      	str	r3, [r0, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800dedc:	6103      	str	r3, [r0, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800dede:	220c      	movs	r2, #12
 800dee0:	6142      	str	r2, [r0, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dee2:	6183      	str	r3, [r0, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800dee4:	61c3      	str	r3, [r0, #28]
	huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dee6:	6203      	str	r3, [r0, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dee8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800deea:	f005 fa3b 	bl	8013364 <HAL_UART_Init>
#if _P1pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800deee:	bd10      	pop	{r4, pc}
 800def0:	200062e0 	.word	0x200062e0
 800def4:	40005000 	.word	0x40005000

0800def8 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void) {
 800def8:	b510      	push	{r4, lr}
	huart6.Instance = USART6;
 800defa:	4809      	ldr	r0, [pc, #36]	; (800df20 <MX_USART6_UART_Init+0x28>)
 800defc:	4b09      	ldr	r3, [pc, #36]	; (800df24 <MX_USART6_UART_Init+0x2c>)
 800defe:	6003      	str	r3, [r0, #0]
	huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800df00:	23e1      	movs	r3, #225	; 0xe1
 800df02:	031b      	lsls	r3, r3, #12
 800df04:	6043      	str	r3, [r0, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800df06:	2300      	movs	r3, #0
 800df08:	6083      	str	r3, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800df0a:	60c3      	str	r3, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800df0c:	6103      	str	r3, [r0, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800df0e:	220c      	movs	r2, #12
 800df10:	6142      	str	r2, [r0, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df12:	6183      	str	r3, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800df14:	61c3      	str	r3, [r0, #28]
	huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800df16:	6203      	str	r3, [r0, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800df18:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800df1a:	f005 fa23 	bl	8013364 <HAL_UART_Init>
#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800df1e:	bd10      	pop	{r4, pc}
 800df20:	200063cc 	.word	0x200063cc
 800df24:	40011400 	.word	0x40011400

0800df28 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800df28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df2a:	46ce      	mov	lr, r9
 800df2c:	4647      	mov	r7, r8
 800df2e:	b580      	push	{r7, lr}
 800df30:	b08b      	sub	sp, #44	; 0x2c

	GPIO_InitTypeDef GPIO_InitStruct;
	if (huart->Instance == USART1) {
 800df32:	6803      	ldr	r3, [r0, #0]
 800df34:	4a7f      	ldr	r2, [pc, #508]	; (800e134 <HAL_UART_MspInit+0x20c>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d015      	beq.n	800df66 <HAL_UART_MspInit+0x3e>

		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(USART1_IRQn);
#endif
	} else if (huart->Instance == USART2) {
 800df3a:	4a7f      	ldr	r2, [pc, #508]	; (800e138 <HAL_UART_MspInit+0x210>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d040      	beq.n	800dfc2 <HAL_UART_MspInit+0x9a>

		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(USART2_IRQn);
#endif
	} else if (huart->Instance == USART3) {
 800df40:	4a7e      	ldr	r2, [pc, #504]	; (800e13c <HAL_UART_MspInit+0x214>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d069      	beq.n	800e01a <HAL_UART_MspInit+0xf2>

		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
#endif
	} else if (huart->Instance == USART4) {
 800df46:	4a7e      	ldr	r2, [pc, #504]	; (800e140 <HAL_UART_MspInit+0x218>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d007      	beq.n	800df5c <HAL_UART_MspInit+0x34>

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
	} else if (huart->Instance == USART5) {
 800df4c:	4a7d      	ldr	r2, [pc, #500]	; (800e144 <HAL_UART_MspInit+0x21c>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d100      	bne.n	800df54 <HAL_UART_MspInit+0x2c>
 800df52:	e092      	b.n	800e07a <HAL_UART_MspInit+0x152>

		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
#endif
	} else if (huart->Instance == USART6) {
 800df54:	4a7c      	ldr	r2, [pc, #496]	; (800e148 <HAL_UART_MspInit+0x220>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d100      	bne.n	800df5c <HAL_UART_MspInit+0x34>
 800df5a:	e0bc      	b.n	800e0d6 <HAL_UART_MspInit+0x1ae>
		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
#endif
	}
}
 800df5c:	b00b      	add	sp, #44	; 0x2c
 800df5e:	bcc0      	pop	{r6, r7}
 800df60:	46b9      	mov	r9, r7
 800df62:	46b0      	mov	r8, r6
 800df64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__USART1_CLK_ENABLE()
 800df66:	4a79      	ldr	r2, [pc, #484]	; (800e14c <HAL_UART_MspInit+0x224>)
 800df68:	6991      	ldr	r1, [r2, #24]
 800df6a:	2080      	movs	r0, #128	; 0x80
 800df6c:	01c0      	lsls	r0, r0, #7
 800df6e:	4301      	orrs	r1, r0
 800df70:	6191      	str	r1, [r2, #24]
 800df72:	6993      	ldr	r3, [r2, #24]
 800df74:	4003      	ands	r3, r0
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	9b00      	ldr	r3, [sp, #0]
		GPIO_InitStruct.Pin = USART1_TX_PIN;
 800df7a:	2380      	movs	r3, #128	; 0x80
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df80:	2702      	movs	r7, #2
 800df82:	9706      	str	r7, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df84:	2401      	movs	r4, #1
 800df86:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df88:	2603      	movs	r6, #3
 800df8a:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART1_AF;
 800df8c:	9409      	str	r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800df8e:	2590      	movs	r5, #144	; 0x90
 800df90:	05ed      	lsls	r5, r5, #23
 800df92:	a905      	add	r1, sp, #20
 800df94:	0028      	movs	r0, r5
 800df96:	f003 fd2b 	bl	80119f0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;
 800df9a:	2380      	movs	r3, #128	; 0x80
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfa0:	9706      	str	r7, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfa2:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfa4:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART1_AF;
 800dfa6:	9409      	str	r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800dfa8:	a905      	add	r1, sp, #20
 800dfaa:	0028      	movs	r0, r5
 800dfac:	f003 fd20 	bl	80119f0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	201b      	movs	r0, #27
 800dfb6:	f002 fd9d 	bl	8010af4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 800dfba:	201b      	movs	r0, #27
 800dfbc:	f002 fdca 	bl	8010b54 <HAL_NVIC_EnableIRQ>
 800dfc0:	e7cc      	b.n	800df5c <HAL_UART_MspInit+0x34>
		__USART2_CLK_ENABLE()
 800dfc2:	4a62      	ldr	r2, [pc, #392]	; (800e14c <HAL_UART_MspInit+0x224>)
 800dfc4:	69d1      	ldr	r1, [r2, #28]
 800dfc6:	2080      	movs	r0, #128	; 0x80
 800dfc8:	0280      	lsls	r0, r0, #10
 800dfca:	4301      	orrs	r1, r0
 800dfcc:	61d1      	str	r1, [r2, #28]
 800dfce:	69d3      	ldr	r3, [r2, #28]
 800dfd0:	4003      	ands	r3, r0
 800dfd2:	9301      	str	r3, [sp, #4]
 800dfd4:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = USART2_TX_PIN;
 800dfd6:	2304      	movs	r3, #4
 800dfd8:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfda:	2702      	movs	r7, #2
 800dfdc:	9706      	str	r7, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfde:	2401      	movs	r4, #1
 800dfe0:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfe2:	2603      	movs	r6, #3
 800dfe4:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART2_AF;
 800dfe6:	9409      	str	r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800dfe8:	2590      	movs	r5, #144	; 0x90
 800dfea:	05ed      	lsls	r5, r5, #23
 800dfec:	a905      	add	r1, sp, #20
 800dfee:	0028      	movs	r0, r5
 800dff0:	f003 fcfe 	bl	80119f0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;
 800dff4:	2308      	movs	r3, #8
 800dff6:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dff8:	9706      	str	r7, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dffa:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dffc:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART2_AF;
 800dffe:	9409      	str	r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800e000:	a905      	add	r1, sp, #20
 800e002:	0028      	movs	r0, r5
 800e004:	f003 fcf4 	bl	80119f0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e008:	2200      	movs	r2, #0
 800e00a:	2101      	movs	r1, #1
 800e00c:	201c      	movs	r0, #28
 800e00e:	f002 fd71 	bl	8010af4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e012:	201c      	movs	r0, #28
 800e014:	f002 fd9e 	bl	8010b54 <HAL_NVIC_EnableIRQ>
 800e018:	e7a0      	b.n	800df5c <HAL_UART_MspInit+0x34>
		__USART3_CLK_ENABLE()
 800e01a:	4a4c      	ldr	r2, [pc, #304]	; (800e14c <HAL_UART_MspInit+0x224>)
 800e01c:	69d1      	ldr	r1, [r2, #28]
 800e01e:	2080      	movs	r0, #128	; 0x80
 800e020:	02c0      	lsls	r0, r0, #11
 800e022:	4301      	orrs	r1, r0
 800e024:	61d1      	str	r1, [r2, #28]
 800e026:	69d3      	ldr	r3, [r2, #28]
 800e028:	4003      	ands	r3, r0
 800e02a:	9302      	str	r3, [sp, #8]
 800e02c:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = USART3_TX_PIN;
 800e02e:	2380      	movs	r3, #128	; 0x80
 800e030:	00db      	lsls	r3, r3, #3
 800e032:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e034:	2302      	movs	r3, #2
 800e036:	4698      	mov	r8, r3
 800e038:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e03a:	2701      	movs	r7, #1
 800e03c:	9707      	str	r7, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e03e:	2603      	movs	r6, #3
 800e040:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART3_AF;
 800e042:	2504      	movs	r5, #4
 800e044:	9509      	str	r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800e046:	4c42      	ldr	r4, [pc, #264]	; (800e150 <HAL_UART_MspInit+0x228>)
 800e048:	a905      	add	r1, sp, #20
 800e04a:	0020      	movs	r0, r4
 800e04c:	f003 fcd0 	bl	80119f0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;
 800e050:	2380      	movs	r3, #128	; 0x80
 800e052:	011b      	lsls	r3, r3, #4
 800e054:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e056:	4643      	mov	r3, r8
 800e058:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e05a:	9707      	str	r7, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e05c:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART3_AF;
 800e05e:	9509      	str	r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800e060:	a905      	add	r1, sp, #20
 800e062:	0020      	movs	r0, r4
 800e064:	f003 fcc4 	bl	80119f0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e068:	2200      	movs	r2, #0
 800e06a:	2101      	movs	r1, #1
 800e06c:	201d      	movs	r0, #29
 800e06e:	f002 fd41 	bl	8010af4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e072:	201d      	movs	r0, #29
 800e074:	f002 fd6e 	bl	8010b54 <HAL_NVIC_EnableIRQ>
 800e078:	e770      	b.n	800df5c <HAL_UART_MspInit+0x34>
		__USART5_CLK_ENABLE()
 800e07a:	4a34      	ldr	r2, [pc, #208]	; (800e14c <HAL_UART_MspInit+0x224>)
 800e07c:	69d1      	ldr	r1, [r2, #28]
 800e07e:	2080      	movs	r0, #128	; 0x80
 800e080:	0340      	lsls	r0, r0, #13
 800e082:	4301      	orrs	r1, r0
 800e084:	61d1      	str	r1, [r2, #28]
 800e086:	69d3      	ldr	r3, [r2, #28]
 800e088:	4003      	ands	r3, r0
 800e08a:	9303      	str	r3, [sp, #12]
 800e08c:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin = USART5_TX_PIN;
 800e08e:	2308      	movs	r3, #8
 800e090:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e092:	3b06      	subs	r3, #6
 800e094:	4698      	mov	r8, r3
 800e096:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e098:	2701      	movs	r7, #1
 800e09a:	9707      	str	r7, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e09c:	2603      	movs	r6, #3
 800e09e:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART5_AF;
 800e0a0:	2504      	movs	r5, #4
 800e0a2:	9509      	str	r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800e0a4:	4c2a      	ldr	r4, [pc, #168]	; (800e150 <HAL_UART_MspInit+0x228>)
 800e0a6:	a905      	add	r1, sp, #20
 800e0a8:	0020      	movs	r0, r4
 800e0aa:	f003 fca1 	bl	80119f0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;
 800e0ae:	2310      	movs	r3, #16
 800e0b0:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0b2:	4643      	mov	r3, r8
 800e0b4:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e0b6:	9707      	str	r7, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e0b8:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Alternate = USART5_AF;
 800e0ba:	9509      	str	r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800e0bc:	a905      	add	r1, sp, #20
 800e0be:	0020      	movs	r0, r4
 800e0c0:	f003 fc96 	bl	80119f0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	2101      	movs	r1, #1
 800e0c8:	201d      	movs	r0, #29
 800e0ca:	f002 fd13 	bl	8010af4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e0ce:	201d      	movs	r0, #29
 800e0d0:	f002 fd40 	bl	8010b54 <HAL_NVIC_EnableIRQ>
 800e0d4:	e742      	b.n	800df5c <HAL_UART_MspInit+0x34>
		__USART6_CLK_ENABLE()
 800e0d6:	4b1d      	ldr	r3, [pc, #116]	; (800e14c <HAL_UART_MspInit+0x224>)
 800e0d8:	699a      	ldr	r2, [r3, #24]
 800e0da:	2420      	movs	r4, #32
 800e0dc:	4322      	orrs	r2, r4
 800e0de:	619a      	str	r2, [r3, #24]
 800e0e0:	699b      	ldr	r3, [r3, #24]
 800e0e2:	4023      	ands	r3, r4
 800e0e4:	9304      	str	r3, [sp, #16]
 800e0e6:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Pin = USART6_TX_PIN;
 800e0e8:	2310      	movs	r3, #16
 800e0ea:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0ec:	3b0e      	subs	r3, #14
 800e0ee:	4699      	mov	r9, r3
 800e0f0:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	4698      	mov	r8, r3
 800e0f6:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e0f8:	2703      	movs	r7, #3
 800e0fa:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Alternate = USART6_AF;
 800e0fc:	2605      	movs	r6, #5
 800e0fe:	9609      	str	r6, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e100:	2590      	movs	r5, #144	; 0x90
 800e102:	05ed      	lsls	r5, r5, #23
 800e104:	a905      	add	r1, sp, #20
 800e106:	0028      	movs	r0, r5
 800e108:	f003 fc72 	bl	80119f0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;
 800e10c:	9405      	str	r4, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e10e:	464b      	mov	r3, r9
 800e110:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e112:	4643      	mov	r3, r8
 800e114:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e116:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Alternate = USART6_AF;
 800e118:	9609      	str	r6, [sp, #36]	; 0x24
		HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e11a:	a905      	add	r1, sp, #20
 800e11c:	0028      	movs	r0, r5
 800e11e:	f003 fc67 	bl	80119f0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e122:	2200      	movs	r2, #0
 800e124:	2101      	movs	r1, #1
 800e126:	201d      	movs	r0, #29
 800e128:	f002 fce4 	bl	8010af4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e12c:	201d      	movs	r0, #29
 800e12e:	f002 fd11 	bl	8010b54 <HAL_NVIC_EnableIRQ>
}
 800e132:	e713      	b.n	800df5c <HAL_UART_MspInit+0x34>
 800e134:	40013800 	.word	0x40013800
 800e138:	40004400 	.word	0x40004400
 800e13c:	40004800 	.word	0x40004800
 800e140:	40004c00 	.word	0x40004c00
 800e144:	40005000 	.word	0x40005000
 800e148:	40011400 	.word	0x40011400
 800e14c:	40021000 	.word	0x40021000
 800e150:	48000400 	.word	0x48000400

0800e154 <GetUart>:
}

/* --- Get the UART for a given port. 
 */
UART_HandleTypeDef* GetUart(uint8_t port) {
	switch (port) {
 800e154:	2805      	cmp	r0, #5
 800e156:	d80b      	bhi.n	800e170 <GetUart+0x1c>
 800e158:	0080      	lsls	r0, r0, #2
 800e15a:	4b07      	ldr	r3, [pc, #28]	; (800e178 <GetUart+0x24>)
 800e15c:	581b      	ldr	r3, [r3, r0]
 800e15e:	469f      	mov	pc, r3
	case P4:
		return P4uart;
#endif
#ifdef _P5
	case P5:
		return P5uart;
 800e160:	4806      	ldr	r0, [pc, #24]	; (800e17c <GetUart+0x28>)
			return P10uart;
	#endif
	default:
		return 0;
	}
}
 800e162:	4770      	bx	lr
		return P3uart;
 800e164:	4806      	ldr	r0, [pc, #24]	; (800e180 <GetUart+0x2c>)
 800e166:	e7fc      	b.n	800e162 <GetUart+0xe>
		return P4uart;
 800e168:	4806      	ldr	r0, [pc, #24]	; (800e184 <GetUart+0x30>)
 800e16a:	e7fa      	b.n	800e162 <GetUart+0xe>
		return P5uart;
 800e16c:	4806      	ldr	r0, [pc, #24]	; (800e188 <GetUart+0x34>)
 800e16e:	e7f8      	b.n	800e162 <GetUart+0xe>
		return 0;
 800e170:	2000      	movs	r0, #0
 800e172:	e7f6      	b.n	800e162 <GetUart+0xe>
		return P2uart;
 800e174:	4805      	ldr	r0, [pc, #20]	; (800e18c <GetUart+0x38>)
 800e176:	e7f4      	b.n	800e162 <GetUart+0xe>
 800e178:	0801b510 	.word	0x0801b510
 800e17c:	200062e0 	.word	0x200062e0
 800e180:	200063cc 	.word	0x200063cc
 800e184:	20006218 	.word	0x20006218
 800e188:	20006354 	.word	0x20006354
 800e18c:	2000643c 	.word	0x2000643c

0800e190 <writePxMutex>:
		uint32_t mutexTimeout, uint32_t portTimeout) {
 800e190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e192:	46c6      	mov	lr, r8
 800e194:	b500      	push	{lr}
 800e196:	0006      	movs	r6, r0
 800e198:	000f      	movs	r7, r1
 800e19a:	4690      	mov	r8, r2
 800e19c:	001c      	movs	r4, r3
	if (GetUart(port) != NULL) {
 800e19e:	f7ff ffd9 	bl	800e154 <GetUart>
 800e1a2:	1e05      	subs	r5, r0, #0
 800e1a4:	d01c      	beq.n	800e1e0 <writePxMutex+0x50>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e1a6:	00b3      	lsls	r3, r6, #2
 800e1a8:	4a10      	ldr	r2, [pc, #64]	; (800e1ec <writePxMutex+0x5c>)
 800e1aa:	5898      	ldr	r0, [r3, r2]
 800e1ac:	0021      	movs	r1, r4
 800e1ae:	f000 f943 	bl	800e438 <osSemaphoreWait>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d012      	beq.n	800e1dc <writePxMutex+0x4c>
	HAL_StatusTypeDef result = HAL_ERROR;
 800e1b6:	2401      	movs	r4, #1
 800e1b8:	e013      	b.n	800e1e2 <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t*) buffer, n,
 800e1ba:	9b06      	ldr	r3, [sp, #24]
 800e1bc:	4642      	mov	r2, r8
 800e1be:	0039      	movs	r1, r7
 800e1c0:	0028      	movs	r0, r5
 800e1c2:	f005 f825 	bl	8013210 <HAL_UART_Transmit>
 800e1c6:	0004      	movs	r4, r0
			while (result != HAL_OK && result != HAL_TIMEOUT) {
 800e1c8:	2c00      	cmp	r4, #0
 800e1ca:	d001      	beq.n	800e1d0 <writePxMutex+0x40>
 800e1cc:	2c03      	cmp	r4, #3
 800e1ce:	d1f4      	bne.n	800e1ba <writePxMutex+0x2a>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e1d0:	00b6      	lsls	r6, r6, #2
 800e1d2:	4b06      	ldr	r3, [pc, #24]	; (800e1ec <writePxMutex+0x5c>)
 800e1d4:	58f0      	ldr	r0, [r6, r3]
 800e1d6:	f000 f95f 	bl	800e498 <osSemaphoreRelease>
 800e1da:	e002      	b.n	800e1e2 <writePxMutex+0x52>
	HAL_StatusTypeDef result = HAL_ERROR;
 800e1dc:	2401      	movs	r4, #1
 800e1de:	e7f3      	b.n	800e1c8 <writePxMutex+0x38>
 800e1e0:	2401      	movs	r4, #1
}
 800e1e2:	0020      	movs	r0, r4
 800e1e4:	bc80      	pop	{r7}
 800e1e6:	46b8      	mov	r8, r7
 800e1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ea:	46c0      	nop			; (mov r8, r8)
 800e1ec:	200061b8 	.word	0x200061b8

0800e1f0 <writePxITMutex>:
		uint32_t mutexTimeout) {
 800e1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	0004      	movs	r4, r0
 800e1f6:	9101      	str	r1, [sp, #4]
 800e1f8:	0017      	movs	r7, r2
 800e1fa:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {
 800e1fc:	f7ff ffaa 	bl	800e154 <GetUart>
 800e200:	1e06      	subs	r6, r0, #0
 800e202:	d00f      	beq.n	800e224 <writePxITMutex+0x34>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e204:	00a4      	lsls	r4, r4, #2
 800e206:	4b09      	ldr	r3, [pc, #36]	; (800e22c <writePxITMutex+0x3c>)
 800e208:	58e0      	ldr	r0, [r4, r3]
 800e20a:	0029      	movs	r1, r5
 800e20c:	f000 f914 	bl	800e438 <osSemaphoreWait>
 800e210:	2800      	cmp	r0, #0
 800e212:	d001      	beq.n	800e218 <writePxITMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR;
 800e214:	2001      	movs	r0, #1
 800e216:	e006      	b.n	800e226 <writePxITMutex+0x36>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t*) buffer, n);
 800e218:	003a      	movs	r2, r7
 800e21a:	9901      	ldr	r1, [sp, #4]
 800e21c:	0030      	movs	r0, r6
 800e21e:	f004 fc4a 	bl	8012ab6 <HAL_UART_Transmit_IT>
 800e222:	e000      	b.n	800e226 <writePxITMutex+0x36>
	HAL_StatusTypeDef result = HAL_ERROR;
 800e224:	2001      	movs	r0, #1
}
 800e226:	b003      	add	sp, #12
 800e228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e22a:	46c0      	nop			; (mov r8, r8)
 800e22c:	200061b8 	.word	0x200061b8

0800e230 <writePxDMAMutex>:
		uint32_t mutexTimeout) {
 800e230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e232:	b083      	sub	sp, #12
 800e234:	0004      	movs	r4, r0
 800e236:	9101      	str	r1, [sp, #4]
 800e238:	0017      	movs	r7, r2
 800e23a:	001d      	movs	r5, r3
	UART_HandleTypeDef *hUart = GetUart(port);
 800e23c:	f7ff ff8a 	bl	800e154 <GetUart>
 800e240:	1e06      	subs	r6, r0, #0
	if (hUart != NULL) {
 800e242:	d012      	beq.n	800e26a <writePxDMAMutex+0x3a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e244:	00a4      	lsls	r4, r4, #2
 800e246:	4b0a      	ldr	r3, [pc, #40]	; (800e270 <writePxDMAMutex+0x40>)
 800e248:	58e0      	ldr	r0, [r4, r3]
 800e24a:	0029      	movs	r1, r5
 800e24c:	f000 f8f4 	bl	800e438 <osSemaphoreWait>
 800e250:	2800      	cmp	r0, #0
 800e252:	d001      	beq.n	800e258 <writePxDMAMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR;
 800e254:	2001      	movs	r0, #1
 800e256:	e009      	b.n	800e26c <writePxDMAMutex+0x3c>
			DMA_MSG_TX_Setup(hUart);
 800e258:	0030      	movs	r0, r6
 800e25a:	f7ff f959 	bl	800d510 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t*) buffer, n);
 800e25e:	003a      	movs	r2, r7
 800e260:	9901      	ldr	r1, [sp, #4]
 800e262:	0030      	movs	r0, r6
 800e264:	f004 fcd6 	bl	8012c14 <HAL_UART_Transmit_DMA>
 800e268:	e000      	b.n	800e26c <writePxDMAMutex+0x3c>
	HAL_StatusTypeDef result = HAL_ERROR;
 800e26a:	2001      	movs	r0, #1
}
 800e26c:	b003      	add	sp, #12
 800e26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e270:	200061b8 	.word	0x200061b8

0800e274 <UpdateBaudrate>:
BOS_Status UpdateBaudrate(uint8_t port, uint32_t baudrate) {
 800e274:	b510      	push	{r4, lr}
 800e276:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e278:	f7ff ff6c 	bl	800e154 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e27c:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e27e:	f005 f871 	bl	8013364 <HAL_UART_Init>
}
 800e282:	2000      	movs	r0, #0
 800e284:	bd10      	pop	{r4, pc}
	...

0800e288 <SwapUartPins>:

/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
 */
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction) {
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e28c:	d003      	beq.n	800e296 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e28e:	2901      	cmp	r1, #1
 800e290:	d002      	beq.n	800e298 <SwapUartPins+0x10>
			arrayPortsDir[myID - 1] |= (0x8000 >> (GetPort(huart) - 1)); /* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e292:	2900      	cmp	r1, #0
 800e294:	d016      	beq.n	800e2c4 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);
		}
	}
}
 800e296:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID - 1] |= (0x8000 >> (GetPort(huart) - 1)); /* Set bit to one */
 800e298:	f7fd f824 	bl	800b2e4 <GetPort>
 800e29c:	3801      	subs	r0, #1
 800e29e:	2180      	movs	r1, #128	; 0x80
 800e2a0:	0209      	lsls	r1, r1, #8
 800e2a2:	000d      	movs	r5, r1
 800e2a4:	4105      	asrs	r5, r0
 800e2a6:	4b12      	ldr	r3, [pc, #72]	; (800e2f0 <SwapUartPins+0x68>)
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	4811      	ldr	r0, [pc, #68]	; (800e2f4 <SwapUartPins+0x6c>)
 800e2ae:	005b      	lsls	r3, r3, #1
 800e2b0:	5a1a      	ldrh	r2, [r3, r0]
 800e2b2:	432a      	orrs	r2, r5
 800e2b4:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e2b6:	2308      	movs	r3, #8
 800e2b8:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e2ba:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e2bc:	0020      	movs	r0, r4
 800e2be:	f005 f851 	bl	8013364 <HAL_UART_Init>
 800e2c2:	e7e8      	b.n	800e296 <SwapUartPins+0xe>
			arrayPortsDir[myID - 1] &= (~(0x8000 >> (GetPort(huart) - 1))); /* Set bit to zero */
 800e2c4:	f7fd f80e 	bl	800b2e4 <GetPort>
 800e2c8:	3801      	subs	r0, #1
 800e2ca:	2180      	movs	r1, #128	; 0x80
 800e2cc:	0209      	lsls	r1, r1, #8
 800e2ce:	4101      	asrs	r1, r0
 800e2d0:	4b07      	ldr	r3, [pc, #28]	; (800e2f0 <SwapUartPins+0x68>)
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	4807      	ldr	r0, [pc, #28]	; (800e2f4 <SwapUartPins+0x6c>)
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	5a1a      	ldrh	r2, [r3, r0]
 800e2dc:	438a      	bics	r2, r1
 800e2de:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e2e0:	2308      	movs	r3, #8
 800e2e2:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e2e8:	0020      	movs	r0, r4
 800e2ea:	f005 f83b 	bl	8013364 <HAL_UART_Init>
}
 800e2ee:	e7d2      	b.n	800e296 <SwapUartPins+0xe>
 800e2f0:	2000089e 	.word	0x2000089e
 800e2f4:	200065c0 	.word	0x200065c0

0800e2f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e2f8:	4816      	ldr	r0, [pc, #88]	; (800e354 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e2fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e2fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e2fe:	e003      	b.n	800e308 <LoopCopyDataInit>

0800e300 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e300:	4b15      	ldr	r3, [pc, #84]	; (800e358 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e302:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e304:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e306:	3104      	adds	r1, #4

0800e308 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e308:	4814      	ldr	r0, [pc, #80]	; (800e35c <LoopForever+0xc>)
  ldr r3, =_edata
 800e30a:	4b15      	ldr	r3, [pc, #84]	; (800e360 <LoopForever+0x10>)
  adds r2, r0, r1
 800e30c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e30e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e310:	d3f6      	bcc.n	800e300 <CopyDataInit>
  ldr r2, =_sbss
 800e312:	4a14      	ldr	r2, [pc, #80]	; (800e364 <LoopForever+0x14>)
  b LoopFillZerobss
 800e314:	e002      	b.n	800e31c <LoopFillZerobss>

0800e316 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e316:	2300      	movs	r3, #0
  str  r3, [r2]
 800e318:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e31a:	3204      	adds	r2, #4

0800e31c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e31c:	4b12      	ldr	r3, [pc, #72]	; (800e368 <LoopForever+0x18>)
  cmp r2, r3
 800e31e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e320:	d3f9      	bcc.n	800e316 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e322:	4812      	ldr	r0, [pc, #72]	; (800e36c <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e324:	4912      	ldr	r1, [pc, #72]	; (800e370 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e326:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e328:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e32a:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e32c:	d005      	beq.n	800e33a <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e32e:	f000 f82b 	bl	800e388 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e332:	f005 f98d 	bl	8013650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e336:	f005 f96c 	bl	8013612 <main>

0800e33a <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e33a:	480e      	ldr	r0, [pc, #56]	; (800e374 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e33c:	490e      	ldr	r1, [pc, #56]	; (800e378 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e33e:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e340:	480e      	ldr	r0, [pc, #56]	; (800e37c <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e342:	490d      	ldr	r1, [pc, #52]	; (800e378 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e344:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e346:	480e      	ldr	r0, [pc, #56]	; (800e380 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e348:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e34a:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e34c:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e34e:	4700      	bx	r0

0800e350 <LoopForever>:


LoopForever:
    b LoopForever
 800e350:	e7fe      	b.n	800e350 <LoopForever>
 800e352:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e354:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e358:	0801bc90 	.word	0x0801bc90
  ldr r0, =_sdata
 800e35c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e360:	200002b4 	.word	0x200002b4
  ldr r2, =_sbss
 800e364:	200002b8 	.word	0x200002b8
  ldr r3, = _ebss
 800e368:	20006668 	.word	0x20006668
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e36c:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e370:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e374:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e378:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e37c:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e380:	1fffd800 	.word	0x1fffd800

0800e384 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e384:	e7fe      	b.n	800e384 <ADC1_COMP_IRQHandler>
	...

0800e388 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e388:	4b11      	ldr	r3, [pc, #68]	; (800e3d0 <SystemInit+0x48>)
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	2101      	movs	r1, #1
 800e38e:	430a      	orrs	r2, r1
 800e390:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e392:	685a      	ldr	r2, [r3, #4]
 800e394:	480f      	ldr	r0, [pc, #60]	; (800e3d4 <SystemInit+0x4c>)
 800e396:	4002      	ands	r2, r0
 800e398:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	480e      	ldr	r0, [pc, #56]	; (800e3d8 <SystemInit+0x50>)
 800e39e:	4002      	ands	r2, r0
 800e3a0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	480d      	ldr	r0, [pc, #52]	; (800e3dc <SystemInit+0x54>)
 800e3a6:	4002      	ands	r2, r0
 800e3a8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e3aa:	685a      	ldr	r2, [r3, #4]
 800e3ac:	480c      	ldr	r0, [pc, #48]	; (800e3e0 <SystemInit+0x58>)
 800e3ae:	4002      	ands	r2, r0
 800e3b0:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b4:	200f      	movs	r0, #15
 800e3b6:	4382      	bics	r2, r0
 800e3b8:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e3ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3bc:	4809      	ldr	r0, [pc, #36]	; (800e3e4 <SystemInit+0x5c>)
 800e3be:	4002      	ands	r2, r0
 800e3c0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e3c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3c4:	438a      	bics	r2, r1
 800e3c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	609a      	str	r2, [r3, #8]

}
 800e3cc:	4770      	bx	lr
 800e3ce:	46c0      	nop			; (mov r8, r8)
 800e3d0:	40021000 	.word	0x40021000
 800e3d4:	08ffb80c 	.word	0x08ffb80c
 800e3d8:	fef6ffff 	.word	0xfef6ffff
 800e3dc:	fffbffff 	.word	0xfffbffff
 800e3e0:	ffc0ffff 	.word	0xffc0ffff
 800e3e4:	fff0feac 	.word	0xfff0feac

0800e3e8 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3e8:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800e3ec:	1e43      	subs	r3, r0, #1
 800e3ee:	4198      	sbcs	r0, r3
}
 800e3f0:	4770      	bx	lr

0800e3f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e3f2:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e3f4:	f000 ff8e 	bl	800f314 <vTaskStartScheduler>
  
  return osOK;
}
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	bd10      	pop	{r4, pc}

0800e3fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e3fc:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d100      	bne.n	800e404 <osDelay+0x8>
 800e402:	3001      	adds	r0, #1
 800e404:	f001 f8c2 	bl	800f58c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e408:	2000      	movs	r0, #0
 800e40a:	bd10      	pop	{r4, pc}

0800e40c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e40c:	b510      	push	{r4, lr}
 800e40e:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e410:	2901      	cmp	r1, #1
 800e412:	d005      	beq.n	800e420 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e414:	2100      	movs	r1, #0
 800e416:	f000 fb0c 	bl	800ea32 <xQueueCreateCountingSemaphore>
 800e41a:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e41c:	0020      	movs	r0, r4
 800e41e:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e420:	2203      	movs	r2, #3
 800e422:	2100      	movs	r1, #0
 800e424:	f000 fade 	bl	800e9e4 <xQueueGenericCreate>
 800e428:	1e04      	subs	r4, r0, #0
 800e42a:	d0f7      	beq.n	800e41c <osSemaphoreCreate+0x10>
 800e42c:	2300      	movs	r3, #0
 800e42e:	2200      	movs	r2, #0
 800e430:	2100      	movs	r1, #0
 800e432:	f000 fb14 	bl	800ea5e <xQueueGenericSend>
    return sema;
 800e436:	e7f1      	b.n	800e41c <osSemaphoreCreate+0x10>

0800e438 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e438:	b570      	push	{r4, r5, r6, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	0005      	movs	r5, r0
 800e43e:	000e      	movs	r6, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e440:	2300      	movs	r3, #0
 800e442:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e444:	2800      	cmp	r0, #0
 800e446:	d01e      	beq.n	800e486 <osSemaphoreWait+0x4e>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e448:	f7ff ffce 	bl	800e3e8 <inHandlerMode>
 800e44c:	1e04      	subs	r4, r0, #0
 800e44e:	d00f      	beq.n	800e470 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e450:	aa01      	add	r2, sp, #4
 800e452:	2100      	movs	r1, #0
 800e454:	0028      	movs	r0, r5
 800e456:	f000 fcc0 	bl	800edda <xQueueReceiveFromISR>
 800e45a:	2801      	cmp	r0, #1
 800e45c:	d115      	bne.n	800e48a <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e45e:	9c01      	ldr	r4, [sp, #4]
 800e460:	2c00      	cmp	r4, #0
 800e462:	d00d      	beq.n	800e480 <osSemaphoreWait+0x48>
 800e464:	4b0b      	ldr	r3, [pc, #44]	; (800e494 <osSemaphoreWait+0x5c>)
 800e466:	2280      	movs	r2, #128	; 0x80
 800e468:	0552      	lsls	r2, r2, #21
 800e46a:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e46c:	2400      	movs	r4, #0
 800e46e:	e007      	b.n	800e480 <osSemaphoreWait+0x48>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e470:	2300      	movs	r3, #0
 800e472:	0032      	movs	r2, r6
 800e474:	2100      	movs	r1, #0
 800e476:	0028      	movs	r0, r5
 800e478:	f000 fc0c 	bl	800ec94 <xQueueGenericReceive>
 800e47c:	2801      	cmp	r0, #1
 800e47e:	d106      	bne.n	800e48e <osSemaphoreWait+0x56>
}
 800e480:	0020      	movs	r0, r4
 800e482:	b002      	add	sp, #8
 800e484:	bd70      	pop	{r4, r5, r6, pc}
    return osErrorParameter;
 800e486:	2480      	movs	r4, #128	; 0x80
 800e488:	e7fa      	b.n	800e480 <osSemaphoreWait+0x48>
      return osErrorOS;
 800e48a:	24ff      	movs	r4, #255	; 0xff
 800e48c:	e7f8      	b.n	800e480 <osSemaphoreWait+0x48>
    return osErrorOS;
 800e48e:	24ff      	movs	r4, #255	; 0xff
 800e490:	e7f6      	b.n	800e480 <osSemaphoreWait+0x48>
 800e492:	46c0      	nop			; (mov r8, r8)
 800e494:	e000ed04 	.word	0xe000ed04

0800e498 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e498:	b510      	push	{r4, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	0004      	movs	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800e4a2:	f7ff ffa1 	bl	800e3e8 <inHandlerMode>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	d00e      	beq.n	800e4c8 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e4aa:	a901      	add	r1, sp, #4
 800e4ac:	0020      	movs	r0, r4
 800e4ae:	f000 fbb0 	bl	800ec12 <xQueueGiveFromISR>
 800e4b2:	2801      	cmp	r0, #1
 800e4b4:	d115      	bne.n	800e4e2 <osSemaphoreRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e4b6:	9b01      	ldr	r3, [sp, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d014      	beq.n	800e4e6 <osSemaphoreRelease+0x4e>
 800e4bc:	4b0b      	ldr	r3, [pc, #44]	; (800e4ec <osSemaphoreRelease+0x54>)
 800e4be:	2280      	movs	r2, #128	; 0x80
 800e4c0:	0552      	lsls	r2, r2, #21
 800e4c2:	601a      	str	r2, [r3, #0]
  osStatus result = osOK;
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	e008      	b.n	800e4da <osSemaphoreRelease+0x42>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	2100      	movs	r1, #0
 800e4ce:	0020      	movs	r0, r4
 800e4d0:	f000 fac5 	bl	800ea5e <xQueueGenericSend>
 800e4d4:	2801      	cmp	r0, #1
 800e4d6:	d002      	beq.n	800e4de <osSemaphoreRelease+0x46>
      result = osErrorOS;
 800e4d8:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e4da:	b002      	add	sp, #8
 800e4dc:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 800e4de:	2000      	movs	r0, #0
 800e4e0:	e7fb      	b.n	800e4da <osSemaphoreRelease+0x42>
      return osErrorOS;
 800e4e2:	20ff      	movs	r0, #255	; 0xff
 800e4e4:	e7f9      	b.n	800e4da <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	e7f7      	b.n	800e4da <osSemaphoreRelease+0x42>
 800e4ea:	46c0      	nop			; (mov r8, r8)
 800e4ec:	e000ed04 	.word	0xe000ed04

0800e4f0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e4f0:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e4f2:	f001 fa3b 	bl	800f96c <xTaskGetSchedulerState>
 800e4f6:	2801      	cmp	r0, #1
 800e4f8:	d100      	bne.n	800e4fc <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e4fa:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800e4fc:	f001 fece 	bl	801029c <xPortSysTickHandler>
}
 800e500:	e7fb      	b.n	800e4fa <osSystickHandler+0xa>

0800e502 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 800e502:	0003      	movs	r3, r0
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e504:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800e506:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e508:	e005      	b.n	800e516 <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800e50a:	2901      	cmp	r1, #1
 800e50c:	d002      	beq.n	800e514 <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 800e50e:	3001      	adds	r0, #1
 800e510:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800e512:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800e514:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800e516:	2200      	movs	r2, #0
 800e518:	569a      	ldrsb	r2, [r3, r2]
 800e51a:	2a00      	cmp	r2, #0
 800e51c:	d003      	beq.n	800e526 <prvGetNumberOfParameters+0x24>
		if( ( *pcCommandString ) == ' ' )
 800e51e:	2a20      	cmp	r2, #32
 800e520:	d0f3      	beq.n	800e50a <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800e522:	2100      	movs	r1, #0
 800e524:	e7f6      	b.n	800e514 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e526:	2901      	cmp	r1, #1
 800e528:	d000      	beq.n	800e52c <prvGetNumberOfParameters+0x2a>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800e52a:	4770      	bx	lr
		cParameters--;
 800e52c:	3801      	subs	r0, #1
 800e52e:	b240      	sxtb	r0, r0
 800e530:	e7fb      	b.n	800e52a <prvGetNumberOfParameters+0x28>
	...

0800e534 <FreeRTOS_CLIRegisterCommand>:
{
 800e534:	b570      	push	{r4, r5, r6, lr}
 800e536:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
 800e538:	d011      	beq.n	800e55e <FreeRTOS_CLIRegisterCommand+0x2a>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e53a:	2008      	movs	r0, #8
 800e53c:	f001 ff1c 	bl	8010378 <pvPortMalloc>
 800e540:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800e542:	d00e      	beq.n	800e562 <FreeRTOS_CLIRegisterCommand+0x2e>
		taskENTER_CRITICAL();
 800e544:	f001 fe64 	bl	8010210 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e548:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800e54a:	2300      	movs	r3, #0
 800e54c:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800e54e:	4b06      	ldr	r3, [pc, #24]	; (800e568 <FreeRTOS_CLIRegisterCommand+0x34>)
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800e554:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800e556:	f001 fe67 	bl	8010228 <vPortExitCritical>
}
 800e55a:	2001      	movs	r0, #1
 800e55c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800e55e:	b672      	cpsid	i
 800e560:	e7fe      	b.n	800e560 <FreeRTOS_CLIRegisterCommand+0x2c>
	configASSERT( pxNewListItem );
 800e562:	b672      	cpsid	i
 800e564:	e7fe      	b.n	800e564 <FreeRTOS_CLIRegisterCommand+0x30>
 800e566:	46c0      	nop			; (mov r8, r8)
 800e568:	200000cc 	.word	0x200000cc

0800e56c <FreeRTOS_CLIProcessCommand>:
{
 800e56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56e:	46ce      	mov	lr, r9
 800e570:	4647      	mov	r7, r8
 800e572:	b580      	push	{r7, lr}
 800e574:	0006      	movs	r6, r0
 800e576:	4688      	mov	r8, r1
 800e578:	4691      	mov	r9, r2
	if( pxCommand == NULL )
 800e57a:	4b2c      	ldr	r3, [pc, #176]	; (800e62c <FreeRTOS_CLIProcessCommand+0xc0>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d018      	beq.n	800e5b4 <FreeRTOS_CLIProcessCommand+0x48>
portBASE_TYPE xReturn = pdTRUE;
 800e582:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e584:	4b29      	ldr	r3, [pc, #164]	; (800e62c <FreeRTOS_CLIProcessCommand+0xc0>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <FreeRTOS_CLIProcessCommand+0x24>
 800e58c:	2c00      	cmp	r4, #0
 800e58e:	d03d      	beq.n	800e60c <FreeRTOS_CLIProcessCommand+0xa0>
	else if( pxCommand != NULL )
 800e590:	2b00      	cmp	r3, #0
 800e592:	d044      	beq.n	800e61e <FreeRTOS_CLIProcessCommand+0xb2>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	689b      	ldr	r3, [r3, #8]
 800e598:	0032      	movs	r2, r6
 800e59a:	4649      	mov	r1, r9
 800e59c:	4640      	mov	r0, r8
 800e59e:	4798      	blx	r3
 800e5a0:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 800e5a2:	d102      	bne.n	800e5aa <FreeRTOS_CLIProcessCommand+0x3e>
			pxCommand = NULL;
 800e5a4:	4b21      	ldr	r3, [pc, #132]	; (800e62c <FreeRTOS_CLIProcessCommand+0xc0>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	601a      	str	r2, [r3, #0]
}
 800e5aa:	0020      	movs	r0, r4
 800e5ac:	bcc0      	pop	{r6, r7}
 800e5ae:	46b9      	mov	r9, r7
 800e5b0:	46b0      	mov	r8, r6
 800e5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e5b4:	4b1d      	ldr	r3, [pc, #116]	; (800e62c <FreeRTOS_CLIProcessCommand+0xc0>)
 800e5b6:	4a1e      	ldr	r2, [pc, #120]	; (800e630 <FreeRTOS_CLIProcessCommand+0xc4>)
 800e5b8:	601a      	str	r2, [r3, #0]
 800e5ba:	e008      	b.n	800e5ce <FreeRTOS_CLIProcessCommand+0x62>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e5bc:	0021      	movs	r1, r4
 800e5be:	0030      	movs	r0, r6
 800e5c0:	f006 f869 	bl	8014696 <strncmp>
 800e5c4:	1e04      	subs	r4, r0, #0
 800e5c6:	d012      	beq.n	800e5ee <FreeRTOS_CLIProcessCommand+0x82>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e5c8:	686a      	ldr	r2, [r5, #4]
 800e5ca:	4b18      	ldr	r3, [pc, #96]	; (800e62c <FreeRTOS_CLIProcessCommand+0xc0>)
 800e5cc:	601a      	str	r2, [r3, #0]
 800e5ce:	4b17      	ldr	r3, [pc, #92]	; (800e62c <FreeRTOS_CLIProcessCommand+0xc0>)
 800e5d0:	681d      	ldr	r5, [r3, #0]
 800e5d2:	2d00      	cmp	r5, #0
 800e5d4:	d018      	beq.n	800e608 <FreeRTOS_CLIProcessCommand+0x9c>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e5d6:	682f      	ldr	r7, [r5, #0]
 800e5d8:	683c      	ldr	r4, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e5da:	0020      	movs	r0, r4
 800e5dc:	f7f1 fd9c 	bl	8000118 <strlen>
 800e5e0:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e5e2:	5633      	ldrsb	r3, [r6, r0]
 800e5e4:	2b20      	cmp	r3, #32
 800e5e6:	d0e9      	beq.n	800e5bc <FreeRTOS_CLIProcessCommand+0x50>
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1ed      	bne.n	800e5c8 <FreeRTOS_CLIProcessCommand+0x5c>
 800e5ec:	e7e6      	b.n	800e5bc <FreeRTOS_CLIProcessCommand+0x50>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e5ee:	250c      	movs	r5, #12
 800e5f0:	577d      	ldrsb	r5, [r7, r5]
 800e5f2:	2d00      	cmp	r5, #0
 800e5f4:	da01      	bge.n	800e5fa <FreeRTOS_CLIProcessCommand+0x8e>
portBASE_TYPE xReturn = pdTRUE;
 800e5f6:	2401      	movs	r4, #1
 800e5f8:	e7c4      	b.n	800e584 <FreeRTOS_CLIProcessCommand+0x18>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800e5fa:	0030      	movs	r0, r6
 800e5fc:	f7ff ff81 	bl	800e502 <prvGetNumberOfParameters>
 800e600:	4285      	cmp	r5, r0
 800e602:	d1bf      	bne.n	800e584 <FreeRTOS_CLIProcessCommand+0x18>
portBASE_TYPE xReturn = pdTRUE;
 800e604:	3401      	adds	r4, #1
 800e606:	e7bd      	b.n	800e584 <FreeRTOS_CLIProcessCommand+0x18>
 800e608:	2401      	movs	r4, #1
 800e60a:	e7bb      	b.n	800e584 <FreeRTOS_CLIProcessCommand+0x18>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e60c:	464a      	mov	r2, r9
 800e60e:	4909      	ldr	r1, [pc, #36]	; (800e634 <FreeRTOS_CLIProcessCommand+0xc8>)
 800e610:	4640      	mov	r0, r8
 800e612:	f006 f851 	bl	80146b8 <strncpy>
		pxCommand = NULL;
 800e616:	4b05      	ldr	r3, [pc, #20]	; (800e62c <FreeRTOS_CLIProcessCommand+0xc0>)
 800e618:	2200      	movs	r2, #0
 800e61a:	601a      	str	r2, [r3, #0]
 800e61c:	e7c5      	b.n	800e5aa <FreeRTOS_CLIProcessCommand+0x3e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e61e:	464a      	mov	r2, r9
 800e620:	4905      	ldr	r1, [pc, #20]	; (800e638 <FreeRTOS_CLIProcessCommand+0xcc>)
 800e622:	4640      	mov	r0, r8
 800e624:	f006 f848 	bl	80146b8 <strncpy>
		xReturn = pdFALSE;
 800e628:	2400      	movs	r4, #0
	return xReturn;
 800e62a:	e7be      	b.n	800e5aa <FreeRTOS_CLIProcessCommand+0x3e>
 800e62c:	200014f0 	.word	0x200014f0
 800e630:	200000d0 	.word	0x200000d0
 800e634:	0801b528 	.word	0x0801b528
 800e638:	0801b580 	.word	0x0801b580

0800e63c <FreeRTOS_CLIGetOutputBuffer>:
}
 800e63c:	4800      	ldr	r0, [pc, #0]	; (800e640 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e63e:	4770      	bx	lr
 800e640:	20001288 	.word	0x20001288

0800e644 <FreeRTOS_CLIGetParameter>:
{
 800e644:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800e646:	2300      	movs	r3, #0
 800e648:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e64a:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e64c:	e011      	b.n	800e672 <FreeRTOS_CLIGetParameter+0x2e>
			pcCommandString++;
 800e64e:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e650:	2300      	movs	r3, #0
 800e652:	56c3      	ldrsb	r3, [r0, r3]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d003      	beq.n	800e660 <FreeRTOS_CLIGetParameter+0x1c>
 800e658:	2b20      	cmp	r3, #32
 800e65a:	d1f8      	bne.n	800e64e <FreeRTOS_CLIGetParameter+0xa>
 800e65c:	e000      	b.n	800e660 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800e65e:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e660:	2300      	movs	r3, #0
 800e662:	56c3      	ldrsb	r3, [r0, r3]
 800e664:	2b20      	cmp	r3, #32
 800e666:	d0fa      	beq.n	800e65e <FreeRTOS_CLIGetParameter+0x1a>
		if( *pcCommandString != 0x00 )
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d017      	beq.n	800e69c <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
 800e66c:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e66e:	42a1      	cmp	r1, r4
 800e670:	d012      	beq.n	800e698 <FreeRTOS_CLIGetParameter+0x54>
	while( uxParametersFound < uxWantedParameter )
 800e672:	428c      	cmp	r4, r1
 800e674:	d3ec      	bcc.n	800e650 <FreeRTOS_CLIGetParameter+0xc>
const int8_t *pcReturn = NULL;
 800e676:	2000      	movs	r0, #0
}
 800e678:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800e67a:	6813      	ldr	r3, [r2, #0]
 800e67c:	3301      	adds	r3, #1
 800e67e:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e680:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e682:	2300      	movs	r3, #0
 800e684:	56cb      	ldrsb	r3, [r1, r3]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d001      	beq.n	800e68e <FreeRTOS_CLIGetParameter+0x4a>
 800e68a:	2b20      	cmp	r3, #32
 800e68c:	d1f5      	bne.n	800e67a <FreeRTOS_CLIGetParameter+0x36>
				if( *pxParameterStringLength == 0 )
 800e68e:	6813      	ldr	r3, [r2, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1f1      	bne.n	800e678 <FreeRTOS_CLIGetParameter+0x34>
					pcReturn = NULL;
 800e694:	2000      	movs	r0, #0
	return pcReturn;
 800e696:	e7ef      	b.n	800e678 <FreeRTOS_CLIGetParameter+0x34>
 800e698:	0001      	movs	r1, r0
 800e69a:	e7f2      	b.n	800e682 <FreeRTOS_CLIGetParameter+0x3e>
const int8_t *pcReturn = NULL;
 800e69c:	2000      	movs	r0, #0
 800e69e:	e7eb      	b.n	800e678 <FreeRTOS_CLIGetParameter+0x34>

0800e6a0 <prvHelpCommand>:
{
 800e6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	0007      	movs	r7, r0
 800e6a6:	000e      	movs	r6, r1
 800e6a8:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e6ae:	aa01      	add	r2, sp, #4
 800e6b0:	2101      	movs	r1, #1
 800e6b2:	f7ff ffc7 	bl	800e644 <FreeRTOS_CLIGetParameter>
 800e6b6:	1e04      	subs	r4, r0, #0
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e6b8:	d021      	beq.n	800e6fe <prvHelpCommand+0x5e>
 800e6ba:	2206      	movs	r2, #6
 800e6bc:	4930      	ldr	r1, [pc, #192]	; (800e780 <prvHelpCommand+0xe0>)
 800e6be:	f005 ffea 	bl	8014696 <strncmp>
 800e6c2:	1e05      	subs	r5, r0, #0
 800e6c4:	d11b      	bne.n	800e6fe <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800e6c6:	4b2f      	ldr	r3, [pc, #188]	; (800e784 <prvHelpCommand+0xe4>)
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	2b07      	cmp	r3, #7
 800e6cc:	d00f      	beq.n	800e6ee <prvHelpCommand+0x4e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e6ce:	4a2d      	ldr	r2, [pc, #180]	; (800e784 <prvHelpCommand+0xe4>)
 800e6d0:	7813      	ldrb	r3, [r2, #0]
 800e6d2:	1c5c      	adds	r4, r3, #1
 800e6d4:	b2e4      	uxtb	r4, r4
 800e6d6:	7014      	strb	r4, [r2, #0]
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	4a2b      	ldr	r2, [pc, #172]	; (800e788 <prvHelpCommand+0xe8>)
 800e6dc:	5899      	ldr	r1, [r3, r2]
 800e6de:	0032      	movs	r2, r6
 800e6e0:	0038      	movs	r0, r7
 800e6e2:	f005 ffe9 	bl	80146b8 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800e6e6:	2c07      	cmp	r4, #7
 800e6e8:	d005      	beq.n	800e6f6 <prvHelpCommand+0x56>
			xReturn = pdTRUE;
 800e6ea:	2501      	movs	r5, #1
 800e6ec:	e009      	b.n	800e702 <prvHelpCommand+0x62>
			str = 0;
 800e6ee:	4b25      	ldr	r3, [pc, #148]	; (800e784 <prvHelpCommand+0xe4>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	701a      	strb	r2, [r3, #0]
 800e6f4:	e7eb      	b.n	800e6ce <prvHelpCommand+0x2e>
			xReturn = pdFALSE; str = 0;
 800e6f6:	4b23      	ldr	r3, [pc, #140]	; (800e784 <prvHelpCommand+0xe4>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	701a      	strb	r2, [r3, #0]
 800e6fc:	e001      	b.n	800e702 <prvHelpCommand+0x62>
	else if (pcParameterString1 == NULL)
 800e6fe:	2c00      	cmp	r4, #0
 800e700:	d002      	beq.n	800e708 <prvHelpCommand+0x68>
}
 800e702:	0028      	movs	r0, r5
 800e704:	b003      	add	sp, #12
 800e706:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800e708:	4b20      	ldr	r3, [pc, #128]	; (800e78c <prvHelpCommand+0xec>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d024      	beq.n	800e75a <prvHelpCommand+0xba>
		if (counter > numOfBosCommands) {
 800e710:	4b1f      	ldr	r3, [pc, #124]	; (800e790 <prvHelpCommand+0xf0>)
 800e712:	781c      	ldrb	r4, [r3, #0]
 800e714:	4b1f      	ldr	r3, [pc, #124]	; (800e794 <prvHelpCommand+0xf4>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	429c      	cmp	r4, r3
 800e71a:	d925      	bls.n	800e768 <prvHelpCommand+0xc8>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e71c:	4b1b      	ldr	r3, [pc, #108]	; (800e78c <prvHelpCommand+0xec>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	6859      	ldr	r1, [r3, #4]
 800e724:	0032      	movs	r2, r6
 800e726:	3a08      	subs	r2, #8
 800e728:	0038      	movs	r0, r7
 800e72a:	3008      	adds	r0, #8
 800e72c:	f005 ffc4 	bl	80146b8 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e730:	1c78      	adds	r0, r7, #1
 800e732:	4919      	ldr	r1, [pc, #100]	; (800e798 <prvHelpCommand+0xf8>)
 800e734:	f005 ffa7 	bl	8014686 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e738:	2328      	movs	r3, #40	; 0x28
 800e73a:	703b      	strb	r3, [r7, #0]
 800e73c:	3301      	adds	r3, #1
 800e73e:	71bb      	strb	r3, [r7, #6]
 800e740:	3b09      	subs	r3, #9
 800e742:	71fb      	strb	r3, [r7, #7]
		pxCommand = pxCommand->pxNext;
 800e744:	4a11      	ldr	r2, [pc, #68]	; (800e78c <prvHelpCommand+0xec>)
 800e746:	6813      	ldr	r3, [r2, #0]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	6013      	str	r3, [r2, #0]
		counter++;
 800e74c:	3401      	adds	r4, #1
 800e74e:	4a10      	ldr	r2, [pc, #64]	; (800e790 <prvHelpCommand+0xf0>)
 800e750:	7014      	strb	r4, [r2, #0]
		if( pxCommand == NULL )
 800e752:	2b00      	cmp	r3, #0
 800e754:	d011      	beq.n	800e77a <prvHelpCommand+0xda>
			xReturn = pdTRUE;
 800e756:	2501      	movs	r5, #1
	return xReturn;
 800e758:	e7d3      	b.n	800e702 <prvHelpCommand+0x62>
			pxCommand = &xRegisteredCommands;
 800e75a:	4b0c      	ldr	r3, [pc, #48]	; (800e78c <prvHelpCommand+0xec>)
 800e75c:	4a0f      	ldr	r2, [pc, #60]	; (800e79c <prvHelpCommand+0xfc>)
 800e75e:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e760:	4b0b      	ldr	r3, [pc, #44]	; (800e790 <prvHelpCommand+0xf0>)
 800e762:	2201      	movs	r2, #1
 800e764:	701a      	strb	r2, [r3, #0]
 800e766:	e7d3      	b.n	800e710 <prvHelpCommand+0x70>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e768:	4b08      	ldr	r3, [pc, #32]	; (800e78c <prvHelpCommand+0xec>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	6859      	ldr	r1, [r3, #4]
 800e770:	0032      	movs	r2, r6
 800e772:	0038      	movs	r0, r7
 800e774:	f005 ffa0 	bl	80146b8 <strncpy>
 800e778:	e7e4      	b.n	800e744 <prvHelpCommand+0xa4>
			xReturn = pdFALSE;
 800e77a:	2500      	movs	r5, #0
 800e77c:	e7c1      	b.n	800e702 <prvHelpCommand+0x62>
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	08019410 	.word	0x08019410
 800e784:	200014f8 	.word	0x200014f8
 800e788:	20000054 	.word	0x20000054
 800e78c:	200014f4 	.word	0x200014f4
 800e790:	200014ec 	.word	0x200014ec
 800e794:	200060bc 	.word	0x200060bc
 800e798:	08018944 	.word	0x08018944
 800e79c:	200000d0 	.word	0x200000d0

0800e7a0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e7a0:	0003      	movs	r3, r0
 800e7a2:	3308      	adds	r3, #8
 800e7a4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	4252      	negs	r2, r2
 800e7aa:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e7ac:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e7ae:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e7b4:	4770      	bx	lr

0800e7b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e7ba:	4770      	bx	lr

0800e7bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e7bc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e7be:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e7c0:	689a      	ldr	r2, [r3, #8]
 800e7c2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e7c4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e7c6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e7c8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e7ca:	6803      	ldr	r3, [r0, #0]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	6003      	str	r3, [r0, #0]
}
 800e7d0:	4770      	bx	lr

0800e7d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e7d2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e7d4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e7d6:	1c63      	adds	r3, r4, #1
 800e7d8:	d010      	beq.n	800e7fc <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e7da:	0003      	movs	r3, r0
 800e7dc:	3308      	adds	r3, #8
 800e7de:	001a      	movs	r2, r3
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	681d      	ldr	r5, [r3, #0]
 800e7e4:	42a5      	cmp	r5, r4
 800e7e6:	d9fa      	bls.n	800e7de <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e7e8:	6853      	ldr	r3, [r2, #4]
 800e7ea:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e7ec:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e7ee:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e7f0:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e7f2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e7f4:	6803      	ldr	r3, [r0, #0]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	6003      	str	r3, [r0, #0]
}
 800e7fa:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800e7fc:	6902      	ldr	r2, [r0, #16]
 800e7fe:	e7f3      	b.n	800e7e8 <vListInsert+0x16>

0800e800 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e800:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e802:	6841      	ldr	r1, [r0, #4]
 800e804:	6882      	ldr	r2, [r0, #8]
 800e806:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e808:	6841      	ldr	r1, [r0, #4]
 800e80a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e80c:	685a      	ldr	r2, [r3, #4]
 800e80e:	4282      	cmp	r2, r0
 800e810:	d005      	beq.n	800e81e <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e812:	2200      	movs	r2, #0
 800e814:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	1e50      	subs	r0, r2, #1
 800e81a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e81c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e81e:	6882      	ldr	r2, [r0, #8]
 800e820:	605a      	str	r2, [r3, #4]
 800e822:	e7f6      	b.n	800e812 <uxListRemove+0x12>

0800e824 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e824:	b510      	push	{r4, lr}
 800e826:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e828:	f001 fcf2 	bl	8010210 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e82c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e82e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e830:	429a      	cmp	r2, r3
 800e832:	d004      	beq.n	800e83e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800e834:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800e836:	f001 fcf7 	bl	8010228 <vPortExitCritical>

	return xReturn;
}
 800e83a:	0020      	movs	r0, r4
 800e83c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800e83e:	2401      	movs	r4, #1
 800e840:	e7f9      	b.n	800e836 <prvIsQueueFull+0x12>

0800e842 <prvIsQueueEmpty>:
{
 800e842:	b510      	push	{r4, lr}
 800e844:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e846:	f001 fce3 	bl	8010210 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e84a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d104      	bne.n	800e85a <prvIsQueueEmpty+0x18>
			xReturn = pdTRUE;
 800e850:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800e852:	f001 fce9 	bl	8010228 <vPortExitCritical>
}
 800e856:	0020      	movs	r0, r4
 800e858:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800e85a:	2400      	movs	r4, #0
 800e85c:	e7f9      	b.n	800e852 <prvIsQueueEmpty+0x10>

0800e85e <prvCopyDataToQueue>:
{
 800e85e:	b570      	push	{r4, r5, r6, lr}
 800e860:	0004      	movs	r4, r0
 800e862:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e864:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e866:	2a00      	cmp	r2, #0
 800e868:	d10d      	bne.n	800e886 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e86a:	6803      	ldr	r3, [r0, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d004      	beq.n	800e87a <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 800e870:	2000      	movs	r0, #0
	++( pxQueue->uxMessagesWaiting );
 800e872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e874:	3301      	adds	r3, #1
 800e876:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800e878:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e87a:	6840      	ldr	r0, [r0, #4]
 800e87c:	f001 f8c6 	bl	800fa0c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e880:	2300      	movs	r3, #0
 800e882:	6063      	str	r3, [r4, #4]
 800e884:	e7f5      	b.n	800e872 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e886:	2d00      	cmp	r5, #0
 800e888:	d10e      	bne.n	800e8a8 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e88a:	6880      	ldr	r0, [r0, #8]
 800e88c:	f004 ff26 	bl	80136dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e890:	68a3      	ldr	r3, [r4, #8]
 800e892:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e894:	4694      	mov	ip, r2
 800e896:	4463      	add	r3, ip
 800e898:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e89a:	6862      	ldr	r2, [r4, #4]
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d31e      	bcc.n	800e8de <prvCopyDataToQueue+0x80>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8a0:	6823      	ldr	r3, [r4, #0]
 800e8a2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e8a4:	0028      	movs	r0, r5
 800e8a6:	e7e4      	b.n	800e872 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8a8:	68c0      	ldr	r0, [r0, #12]
 800e8aa:	f004 ff17 	bl	80136dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e8ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8b0:	425a      	negs	r2, r3
 800e8b2:	68e1      	ldr	r1, [r4, #12]
 800e8b4:	1acb      	subs	r3, r1, r3
 800e8b6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8b8:	6821      	ldr	r1, [r4, #0]
 800e8ba:	428b      	cmp	r3, r1
 800e8bc:	d203      	bcs.n	800e8c6 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e8be:	6863      	ldr	r3, [r4, #4]
 800e8c0:	469c      	mov	ip, r3
 800e8c2:	4462      	add	r2, ip
 800e8c4:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e8c6:	2d02      	cmp	r5, #2
 800e8c8:	d001      	beq.n	800e8ce <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 800e8ca:	2000      	movs	r0, #0
 800e8cc:	e7d1      	b.n	800e872 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d006      	beq.n	800e8e2 <prvCopyDataToQueue+0x84>
				--( pxQueue->uxMessagesWaiting );
 800e8d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 800e8da:	2000      	movs	r0, #0
 800e8dc:	e7c9      	b.n	800e872 <prvCopyDataToQueue+0x14>
 800e8de:	0028      	movs	r0, r5
 800e8e0:	e7c7      	b.n	800e872 <prvCopyDataToQueue+0x14>
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	e7c5      	b.n	800e872 <prvCopyDataToQueue+0x14>

0800e8e6 <prvCopyDataFromQueue>:
{
 800e8e6:	b510      	push	{r4, lr}
 800e8e8:	0003      	movs	r3, r0
 800e8ea:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e8ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8ee:	2a00      	cmp	r2, #0
 800e8f0:	d00a      	beq.n	800e908 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e8f2:	68d9      	ldr	r1, [r3, #12]
 800e8f4:	1889      	adds	r1, r1, r2
 800e8f6:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e8f8:	685c      	ldr	r4, [r3, #4]
 800e8fa:	42a1      	cmp	r1, r4
 800e8fc:	d301      	bcc.n	800e902 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e8fe:	6819      	ldr	r1, [r3, #0]
 800e900:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e902:	68d9      	ldr	r1, [r3, #12]
 800e904:	f004 feea 	bl	80136dc <memcpy>
}
 800e908:	bd10      	pop	{r4, pc}

0800e90a <prvUnlockQueue>:
{
 800e90a:	b510      	push	{r4, lr}
 800e90c:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e90e:	f001 fc7f 	bl	8010210 <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e912:	e004      	b.n	800e91e <prvUnlockQueue+0x14>
						vTaskMissedYield();
 800e914:	f001 f824 	bl	800f960 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800e918:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e91a:	3b01      	subs	r3, #1
 800e91c:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e91e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e920:	2b00      	cmp	r3, #0
 800e922:	dd09      	ble.n	800e938 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e926:	2b00      	cmp	r3, #0
 800e928:	d006      	beq.n	800e938 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e92a:	0020      	movs	r0, r4
 800e92c:	3024      	adds	r0, #36	; 0x24
 800e92e:	f000 ff91 	bl	800f854 <xTaskRemoveFromEventList>
 800e932:	2800      	cmp	r0, #0
 800e934:	d0f0      	beq.n	800e918 <prvUnlockQueue+0xe>
 800e936:	e7ed      	b.n	800e914 <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 800e938:	2301      	movs	r3, #1
 800e93a:	425b      	negs	r3, r3
 800e93c:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 800e93e:	f001 fc73 	bl	8010228 <vPortExitCritical>
	taskENTER_CRITICAL();
 800e942:	f001 fc65 	bl	8010210 <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e946:	e004      	b.n	800e952 <prvUnlockQueue+0x48>
					vTaskMissedYield();
 800e948:	f001 f80a 	bl	800f960 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e94c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e94e:	3b01      	subs	r3, #1
 800e950:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e952:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e954:	2b00      	cmp	r3, #0
 800e956:	dd09      	ble.n	800e96c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e958:	6923      	ldr	r3, [r4, #16]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d006      	beq.n	800e96c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e95e:	0020      	movs	r0, r4
 800e960:	3010      	adds	r0, #16
 800e962:	f000 ff77 	bl	800f854 <xTaskRemoveFromEventList>
 800e966:	2800      	cmp	r0, #0
 800e968:	d0f0      	beq.n	800e94c <prvUnlockQueue+0x42>
 800e96a:	e7ed      	b.n	800e948 <prvUnlockQueue+0x3e>
		pxQueue->xRxLock = queueUNLOCKED;
 800e96c:	2301      	movs	r3, #1
 800e96e:	425b      	negs	r3, r3
 800e970:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800e972:	f001 fc59 	bl	8010228 <vPortExitCritical>
}
 800e976:	bd10      	pop	{r4, pc}

0800e978 <xQueueGenericReset>:
{
 800e978:	b570      	push	{r4, r5, r6, lr}
 800e97a:	0004      	movs	r4, r0
 800e97c:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800e97e:	2800      	cmp	r0, #0
 800e980:	d01c      	beq.n	800e9bc <xQueueGenericReset+0x44>
	taskENTER_CRITICAL();
 800e982:	f001 fc45 	bl	8010210 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e986:	6822      	ldr	r2, [r4, #0]
 800e988:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e98a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e98c:	0001      	movs	r1, r0
 800e98e:	4359      	muls	r1, r3
 800e990:	1851      	adds	r1, r2, r1
 800e992:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e994:	2100      	movs	r1, #0
 800e996:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e998:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e99a:	3b01      	subs	r3, #1
 800e99c:	4343      	muls	r3, r0
 800e99e:	18d3      	adds	r3, r2, r3
 800e9a0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	425b      	negs	r3, r3
 800e9a6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e9a8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e9aa:	2d00      	cmp	r5, #0
 800e9ac:	d111      	bne.n	800e9d2 <xQueueGenericReset+0x5a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9ae:	6923      	ldr	r3, [r4, #16]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d105      	bne.n	800e9c0 <xQueueGenericReset+0x48>
	taskEXIT_CRITICAL();
 800e9b4:	f001 fc38 	bl	8010228 <vPortExitCritical>
}
 800e9b8:	2001      	movs	r0, #1
 800e9ba:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800e9bc:	b672      	cpsid	i
 800e9be:	e7fe      	b.n	800e9be <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e9c0:	0020      	movs	r0, r4
 800e9c2:	3010      	adds	r0, #16
 800e9c4:	f000 ff46 	bl	800f854 <xTaskRemoveFromEventList>
 800e9c8:	2801      	cmp	r0, #1
 800e9ca:	d1f3      	bne.n	800e9b4 <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800e9cc:	f001 fc14 	bl	80101f8 <vPortYield>
 800e9d0:	e7f0      	b.n	800e9b4 <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e9d2:	0020      	movs	r0, r4
 800e9d4:	3010      	adds	r0, #16
 800e9d6:	f7ff fee3 	bl	800e7a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e9da:	0020      	movs	r0, r4
 800e9dc:	3024      	adds	r0, #36	; 0x24
 800e9de:	f7ff fedf 	bl	800e7a0 <vListInitialise>
 800e9e2:	e7e7      	b.n	800e9b4 <xQueueGenericReset+0x3c>

0800e9e4 <xQueueGenericCreate>:
{
 800e9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e6:	0006      	movs	r6, r0
 800e9e8:	000d      	movs	r5, r1
 800e9ea:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d101      	bne.n	800e9f4 <xQueueGenericCreate+0x10>
 800e9f0:	b672      	cpsid	i
 800e9f2:	e7fe      	b.n	800e9f2 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e9f4:	2900      	cmp	r1, #0
 800e9f6:	d014      	beq.n	800ea22 <xQueueGenericCreate+0x3e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9f8:	0008      	movs	r0, r1
 800e9fa:	4370      	muls	r0, r6
 800e9fc:	3001      	adds	r0, #1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e9fe:	3054      	adds	r0, #84	; 0x54
 800ea00:	f001 fcba 	bl	8010378 <pvPortMalloc>
 800ea04:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800ea06:	d00e      	beq.n	800ea26 <xQueueGenericCreate+0x42>
		if( uxItemSize == ( UBaseType_t ) 0 )
 800ea08:	2d00      	cmp	r5, #0
 800ea0a:	d10e      	bne.n	800ea2a <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea0c:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800ea0e:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800ea10:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea12:	2101      	movs	r1, #1
 800ea14:	0020      	movs	r0, r4
 800ea16:	f7ff ffaf 	bl	800e978 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800ea1a:	2350      	movs	r3, #80	; 0x50
 800ea1c:	54e7      	strb	r7, [r4, r3]
}
 800ea1e:	0020      	movs	r0, r4
 800ea20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xQueueSizeInBytes = ( size_t ) 0;
 800ea22:	0008      	movs	r0, r1
 800ea24:	e7eb      	b.n	800e9fe <xQueueGenericCreate+0x1a>
	configASSERT( xReturn );
 800ea26:	b672      	cpsid	i
 800ea28:	e7fe      	b.n	800ea28 <xQueueGenericCreate+0x44>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800ea2a:	0003      	movs	r3, r0
 800ea2c:	3354      	adds	r3, #84	; 0x54
 800ea2e:	6003      	str	r3, [r0, #0]
 800ea30:	e7ed      	b.n	800ea0e <xQueueGenericCreate+0x2a>

0800ea32 <xQueueCreateCountingSemaphore>:
	{
 800ea32:	b510      	push	{r4, lr}
 800ea34:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ea36:	2800      	cmp	r0, #0
 800ea38:	d101      	bne.n	800ea3e <xQueueCreateCountingSemaphore+0xc>
 800ea3a:	b672      	cpsid	i
 800ea3c:	e7fe      	b.n	800ea3c <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ea3e:	4288      	cmp	r0, r1
 800ea40:	d201      	bcs.n	800ea46 <xQueueCreateCountingSemaphore+0x14>
 800ea42:	b672      	cpsid	i
 800ea44:	e7fe      	b.n	800ea44 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ea46:	2202      	movs	r2, #2
 800ea48:	2100      	movs	r1, #0
 800ea4a:	f7ff ffcb 	bl	800e9e4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d000      	beq.n	800ea54 <xQueueCreateCountingSemaphore+0x22>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ea52:	6384      	str	r4, [r0, #56]	; 0x38
		configASSERT( xHandle );
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d000      	beq.n	800ea5a <xQueueCreateCountingSemaphore+0x28>
	}
 800ea58:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800ea5a:	b672      	cpsid	i
 800ea5c:	e7fe      	b.n	800ea5c <xQueueCreateCountingSemaphore+0x2a>

0800ea5e <xQueueGenericSend>:
{
 800ea5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea60:	b085      	sub	sp, #20
 800ea62:	0004      	movs	r4, r0
 800ea64:	000f      	movs	r7, r1
 800ea66:	9201      	str	r2, [sp, #4]
 800ea68:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d008      	beq.n	800ea80 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea6e:	2900      	cmp	r1, #0
 800ea70:	d008      	beq.n	800ea84 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea72:	2e02      	cmp	r6, #2
 800ea74:	d10b      	bne.n	800ea8e <xQueueGenericSend+0x30>
 800ea76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d008      	beq.n	800ea8e <xQueueGenericSend+0x30>
 800ea7c:	b672      	cpsid	i
 800ea7e:	e7fe      	b.n	800ea7e <xQueueGenericSend+0x20>
	configASSERT( pxQueue );
 800ea80:	b672      	cpsid	i
 800ea82:	e7fe      	b.n	800ea82 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea84:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d0f3      	beq.n	800ea72 <xQueueGenericSend+0x14>
 800ea8a:	b672      	cpsid	i
 800ea8c:	e7fe      	b.n	800ea8c <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea8e:	f000 ff6d 	bl	800f96c <xTaskGetSchedulerState>
 800ea92:	1e05      	subs	r5, r0, #0
 800ea94:	d104      	bne.n	800eaa0 <xQueueGenericSend+0x42>
 800ea96:	9b01      	ldr	r3, [sp, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d032      	beq.n	800eb02 <xQueueGenericSend+0xa4>
 800ea9c:	b672      	cpsid	i
 800ea9e:	e7fe      	b.n	800ea9e <xQueueGenericSend+0x40>
 800eaa0:	2500      	movs	r5, #0
 800eaa2:	e02e      	b.n	800eb02 <xQueueGenericSend+0xa4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eaa4:	0032      	movs	r2, r6
 800eaa6:	0039      	movs	r1, r7
 800eaa8:	0020      	movs	r0, r4
 800eaaa:	f7ff fed8 	bl	800e85e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eaae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d106      	bne.n	800eac2 <xQueueGenericSend+0x64>
					else if( xYieldRequired != pdFALSE )
 800eab4:	2800      	cmp	r0, #0
 800eab6:	d10d      	bne.n	800ead4 <xQueueGenericSend+0x76>
				taskEXIT_CRITICAL();
 800eab8:	f001 fbb6 	bl	8010228 <vPortExitCritical>
				return pdPASS;
 800eabc:	2001      	movs	r0, #1
}
 800eabe:	b005      	add	sp, #20
 800eac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800eac2:	0020      	movs	r0, r4
 800eac4:	3024      	adds	r0, #36	; 0x24
 800eac6:	f000 fec5 	bl	800f854 <xTaskRemoveFromEventList>
 800eaca:	2801      	cmp	r0, #1
 800eacc:	d1f4      	bne.n	800eab8 <xQueueGenericSend+0x5a>
							queueYIELD_IF_USING_PREEMPTION();
 800eace:	f001 fb93 	bl	80101f8 <vPortYield>
 800ead2:	e7f1      	b.n	800eab8 <xQueueGenericSend+0x5a>
						queueYIELD_IF_USING_PREEMPTION();
 800ead4:	f001 fb90 	bl	80101f8 <vPortYield>
 800ead8:	e7ee      	b.n	800eab8 <xQueueGenericSend+0x5a>
					taskEXIT_CRITICAL();
 800eada:	f001 fba5 	bl	8010228 <vPortExitCritical>
					return errQUEUE_FULL;
 800eade:	2000      	movs	r0, #0
 800eae0:	e7ed      	b.n	800eabe <xQueueGenericSend+0x60>
					vTaskSetTimeOutState( &xTimeOut );
 800eae2:	a802      	add	r0, sp, #8
 800eae4:	f000 fef8 	bl	800f8d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eae8:	3501      	adds	r5, #1
 800eaea:	e017      	b.n	800eb1c <xQueueGenericSend+0xbe>
		prvLockQueue( pxQueue );
 800eaec:	2300      	movs	r3, #0
 800eaee:	6463      	str	r3, [r4, #68]	; 0x44
 800eaf0:	e01d      	b.n	800eb2e <xQueueGenericSend+0xd0>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	64a3      	str	r3, [r4, #72]	; 0x48
 800eaf6:	e01d      	b.n	800eb34 <xQueueGenericSend+0xd6>
				prvUnlockQueue( pxQueue );
 800eaf8:	0020      	movs	r0, r4
 800eafa:	f7ff ff06 	bl	800e90a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eafe:	f000 fcd3 	bl	800f4a8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800eb02:	f001 fb85 	bl	8010210 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d3ca      	bcc.n	800eaa4 <xQueueGenericSend+0x46>
 800eb0e:	2e02      	cmp	r6, #2
 800eb10:	d0c8      	beq.n	800eaa4 <xQueueGenericSend+0x46>
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb12:	9b01      	ldr	r3, [sp, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d0e0      	beq.n	800eada <xQueueGenericSend+0x7c>
				else if( xEntryTimeSet == pdFALSE )
 800eb18:	2d00      	cmp	r5, #0
 800eb1a:	d0e2      	beq.n	800eae2 <xQueueGenericSend+0x84>
		taskEXIT_CRITICAL();
 800eb1c:	f001 fb84 	bl	8010228 <vPortExitCritical>
		vTaskSuspendAll();
 800eb20:	f000 fc24 	bl	800f36c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb24:	f001 fb74 	bl	8010210 <vPortEnterCritical>
 800eb28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	d0de      	beq.n	800eaec <xQueueGenericSend+0x8e>
 800eb2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eb30:	3301      	adds	r3, #1
 800eb32:	d0de      	beq.n	800eaf2 <xQueueGenericSend+0x94>
 800eb34:	f001 fb78 	bl	8010228 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb38:	a901      	add	r1, sp, #4
 800eb3a:	a802      	add	r0, sp, #8
 800eb3c:	f000 fedc 	bl	800f8f8 <xTaskCheckForTimeOut>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	d113      	bne.n	800eb6c <xQueueGenericSend+0x10e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eb44:	0020      	movs	r0, r4
 800eb46:	f7ff fe6d 	bl	800e824 <prvIsQueueFull>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	d0d4      	beq.n	800eaf8 <xQueueGenericSend+0x9a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eb4e:	0020      	movs	r0, r4
 800eb50:	3010      	adds	r0, #16
 800eb52:	9901      	ldr	r1, [sp, #4]
 800eb54:	f000 fe40 	bl	800f7d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eb58:	0020      	movs	r0, r4
 800eb5a:	f7ff fed6 	bl	800e90a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eb5e:	f000 fca3 	bl	800f4a8 <xTaskResumeAll>
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d1cd      	bne.n	800eb02 <xQueueGenericSend+0xa4>
					portYIELD_WITHIN_API();
 800eb66:	f001 fb47 	bl	80101f8 <vPortYield>
 800eb6a:	e7ca      	b.n	800eb02 <xQueueGenericSend+0xa4>
			prvUnlockQueue( pxQueue );
 800eb6c:	0020      	movs	r0, r4
 800eb6e:	f7ff fecc 	bl	800e90a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb72:	f000 fc99 	bl	800f4a8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800eb76:	2000      	movs	r0, #0
 800eb78:	e7a1      	b.n	800eabe <xQueueGenericSend+0x60>

0800eb7a <xQueueGenericSendFromISR>:
{
 800eb7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb7c:	46c6      	mov	lr, r8
 800eb7e:	b500      	push	{lr}
 800eb80:	0004      	movs	r4, r0
 800eb82:	000f      	movs	r7, r1
 800eb84:	0016      	movs	r6, r2
 800eb86:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d008      	beq.n	800eb9e <xQueueGenericSendFromISR+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb8c:	2900      	cmp	r1, #0
 800eb8e:	d008      	beq.n	800eba2 <xQueueGenericSendFromISR+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb90:	2d02      	cmp	r5, #2
 800eb92:	d10b      	bne.n	800ebac <xQueueGenericSendFromISR+0x32>
 800eb94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d008      	beq.n	800ebac <xQueueGenericSendFromISR+0x32>
 800eb9a:	b672      	cpsid	i
 800eb9c:	e7fe      	b.n	800eb9c <xQueueGenericSendFromISR+0x22>
	configASSERT( pxQueue );
 800eb9e:	b672      	cpsid	i
 800eba0:	e7fe      	b.n	800eba0 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eba2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d0f3      	beq.n	800eb90 <xQueueGenericSendFromISR+0x16>
 800eba8:	b672      	cpsid	i
 800ebaa:	e7fe      	b.n	800ebaa <xQueueGenericSendFromISR+0x30>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ebac:	f001 fb4c 	bl	8010248 <ulSetInterruptMaskFromISR>
 800ebb0:	4680      	mov	r8, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ebb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ebb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d309      	bcc.n	800ebce <xQueueGenericSendFromISR+0x54>
 800ebba:	2d02      	cmp	r5, #2
 800ebbc:	d007      	beq.n	800ebce <xQueueGenericSendFromISR+0x54>
			xReturn = errQUEUE_FULL;
 800ebbe:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ebc0:	4640      	mov	r0, r8
 800ebc2:	f001 fb46 	bl	8010252 <vClearInterruptMaskFromISR>
}
 800ebc6:	0020      	movs	r0, r4
 800ebc8:	bc80      	pop	{r7}
 800ebca:	46b8      	mov	r8, r7
 800ebcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ebce:	002a      	movs	r2, r5
 800ebd0:	0039      	movs	r1, r7
 800ebd2:	0020      	movs	r0, r4
 800ebd4:	f7ff fe43 	bl	800e85e <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ebd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ebda:	3301      	adds	r3, #1
 800ebdc:	d004      	beq.n	800ebe8 <xQueueGenericSendFromISR+0x6e>
				++( pxQueue->xTxLock );
 800ebde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800ebe4:	2401      	movs	r4, #1
 800ebe6:	e7eb      	b.n	800ebc0 <xQueueGenericSendFromISR+0x46>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d101      	bne.n	800ebf2 <xQueueGenericSendFromISR+0x78>
			xReturn = pdPASS;
 800ebee:	2401      	movs	r4, #1
 800ebf0:	e7e6      	b.n	800ebc0 <xQueueGenericSendFromISR+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebf2:	0020      	movs	r0, r4
 800ebf4:	3024      	adds	r0, #36	; 0x24
 800ebf6:	f000 fe2d 	bl	800f854 <xTaskRemoveFromEventList>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d005      	beq.n	800ec0a <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 800ebfe:	2e00      	cmp	r6, #0
 800ec00:	d005      	beq.n	800ec0e <xQueueGenericSendFromISR+0x94>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec02:	2301      	movs	r3, #1
 800ec04:	6033      	str	r3, [r6, #0]
			xReturn = pdPASS;
 800ec06:	2401      	movs	r4, #1
 800ec08:	e7da      	b.n	800ebc0 <xQueueGenericSendFromISR+0x46>
 800ec0a:	2401      	movs	r4, #1
 800ec0c:	e7d8      	b.n	800ebc0 <xQueueGenericSendFromISR+0x46>
 800ec0e:	2401      	movs	r4, #1
 800ec10:	e7d6      	b.n	800ebc0 <xQueueGenericSendFromISR+0x46>

0800ec12 <xQueueGiveFromISR>:
{
 800ec12:	b570      	push	{r4, r5, r6, lr}
 800ec14:	0004      	movs	r4, r0
 800ec16:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d004      	beq.n	800ec26 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d003      	beq.n	800ec2a <xQueueGiveFromISR+0x18>
 800ec22:	b672      	cpsid	i
 800ec24:	e7fe      	b.n	800ec24 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800ec26:	b672      	cpsid	i
 800ec28:	e7fe      	b.n	800ec28 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ec2a:	6803      	ldr	r3, [r0, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d011      	beq.n	800ec54 <xQueueGiveFromISR+0x42>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec30:	f001 fb0a 	bl	8010248 <ulSetInterruptMaskFromISR>
 800ec34:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ec36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec38:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d220      	bcs.n	800ec80 <xQueueGiveFromISR+0x6e>
			++( pxQueue->uxMessagesWaiting );
 800ec3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec40:	3301      	adds	r3, #1
 800ec42:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ec44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec46:	3301      	adds	r3, #1
 800ec48:	d009      	beq.n	800ec5e <xQueueGiveFromISR+0x4c>
				++( pxQueue->xTxLock );
 800ec4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800ec50:	2401      	movs	r4, #1
 800ec52:	e016      	b.n	800ec82 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ec54:	6843      	ldr	r3, [r0, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d0ea      	beq.n	800ec30 <xQueueGiveFromISR+0x1e>
 800ec5a:	b672      	cpsid	i
 800ec5c:	e7fe      	b.n	800ec5c <xQueueGiveFromISR+0x4a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d101      	bne.n	800ec68 <xQueueGiveFromISR+0x56>
			xReturn = pdPASS;
 800ec64:	2401      	movs	r4, #1
 800ec66:	e00c      	b.n	800ec82 <xQueueGiveFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec68:	0020      	movs	r0, r4
 800ec6a:	3024      	adds	r0, #36	; 0x24
 800ec6c:	f000 fdf2 	bl	800f854 <xTaskRemoveFromEventList>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d00b      	beq.n	800ec8c <xQueueGiveFromISR+0x7a>
							if( pxHigherPriorityTaskWoken != NULL )
 800ec74:	2e00      	cmp	r6, #0
 800ec76:	d00b      	beq.n	800ec90 <xQueueGiveFromISR+0x7e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	6033      	str	r3, [r6, #0]
			xReturn = pdPASS;
 800ec7c:	2401      	movs	r4, #1
 800ec7e:	e000      	b.n	800ec82 <xQueueGiveFromISR+0x70>
			xReturn = errQUEUE_FULL;
 800ec80:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ec82:	0028      	movs	r0, r5
 800ec84:	f001 fae5 	bl	8010252 <vClearInterruptMaskFromISR>
}
 800ec88:	0020      	movs	r0, r4
 800ec8a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800ec8c:	2401      	movs	r4, #1
 800ec8e:	e7f8      	b.n	800ec82 <xQueueGiveFromISR+0x70>
 800ec90:	2401      	movs	r4, #1
 800ec92:	e7f6      	b.n	800ec82 <xQueueGiveFromISR+0x70>

0800ec94 <xQueueGenericReceive>:
{
 800ec94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec96:	b085      	sub	sp, #20
 800ec98:	0004      	movs	r4, r0
 800ec9a:	000e      	movs	r6, r1
 800ec9c:	9201      	str	r2, [sp, #4]
 800ec9e:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800eca0:	2800      	cmp	r0, #0
 800eca2:	d00a      	beq.n	800ecba <xQueueGenericReceive+0x26>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eca4:	2900      	cmp	r1, #0
 800eca6:	d00a      	beq.n	800ecbe <xQueueGenericReceive+0x2a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eca8:	f000 fe60 	bl	800f96c <xTaskGetSchedulerState>
 800ecac:	1e05      	subs	r5, r0, #0
 800ecae:	d10b      	bne.n	800ecc8 <xQueueGenericReceive+0x34>
 800ecb0:	9b01      	ldr	r3, [sp, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d055      	beq.n	800ed62 <xQueueGenericReceive+0xce>
 800ecb6:	b672      	cpsid	i
 800ecb8:	e7fe      	b.n	800ecb8 <xQueueGenericReceive+0x24>
	configASSERT( pxQueue );
 800ecba:	b672      	cpsid	i
 800ecbc:	e7fe      	b.n	800ecbc <xQueueGenericReceive+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecbe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d0f1      	beq.n	800eca8 <xQueueGenericReceive+0x14>
 800ecc4:	b672      	cpsid	i
 800ecc6:	e7fe      	b.n	800ecc6 <xQueueGenericReceive+0x32>
 800ecc8:	2500      	movs	r5, #0
 800ecca:	e04a      	b.n	800ed62 <xQueueGenericReceive+0xce>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800eccc:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ecce:	0031      	movs	r1, r6
 800ecd0:	0020      	movs	r0, r4
 800ecd2:	f7ff fe08 	bl	800e8e6 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800ecd6:	2f00      	cmp	r7, #0
 800ecd8:	d11a      	bne.n	800ed10 <xQueueGenericReceive+0x7c>
					--( pxQueue->uxMessagesWaiting );
 800ecda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d007      	beq.n	800ecf6 <xQueueGenericReceive+0x62>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ece6:	6923      	ldr	r3, [r4, #16]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d108      	bne.n	800ecfe <xQueueGenericReceive+0x6a>
				taskEXIT_CRITICAL();
 800ecec:	f001 fa9c 	bl	8010228 <vPortExitCritical>
				return pdPASS;
 800ecf0:	2001      	movs	r0, #1
}
 800ecf2:	b005      	add	sp, #20
 800ecf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ecf6:	f000 ff79 	bl	800fbec <pvTaskIncrementMutexHeldCount>
 800ecfa:	6060      	str	r0, [r4, #4]
 800ecfc:	e7f3      	b.n	800ece6 <xQueueGenericReceive+0x52>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ecfe:	0020      	movs	r0, r4
 800ed00:	3010      	adds	r0, #16
 800ed02:	f000 fda7 	bl	800f854 <xTaskRemoveFromEventList>
 800ed06:	2801      	cmp	r0, #1
 800ed08:	d1f0      	bne.n	800ecec <xQueueGenericReceive+0x58>
							queueYIELD_IF_USING_PREEMPTION();
 800ed0a:	f001 fa75 	bl	80101f8 <vPortYield>
 800ed0e:	e7ed      	b.n	800ecec <xQueueGenericReceive+0x58>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800ed10:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d0e9      	beq.n	800ecec <xQueueGenericReceive+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed18:	0020      	movs	r0, r4
 800ed1a:	3024      	adds	r0, #36	; 0x24
 800ed1c:	f000 fd9a 	bl	800f854 <xTaskRemoveFromEventList>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d0e3      	beq.n	800ecec <xQueueGenericReceive+0x58>
							queueYIELD_IF_USING_PREEMPTION();
 800ed24:	f001 fa68 	bl	80101f8 <vPortYield>
 800ed28:	e7e0      	b.n	800ecec <xQueueGenericReceive+0x58>
					taskEXIT_CRITICAL();
 800ed2a:	f001 fa7d 	bl	8010228 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ed2e:	2000      	movs	r0, #0
 800ed30:	e7df      	b.n	800ecf2 <xQueueGenericReceive+0x5e>
					vTaskSetTimeOutState( &xTimeOut );
 800ed32:	a802      	add	r0, sp, #8
 800ed34:	f000 fdd0 	bl	800f8d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed38:	3501      	adds	r5, #1
 800ed3a:	e01c      	b.n	800ed76 <xQueueGenericReceive+0xe2>
		prvLockQueue( pxQueue );
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	6463      	str	r3, [r4, #68]	; 0x44
 800ed40:	e022      	b.n	800ed88 <xQueueGenericReceive+0xf4>
 800ed42:	2300      	movs	r3, #0
 800ed44:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed46:	e022      	b.n	800ed8e <xQueueGenericReceive+0xfa>
						taskENTER_CRITICAL();
 800ed48:	f001 fa62 	bl	8010210 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ed4c:	6860      	ldr	r0, [r4, #4]
 800ed4e:	f000 fe1f 	bl	800f990 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800ed52:	f001 fa69 	bl	8010228 <vPortExitCritical>
 800ed56:	e02a      	b.n	800edae <xQueueGenericReceive+0x11a>
				prvUnlockQueue( pxQueue );
 800ed58:	0020      	movs	r0, r4
 800ed5a:	f7ff fdd6 	bl	800e90a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed5e:	f000 fba3 	bl	800f4a8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800ed62:	f001 fa55 	bl	8010210 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1af      	bne.n	800eccc <xQueueGenericReceive+0x38>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed6c:	9b01      	ldr	r3, [sp, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d0db      	beq.n	800ed2a <xQueueGenericReceive+0x96>
				else if( xEntryTimeSet == pdFALSE )
 800ed72:	2d00      	cmp	r5, #0
 800ed74:	d0dd      	beq.n	800ed32 <xQueueGenericReceive+0x9e>
		taskEXIT_CRITICAL();
 800ed76:	f001 fa57 	bl	8010228 <vPortExitCritical>
		vTaskSuspendAll();
 800ed7a:	f000 faf7 	bl	800f36c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed7e:	f001 fa47 	bl	8010210 <vPortEnterCritical>
 800ed82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed84:	3301      	adds	r3, #1
 800ed86:	d0d9      	beq.n	800ed3c <xQueueGenericReceive+0xa8>
 800ed88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	d0d9      	beq.n	800ed42 <xQueueGenericReceive+0xae>
 800ed8e:	f001 fa4b 	bl	8010228 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed92:	a901      	add	r1, sp, #4
 800ed94:	a802      	add	r0, sp, #8
 800ed96:	f000 fdaf 	bl	800f8f8 <xTaskCheckForTimeOut>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d116      	bne.n	800edcc <xQueueGenericReceive+0x138>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed9e:	0020      	movs	r0, r4
 800eda0:	f7ff fd4f 	bl	800e842 <prvIsQueueEmpty>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d0d7      	beq.n	800ed58 <xQueueGenericReceive+0xc4>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d0cc      	beq.n	800ed48 <xQueueGenericReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800edae:	0020      	movs	r0, r4
 800edb0:	3024      	adds	r0, #36	; 0x24
 800edb2:	9901      	ldr	r1, [sp, #4]
 800edb4:	f000 fd10 	bl	800f7d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800edb8:	0020      	movs	r0, r4
 800edba:	f7ff fda6 	bl	800e90a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800edbe:	f000 fb73 	bl	800f4a8 <xTaskResumeAll>
 800edc2:	2800      	cmp	r0, #0
 800edc4:	d1cd      	bne.n	800ed62 <xQueueGenericReceive+0xce>
					portYIELD_WITHIN_API();
 800edc6:	f001 fa17 	bl	80101f8 <vPortYield>
 800edca:	e7ca      	b.n	800ed62 <xQueueGenericReceive+0xce>
			prvUnlockQueue( pxQueue );
 800edcc:	0020      	movs	r0, r4
 800edce:	f7ff fd9c 	bl	800e90a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800edd2:	f000 fb69 	bl	800f4a8 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800edd6:	2000      	movs	r0, #0
 800edd8:	e78b      	b.n	800ecf2 <xQueueGenericReceive+0x5e>

0800edda <xQueueReceiveFromISR>:
{
 800edda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eddc:	0004      	movs	r4, r0
 800edde:	000e      	movs	r6, r1
 800ede0:	0015      	movs	r5, r2
	configASSERT( pxQueue );
 800ede2:	2800      	cmp	r0, #0
 800ede4:	d00d      	beq.n	800ee02 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ede6:	2900      	cmp	r1, #0
 800ede8:	d00d      	beq.n	800ee06 <xQueueReceiveFromISR+0x2c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edea:	f001 fa2d 	bl	8010248 <ulSetInterruptMaskFromISR>
 800edee:	0007      	movs	r7, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800edf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d10c      	bne.n	800ee10 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 800edf6:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800edf8:	0038      	movs	r0, r7
 800edfa:	f001 fa2a 	bl	8010252 <vClearInterruptMaskFromISR>
}
 800edfe:	0020      	movs	r0, r4
 800ee00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800ee02:	b672      	cpsid	i
 800ee04:	e7fe      	b.n	800ee04 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d0ee      	beq.n	800edea <xQueueReceiveFromISR+0x10>
 800ee0c:	b672      	cpsid	i
 800ee0e:	e7fe      	b.n	800ee0e <xQueueReceiveFromISR+0x34>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee10:	0031      	movs	r1, r6
 800ee12:	0020      	movs	r0, r4
 800ee14:	f7ff fd67 	bl	800e8e6 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800ee18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800ee1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee20:	3301      	adds	r3, #1
 800ee22:	d004      	beq.n	800ee2e <xQueueReceiveFromISR+0x54>
				++( pxQueue->xRxLock );
 800ee24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee26:	3301      	adds	r3, #1
 800ee28:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800ee2a:	2401      	movs	r4, #1
 800ee2c:	e7e4      	b.n	800edf8 <xQueueReceiveFromISR+0x1e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee2e:	6923      	ldr	r3, [r4, #16]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d101      	bne.n	800ee38 <xQueueReceiveFromISR+0x5e>
			xReturn = pdPASS;
 800ee34:	2401      	movs	r4, #1
 800ee36:	e7df      	b.n	800edf8 <xQueueReceiveFromISR+0x1e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee38:	0020      	movs	r0, r4
 800ee3a:	3010      	adds	r0, #16
 800ee3c:	f000 fd0a 	bl	800f854 <xTaskRemoveFromEventList>
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d005      	beq.n	800ee50 <xQueueReceiveFromISR+0x76>
						if( pxHigherPriorityTaskWoken != NULL )
 800ee44:	2d00      	cmp	r5, #0
 800ee46:	d005      	beq.n	800ee54 <xQueueReceiveFromISR+0x7a>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800ee4c:	2401      	movs	r4, #1
 800ee4e:	e7d3      	b.n	800edf8 <xQueueReceiveFromISR+0x1e>
 800ee50:	2401      	movs	r4, #1
 800ee52:	e7d1      	b.n	800edf8 <xQueueReceiveFromISR+0x1e>
 800ee54:	2401      	movs	r4, #1
 800ee56:	e7cf      	b.n	800edf8 <xQueueReceiveFromISR+0x1e>

0800ee58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ee58:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	e000      	b.n	800ee60 <vQueueAddToRegistry+0x8>
 800ee5e:	3301      	adds	r3, #1
 800ee60:	2b07      	cmp	r3, #7
 800ee62:	d808      	bhi.n	800ee76 <vQueueAddToRegistry+0x1e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ee64:	00da      	lsls	r2, r3, #3
 800ee66:	4c04      	ldr	r4, [pc, #16]	; (800ee78 <vQueueAddToRegistry+0x20>)
 800ee68:	5912      	ldr	r2, [r2, r4]
 800ee6a:	2a00      	cmp	r2, #0
 800ee6c:	d1f7      	bne.n	800ee5e <vQueueAddToRegistry+0x6>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ee6e:	00db      	lsls	r3, r3, #3
 800ee70:	5119      	str	r1, [r3, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ee72:	18e3      	adds	r3, r4, r3
 800ee74:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ee76:	bd10      	pop	{r4, pc}
 800ee78:	200065f4 	.word	0x200065f4

0800ee7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800ee7c:	b570      	push	{r4, r5, r6, lr}
 800ee7e:	0004      	movs	r4, r0
 800ee80:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ee82:	f001 f9c5 	bl	8010210 <vPortEnterCritical>
 800ee86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee88:	3301      	adds	r3, #1
 800ee8a:	d00b      	beq.n	800eea4 <vQueueWaitForMessageRestricted+0x28>
 800ee8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee8e:	3301      	adds	r3, #1
 800ee90:	d00b      	beq.n	800eeaa <vQueueWaitForMessageRestricted+0x2e>
 800ee92:	f001 f9c9 	bl	8010228 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ee96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d009      	beq.n	800eeb0 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ee9c:	0020      	movs	r0, r4
 800ee9e:	f7ff fd34 	bl	800e90a <prvUnlockQueue>
	}
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800eea4:	2300      	movs	r3, #0
 800eea6:	6463      	str	r3, [r4, #68]	; 0x44
 800eea8:	e7f0      	b.n	800ee8c <vQueueWaitForMessageRestricted+0x10>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	64a3      	str	r3, [r4, #72]	; 0x48
 800eeae:	e7f0      	b.n	800ee92 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eeb0:	0020      	movs	r0, r4
 800eeb2:	3024      	adds	r0, #36	; 0x24
 800eeb4:	0029      	movs	r1, r5
 800eeb6:	f000 fcb3 	bl	800f820 <vTaskPlaceOnEventListRestricted>
 800eeba:	e7ef      	b.n	800ee9c <vQueueWaitForMessageRestricted+0x20>

0800eebc <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800eebc:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eebe:	7802      	ldrb	r2, [r0, #0]
 800eec0:	2aa5      	cmp	r2, #165	; 0xa5
 800eec2:	d102      	bne.n	800eeca <prvTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
 800eec4:	3001      	adds	r0, #1
			ulCount++;
 800eec6:	3301      	adds	r3, #1
 800eec8:	e7f9      	b.n	800eebe <prvTaskCheckFreeStackSpace+0x2>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800eeca:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800eecc:	b298      	uxth	r0, r3
	}
 800eece:	4770      	bx	lr

0800eed0 <prvListTaskWithinSingleList>:
	{
 800eed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed2:	46de      	mov	lr, fp
 800eed4:	4657      	mov	r7, sl
 800eed6:	464e      	mov	r6, r9
 800eed8:	4645      	mov	r5, r8
 800eeda:	b5e0      	push	{r5, r6, r7, lr}
 800eedc:	4681      	mov	r9, r0
 800eede:	000e      	movs	r6, r1
 800eee0:	4690      	mov	r8, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800eee2:	680f      	ldr	r7, [r1, #0]
 800eee4:	2f00      	cmp	r7, #0
 800eee6:	d039      	beq.n	800ef5c <prvListTaskWithinSingleList+0x8c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800eee8:	684b      	ldr	r3, [r1, #4]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	604b      	str	r3, [r1, #4]
 800eeee:	2208      	movs	r2, #8
 800eef0:	4692      	mov	sl, r2
 800eef2:	448a      	add	sl, r1
 800eef4:	4553      	cmp	r3, sl
 800eef6:	d004      	beq.n	800ef02 <prvListTaskWithinSingleList+0x32>
 800eef8:	6873      	ldr	r3, [r6, #4]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	469b      	mov	fp, r3
	UBaseType_t uxTask = 0;
 800eefe:	2700      	movs	r7, #0
 800ef00:	e010      	b.n	800ef24 <prvListTaskWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	604b      	str	r3, [r1, #4]
 800ef06:	e7f7      	b.n	800eef8 <prvListTaskWithinSingleList+0x28>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	6073      	str	r3, [r6, #4]
 800ef0c:	e00f      	b.n	800ef2e <prvListTaskWithinSingleList+0x5e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800ef0e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ef10:	6163      	str	r3, [r4, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800ef12:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ef14:	61a3      	str	r3, [r4, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800ef16:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800ef18:	f7ff ffd0 	bl	800eebc <prvTaskCheckFreeStackSpace>
 800ef1c:	83a0      	strh	r0, [r4, #28]
				uxTask++;
 800ef1e:	3701      	adds	r7, #1
			} while( pxNextTCB != pxFirstTCB );
 800ef20:	45ab      	cmp	fp, r5
 800ef22:	d01b      	beq.n	800ef5c <prvListTaskWithinSingleList+0x8c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ef24:	6873      	ldr	r3, [r6, #4]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	6073      	str	r3, [r6, #4]
 800ef2a:	459a      	cmp	sl, r3
 800ef2c:	d0ec      	beq.n	800ef08 <prvListTaskWithinSingleList+0x38>
 800ef2e:	6873      	ldr	r3, [r6, #4]
 800ef30:	68dd      	ldr	r5, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800ef32:	017c      	lsls	r4, r7, #5
 800ef34:	444c      	add	r4, r9
 800ef36:	6025      	str	r5, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800ef38:	002b      	movs	r3, r5
 800ef3a:	3334      	adds	r3, #52	; 0x34
 800ef3c:	6063      	str	r3, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800ef3e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ef40:	60a3      	str	r3, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800ef42:	4643      	mov	r3, r8
 800ef44:	7323      	strb	r3, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800ef46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef48:	6123      	str	r3, [r4, #16]
					if( eState == eSuspended )
 800ef4a:	4643      	mov	r3, r8
 800ef4c:	2b03      	cmp	r3, #3
 800ef4e:	d1de      	bne.n	800ef0e <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800ef50:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d0db      	beq.n	800ef0e <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ef56:	2302      	movs	r3, #2
 800ef58:	7323      	strb	r3, [r4, #12]
 800ef5a:	e7d8      	b.n	800ef0e <prvListTaskWithinSingleList+0x3e>
	}
 800ef5c:	0038      	movs	r0, r7
 800ef5e:	bcf0      	pop	{r4, r5, r6, r7}
 800ef60:	46bb      	mov	fp, r7
 800ef62:	46b2      	mov	sl, r6
 800ef64:	46a9      	mov	r9, r5
 800ef66:	46a0      	mov	r8, r4
 800ef68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef6c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef6c:	4b08      	ldr	r3, [pc, #32]	; (800ef90 <prvResetNextTaskUnblockTime+0x24>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d104      	bne.n	800ef80 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ef76:	4b07      	ldr	r3, [pc, #28]	; (800ef94 <prvResetNextTaskUnblockTime+0x28>)
 800ef78:	2201      	movs	r2, #1
 800ef7a:	4252      	negs	r2, r2
 800ef7c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800ef7e:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ef80:	4b03      	ldr	r3, [pc, #12]	; (800ef90 <prvResetNextTaskUnblockTime+0x24>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800ef88:	685a      	ldr	r2, [r3, #4]
 800ef8a:	4b02      	ldr	r3, [pc, #8]	; (800ef94 <prvResetNextTaskUnblockTime+0x28>)
 800ef8c:	601a      	str	r2, [r3, #0]
}
 800ef8e:	e7f6      	b.n	800ef7e <prvResetNextTaskUnblockTime+0x12>
 800ef90:	20001500 	.word	0x20001500
 800ef94:	200000d8 	.word	0x200000d8

0800ef98 <prvDeleteTCB>:
	{
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	0004      	movs	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 800ef9c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800ef9e:	f001 fa5f 	bl	8010460 <vPortFree>
		vPortFree( pxTCB );
 800efa2:	0020      	movs	r0, r4
 800efa4:	f001 fa5c 	bl	8010460 <vPortFree>
	}
 800efa8:	bd10      	pop	{r4, pc}

0800efaa <prvAllocateTCBAndStack>:
{
 800efaa:	b570      	push	{r4, r5, r6, lr}
 800efac:	0005      	movs	r5, r0
 800efae:	1e0c      	subs	r4, r1, #0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb0:	d010      	beq.n	800efd4 <prvAllocateTCBAndStack+0x2a>
		if( pxStack != NULL )
 800efb2:	2c00      	cmp	r4, #0
 800efb4:	d017      	beq.n	800efe6 <prvAllocateTCBAndStack+0x3c>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800efb6:	2060      	movs	r0, #96	; 0x60
 800efb8:	f001 f9de 	bl	8010378 <pvPortMalloc>
 800efbc:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800efbe:	d00e      	beq.n	800efde <prvAllocateTCBAndStack+0x34>
				pxNewTCB->pxStack = pxStack;
 800efc0:	6304      	str	r4, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 800efc2:	2e00      	cmp	r6, #0
 800efc4:	d004      	beq.n	800efd0 <prvAllocateTCBAndStack+0x26>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800efc6:	00aa      	lsls	r2, r5, #2
 800efc8:	21a5      	movs	r1, #165	; 0xa5
 800efca:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800efcc:	f004 fb8f 	bl	80136ee <memset>
}
 800efd0:	0030      	movs	r0, r6
 800efd2:	bd70      	pop	{r4, r5, r6, pc}
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efd4:	0080      	lsls	r0, r0, #2
 800efd6:	f001 f9cf 	bl	8010378 <pvPortMalloc>
 800efda:	0004      	movs	r4, r0
 800efdc:	e7e9      	b.n	800efb2 <prvAllocateTCBAndStack+0x8>
				vPortFree( pxStack );
 800efde:	0020      	movs	r0, r4
 800efe0:	f001 fa3e 	bl	8010460 <vPortFree>
 800efe4:	e7ed      	b.n	800efc2 <prvAllocateTCBAndStack+0x18>
			pxNewTCB = NULL;
 800efe6:	0026      	movs	r6, r4
	return pxNewTCB;
 800efe8:	e7f2      	b.n	800efd0 <prvAllocateTCBAndStack+0x26>

0800efea <prvInitialiseTCBVariables>:
{
 800efea:	b570      	push	{r4, r5, r6, lr}
 800efec:	0005      	movs	r5, r0
 800efee:	0016      	movs	r6, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eff0:	2300      	movs	r3, #0
 800eff2:	2b0c      	cmp	r3, #12
 800eff4:	d808      	bhi.n	800f008 <prvInitialiseTCBVariables+0x1e>
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800eff6:	5cc8      	ldrb	r0, [r1, r3]
 800eff8:	18ec      	adds	r4, r5, r3
 800effa:	3434      	adds	r4, #52	; 0x34
 800effc:	7020      	strb	r0, [r4, #0]
		if( pcName[ x ] == 0x00 )
 800effe:	5cc8      	ldrb	r0, [r1, r3]
 800f000:	2800      	cmp	r0, #0
 800f002:	d001      	beq.n	800f008 <prvInitialiseTCBVariables+0x1e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f004:	3301      	adds	r3, #1
 800f006:	e7f4      	b.n	800eff2 <prvInitialiseTCBVariables+0x8>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f008:	2340      	movs	r3, #64	; 0x40
 800f00a:	2200      	movs	r2, #0
 800f00c:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f00e:	2e06      	cmp	r6, #6
 800f010:	d900      	bls.n	800f014 <prvInitialiseTCBVariables+0x2a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f012:	2606      	movs	r6, #6
	pxTCB->uxPriority = uxPriority;
 800f014:	62ee      	str	r6, [r5, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f016:	64ee      	str	r6, [r5, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f018:	2400      	movs	r4, #0
 800f01a:	652c      	str	r4, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f01c:	1d28      	adds	r0, r5, #4
 800f01e:	f7ff fbca 	bl	800e7b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f022:	0028      	movs	r0, r5
 800f024:	3018      	adds	r0, #24
 800f026:	f7ff fbc6 	bl	800e7b6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f02a:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f02c:	2207      	movs	r2, #7
 800f02e:	1b96      	subs	r6, r2, r6
 800f030:	61ae      	str	r6, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f032:	626d      	str	r5, [r5, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f034:	656c      	str	r4, [r5, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f036:	65ac      	str	r4, [r5, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f038:	235c      	movs	r3, #92	; 0x5c
 800f03a:	54ec      	strb	r4, [r5, r3]
}
 800f03c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f040 <prvInitialiseTaskLists>:
{
 800f040:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f042:	2400      	movs	r4, #0
 800f044:	e007      	b.n	800f056 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f046:	00a3      	lsls	r3, r4, #2
 800f048:	191b      	adds	r3, r3, r4
 800f04a:	0098      	lsls	r0, r3, #2
 800f04c:	4b0e      	ldr	r3, [pc, #56]	; (800f088 <prvInitialiseTaskLists+0x48>)
 800f04e:	18c0      	adds	r0, r0, r3
 800f050:	f7ff fba6 	bl	800e7a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f054:	3401      	adds	r4, #1
 800f056:	2c06      	cmp	r4, #6
 800f058:	d9f5      	bls.n	800f046 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800f05a:	4d0c      	ldr	r5, [pc, #48]	; (800f08c <prvInitialiseTaskLists+0x4c>)
 800f05c:	0028      	movs	r0, r5
 800f05e:	f7ff fb9f 	bl	800e7a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f062:	4c0b      	ldr	r4, [pc, #44]	; (800f090 <prvInitialiseTaskLists+0x50>)
 800f064:	0020      	movs	r0, r4
 800f066:	f7ff fb9b 	bl	800e7a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f06a:	480a      	ldr	r0, [pc, #40]	; (800f094 <prvInitialiseTaskLists+0x54>)
 800f06c:	f7ff fb98 	bl	800e7a0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f070:	4809      	ldr	r0, [pc, #36]	; (800f098 <prvInitialiseTaskLists+0x58>)
 800f072:	f7ff fb95 	bl	800e7a0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f076:	4809      	ldr	r0, [pc, #36]	; (800f09c <prvInitialiseTaskLists+0x5c>)
 800f078:	f7ff fb92 	bl	800e7a0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f07c:	4b08      	ldr	r3, [pc, #32]	; (800f0a0 <prvInitialiseTaskLists+0x60>)
 800f07e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f080:	4b08      	ldr	r3, [pc, #32]	; (800f0a4 <prvInitialiseTaskLists+0x64>)
 800f082:	601c      	str	r4, [r3, #0]
}
 800f084:	bd70      	pop	{r4, r5, r6, pc}
 800f086:	46c0      	nop			; (mov r8, r8)
 800f088:	20001508 	.word	0x20001508
 800f08c:	200015b0 	.word	0x200015b0
 800f090:	200015c4 	.word	0x200015c4
 800f094:	200015dc 	.word	0x200015dc
 800f098:	20001608 	.word	0x20001608
 800f09c:	200015f4 	.word	0x200015f4
 800f0a0:	20001500 	.word	0x20001500
 800f0a4:	20001504 	.word	0x20001504

0800f0a8 <prvAddCurrentTaskToDelayedList>:
{
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f0ac:	4b0e      	ldr	r3, [pc, #56]	; (800f0e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f0b2:	4b0e      	ldr	r3, [pc, #56]	; (800f0ec <prvAddCurrentTaskToDelayedList+0x44>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4283      	cmp	r3, r0
 800f0b8:	d907      	bls.n	800f0ca <prvAddCurrentTaskToDelayedList+0x22>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f0ba:	4b0d      	ldr	r3, [pc, #52]	; (800f0f0 <prvAddCurrentTaskToDelayedList+0x48>)
 800f0bc:	6818      	ldr	r0, [r3, #0]
 800f0be:	4b0a      	ldr	r3, [pc, #40]	; (800f0e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800f0c0:	6819      	ldr	r1, [r3, #0]
 800f0c2:	3104      	adds	r1, #4
 800f0c4:	f7ff fb85 	bl	800e7d2 <vListInsert>
}
 800f0c8:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f0ca:	4b0a      	ldr	r3, [pc, #40]	; (800f0f4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f0cc:	6818      	ldr	r0, [r3, #0]
 800f0ce:	4b06      	ldr	r3, [pc, #24]	; (800f0e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800f0d0:	6819      	ldr	r1, [r3, #0]
 800f0d2:	3104      	adds	r1, #4
 800f0d4:	f7ff fb7d 	bl	800e7d2 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f0d8:	4b07      	ldr	r3, [pc, #28]	; (800f0f8 <prvAddCurrentTaskToDelayedList+0x50>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	42a3      	cmp	r3, r4
 800f0de:	d9f3      	bls.n	800f0c8 <prvAddCurrentTaskToDelayedList+0x20>
			xNextTaskUnblockTime = xTimeToWake;
 800f0e0:	4b05      	ldr	r3, [pc, #20]	; (800f0f8 <prvAddCurrentTaskToDelayedList+0x50>)
 800f0e2:	601c      	str	r4, [r3, #0]
}
 800f0e4:	e7f0      	b.n	800f0c8 <prvAddCurrentTaskToDelayedList+0x20>
 800f0e6:	46c0      	nop			; (mov r8, r8)
 800f0e8:	200014fc 	.word	0x200014fc
 800f0ec:	2000161c 	.word	0x2000161c
 800f0f0:	20001504 	.word	0x20001504
 800f0f4:	20001500 	.word	0x20001500
 800f0f8:	200000d8 	.word	0x200000d8

0800f0fc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f0fc:	b510      	push	{r4, lr}
 800f0fe:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f100:	f005 fac1 	bl	8014686 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f104:	0020      	movs	r0, r4
 800f106:	f7f1 f807 	bl	8000118 <strlen>
 800f10a:	280b      	cmp	r0, #11
 800f10c:	dc03      	bgt.n	800f116 <prvWriteNameToBuffer+0x1a>
		{
			pcBuffer[ x ] = ' ';
 800f10e:	2320      	movs	r3, #32
 800f110:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f112:	3001      	adds	r0, #1
 800f114:	e7f9      	b.n	800f10a <prvWriteNameToBuffer+0xe>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f116:	1820      	adds	r0, r4, r0
 800f118:	2300      	movs	r3, #0
 800f11a:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f11c:	bd10      	pop	{r4, pc}
	...

0800f120 <xTaskGenericCreate>:
{
 800f120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f122:	46de      	mov	lr, fp
 800f124:	4657      	mov	r7, sl
 800f126:	4646      	mov	r6, r8
 800f128:	b5c0      	push	{r6, r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	1e07      	subs	r7, r0, #0
 800f12e:	468b      	mov	fp, r1
 800f130:	4690      	mov	r8, r2
 800f132:	469a      	mov	sl, r3
 800f134:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	configASSERT( pxTaskCode );
 800f136:	d003      	beq.n	800f140 <xTaskGenericCreate+0x20>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800f138:	2d06      	cmp	r5, #6
 800f13a:	d903      	bls.n	800f144 <xTaskGenericCreate+0x24>
 800f13c:	b672      	cpsid	i
 800f13e:	e7fe      	b.n	800f13e <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
 800f140:	b672      	cpsid	i
 800f142:	e7fe      	b.n	800f142 <xTaskGenericCreate+0x22>
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800f144:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f146:	0010      	movs	r0, r2
 800f148:	f7ff ff2f 	bl	800efaa <prvAllocateTCBAndStack>
 800f14c:	1e04      	subs	r4, r0, #0
	if( pxNewTCB != NULL )
 800f14e:	d05b      	beq.n	800f208 <xTaskGenericCreate+0xe8>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f150:	4e32      	ldr	r6, [pc, #200]	; (800f21c <xTaskGenericCreate+0xfc>)
 800f152:	4446      	add	r6, r8
 800f154:	00b6      	lsls	r6, r6, #2
 800f156:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f158:	469c      	mov	ip, r3
 800f15a:	4466      	add	r6, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f15c:	2307      	movs	r3, #7
 800f15e:	439e      	bics	r6, r3
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800f160:	4643      	mov	r3, r8
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f166:	002a      	movs	r2, r5
 800f168:	4659      	mov	r1, fp
 800f16a:	f7ff ff3e 	bl	800efea <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f16e:	4652      	mov	r2, sl
 800f170:	0039      	movs	r1, r7
 800f172:	0030      	movs	r0, r6
 800f174:	f001 f814 	bl	80101a0 <pxPortInitialiseStack>
 800f178:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d000      	beq.n	800f182 <xTaskGenericCreate+0x62>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f180:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f182:	f001 f845 	bl	8010210 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f186:	4a26      	ldr	r2, [pc, #152]	; (800f220 <xTaskGenericCreate+0x100>)
 800f188:	6813      	ldr	r3, [r2, #0]
 800f18a:	3301      	adds	r3, #1
 800f18c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f18e:	4b25      	ldr	r3, [pc, #148]	; (800f224 <xTaskGenericCreate+0x104>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00b      	beq.n	800f1ae <xTaskGenericCreate+0x8e>
				if( xSchedulerRunning == pdFALSE )
 800f196:	4b24      	ldr	r3, [pc, #144]	; (800f228 <xTaskGenericCreate+0x108>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10c      	bne.n	800f1b8 <xTaskGenericCreate+0x98>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f19e:	4b21      	ldr	r3, [pc, #132]	; (800f224 <xTaskGenericCreate+0x104>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a4:	42ab      	cmp	r3, r5
 800f1a6:	d807      	bhi.n	800f1b8 <xTaskGenericCreate+0x98>
						pxCurrentTCB = pxNewTCB;
 800f1a8:	4b1e      	ldr	r3, [pc, #120]	; (800f224 <xTaskGenericCreate+0x104>)
 800f1aa:	601c      	str	r4, [r3, #0]
 800f1ac:	e004      	b.n	800f1b8 <xTaskGenericCreate+0x98>
				pxCurrentTCB =  pxNewTCB;
 800f1ae:	4b1d      	ldr	r3, [pc, #116]	; (800f224 <xTaskGenericCreate+0x104>)
 800f1b0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f1b2:	6813      	ldr	r3, [r2, #0]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d020      	beq.n	800f1fa <xTaskGenericCreate+0xda>
			uxTaskNumber++;
 800f1b8:	4a1c      	ldr	r2, [pc, #112]	; (800f22c <xTaskGenericCreate+0x10c>)
 800f1ba:	6813      	ldr	r3, [r2, #0]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f1c0:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f1c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f1c4:	4a1a      	ldr	r2, [pc, #104]	; (800f230 <xTaskGenericCreate+0x110>)
 800f1c6:	6812      	ldr	r2, [r2, #0]
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d901      	bls.n	800f1d0 <xTaskGenericCreate+0xb0>
 800f1cc:	4a18      	ldr	r2, [pc, #96]	; (800f230 <xTaskGenericCreate+0x110>)
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	1d21      	adds	r1, r4, #4
 800f1d2:	0098      	lsls	r0, r3, #2
 800f1d4:	18c0      	adds	r0, r0, r3
 800f1d6:	0080      	lsls	r0, r0, #2
 800f1d8:	4b16      	ldr	r3, [pc, #88]	; (800f234 <xTaskGenericCreate+0x114>)
 800f1da:	18c0      	adds	r0, r0, r3
 800f1dc:	f7ff faee 	bl	800e7bc <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f1e0:	f001 f822 	bl	8010228 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f1e4:	4b10      	ldr	r3, [pc, #64]	; (800f228 <xTaskGenericCreate+0x108>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d015      	beq.n	800f218 <xTaskGenericCreate+0xf8>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f1ec:	4b0d      	ldr	r3, [pc, #52]	; (800f224 <xTaskGenericCreate+0x104>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f2:	42ab      	cmp	r3, r5
 800f1f4:	d304      	bcc.n	800f200 <xTaskGenericCreate+0xe0>
			xReturn = pdPASS;
 800f1f6:	2001      	movs	r0, #1
	return xReturn;
 800f1f8:	e008      	b.n	800f20c <xTaskGenericCreate+0xec>
					prvInitialiseTaskLists();
 800f1fa:	f7ff ff21 	bl	800f040 <prvInitialiseTaskLists>
 800f1fe:	e7db      	b.n	800f1b8 <xTaskGenericCreate+0x98>
				taskYIELD_IF_USING_PREEMPTION();
 800f200:	f000 fffa 	bl	80101f8 <vPortYield>
			xReturn = pdPASS;
 800f204:	2001      	movs	r0, #1
 800f206:	e001      	b.n	800f20c <xTaskGenericCreate+0xec>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f208:	2001      	movs	r0, #1
 800f20a:	4240      	negs	r0, r0
}
 800f20c:	b002      	add	sp, #8
 800f20e:	bce0      	pop	{r5, r6, r7}
 800f210:	46bb      	mov	fp, r7
 800f212:	46b2      	mov	sl, r6
 800f214:	46a8      	mov	r8, r5
 800f216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800f218:	2001      	movs	r0, #1
 800f21a:	e7f7      	b.n	800f20c <xTaskGenericCreate+0xec>
 800f21c:	3fffffff 	.word	0x3fffffff
 800f220:	20001598 	.word	0x20001598
 800f224:	200014fc 	.word	0x200014fc
 800f228:	200015f0 	.word	0x200015f0
 800f22c:	200015a4 	.word	0x200015a4
 800f230:	200015ac 	.word	0x200015ac
 800f234:	20001508 	.word	0x20001508

0800f238 <uxTaskPriorityGet>:
	{
 800f238:	b510      	push	{r4, lr}
 800f23a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f23c:	f000 ffe8 	bl	8010210 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f240:	2c00      	cmp	r4, #0
 800f242:	d004      	beq.n	800f24e <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f244:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f246:	f000 ffef 	bl	8010228 <vPortExitCritical>
	}
 800f24a:	0020      	movs	r0, r4
 800f24c:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f24e:	4b01      	ldr	r3, [pc, #4]	; (800f254 <uxTaskPriorityGet+0x1c>)
 800f250:	681c      	ldr	r4, [r3, #0]
 800f252:	e7f7      	b.n	800f244 <uxTaskPriorityGet+0xc>
 800f254:	200014fc 	.word	0x200014fc

0800f258 <vTaskPrioritySet>:
	{
 800f258:	b570      	push	{r4, r5, r6, lr}
 800f25a:	0004      	movs	r4, r0
 800f25c:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f25e:	2906      	cmp	r1, #6
 800f260:	d901      	bls.n	800f266 <vTaskPrioritySet+0xe>
 800f262:	b672      	cpsid	i
 800f264:	e7fe      	b.n	800f264 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f266:	f000 ffd3 	bl	8010210 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f26a:	2c00      	cmp	r4, #0
 800f26c:	d00e      	beq.n	800f28c <vTaskPrioritySet+0x34>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f26e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f270:	429d      	cmp	r5, r3
 800f272:	d027      	beq.n	800f2c4 <vTaskPrioritySet+0x6c>
				if( uxNewPriority > uxCurrentBasePriority )
 800f274:	d90d      	bls.n	800f292 <vTaskPrioritySet+0x3a>
					if( pxTCB != pxCurrentTCB )
 800f276:	4a24      	ldr	r2, [pc, #144]	; (800f308 <vTaskPrioritySet+0xb0>)
 800f278:	6812      	ldr	r2, [r2, #0]
 800f27a:	42a2      	cmp	r2, r4
 800f27c:	d025      	beq.n	800f2ca <vTaskPrioritySet+0x72>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f27e:	4a22      	ldr	r2, [pc, #136]	; (800f308 <vTaskPrioritySet+0xb0>)
 800f280:	6812      	ldr	r2, [r2, #0]
 800f282:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f284:	42aa      	cmp	r2, r5
 800f286:	d922      	bls.n	800f2ce <vTaskPrioritySet+0x76>
	BaseType_t xYieldRequired = pdFALSE;
 800f288:	2600      	movs	r6, #0
 800f28a:	e007      	b.n	800f29c <vTaskPrioritySet+0x44>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f28c:	4b1e      	ldr	r3, [pc, #120]	; (800f308 <vTaskPrioritySet+0xb0>)
 800f28e:	681c      	ldr	r4, [r3, #0]
 800f290:	e7ed      	b.n	800f26e <vTaskPrioritySet+0x16>
				else if( pxTCB == pxCurrentTCB )
 800f292:	4a1d      	ldr	r2, [pc, #116]	; (800f308 <vTaskPrioritySet+0xb0>)
 800f294:	6812      	ldr	r2, [r2, #0]
 800f296:	42a2      	cmp	r2, r4
 800f298:	d01b      	beq.n	800f2d2 <vTaskPrioritySet+0x7a>
	BaseType_t xYieldRequired = pdFALSE;
 800f29a:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f29c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d019      	beq.n	800f2d6 <vTaskPrioritySet+0x7e>
					pxTCB->uxBasePriority = uxNewPriority;
 800f2a2:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f2a4:	69a3      	ldr	r3, [r4, #24]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	db02      	blt.n	800f2b0 <vTaskPrioritySet+0x58>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2aa:	2307      	movs	r3, #7
 800f2ac:	1b5d      	subs	r5, r3, r5
 800f2ae:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f2b0:	0093      	lsls	r3, r2, #2
 800f2b2:	189b      	adds	r3, r3, r2
 800f2b4:	009b      	lsls	r3, r3, #2
 800f2b6:	4a15      	ldr	r2, [pc, #84]	; (800f30c <vTaskPrioritySet+0xb4>)
 800f2b8:	189b      	adds	r3, r3, r2
 800f2ba:	6962      	ldr	r2, [r4, #20]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d00c      	beq.n	800f2da <vTaskPrioritySet+0x82>
				if( xYieldRequired == pdTRUE )
 800f2c0:	2e01      	cmp	r6, #1
 800f2c2:	d01e      	beq.n	800f302 <vTaskPrioritySet+0xaa>
		taskEXIT_CRITICAL();
 800f2c4:	f000 ffb0 	bl	8010228 <vPortExitCritical>
	}
 800f2c8:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800f2ca:	2600      	movs	r6, #0
 800f2cc:	e7e6      	b.n	800f29c <vTaskPrioritySet+0x44>
							xYieldRequired = pdTRUE;
 800f2ce:	2601      	movs	r6, #1
 800f2d0:	e7e4      	b.n	800f29c <vTaskPrioritySet+0x44>
					xYieldRequired = pdTRUE;
 800f2d2:	2601      	movs	r6, #1
 800f2d4:	e7e2      	b.n	800f29c <vTaskPrioritySet+0x44>
						pxTCB->uxPriority = uxNewPriority;
 800f2d6:	62e5      	str	r5, [r4, #44]	; 0x2c
 800f2d8:	e7e3      	b.n	800f2a2 <vTaskPrioritySet+0x4a>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f2da:	1d25      	adds	r5, r4, #4
 800f2dc:	0028      	movs	r0, r5
 800f2de:	f7ff fa8f 	bl	800e800 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f2e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2e4:	4a0a      	ldr	r2, [pc, #40]	; (800f310 <vTaskPrioritySet+0xb8>)
 800f2e6:	6812      	ldr	r2, [r2, #0]
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d901      	bls.n	800f2f0 <vTaskPrioritySet+0x98>
 800f2ec:	4a08      	ldr	r2, [pc, #32]	; (800f310 <vTaskPrioritySet+0xb8>)
 800f2ee:	6013      	str	r3, [r2, #0]
 800f2f0:	0098      	lsls	r0, r3, #2
 800f2f2:	18c0      	adds	r0, r0, r3
 800f2f4:	0080      	lsls	r0, r0, #2
 800f2f6:	4b05      	ldr	r3, [pc, #20]	; (800f30c <vTaskPrioritySet+0xb4>)
 800f2f8:	18c0      	adds	r0, r0, r3
 800f2fa:	0029      	movs	r1, r5
 800f2fc:	f7ff fa5e 	bl	800e7bc <vListInsertEnd>
 800f300:	e7de      	b.n	800f2c0 <vTaskPrioritySet+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 800f302:	f000 ff79 	bl	80101f8 <vPortYield>
 800f306:	e7dd      	b.n	800f2c4 <vTaskPrioritySet+0x6c>
 800f308:	200014fc 	.word	0x200014fc
 800f30c:	20001508 	.word	0x20001508
 800f310:	200015ac 	.word	0x200015ac

0800f314 <vTaskStartScheduler>:
{
 800f314:	b500      	push	{lr}
 800f316:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f318:	2300      	movs	r3, #0
 800f31a:	9303      	str	r3, [sp, #12]
 800f31c:	9302      	str	r3, [sp, #8]
 800f31e:	9301      	str	r3, [sp, #4]
 800f320:	9300      	str	r3, [sp, #0]
 800f322:	22a0      	movs	r2, #160	; 0xa0
 800f324:	490d      	ldr	r1, [pc, #52]	; (800f35c <vTaskStartScheduler+0x48>)
 800f326:	480e      	ldr	r0, [pc, #56]	; (800f360 <vTaskStartScheduler+0x4c>)
 800f328:	f7ff fefa 	bl	800f120 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f32c:	2801      	cmp	r0, #1
 800f32e:	d005      	beq.n	800f33c <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
 800f330:	2801      	cmp	r0, #1
 800f332:	d006      	beq.n	800f342 <vTaskStartScheduler+0x2e>
		configASSERT( xReturn );
 800f334:	2800      	cmp	r0, #0
 800f336:	d10f      	bne.n	800f358 <vTaskStartScheduler+0x44>
 800f338:	b672      	cpsid	i
 800f33a:	e7fe      	b.n	800f33a <vTaskStartScheduler+0x26>
			xReturn = xTimerCreateTimerTask();
 800f33c:	f000 fd78 	bl	800fe30 <xTimerCreateTimerTask>
 800f340:	e7f6      	b.n	800f330 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f342:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f344:	4b07      	ldr	r3, [pc, #28]	; (800f364 <vTaskStartScheduler+0x50>)
 800f346:	2201      	movs	r2, #1
 800f348:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f34a:	4b07      	ldr	r3, [pc, #28]	; (800f368 <vTaskStartScheduler+0x54>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f350:	f7f8 f9e4 	bl	800771c <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f354:	f000 ff36 	bl	80101c4 <xPortStartScheduler>
}
 800f358:	b005      	add	sp, #20
 800f35a:	bd00      	pop	{pc}
 800f35c:	0801b664 	.word	0x0801b664
 800f360:	0800f629 	.word	0x0800f629
 800f364:	200015f0 	.word	0x200015f0
 800f368:	2000161c 	.word	0x2000161c

0800f36c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f36c:	4a02      	ldr	r2, [pc, #8]	; (800f378 <vTaskSuspendAll+0xc>)
 800f36e:	6813      	ldr	r3, [r2, #0]
 800f370:	3301      	adds	r3, #1
 800f372:	6013      	str	r3, [r2, #0]
}
 800f374:	4770      	bx	lr
 800f376:	46c0      	nop			; (mov r8, r8)
 800f378:	200015a0 	.word	0x200015a0

0800f37c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f37c:	4b01      	ldr	r3, [pc, #4]	; (800f384 <xTaskGetTickCount+0x8>)
 800f37e:	6818      	ldr	r0, [r3, #0]
}
 800f380:	4770      	bx	lr
 800f382:	46c0      	nop			; (mov r8, r8)
 800f384:	2000161c 	.word	0x2000161c

0800f388 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f388:	4b01      	ldr	r3, [pc, #4]	; (800f390 <xTaskGetTickCountFromISR+0x8>)
 800f38a:	6818      	ldr	r0, [r3, #0]
}
 800f38c:	4770      	bx	lr
 800f38e:	46c0      	nop			; (mov r8, r8)
 800f390:	2000161c 	.word	0x2000161c

0800f394 <xTaskIncrementTick>:
{
 800f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f396:	4b39      	ldr	r3, [pc, #228]	; (800f47c <xTaskIncrementTick+0xe8>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d162      	bne.n	800f464 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800f39e:	4b38      	ldr	r3, [pc, #224]	; (800f480 <xTaskIncrementTick+0xec>)
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	3201      	adds	r2, #1
 800f3a4:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f3a6:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f3a8:	2e00      	cmp	r6, #0
 800f3aa:	d112      	bne.n	800f3d2 <xTaskIncrementTick+0x3e>
				taskSWITCH_DELAYED_LISTS();
 800f3ac:	4b35      	ldr	r3, [pc, #212]	; (800f484 <xTaskIncrementTick+0xf0>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d001      	beq.n	800f3ba <xTaskIncrementTick+0x26>
 800f3b6:	b672      	cpsid	i
 800f3b8:	e7fe      	b.n	800f3b8 <xTaskIncrementTick+0x24>
 800f3ba:	4a32      	ldr	r2, [pc, #200]	; (800f484 <xTaskIncrementTick+0xf0>)
 800f3bc:	6811      	ldr	r1, [r2, #0]
 800f3be:	4b32      	ldr	r3, [pc, #200]	; (800f488 <xTaskIncrementTick+0xf4>)
 800f3c0:	6818      	ldr	r0, [r3, #0]
 800f3c2:	6010      	str	r0, [r2, #0]
 800f3c4:	6019      	str	r1, [r3, #0]
 800f3c6:	4a31      	ldr	r2, [pc, #196]	; (800f48c <xTaskIncrementTick+0xf8>)
 800f3c8:	6813      	ldr	r3, [r2, #0]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	6013      	str	r3, [r2, #0]
 800f3ce:	f7ff fdcd 	bl	800ef6c <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f3d2:	4b2f      	ldr	r3, [pc, #188]	; (800f490 <xTaskIncrementTick+0xfc>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	42b3      	cmp	r3, r6
 800f3d8:	d90c      	bls.n	800f3f4 <xTaskIncrementTick+0x60>
BaseType_t xSwitchRequired = pdFALSE;
 800f3da:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f3dc:	4b2d      	ldr	r3, [pc, #180]	; (800f494 <xTaskIncrementTick+0x100>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3e2:	0093      	lsls	r3, r2, #2
 800f3e4:	189b      	adds	r3, r3, r2
 800f3e6:	009a      	lsls	r2, r3, #2
 800f3e8:	4b2b      	ldr	r3, [pc, #172]	; (800f498 <xTaskIncrementTick+0x104>)
 800f3ea:	58d3      	ldr	r3, [r2, r3]
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d93e      	bls.n	800f46e <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800f3f0:	2401      	movs	r4, #1
 800f3f2:	e03c      	b.n	800f46e <xTaskIncrementTick+0xda>
BaseType_t xSwitchRequired = pdFALSE;
 800f3f4:	2400      	movs	r4, #0
 800f3f6:	e016      	b.n	800f426 <xTaskIncrementTick+0x92>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f3f8:	4b25      	ldr	r3, [pc, #148]	; (800f490 <xTaskIncrementTick+0xfc>)
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	4252      	negs	r2, r2
 800f3fe:	601a      	str	r2, [r3, #0]
						break;
 800f400:	e7ec      	b.n	800f3dc <xTaskIncrementTick+0x48>
							xNextTaskUnblockTime = xItemValue;
 800f402:	4a23      	ldr	r2, [pc, #140]	; (800f490 <xTaskIncrementTick+0xfc>)
 800f404:	6013      	str	r3, [r2, #0]
							break;
 800f406:	e7e9      	b.n	800f3dc <xTaskIncrementTick+0x48>
						prvAddTaskToReadyList( pxTCB );
 800f408:	0093      	lsls	r3, r2, #2
 800f40a:	189b      	adds	r3, r3, r2
 800f40c:	0098      	lsls	r0, r3, #2
 800f40e:	4b22      	ldr	r3, [pc, #136]	; (800f498 <xTaskIncrementTick+0x104>)
 800f410:	18c0      	adds	r0, r0, r3
 800f412:	0039      	movs	r1, r7
 800f414:	f7ff f9d2 	bl	800e7bc <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f418:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f41a:	4b1e      	ldr	r3, [pc, #120]	; (800f494 <xTaskIncrementTick+0x100>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f420:	429a      	cmp	r2, r3
 800f422:	d300      	bcc.n	800f426 <xTaskIncrementTick+0x92>
								xSwitchRequired = pdTRUE;
 800f424:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f426:	4b17      	ldr	r3, [pc, #92]	; (800f484 <xTaskIncrementTick+0xf0>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d0e3      	beq.n	800f3f8 <xTaskIncrementTick+0x64>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f430:	4b14      	ldr	r3, [pc, #80]	; (800f484 <xTaskIncrementTick+0xf0>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	68db      	ldr	r3, [r3, #12]
 800f436:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f438:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800f43a:	429e      	cmp	r6, r3
 800f43c:	d3e1      	bcc.n	800f402 <xTaskIncrementTick+0x6e>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f43e:	1d2f      	adds	r7, r5, #4
 800f440:	0038      	movs	r0, r7
 800f442:	f7ff f9dd 	bl	800e800 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f446:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d003      	beq.n	800f454 <xTaskIncrementTick+0xc0>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f44c:	0028      	movs	r0, r5
 800f44e:	3018      	adds	r0, #24
 800f450:	f7ff f9d6 	bl	800e800 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f454:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f456:	4b11      	ldr	r3, [pc, #68]	; (800f49c <xTaskIncrementTick+0x108>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d9d4      	bls.n	800f408 <xTaskIncrementTick+0x74>
 800f45e:	4b0f      	ldr	r3, [pc, #60]	; (800f49c <xTaskIncrementTick+0x108>)
 800f460:	601a      	str	r2, [r3, #0]
 800f462:	e7d1      	b.n	800f408 <xTaskIncrementTick+0x74>
		++uxPendedTicks;
 800f464:	4a0e      	ldr	r2, [pc, #56]	; (800f4a0 <xTaskIncrementTick+0x10c>)
 800f466:	6813      	ldr	r3, [r2, #0]
 800f468:	3301      	adds	r3, #1
 800f46a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f46c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800f46e:	4b0d      	ldr	r3, [pc, #52]	; (800f4a4 <xTaskIncrementTick+0x110>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d000      	beq.n	800f478 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800f476:	2401      	movs	r4, #1
}
 800f478:	0020      	movs	r0, r4
 800f47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f47c:	200015a0 	.word	0x200015a0
 800f480:	2000161c 	.word	0x2000161c
 800f484:	20001500 	.word	0x20001500
 800f488:	20001504 	.word	0x20001504
 800f48c:	200015d8 	.word	0x200015d8
 800f490:	200000d8 	.word	0x200000d8
 800f494:	200014fc 	.word	0x200014fc
 800f498:	20001508 	.word	0x20001508
 800f49c:	200015ac 	.word	0x200015ac
 800f4a0:	2000159c 	.word	0x2000159c
 800f4a4:	20001620 	.word	0x20001620

0800f4a8 <xTaskResumeAll>:
{
 800f4a8:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 800f4aa:	4b30      	ldr	r3, [pc, #192]	; (800f56c <xTaskResumeAll+0xc4>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d101      	bne.n	800f4b6 <xTaskResumeAll+0xe>
 800f4b2:	b672      	cpsid	i
 800f4b4:	e7fe      	b.n	800f4b4 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800f4b6:	f000 feab 	bl	8010210 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f4ba:	4b2c      	ldr	r3, [pc, #176]	; (800f56c <xTaskResumeAll+0xc4>)
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	3a01      	subs	r2, #1
 800f4c0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d14b      	bne.n	800f560 <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f4c8:	4b29      	ldr	r3, [pc, #164]	; (800f570 <xTaskResumeAll+0xc8>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d10f      	bne.n	800f4f0 <xTaskResumeAll+0x48>
BaseType_t xAlreadyYielded = pdFALSE;
 800f4d0:	2400      	movs	r4, #0
 800f4d2:	e046      	b.n	800f562 <xTaskResumeAll+0xba>
					prvAddTaskToReadyList( pxTCB );
 800f4d4:	0098      	lsls	r0, r3, #2
 800f4d6:	18c0      	adds	r0, r0, r3
 800f4d8:	0080      	lsls	r0, r0, #2
 800f4da:	4b26      	ldr	r3, [pc, #152]	; (800f574 <xTaskResumeAll+0xcc>)
 800f4dc:	18c0      	adds	r0, r0, r3
 800f4de:	0029      	movs	r1, r5
 800f4e0:	f7ff f96c 	bl	800e7bc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f4e6:	4b24      	ldr	r3, [pc, #144]	; (800f578 <xTaskResumeAll+0xd0>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d216      	bcs.n	800f51e <xTaskResumeAll+0x76>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4f0:	4b22      	ldr	r3, [pc, #136]	; (800f57c <xTaskResumeAll+0xd4>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d016      	beq.n	800f526 <xTaskResumeAll+0x7e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f4f8:	4b20      	ldr	r3, [pc, #128]	; (800f57c <xTaskResumeAll+0xd4>)
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4fe:	0020      	movs	r0, r4
 800f500:	3018      	adds	r0, #24
 800f502:	f7ff f97d 	bl	800e800 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f506:	1d25      	adds	r5, r4, #4
 800f508:	0028      	movs	r0, r5
 800f50a:	f7ff f979 	bl	800e800 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f50e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f510:	4a1b      	ldr	r2, [pc, #108]	; (800f580 <xTaskResumeAll+0xd8>)
 800f512:	6812      	ldr	r2, [r2, #0]
 800f514:	4293      	cmp	r3, r2
 800f516:	d9dd      	bls.n	800f4d4 <xTaskResumeAll+0x2c>
 800f518:	4a19      	ldr	r2, [pc, #100]	; (800f580 <xTaskResumeAll+0xd8>)
 800f51a:	6013      	str	r3, [r2, #0]
 800f51c:	e7da      	b.n	800f4d4 <xTaskResumeAll+0x2c>
						xYieldPending = pdTRUE;
 800f51e:	4b19      	ldr	r3, [pc, #100]	; (800f584 <xTaskResumeAll+0xdc>)
 800f520:	2201      	movs	r2, #1
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	e7e4      	b.n	800f4f0 <xTaskResumeAll+0x48>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f526:	4b18      	ldr	r3, [pc, #96]	; (800f588 <xTaskResumeAll+0xe0>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d109      	bne.n	800f542 <xTaskResumeAll+0x9a>
				if( xYieldPending == pdTRUE )
 800f52e:	4b15      	ldr	r3, [pc, #84]	; (800f584 <xTaskResumeAll+0xdc>)
 800f530:	681c      	ldr	r4, [r3, #0]
 800f532:	2c01      	cmp	r4, #1
 800f534:	d011      	beq.n	800f55a <xTaskResumeAll+0xb2>
BaseType_t xAlreadyYielded = pdFALSE;
 800f536:	2400      	movs	r4, #0
 800f538:	e013      	b.n	800f562 <xTaskResumeAll+0xba>
						--uxPendedTicks;
 800f53a:	4a13      	ldr	r2, [pc, #76]	; (800f588 <xTaskResumeAll+0xe0>)
 800f53c:	6813      	ldr	r3, [r2, #0]
 800f53e:	3b01      	subs	r3, #1
 800f540:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f542:	4b11      	ldr	r3, [pc, #68]	; (800f588 <xTaskResumeAll+0xe0>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d0f1      	beq.n	800f52e <xTaskResumeAll+0x86>
						if( xTaskIncrementTick() != pdFALSE )
 800f54a:	f7ff ff23 	bl	800f394 <xTaskIncrementTick>
 800f54e:	2800      	cmp	r0, #0
 800f550:	d0f3      	beq.n	800f53a <xTaskResumeAll+0x92>
							xYieldPending = pdTRUE;
 800f552:	4b0c      	ldr	r3, [pc, #48]	; (800f584 <xTaskResumeAll+0xdc>)
 800f554:	2201      	movs	r2, #1
 800f556:	601a      	str	r2, [r3, #0]
 800f558:	e7ef      	b.n	800f53a <xTaskResumeAll+0x92>
					taskYIELD_IF_USING_PREEMPTION();
 800f55a:	f000 fe4d 	bl	80101f8 <vPortYield>
 800f55e:	e000      	b.n	800f562 <xTaskResumeAll+0xba>
BaseType_t xAlreadyYielded = pdFALSE;
 800f560:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f562:	f000 fe61 	bl	8010228 <vPortExitCritical>
}
 800f566:	0020      	movs	r0, r4
 800f568:	bd70      	pop	{r4, r5, r6, pc}
 800f56a:	46c0      	nop			; (mov r8, r8)
 800f56c:	200015a0 	.word	0x200015a0
 800f570:	20001598 	.word	0x20001598
 800f574:	20001508 	.word	0x20001508
 800f578:	200014fc 	.word	0x200014fc
 800f57c:	200015dc 	.word	0x200015dc
 800f580:	200015ac 	.word	0x200015ac
 800f584:	20001620 	.word	0x20001620
 800f588:	2000159c 	.word	0x2000159c

0800f58c <vTaskDelay>:
	{
 800f58c:	b510      	push	{r4, lr}
 800f58e:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f590:	d016      	beq.n	800f5c0 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800f592:	4b0d      	ldr	r3, [pc, #52]	; (800f5c8 <vTaskDelay+0x3c>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d001      	beq.n	800f59e <vTaskDelay+0x12>
 800f59a:	b672      	cpsid	i
 800f59c:	e7fe      	b.n	800f59c <vTaskDelay+0x10>
			vTaskSuspendAll();
 800f59e:	f7ff fee5 	bl	800f36c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f5a2:	4b0a      	ldr	r3, [pc, #40]	; (800f5cc <vTaskDelay+0x40>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f5a8:	4b09      	ldr	r3, [pc, #36]	; (800f5d0 <vTaskDelay+0x44>)
 800f5aa:	6818      	ldr	r0, [r3, #0]
 800f5ac:	3004      	adds	r0, #4
 800f5ae:	f7ff f927 	bl	800e800 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f5b2:	0020      	movs	r0, r4
 800f5b4:	f7ff fd78 	bl	800f0a8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f5b8:	f7ff ff76 	bl	800f4a8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d101      	bne.n	800f5c4 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800f5c0:	f000 fe1a 	bl	80101f8 <vPortYield>
	}
 800f5c4:	bd10      	pop	{r4, pc}
 800f5c6:	46c0      	nop			; (mov r8, r8)
 800f5c8:	200015a0 	.word	0x200015a0
 800f5cc:	2000161c 	.word	0x2000161c
 800f5d0:	200014fc 	.word	0x200014fc

0800f5d4 <prvCheckTasksWaitingTermination>:
{
 800f5d4:	b510      	push	{r4, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f5d6:	4b11      	ldr	r3, [pc, #68]	; (800f61c <prvCheckTasksWaitingTermination+0x48>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d01d      	beq.n	800f61a <prvCheckTasksWaitingTermination+0x46>
			vTaskSuspendAll();
 800f5de:	f7ff fec5 	bl	800f36c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f5e2:	4b0f      	ldr	r3, [pc, #60]	; (800f620 <prvCheckTasksWaitingTermination+0x4c>)
 800f5e4:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 800f5e6:	f7ff ff5f 	bl	800f4a8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f5ea:	2c00      	cmp	r4, #0
 800f5ec:	d0f3      	beq.n	800f5d6 <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 800f5ee:	f000 fe0f 	bl	8010210 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f5f2:	4b0b      	ldr	r3, [pc, #44]	; (800f620 <prvCheckTasksWaitingTermination+0x4c>)
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f5f8:	1d20      	adds	r0, r4, #4
 800f5fa:	f7ff f901 	bl	800e800 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f5fe:	4a09      	ldr	r2, [pc, #36]	; (800f624 <prvCheckTasksWaitingTermination+0x50>)
 800f600:	6813      	ldr	r3, [r2, #0]
 800f602:	3b01      	subs	r3, #1
 800f604:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f606:	4a05      	ldr	r2, [pc, #20]	; (800f61c <prvCheckTasksWaitingTermination+0x48>)
 800f608:	6813      	ldr	r3, [r2, #0]
 800f60a:	3b01      	subs	r3, #1
 800f60c:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f60e:	f000 fe0b 	bl	8010228 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 800f612:	0020      	movs	r0, r4
 800f614:	f7ff fcc0 	bl	800ef98 <prvDeleteTCB>
 800f618:	e7dd      	b.n	800f5d6 <prvCheckTasksWaitingTermination+0x2>
}
 800f61a:	bd10      	pop	{r4, pc}
 800f61c:	200015a8 	.word	0x200015a8
 800f620:	20001608 	.word	0x20001608
 800f624:	20001598 	.word	0x20001598

0800f628 <prvIdleTask>:
{
 800f628:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 800f62a:	f7ff ffd3 	bl	800f5d4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f62e:	4b03      	ldr	r3, [pc, #12]	; (800f63c <prvIdleTask+0x14>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b01      	cmp	r3, #1
 800f634:	d9f9      	bls.n	800f62a <prvIdleTask+0x2>
				taskYIELD();
 800f636:	f000 fddf 	bl	80101f8 <vPortYield>
 800f63a:	e7f6      	b.n	800f62a <prvIdleTask+0x2>
 800f63c:	20001508 	.word	0x20001508

0800f640 <uxTaskGetSystemState>:
	{
 800f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f642:	0006      	movs	r6, r0
 800f644:	000c      	movs	r4, r1
 800f646:	0015      	movs	r5, r2
		vTaskSuspendAll();
 800f648:	f7ff fe90 	bl	800f36c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f64c:	4b1e      	ldr	r3, [pc, #120]	; (800f6c8 <uxTaskGetSystemState+0x88>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	42a3      	cmp	r3, r4
 800f652:	d833      	bhi.n	800f6bc <uxTaskGetSystemState+0x7c>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f654:	2707      	movs	r7, #7
 800f656:	2400      	movs	r4, #0
					uxQueue--;
 800f658:	3f01      	subs	r7, #1
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f65a:	0160      	lsls	r0, r4, #5
 800f65c:	00b9      	lsls	r1, r7, #2
 800f65e:	19c9      	adds	r1, r1, r7
 800f660:	0089      	lsls	r1, r1, #2
 800f662:	4b1a      	ldr	r3, [pc, #104]	; (800f6cc <uxTaskGetSystemState+0x8c>)
 800f664:	18c9      	adds	r1, r1, r3
 800f666:	1830      	adds	r0, r6, r0
 800f668:	2201      	movs	r2, #1
 800f66a:	f7ff fc31 	bl	800eed0 <prvListTaskWithinSingleList>
 800f66e:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f670:	2f00      	cmp	r7, #0
 800f672:	d1f1      	bne.n	800f658 <uxTaskGetSystemState+0x18>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f674:	0160      	lsls	r0, r4, #5
 800f676:	4b16      	ldr	r3, [pc, #88]	; (800f6d0 <uxTaskGetSystemState+0x90>)
 800f678:	6819      	ldr	r1, [r3, #0]
 800f67a:	1830      	adds	r0, r6, r0
 800f67c:	2202      	movs	r2, #2
 800f67e:	f7ff fc27 	bl	800eed0 <prvListTaskWithinSingleList>
 800f682:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f684:	0160      	lsls	r0, r4, #5
 800f686:	4b13      	ldr	r3, [pc, #76]	; (800f6d4 <uxTaskGetSystemState+0x94>)
 800f688:	6819      	ldr	r1, [r3, #0]
 800f68a:	1830      	adds	r0, r6, r0
 800f68c:	2202      	movs	r2, #2
 800f68e:	f7ff fc1f 	bl	800eed0 <prvListTaskWithinSingleList>
 800f692:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f694:	0160      	lsls	r0, r4, #5
 800f696:	1830      	adds	r0, r6, r0
 800f698:	2204      	movs	r2, #4
 800f69a:	490f      	ldr	r1, [pc, #60]	; (800f6d8 <uxTaskGetSystemState+0x98>)
 800f69c:	f7ff fc18 	bl	800eed0 <prvListTaskWithinSingleList>
 800f6a0:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f6a2:	0160      	lsls	r0, r4, #5
 800f6a4:	1830      	adds	r0, r6, r0
 800f6a6:	2203      	movs	r2, #3
 800f6a8:	490c      	ldr	r1, [pc, #48]	; (800f6dc <uxTaskGetSystemState+0x9c>)
 800f6aa:	f7ff fc11 	bl	800eed0 <prvListTaskWithinSingleList>
 800f6ae:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f6b0:	2d00      	cmp	r5, #0
 800f6b2:	d004      	beq.n	800f6be <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f6b4:	f7f8 f842 	bl	800773c <ulMainGetRunTimeCounterValue>
 800f6b8:	6028      	str	r0, [r5, #0]
 800f6ba:	e000      	b.n	800f6be <uxTaskGetSystemState+0x7e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f6bc:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800f6be:	f7ff fef3 	bl	800f4a8 <xTaskResumeAll>
	}
 800f6c2:	0020      	movs	r0, r4
 800f6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6c6:	46c0      	nop			; (mov r8, r8)
 800f6c8:	20001598 	.word	0x20001598
 800f6cc:	20001508 	.word	0x20001508
 800f6d0:	20001500 	.word	0x20001500
 800f6d4:	20001504 	.word	0x20001504
 800f6d8:	20001608 	.word	0x20001608
 800f6dc:	200015f4 	.word	0x200015f4

0800f6e0 <vTaskSwitchContext>:
{
 800f6e0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f6e2:	4b36      	ldr	r3, [pc, #216]	; (800f7bc <vTaskSwitchContext+0xdc>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d003      	beq.n	800f6f2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f6ea:	4b35      	ldr	r3, [pc, #212]	; (800f7c0 <vTaskSwitchContext+0xe0>)
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	601a      	str	r2, [r3, #0]
}
 800f6f0:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800f6f2:	4b33      	ldr	r3, [pc, #204]	; (800f7c0 <vTaskSwitchContext+0xe0>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f6f8:	f7f8 f820 	bl	800773c <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f6fc:	4b31      	ldr	r3, [pc, #196]	; (800f7c4 <vTaskSwitchContext+0xe4>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4298      	cmp	r0, r3
 800f702:	d906      	bls.n	800f712 <vTaskSwitchContext+0x32>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f704:	4a30      	ldr	r2, [pc, #192]	; (800f7c8 <vTaskSwitchContext+0xe8>)
 800f706:	6812      	ldr	r2, [r2, #0]
 800f708:	1ac3      	subs	r3, r0, r3
 800f70a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f70c:	468c      	mov	ip, r1
 800f70e:	4463      	add	r3, ip
 800f710:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f712:	4b2c      	ldr	r3, [pc, #176]	; (800f7c4 <vTaskSwitchContext+0xe4>)
 800f714:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f716:	4b2c      	ldr	r3, [pc, #176]	; (800f7c8 <vTaskSwitchContext+0xe8>)
 800f718:	681a      	ldr	r2, [r3, #0]
 800f71a:	6812      	ldr	r2, [r2, #0]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f720:	429a      	cmp	r2, r3
 800f722:	d91a      	bls.n	800f75a <vTaskSwitchContext+0x7a>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f724:	4b28      	ldr	r3, [pc, #160]	; (800f7c8 <vTaskSwitchContext+0xe8>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f72a:	2214      	movs	r2, #20
 800f72c:	4927      	ldr	r1, [pc, #156]	; (800f7cc <vTaskSwitchContext+0xec>)
 800f72e:	f003 ffc7 	bl	80136c0 <memcmp>
 800f732:	2800      	cmp	r0, #0
 800f734:	d118      	bne.n	800f768 <vTaskSwitchContext+0x88>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f736:	4b26      	ldr	r3, [pc, #152]	; (800f7d0 <vTaskSwitchContext+0xf0>)
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	0093      	lsls	r3, r2, #2
 800f73c:	189b      	adds	r3, r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	4a24      	ldr	r2, [pc, #144]	; (800f7d4 <vTaskSwitchContext+0xf4>)
 800f742:	589b      	ldr	r3, [r3, r2]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d118      	bne.n	800f77a <vTaskSwitchContext+0x9a>
 800f748:	4b21      	ldr	r3, [pc, #132]	; (800f7d0 <vTaskSwitchContext+0xf0>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d012      	beq.n	800f776 <vTaskSwitchContext+0x96>
 800f750:	4a1f      	ldr	r2, [pc, #124]	; (800f7d0 <vTaskSwitchContext+0xf0>)
 800f752:	6813      	ldr	r3, [r2, #0]
 800f754:	3b01      	subs	r3, #1
 800f756:	6013      	str	r3, [r2, #0]
 800f758:	e7ed      	b.n	800f736 <vTaskSwitchContext+0x56>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f75a:	4b1b      	ldr	r3, [pc, #108]	; (800f7c8 <vTaskSwitchContext+0xe8>)
 800f75c:	6818      	ldr	r0, [r3, #0]
 800f75e:	6819      	ldr	r1, [r3, #0]
 800f760:	3134      	adds	r1, #52	; 0x34
 800f762:	f7fe f985 	bl	800da70 <vApplicationStackOverflowHook>
 800f766:	e7dd      	b.n	800f724 <vTaskSwitchContext+0x44>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f768:	4b17      	ldr	r3, [pc, #92]	; (800f7c8 <vTaskSwitchContext+0xe8>)
 800f76a:	6818      	ldr	r0, [r3, #0]
 800f76c:	6819      	ldr	r1, [r3, #0]
 800f76e:	3134      	adds	r1, #52	; 0x34
 800f770:	f7fe f97e 	bl	800da70 <vApplicationStackOverflowHook>
 800f774:	e7df      	b.n	800f736 <vTaskSwitchContext+0x56>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f776:	b672      	cpsid	i
 800f778:	e7fe      	b.n	800f778 <vTaskSwitchContext+0x98>
 800f77a:	4b15      	ldr	r3, [pc, #84]	; (800f7d0 <vTaskSwitchContext+0xf0>)
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	4c15      	ldr	r4, [pc, #84]	; (800f7d4 <vTaskSwitchContext+0xf4>)
 800f780:	0093      	lsls	r3, r2, #2
 800f782:	1899      	adds	r1, r3, r2
 800f784:	0089      	lsls	r1, r1, #2
 800f786:	1861      	adds	r1, r4, r1
 800f788:	6848      	ldr	r0, [r1, #4]
 800f78a:	6840      	ldr	r0, [r0, #4]
 800f78c:	6048      	str	r0, [r1, #4]
 800f78e:	189b      	adds	r3, r3, r2
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	3308      	adds	r3, #8
 800f794:	191b      	adds	r3, r3, r4
 800f796:	4298      	cmp	r0, r3
 800f798:	d009      	beq.n	800f7ae <vTaskSwitchContext+0xce>
 800f79a:	0093      	lsls	r3, r2, #2
 800f79c:	189a      	adds	r2, r3, r2
 800f79e:	0092      	lsls	r2, r2, #2
 800f7a0:	4b0c      	ldr	r3, [pc, #48]	; (800f7d4 <vTaskSwitchContext+0xf4>)
 800f7a2:	189a      	adds	r2, r3, r2
 800f7a4:	6853      	ldr	r3, [r2, #4]
 800f7a6:	68da      	ldr	r2, [r3, #12]
 800f7a8:	4b07      	ldr	r3, [pc, #28]	; (800f7c8 <vTaskSwitchContext+0xe8>)
 800f7aa:	601a      	str	r2, [r3, #0]
}
 800f7ac:	e7a0      	b.n	800f6f0 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f7ae:	6840      	ldr	r0, [r0, #4]
 800f7b0:	0093      	lsls	r3, r2, #2
 800f7b2:	189b      	adds	r3, r3, r2
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	18e3      	adds	r3, r4, r3
 800f7b8:	6058      	str	r0, [r3, #4]
 800f7ba:	e7ee      	b.n	800f79a <vTaskSwitchContext+0xba>
 800f7bc:	200015a0 	.word	0x200015a0
 800f7c0:	20001620 	.word	0x20001620
 800f7c4:	20001594 	.word	0x20001594
 800f7c8:	200014fc 	.word	0x200014fc
 800f7cc:	0801b694 	.word	0x0801b694
 800f7d0:	200015ac 	.word	0x200015ac
 800f7d4:	20001508 	.word	0x20001508

0800f7d8 <vTaskPlaceOnEventList>:
{
 800f7d8:	b570      	push	{r4, r5, r6, lr}
 800f7da:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	d010      	beq.n	800f802 <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f7e0:	4d0c      	ldr	r5, [pc, #48]	; (800f814 <vTaskPlaceOnEventList+0x3c>)
 800f7e2:	6829      	ldr	r1, [r5, #0]
 800f7e4:	3118      	adds	r1, #24
 800f7e6:	f7fe fff4 	bl	800e7d2 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f7ea:	6828      	ldr	r0, [r5, #0]
 800f7ec:	3004      	adds	r0, #4
 800f7ee:	f7ff f807 	bl	800e800 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f7f2:	1c63      	adds	r3, r4, #1
 800f7f4:	d007      	beq.n	800f806 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800f7f6:	4b08      	ldr	r3, [pc, #32]	; (800f818 <vTaskPlaceOnEventList+0x40>)
 800f7f8:	6818      	ldr	r0, [r3, #0]
 800f7fa:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f7fc:	f7ff fc54 	bl	800f0a8 <prvAddCurrentTaskToDelayedList>
}
 800f800:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800f802:	b672      	cpsid	i
 800f804:	e7fe      	b.n	800f804 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f806:	4b03      	ldr	r3, [pc, #12]	; (800f814 <vTaskPlaceOnEventList+0x3c>)
 800f808:	6819      	ldr	r1, [r3, #0]
 800f80a:	3104      	adds	r1, #4
 800f80c:	4803      	ldr	r0, [pc, #12]	; (800f81c <vTaskPlaceOnEventList+0x44>)
 800f80e:	f7fe ffd5 	bl	800e7bc <vListInsertEnd>
 800f812:	e7f5      	b.n	800f800 <vTaskPlaceOnEventList+0x28>
 800f814:	200014fc 	.word	0x200014fc
 800f818:	2000161c 	.word	0x2000161c
 800f81c:	200015f4 	.word	0x200015f4

0800f820 <vTaskPlaceOnEventListRestricted>:
	{
 800f820:	b570      	push	{r4, r5, r6, lr}
 800f822:	000c      	movs	r4, r1
		configASSERT( pxEventList );
 800f824:	2800      	cmp	r0, #0
 800f826:	d00e      	beq.n	800f846 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f828:	4d08      	ldr	r5, [pc, #32]	; (800f84c <vTaskPlaceOnEventListRestricted+0x2c>)
 800f82a:	6829      	ldr	r1, [r5, #0]
 800f82c:	3118      	adds	r1, #24
 800f82e:	f7fe ffc5 	bl	800e7bc <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f832:	6828      	ldr	r0, [r5, #0]
 800f834:	3004      	adds	r0, #4
 800f836:	f7fe ffe3 	bl	800e800 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f83a:	4b05      	ldr	r3, [pc, #20]	; (800f850 <vTaskPlaceOnEventListRestricted+0x30>)
 800f83c:	6818      	ldr	r0, [r3, #0]
 800f83e:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f840:	f7ff fc32 	bl	800f0a8 <prvAddCurrentTaskToDelayedList>
	}
 800f844:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800f846:	b672      	cpsid	i
 800f848:	e7fe      	b.n	800f848 <vTaskPlaceOnEventListRestricted+0x28>
 800f84a:	46c0      	nop			; (mov r8, r8)
 800f84c:	200014fc 	.word	0x200014fc
 800f850:	2000161c 	.word	0x2000161c

0800f854 <xTaskRemoveFromEventList>:
{
 800f854:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f856:	68c3      	ldr	r3, [r0, #12]
 800f858:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f85a:	2c00      	cmp	r4, #0
 800f85c:	d026      	beq.n	800f8ac <xTaskRemoveFromEventList+0x58>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f85e:	0025      	movs	r5, r4
 800f860:	3518      	adds	r5, #24
 800f862:	0028      	movs	r0, r5
 800f864:	f7fe ffcc 	bl	800e800 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f868:	4b15      	ldr	r3, [pc, #84]	; (800f8c0 <xTaskRemoveFromEventList+0x6c>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d11f      	bne.n	800f8b0 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f870:	1d25      	adds	r5, r4, #4
 800f872:	0028      	movs	r0, r5
 800f874:	f7fe ffc4 	bl	800e800 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f878:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f87a:	4a12      	ldr	r2, [pc, #72]	; (800f8c4 <xTaskRemoveFromEventList+0x70>)
 800f87c:	6812      	ldr	r2, [r2, #0]
 800f87e:	4293      	cmp	r3, r2
 800f880:	d901      	bls.n	800f886 <xTaskRemoveFromEventList+0x32>
 800f882:	4a10      	ldr	r2, [pc, #64]	; (800f8c4 <xTaskRemoveFromEventList+0x70>)
 800f884:	6013      	str	r3, [r2, #0]
 800f886:	0098      	lsls	r0, r3, #2
 800f888:	18c0      	adds	r0, r0, r3
 800f88a:	0080      	lsls	r0, r0, #2
 800f88c:	4b0e      	ldr	r3, [pc, #56]	; (800f8c8 <xTaskRemoveFromEventList+0x74>)
 800f88e:	18c0      	adds	r0, r0, r3
 800f890:	0029      	movs	r1, r5
 800f892:	f7fe ff93 	bl	800e7bc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f896:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f898:	4b0c      	ldr	r3, [pc, #48]	; (800f8cc <xTaskRemoveFromEventList+0x78>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d90b      	bls.n	800f8ba <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800f8a2:	4b0b      	ldr	r3, [pc, #44]	; (800f8d0 <xTaskRemoveFromEventList+0x7c>)
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800f8a8:	2001      	movs	r0, #1
 800f8aa:	e007      	b.n	800f8bc <xTaskRemoveFromEventList+0x68>
	configASSERT( pxUnblockedTCB );
 800f8ac:	b672      	cpsid	i
 800f8ae:	e7fe      	b.n	800f8ae <xTaskRemoveFromEventList+0x5a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f8b0:	0029      	movs	r1, r5
 800f8b2:	4808      	ldr	r0, [pc, #32]	; (800f8d4 <xTaskRemoveFromEventList+0x80>)
 800f8b4:	f7fe ff82 	bl	800e7bc <vListInsertEnd>
 800f8b8:	e7ed      	b.n	800f896 <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 800f8ba:	2000      	movs	r0, #0
}
 800f8bc:	bd70      	pop	{r4, r5, r6, pc}
 800f8be:	46c0      	nop			; (mov r8, r8)
 800f8c0:	200015a0 	.word	0x200015a0
 800f8c4:	200015ac 	.word	0x200015ac
 800f8c8:	20001508 	.word	0x20001508
 800f8cc:	200014fc 	.word	0x200014fc
 800f8d0:	20001620 	.word	0x20001620
 800f8d4:	200015dc 	.word	0x200015dc

0800f8d8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d006      	beq.n	800f8ea <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f8dc:	4b04      	ldr	r3, [pc, #16]	; (800f8f0 <vTaskSetTimeOutState+0x18>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f8e2:	4b04      	ldr	r3, [pc, #16]	; (800f8f4 <vTaskSetTimeOutState+0x1c>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	6043      	str	r3, [r0, #4]
}
 800f8e8:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800f8ea:	b672      	cpsid	i
 800f8ec:	e7fe      	b.n	800f8ec <vTaskSetTimeOutState+0x14>
 800f8ee:	46c0      	nop			; (mov r8, r8)
 800f8f0:	200015d8 	.word	0x200015d8
 800f8f4:	2000161c 	.word	0x2000161c

0800f8f8 <xTaskCheckForTimeOut>:
{
 800f8f8:	b570      	push	{r4, r5, r6, lr}
 800f8fa:	0004      	movs	r4, r0
 800f8fc:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 800f8fe:	2800      	cmp	r0, #0
 800f900:	d016      	beq.n	800f930 <xTaskCheckForTimeOut+0x38>
	configASSERT( pxTicksToWait );
 800f902:	2900      	cmp	r1, #0
 800f904:	d016      	beq.n	800f934 <xTaskCheckForTimeOut+0x3c>
	taskENTER_CRITICAL();
 800f906:	f000 fc83 	bl	8010210 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f90a:	4b13      	ldr	r3, [pc, #76]	; (800f958 <xTaskCheckForTimeOut+0x60>)
 800f90c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f90e:	682a      	ldr	r2, [r5, #0]
 800f910:	1c53      	adds	r3, r2, #1
 800f912:	d019      	beq.n	800f948 <xTaskCheckForTimeOut+0x50>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f914:	4b11      	ldr	r3, [pc, #68]	; (800f95c <xTaskCheckForTimeOut+0x64>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	6820      	ldr	r0, [r4, #0]
 800f91a:	4298      	cmp	r0, r3
 800f91c:	d002      	beq.n	800f924 <xTaskCheckForTimeOut+0x2c>
 800f91e:	6863      	ldr	r3, [r4, #4]
 800f920:	428b      	cmp	r3, r1
 800f922:	d916      	bls.n	800f952 <xTaskCheckForTimeOut+0x5a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f924:	6863      	ldr	r3, [r4, #4]
 800f926:	1ac8      	subs	r0, r1, r3
 800f928:	4282      	cmp	r2, r0
 800f92a:	d805      	bhi.n	800f938 <xTaskCheckForTimeOut+0x40>
			xReturn = pdTRUE;
 800f92c:	2401      	movs	r4, #1
 800f92e:	e00c      	b.n	800f94a <xTaskCheckForTimeOut+0x52>
	configASSERT( pxTimeOut );
 800f930:	b672      	cpsid	i
 800f932:	e7fe      	b.n	800f932 <xTaskCheckForTimeOut+0x3a>
	configASSERT( pxTicksToWait );
 800f934:	b672      	cpsid	i
 800f936:	e7fe      	b.n	800f936 <xTaskCheckForTimeOut+0x3e>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f938:	1a5b      	subs	r3, r3, r1
 800f93a:	189b      	adds	r3, r3, r2
 800f93c:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f93e:	0020      	movs	r0, r4
 800f940:	f7ff ffca 	bl	800f8d8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f944:	2400      	movs	r4, #0
 800f946:	e000      	b.n	800f94a <xTaskCheckForTimeOut+0x52>
				xReturn = pdFALSE;
 800f948:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f94a:	f000 fc6d 	bl	8010228 <vPortExitCritical>
}
 800f94e:	0020      	movs	r0, r4
 800f950:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800f952:	2401      	movs	r4, #1
 800f954:	e7f9      	b.n	800f94a <xTaskCheckForTimeOut+0x52>
 800f956:	46c0      	nop			; (mov r8, r8)
 800f958:	2000161c 	.word	0x2000161c
 800f95c:	200015d8 	.word	0x200015d8

0800f960 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f960:	4b01      	ldr	r3, [pc, #4]	; (800f968 <vTaskMissedYield+0x8>)
 800f962:	2201      	movs	r2, #1
 800f964:	601a      	str	r2, [r3, #0]
}
 800f966:	4770      	bx	lr
 800f968:	20001620 	.word	0x20001620

0800f96c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f96c:	4b06      	ldr	r3, [pc, #24]	; (800f988 <xTaskGetSchedulerState+0x1c>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d007      	beq.n	800f984 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f974:	4b05      	ldr	r3, [pc, #20]	; (800f98c <xTaskGetSchedulerState+0x20>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d001      	beq.n	800f980 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 800f97c:	2000      	movs	r0, #0
		return xReturn;
 800f97e:	e002      	b.n	800f986 <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 800f980:	2002      	movs	r0, #2
 800f982:	e000      	b.n	800f986 <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f984:	2001      	movs	r0, #1
	}
 800f986:	4770      	bx	lr
 800f988:	200015f0 	.word	0x200015f0
 800f98c:	200015a0 	.word	0x200015a0

0800f990 <vTaskPriorityInherit>:
	{
 800f990:	b570      	push	{r4, r5, r6, lr}
 800f992:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f994:	d01a      	beq.n	800f9cc <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f996:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f998:	4b19      	ldr	r3, [pc, #100]	; (800fa00 <vTaskPriorityInherit+0x70>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d214      	bcs.n	800f9cc <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f9a2:	6983      	ldr	r3, [r0, #24]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	db05      	blt.n	800f9b4 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9a8:	4b15      	ldr	r3, [pc, #84]	; (800fa00 <vTaskPriorityInherit+0x70>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f9ae:	2307      	movs	r3, #7
 800f9b0:	1a5b      	subs	r3, r3, r1
 800f9b2:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f9b4:	0093      	lsls	r3, r2, #2
 800f9b6:	189b      	adds	r3, r3, r2
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	4a12      	ldr	r2, [pc, #72]	; (800fa04 <vTaskPriorityInherit+0x74>)
 800f9bc:	189b      	adds	r3, r3, r2
 800f9be:	6962      	ldr	r2, [r4, #20]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d004      	beq.n	800f9ce <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f9c4:	4b0e      	ldr	r3, [pc, #56]	; (800fa00 <vTaskPriorityInherit+0x70>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ca:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f9cc:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f9ce:	1d25      	adds	r5, r4, #4
 800f9d0:	0028      	movs	r0, r5
 800f9d2:	f7fe ff15 	bl	800e800 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f9d6:	4b0a      	ldr	r3, [pc, #40]	; (800fa00 <vTaskPriorityInherit+0x70>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9dc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f9de:	4a0a      	ldr	r2, [pc, #40]	; (800fa08 <vTaskPriorityInherit+0x78>)
 800f9e0:	6812      	ldr	r2, [r2, #0]
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d808      	bhi.n	800f9f8 <vTaskPriorityInherit+0x68>
 800f9e6:	0098      	lsls	r0, r3, #2
 800f9e8:	18c0      	adds	r0, r0, r3
 800f9ea:	0080      	lsls	r0, r0, #2
 800f9ec:	4b05      	ldr	r3, [pc, #20]	; (800fa04 <vTaskPriorityInherit+0x74>)
 800f9ee:	18c0      	adds	r0, r0, r3
 800f9f0:	0029      	movs	r1, r5
 800f9f2:	f7fe fee3 	bl	800e7bc <vListInsertEnd>
	}
 800f9f6:	e7e9      	b.n	800f9cc <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f9f8:	4a03      	ldr	r2, [pc, #12]	; (800fa08 <vTaskPriorityInherit+0x78>)
 800f9fa:	6013      	str	r3, [r2, #0]
 800f9fc:	e7f3      	b.n	800f9e6 <vTaskPriorityInherit+0x56>
 800f9fe:	46c0      	nop			; (mov r8, r8)
 800fa00:	200014fc 	.word	0x200014fc
 800fa04:	20001508 	.word	0x20001508
 800fa08:	200015ac 	.word	0x200015ac

0800fa0c <xTaskPriorityDisinherit>:
	{
 800fa0c:	b570      	push	{r4, r5, r6, lr}
 800fa0e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fa10:	d02d      	beq.n	800fa6e <xTaskPriorityDisinherit+0x62>
			configASSERT( pxTCB == pxCurrentTCB );
 800fa12:	4b19      	ldr	r3, [pc, #100]	; (800fa78 <xTaskPriorityDisinherit+0x6c>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	4283      	cmp	r3, r0
 800fa18:	d001      	beq.n	800fa1e <xTaskPriorityDisinherit+0x12>
 800fa1a:	b672      	cpsid	i
 800fa1c:	e7fe      	b.n	800fa1c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800fa1e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d101      	bne.n	800fa28 <xTaskPriorityDisinherit+0x1c>
 800fa24:	b672      	cpsid	i
 800fa26:	e7fe      	b.n	800fa26 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800fa28:	3b01      	subs	r3, #1
 800fa2a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fa2c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fa2e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800fa30:	428a      	cmp	r2, r1
 800fa32:	d01e      	beq.n	800fa72 <xTaskPriorityDisinherit+0x66>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d001      	beq.n	800fa3c <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 800fa38:	2000      	movs	r0, #0
		return xReturn;
 800fa3a:	e019      	b.n	800fa70 <xTaskPriorityDisinherit+0x64>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fa3c:	1d05      	adds	r5, r0, #4
 800fa3e:	0028      	movs	r0, r5
 800fa40:	f7fe fede 	bl	800e800 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fa44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fa46:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa48:	2207      	movs	r2, #7
 800fa4a:	1ad2      	subs	r2, r2, r3
 800fa4c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800fa4e:	4a0b      	ldr	r2, [pc, #44]	; (800fa7c <xTaskPriorityDisinherit+0x70>)
 800fa50:	6812      	ldr	r2, [r2, #0]
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d901      	bls.n	800fa5a <xTaskPriorityDisinherit+0x4e>
 800fa56:	4a09      	ldr	r2, [pc, #36]	; (800fa7c <xTaskPriorityDisinherit+0x70>)
 800fa58:	6013      	str	r3, [r2, #0]
 800fa5a:	0098      	lsls	r0, r3, #2
 800fa5c:	18c0      	adds	r0, r0, r3
 800fa5e:	0080      	lsls	r0, r0, #2
 800fa60:	4b07      	ldr	r3, [pc, #28]	; (800fa80 <xTaskPriorityDisinherit+0x74>)
 800fa62:	18c0      	adds	r0, r0, r3
 800fa64:	0029      	movs	r1, r5
 800fa66:	f7fe fea9 	bl	800e7bc <vListInsertEnd>
					xReturn = pdTRUE;
 800fa6a:	2001      	movs	r0, #1
 800fa6c:	e000      	b.n	800fa70 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 800fa6e:	2000      	movs	r0, #0
	}
 800fa70:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800fa72:	2000      	movs	r0, #0
 800fa74:	e7fc      	b.n	800fa70 <xTaskPriorityDisinherit+0x64>
 800fa76:	46c0      	nop			; (mov r8, r8)
 800fa78:	200014fc 	.word	0x200014fc
 800fa7c:	200015ac 	.word	0x200015ac
 800fa80:	20001508 	.word	0x20001508

0800fa84 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800fa84:	b570      	push	{r4, r5, r6, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	0005      	movs	r5, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fa8e:	4b29      	ldr	r3, [pc, #164]	; (800fb34 <vTaskList+0xb0>)
 800fa90:	681a      	ldr	r2, [r3, #0]
 800fa92:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fa94:	6818      	ldr	r0, [r3, #0]
 800fa96:	0140      	lsls	r0, r0, #5
 800fa98:	f000 fc6e 	bl	8010378 <pvPortMalloc>
 800fa9c:	1e04      	subs	r4, r0, #0

		if( pxTaskStatusArray != NULL )
 800fa9e:	d047      	beq.n	800fb30 <vTaskList+0xac>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800faa0:	9903      	ldr	r1, [sp, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	f7ff fdcc 	bl	800f640 <uxTaskGetSystemState>
 800faa8:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800faaa:	2300      	movs	r3, #0
 800faac:	9302      	str	r3, [sp, #8]
 800faae:	e023      	b.n	800faf8 <vTaskList+0x74>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fab0:	2b02      	cmp	r3, #2
 800fab2:	d136      	bne.n	800fb22 <vTaskList+0x9e>
				{
					case eReady:		cStatus = tskREADY_CHAR;
										break;

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800fab4:	2642      	movs	r6, #66	; 0x42
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fab6:	9b02      	ldr	r3, [sp, #8]
 800fab8:	015b      	lsls	r3, r3, #5
 800faba:	18e3      	adds	r3, r4, r3
 800fabc:	6859      	ldr	r1, [r3, #4]
 800fabe:	0028      	movs	r0, r5
 800fac0:	f7ff fb1c 	bl	800f0fc <prvWriteNameToBuffer>
 800fac4:	0005      	movs	r5, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800fac6:	9b02      	ldr	r3, [sp, #8]
 800fac8:	015b      	lsls	r3, r3, #5
 800faca:	18e3      	adds	r3, r4, r3
 800facc:	691b      	ldr	r3, [r3, #16]
 800face:	9a02      	ldr	r2, [sp, #8]
 800fad0:	0152      	lsls	r2, r2, #5
 800fad2:	18a2      	adds	r2, r4, r2
 800fad4:	8b91      	ldrh	r1, [r2, #28]
 800fad6:	9a02      	ldr	r2, [sp, #8]
 800fad8:	0152      	lsls	r2, r2, #5
 800fada:	18a2      	adds	r2, r4, r2
 800fadc:	6892      	ldr	r2, [r2, #8]
 800fade:	9201      	str	r2, [sp, #4]
 800fae0:	9100      	str	r1, [sp, #0]
 800fae2:	0032      	movs	r2, r6
 800fae4:	4914      	ldr	r1, [pc, #80]	; (800fb38 <vTaskList+0xb4>)
 800fae6:	f004 fd93 	bl	8014610 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800faea:	0028      	movs	r0, r5
 800faec:	f7f0 fb14 	bl	8000118 <strlen>
 800faf0:	182d      	adds	r5, r5, r0
			for( x = 0; x < uxArraySize; x++ )
 800faf2:	9b02      	ldr	r3, [sp, #8]
 800faf4:	3301      	adds	r3, #1
 800faf6:	9302      	str	r3, [sp, #8]
 800faf8:	9a02      	ldr	r2, [sp, #8]
 800fafa:	9b03      	ldr	r3, [sp, #12]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d214      	bcs.n	800fb2a <vTaskList+0xa6>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fb00:	9b02      	ldr	r3, [sp, #8]
 800fb02:	015b      	lsls	r3, r3, #5
 800fb04:	18e3      	adds	r3, r4, r3
 800fb06:	7b1b      	ldrb	r3, [r3, #12]
 800fb08:	2b03      	cmp	r3, #3
 800fb0a:	d008      	beq.n	800fb1e <vTaskList+0x9a>
 800fb0c:	d803      	bhi.n	800fb16 <vTaskList+0x92>
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d1ce      	bne.n	800fab0 <vTaskList+0x2c>
 800fb12:	2652      	movs	r6, #82	; 0x52
 800fb14:	e7cf      	b.n	800fab6 <vTaskList+0x32>
 800fb16:	2b04      	cmp	r3, #4
 800fb18:	d105      	bne.n	800fb26 <vTaskList+0xa2>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800fb1a:	2644      	movs	r6, #68	; 0x44
 800fb1c:	e7cb      	b.n	800fab6 <vTaskList+0x32>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800fb1e:	2653      	movs	r6, #83	; 0x53
 800fb20:	e7c9      	b.n	800fab6 <vTaskList+0x32>
										cStatus = 0x00;
 800fb22:	2600      	movs	r6, #0
 800fb24:	e7c7      	b.n	800fab6 <vTaskList+0x32>
 800fb26:	2600      	movs	r6, #0
 800fb28:	e7c5      	b.n	800fab6 <vTaskList+0x32>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fb2a:	0020      	movs	r0, r4
 800fb2c:	f000 fc98 	bl	8010460 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fb30:	b004      	add	sp, #16
 800fb32:	bd70      	pop	{r4, r5, r6, pc}
 800fb34:	20001598 	.word	0x20001598
 800fb38:	0801b66c 	.word	0x0801b66c

0800fb3c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800fb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb3e:	b087      	sub	sp, #28
 800fb40:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800fb42:	2300      	movs	r3, #0
 800fb44:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fb46:	4b26      	ldr	r3, [pc, #152]	; (800fbe0 <vTaskGetRunTimeStats+0xa4>)
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	9205      	str	r2, [sp, #20]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fb4c:	6818      	ldr	r0, [r3, #0]
 800fb4e:	0140      	lsls	r0, r0, #5
 800fb50:	f000 fc12 	bl	8010378 <pvPortMalloc>
 800fb54:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800fb56:	d040      	beq.n	800fbda <vTaskGetRunTimeStats+0x9e>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800fb58:	9905      	ldr	r1, [sp, #20]
 800fb5a:	aa03      	add	r2, sp, #12
 800fb5c:	f7ff fd70 	bl	800f640 <uxTaskGetSystemState>
 800fb60:	9005      	str	r0, [sp, #20]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800fb62:	2164      	movs	r1, #100	; 0x64
 800fb64:	9803      	ldr	r0, [sp, #12]
 800fb66:	f7f0 faf3 	bl	8000150 <__udivsi3>
 800fb6a:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	d031      	beq.n	800fbd4 <vTaskGetRunTimeStats+0x98>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800fb70:	2300      	movs	r3, #0
 800fb72:	9304      	str	r3, [sp, #16]
 800fb74:	e00d      	b.n	800fb92 <vTaskGetRunTimeStats+0x56>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800fb76:	9b04      	ldr	r3, [sp, #16]
 800fb78:	015b      	lsls	r3, r3, #5
 800fb7a:	18f3      	adds	r3, r6, r3
 800fb7c:	699a      	ldr	r2, [r3, #24]
 800fb7e:	4919      	ldr	r1, [pc, #100]	; (800fbe4 <vTaskGetRunTimeStats+0xa8>)
 800fb80:	f004 fd46 	bl	8014610 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800fb84:	0020      	movs	r0, r4
 800fb86:	f7f0 fac7 	bl	8000118 <strlen>
 800fb8a:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800fb8c:	9b04      	ldr	r3, [sp, #16]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	9304      	str	r3, [sp, #16]
 800fb92:	9a04      	ldr	r2, [sp, #16]
 800fb94:	9b05      	ldr	r3, [sp, #20]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d21c      	bcs.n	800fbd4 <vTaskGetRunTimeStats+0x98>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800fb9a:	9b04      	ldr	r3, [sp, #16]
 800fb9c:	015b      	lsls	r3, r3, #5
 800fb9e:	18f3      	adds	r3, r6, r3
 800fba0:	699d      	ldr	r5, [r3, #24]
 800fba2:	9f03      	ldr	r7, [sp, #12]
 800fba4:	0039      	movs	r1, r7
 800fba6:	0028      	movs	r0, r5
 800fba8:	f7f0 fad2 	bl	8000150 <__udivsi3>
 800fbac:	9001      	str	r0, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fbae:	9b04      	ldr	r3, [sp, #16]
 800fbb0:	015b      	lsls	r3, r3, #5
 800fbb2:	18f3      	adds	r3, r6, r3
 800fbb4:	6859      	ldr	r1, [r3, #4]
 800fbb6:	0020      	movs	r0, r4
 800fbb8:	f7ff faa0 	bl	800f0fc <prvWriteNameToBuffer>
 800fbbc:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800fbbe:	42bd      	cmp	r5, r7
 800fbc0:	d3d9      	bcc.n	800fb76 <vTaskGetRunTimeStats+0x3a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800fbc2:	9b04      	ldr	r3, [sp, #16]
 800fbc4:	015b      	lsls	r3, r3, #5
 800fbc6:	18f3      	adds	r3, r6, r3
 800fbc8:	699a      	ldr	r2, [r3, #24]
 800fbca:	9b01      	ldr	r3, [sp, #4]
 800fbcc:	4906      	ldr	r1, [pc, #24]	; (800fbe8 <vTaskGetRunTimeStats+0xac>)
 800fbce:	f004 fd1f 	bl	8014610 <siprintf>
 800fbd2:	e7d7      	b.n	800fb84 <vTaskGetRunTimeStats+0x48>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fbd4:	0030      	movs	r0, r6
 800fbd6:	f000 fc43 	bl	8010460 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fbda:	b007      	add	sp, #28
 800fbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbde:	46c0      	nop			; (mov r8, r8)
 800fbe0:	20001598 	.word	0x20001598
 800fbe4:	0801b688 	.word	0x0801b688
 800fbe8:	0801b67c 	.word	0x0801b67c

0800fbec <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fbec:	4b05      	ldr	r3, [pc, #20]	; (800fc04 <pvTaskIncrementMutexHeldCount+0x18>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d004      	beq.n	800fbfe <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fbf4:	4b03      	ldr	r3, [pc, #12]	; (800fc04 <pvTaskIncrementMutexHeldCount+0x18>)
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fbfe:	4b01      	ldr	r3, [pc, #4]	; (800fc04 <pvTaskIncrementMutexHeldCount+0x18>)
 800fc00:	6818      	ldr	r0, [r3, #0]
	}
 800fc02:	4770      	bx	lr
 800fc04:	200014fc 	.word	0x200014fc

0800fc08 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fc08:	b570      	push	{r4, r5, r6, lr}
 800fc0a:	0004      	movs	r4, r0
 800fc0c:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800fc0e:	f000 faff 	bl	8010210 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800fc12:	4b20      	ldr	r3, [pc, #128]	; (800fc94 <ulTaskNotifyTake+0x8c>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d106      	bne.n	800fc2a <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800fc1c:	4b1d      	ldr	r3, [pc, #116]	; (800fc94 <ulTaskNotifyTake+0x8c>)
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	235c      	movs	r3, #92	; 0x5c
 800fc22:	2101      	movs	r1, #1
 800fc24:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800fc26:	2d00      	cmp	r5, #0
 800fc28:	d117      	bne.n	800fc5a <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fc2a:	f000 fafd 	bl	8010228 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fc2e:	f000 faef 	bl	8010210 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fc32:	4b18      	ldr	r3, [pc, #96]	; (800fc94 <ulTaskNotifyTake+0x8c>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800fc38:	2d00      	cmp	r5, #0
 800fc3a:	d005      	beq.n	800fc48 <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 800fc3c:	2c00      	cmp	r4, #0
 800fc3e:	d022      	beq.n	800fc86 <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fc40:	4b14      	ldr	r3, [pc, #80]	; (800fc94 <ulTaskNotifyTake+0x8c>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2200      	movs	r2, #0
 800fc46:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800fc48:	4b12      	ldr	r3, [pc, #72]	; (800fc94 <ulTaskNotifyTake+0x8c>)
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	235c      	movs	r3, #92	; 0x5c
 800fc4e:	2100      	movs	r1, #0
 800fc50:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800fc52:	f000 fae9 	bl	8010228 <vPortExitCritical>

		return ulReturn;
	}
 800fc56:	0028      	movs	r0, r5
 800fc58:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fc5a:	4b0e      	ldr	r3, [pc, #56]	; (800fc94 <ulTaskNotifyTake+0x8c>)
 800fc5c:	6818      	ldr	r0, [r3, #0]
 800fc5e:	3004      	adds	r0, #4
 800fc60:	f7fe fdce 	bl	800e800 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800fc64:	1c6b      	adds	r3, r5, #1
 800fc66:	d007      	beq.n	800fc78 <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 800fc68:	4b0b      	ldr	r3, [pc, #44]	; (800fc98 <ulTaskNotifyTake+0x90>)
 800fc6a:	6818      	ldr	r0, [r3, #0]
 800fc6c:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fc6e:	f7ff fa1b 	bl	800f0a8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800fc72:	f000 fac1 	bl	80101f8 <vPortYield>
 800fc76:	e7d8      	b.n	800fc2a <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fc78:	4b06      	ldr	r3, [pc, #24]	; (800fc94 <ulTaskNotifyTake+0x8c>)
 800fc7a:	6819      	ldr	r1, [r3, #0]
 800fc7c:	3104      	adds	r1, #4
 800fc7e:	4807      	ldr	r0, [pc, #28]	; (800fc9c <ulTaskNotifyTake+0x94>)
 800fc80:	f7fe fd9c 	bl	800e7bc <vListInsertEnd>
 800fc84:	e7f5      	b.n	800fc72 <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 800fc86:	4b03      	ldr	r3, [pc, #12]	; (800fc94 <ulTaskNotifyTake+0x8c>)
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	6593      	str	r3, [r2, #88]	; 0x58
 800fc90:	e7da      	b.n	800fc48 <ulTaskNotifyTake+0x40>
 800fc92:	46c0      	nop			; (mov r8, r8)
 800fc94:	200014fc 	.word	0x200014fc
 800fc98:	2000161c 	.word	0x2000161c
 800fc9c:	200015f4 	.word	0x200015f4

0800fca0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fca2:	0004      	movs	r4, r0
 800fca4:	000e      	movs	r6, r1
 800fca6:	0015      	movs	r5, r2
 800fca8:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d016      	beq.n	800fcdc <xTaskGenericNotify+0x3c>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800fcae:	f000 faaf 	bl	8010210 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fcb2:	2f00      	cmp	r7, #0
 800fcb4:	d001      	beq.n	800fcba <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fcb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fcb8:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800fcba:	225c      	movs	r2, #92	; 0x5c
 800fcbc:	5ca3      	ldrb	r3, [r4, r2]
 800fcbe:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800fcc0:	2102      	movs	r1, #2
 800fcc2:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800fcc4:	2d03      	cmp	r5, #3
 800fcc6:	d020      	beq.n	800fd0a <xTaskGenericNotify+0x6a>
 800fcc8:	d80c      	bhi.n	800fce4 <xTaskGenericNotify+0x44>
 800fcca:	2d01      	cmp	r5, #1
 800fccc:	d018      	beq.n	800fd00 <xTaskGenericNotify+0x60>
 800fcce:	2d02      	cmp	r5, #2
 800fcd0:	d106      	bne.n	800fce0 <xTaskGenericNotify+0x40>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fcd2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fcd4:	3201      	adds	r2, #1
 800fcd6:	65a2      	str	r2, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800fcd8:	2501      	movs	r5, #1
					break;
 800fcda:	e00b      	b.n	800fcf4 <xTaskGenericNotify+0x54>
		configASSERT( xTaskToNotify );
 800fcdc:	b672      	cpsid	i
 800fcde:	e7fe      	b.n	800fcde <xTaskGenericNotify+0x3e>
			switch( eAction )
 800fce0:	2501      	movs	r5, #1
 800fce2:	e007      	b.n	800fcf4 <xTaskGenericNotify+0x54>
 800fce4:	2d04      	cmp	r5, #4
 800fce6:	d104      	bne.n	800fcf2 <xTaskGenericNotify+0x52>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800fce8:	2b02      	cmp	r3, #2
 800fcea:	d011      	beq.n	800fd10 <xTaskGenericNotify+0x70>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fcec:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800fcee:	2501      	movs	r5, #1
 800fcf0:	e000      	b.n	800fcf4 <xTaskGenericNotify+0x54>
			switch( eAction )
 800fcf2:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d00d      	beq.n	800fd14 <xTaskGenericNotify+0x74>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fcf8:	f000 fa96 	bl	8010228 <vPortExitCritical>

		return xReturn;
	}
 800fcfc:	0028      	movs	r0, r5
 800fcfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800fd00:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fd02:	4316      	orrs	r6, r2
 800fd04:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800fd06:	2501      	movs	r5, #1
					break;
 800fd08:	e7f4      	b.n	800fcf4 <xTaskGenericNotify+0x54>
					pxTCB->ulNotifiedValue = ulValue;
 800fd0a:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800fd0c:	2501      	movs	r5, #1
					break;
 800fd0e:	e7f1      	b.n	800fcf4 <xTaskGenericNotify+0x54>
						xReturn = pdFAIL;
 800fd10:	2500      	movs	r5, #0
 800fd12:	e7ef      	b.n	800fcf4 <xTaskGenericNotify+0x54>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fd14:	1d26      	adds	r6, r4, #4
 800fd16:	0030      	movs	r0, r6
 800fd18:	f7fe fd72 	bl	800e800 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fd1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fd1e:	4a0e      	ldr	r2, [pc, #56]	; (800fd58 <xTaskGenericNotify+0xb8>)
 800fd20:	6812      	ldr	r2, [r2, #0]
 800fd22:	4293      	cmp	r3, r2
 800fd24:	d901      	bls.n	800fd2a <xTaskGenericNotify+0x8a>
 800fd26:	4a0c      	ldr	r2, [pc, #48]	; (800fd58 <xTaskGenericNotify+0xb8>)
 800fd28:	6013      	str	r3, [r2, #0]
 800fd2a:	0098      	lsls	r0, r3, #2
 800fd2c:	18c0      	adds	r0, r0, r3
 800fd2e:	0080      	lsls	r0, r0, #2
 800fd30:	4b0a      	ldr	r3, [pc, #40]	; (800fd5c <xTaskGenericNotify+0xbc>)
 800fd32:	18c0      	adds	r0, r0, r3
 800fd34:	0031      	movs	r1, r6
 800fd36:	f7fe fd41 	bl	800e7bc <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fd3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d001      	beq.n	800fd44 <xTaskGenericNotify+0xa4>
 800fd40:	b672      	cpsid	i
 800fd42:	e7fe      	b.n	800fd42 <xTaskGenericNotify+0xa2>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fd46:	4b06      	ldr	r3, [pc, #24]	; (800fd60 <xTaskGenericNotify+0xc0>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d9d3      	bls.n	800fcf8 <xTaskGenericNotify+0x58>
					taskYIELD_IF_USING_PREEMPTION();
 800fd50:	f000 fa52 	bl	80101f8 <vPortYield>
 800fd54:	e7d0      	b.n	800fcf8 <xTaskGenericNotify+0x58>
 800fd56:	46c0      	nop			; (mov r8, r8)
 800fd58:	200015ac 	.word	0x200015ac
 800fd5c:	20001508 	.word	0x20001508
 800fd60:	200014fc 	.word	0x200014fc

0800fd64 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fd64:	4b06      	ldr	r3, [pc, #24]	; (800fd80 <prvGetNextExpireTime+0x1c>)
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	6813      	ldr	r3, [r2, #0]
 800fd6a:	4259      	negs	r1, r3
 800fd6c:	414b      	adcs	r3, r1
 800fd6e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d102      	bne.n	800fd7a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd74:	68d3      	ldr	r3, [r2, #12]
 800fd76:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
	}

	return xNextExpireTime;
}
 800fd78:	4770      	bx	lr
		xNextExpireTime = ( TickType_t ) 0U;
 800fd7a:	2000      	movs	r0, #0
	return xNextExpireTime;
 800fd7c:	e7fc      	b.n	800fd78 <prvGetNextExpireTime+0x14>
 800fd7e:	46c0      	nop			; (mov r8, r8)
 800fd80:	20001624 	.word	0x20001624

0800fd84 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fd84:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fd86:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd88:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fd8a:	4291      	cmp	r1, r2
 800fd8c:	d80c      	bhi.n	800fda8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fd8e:	1ad2      	subs	r2, r2, r3
 800fd90:	6983      	ldr	r3, [r0, #24]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d301      	bcc.n	800fd9a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fd96:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800fd98:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fd9a:	1d01      	adds	r1, r0, #4
 800fd9c:	4b09      	ldr	r3, [pc, #36]	; (800fdc4 <prvInsertTimerInActiveList+0x40>)
 800fd9e:	6818      	ldr	r0, [r3, #0]
 800fda0:	f7fe fd17 	bl	800e7d2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fda4:	2000      	movs	r0, #0
 800fda6:	e7f7      	b.n	800fd98 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d201      	bcs.n	800fdb0 <prvInsertTimerInActiveList+0x2c>
 800fdac:	4299      	cmp	r1, r3
 800fdae:	d206      	bcs.n	800fdbe <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fdb0:	1d01      	adds	r1, r0, #4
 800fdb2:	4b05      	ldr	r3, [pc, #20]	; (800fdc8 <prvInsertTimerInActiveList+0x44>)
 800fdb4:	6818      	ldr	r0, [r3, #0]
 800fdb6:	f7fe fd0c 	bl	800e7d2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fdba:	2000      	movs	r0, #0
 800fdbc:	e7ec      	b.n	800fd98 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800fdbe:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800fdc0:	e7ea      	b.n	800fd98 <prvInsertTimerInActiveList+0x14>
 800fdc2:	46c0      	nop			; (mov r8, r8)
 800fdc4:	20001628 	.word	0x20001628
 800fdc8:	20001624 	.word	0x20001624

0800fdcc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fdcc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fdce:	f000 fa1f 	bl	8010210 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fdd2:	4b11      	ldr	r3, [pc, #68]	; (800fe18 <prvCheckForValidListAndQueue+0x4c>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d002      	beq.n	800fde0 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fdda:	f000 fa25 	bl	8010228 <vPortExitCritical>
}
 800fdde:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800fde0:	4d0e      	ldr	r5, [pc, #56]	; (800fe1c <prvCheckForValidListAndQueue+0x50>)
 800fde2:	0028      	movs	r0, r5
 800fde4:	f7fe fcdc 	bl	800e7a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fde8:	4c0d      	ldr	r4, [pc, #52]	; (800fe20 <prvCheckForValidListAndQueue+0x54>)
 800fdea:	0020      	movs	r0, r4
 800fdec:	f7fe fcd8 	bl	800e7a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fdf0:	4b0c      	ldr	r3, [pc, #48]	; (800fe24 <prvCheckForValidListAndQueue+0x58>)
 800fdf2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fdf4:	4b0c      	ldr	r3, [pc, #48]	; (800fe28 <prvCheckForValidListAndQueue+0x5c>)
 800fdf6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	2110      	movs	r1, #16
 800fdfc:	2004      	movs	r0, #4
 800fdfe:	f7fe fdf1 	bl	800e9e4 <xQueueGenericCreate>
 800fe02:	4b05      	ldr	r3, [pc, #20]	; (800fe18 <prvCheckForValidListAndQueue+0x4c>)
 800fe04:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800fe06:	2800      	cmp	r0, #0
 800fe08:	d003      	beq.n	800fe12 <prvCheckForValidListAndQueue+0x46>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fe0a:	4908      	ldr	r1, [pc, #32]	; (800fe2c <prvCheckForValidListAndQueue+0x60>)
 800fe0c:	f7ff f824 	bl	800ee58 <vQueueAddToRegistry>
 800fe10:	e7e3      	b.n	800fdda <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 800fe12:	b672      	cpsid	i
 800fe14:	e7fe      	b.n	800fe14 <prvCheckForValidListAndQueue+0x48>
 800fe16:	46c0      	nop			; (mov r8, r8)
 800fe18:	20001658 	.word	0x20001658
 800fe1c:	2000162c 	.word	0x2000162c
 800fe20:	20001640 	.word	0x20001640
 800fe24:	20001624 	.word	0x20001624
 800fe28:	20001628 	.word	0x20001628
 800fe2c:	0801b6a8 	.word	0x0801b6a8

0800fe30 <xTimerCreateTimerTask>:
{
 800fe30:	b500      	push	{lr}
 800fe32:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800fe34:	f7ff ffca 	bl	800fdcc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800fe38:	4b0a      	ldr	r3, [pc, #40]	; (800fe64 <xTimerCreateTimerTask+0x34>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00d      	beq.n	800fe5c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800fe40:	2300      	movs	r3, #0
 800fe42:	9303      	str	r3, [sp, #12]
 800fe44:	9302      	str	r3, [sp, #8]
 800fe46:	9301      	str	r3, [sp, #4]
 800fe48:	3303      	adds	r3, #3
 800fe4a:	9300      	str	r3, [sp, #0]
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	22a0      	movs	r2, #160	; 0xa0
 800fe50:	4905      	ldr	r1, [pc, #20]	; (800fe68 <xTimerCreateTimerTask+0x38>)
 800fe52:	4806      	ldr	r0, [pc, #24]	; (800fe6c <xTimerCreateTimerTask+0x3c>)
 800fe54:	f7ff f964 	bl	800f120 <xTaskGenericCreate>
	configASSERT( xReturn );
 800fe58:	2800      	cmp	r0, #0
 800fe5a:	d101      	bne.n	800fe60 <xTimerCreateTimerTask+0x30>
 800fe5c:	b672      	cpsid	i
 800fe5e:	e7fe      	b.n	800fe5e <xTimerCreateTimerTask+0x2e>
}
 800fe60:	b005      	add	sp, #20
 800fe62:	bd00      	pop	{pc}
 800fe64:	20001658 	.word	0x20001658
 800fe68:	0801b6b0 	.word	0x0801b6b0
 800fe6c:	08010115 	.word	0x08010115

0800fe70 <xTimerCreate>:
{
 800fe70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe72:	46c6      	mov	lr, r8
 800fe74:	b500      	push	{lr}
 800fe76:	4680      	mov	r8, r0
 800fe78:	000d      	movs	r5, r1
 800fe7a:	0017      	movs	r7, r2
 800fe7c:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800fe7e:	2900      	cmp	r1, #0
 800fe80:	d011      	beq.n	800fea6 <xTimerCreate+0x36>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800fe82:	202c      	movs	r0, #44	; 0x2c
 800fe84:	f000 fa78 	bl	8010378 <pvPortMalloc>
 800fe88:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800fe8a:	d00d      	beq.n	800fea8 <xTimerCreate+0x38>
			prvCheckForValidListAndQueue();
 800fe8c:	f7ff ff9e 	bl	800fdcc <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800fe90:	4643      	mov	r3, r8
 800fe92:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fe94:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800fe96:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800fe98:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fe9a:	9b06      	ldr	r3, [sp, #24]
 800fe9c:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fe9e:	1d20      	adds	r0, r4, #4
 800fea0:	f7fe fc89 	bl	800e7b6 <vListInitialiseItem>
			traceTIMER_CREATE( pxNewTimer );
 800fea4:	e000      	b.n	800fea8 <xTimerCreate+0x38>
		pxNewTimer = NULL;
 800fea6:	2400      	movs	r4, #0
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800fea8:	2d00      	cmp	r5, #0
 800feaa:	d101      	bne.n	800feb0 <xTimerCreate+0x40>
 800feac:	b672      	cpsid	i
 800feae:	e7fe      	b.n	800feae <xTimerCreate+0x3e>
}
 800feb0:	0020      	movs	r0, r4
 800feb2:	bc80      	pop	{r7}
 800feb4:	46b8      	mov	r8, r7
 800feb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800feb8 <xTimerGenericCommand>:
{
 800feb8:	b530      	push	{r4, r5, lr}
 800feba:	b085      	sub	sp, #20
 800febc:	0004      	movs	r4, r0
 800febe:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800fec0:	4b12      	ldr	r3, [pc, #72]	; (800ff0c <xTimerGenericCommand+0x54>)
 800fec2:	6818      	ldr	r0, [r3, #0]
 800fec4:	2800      	cmp	r0, #0
 800fec6:	d01f      	beq.n	800ff08 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800fec8:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800feca:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fecc:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fece:	2905      	cmp	r1, #5
 800fed0:	dc13      	bgt.n	800fefa <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fed2:	f7ff fd4b 	bl	800f96c <xTaskGetSchedulerState>
 800fed6:	2802      	cmp	r0, #2
 800fed8:	d007      	beq.n	800feea <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800feda:	4b0c      	ldr	r3, [pc, #48]	; (800ff0c <xTimerGenericCommand+0x54>)
 800fedc:	6818      	ldr	r0, [r3, #0]
 800fede:	2300      	movs	r3, #0
 800fee0:	2200      	movs	r2, #0
 800fee2:	4669      	mov	r1, sp
 800fee4:	f7fe fdbb 	bl	800ea5e <xQueueGenericSend>
 800fee8:	e00c      	b.n	800ff04 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800feea:	4b08      	ldr	r3, [pc, #32]	; (800ff0c <xTimerGenericCommand+0x54>)
 800feec:	6818      	ldr	r0, [r3, #0]
 800feee:	2300      	movs	r3, #0
 800fef0:	9a08      	ldr	r2, [sp, #32]
 800fef2:	4669      	mov	r1, sp
 800fef4:	f7fe fdb3 	bl	800ea5e <xQueueGenericSend>
 800fef8:	e004      	b.n	800ff04 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fefa:	2300      	movs	r3, #0
 800fefc:	002a      	movs	r2, r5
 800fefe:	4669      	mov	r1, sp
 800ff00:	f7fe fe3b 	bl	800eb7a <xQueueGenericSendFromISR>
}
 800ff04:	b005      	add	sp, #20
 800ff06:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800ff08:	2000      	movs	r0, #0
	return xReturn;
 800ff0a:	e7fb      	b.n	800ff04 <xTimerGenericCommand+0x4c>
 800ff0c:	20001658 	.word	0x20001658

0800ff10 <prvSwitchTimerLists>:
{
 800ff10:	b570      	push	{r4, r5, r6, lr}
 800ff12:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff14:	4b17      	ldr	r3, [pc, #92]	; (800ff74 <prvSwitchTimerLists+0x64>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	2a00      	cmp	r2, #0
 800ff1c:	d023      	beq.n	800ff66 <prvSwitchTimerLists+0x56>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff22:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff24:	1d25      	adds	r5, r4, #4
 800ff26:	0028      	movs	r0, r5
 800ff28:	f7fe fc6a 	bl	800e800 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff2c:	0020      	movs	r0, r4
 800ff2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff30:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ff32:	69e3      	ldr	r3, [r4, #28]
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d1ed      	bne.n	800ff14 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ff38:	69a3      	ldr	r3, [r4, #24]
 800ff3a:	199b      	adds	r3, r3, r6
			if( xReloadTime > xNextExpireTime )
 800ff3c:	429e      	cmp	r6, r3
 800ff3e:	d207      	bcs.n	800ff50 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ff40:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff42:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff44:	4b0b      	ldr	r3, [pc, #44]	; (800ff74 <prvSwitchTimerLists+0x64>)
 800ff46:	6818      	ldr	r0, [r3, #0]
 800ff48:	0029      	movs	r1, r5
 800ff4a:	f7fe fc42 	bl	800e7d2 <vListInsert>
 800ff4e:	e7e1      	b.n	800ff14 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff50:	2300      	movs	r3, #0
 800ff52:	9300      	str	r3, [sp, #0]
 800ff54:	0032      	movs	r2, r6
 800ff56:	2100      	movs	r1, #0
 800ff58:	0020      	movs	r0, r4
 800ff5a:	f7ff ffad 	bl	800feb8 <xTimerGenericCommand>
				configASSERT( xResult );
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	d1d8      	bne.n	800ff14 <prvSwitchTimerLists+0x4>
 800ff62:	b672      	cpsid	i
 800ff64:	e7fe      	b.n	800ff64 <prvSwitchTimerLists+0x54>
	pxCurrentTimerList = pxOverflowTimerList;
 800ff66:	4a04      	ldr	r2, [pc, #16]	; (800ff78 <prvSwitchTimerLists+0x68>)
 800ff68:	4902      	ldr	r1, [pc, #8]	; (800ff74 <prvSwitchTimerLists+0x64>)
 800ff6a:	6810      	ldr	r0, [r2, #0]
 800ff6c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800ff6e:	6013      	str	r3, [r2, #0]
}
 800ff70:	b002      	add	sp, #8
 800ff72:	bd70      	pop	{r4, r5, r6, pc}
 800ff74:	20001624 	.word	0x20001624
 800ff78:	20001628 	.word	0x20001628

0800ff7c <prvSampleTimeNow>:
{
 800ff7c:	b570      	push	{r4, r5, r6, lr}
 800ff7e:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
 800ff80:	f7ff f9fc 	bl	800f37c <xTaskGetTickCount>
 800ff84:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800ff86:	4b07      	ldr	r3, [pc, #28]	; (800ffa4 <prvSampleTimeNow+0x28>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4283      	cmp	r3, r0
 800ff8c:	d805      	bhi.n	800ff9a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800ff92:	4b04      	ldr	r3, [pc, #16]	; (800ffa4 <prvSampleTimeNow+0x28>)
 800ff94:	601c      	str	r4, [r3, #0]
}
 800ff96:	0020      	movs	r0, r4
 800ff98:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
 800ff9a:	f7ff ffb9 	bl	800ff10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	602b      	str	r3, [r5, #0]
 800ffa2:	e7f6      	b.n	800ff92 <prvSampleTimeNow+0x16>
 800ffa4:	20001654 	.word	0x20001654

0800ffa8 <prvProcessExpiredTimer>:
{
 800ffa8:	b570      	push	{r4, r5, r6, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	0006      	movs	r6, r0
 800ffae:	000d      	movs	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ffb0:	4b11      	ldr	r3, [pc, #68]	; (800fff8 <prvProcessExpiredTimer+0x50>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	68db      	ldr	r3, [r3, #12]
 800ffb6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ffb8:	1d20      	adds	r0, r4, #4
 800ffba:	f7fe fc21 	bl	800e800 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ffbe:	69e3      	ldr	r3, [r4, #28]
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d004      	beq.n	800ffce <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffc6:	0020      	movs	r0, r4
 800ffc8:	4798      	blx	r3
}
 800ffca:	b002      	add	sp, #8
 800ffcc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800ffce:	69a3      	ldr	r3, [r4, #24]
 800ffd0:	1999      	adds	r1, r3, r6
 800ffd2:	0033      	movs	r3, r6
 800ffd4:	002a      	movs	r2, r5
 800ffd6:	0020      	movs	r0, r4
 800ffd8:	f7ff fed4 	bl	800fd84 <prvInsertTimerInActiveList>
 800ffdc:	2801      	cmp	r0, #1
 800ffde:	d1f1      	bne.n	800ffc4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	9300      	str	r3, [sp, #0]
 800ffe4:	0032      	movs	r2, r6
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	0020      	movs	r0, r4
 800ffea:	f7ff ff65 	bl	800feb8 <xTimerGenericCommand>
			configASSERT( xResult );
 800ffee:	2800      	cmp	r0, #0
 800fff0:	d1e8      	bne.n	800ffc4 <prvProcessExpiredTimer+0x1c>
 800fff2:	b672      	cpsid	i
 800fff4:	e7fe      	b.n	800fff4 <prvProcessExpiredTimer+0x4c>
 800fff6:	46c0      	nop			; (mov r8, r8)
 800fff8:	20001624 	.word	0x20001624

0800fffc <prvProcessTimerOrBlockTask>:
{
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	0004      	movs	r4, r0
 8010002:	000e      	movs	r6, r1
	vTaskSuspendAll();
 8010004:	f7ff f9b2 	bl	800f36c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010008:	a801      	add	r0, sp, #4
 801000a:	f7ff ffb7 	bl	800ff7c <prvSampleTimeNow>
 801000e:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010010:	9b01      	ldr	r3, [sp, #4]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d118      	bne.n	8010048 <prvProcessTimerOrBlockTask+0x4c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010016:	2e00      	cmp	r6, #0
 8010018:	d101      	bne.n	801001e <prvProcessTimerOrBlockTask+0x22>
 801001a:	42a0      	cmp	r0, r4
 801001c:	d20a      	bcs.n	8010034 <prvProcessTimerOrBlockTask+0x38>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 801001e:	1b61      	subs	r1, r4, r5
 8010020:	4b0b      	ldr	r3, [pc, #44]	; (8010050 <prvProcessTimerOrBlockTask+0x54>)
 8010022:	6818      	ldr	r0, [r3, #0]
 8010024:	f7fe ff2a 	bl	800ee7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010028:	f7ff fa3e 	bl	800f4a8 <xTaskResumeAll>
 801002c:	2800      	cmp	r0, #0
 801002e:	d008      	beq.n	8010042 <prvProcessTimerOrBlockTask+0x46>
}
 8010030:	b002      	add	sp, #8
 8010032:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 8010034:	f7ff fa38 	bl	800f4a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010038:	0029      	movs	r1, r5
 801003a:	0020      	movs	r0, r4
 801003c:	f7ff ffb4 	bl	800ffa8 <prvProcessExpiredTimer>
 8010040:	e7f6      	b.n	8010030 <prvProcessTimerOrBlockTask+0x34>
					portYIELD_WITHIN_API();
 8010042:	f000 f8d9 	bl	80101f8 <vPortYield>
 8010046:	e7f3      	b.n	8010030 <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 8010048:	f7ff fa2e 	bl	800f4a8 <xTaskResumeAll>
}
 801004c:	e7f0      	b.n	8010030 <prvProcessTimerOrBlockTask+0x34>
 801004e:	46c0      	nop			; (mov r8, r8)
 8010050:	20001658 	.word	0x20001658

08010054 <prvProcessReceivedCommands>:
{
 8010054:	b510      	push	{r4, lr}
 8010056:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010058:	e006      	b.n	8010068 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801005a:	9b05      	ldr	r3, [sp, #20]
 801005c:	9907      	ldr	r1, [sp, #28]
 801005e:	9806      	ldr	r0, [sp, #24]
 8010060:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010062:	9b04      	ldr	r3, [sp, #16]
 8010064:	2b00      	cmp	r3, #0
 8010066:	da0c      	bge.n	8010082 <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010068:	4b28      	ldr	r3, [pc, #160]	; (801010c <prvProcessReceivedCommands+0xb8>)
 801006a:	6818      	ldr	r0, [r3, #0]
 801006c:	2300      	movs	r3, #0
 801006e:	2200      	movs	r2, #0
 8010070:	a904      	add	r1, sp, #16
 8010072:	f7fe fe0f 	bl	800ec94 <xQueueGenericReceive>
 8010076:	2800      	cmp	r0, #0
 8010078:	d046      	beq.n	8010108 <prvProcessReceivedCommands+0xb4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801007a:	9b04      	ldr	r3, [sp, #16]
 801007c:	2b00      	cmp	r3, #0
 801007e:	daf0      	bge.n	8010062 <prvProcessReceivedCommands+0xe>
 8010080:	e7eb      	b.n	801005a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010082:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8010084:	6963      	ldr	r3, [r4, #20]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d002      	beq.n	8010090 <prvProcessReceivedCommands+0x3c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801008a:	1d20      	adds	r0, r4, #4
 801008c:	f7fe fbb8 	bl	800e800 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010090:	a803      	add	r0, sp, #12
 8010092:	f7ff ff73 	bl	800ff7c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010096:	9b04      	ldr	r3, [sp, #16]
 8010098:	2b09      	cmp	r3, #9
 801009a:	d8e5      	bhi.n	8010068 <prvProcessReceivedCommands+0x14>
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	4a1c      	ldr	r2, [pc, #112]	; (8010110 <prvProcessReceivedCommands+0xbc>)
 80100a0:	58d3      	ldr	r3, [r2, r3]
 80100a2:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 80100a4:	9b05      	ldr	r3, [sp, #20]
 80100a6:	69a2      	ldr	r2, [r4, #24]
 80100a8:	4694      	mov	ip, r2
 80100aa:	4463      	add	r3, ip
 80100ac:	0019      	movs	r1, r3
 80100ae:	9b05      	ldr	r3, [sp, #20]
 80100b0:	0002      	movs	r2, r0
 80100b2:	0020      	movs	r0, r4
 80100b4:	f7ff fe66 	bl	800fd84 <prvInsertTimerInActiveList>
 80100b8:	2801      	cmp	r0, #1
 80100ba:	d1d5      	bne.n	8010068 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80100bc:	0020      	movs	r0, r4
 80100be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100c0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80100c2:	69e3      	ldr	r3, [r4, #28]
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d1cf      	bne.n	8010068 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80100c8:	9b05      	ldr	r3, [sp, #20]
 80100ca:	69a1      	ldr	r1, [r4, #24]
 80100cc:	468c      	mov	ip, r1
 80100ce:	4463      	add	r3, ip
 80100d0:	001a      	movs	r2, r3
 80100d2:	2300      	movs	r3, #0
 80100d4:	9300      	str	r3, [sp, #0]
 80100d6:	2100      	movs	r1, #0
 80100d8:	0020      	movs	r0, r4
 80100da:	f7ff feed 	bl	800feb8 <xTimerGenericCommand>
							configASSERT( xResult );
 80100de:	2800      	cmp	r0, #0
 80100e0:	d1c2      	bne.n	8010068 <prvProcessReceivedCommands+0x14>
 80100e2:	b672      	cpsid	i
 80100e4:	e7fe      	b.n	80100e4 <prvProcessReceivedCommands+0x90>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80100e6:	9905      	ldr	r1, [sp, #20]
 80100e8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80100ea:	2900      	cmp	r1, #0
 80100ec:	d006      	beq.n	80100fc <prvProcessReceivedCommands+0xa8>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80100ee:	1809      	adds	r1, r1, r0
 80100f0:	0003      	movs	r3, r0
 80100f2:	0002      	movs	r2, r0
 80100f4:	0020      	movs	r0, r4
 80100f6:	f7ff fe45 	bl	800fd84 <prvInsertTimerInActiveList>
					break;
 80100fa:	e7b5      	b.n	8010068 <prvProcessReceivedCommands+0x14>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80100fc:	b672      	cpsid	i
 80100fe:	e7fe      	b.n	80100fe <prvProcessReceivedCommands+0xaa>
					vPortFree( pxTimer );
 8010100:	0020      	movs	r0, r4
 8010102:	f000 f9ad 	bl	8010460 <vPortFree>
					break;
 8010106:	e7af      	b.n	8010068 <prvProcessReceivedCommands+0x14>
}
 8010108:	b008      	add	sp, #32
 801010a:	bd10      	pop	{r4, pc}
 801010c:	20001658 	.word	0x20001658
 8010110:	0801b6b8 	.word	0x0801b6b8

08010114 <prvTimerTask>:
{
 8010114:	b500      	push	{lr}
 8010116:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010118:	a801      	add	r0, sp, #4
 801011a:	f7ff fe23 	bl	800fd64 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801011e:	9901      	ldr	r1, [sp, #4]
 8010120:	f7ff ff6c 	bl	800fffc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8010124:	f7ff ff96 	bl	8010054 <prvProcessReceivedCommands>
	for( ;; )
 8010128:	e7f6      	b.n	8010118 <prvTimerTask+0x4>

0801012a <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801012a:	b510      	push	{r4, lr}
 801012c:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 801012e:	d006      	beq.n	801013e <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8010130:	f000 f86e 	bl	8010210 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010134:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8010136:	f000 f877 	bl	8010228 <vPortExitCritical>

	return pvReturn;
}
 801013a:	0020      	movs	r0, r4
 801013c:	bd10      	pop	{r4, pc}
	configASSERT( xTimer );
 801013e:	b672      	cpsid	i
 8010140:	e7fe      	b.n	8010140 <pvTimerGetTimerID+0x16>
	...

08010144 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010144:	4b03      	ldr	r3, [pc, #12]	; (8010154 <prvTaskExitError+0x10>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	3301      	adds	r3, #1
 801014a:	d001      	beq.n	8010150 <prvTaskExitError+0xc>
 801014c:	b672      	cpsid	i
 801014e:	e7fe      	b.n	801014e <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8010150:	b672      	cpsid	i
	for( ;; );
 8010152:	e7fe      	b.n	8010152 <prvTaskExitError+0xe>
 8010154:	200000dc 	.word	0x200000dc

08010158 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010158:	4a06      	ldr	r2, [pc, #24]	; (8010174 <pxCurrentTCBConst2>)
 801015a:	6813      	ldr	r3, [r2, #0]
 801015c:	6818      	ldr	r0, [r3, #0]
 801015e:	3020      	adds	r0, #32
 8010160:	f380 8809 	msr	PSP, r0
 8010164:	2002      	movs	r0, #2
 8010166:	f380 8814 	msr	CONTROL, r0
 801016a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 801016c:	46ae      	mov	lr, r5
 801016e:	b662      	cpsie	i
 8010170:	bd00      	pop	{pc}
 8010172:	46c0      	nop			; (mov r8, r8)

08010174 <pxCurrentTCBConst2>:
 8010174:	200014fc 	.word	0x200014fc

08010178 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8010178:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801017a:	4b06      	ldr	r3, [pc, #24]	; (8010194 <prvSetupTimerInterrupt+0x1c>)
 801017c:	6818      	ldr	r0, [r3, #0]
 801017e:	21fa      	movs	r1, #250	; 0xfa
 8010180:	0089      	lsls	r1, r1, #2
 8010182:	f7ef ffe5 	bl	8000150 <__udivsi3>
 8010186:	3801      	subs	r0, #1
 8010188:	4b03      	ldr	r3, [pc, #12]	; (8010198 <prvSetupTimerInterrupt+0x20>)
 801018a:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801018c:	4b03      	ldr	r3, [pc, #12]	; (801019c <prvSetupTimerInterrupt+0x24>)
 801018e:	2207      	movs	r2, #7
 8010190:	601a      	str	r2, [r3, #0]
}
 8010192:	bd10      	pop	{r4, pc}
 8010194:	200000c8 	.word	0x200000c8
 8010198:	e000e014 	.word	0xe000e014
 801019c:	e000e010 	.word	0xe000e010

080101a0 <pxPortInitialiseStack>:
{
 80101a0:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80101a2:	1f03      	subs	r3, r0, #4
 80101a4:	2480      	movs	r4, #128	; 0x80
 80101a6:	0464      	lsls	r4, r4, #17
 80101a8:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80101aa:	3b04      	subs	r3, #4
 80101ac:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80101ae:	3b04      	subs	r3, #4
 80101b0:	4902      	ldr	r1, [pc, #8]	; (80101bc <pxPortInitialiseStack+0x1c>)
 80101b2:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80101b4:	3b14      	subs	r3, #20
 80101b6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80101b8:	3840      	subs	r0, #64	; 0x40
}
 80101ba:	bd10      	pop	{r4, pc}
 80101bc:	08010145 	.word	0x08010145

080101c0 <SVC_Handler>:
}
 80101c0:	4770      	bx	lr
	...

080101c4 <xPortStartScheduler>:
{
 80101c4:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80101c6:	4b0a      	ldr	r3, [pc, #40]	; (80101f0 <xPortStartScheduler+0x2c>)
 80101c8:	6819      	ldr	r1, [r3, #0]
 80101ca:	22ff      	movs	r2, #255	; 0xff
 80101cc:	0412      	lsls	r2, r2, #16
 80101ce:	430a      	orrs	r2, r1
 80101d0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80101d2:	6819      	ldr	r1, [r3, #0]
 80101d4:	22ff      	movs	r2, #255	; 0xff
 80101d6:	0612      	lsls	r2, r2, #24
 80101d8:	430a      	orrs	r2, r1
 80101da:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 80101dc:	f7ff ffcc 	bl	8010178 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80101e0:	4b04      	ldr	r3, [pc, #16]	; (80101f4 <xPortStartScheduler+0x30>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 80101e6:	f7ff ffb7 	bl	8010158 <vPortStartFirstTask>
	prvTaskExitError();
 80101ea:	f7ff ffab 	bl	8010144 <prvTaskExitError>
 80101ee:	46c0      	nop			; (mov r8, r8)
 80101f0:	e000ed20 	.word	0xe000ed20
 80101f4:	200000dc 	.word	0x200000dc

080101f8 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80101f8:	4b04      	ldr	r3, [pc, #16]	; (801020c <vPortYield+0x14>)
 80101fa:	2280      	movs	r2, #128	; 0x80
 80101fc:	0552      	lsls	r2, r2, #21
 80101fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010200:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010204:	f3bf 8f6f 	isb	sy
}
 8010208:	4770      	bx	lr
 801020a:	46c0      	nop			; (mov r8, r8)
 801020c:	e000ed04 	.word	0xe000ed04

08010210 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010210:	b672      	cpsid	i
    uxCriticalNesting++;
 8010212:	4a04      	ldr	r2, [pc, #16]	; (8010224 <vPortEnterCritical+0x14>)
 8010214:	6813      	ldr	r3, [r2, #0]
 8010216:	3301      	adds	r3, #1
 8010218:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 801021a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801021e:	f3bf 8f6f 	isb	sy
}
 8010222:	4770      	bx	lr
 8010224:	200000dc 	.word	0x200000dc

08010228 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010228:	4b06      	ldr	r3, [pc, #24]	; (8010244 <vPortExitCritical+0x1c>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d101      	bne.n	8010234 <vPortExitCritical+0xc>
 8010230:	b672      	cpsid	i
 8010232:	e7fe      	b.n	8010232 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8010234:	3b01      	subs	r3, #1
 8010236:	4a03      	ldr	r2, [pc, #12]	; (8010244 <vPortExitCritical+0x1c>)
 8010238:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 801023a:	2b00      	cmp	r3, #0
 801023c:	d100      	bne.n	8010240 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 801023e:	b662      	cpsie	i
}
 8010240:	4770      	bx	lr
 8010242:	46c0      	nop			; (mov r8, r8)
 8010244:	200000dc 	.word	0x200000dc

08010248 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8010248:	f3ef 8010 	mrs	r0, PRIMASK
 801024c:	b672      	cpsid	i
 801024e:	4770      	bx	lr
}
 8010250:	2000      	movs	r0, #0

08010252 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8010252:	f380 8810 	msr	PRIMASK, r0
 8010256:	4770      	bx	lr

08010258 <PendSV_Handler>:
	__asm volatile
 8010258:	f3ef 8009 	mrs	r0, PSP
 801025c:	4b0e      	ldr	r3, [pc, #56]	; (8010298 <pxCurrentTCBConst>)
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	3820      	subs	r0, #32
 8010262:	6010      	str	r0, [r2, #0]
 8010264:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010266:	4644      	mov	r4, r8
 8010268:	464d      	mov	r5, r9
 801026a:	4656      	mov	r6, sl
 801026c:	465f      	mov	r7, fp
 801026e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010270:	b508      	push	{r3, lr}
 8010272:	b672      	cpsid	i
 8010274:	f7ff fa34 	bl	800f6e0 <vTaskSwitchContext>
 8010278:	b662      	cpsie	i
 801027a:	bc0c      	pop	{r2, r3}
 801027c:	6811      	ldr	r1, [r2, #0]
 801027e:	6808      	ldr	r0, [r1, #0]
 8010280:	3010      	adds	r0, #16
 8010282:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010284:	46a0      	mov	r8, r4
 8010286:	46a9      	mov	r9, r5
 8010288:	46b2      	mov	sl, r6
 801028a:	46bb      	mov	fp, r7
 801028c:	f380 8809 	msr	PSP, r0
 8010290:	3820      	subs	r0, #32
 8010292:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010294:	4718      	bx	r3
 8010296:	46c0      	nop			; (mov r8, r8)

08010298 <pxCurrentTCBConst>:
 8010298:	200014fc 	.word	0x200014fc

0801029c <xPortSysTickHandler>:
{
 801029c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801029e:	f7ff ffd3 	bl	8010248 <ulSetInterruptMaskFromISR>
 80102a2:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 80102a4:	f7ff f876 	bl	800f394 <xTaskIncrementTick>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	d003      	beq.n	80102b4 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80102ac:	4b03      	ldr	r3, [pc, #12]	; (80102bc <xPortSysTickHandler+0x20>)
 80102ae:	2280      	movs	r2, #128	; 0x80
 80102b0:	0552      	lsls	r2, r2, #21
 80102b2:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80102b4:	0020      	movs	r0, r4
 80102b6:	f7ff ffcc 	bl	8010252 <vClearInterruptMaskFromISR>
}
 80102ba:	bd10      	pop	{r4, pc}
 80102bc:	e000ed04 	.word	0xe000ed04

080102c0 <prvHeapInit>:
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 80102c0:	4a11      	ldr	r2, [pc, #68]	; (8010308 <prvHeapInit+0x48>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80102c2:	0753      	lsls	r3, r2, #29
 80102c4:	d01e      	beq.n	8010304 <prvHeapInit+0x44>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 80102c6:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80102c8:	2307      	movs	r3, #7
 80102ca:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80102cc:	4b0f      	ldr	r3, [pc, #60]	; (801030c <prvHeapInit+0x4c>)
 80102ce:	1a5b      	subs	r3, r3, r1
 80102d0:	189b      	adds	r3, r3, r2
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80102d2:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80102d4:	480e      	ldr	r0, [pc, #56]	; (8010310 <prvHeapInit+0x50>)
 80102d6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80102d8:	2100      	movs	r1, #0
 80102da:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 80102dc:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 80102de:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80102e0:	2007      	movs	r0, #7
 80102e2:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 80102e4:	480b      	ldr	r0, [pc, #44]	; (8010314 <prvHeapInit+0x54>)
 80102e6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80102e8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80102ea:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80102ec:	1a99      	subs	r1, r3, r2
 80102ee:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80102f0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102f2:	4b09      	ldr	r3, [pc, #36]	; (8010318 <prvHeapInit+0x58>)
 80102f4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102f6:	4b09      	ldr	r3, [pc, #36]	; (801031c <prvHeapInit+0x5c>)
 80102f8:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80102fa:	4b09      	ldr	r3, [pc, #36]	; (8010320 <prvHeapInit+0x60>)
 80102fc:	2280      	movs	r2, #128	; 0x80
 80102fe:	0612      	lsls	r2, r2, #24
 8010300:	601a      	str	r2, [r3, #0]
}
 8010302:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010304:	4b01      	ldr	r3, [pc, #4]	; (801030c <prvHeapInit+0x4c>)
 8010306:	e7e5      	b.n	80102d4 <prvHeapInit+0x14>
 8010308:	20001660 	.word	0x20001660
 801030c:	00004a38 	.word	0x00004a38
 8010310:	200060a4 	.word	0x200060a4
 8010314:	2000165c 	.word	0x2000165c
 8010318:	200060a0 	.word	0x200060a0
 801031c:	2000609c 	.word	0x2000609c
 8010320:	20006098 	.word	0x20006098

08010324 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010324:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010326:	4b12      	ldr	r3, [pc, #72]	; (8010370 <prvInsertBlockIntoFreeList+0x4c>)
 8010328:	001a      	movs	r2, r3
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4283      	cmp	r3, r0
 801032e:	d3fb      	bcc.n	8010328 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010330:	6851      	ldr	r1, [r2, #4]
 8010332:	1854      	adds	r4, r2, r1
 8010334:	4284      	cmp	r4, r0
 8010336:	d008      	beq.n	801034a <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010338:	6841      	ldr	r1, [r0, #4]
 801033a:	1844      	adds	r4, r0, r1
 801033c:	42a3      	cmp	r3, r4
 801033e:	d009      	beq.n	8010354 <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010340:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010342:	4290      	cmp	r0, r2
 8010344:	d000      	beq.n	8010348 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010346:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010348:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801034a:	6840      	ldr	r0, [r0, #4]
 801034c:	1809      	adds	r1, r1, r0
 801034e:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8010350:	0010      	movs	r0, r2
 8010352:	e7f1      	b.n	8010338 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010354:	4c07      	ldr	r4, [pc, #28]	; (8010374 <prvInsertBlockIntoFreeList+0x50>)
 8010356:	6824      	ldr	r4, [r4, #0]
 8010358:	42a3      	cmp	r3, r4
 801035a:	d006      	beq.n	801036a <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	18c9      	adds	r1, r1, r3
 8010360:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010362:	6813      	ldr	r3, [r2, #0]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	6003      	str	r3, [r0, #0]
 8010368:	e7eb      	b.n	8010342 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801036a:	6004      	str	r4, [r0, #0]
 801036c:	e7e9      	b.n	8010342 <prvInsertBlockIntoFreeList+0x1e>
 801036e:	46c0      	nop			; (mov r8, r8)
 8010370:	200060a4 	.word	0x200060a4
 8010374:	2000165c 	.word	0x2000165c

08010378 <pvPortMalloc>:
{
 8010378:	b570      	push	{r4, r5, r6, lr}
 801037a:	0004      	movs	r4, r0
	vTaskSuspendAll();
 801037c:	f7fe fff6 	bl	800f36c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010380:	4b32      	ldr	r3, [pc, #200]	; (801044c <pvPortMalloc+0xd4>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d014      	beq.n	80103b2 <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010388:	4b31      	ldr	r3, [pc, #196]	; (8010450 <pvPortMalloc+0xd8>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4223      	tst	r3, r4
 801038e:	d113      	bne.n	80103b8 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 8010390:	2c00      	cmp	r4, #0
 8010392:	d005      	beq.n	80103a0 <pvPortMalloc+0x28>
				xWantedSize += xHeapStructSize;
 8010394:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010396:	0763      	lsls	r3, r4, #29
 8010398:	d002      	beq.n	80103a0 <pvPortMalloc+0x28>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801039a:	2307      	movs	r3, #7
 801039c:	439c      	bics	r4, r3
 801039e:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80103a0:	2c00      	cmp	r4, #0
 80103a2:	d012      	beq.n	80103ca <pvPortMalloc+0x52>
 80103a4:	4b2b      	ldr	r3, [pc, #172]	; (8010454 <pvPortMalloc+0xdc>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	42a3      	cmp	r3, r4
 80103aa:	d312      	bcc.n	80103d2 <pvPortMalloc+0x5a>
				pxBlock = xStart.pxNextFreeBlock;
 80103ac:	4b2a      	ldr	r3, [pc, #168]	; (8010458 <pvPortMalloc+0xe0>)
 80103ae:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80103b0:	e015      	b.n	80103de <pvPortMalloc+0x66>
			prvHeapInit();
 80103b2:	f7ff ff85 	bl	80102c0 <prvHeapInit>
 80103b6:	e7e7      	b.n	8010388 <pvPortMalloc+0x10>
	( void ) xTaskResumeAll();
 80103b8:	f7ff f876 	bl	800f4a8 <xTaskResumeAll>
void *pvReturn = NULL;
 80103bc:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 80103be:	f7fd fb59 	bl	800da74 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80103c2:	0773      	lsls	r3, r6, #29
 80103c4:	d040      	beq.n	8010448 <pvPortMalloc+0xd0>
 80103c6:	b672      	cpsid	i
 80103c8:	e7fe      	b.n	80103c8 <pvPortMalloc+0x50>
	( void ) xTaskResumeAll();
 80103ca:	f7ff f86d 	bl	800f4a8 <xTaskResumeAll>
void *pvReturn = NULL;
 80103ce:	2600      	movs	r6, #0
 80103d0:	e7f5      	b.n	80103be <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 80103d2:	f7ff f869 	bl	800f4a8 <xTaskResumeAll>
void *pvReturn = NULL;
 80103d6:	2600      	movs	r6, #0
 80103d8:	e7f1      	b.n	80103be <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 80103da:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80103dc:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80103de:	686a      	ldr	r2, [r5, #4]
 80103e0:	42a2      	cmp	r2, r4
 80103e2:	d202      	bcs.n	80103ea <pvPortMalloc+0x72>
 80103e4:	682a      	ldr	r2, [r5, #0]
 80103e6:	2a00      	cmp	r2, #0
 80103e8:	d1f7      	bne.n	80103da <pvPortMalloc+0x62>
				if( pxBlock != pxEnd )
 80103ea:	4a18      	ldr	r2, [pc, #96]	; (801044c <pvPortMalloc+0xd4>)
 80103ec:	6812      	ldr	r2, [r2, #0]
 80103ee:	42aa      	cmp	r2, r5
 80103f0:	d00c      	beq.n	801040c <pvPortMalloc+0x94>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80103f2:	681e      	ldr	r6, [r3, #0]
 80103f4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80103f6:	682a      	ldr	r2, [r5, #0]
 80103f8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80103fa:	686b      	ldr	r3, [r5, #4]
 80103fc:	1b1b      	subs	r3, r3, r4
 80103fe:	2b10      	cmp	r3, #16
 8010400:	d90c      	bls.n	801041c <pvPortMalloc+0xa4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010402:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010404:	0742      	lsls	r2, r0, #29
 8010406:	d005      	beq.n	8010414 <pvPortMalloc+0x9c>
 8010408:	b672      	cpsid	i
 801040a:	e7fe      	b.n	801040a <pvPortMalloc+0x92>
	( void ) xTaskResumeAll();
 801040c:	f7ff f84c 	bl	800f4a8 <xTaskResumeAll>
void *pvReturn = NULL;
 8010410:	2600      	movs	r6, #0
 8010412:	e7d4      	b.n	80103be <pvPortMalloc+0x46>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010414:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010416:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010418:	f7ff ff84 	bl	8010324 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801041c:	686a      	ldr	r2, [r5, #4]
 801041e:	490d      	ldr	r1, [pc, #52]	; (8010454 <pvPortMalloc+0xdc>)
 8010420:	680b      	ldr	r3, [r1, #0]
 8010422:	1a9b      	subs	r3, r3, r2
 8010424:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010426:	490d      	ldr	r1, [pc, #52]	; (801045c <pvPortMalloc+0xe4>)
 8010428:	6809      	ldr	r1, [r1, #0]
 801042a:	428b      	cmp	r3, r1
 801042c:	d201      	bcs.n	8010432 <pvPortMalloc+0xba>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801042e:	490b      	ldr	r1, [pc, #44]	; (801045c <pvPortMalloc+0xe4>)
 8010430:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010432:	4b07      	ldr	r3, [pc, #28]	; (8010450 <pvPortMalloc+0xd8>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4313      	orrs	r3, r2
 8010438:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801043a:	2300      	movs	r3, #0
 801043c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 801043e:	f7ff f833 	bl	800f4a8 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010442:	2e00      	cmp	r6, #0
 8010444:	d1bd      	bne.n	80103c2 <pvPortMalloc+0x4a>
 8010446:	e7ba      	b.n	80103be <pvPortMalloc+0x46>
}
 8010448:	0030      	movs	r0, r6
 801044a:	bd70      	pop	{r4, r5, r6, pc}
 801044c:	2000165c 	.word	0x2000165c
 8010450:	20006098 	.word	0x20006098
 8010454:	2000609c 	.word	0x2000609c
 8010458:	200060a4 	.word	0x200060a4
 801045c:	200060a0 	.word	0x200060a0

08010460 <vPortFree>:
{
 8010460:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 8010462:	2800      	cmp	r0, #0
 8010464:	d020      	beq.n	80104a8 <vPortFree+0x48>
		puc -= xHeapStructSize;
 8010466:	0005      	movs	r5, r0
 8010468:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801046a:	686b      	ldr	r3, [r5, #4]
 801046c:	4a0f      	ldr	r2, [pc, #60]	; (80104ac <vPortFree+0x4c>)
 801046e:	6812      	ldr	r2, [r2, #0]
 8010470:	421a      	tst	r2, r3
 8010472:	d101      	bne.n	8010478 <vPortFree+0x18>
 8010474:	b672      	cpsid	i
 8010476:	e7fe      	b.n	8010476 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010478:	0001      	movs	r1, r0
 801047a:	3908      	subs	r1, #8
 801047c:	6809      	ldr	r1, [r1, #0]
 801047e:	2900      	cmp	r1, #0
 8010480:	d001      	beq.n	8010486 <vPortFree+0x26>
 8010482:	b672      	cpsid	i
 8010484:	e7fe      	b.n	8010484 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010486:	3808      	subs	r0, #8
 8010488:	0004      	movs	r4, r0
 801048a:	4393      	bics	r3, r2
 801048c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 801048e:	f7fe ff6d 	bl	800f36c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010492:	6863      	ldr	r3, [r4, #4]
 8010494:	4a06      	ldr	r2, [pc, #24]	; (80104b0 <vPortFree+0x50>)
 8010496:	6811      	ldr	r1, [r2, #0]
 8010498:	468c      	mov	ip, r1
 801049a:	4463      	add	r3, ip
 801049c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801049e:	0028      	movs	r0, r5
 80104a0:	f7ff ff40 	bl	8010324 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80104a4:	f7ff f800 	bl	800f4a8 <xTaskResumeAll>
}
 80104a8:	bd70      	pop	{r4, r5, r6, pc}
 80104aa:	46c0      	nop			; (mov r8, r8)
 80104ac:	20006098 	.word	0x20006098
 80104b0:	2000609c 	.word	0x2000609c

080104b4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80104b4:	4770      	bx	lr

080104b6 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80104b6:	b510      	push	{r4, lr}
 80104b8:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80104ba:	f001 ffa7 	bl	801240c <HAL_RCC_GetHCLKFreq>
 80104be:	21fa      	movs	r1, #250	; 0xfa
 80104c0:	0089      	lsls	r1, r1, #2
 80104c2:	f7ef fe45 	bl	8000150 <__udivsi3>
 80104c6:	f000 fb59 	bl	8010b7c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80104ca:	2001      	movs	r0, #1
 80104cc:	2200      	movs	r2, #0
 80104ce:	0021      	movs	r1, r4
 80104d0:	4240      	negs	r0, r0
 80104d2:	f000 fb0f 	bl	8010af4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80104d6:	2000      	movs	r0, #0
 80104d8:	bd10      	pop	{r4, pc}
	...

080104dc <HAL_Init>:
{
 80104dc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80104de:	4a06      	ldr	r2, [pc, #24]	; (80104f8 <HAL_Init+0x1c>)
 80104e0:	6813      	ldr	r3, [r2, #0]
 80104e2:	2110      	movs	r1, #16
 80104e4:	430b      	orrs	r3, r1
 80104e6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80104e8:	2000      	movs	r0, #0
 80104ea:	f7ff ffe4 	bl	80104b6 <HAL_InitTick>
  HAL_MspInit();
 80104ee:	f7ff ffe1 	bl	80104b4 <HAL_MspInit>
}
 80104f2:	2000      	movs	r0, #0
 80104f4:	bd10      	pop	{r4, pc}
 80104f6:	46c0      	nop			; (mov r8, r8)
 80104f8:	40022000 	.word	0x40022000

080104fc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80104fc:	4a02      	ldr	r2, [pc, #8]	; (8010508 <HAL_IncTick+0xc>)
 80104fe:	6813      	ldr	r3, [r2, #0]
 8010500:	3301      	adds	r3, #1
 8010502:	6013      	str	r3, [r2, #0]
}
 8010504:	4770      	bx	lr
 8010506:	46c0      	nop			; (mov r8, r8)
 8010508:	200060ac 	.word	0x200060ac

0801050c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801050c:	4b01      	ldr	r3, [pc, #4]	; (8010514 <HAL_GetTick+0x8>)
 801050e:	6818      	ldr	r0, [r3, #0]
}
 8010510:	4770      	bx	lr
 8010512:	46c0      	nop			; (mov r8, r8)
 8010514:	200060ac 	.word	0x200060ac

08010518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010518:	b510      	push	{r4, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 801051e:	f7ff fff5 	bl	801050c <HAL_GetTick>
 8010522:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010524:	f7ff fff2 	bl	801050c <HAL_GetTick>
 8010528:	1b00      	subs	r0, r0, r4
 801052a:	9b01      	ldr	r3, [sp, #4]
 801052c:	4298      	cmp	r0, r3
 801052e:	d3f9      	bcc.n	8010524 <HAL_Delay+0xc>
  {
  }
}
 8010530:	b002      	add	sp, #8
 8010532:	bd10      	pop	{r4, pc}

08010534 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010534:	4b01      	ldr	r3, [pc, #4]	; (801053c <HAL_GetREVID+0x8>)
 8010536:	6818      	ldr	r0, [r3, #0]
 8010538:	0c00      	lsrs	r0, r0, #16
}
 801053a:	4770      	bx	lr
 801053c:	40015800 	.word	0x40015800

08010540 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010540:	4b02      	ldr	r3, [pc, #8]	; (801054c <HAL_GetDEVID+0xc>)
 8010542:	6818      	ldr	r0, [r3, #0]
 8010544:	0500      	lsls	r0, r0, #20
 8010546:	0d00      	lsrs	r0, r0, #20
}
 8010548:	4770      	bx	lr
 801054a:	46c0      	nop			; (mov r8, r8)
 801054c:	40015800 	.word	0x40015800

08010550 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8010550:	b570      	push	{r4, r5, r6, lr}
 8010552:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010554:	6803      	ldr	r3, [r0, #0]
 8010556:	689a      	ldr	r2, [r3, #8]
 8010558:	0752      	lsls	r2, r2, #29
 801055a:	d521      	bpl.n	80105a0 <ADC_ConversionStop+0x50>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 801055c:	689a      	ldr	r2, [r3, #8]
 801055e:	0752      	lsls	r2, r2, #29
 8010560:	d506      	bpl.n	8010570 <ADC_ConversionStop+0x20>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010562:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010564:	0792      	lsls	r2, r2, #30
 8010566:	d403      	bmi.n	8010570 <ADC_ConversionStop+0x20>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8010568:	689a      	ldr	r2, [r3, #8]
 801056a:	2110      	movs	r1, #16
 801056c:	430a      	orrs	r2, r1
 801056e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8010570:	f7ff ffcc 	bl	801050c <HAL_GetTick>
 8010574:	0005      	movs	r5, r0
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010576:	6823      	ldr	r3, [r4, #0]
 8010578:	689b      	ldr	r3, [r3, #8]
 801057a:	075b      	lsls	r3, r3, #29
 801057c:	d50e      	bpl.n	801059c <ADC_ConversionStop+0x4c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801057e:	f7ff ffc5 	bl	801050c <HAL_GetTick>
 8010582:	1b40      	subs	r0, r0, r5
 8010584:	2802      	cmp	r0, #2
 8010586:	d9f6      	bls.n	8010576 <ADC_ConversionStop+0x26>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010588:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801058a:	2210      	movs	r2, #16
 801058c:	4313      	orrs	r3, r2
 801058e:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010590:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010592:	3a0f      	subs	r2, #15
 8010594:	4313      	orrs	r3, r2
 8010596:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8010598:	2001      	movs	r0, #1
 801059a:	e002      	b.n	80105a2 <ADC_ConversionStop+0x52>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 801059c:	2000      	movs	r0, #0
 801059e:	e000      	b.n	80105a2 <ADC_ConversionStop+0x52>
 80105a0:	2000      	movs	r0, #0
}
 80105a2:	bd70      	pop	{r4, r5, r6, pc}

080105a4 <ADC_Disable>:
{
 80105a4:	b570      	push	{r4, r5, r6, lr}
 80105a6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80105a8:	6802      	ldr	r2, [r0, #0]
 80105aa:	6891      	ldr	r1, [r2, #8]
 80105ac:	2303      	movs	r3, #3
 80105ae:	400b      	ands	r3, r1
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d001      	beq.n	80105b8 <ADC_Disable+0x14>
  return HAL_OK;
 80105b4:	2000      	movs	r0, #0
}
 80105b6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80105b8:	6813      	ldr	r3, [r2, #0]
 80105ba:	07db      	lsls	r3, r3, #31
 80105bc:	d402      	bmi.n	80105c4 <ADC_Disable+0x20>
 80105be:	68d3      	ldr	r3, [r2, #12]
 80105c0:	041b      	lsls	r3, r3, #16
 80105c2:	d52d      	bpl.n	8010620 <ADC_Disable+0x7c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80105c4:	6891      	ldr	r1, [r2, #8]
 80105c6:	2305      	movs	r3, #5
 80105c8:	400b      	ands	r3, r1
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	d009      	beq.n	80105e2 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80105ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80105d0:	2210      	movs	r2, #16
 80105d2:	4313      	orrs	r3, r2
 80105d4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80105d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80105d8:	3a0f      	subs	r2, #15
 80105da:	4313      	orrs	r3, r2
 80105dc:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80105de:	2001      	movs	r0, #1
 80105e0:	e7e9      	b.n	80105b6 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 80105e2:	6893      	ldr	r3, [r2, #8]
 80105e4:	2102      	movs	r1, #2
 80105e6:	430b      	orrs	r3, r1
 80105e8:	6093      	str	r3, [r2, #8]
 80105ea:	6823      	ldr	r3, [r4, #0]
 80105ec:	2203      	movs	r2, #3
 80105ee:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80105f0:	f7ff ff8c 	bl	801050c <HAL_GetTick>
 80105f4:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80105f6:	6823      	ldr	r3, [r4, #0]
 80105f8:	689b      	ldr	r3, [r3, #8]
 80105fa:	07db      	lsls	r3, r3, #31
 80105fc:	d50e      	bpl.n	801061c <ADC_Disable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80105fe:	f7ff ff85 	bl	801050c <HAL_GetTick>
 8010602:	1b40      	subs	r0, r0, r5
 8010604:	2802      	cmp	r0, #2
 8010606:	d9f6      	bls.n	80105f6 <ADC_Disable+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010608:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801060a:	2210      	movs	r2, #16
 801060c:	4313      	orrs	r3, r2
 801060e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010610:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010612:	3a0f      	subs	r2, #15
 8010614:	4313      	orrs	r3, r2
 8010616:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010618:	2001      	movs	r0, #1
 801061a:	e7cc      	b.n	80105b6 <ADC_Disable+0x12>
  return HAL_OK;
 801061c:	2000      	movs	r0, #0
 801061e:	e7ca      	b.n	80105b6 <ADC_Disable+0x12>
 8010620:	2000      	movs	r0, #0
 8010622:	e7c8      	b.n	80105b6 <ADC_Disable+0x12>

08010624 <ADC_Enable>:
{
 8010624:	b530      	push	{r4, r5, lr}
 8010626:	b083      	sub	sp, #12
 8010628:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 801062a:	2300      	movs	r3, #0
 801062c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 801062e:	6803      	ldr	r3, [r0, #0]
 8010630:	6899      	ldr	r1, [r3, #8]
 8010632:	2203      	movs	r2, #3
 8010634:	400a      	ands	r2, r1
 8010636:	2a01      	cmp	r2, #1
 8010638:	d014      	beq.n	8010664 <ADC_Enable+0x40>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801063a:	6899      	ldr	r1, [r3, #8]
 801063c:	4a20      	ldr	r2, [pc, #128]	; (80106c0 <ADC_Enable+0x9c>)
 801063e:	4211      	tst	r1, r2
 8010640:	d118      	bne.n	8010674 <ADC_Enable+0x50>
    __HAL_ADC_ENABLE(hadc);
 8010642:	689a      	ldr	r2, [r3, #8]
 8010644:	2101      	movs	r1, #1
 8010646:	430a      	orrs	r2, r1
 8010648:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 801064a:	4b1e      	ldr	r3, [pc, #120]	; (80106c4 <ADC_Enable+0xa0>)
 801064c:	6818      	ldr	r0, [r3, #0]
 801064e:	491e      	ldr	r1, [pc, #120]	; (80106c8 <ADC_Enable+0xa4>)
 8010650:	f7ef fd7e 	bl	8000150 <__udivsi3>
 8010654:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010656:	9b01      	ldr	r3, [sp, #4]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d016      	beq.n	801068a <ADC_Enable+0x66>
      wait_loop_index--;
 801065c:	9b01      	ldr	r3, [sp, #4]
 801065e:	3b01      	subs	r3, #1
 8010660:	9301      	str	r3, [sp, #4]
 8010662:	e7f8      	b.n	8010656 <ADC_Enable+0x32>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	07d2      	lsls	r2, r2, #31
 8010668:	d427      	bmi.n	80106ba <ADC_Enable+0x96>
 801066a:	68da      	ldr	r2, [r3, #12]
 801066c:	0412      	lsls	r2, r2, #16
 801066e:	d5e4      	bpl.n	801063a <ADC_Enable+0x16>
  return HAL_OK;
 8010670:	2000      	movs	r0, #0
 8010672:	e008      	b.n	8010686 <ADC_Enable+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010674:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010676:	2210      	movs	r2, #16
 8010678:	4313      	orrs	r3, r2
 801067a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801067c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801067e:	3a0f      	subs	r2, #15
 8010680:	4313      	orrs	r3, r2
 8010682:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010684:	2001      	movs	r0, #1
}
 8010686:	b003      	add	sp, #12
 8010688:	bd30      	pop	{r4, r5, pc}
    tickstart = HAL_GetTick();
 801068a:	f7ff ff3f 	bl	801050c <HAL_GetTick>
 801068e:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	07db      	lsls	r3, r3, #31
 8010696:	d40e      	bmi.n	80106b6 <ADC_Enable+0x92>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010698:	f7ff ff38 	bl	801050c <HAL_GetTick>
 801069c:	1b40      	subs	r0, r0, r5
 801069e:	2802      	cmp	r0, #2
 80106a0:	d9f6      	bls.n	8010690 <ADC_Enable+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80106a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80106a4:	2210      	movs	r2, #16
 80106a6:	4313      	orrs	r3, r2
 80106a8:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80106aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80106ac:	3a0f      	subs	r2, #15
 80106ae:	4313      	orrs	r3, r2
 80106b0:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80106b2:	2001      	movs	r0, #1
 80106b4:	e7e7      	b.n	8010686 <ADC_Enable+0x62>
  return HAL_OK;
 80106b6:	2000      	movs	r0, #0
 80106b8:	e7e5      	b.n	8010686 <ADC_Enable+0x62>
 80106ba:	2000      	movs	r0, #0
 80106bc:	e7e3      	b.n	8010686 <ADC_Enable+0x62>
 80106be:	46c0      	nop			; (mov r8, r8)
 80106c0:	80000017 	.word	0x80000017
 80106c4:	200000c8 	.word	0x200000c8
 80106c8:	000f4240 	.word	0x000f4240

080106cc <HAL_ADC_Init>:
{
 80106cc:	b570      	push	{r4, r5, r6, lr}
 80106ce:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80106d0:	d100      	bne.n	80106d4 <HAL_ADC_Init+0x8>
 80106d2:	e0a9      	b.n	8010828 <HAL_ADC_Init+0x15c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80106d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d07f      	beq.n	80107da <HAL_ADC_Init+0x10e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80106da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80106dc:	06db      	lsls	r3, r3, #27
 80106de:	d500      	bpl.n	80106e2 <HAL_ADC_Init+0x16>
 80106e0:	e09c      	b.n	801081c <HAL_ADC_Init+0x150>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80106e2:	6822      	ldr	r2, [r4, #0]
 80106e4:	6891      	ldr	r1, [r2, #8]
 80106e6:	2004      	movs	r0, #4
 80106e8:	0005      	movs	r5, r0
 80106ea:	400d      	ands	r5, r1
      (tmp_hal_status == HAL_OK)                                &&
 80106ec:	4208      	tst	r0, r1
 80106ee:	d000      	beq.n	80106f2 <HAL_ADC_Init+0x26>
 80106f0:	e094      	b.n	801081c <HAL_ADC_Init+0x150>
    ADC_STATE_CLR_SET(hadc->State,
 80106f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80106f4:	4b4d      	ldr	r3, [pc, #308]	; (801082c <HAL_ADC_Init+0x160>)
 80106f6:	4019      	ands	r1, r3
 80106f8:	3306      	adds	r3, #6
 80106fa:	33ff      	adds	r3, #255	; 0xff
 80106fc:	4319      	orrs	r1, r3
 80106fe:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010700:	6891      	ldr	r1, [r2, #8]
 8010702:	3301      	adds	r3, #1
 8010704:	400b      	ands	r3, r1
 8010706:	2b01      	cmp	r3, #1
 8010708:	d06d      	beq.n	80107e6 <HAL_ADC_Init+0x11a>
      MODIFY_REG(hadc->Instance->CFGR1,
 801070a:	68d3      	ldr	r3, [r2, #12]
 801070c:	2118      	movs	r1, #24
 801070e:	438b      	bics	r3, r1
 8010710:	68a1      	ldr	r1, [r4, #8]
 8010712:	430b      	orrs	r3, r1
 8010714:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8010716:	6822      	ldr	r2, [r4, #0]
 8010718:	6913      	ldr	r3, [r2, #16]
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	089b      	lsrs	r3, r3, #2
 801071e:	6861      	ldr	r1, [r4, #4]
 8010720:	430b      	orrs	r3, r1
 8010722:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8010724:	6822      	ldr	r2, [r4, #0]
 8010726:	68d3      	ldr	r3, [r2, #12]
 8010728:	4941      	ldr	r1, [pc, #260]	; (8010830 <HAL_ADC_Init+0x164>)
 801072a:	400b      	ands	r3, r1
 801072c:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 801072e:	69a3      	ldr	r3, [r4, #24]
 8010730:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8010732:	69e2      	ldr	r2, [r4, #28]
 8010734:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010736:	4313      	orrs	r3, r2
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010738:	6a21      	ldr	r1, [r4, #32]
 801073a:	034a      	lsls	r2, r1, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 801073c:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 801073e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010740:	2a01      	cmp	r2, #1
 8010742:	d057      	beq.n	80107f4 <HAL_ADC_Init+0x128>
 8010744:	2280      	movs	r2, #128	; 0x80
 8010746:	0152      	lsls	r2, r2, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010748:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 801074a:	68e2      	ldr	r2, [r4, #12]
 801074c:	4313      	orrs	r3, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801074e:	6922      	ldr	r2, [r4, #16]
 8010750:	2a02      	cmp	r2, #2
 8010752:	d051      	beq.n	80107f8 <HAL_ADC_Init+0x12c>
                 hadc->Init.DataAlign                                   |
 8010754:	432b      	orrs	r3, r5
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8010756:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010758:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801075a:	4313      	orrs	r3, r2
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 801075c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801075e:	2a01      	cmp	r2, #1
 8010760:	d04c      	beq.n	80107fc <HAL_ADC_Init+0x130>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010762:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010764:	21c2      	movs	r1, #194	; 0xc2
 8010766:	31ff      	adds	r1, #255	; 0xff
 8010768:	428a      	cmp	r2, r1
 801076a:	d002      	beq.n	8010772 <HAL_ADC_Init+0xa6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 801076c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801076e:	430a      	orrs	r2, r1
 8010770:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8010772:	6821      	ldr	r1, [r4, #0]
 8010774:	68ca      	ldr	r2, [r1, #12]
 8010776:	431a      	orrs	r2, r3
 8010778:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 801077a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801077c:	2180      	movs	r1, #128	; 0x80
 801077e:	0549      	lsls	r1, r1, #21
 8010780:	428a      	cmp	r2, r1
 8010782:	d00d      	beq.n	80107a0 <HAL_ADC_Init+0xd4>
 8010784:	2a01      	cmp	r2, #1
 8010786:	d00b      	beq.n	80107a0 <HAL_ADC_Init+0xd4>
 8010788:	2a02      	cmp	r2, #2
 801078a:	d009      	beq.n	80107a0 <HAL_ADC_Init+0xd4>
 801078c:	2a03      	cmp	r2, #3
 801078e:	d007      	beq.n	80107a0 <HAL_ADC_Init+0xd4>
 8010790:	2a04      	cmp	r2, #4
 8010792:	d005      	beq.n	80107a0 <HAL_ADC_Init+0xd4>
 8010794:	2a05      	cmp	r2, #5
 8010796:	d003      	beq.n	80107a0 <HAL_ADC_Init+0xd4>
 8010798:	2a06      	cmp	r2, #6
 801079a:	d001      	beq.n	80107a0 <HAL_ADC_Init+0xd4>
 801079c:	2a07      	cmp	r2, #7
 801079e:	d10a      	bne.n	80107b6 <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80107a0:	6820      	ldr	r0, [r4, #0]
 80107a2:	6941      	ldr	r1, [r0, #20]
 80107a4:	2207      	movs	r2, #7
 80107a6:	4391      	bics	r1, r2
 80107a8:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80107aa:	6820      	ldr	r0, [r4, #0]
 80107ac:	6941      	ldr	r1, [r0, #20]
 80107ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80107b0:	402a      	ands	r2, r5
 80107b2:	430a      	orrs	r2, r1
 80107b4:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80107b6:	6822      	ldr	r2, [r4, #0]
 80107b8:	68d2      	ldr	r2, [r2, #12]
 80107ba:	491e      	ldr	r1, [pc, #120]	; (8010834 <HAL_ADC_Init+0x168>)
 80107bc:	400a      	ands	r2, r1
 80107be:	429a      	cmp	r2, r3
 80107c0:	d022      	beq.n	8010808 <HAL_ADC_Init+0x13c>
      ADC_STATE_CLR_SET(hadc->State,
 80107c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80107c4:	2212      	movs	r2, #18
 80107c6:	4393      	bics	r3, r2
 80107c8:	3a02      	subs	r2, #2
 80107ca:	4313      	orrs	r3, r2
 80107cc:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80107ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80107d0:	3a0f      	subs	r2, #15
 80107d2:	4313      	orrs	r3, r2
 80107d4:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80107d6:	2001      	movs	r0, #1
 80107d8:	e025      	b.n	8010826 <HAL_ADC_Init+0x15a>
    ADC_CLEAR_ERRORCODE(hadc);
 80107da:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80107dc:	2240      	movs	r2, #64	; 0x40
 80107de:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80107e0:	f7fb fc3e 	bl	800c060 <HAL_ADC_MspInit>
 80107e4:	e779      	b.n	80106da <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80107e6:	6813      	ldr	r3, [r2, #0]
 80107e8:	07db      	lsls	r3, r3, #31
 80107ea:	d49b      	bmi.n	8010724 <HAL_ADC_Init+0x58>
 80107ec:	68d3      	ldr	r3, [r2, #12]
 80107ee:	041b      	lsls	r3, r3, #16
 80107f0:	d498      	bmi.n	8010724 <HAL_ADC_Init+0x58>
 80107f2:	e78a      	b.n	801070a <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80107f4:	002a      	movs	r2, r5
 80107f6:	e7a7      	b.n	8010748 <HAL_ADC_Init+0x7c>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80107f8:	2504      	movs	r5, #4
 80107fa:	e7ab      	b.n	8010754 <HAL_ADC_Init+0x88>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80107fc:	2900      	cmp	r1, #0
 80107fe:	d1b0      	bne.n	8010762 <HAL_ADC_Init+0x96>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010800:	2280      	movs	r2, #128	; 0x80
 8010802:	0252      	lsls	r2, r2, #9
 8010804:	4313      	orrs	r3, r2
 8010806:	e7ac      	b.n	8010762 <HAL_ADC_Init+0x96>
      ADC_CLEAR_ERRORCODE(hadc);
 8010808:	2300      	movs	r3, #0
 801080a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 801080c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801080e:	2203      	movs	r2, #3
 8010810:	4393      	bics	r3, r2
 8010812:	3a02      	subs	r2, #2
 8010814:	4313      	orrs	r3, r2
 8010816:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010818:	2000      	movs	r0, #0
 801081a:	e004      	b.n	8010826 <HAL_ADC_Init+0x15a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801081c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801081e:	2210      	movs	r2, #16
 8010820:	4313      	orrs	r3, r2
 8010822:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010824:	2001      	movs	r0, #1
}
 8010826:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010828:	2001      	movs	r0, #1
 801082a:	e7fc      	b.n	8010826 <HAL_ADC_Init+0x15a>
 801082c:	fffffefd 	.word	0xfffffefd
 8010830:	fffe0219 	.word	0xfffe0219
 8010834:	833fffe7 	.word	0x833fffe7

08010838 <HAL_ADC_Start>:
{
 8010838:	b510      	push	{r4, lr}
 801083a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801083c:	6803      	ldr	r3, [r0, #0]
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	075b      	lsls	r3, r3, #29
 8010842:	d423      	bmi.n	801088c <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010844:	2340      	movs	r3, #64	; 0x40
 8010846:	5cc3      	ldrb	r3, [r0, r3]
 8010848:	2b01      	cmp	r3, #1
 801084a:	d021      	beq.n	8010890 <HAL_ADC_Start+0x58>
 801084c:	2340      	movs	r3, #64	; 0x40
 801084e:	2201      	movs	r2, #1
 8010850:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010852:	69c3      	ldr	r3, [r0, #28]
 8010854:	2b01      	cmp	r3, #1
 8010856:	d114      	bne.n	8010882 <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010858:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 801085a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801085c:	4a0d      	ldr	r2, [pc, #52]	; (8010894 <HAL_ADC_Start+0x5c>)
 801085e:	401a      	ands	r2, r3
 8010860:	2380      	movs	r3, #128	; 0x80
 8010862:	005b      	lsls	r3, r3, #1
 8010864:	4313      	orrs	r3, r2
 8010866:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010868:	2300      	movs	r3, #0
 801086a:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 801086c:	2240      	movs	r2, #64	; 0x40
 801086e:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010870:	6823      	ldr	r3, [r4, #0]
 8010872:	3a24      	subs	r2, #36	; 0x24
 8010874:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010876:	6822      	ldr	r2, [r4, #0]
 8010878:	6893      	ldr	r3, [r2, #8]
 801087a:	2104      	movs	r1, #4
 801087c:	430b      	orrs	r3, r1
 801087e:	6093      	str	r3, [r2, #8]
}
 8010880:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010882:	f7ff fecf 	bl	8010624 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010886:	2800      	cmp	r0, #0
 8010888:	d1fa      	bne.n	8010880 <HAL_ADC_Start+0x48>
 801088a:	e7e6      	b.n	801085a <HAL_ADC_Start+0x22>
    tmp_hal_status = HAL_BUSY;
 801088c:	2002      	movs	r0, #2
 801088e:	e7f7      	b.n	8010880 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010890:	2002      	movs	r0, #2
 8010892:	e7f5      	b.n	8010880 <HAL_ADC_Start+0x48>
 8010894:	fffff0fe 	.word	0xfffff0fe

08010898 <HAL_ADC_Stop>:
{ 
 8010898:	b510      	push	{r4, lr}
 801089a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 801089c:	2340      	movs	r3, #64	; 0x40
 801089e:	5cc3      	ldrb	r3, [r0, r3]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d017      	beq.n	80108d4 <HAL_ADC_Stop+0x3c>
 80108a4:	2340      	movs	r3, #64	; 0x40
 80108a6:	2201      	movs	r2, #1
 80108a8:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80108aa:	f7ff fe51 	bl	8010550 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80108ae:	2800      	cmp	r0, #0
 80108b0:	d003      	beq.n	80108ba <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 80108b2:	2340      	movs	r3, #64	; 0x40
 80108b4:	2200      	movs	r2, #0
 80108b6:	54e2      	strb	r2, [r4, r3]
}
 80108b8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80108ba:	0020      	movs	r0, r4
 80108bc:	f7ff fe72 	bl	80105a4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80108c0:	2800      	cmp	r0, #0
 80108c2:	d1f6      	bne.n	80108b2 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80108c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80108c6:	4a04      	ldr	r2, [pc, #16]	; (80108d8 <HAL_ADC_Stop+0x40>)
 80108c8:	4013      	ands	r3, r2
 80108ca:	3204      	adds	r2, #4
 80108cc:	32ff      	adds	r2, #255	; 0xff
 80108ce:	4313      	orrs	r3, r2
 80108d0:	6463      	str	r3, [r4, #68]	; 0x44
 80108d2:	e7ee      	b.n	80108b2 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80108d4:	2002      	movs	r0, #2
 80108d6:	e7ef      	b.n	80108b8 <HAL_ADC_Stop+0x20>
 80108d8:	fffffefe 	.word	0xfffffefe

080108dc <HAL_ADC_PollForConversion>:
{
 80108dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108de:	0004      	movs	r4, r0
 80108e0:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80108e2:	6946      	ldr	r6, [r0, #20]
 80108e4:	2e08      	cmp	r6, #8
 80108e6:	d004      	beq.n	80108f2 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80108e8:	6803      	ldr	r3, [r0, #0]
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	07db      	lsls	r3, r3, #31
 80108ee:	d419      	bmi.n	8010924 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80108f0:	260c      	movs	r6, #12
  tickstart = HAL_GetTick();
 80108f2:	f7ff fe0b 	bl	801050c <HAL_GetTick>
 80108f6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80108f8:	6823      	ldr	r3, [r4, #0]
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	4216      	tst	r6, r2
 80108fe:	d11a      	bne.n	8010936 <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 8010900:	1c6b      	adds	r3, r5, #1
 8010902:	d0f9      	beq.n	80108f8 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010904:	2d00      	cmp	r5, #0
 8010906:	d004      	beq.n	8010912 <HAL_ADC_PollForConversion+0x36>
 8010908:	f7ff fe00 	bl	801050c <HAL_GetTick>
 801090c:	1bc0      	subs	r0, r0, r7
 801090e:	42a8      	cmp	r0, r5
 8010910:	d9f2      	bls.n	80108f8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010912:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010914:	2204      	movs	r2, #4
 8010916:	4313      	orrs	r3, r2
 8010918:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 801091a:	2340      	movs	r3, #64	; 0x40
 801091c:	2200      	movs	r2, #0
 801091e:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8010920:	2003      	movs	r0, #3
 8010922:	e02d      	b.n	8010980 <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010924:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010926:	2220      	movs	r2, #32
 8010928:	4313      	orrs	r3, r2
 801092a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 801092c:	2340      	movs	r3, #64	; 0x40
 801092e:	2200      	movs	r2, #0
 8010930:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010932:	2001      	movs	r0, #1
 8010934:	e024      	b.n	8010980 <HAL_ADC_PollForConversion+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010936:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010938:	2280      	movs	r2, #128	; 0x80
 801093a:	0092      	lsls	r2, r2, #2
 801093c:	430a      	orrs	r2, r1
 801093e:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010940:	68d9      	ldr	r1, [r3, #12]
 8010942:	22c0      	movs	r2, #192	; 0xc0
 8010944:	0112      	lsls	r2, r2, #4
 8010946:	4211      	tst	r1, r2
 8010948:	d113      	bne.n	8010972 <HAL_ADC_PollForConversion+0x96>
 801094a:	6a22      	ldr	r2, [r4, #32]
 801094c:	2a00      	cmp	r2, #0
 801094e:	d110      	bne.n	8010972 <HAL_ADC_PollForConversion+0x96>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	0712      	lsls	r2, r2, #28
 8010954:	d50d      	bpl.n	8010972 <HAL_ADC_PollForConversion+0x96>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010956:	689a      	ldr	r2, [r3, #8]
 8010958:	0752      	lsls	r2, r2, #29
 801095a:	d412      	bmi.n	8010982 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801095c:	685a      	ldr	r2, [r3, #4]
 801095e:	210c      	movs	r1, #12
 8010960:	438a      	bics	r2, r1
 8010962:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010964:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010966:	4a0c      	ldr	r2, [pc, #48]	; (8010998 <HAL_ADC_PollForConversion+0xbc>)
 8010968:	4013      	ands	r3, r2
 801096a:	3204      	adds	r2, #4
 801096c:	32ff      	adds	r2, #255	; 0xff
 801096e:	4313      	orrs	r3, r2
 8010970:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010972:	69a3      	ldr	r3, [r4, #24]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d10d      	bne.n	8010994 <HAL_ADC_PollForConversion+0xb8>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010978:	6823      	ldr	r3, [r4, #0]
 801097a:	220c      	movs	r2, #12
 801097c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 801097e:	2000      	movs	r0, #0
}
 8010980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010982:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010984:	2220      	movs	r2, #32
 8010986:	4313      	orrs	r3, r2
 8010988:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801098a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801098c:	3a1f      	subs	r2, #31
 801098e:	4313      	orrs	r3, r2
 8010990:	64a3      	str	r3, [r4, #72]	; 0x48
 8010992:	e7ee      	b.n	8010972 <HAL_ADC_PollForConversion+0x96>
  return HAL_OK;
 8010994:	2000      	movs	r0, #0
 8010996:	e7f3      	b.n	8010980 <HAL_ADC_PollForConversion+0xa4>
 8010998:	fffffefe 	.word	0xfffffefe

0801099c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801099c:	6803      	ldr	r3, [r0, #0]
 801099e:	2208      	movs	r2, #8
 80109a0:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 80109a2:	6803      	ldr	r3, [r0, #0]
 80109a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80109a6:	4770      	bx	lr

080109a8 <HAL_ADC_ConfigChannel>:
{
 80109a8:	b530      	push	{r4, r5, lr}
 80109aa:	b083      	sub	sp, #12
 80109ac:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 80109ae:	2300      	movs	r3, #0
 80109b0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80109b2:	3340      	adds	r3, #64	; 0x40
 80109b4:	5cc3      	ldrb	r3, [r0, r3]
 80109b6:	2b01      	cmp	r3, #1
 80109b8:	d100      	bne.n	80109bc <HAL_ADC_ConfigChannel+0x14>
 80109ba:	e08b      	b.n	8010ad4 <HAL_ADC_ConfigChannel+0x12c>
 80109bc:	2340      	movs	r3, #64	; 0x40
 80109be:	2201      	movs	r2, #1
 80109c0:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80109c2:	6803      	ldr	r3, [r0, #0]
 80109c4:	689a      	ldr	r2, [r3, #8]
 80109c6:	0752      	lsls	r2, r2, #29
 80109c8:	d476      	bmi.n	8010ab8 <HAL_ADC_ConfigChannel+0x110>
    if (sConfig->Rank != ADC_RANK_NONE)
 80109ca:	4a43      	ldr	r2, [pc, #268]	; (8010ad8 <HAL_ADC_ConfigChannel+0x130>)
 80109cc:	6848      	ldr	r0, [r1, #4]
 80109ce:	4290      	cmp	r0, r2
 80109d0:	d057      	beq.n	8010a82 <HAL_ADC_ConfigChannel+0xda>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80109d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109d4:	2001      	movs	r0, #1
 80109d6:	680d      	ldr	r5, [r1, #0]
 80109d8:	40a8      	lsls	r0, r5
 80109da:	4302      	orrs	r2, r0
 80109dc:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80109de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80109e0:	2280      	movs	r2, #128	; 0x80
 80109e2:	0552      	lsls	r2, r2, #21
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d01e      	beq.n	8010a26 <HAL_ADC_ConfigChannel+0x7e>
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d01c      	beq.n	8010a26 <HAL_ADC_ConfigChannel+0x7e>
 80109ec:	2b02      	cmp	r3, #2
 80109ee:	d01a      	beq.n	8010a26 <HAL_ADC_ConfigChannel+0x7e>
 80109f0:	2b03      	cmp	r3, #3
 80109f2:	d018      	beq.n	8010a26 <HAL_ADC_ConfigChannel+0x7e>
 80109f4:	2b04      	cmp	r3, #4
 80109f6:	d016      	beq.n	8010a26 <HAL_ADC_ConfigChannel+0x7e>
 80109f8:	2b05      	cmp	r3, #5
 80109fa:	d014      	beq.n	8010a26 <HAL_ADC_ConfigChannel+0x7e>
 80109fc:	2b06      	cmp	r3, #6
 80109fe:	d012      	beq.n	8010a26 <HAL_ADC_ConfigChannel+0x7e>
 8010a00:	2b07      	cmp	r3, #7
 8010a02:	d010      	beq.n	8010a26 <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8010a04:	6822      	ldr	r2, [r4, #0]
 8010a06:	6950      	ldr	r0, [r2, #20]
 8010a08:	2307      	movs	r3, #7
 8010a0a:	4003      	ands	r3, r0
 8010a0c:	6888      	ldr	r0, [r1, #8]
 8010a0e:	4298      	cmp	r0, r3
 8010a10:	d009      	beq.n	8010a26 <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010a12:	6950      	ldr	r0, [r2, #20]
 8010a14:	2307      	movs	r3, #7
 8010a16:	4398      	bics	r0, r3
 8010a18:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8010a1a:	6820      	ldr	r0, [r4, #0]
 8010a1c:	6942      	ldr	r2, [r0, #20]
 8010a1e:	688d      	ldr	r5, [r1, #8]
 8010a20:	402b      	ands	r3, r5
 8010a22:	4313      	orrs	r3, r2
 8010a24:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010a26:	680b      	ldr	r3, [r1, #0]
 8010a28:	001a      	movs	r2, r3
 8010a2a:	3a10      	subs	r2, #16
 8010a2c:	2a02      	cmp	r2, #2
 8010a2e:	d84d      	bhi.n	8010acc <HAL_ADC_ConfigChannel+0x124>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010a30:	4a2a      	ldr	r2, [pc, #168]	; (8010adc <HAL_ADC_ConfigChannel+0x134>)
 8010a32:	6812      	ldr	r2, [r2, #0]
 8010a34:	2b10      	cmp	r3, #16
 8010a36:	d00e      	beq.n	8010a56 <HAL_ADC_ConfigChannel+0xae>
 8010a38:	2b11      	cmp	r3, #17
 8010a3a:	d009      	beq.n	8010a50 <HAL_ADC_ConfigChannel+0xa8>
 8010a3c:	2380      	movs	r3, #128	; 0x80
 8010a3e:	045b      	lsls	r3, r3, #17
 8010a40:	4313      	orrs	r3, r2
 8010a42:	4a26      	ldr	r2, [pc, #152]	; (8010adc <HAL_ADC_ConfigChannel+0x134>)
 8010a44:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010a46:	680b      	ldr	r3, [r1, #0]
 8010a48:	2b10      	cmp	r3, #16
 8010a4a:	d007      	beq.n	8010a5c <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010a4c:	2000      	movs	r0, #0
 8010a4e:	e038      	b.n	8010ac2 <HAL_ADC_ConfigChannel+0x11a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010a50:	2380      	movs	r3, #128	; 0x80
 8010a52:	03db      	lsls	r3, r3, #15
 8010a54:	e7f4      	b.n	8010a40 <HAL_ADC_ConfigChannel+0x98>
 8010a56:	2380      	movs	r3, #128	; 0x80
 8010a58:	041b      	lsls	r3, r3, #16
 8010a5a:	e7f1      	b.n	8010a40 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010a5c:	4b20      	ldr	r3, [pc, #128]	; (8010ae0 <HAL_ADC_ConfigChannel+0x138>)
 8010a5e:	6818      	ldr	r0, [r3, #0]
 8010a60:	4920      	ldr	r1, [pc, #128]	; (8010ae4 <HAL_ADC_ConfigChannel+0x13c>)
 8010a62:	f7ef fb75 	bl	8000150 <__udivsi3>
 8010a66:	0003      	movs	r3, r0
 8010a68:	0080      	lsls	r0, r0, #2
 8010a6a:	18c0      	adds	r0, r0, r3
 8010a6c:	0040      	lsls	r0, r0, #1
 8010a6e:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 8010a70:	e002      	b.n	8010a78 <HAL_ADC_ConfigChannel+0xd0>
            wait_loop_index--;
 8010a72:	9b01      	ldr	r3, [sp, #4]
 8010a74:	3b01      	subs	r3, #1
 8010a76:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010a78:	9b01      	ldr	r3, [sp, #4]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d1f9      	bne.n	8010a72 <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010a7e:	2000      	movs	r0, #0
 8010a80:	e01f      	b.n	8010ac2 <HAL_ADC_ConfigChannel+0x11a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a84:	2001      	movs	r0, #1
 8010a86:	680d      	ldr	r5, [r1, #0]
 8010a88:	40a8      	lsls	r0, r5
 8010a8a:	4382      	bics	r2, r0
 8010a8c:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010a8e:	680b      	ldr	r3, [r1, #0]
 8010a90:	001a      	movs	r2, r3
 8010a92:	3a10      	subs	r2, #16
 8010a94:	2a02      	cmp	r2, #2
 8010a96:	d81b      	bhi.n	8010ad0 <HAL_ADC_ConfigChannel+0x128>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010a98:	4a10      	ldr	r2, [pc, #64]	; (8010adc <HAL_ADC_ConfigChannel+0x134>)
 8010a9a:	6812      	ldr	r2, [r2, #0]
 8010a9c:	2b10      	cmp	r3, #16
 8010a9e:	d009      	beq.n	8010ab4 <HAL_ADC_ConfigChannel+0x10c>
 8010aa0:	2b11      	cmp	r3, #17
 8010aa2:	d005      	beq.n	8010ab0 <HAL_ADC_ConfigChannel+0x108>
 8010aa4:	4b10      	ldr	r3, [pc, #64]	; (8010ae8 <HAL_ADC_ConfigChannel+0x140>)
 8010aa6:	4013      	ands	r3, r2
 8010aa8:	4a0c      	ldr	r2, [pc, #48]	; (8010adc <HAL_ADC_ConfigChannel+0x134>)
 8010aaa:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010aac:	2000      	movs	r0, #0
 8010aae:	e008      	b.n	8010ac2 <HAL_ADC_ConfigChannel+0x11a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010ab0:	4b0e      	ldr	r3, [pc, #56]	; (8010aec <HAL_ADC_ConfigChannel+0x144>)
 8010ab2:	e7f8      	b.n	8010aa6 <HAL_ADC_ConfigChannel+0xfe>
 8010ab4:	4b0e      	ldr	r3, [pc, #56]	; (8010af0 <HAL_ADC_ConfigChannel+0x148>)
 8010ab6:	e7f6      	b.n	8010aa6 <HAL_ADC_ConfigChannel+0xfe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010ab8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010aba:	2220      	movs	r2, #32
 8010abc:	4313      	orrs	r3, r2
 8010abe:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010ac0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8010ac2:	2340      	movs	r3, #64	; 0x40
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	54e2      	strb	r2, [r4, r3]
}
 8010ac8:	b003      	add	sp, #12
 8010aca:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010acc:	2000      	movs	r0, #0
 8010ace:	e7f8      	b.n	8010ac2 <HAL_ADC_ConfigChannel+0x11a>
 8010ad0:	2000      	movs	r0, #0
 8010ad2:	e7f6      	b.n	8010ac2 <HAL_ADC_ConfigChannel+0x11a>
  __HAL_LOCK(hadc);
 8010ad4:	2002      	movs	r0, #2
 8010ad6:	e7f7      	b.n	8010ac8 <HAL_ADC_ConfigChannel+0x120>
 8010ad8:	00001001 	.word	0x00001001
 8010adc:	40012708 	.word	0x40012708
 8010ae0:	200000c8 	.word	0x200000c8
 8010ae4:	000f4240 	.word	0x000f4240
 8010ae8:	feffffff 	.word	0xfeffffff
 8010aec:	ffbfffff 	.word	0xffbfffff
 8010af0:	ff7fffff 	.word	0xff7fffff

08010af4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010af4:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010af6:	2800      	cmp	r0, #0
 8010af8:	db11      	blt.n	8010b1e <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010afa:	0883      	lsrs	r3, r0, #2
 8010afc:	4d13      	ldr	r5, [pc, #76]	; (8010b4c <HAL_NVIC_SetPriority+0x58>)
 8010afe:	33c0      	adds	r3, #192	; 0xc0
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	595c      	ldr	r4, [r3, r5]
 8010b04:	2203      	movs	r2, #3
 8010b06:	4010      	ands	r0, r2
 8010b08:	00c0      	lsls	r0, r0, #3
 8010b0a:	32fc      	adds	r2, #252	; 0xfc
 8010b0c:	0016      	movs	r6, r2
 8010b0e:	4086      	lsls	r6, r0
 8010b10:	43b4      	bics	r4, r6
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010b12:	0189      	lsls	r1, r1, #6
 8010b14:	400a      	ands	r2, r1
 8010b16:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010b18:	4322      	orrs	r2, r4
 8010b1a:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010b1c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010b1e:	230f      	movs	r3, #15
 8010b20:	4003      	ands	r3, r0
 8010b22:	3b08      	subs	r3, #8
 8010b24:	089b      	lsrs	r3, r3, #2
 8010b26:	3306      	adds	r3, #6
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4a09      	ldr	r2, [pc, #36]	; (8010b50 <HAL_NVIC_SetPriority+0x5c>)
 8010b2c:	4694      	mov	ip, r2
 8010b2e:	4463      	add	r3, ip
 8010b30:	685d      	ldr	r5, [r3, #4]
 8010b32:	2403      	movs	r4, #3
 8010b34:	4020      	ands	r0, r4
 8010b36:	00c0      	lsls	r0, r0, #3
 8010b38:	22ff      	movs	r2, #255	; 0xff
 8010b3a:	0014      	movs	r4, r2
 8010b3c:	4084      	lsls	r4, r0
 8010b3e:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010b40:	0189      	lsls	r1, r1, #6
 8010b42:	400a      	ands	r2, r1
 8010b44:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010b46:	432a      	orrs	r2, r5
 8010b48:	605a      	str	r2, [r3, #4]
 8010b4a:	e7e7      	b.n	8010b1c <HAL_NVIC_SetPriority+0x28>
 8010b4c:	e000e100 	.word	0xe000e100
 8010b50:	e000ed00 	.word	0xe000ed00

08010b54 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010b54:	231f      	movs	r3, #31
 8010b56:	4018      	ands	r0, r3
 8010b58:	3b1e      	subs	r3, #30
 8010b5a:	4083      	lsls	r3, r0
 8010b5c:	4a01      	ldr	r2, [pc, #4]	; (8010b64 <HAL_NVIC_EnableIRQ+0x10>)
 8010b5e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010b60:	4770      	bx	lr
 8010b62:	46c0      	nop			; (mov r8, r8)
 8010b64:	e000e100 	.word	0xe000e100

08010b68 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010b68:	231f      	movs	r3, #31
 8010b6a:	4018      	ands	r0, r3
 8010b6c:	3b1e      	subs	r3, #30
 8010b6e:	4083      	lsls	r3, r0
 8010b70:	4901      	ldr	r1, [pc, #4]	; (8010b78 <HAL_NVIC_DisableIRQ+0x10>)
 8010b72:	2280      	movs	r2, #128	; 0x80
 8010b74:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010b76:	4770      	bx	lr
 8010b78:	e000e100 	.word	0xe000e100

08010b7c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010b7c:	3801      	subs	r0, #1
 8010b7e:	2380      	movs	r3, #128	; 0x80
 8010b80:	045b      	lsls	r3, r3, #17
 8010b82:	4298      	cmp	r0, r3
 8010b84:	d20f      	bcs.n	8010ba6 <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010b86:	4a09      	ldr	r2, [pc, #36]	; (8010bac <HAL_SYSTICK_Config+0x30>)
 8010b88:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010b8a:	4809      	ldr	r0, [pc, #36]	; (8010bb0 <HAL_SYSTICK_Config+0x34>)
 8010b8c:	6a03      	ldr	r3, [r0, #32]
 8010b8e:	021b      	lsls	r3, r3, #8
 8010b90:	0a1b      	lsrs	r3, r3, #8
 8010b92:	21c0      	movs	r1, #192	; 0xc0
 8010b94:	0609      	lsls	r1, r1, #24
 8010b96:	430b      	orrs	r3, r1
 8010b98:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010b9e:	3307      	adds	r3, #7
 8010ba0:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010ba2:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010ba4:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010ba6:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8010ba8:	e7fc      	b.n	8010ba4 <HAL_SYSTICK_Config+0x28>
 8010baa:	46c0      	nop			; (mov r8, r8)
 8010bac:	e000e010 	.word	0xe000e010
 8010bb0:	e000ed00 	.word	0xe000ed00

08010bb4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010bb4:	2804      	cmp	r0, #4
 8010bb6:	d005      	beq.n	8010bc4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010bb8:	4a05      	ldr	r2, [pc, #20]	; (8010bd0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010bba:	6813      	ldr	r3, [r2, #0]
 8010bbc:	2104      	movs	r1, #4
 8010bbe:	438b      	bics	r3, r1
 8010bc0:	6013      	str	r3, [r2, #0]
  }
}
 8010bc2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010bc4:	4a02      	ldr	r2, [pc, #8]	; (8010bd0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010bc6:	6813      	ldr	r3, [r2, #0]
 8010bc8:	2104      	movs	r1, #4
 8010bca:	430b      	orrs	r3, r1
 8010bcc:	6013      	str	r3, [r2, #0]
 8010bce:	e7f8      	b.n	8010bc2 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010bd0:	e000e010 	.word	0xe000e010

08010bd4 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010bd4:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010bd6:	2500      	movs	r5, #0
 8010bd8:	0893      	lsrs	r3, r2, #2
 8010bda:	42ab      	cmp	r3, r5
 8010bdc:	d90f      	bls.n	8010bfe <CRC_Handle_8+0x2a>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010bde:	00ac      	lsls	r4, r5, #2
 8010be0:	5d0b      	ldrb	r3, [r1, r4]
 8010be2:	061b      	lsls	r3, r3, #24
 8010be4:	190c      	adds	r4, r1, r4
 8010be6:	7866      	ldrb	r6, [r4, #1]
 8010be8:	0436      	lsls	r6, r6, #16
 8010bea:	4333      	orrs	r3, r6
 8010bec:	78a6      	ldrb	r6, [r4, #2]
 8010bee:	0236      	lsls	r6, r6, #8
 8010bf0:	4333      	orrs	r3, r6
 8010bf2:	78e6      	ldrb	r6, [r4, #3]
 8010bf4:	6804      	ldr	r4, [r0, #0]
 8010bf6:	4333      	orrs	r3, r6
 8010bf8:	6023      	str	r3, [r4, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8010bfa:	3501      	adds	r5, #1
 8010bfc:	e7ec      	b.n	8010bd8 <CRC_Handle_8+0x4>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010bfe:	2303      	movs	r3, #3
 8010c00:	001c      	movs	r4, r3
 8010c02:	4014      	ands	r4, r2
 8010c04:	4213      	tst	r3, r2
 8010c06:	d005      	beq.n	8010c14 <CRC_Handle_8+0x40>
   {
     if  (BufferLength%4 == 1)
 8010c08:	2c01      	cmp	r4, #1
 8010c0a:	d006      	beq.n	8010c1a <CRC_Handle_8+0x46>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010c0c:	2c02      	cmp	r4, #2
 8010c0e:	d009      	beq.n	8010c24 <CRC_Handle_8+0x50>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
     }
     if  (BufferLength%4 == 3)
 8010c10:	2c03      	cmp	r4, #3
 8010c12:	d010      	beq.n	8010c36 <CRC_Handle_8+0x62>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010c14:	6803      	ldr	r3, [r0, #0]
 8010c16:	6818      	ldr	r0, [r3, #0]
}
 8010c18:	bd70      	pop	{r4, r5, r6, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010c1a:	00ab      	lsls	r3, r5, #2
 8010c1c:	5ccb      	ldrb	r3, [r1, r3]
 8010c1e:	6802      	ldr	r2, [r0, #0]
 8010c20:	7013      	strb	r3, [r2, #0]
 8010c22:	e7f3      	b.n	8010c0c <CRC_Handle_8+0x38>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010c24:	00ab      	lsls	r3, r5, #2
 8010c26:	5cca      	ldrb	r2, [r1, r3]
 8010c28:	0212      	lsls	r2, r2, #8
 8010c2a:	18cb      	adds	r3, r1, r3
 8010c2c:	785b      	ldrb	r3, [r3, #1]
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	6802      	ldr	r2, [r0, #0]
 8010c32:	8013      	strh	r3, [r2, #0]
 8010c34:	e7ec      	b.n	8010c10 <CRC_Handle_8+0x3c>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010c36:	00ad      	lsls	r5, r5, #2
 8010c38:	5d4a      	ldrb	r2, [r1, r5]
 8010c3a:	0212      	lsls	r2, r2, #8
 8010c3c:	194d      	adds	r5, r1, r5
 8010c3e:	786b      	ldrb	r3, [r5, #1]
 8010c40:	4313      	orrs	r3, r2
 8010c42:	6802      	ldr	r2, [r0, #0]
 8010c44:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010c46:	78ab      	ldrb	r3, [r5, #2]
 8010c48:	6802      	ldr	r2, [r0, #0]
 8010c4a:	7013      	strb	r3, [r2, #0]
 8010c4c:	e7e2      	b.n	8010c14 <CRC_Handle_8+0x40>

08010c4e <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010c4e:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010c50:	2500      	movs	r5, #0
 8010c52:	0853      	lsrs	r3, r2, #1
 8010c54:	42ab      	cmp	r3, r5
 8010c56:	d909      	bls.n	8010c6c <CRC_Handle_16+0x1e>
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010c58:	00ac      	lsls	r4, r5, #2
 8010c5a:	5b0b      	ldrh	r3, [r1, r4]
 8010c5c:	041b      	lsls	r3, r3, #16
 8010c5e:	190c      	adds	r4, r1, r4
 8010c60:	8866      	ldrh	r6, [r4, #2]
 8010c62:	6804      	ldr	r4, [r0, #0]
 8010c64:	4333      	orrs	r3, r6
 8010c66:	6023      	str	r3, [r4, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8010c68:	3501      	adds	r5, #1
 8010c6a:	e7f2      	b.n	8010c52 <CRC_Handle_16+0x4>
  }
  if ((BufferLength%2) != 0)
 8010c6c:	07d3      	lsls	r3, r2, #31
 8010c6e:	d503      	bpl.n	8010c78 <CRC_Handle_16+0x2a>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010c70:	00ad      	lsls	r5, r5, #2
 8010c72:	5a6b      	ldrh	r3, [r5, r1]
 8010c74:	6802      	ldr	r2, [r0, #0]
 8010c76:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010c78:	6803      	ldr	r3, [r0, #0]
 8010c7a:	6818      	ldr	r0, [r3, #0]
}
 8010c7c:	bd70      	pop	{r4, r5, r6, pc}

08010c7e <HAL_CRC_Init>:
{
 8010c7e:	b510      	push	{r4, lr}
 8010c80:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010c82:	d029      	beq.n	8010cd8 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010c84:	7f43      	ldrb	r3, [r0, #29]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d01e      	beq.n	8010cc8 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010c8a:	2302      	movs	r3, #2
 8010c8c:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010c8e:	0020      	movs	r0, r4
 8010c90:	f000 f8a8 	bl	8010de4 <HAL_CRCEx_Init>
 8010c94:	2800      	cmp	r0, #0
 8010c96:	d121      	bne.n	8010cdc <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010c98:	7963      	ldrb	r3, [r4, #5]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d118      	bne.n	8010cd0 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010c9e:	6823      	ldr	r3, [r4, #0]
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	4252      	negs	r2, r2
 8010ca4:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010ca6:	6822      	ldr	r2, [r4, #0]
 8010ca8:	6893      	ldr	r3, [r2, #8]
 8010caa:	2160      	movs	r1, #96	; 0x60
 8010cac:	438b      	bics	r3, r1
 8010cae:	6961      	ldr	r1, [r4, #20]
 8010cb0:	430b      	orrs	r3, r1
 8010cb2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010cb4:	6822      	ldr	r2, [r4, #0]
 8010cb6:	6893      	ldr	r3, [r2, #8]
 8010cb8:	2180      	movs	r1, #128	; 0x80
 8010cba:	438b      	bics	r3, r1
 8010cbc:	69a1      	ldr	r1, [r4, #24]
 8010cbe:	430b      	orrs	r3, r1
 8010cc0:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	7763      	strb	r3, [r4, #29]
}
 8010cc6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010cc8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010cca:	f7fc fc57 	bl	800d57c <HAL_CRC_MspInit>
 8010cce:	e7dc      	b.n	8010c8a <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010cd0:	6823      	ldr	r3, [r4, #0]
 8010cd2:	6922      	ldr	r2, [r4, #16]
 8010cd4:	611a      	str	r2, [r3, #16]
 8010cd6:	e7e6      	b.n	8010ca6 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010cd8:	2001      	movs	r0, #1
 8010cda:	e7f4      	b.n	8010cc6 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010cdc:	2001      	movs	r0, #1
 8010cde:	e7f2      	b.n	8010cc6 <HAL_CRC_Init+0x48>

08010ce0 <HAL_CRC_Accumulate>:
{
 8010ce0:	b570      	push	{r4, r5, r6, lr}
 8010ce2:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010ce4:	7f03      	ldrb	r3, [r0, #28]
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d022      	beq.n	8010d30 <HAL_CRC_Accumulate+0x50>
 8010cea:	2301      	movs	r3, #1
 8010cec:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010cee:	3301      	adds	r3, #1
 8010cf0:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010cf2:	6a03      	ldr	r3, [r0, #32]
 8010cf4:	2b02      	cmp	r3, #2
 8010cf6:	d018      	beq.n	8010d2a <HAL_CRC_Accumulate+0x4a>
 8010cf8:	2b03      	cmp	r3, #3
 8010cfa:	d011      	beq.n	8010d20 <HAL_CRC_Accumulate+0x40>
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d011      	beq.n	8010d24 <HAL_CRC_Accumulate+0x44>
 8010d00:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010d02:	2301      	movs	r3, #1
 8010d04:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010d06:	2300      	movs	r3, #0
 8010d08:	7723      	strb	r3, [r4, #28]
}
 8010d0a:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 8010d0c:	6820      	ldr	r0, [r4, #0]
 8010d0e:	009d      	lsls	r5, r3, #2
 8010d10:	586d      	ldr	r5, [r5, r1]
 8010d12:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010d14:	3301      	adds	r3, #1
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d3f8      	bcc.n	8010d0c <HAL_CRC_Accumulate+0x2c>
      temp = hcrc->Instance->DR;
 8010d1a:	6823      	ldr	r3, [r4, #0]
 8010d1c:	6818      	ldr	r0, [r3, #0]
      break;
 8010d1e:	e7f0      	b.n	8010d02 <HAL_CRC_Accumulate+0x22>
  switch (hcrc->InputDataFormat)
 8010d20:	2300      	movs	r3, #0
 8010d22:	e7f8      	b.n	8010d16 <HAL_CRC_Accumulate+0x36>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010d24:	f7ff ff56 	bl	8010bd4 <CRC_Handle_8>
      break;
 8010d28:	e7eb      	b.n	8010d02 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010d2a:	f7ff ff90 	bl	8010c4e <CRC_Handle_16>
      break;
 8010d2e:	e7e8      	b.n	8010d02 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010d30:	2002      	movs	r0, #2
 8010d32:	e7ea      	b.n	8010d0a <HAL_CRC_Accumulate+0x2a>

08010d34 <HAL_CRC_Calculate>:
{
 8010d34:	b570      	push	{r4, r5, r6, lr}
 8010d36:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010d38:	7f03      	ldrb	r3, [r0, #28]
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	d028      	beq.n	8010d90 <HAL_CRC_Calculate+0x5c>
 8010d3e:	2501      	movs	r5, #1
 8010d40:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010d42:	2302      	movs	r3, #2
 8010d44:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010d46:	6800      	ldr	r0, [r0, #0]
 8010d48:	6883      	ldr	r3, [r0, #8]
 8010d4a:	432b      	orrs	r3, r5
 8010d4c:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010d4e:	6a23      	ldr	r3, [r4, #32]
 8010d50:	2b02      	cmp	r3, #2
 8010d52:	d019      	beq.n	8010d88 <HAL_CRC_Calculate+0x54>
 8010d54:	2b03      	cmp	r3, #3
 8010d56:	d011      	beq.n	8010d7c <HAL_CRC_Calculate+0x48>
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d011      	beq.n	8010d80 <HAL_CRC_Calculate+0x4c>
 8010d5c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010d5e:	2301      	movs	r3, #1
 8010d60:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010d62:	2300      	movs	r3, #0
 8010d64:	7723      	strb	r3, [r4, #28]
}
 8010d66:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 8010d68:	6820      	ldr	r0, [r4, #0]
 8010d6a:	009d      	lsls	r5, r3, #2
 8010d6c:	586d      	ldr	r5, [r5, r1]
 8010d6e:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010d70:	3301      	adds	r3, #1
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d3f8      	bcc.n	8010d68 <HAL_CRC_Calculate+0x34>
      temp = hcrc->Instance->DR;
 8010d76:	6823      	ldr	r3, [r4, #0]
 8010d78:	6818      	ldr	r0, [r3, #0]
      break;
 8010d7a:	e7f0      	b.n	8010d5e <HAL_CRC_Calculate+0x2a>
  switch (hcrc->InputDataFormat)
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	e7f8      	b.n	8010d72 <HAL_CRC_Calculate+0x3e>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010d80:	0020      	movs	r0, r4
 8010d82:	f7ff ff27 	bl	8010bd4 <CRC_Handle_8>
      break;
 8010d86:	e7ea      	b.n	8010d5e <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010d88:	0020      	movs	r0, r4
 8010d8a:	f7ff ff60 	bl	8010c4e <CRC_Handle_16>
      break;
 8010d8e:	e7e6      	b.n	8010d5e <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010d90:	2002      	movs	r0, #2
 8010d92:	e7e8      	b.n	8010d66 <HAL_CRC_Calculate+0x32>

08010d94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010d94:	b510      	push	{r4, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010d96:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010d98:	e000      	b.n	8010d9c <HAL_CRCEx_Polynomial_Set+0x8>
 8010d9a:	001c      	movs	r4, r3
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	40a3      	lsls	r3, r4
 8010da0:	4219      	tst	r1, r3
 8010da2:	d103      	bne.n	8010dac <HAL_CRCEx_Polynomial_Set+0x18>
 8010da4:	1e63      	subs	r3, r4, #1
 8010da6:	2c00      	cmp	r4, #0
 8010da8:	d1f7      	bne.n	8010d9a <HAL_CRCEx_Polynomial_Set+0x6>
 8010daa:	001c      	movs	r4, r3
  {}

  switch (PolyLength)
 8010dac:	2a10      	cmp	r2, #16
 8010dae:	d011      	beq.n	8010dd4 <HAL_CRCEx_Polynomial_Set+0x40>
 8010db0:	2a18      	cmp	r2, #24
 8010db2:	d00b      	beq.n	8010dcc <HAL_CRCEx_Polynomial_Set+0x38>
 8010db4:	2a08      	cmp	r2, #8
 8010db6:	d011      	beq.n	8010ddc <HAL_CRCEx_Polynomial_Set+0x48>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010db8:	6803      	ldr	r3, [r0, #0]
 8010dba:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010dbc:	6801      	ldr	r1, [r0, #0]
 8010dbe:	688b      	ldr	r3, [r1, #8]
 8010dc0:	2018      	movs	r0, #24
 8010dc2:	4383      	bics	r3, r0
 8010dc4:	431a      	orrs	r2, r3
 8010dc6:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010dc8:	2000      	movs	r0, #0
}
 8010dca:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010dcc:	2c06      	cmp	r4, #6
 8010dce:	d9f3      	bls.n	8010db8 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8010dd0:	2001      	movs	r0, #1
 8010dd2:	e7fa      	b.n	8010dca <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 8010dd4:	2c07      	cmp	r4, #7
 8010dd6:	d9ef      	bls.n	8010db8 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8010dd8:	2001      	movs	r0, #1
 8010dda:	e7f6      	b.n	8010dca <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 8010ddc:	2c0f      	cmp	r4, #15
 8010dde:	d9eb      	bls.n	8010db8 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8010de0:	2001      	movs	r0, #1
 8010de2:	e7f2      	b.n	8010dca <HAL_CRCEx_Polynomial_Set+0x36>

08010de4 <HAL_CRCEx_Init>:
{
 8010de4:	b510      	push	{r4, lr}
 8010de6:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010de8:	7900      	ldrb	r0, [r0, #4]
 8010dea:	2800      	cmp	r0, #0
 8010dec:	d108      	bne.n	8010e00 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	4908      	ldr	r1, [pc, #32]	; (8010e14 <HAL_CRCEx_Init+0x30>)
 8010df2:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	6893      	ldr	r3, [r2, #8]
 8010df8:	2118      	movs	r1, #24
 8010dfa:	438b      	bics	r3, r1
 8010dfc:	6093      	str	r3, [r2, #8]
}
 8010dfe:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010e00:	68da      	ldr	r2, [r3, #12]
 8010e02:	6899      	ldr	r1, [r3, #8]
 8010e04:	0018      	movs	r0, r3
 8010e06:	f7ff ffc5 	bl	8010d94 <HAL_CRCEx_Polynomial_Set>
 8010e0a:	2800      	cmp	r0, #0
 8010e0c:	d0f7      	beq.n	8010dfe <HAL_CRCEx_Init+0x1a>
      return HAL_ERROR;
 8010e0e:	2001      	movs	r0, #1
 8010e10:	e7f5      	b.n	8010dfe <HAL_CRCEx_Init+0x1a>
 8010e12:	46c0      	nop			; (mov r8, r8)
 8010e14:	04c11db7 	.word	0x04c11db7

08010e18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8010e18:	b510      	push	{r4, lr}
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010e1a:	6804      	ldr	r4, [r0, #0]
 8010e1c:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010e1e:	6843      	ldr	r3, [r0, #4]
 8010e20:	2b10      	cmp	r3, #16
 8010e22:	d004      	beq.n	8010e2e <DMA_SetConfig+0x16>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010e24:	6803      	ldr	r3, [r0, #0]
 8010e26:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010e28:	6803      	ldr	r3, [r0, #0]
 8010e2a:	60da      	str	r2, [r3, #12]
  }
}
 8010e2c:	bd10      	pop	{r4, pc}
    hdma->Instance->CPAR = DstAddress;
 8010e2e:	6803      	ldr	r3, [r0, #0]
 8010e30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010e32:	6803      	ldr	r3, [r0, #0]
 8010e34:	60d9      	str	r1, [r3, #12]
 8010e36:	e7f9      	b.n	8010e2c <DMA_SetConfig+0x14>

08010e38 <HAL_DMA_Init>:
{ 
 8010e38:	b530      	push	{r4, r5, lr}
  if(hdma == NULL)
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	d022      	beq.n	8010e84 <HAL_DMA_Init+0x4c>
  if(hdma->State == HAL_DMA_STATE_RESET)
 8010e3e:	2321      	movs	r3, #33	; 0x21
 8010e40:	5cc3      	ldrb	r3, [r0, r3]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d102      	bne.n	8010e4c <HAL_DMA_Init+0x14>
    hdma->Lock = HAL_UNLOCKED;
 8010e46:	3320      	adds	r3, #32
 8010e48:	2200      	movs	r2, #0
 8010e4a:	54c2      	strb	r2, [r0, r3]
  hdma->State = HAL_DMA_STATE_BUSY;
 8010e4c:	2121      	movs	r1, #33	; 0x21
 8010e4e:	2302      	movs	r3, #2
 8010e50:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 8010e52:	6804      	ldr	r4, [r0, #0]
 8010e54:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010e56:	4a0c      	ldr	r2, [pc, #48]	; (8010e88 <HAL_DMA_Init+0x50>)
 8010e58:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8010e5a:	6843      	ldr	r3, [r0, #4]
 8010e5c:	6885      	ldr	r5, [r0, #8]
 8010e5e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010e60:	68c5      	ldr	r5, [r0, #12]
 8010e62:	432b      	orrs	r3, r5
 8010e64:	6905      	ldr	r5, [r0, #16]
 8010e66:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010e68:	6945      	ldr	r5, [r0, #20]
 8010e6a:	432b      	orrs	r3, r5
 8010e6c:	6985      	ldr	r5, [r0, #24]
 8010e6e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010e70:	69c5      	ldr	r5, [r0, #28]
 8010e72:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010e74:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8010e76:	6023      	str	r3, [r4, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State  = HAL_DMA_STATE_READY;
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	5443      	strb	r3, [r0, r1]
  return HAL_OK;
 8010e80:	2000      	movs	r0, #0
}  
 8010e82:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010e84:	2001      	movs	r0, #1
 8010e86:	e7fc      	b.n	8010e82 <HAL_DMA_Init+0x4a>
 8010e88:	ffffc00f 	.word	0xffffc00f

08010e8c <HAL_DMA_Start_IT>:
{
 8010e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8010e90:	2020      	movs	r0, #32
 8010e92:	5c20      	ldrb	r0, [r4, r0]
 8010e94:	2801      	cmp	r0, #1
 8010e96:	d020      	beq.n	8010eda <HAL_DMA_Start_IT+0x4e>
 8010e98:	2501      	movs	r5, #1
 8010e9a:	2020      	movs	r0, #32
 8010e9c:	5425      	strb	r5, [r4, r0]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010e9e:	2602      	movs	r6, #2
 8010ea0:	3001      	adds	r0, #1
 8010ea2:	5426      	strb	r6, [r4, r0]
  __HAL_DMA_DISABLE(hdma);
 8010ea4:	6827      	ldr	r7, [r4, #0]
 8010ea6:	6838      	ldr	r0, [r7, #0]
 8010ea8:	43a8      	bics	r0, r5
 8010eaa:	6038      	str	r0, [r7, #0]
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010eac:	0020      	movs	r0, r4
 8010eae:	f7ff ffb3 	bl	8010e18 <DMA_SetConfig>
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010eb2:	6822      	ldr	r2, [r4, #0]
 8010eb4:	6813      	ldr	r3, [r2, #0]
 8010eb6:	4333      	orrs	r3, r6
 8010eb8:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010eba:	6822      	ldr	r2, [r4, #0]
 8010ebc:	6813      	ldr	r3, [r2, #0]
 8010ebe:	2104      	movs	r1, #4
 8010ec0:	430b      	orrs	r3, r1
 8010ec2:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010ec4:	6822      	ldr	r2, [r4, #0]
 8010ec6:	6813      	ldr	r3, [r2, #0]
 8010ec8:	3104      	adds	r1, #4
 8010eca:	430b      	orrs	r3, r1
 8010ecc:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010ece:	6822      	ldr	r2, [r4, #0]
 8010ed0:	6813      	ldr	r3, [r2, #0]
 8010ed2:	432b      	orrs	r3, r5
 8010ed4:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010ed6:	2000      	movs	r0, #0
} 
 8010ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8010eda:	2002      	movs	r0, #2
 8010edc:	e7fc      	b.n	8010ed8 <HAL_DMA_Start_IT+0x4c>

08010ede <HAL_DMA_Abort>:
{
 8010ede:	b570      	push	{r4, r5, r6, lr}
 8010ee0:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010ee2:	6802      	ldr	r2, [r0, #0]
 8010ee4:	6813      	ldr	r3, [r2, #0]
 8010ee6:	2101      	movs	r1, #1
 8010ee8:	438b      	bics	r3, r1
 8010eea:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010eec:	f7ff fb0e 	bl	801050c <HAL_GetTick>
 8010ef0:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010ef2:	6823      	ldr	r3, [r4, #0]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	07db      	lsls	r3, r3, #31
 8010ef8:	d511      	bpl.n	8010f1e <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010efa:	f7ff fb07 	bl	801050c <HAL_GetTick>
 8010efe:	1b40      	subs	r0, r0, r5
 8010f00:	23fa      	movs	r3, #250	; 0xfa
 8010f02:	009b      	lsls	r3, r3, #2
 8010f04:	4298      	cmp	r0, r3
 8010f06:	d9f4      	bls.n	8010ef2 <HAL_DMA_Abort+0x14>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010f08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f0a:	2220      	movs	r2, #32
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010f10:	2321      	movs	r3, #33	; 0x21
 8010f12:	2103      	movs	r1, #3
 8010f14:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010f16:	2300      	movs	r3, #0
 8010f18:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010f1a:	2003      	movs	r0, #3
 8010f1c:	e006      	b.n	8010f2c <HAL_DMA_Abort+0x4e>
  hdma->State = HAL_DMA_STATE_READY; 
 8010f1e:	2321      	movs	r3, #33	; 0x21
 8010f20:	2201      	movs	r2, #1
 8010f22:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010f24:	3b01      	subs	r3, #1
 8010f26:	2200      	movs	r2, #0
 8010f28:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010f2a:	2000      	movs	r0, #0
}
 8010f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010f30 <HAL_DMA_IRQHandler>:
{        
 8010f30:	b510      	push	{r4, lr}
 8010f32:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010f34:	6802      	ldr	r2, [r0, #0]
 8010f36:	4bb6      	ldr	r3, [pc, #728]	; (8011210 <HAL_DMA_IRQHandler+0x2e0>)
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d800      	bhi.n	8010f3e <HAL_DMA_IRQHandler+0xe>
 8010f3c:	e083      	b.n	8011046 <HAL_DMA_IRQHandler+0x116>
 8010f3e:	4bb5      	ldr	r3, [pc, #724]	; (8011214 <HAL_DMA_IRQHandler+0x2e4>)
 8010f40:	6819      	ldr	r1, [r3, #0]
 8010f42:	4bb5      	ldr	r3, [pc, #724]	; (8011218 <HAL_DMA_IRQHandler+0x2e8>)
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d023      	beq.n	8010f90 <HAL_DMA_IRQHandler+0x60>
 8010f48:	4bb4      	ldr	r3, [pc, #720]	; (801121c <HAL_DMA_IRQHandler+0x2ec>)
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d063      	beq.n	8011016 <HAL_DMA_IRQHandler+0xe6>
 8010f4e:	4bb4      	ldr	r3, [pc, #720]	; (8011220 <HAL_DMA_IRQHandler+0x2f0>)
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d062      	beq.n	801101a <HAL_DMA_IRQHandler+0xea>
 8010f54:	4bb3      	ldr	r3, [pc, #716]	; (8011224 <HAL_DMA_IRQHandler+0x2f4>)
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d062      	beq.n	8011020 <HAL_DMA_IRQHandler+0xf0>
 8010f5a:	4bb3      	ldr	r3, [pc, #716]	; (8011228 <HAL_DMA_IRQHandler+0x2f8>)
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d062      	beq.n	8011026 <HAL_DMA_IRQHandler+0xf6>
 8010f60:	4bb2      	ldr	r3, [pc, #712]	; (801122c <HAL_DMA_IRQHandler+0x2fc>)
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d062      	beq.n	801102c <HAL_DMA_IRQHandler+0xfc>
 8010f66:	4baa      	ldr	r3, [pc, #680]	; (8011210 <HAL_DMA_IRQHandler+0x2e0>)
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d062      	beq.n	8011032 <HAL_DMA_IRQHandler+0x102>
 8010f6c:	4bb0      	ldr	r3, [pc, #704]	; (8011230 <HAL_DMA_IRQHandler+0x300>)
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d062      	beq.n	8011038 <HAL_DMA_IRQHandler+0x108>
 8010f72:	4bb0      	ldr	r3, [pc, #704]	; (8011234 <HAL_DMA_IRQHandler+0x304>)
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d061      	beq.n	801103c <HAL_DMA_IRQHandler+0x10c>
 8010f78:	4baf      	ldr	r3, [pc, #700]	; (8011238 <HAL_DMA_IRQHandler+0x308>)
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d060      	beq.n	8011040 <HAL_DMA_IRQHandler+0x110>
 8010f7e:	4baf      	ldr	r3, [pc, #700]	; (801123c <HAL_DMA_IRQHandler+0x30c>)
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d002      	beq.n	8010f8a <HAL_DMA_IRQHandler+0x5a>
 8010f84:	2380      	movs	r3, #128	; 0x80
 8010f86:	031b      	lsls	r3, r3, #12
 8010f88:	e003      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 8010f8a:	2380      	movs	r3, #128	; 0x80
 8010f8c:	021b      	lsls	r3, r3, #8
 8010f8e:	e000      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 8010f90:	2308      	movs	r3, #8
 8010f92:	400b      	ands	r3, r1
 8010f94:	1e59      	subs	r1, r3, #1
 8010f96:	418b      	sbcs	r3, r1
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d100      	bne.n	8010fa0 <HAL_DMA_IRQHandler+0x70>
 8010f9e:	e0ae      	b.n	80110fe <HAL_DMA_IRQHandler+0x1ce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010fa0:	6813      	ldr	r3, [r2, #0]
 8010fa2:	071b      	lsls	r3, r3, #28
 8010fa4:	d400      	bmi.n	8010fa8 <HAL_DMA_IRQHandler+0x78>
 8010fa6:	e0aa      	b.n	80110fe <HAL_DMA_IRQHandler+0x1ce>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010fa8:	6813      	ldr	r3, [r2, #0]
 8010faa:	2108      	movs	r1, #8
 8010fac:	438b      	bics	r3, r1
 8010fae:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010fb0:	6823      	ldr	r3, [r4, #0]
 8010fb2:	4a97      	ldr	r2, [pc, #604]	; (8011210 <HAL_DMA_IRQHandler+0x2e0>)
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	d800      	bhi.n	8010fba <HAL_DMA_IRQHandler+0x8a>
 8010fb8:	e0ee      	b.n	8011198 <HAL_DMA_IRQHandler+0x268>
 8010fba:	4a97      	ldr	r2, [pc, #604]	; (8011218 <HAL_DMA_IRQHandler+0x2e8>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d100      	bne.n	8010fc2 <HAL_DMA_IRQHandler+0x92>
 8010fc0:	e08b      	b.n	80110da <HAL_DMA_IRQHandler+0x1aa>
 8010fc2:	4a96      	ldr	r2, [pc, #600]	; (801121c <HAL_DMA_IRQHandler+0x2ec>)
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d100      	bne.n	8010fca <HAL_DMA_IRQHandler+0x9a>
 8010fc8:	e0ce      	b.n	8011168 <HAL_DMA_IRQHandler+0x238>
 8010fca:	4a95      	ldr	r2, [pc, #596]	; (8011220 <HAL_DMA_IRQHandler+0x2f0>)
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d100      	bne.n	8010fd2 <HAL_DMA_IRQHandler+0xa2>
 8010fd0:	e0cc      	b.n	801116c <HAL_DMA_IRQHandler+0x23c>
 8010fd2:	4a94      	ldr	r2, [pc, #592]	; (8011224 <HAL_DMA_IRQHandler+0x2f4>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d100      	bne.n	8010fda <HAL_DMA_IRQHandler+0xaa>
 8010fd8:	e0cb      	b.n	8011172 <HAL_DMA_IRQHandler+0x242>
 8010fda:	4a93      	ldr	r2, [pc, #588]	; (8011228 <HAL_DMA_IRQHandler+0x2f8>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d100      	bne.n	8010fe2 <HAL_DMA_IRQHandler+0xb2>
 8010fe0:	e0ca      	b.n	8011178 <HAL_DMA_IRQHandler+0x248>
 8010fe2:	4a92      	ldr	r2, [pc, #584]	; (801122c <HAL_DMA_IRQHandler+0x2fc>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d100      	bne.n	8010fea <HAL_DMA_IRQHandler+0xba>
 8010fe8:	e0c9      	b.n	801117e <HAL_DMA_IRQHandler+0x24e>
 8010fea:	4a89      	ldr	r2, [pc, #548]	; (8011210 <HAL_DMA_IRQHandler+0x2e0>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d100      	bne.n	8010ff2 <HAL_DMA_IRQHandler+0xc2>
 8010ff0:	e0c8      	b.n	8011184 <HAL_DMA_IRQHandler+0x254>
 8010ff2:	4a8f      	ldr	r2, [pc, #572]	; (8011230 <HAL_DMA_IRQHandler+0x300>)
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d100      	bne.n	8010ffa <HAL_DMA_IRQHandler+0xca>
 8010ff8:	e0c7      	b.n	801118a <HAL_DMA_IRQHandler+0x25a>
 8010ffa:	4a8e      	ldr	r2, [pc, #568]	; (8011234 <HAL_DMA_IRQHandler+0x304>)
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d100      	bne.n	8011002 <HAL_DMA_IRQHandler+0xd2>
 8011000:	e0c5      	b.n	801118e <HAL_DMA_IRQHandler+0x25e>
 8011002:	4a8d      	ldr	r2, [pc, #564]	; (8011238 <HAL_DMA_IRQHandler+0x308>)
 8011004:	4293      	cmp	r3, r2
 8011006:	d100      	bne.n	801100a <HAL_DMA_IRQHandler+0xda>
 8011008:	e0c3      	b.n	8011192 <HAL_DMA_IRQHandler+0x262>
 801100a:	4a8c      	ldr	r2, [pc, #560]	; (801123c <HAL_DMA_IRQHandler+0x30c>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d061      	beq.n	80110d4 <HAL_DMA_IRQHandler+0x1a4>
 8011010:	2280      	movs	r2, #128	; 0x80
 8011012:	0312      	lsls	r2, r2, #12
 8011014:	e062      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011016:	2380      	movs	r3, #128	; 0x80
 8011018:	e7bb      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 801101a:	2380      	movs	r3, #128	; 0x80
 801101c:	011b      	lsls	r3, r3, #4
 801101e:	e7b8      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 8011020:	2380      	movs	r3, #128	; 0x80
 8011022:	021b      	lsls	r3, r3, #8
 8011024:	e7b5      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 8011026:	2380      	movs	r3, #128	; 0x80
 8011028:	031b      	lsls	r3, r3, #12
 801102a:	e7b2      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 801102c:	2380      	movs	r3, #128	; 0x80
 801102e:	041b      	lsls	r3, r3, #16
 8011030:	e7af      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 8011032:	2380      	movs	r3, #128	; 0x80
 8011034:	051b      	lsls	r3, r3, #20
 8011036:	e7ac      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 8011038:	2308      	movs	r3, #8
 801103a:	e7aa      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 801103c:	2380      	movs	r3, #128	; 0x80
 801103e:	e7a8      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 8011040:	2380      	movs	r3, #128	; 0x80
 8011042:	011b      	lsls	r3, r3, #4
 8011044:	e7a5      	b.n	8010f92 <HAL_DMA_IRQHandler+0x62>
 8011046:	4b7e      	ldr	r3, [pc, #504]	; (8011240 <HAL_DMA_IRQHandler+0x310>)
 8011048:	6819      	ldr	r1, [r3, #0]
 801104a:	4b73      	ldr	r3, [pc, #460]	; (8011218 <HAL_DMA_IRQHandler+0x2e8>)
 801104c:	429a      	cmp	r2, r3
 801104e:	d023      	beq.n	8011098 <HAL_DMA_IRQHandler+0x168>
 8011050:	4b72      	ldr	r3, [pc, #456]	; (801121c <HAL_DMA_IRQHandler+0x2ec>)
 8011052:	429a      	cmp	r2, r3
 8011054:	d026      	beq.n	80110a4 <HAL_DMA_IRQHandler+0x174>
 8011056:	4b72      	ldr	r3, [pc, #456]	; (8011220 <HAL_DMA_IRQHandler+0x2f0>)
 8011058:	429a      	cmp	r2, r3
 801105a:	d025      	beq.n	80110a8 <HAL_DMA_IRQHandler+0x178>
 801105c:	4b71      	ldr	r3, [pc, #452]	; (8011224 <HAL_DMA_IRQHandler+0x2f4>)
 801105e:	429a      	cmp	r2, r3
 8011060:	d025      	beq.n	80110ae <HAL_DMA_IRQHandler+0x17e>
 8011062:	4b71      	ldr	r3, [pc, #452]	; (8011228 <HAL_DMA_IRQHandler+0x2f8>)
 8011064:	429a      	cmp	r2, r3
 8011066:	d025      	beq.n	80110b4 <HAL_DMA_IRQHandler+0x184>
 8011068:	4b70      	ldr	r3, [pc, #448]	; (801122c <HAL_DMA_IRQHandler+0x2fc>)
 801106a:	429a      	cmp	r2, r3
 801106c:	d025      	beq.n	80110ba <HAL_DMA_IRQHandler+0x18a>
 801106e:	4b68      	ldr	r3, [pc, #416]	; (8011210 <HAL_DMA_IRQHandler+0x2e0>)
 8011070:	429a      	cmp	r2, r3
 8011072:	d025      	beq.n	80110c0 <HAL_DMA_IRQHandler+0x190>
 8011074:	4b6e      	ldr	r3, [pc, #440]	; (8011230 <HAL_DMA_IRQHandler+0x300>)
 8011076:	429a      	cmp	r2, r3
 8011078:	d025      	beq.n	80110c6 <HAL_DMA_IRQHandler+0x196>
 801107a:	4b6e      	ldr	r3, [pc, #440]	; (8011234 <HAL_DMA_IRQHandler+0x304>)
 801107c:	429a      	cmp	r2, r3
 801107e:	d024      	beq.n	80110ca <HAL_DMA_IRQHandler+0x19a>
 8011080:	4b6d      	ldr	r3, [pc, #436]	; (8011238 <HAL_DMA_IRQHandler+0x308>)
 8011082:	429a      	cmp	r2, r3
 8011084:	d023      	beq.n	80110ce <HAL_DMA_IRQHandler+0x19e>
 8011086:	4b6d      	ldr	r3, [pc, #436]	; (801123c <HAL_DMA_IRQHandler+0x30c>)
 8011088:	429a      	cmp	r2, r3
 801108a:	d002      	beq.n	8011092 <HAL_DMA_IRQHandler+0x162>
 801108c:	2380      	movs	r3, #128	; 0x80
 801108e:	031b      	lsls	r3, r3, #12
 8011090:	e003      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
 8011092:	2380      	movs	r3, #128	; 0x80
 8011094:	021b      	lsls	r3, r3, #8
 8011096:	e000      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
 8011098:	2308      	movs	r3, #8
 801109a:	400b      	ands	r3, r1
 801109c:	1e59      	subs	r1, r3, #1
 801109e:	418b      	sbcs	r3, r1
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	e77a      	b.n	8010f9a <HAL_DMA_IRQHandler+0x6a>
 80110a4:	2380      	movs	r3, #128	; 0x80
 80110a6:	e7f8      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
 80110a8:	2380      	movs	r3, #128	; 0x80
 80110aa:	011b      	lsls	r3, r3, #4
 80110ac:	e7f5      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
 80110ae:	2380      	movs	r3, #128	; 0x80
 80110b0:	021b      	lsls	r3, r3, #8
 80110b2:	e7f2      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
 80110b4:	2380      	movs	r3, #128	; 0x80
 80110b6:	031b      	lsls	r3, r3, #12
 80110b8:	e7ef      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
 80110ba:	2380      	movs	r3, #128	; 0x80
 80110bc:	041b      	lsls	r3, r3, #16
 80110be:	e7ec      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
 80110c0:	2380      	movs	r3, #128	; 0x80
 80110c2:	051b      	lsls	r3, r3, #20
 80110c4:	e7e9      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
 80110c6:	2308      	movs	r3, #8
 80110c8:	e7e7      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
 80110ca:	2380      	movs	r3, #128	; 0x80
 80110cc:	e7e5      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
 80110ce:	2380      	movs	r3, #128	; 0x80
 80110d0:	011b      	lsls	r3, r3, #4
 80110d2:	e7e2      	b.n	801109a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80110d4:	2280      	movs	r2, #128	; 0x80
 80110d6:	0212      	lsls	r2, r2, #8
 80110d8:	e000      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
 80110da:	2208      	movs	r2, #8
 80110dc:	4b4d      	ldr	r3, [pc, #308]	; (8011214 <HAL_DMA_IRQHandler+0x2e4>)
 80110de:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80110e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110e2:	2201      	movs	r2, #1
 80110e4:	4313      	orrs	r3, r2
 80110e6:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80110e8:	2321      	movs	r3, #33	; 0x21
 80110ea:	3203      	adds	r2, #3
 80110ec:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 80110ee:	3b01      	subs	r3, #1
 80110f0:	2200      	movs	r2, #0
 80110f2:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80110f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d001      	beq.n	80110fe <HAL_DMA_IRQHandler+0x1ce>
        hdma->XferErrorCallback(hdma);
 80110fa:	0020      	movs	r0, r4
 80110fc:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80110fe:	6822      	ldr	r2, [r4, #0]
 8011100:	4b43      	ldr	r3, [pc, #268]	; (8011210 <HAL_DMA_IRQHandler+0x2e0>)
 8011102:	429a      	cmp	r2, r3
 8011104:	d800      	bhi.n	8011108 <HAL_DMA_IRQHandler+0x1d8>
 8011106:	e105      	b.n	8011314 <HAL_DMA_IRQHandler+0x3e4>
 8011108:	4b42      	ldr	r3, [pc, #264]	; (8011214 <HAL_DMA_IRQHandler+0x2e4>)
 801110a:	6819      	ldr	r1, [r3, #0]
 801110c:	4b42      	ldr	r3, [pc, #264]	; (8011218 <HAL_DMA_IRQHandler+0x2e8>)
 801110e:	429a      	cmp	r2, r3
 8011110:	d100      	bne.n	8011114 <HAL_DMA_IRQHandler+0x1e4>
 8011112:	e0a1      	b.n	8011258 <HAL_DMA_IRQHandler+0x328>
 8011114:	4b41      	ldr	r3, [pc, #260]	; (801121c <HAL_DMA_IRQHandler+0x2ec>)
 8011116:	429a      	cmp	r2, r3
 8011118:	d100      	bne.n	801111c <HAL_DMA_IRQHandler+0x1ec>
 801111a:	e0e3      	b.n	80112e4 <HAL_DMA_IRQHandler+0x3b4>
 801111c:	4b40      	ldr	r3, [pc, #256]	; (8011220 <HAL_DMA_IRQHandler+0x2f0>)
 801111e:	429a      	cmp	r2, r3
 8011120:	d100      	bne.n	8011124 <HAL_DMA_IRQHandler+0x1f4>
 8011122:	e0e1      	b.n	80112e8 <HAL_DMA_IRQHandler+0x3b8>
 8011124:	4b3f      	ldr	r3, [pc, #252]	; (8011224 <HAL_DMA_IRQHandler+0x2f4>)
 8011126:	429a      	cmp	r2, r3
 8011128:	d100      	bne.n	801112c <HAL_DMA_IRQHandler+0x1fc>
 801112a:	e0e0      	b.n	80112ee <HAL_DMA_IRQHandler+0x3be>
 801112c:	4b3e      	ldr	r3, [pc, #248]	; (8011228 <HAL_DMA_IRQHandler+0x2f8>)
 801112e:	429a      	cmp	r2, r3
 8011130:	d100      	bne.n	8011134 <HAL_DMA_IRQHandler+0x204>
 8011132:	e0df      	b.n	80112f4 <HAL_DMA_IRQHandler+0x3c4>
 8011134:	4b3d      	ldr	r3, [pc, #244]	; (801122c <HAL_DMA_IRQHandler+0x2fc>)
 8011136:	429a      	cmp	r2, r3
 8011138:	d100      	bne.n	801113c <HAL_DMA_IRQHandler+0x20c>
 801113a:	e0de      	b.n	80112fa <HAL_DMA_IRQHandler+0x3ca>
 801113c:	4b34      	ldr	r3, [pc, #208]	; (8011210 <HAL_DMA_IRQHandler+0x2e0>)
 801113e:	429a      	cmp	r2, r3
 8011140:	d100      	bne.n	8011144 <HAL_DMA_IRQHandler+0x214>
 8011142:	e0dd      	b.n	8011300 <HAL_DMA_IRQHandler+0x3d0>
 8011144:	4b3a      	ldr	r3, [pc, #232]	; (8011230 <HAL_DMA_IRQHandler+0x300>)
 8011146:	429a      	cmp	r2, r3
 8011148:	d100      	bne.n	801114c <HAL_DMA_IRQHandler+0x21c>
 801114a:	e0dc      	b.n	8011306 <HAL_DMA_IRQHandler+0x3d6>
 801114c:	4b39      	ldr	r3, [pc, #228]	; (8011234 <HAL_DMA_IRQHandler+0x304>)
 801114e:	429a      	cmp	r2, r3
 8011150:	d100      	bne.n	8011154 <HAL_DMA_IRQHandler+0x224>
 8011152:	e0da      	b.n	801130a <HAL_DMA_IRQHandler+0x3da>
 8011154:	4b38      	ldr	r3, [pc, #224]	; (8011238 <HAL_DMA_IRQHandler+0x308>)
 8011156:	429a      	cmp	r2, r3
 8011158:	d100      	bne.n	801115c <HAL_DMA_IRQHandler+0x22c>
 801115a:	e0d8      	b.n	801130e <HAL_DMA_IRQHandler+0x3de>
 801115c:	4b37      	ldr	r3, [pc, #220]	; (801123c <HAL_DMA_IRQHandler+0x30c>)
 801115e:	429a      	cmp	r2, r3
 8011160:	d077      	beq.n	8011252 <HAL_DMA_IRQHandler+0x322>
 8011162:	2380      	movs	r3, #128	; 0x80
 8011164:	02db      	lsls	r3, r3, #11
 8011166:	e078      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011168:	2280      	movs	r2, #128	; 0x80
 801116a:	e7b7      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
 801116c:	2280      	movs	r2, #128	; 0x80
 801116e:	0112      	lsls	r2, r2, #4
 8011170:	e7b4      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
 8011172:	2280      	movs	r2, #128	; 0x80
 8011174:	0212      	lsls	r2, r2, #8
 8011176:	e7b1      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
 8011178:	2280      	movs	r2, #128	; 0x80
 801117a:	0312      	lsls	r2, r2, #12
 801117c:	e7ae      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
 801117e:	2280      	movs	r2, #128	; 0x80
 8011180:	0412      	lsls	r2, r2, #16
 8011182:	e7ab      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
 8011184:	2280      	movs	r2, #128	; 0x80
 8011186:	0512      	lsls	r2, r2, #20
 8011188:	e7a8      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
 801118a:	2208      	movs	r2, #8
 801118c:	e7a6      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
 801118e:	2280      	movs	r2, #128	; 0x80
 8011190:	e7a4      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
 8011192:	2280      	movs	r2, #128	; 0x80
 8011194:	0112      	lsls	r2, r2, #4
 8011196:	e7a1      	b.n	80110dc <HAL_DMA_IRQHandler+0x1ac>
 8011198:	4a1f      	ldr	r2, [pc, #124]	; (8011218 <HAL_DMA_IRQHandler+0x2e8>)
 801119a:	4293      	cmp	r3, r2
 801119c:	d023      	beq.n	80111e6 <HAL_DMA_IRQHandler+0x2b6>
 801119e:	4a1f      	ldr	r2, [pc, #124]	; (801121c <HAL_DMA_IRQHandler+0x2ec>)
 80111a0:	4293      	cmp	r3, r2
 80111a2:	d024      	beq.n	80111ee <HAL_DMA_IRQHandler+0x2be>
 80111a4:	4a1e      	ldr	r2, [pc, #120]	; (8011220 <HAL_DMA_IRQHandler+0x2f0>)
 80111a6:	4293      	cmp	r3, r2
 80111a8:	d023      	beq.n	80111f2 <HAL_DMA_IRQHandler+0x2c2>
 80111aa:	4a1e      	ldr	r2, [pc, #120]	; (8011224 <HAL_DMA_IRQHandler+0x2f4>)
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d023      	beq.n	80111f8 <HAL_DMA_IRQHandler+0x2c8>
 80111b0:	4a1d      	ldr	r2, [pc, #116]	; (8011228 <HAL_DMA_IRQHandler+0x2f8>)
 80111b2:	4293      	cmp	r3, r2
 80111b4:	d023      	beq.n	80111fe <HAL_DMA_IRQHandler+0x2ce>
 80111b6:	4a1d      	ldr	r2, [pc, #116]	; (801122c <HAL_DMA_IRQHandler+0x2fc>)
 80111b8:	4293      	cmp	r3, r2
 80111ba:	d023      	beq.n	8011204 <HAL_DMA_IRQHandler+0x2d4>
 80111bc:	4a14      	ldr	r2, [pc, #80]	; (8011210 <HAL_DMA_IRQHandler+0x2e0>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d023      	beq.n	801120a <HAL_DMA_IRQHandler+0x2da>
 80111c2:	4a1b      	ldr	r2, [pc, #108]	; (8011230 <HAL_DMA_IRQHandler+0x300>)
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d03d      	beq.n	8011244 <HAL_DMA_IRQHandler+0x314>
 80111c8:	4a1a      	ldr	r2, [pc, #104]	; (8011234 <HAL_DMA_IRQHandler+0x304>)
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d03c      	beq.n	8011248 <HAL_DMA_IRQHandler+0x318>
 80111ce:	4a1a      	ldr	r2, [pc, #104]	; (8011238 <HAL_DMA_IRQHandler+0x308>)
 80111d0:	4293      	cmp	r3, r2
 80111d2:	d03b      	beq.n	801124c <HAL_DMA_IRQHandler+0x31c>
 80111d4:	4a19      	ldr	r2, [pc, #100]	; (801123c <HAL_DMA_IRQHandler+0x30c>)
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d002      	beq.n	80111e0 <HAL_DMA_IRQHandler+0x2b0>
 80111da:	2280      	movs	r2, #128	; 0x80
 80111dc:	0312      	lsls	r2, r2, #12
 80111de:	e003      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
 80111e0:	2280      	movs	r2, #128	; 0x80
 80111e2:	0212      	lsls	r2, r2, #8
 80111e4:	e000      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
 80111e6:	2208      	movs	r2, #8
 80111e8:	4b15      	ldr	r3, [pc, #84]	; (8011240 <HAL_DMA_IRQHandler+0x310>)
 80111ea:	605a      	str	r2, [r3, #4]
 80111ec:	e778      	b.n	80110e0 <HAL_DMA_IRQHandler+0x1b0>
 80111ee:	2280      	movs	r2, #128	; 0x80
 80111f0:	e7fa      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
 80111f2:	2280      	movs	r2, #128	; 0x80
 80111f4:	0112      	lsls	r2, r2, #4
 80111f6:	e7f7      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
 80111f8:	2280      	movs	r2, #128	; 0x80
 80111fa:	0212      	lsls	r2, r2, #8
 80111fc:	e7f4      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
 80111fe:	2280      	movs	r2, #128	; 0x80
 8011200:	0312      	lsls	r2, r2, #12
 8011202:	e7f1      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
 8011204:	2280      	movs	r2, #128	; 0x80
 8011206:	0412      	lsls	r2, r2, #16
 8011208:	e7ee      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
 801120a:	2280      	movs	r2, #128	; 0x80
 801120c:	0512      	lsls	r2, r2, #20
 801120e:	e7eb      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
 8011210:	40020080 	.word	0x40020080
 8011214:	40020400 	.word	0x40020400
 8011218:	40020008 	.word	0x40020008
 801121c:	4002001c 	.word	0x4002001c
 8011220:	40020030 	.word	0x40020030
 8011224:	40020044 	.word	0x40020044
 8011228:	40020058 	.word	0x40020058
 801122c:	4002006c 	.word	0x4002006c
 8011230:	40020408 	.word	0x40020408
 8011234:	4002041c 	.word	0x4002041c
 8011238:	40020430 	.word	0x40020430
 801123c:	40020444 	.word	0x40020444
 8011240:	40020000 	.word	0x40020000
 8011244:	2208      	movs	r2, #8
 8011246:	e7cf      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
 8011248:	2280      	movs	r2, #128	; 0x80
 801124a:	e7cd      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
 801124c:	2280      	movs	r2, #128	; 0x80
 801124e:	0112      	lsls	r2, r2, #4
 8011250:	e7ca      	b.n	80111e8 <HAL_DMA_IRQHandler+0x2b8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011252:	2380      	movs	r3, #128	; 0x80
 8011254:	01db      	lsls	r3, r3, #7
 8011256:	e000      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
 8011258:	2304      	movs	r3, #4
 801125a:	400b      	ands	r3, r1
 801125c:	1e59      	subs	r1, r3, #1
 801125e:	418b      	sbcs	r3, r1
 8011260:	b2db      	uxtb	r3, r3
 8011262:	2b00      	cmp	r3, #0
 8011264:	d100      	bne.n	8011268 <HAL_DMA_IRQHandler+0x338>
 8011266:	e0aa      	b.n	80113be <HAL_DMA_IRQHandler+0x48e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011268:	6813      	ldr	r3, [r2, #0]
 801126a:	075b      	lsls	r3, r3, #29
 801126c:	d400      	bmi.n	8011270 <HAL_DMA_IRQHandler+0x340>
 801126e:	e0a6      	b.n	80113be <HAL_DMA_IRQHandler+0x48e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011270:	6813      	ldr	r3, [r2, #0]
 8011272:	069b      	lsls	r3, r3, #26
 8011274:	d403      	bmi.n	801127e <HAL_DMA_IRQHandler+0x34e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011276:	6813      	ldr	r3, [r2, #0]
 8011278:	2104      	movs	r1, #4
 801127a:	438b      	bics	r3, r1
 801127c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801127e:	6823      	ldr	r3, [r4, #0]
 8011280:	4a98      	ldr	r2, [pc, #608]	; (80114e4 <HAL_DMA_IRQHandler+0x5b4>)
 8011282:	4293      	cmp	r3, r2
 8011284:	d800      	bhi.n	8011288 <HAL_DMA_IRQHandler+0x358>
 8011286:	e0e7      	b.n	8011458 <HAL_DMA_IRQHandler+0x528>
 8011288:	4a97      	ldr	r2, [pc, #604]	; (80114e8 <HAL_DMA_IRQHandler+0x5b8>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d100      	bne.n	8011290 <HAL_DMA_IRQHandler+0x360>
 801128e:	e08b      	b.n	80113a8 <HAL_DMA_IRQHandler+0x478>
 8011290:	4a96      	ldr	r2, [pc, #600]	; (80114ec <HAL_DMA_IRQHandler+0x5bc>)
 8011292:	4293      	cmp	r3, r2
 8011294:	d100      	bne.n	8011298 <HAL_DMA_IRQHandler+0x368>
 8011296:	e0c7      	b.n	8011428 <HAL_DMA_IRQHandler+0x4f8>
 8011298:	4a95      	ldr	r2, [pc, #596]	; (80114f0 <HAL_DMA_IRQHandler+0x5c0>)
 801129a:	4293      	cmp	r3, r2
 801129c:	d100      	bne.n	80112a0 <HAL_DMA_IRQHandler+0x370>
 801129e:	e0c5      	b.n	801142c <HAL_DMA_IRQHandler+0x4fc>
 80112a0:	4a94      	ldr	r2, [pc, #592]	; (80114f4 <HAL_DMA_IRQHandler+0x5c4>)
 80112a2:	4293      	cmp	r3, r2
 80112a4:	d100      	bne.n	80112a8 <HAL_DMA_IRQHandler+0x378>
 80112a6:	e0c4      	b.n	8011432 <HAL_DMA_IRQHandler+0x502>
 80112a8:	4a93      	ldr	r2, [pc, #588]	; (80114f8 <HAL_DMA_IRQHandler+0x5c8>)
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d100      	bne.n	80112b0 <HAL_DMA_IRQHandler+0x380>
 80112ae:	e0c3      	b.n	8011438 <HAL_DMA_IRQHandler+0x508>
 80112b0:	4a92      	ldr	r2, [pc, #584]	; (80114fc <HAL_DMA_IRQHandler+0x5cc>)
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d100      	bne.n	80112b8 <HAL_DMA_IRQHandler+0x388>
 80112b6:	e0c2      	b.n	801143e <HAL_DMA_IRQHandler+0x50e>
 80112b8:	4a8a      	ldr	r2, [pc, #552]	; (80114e4 <HAL_DMA_IRQHandler+0x5b4>)
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d100      	bne.n	80112c0 <HAL_DMA_IRQHandler+0x390>
 80112be:	e0c1      	b.n	8011444 <HAL_DMA_IRQHandler+0x514>
 80112c0:	4a8f      	ldr	r2, [pc, #572]	; (8011500 <HAL_DMA_IRQHandler+0x5d0>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d100      	bne.n	80112c8 <HAL_DMA_IRQHandler+0x398>
 80112c6:	e0c0      	b.n	801144a <HAL_DMA_IRQHandler+0x51a>
 80112c8:	4a8e      	ldr	r2, [pc, #568]	; (8011504 <HAL_DMA_IRQHandler+0x5d4>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d100      	bne.n	80112d0 <HAL_DMA_IRQHandler+0x3a0>
 80112ce:	e0be      	b.n	801144e <HAL_DMA_IRQHandler+0x51e>
 80112d0:	4a8d      	ldr	r2, [pc, #564]	; (8011508 <HAL_DMA_IRQHandler+0x5d8>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d100      	bne.n	80112d8 <HAL_DMA_IRQHandler+0x3a8>
 80112d6:	e0bc      	b.n	8011452 <HAL_DMA_IRQHandler+0x522>
 80112d8:	4a8c      	ldr	r2, [pc, #560]	; (801150c <HAL_DMA_IRQHandler+0x5dc>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d061      	beq.n	80113a2 <HAL_DMA_IRQHandler+0x472>
 80112de:	2280      	movs	r2, #128	; 0x80
 80112e0:	02d2      	lsls	r2, r2, #11
 80112e2:	e062      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80112e4:	2340      	movs	r3, #64	; 0x40
 80112e6:	e7b8      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
 80112e8:	2380      	movs	r3, #128	; 0x80
 80112ea:	00db      	lsls	r3, r3, #3
 80112ec:	e7b5      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
 80112ee:	2380      	movs	r3, #128	; 0x80
 80112f0:	01db      	lsls	r3, r3, #7
 80112f2:	e7b2      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
 80112f4:	2380      	movs	r3, #128	; 0x80
 80112f6:	02db      	lsls	r3, r3, #11
 80112f8:	e7af      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
 80112fa:	2380      	movs	r3, #128	; 0x80
 80112fc:	03db      	lsls	r3, r3, #15
 80112fe:	e7ac      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
 8011300:	2380      	movs	r3, #128	; 0x80
 8011302:	04db      	lsls	r3, r3, #19
 8011304:	e7a9      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
 8011306:	2304      	movs	r3, #4
 8011308:	e7a7      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
 801130a:	2340      	movs	r3, #64	; 0x40
 801130c:	e7a5      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
 801130e:	2380      	movs	r3, #128	; 0x80
 8011310:	00db      	lsls	r3, r3, #3
 8011312:	e7a2      	b.n	801125a <HAL_DMA_IRQHandler+0x32a>
 8011314:	4b7e      	ldr	r3, [pc, #504]	; (8011510 <HAL_DMA_IRQHandler+0x5e0>)
 8011316:	6819      	ldr	r1, [r3, #0]
 8011318:	4b73      	ldr	r3, [pc, #460]	; (80114e8 <HAL_DMA_IRQHandler+0x5b8>)
 801131a:	429a      	cmp	r2, r3
 801131c:	d023      	beq.n	8011366 <HAL_DMA_IRQHandler+0x436>
 801131e:	4b73      	ldr	r3, [pc, #460]	; (80114ec <HAL_DMA_IRQHandler+0x5bc>)
 8011320:	429a      	cmp	r2, r3
 8011322:	d026      	beq.n	8011372 <HAL_DMA_IRQHandler+0x442>
 8011324:	4b72      	ldr	r3, [pc, #456]	; (80114f0 <HAL_DMA_IRQHandler+0x5c0>)
 8011326:	429a      	cmp	r2, r3
 8011328:	d025      	beq.n	8011376 <HAL_DMA_IRQHandler+0x446>
 801132a:	4b72      	ldr	r3, [pc, #456]	; (80114f4 <HAL_DMA_IRQHandler+0x5c4>)
 801132c:	429a      	cmp	r2, r3
 801132e:	d025      	beq.n	801137c <HAL_DMA_IRQHandler+0x44c>
 8011330:	4b71      	ldr	r3, [pc, #452]	; (80114f8 <HAL_DMA_IRQHandler+0x5c8>)
 8011332:	429a      	cmp	r2, r3
 8011334:	d025      	beq.n	8011382 <HAL_DMA_IRQHandler+0x452>
 8011336:	4b71      	ldr	r3, [pc, #452]	; (80114fc <HAL_DMA_IRQHandler+0x5cc>)
 8011338:	429a      	cmp	r2, r3
 801133a:	d025      	beq.n	8011388 <HAL_DMA_IRQHandler+0x458>
 801133c:	4b69      	ldr	r3, [pc, #420]	; (80114e4 <HAL_DMA_IRQHandler+0x5b4>)
 801133e:	429a      	cmp	r2, r3
 8011340:	d025      	beq.n	801138e <HAL_DMA_IRQHandler+0x45e>
 8011342:	4b6f      	ldr	r3, [pc, #444]	; (8011500 <HAL_DMA_IRQHandler+0x5d0>)
 8011344:	429a      	cmp	r2, r3
 8011346:	d025      	beq.n	8011394 <HAL_DMA_IRQHandler+0x464>
 8011348:	4b6e      	ldr	r3, [pc, #440]	; (8011504 <HAL_DMA_IRQHandler+0x5d4>)
 801134a:	429a      	cmp	r2, r3
 801134c:	d024      	beq.n	8011398 <HAL_DMA_IRQHandler+0x468>
 801134e:	4b6e      	ldr	r3, [pc, #440]	; (8011508 <HAL_DMA_IRQHandler+0x5d8>)
 8011350:	429a      	cmp	r2, r3
 8011352:	d023      	beq.n	801139c <HAL_DMA_IRQHandler+0x46c>
 8011354:	4b6d      	ldr	r3, [pc, #436]	; (801150c <HAL_DMA_IRQHandler+0x5dc>)
 8011356:	429a      	cmp	r2, r3
 8011358:	d002      	beq.n	8011360 <HAL_DMA_IRQHandler+0x430>
 801135a:	2380      	movs	r3, #128	; 0x80
 801135c:	02db      	lsls	r3, r3, #11
 801135e:	e003      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
 8011360:	2380      	movs	r3, #128	; 0x80
 8011362:	01db      	lsls	r3, r3, #7
 8011364:	e000      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
 8011366:	2304      	movs	r3, #4
 8011368:	400b      	ands	r3, r1
 801136a:	1e59      	subs	r1, r3, #1
 801136c:	418b      	sbcs	r3, r1
 801136e:	b2db      	uxtb	r3, r3
 8011370:	e777      	b.n	8011262 <HAL_DMA_IRQHandler+0x332>
 8011372:	2340      	movs	r3, #64	; 0x40
 8011374:	e7f8      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
 8011376:	2380      	movs	r3, #128	; 0x80
 8011378:	00db      	lsls	r3, r3, #3
 801137a:	e7f5      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
 801137c:	2380      	movs	r3, #128	; 0x80
 801137e:	01db      	lsls	r3, r3, #7
 8011380:	e7f2      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
 8011382:	2380      	movs	r3, #128	; 0x80
 8011384:	02db      	lsls	r3, r3, #11
 8011386:	e7ef      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
 8011388:	2380      	movs	r3, #128	; 0x80
 801138a:	03db      	lsls	r3, r3, #15
 801138c:	e7ec      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
 801138e:	2380      	movs	r3, #128	; 0x80
 8011390:	04db      	lsls	r3, r3, #19
 8011392:	e7e9      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
 8011394:	2304      	movs	r3, #4
 8011396:	e7e7      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
 8011398:	2340      	movs	r3, #64	; 0x40
 801139a:	e7e5      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
 801139c:	2380      	movs	r3, #128	; 0x80
 801139e:	00db      	lsls	r3, r3, #3
 80113a0:	e7e2      	b.n	8011368 <HAL_DMA_IRQHandler+0x438>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80113a2:	2280      	movs	r2, #128	; 0x80
 80113a4:	01d2      	lsls	r2, r2, #7
 80113a6:	e000      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
 80113a8:	2204      	movs	r2, #4
 80113aa:	4b5a      	ldr	r3, [pc, #360]	; (8011514 <HAL_DMA_IRQHandler+0x5e4>)
 80113ac:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80113ae:	2321      	movs	r3, #33	; 0x21
 80113b0:	2211      	movs	r2, #17
 80113b2:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80113b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d001      	beq.n	80113be <HAL_DMA_IRQHandler+0x48e>
        hdma->XferHalfCpltCallback(hdma);
 80113ba:	0020      	movs	r0, r4
 80113bc:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80113be:	6822      	ldr	r2, [r4, #0]
 80113c0:	4b48      	ldr	r3, [pc, #288]	; (80114e4 <HAL_DMA_IRQHandler+0x5b4>)
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d800      	bhi.n	80113c8 <HAL_DMA_IRQHandler+0x498>
 80113c6:	e105      	b.n	80115d4 <HAL_DMA_IRQHandler+0x6a4>
 80113c8:	4b52      	ldr	r3, [pc, #328]	; (8011514 <HAL_DMA_IRQHandler+0x5e4>)
 80113ca:	6819      	ldr	r1, [r3, #0]
 80113cc:	4b46      	ldr	r3, [pc, #280]	; (80114e8 <HAL_DMA_IRQHandler+0x5b8>)
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d100      	bne.n	80113d4 <HAL_DMA_IRQHandler+0x4a4>
 80113d2:	e0a1      	b.n	8011518 <HAL_DMA_IRQHandler+0x5e8>
 80113d4:	4b45      	ldr	r3, [pc, #276]	; (80114ec <HAL_DMA_IRQHandler+0x5bc>)
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d100      	bne.n	80113dc <HAL_DMA_IRQHandler+0x4ac>
 80113da:	e0e3      	b.n	80115a4 <HAL_DMA_IRQHandler+0x674>
 80113dc:	4b44      	ldr	r3, [pc, #272]	; (80114f0 <HAL_DMA_IRQHandler+0x5c0>)
 80113de:	429a      	cmp	r2, r3
 80113e0:	d100      	bne.n	80113e4 <HAL_DMA_IRQHandler+0x4b4>
 80113e2:	e0e1      	b.n	80115a8 <HAL_DMA_IRQHandler+0x678>
 80113e4:	4b43      	ldr	r3, [pc, #268]	; (80114f4 <HAL_DMA_IRQHandler+0x5c4>)
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d100      	bne.n	80113ec <HAL_DMA_IRQHandler+0x4bc>
 80113ea:	e0e0      	b.n	80115ae <HAL_DMA_IRQHandler+0x67e>
 80113ec:	4b42      	ldr	r3, [pc, #264]	; (80114f8 <HAL_DMA_IRQHandler+0x5c8>)
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d100      	bne.n	80113f4 <HAL_DMA_IRQHandler+0x4c4>
 80113f2:	e0df      	b.n	80115b4 <HAL_DMA_IRQHandler+0x684>
 80113f4:	4b41      	ldr	r3, [pc, #260]	; (80114fc <HAL_DMA_IRQHandler+0x5cc>)
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d100      	bne.n	80113fc <HAL_DMA_IRQHandler+0x4cc>
 80113fa:	e0de      	b.n	80115ba <HAL_DMA_IRQHandler+0x68a>
 80113fc:	4b39      	ldr	r3, [pc, #228]	; (80114e4 <HAL_DMA_IRQHandler+0x5b4>)
 80113fe:	429a      	cmp	r2, r3
 8011400:	d100      	bne.n	8011404 <HAL_DMA_IRQHandler+0x4d4>
 8011402:	e0dd      	b.n	80115c0 <HAL_DMA_IRQHandler+0x690>
 8011404:	4b3e      	ldr	r3, [pc, #248]	; (8011500 <HAL_DMA_IRQHandler+0x5d0>)
 8011406:	429a      	cmp	r2, r3
 8011408:	d100      	bne.n	801140c <HAL_DMA_IRQHandler+0x4dc>
 801140a:	e0dc      	b.n	80115c6 <HAL_DMA_IRQHandler+0x696>
 801140c:	4b3d      	ldr	r3, [pc, #244]	; (8011504 <HAL_DMA_IRQHandler+0x5d4>)
 801140e:	429a      	cmp	r2, r3
 8011410:	d100      	bne.n	8011414 <HAL_DMA_IRQHandler+0x4e4>
 8011412:	e0da      	b.n	80115ca <HAL_DMA_IRQHandler+0x69a>
 8011414:	4b3c      	ldr	r3, [pc, #240]	; (8011508 <HAL_DMA_IRQHandler+0x5d8>)
 8011416:	429a      	cmp	r2, r3
 8011418:	d100      	bne.n	801141c <HAL_DMA_IRQHandler+0x4ec>
 801141a:	e0d8      	b.n	80115ce <HAL_DMA_IRQHandler+0x69e>
 801141c:	4b3b      	ldr	r3, [pc, #236]	; (801150c <HAL_DMA_IRQHandler+0x5dc>)
 801141e:	429a      	cmp	r2, r3
 8011420:	d05d      	beq.n	80114de <HAL_DMA_IRQHandler+0x5ae>
 8011422:	2380      	movs	r3, #128	; 0x80
 8011424:	029b      	lsls	r3, r3, #10
 8011426:	e078      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011428:	2240      	movs	r2, #64	; 0x40
 801142a:	e7be      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
 801142c:	2280      	movs	r2, #128	; 0x80
 801142e:	00d2      	lsls	r2, r2, #3
 8011430:	e7bb      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
 8011432:	2280      	movs	r2, #128	; 0x80
 8011434:	01d2      	lsls	r2, r2, #7
 8011436:	e7b8      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
 8011438:	2280      	movs	r2, #128	; 0x80
 801143a:	02d2      	lsls	r2, r2, #11
 801143c:	e7b5      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
 801143e:	2280      	movs	r2, #128	; 0x80
 8011440:	03d2      	lsls	r2, r2, #15
 8011442:	e7b2      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
 8011444:	2280      	movs	r2, #128	; 0x80
 8011446:	04d2      	lsls	r2, r2, #19
 8011448:	e7af      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
 801144a:	2204      	movs	r2, #4
 801144c:	e7ad      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
 801144e:	2240      	movs	r2, #64	; 0x40
 8011450:	e7ab      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
 8011452:	2280      	movs	r2, #128	; 0x80
 8011454:	00d2      	lsls	r2, r2, #3
 8011456:	e7a8      	b.n	80113aa <HAL_DMA_IRQHandler+0x47a>
 8011458:	4a23      	ldr	r2, [pc, #140]	; (80114e8 <HAL_DMA_IRQHandler+0x5b8>)
 801145a:	4293      	cmp	r3, r2
 801145c:	d023      	beq.n	80114a6 <HAL_DMA_IRQHandler+0x576>
 801145e:	4a23      	ldr	r2, [pc, #140]	; (80114ec <HAL_DMA_IRQHandler+0x5bc>)
 8011460:	4293      	cmp	r3, r2
 8011462:	d024      	beq.n	80114ae <HAL_DMA_IRQHandler+0x57e>
 8011464:	4a22      	ldr	r2, [pc, #136]	; (80114f0 <HAL_DMA_IRQHandler+0x5c0>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d023      	beq.n	80114b2 <HAL_DMA_IRQHandler+0x582>
 801146a:	4a22      	ldr	r2, [pc, #136]	; (80114f4 <HAL_DMA_IRQHandler+0x5c4>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d023      	beq.n	80114b8 <HAL_DMA_IRQHandler+0x588>
 8011470:	4a21      	ldr	r2, [pc, #132]	; (80114f8 <HAL_DMA_IRQHandler+0x5c8>)
 8011472:	4293      	cmp	r3, r2
 8011474:	d023      	beq.n	80114be <HAL_DMA_IRQHandler+0x58e>
 8011476:	4a21      	ldr	r2, [pc, #132]	; (80114fc <HAL_DMA_IRQHandler+0x5cc>)
 8011478:	4293      	cmp	r3, r2
 801147a:	d023      	beq.n	80114c4 <HAL_DMA_IRQHandler+0x594>
 801147c:	4a19      	ldr	r2, [pc, #100]	; (80114e4 <HAL_DMA_IRQHandler+0x5b4>)
 801147e:	4293      	cmp	r3, r2
 8011480:	d023      	beq.n	80114ca <HAL_DMA_IRQHandler+0x59a>
 8011482:	4a1f      	ldr	r2, [pc, #124]	; (8011500 <HAL_DMA_IRQHandler+0x5d0>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d023      	beq.n	80114d0 <HAL_DMA_IRQHandler+0x5a0>
 8011488:	4a1e      	ldr	r2, [pc, #120]	; (8011504 <HAL_DMA_IRQHandler+0x5d4>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d022      	beq.n	80114d4 <HAL_DMA_IRQHandler+0x5a4>
 801148e:	4a1e      	ldr	r2, [pc, #120]	; (8011508 <HAL_DMA_IRQHandler+0x5d8>)
 8011490:	4293      	cmp	r3, r2
 8011492:	d021      	beq.n	80114d8 <HAL_DMA_IRQHandler+0x5a8>
 8011494:	4a1d      	ldr	r2, [pc, #116]	; (801150c <HAL_DMA_IRQHandler+0x5dc>)
 8011496:	4293      	cmp	r3, r2
 8011498:	d002      	beq.n	80114a0 <HAL_DMA_IRQHandler+0x570>
 801149a:	2280      	movs	r2, #128	; 0x80
 801149c:	02d2      	lsls	r2, r2, #11
 801149e:	e003      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
 80114a0:	2280      	movs	r2, #128	; 0x80
 80114a2:	01d2      	lsls	r2, r2, #7
 80114a4:	e000      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
 80114a6:	2204      	movs	r2, #4
 80114a8:	4b19      	ldr	r3, [pc, #100]	; (8011510 <HAL_DMA_IRQHandler+0x5e0>)
 80114aa:	605a      	str	r2, [r3, #4]
 80114ac:	e77f      	b.n	80113ae <HAL_DMA_IRQHandler+0x47e>
 80114ae:	2240      	movs	r2, #64	; 0x40
 80114b0:	e7fa      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
 80114b2:	2280      	movs	r2, #128	; 0x80
 80114b4:	00d2      	lsls	r2, r2, #3
 80114b6:	e7f7      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
 80114b8:	2280      	movs	r2, #128	; 0x80
 80114ba:	01d2      	lsls	r2, r2, #7
 80114bc:	e7f4      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
 80114be:	2280      	movs	r2, #128	; 0x80
 80114c0:	02d2      	lsls	r2, r2, #11
 80114c2:	e7f1      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
 80114c4:	2280      	movs	r2, #128	; 0x80
 80114c6:	03d2      	lsls	r2, r2, #15
 80114c8:	e7ee      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
 80114ca:	2280      	movs	r2, #128	; 0x80
 80114cc:	04d2      	lsls	r2, r2, #19
 80114ce:	e7eb      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
 80114d0:	2204      	movs	r2, #4
 80114d2:	e7e9      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
 80114d4:	2240      	movs	r2, #64	; 0x40
 80114d6:	e7e7      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
 80114d8:	2280      	movs	r2, #128	; 0x80
 80114da:	00d2      	lsls	r2, r2, #3
 80114dc:	e7e4      	b.n	80114a8 <HAL_DMA_IRQHandler+0x578>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80114de:	2380      	movs	r3, #128	; 0x80
 80114e0:	019b      	lsls	r3, r3, #6
 80114e2:	e01a      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
 80114e4:	40020080 	.word	0x40020080
 80114e8:	40020008 	.word	0x40020008
 80114ec:	4002001c 	.word	0x4002001c
 80114f0:	40020030 	.word	0x40020030
 80114f4:	40020044 	.word	0x40020044
 80114f8:	40020058 	.word	0x40020058
 80114fc:	4002006c 	.word	0x4002006c
 8011500:	40020408 	.word	0x40020408
 8011504:	4002041c 	.word	0x4002041c
 8011508:	40020430 	.word	0x40020430
 801150c:	40020444 	.word	0x40020444
 8011510:	40020000 	.word	0x40020000
 8011514:	40020400 	.word	0x40020400
 8011518:	2302      	movs	r3, #2
 801151a:	400b      	ands	r3, r1
 801151c:	1e59      	subs	r1, r3, #1
 801151e:	418b      	sbcs	r3, r1
 8011520:	b2db      	uxtb	r3, r3
 8011522:	2b00      	cmp	r3, #0
 8011524:	d100      	bne.n	8011528 <HAL_DMA_IRQHandler+0x5f8>
 8011526:	e0af      	b.n	8011688 <HAL_DMA_IRQHandler+0x758>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011528:	6813      	ldr	r3, [r2, #0]
 801152a:	079b      	lsls	r3, r3, #30
 801152c:	d400      	bmi.n	8011530 <HAL_DMA_IRQHandler+0x600>
 801152e:	e0ab      	b.n	8011688 <HAL_DMA_IRQHandler+0x758>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011530:	6813      	ldr	r3, [r2, #0]
 8011532:	069b      	lsls	r3, r3, #26
 8011534:	d403      	bmi.n	801153e <HAL_DMA_IRQHandler+0x60e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011536:	6813      	ldr	r3, [r2, #0]
 8011538:	2102      	movs	r1, #2
 801153a:	438b      	bics	r3, r1
 801153c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	4a7f      	ldr	r2, [pc, #508]	; (8011740 <HAL_DMA_IRQHandler+0x810>)
 8011542:	4293      	cmp	r3, r2
 8011544:	d800      	bhi.n	8011548 <HAL_DMA_IRQHandler+0x618>
 8011546:	e0b8      	b.n	80116ba <HAL_DMA_IRQHandler+0x78a>
 8011548:	4a7e      	ldr	r2, [pc, #504]	; (8011744 <HAL_DMA_IRQHandler+0x814>)
 801154a:	4293      	cmp	r3, r2
 801154c:	d100      	bne.n	8011550 <HAL_DMA_IRQHandler+0x620>
 801154e:	e08b      	b.n	8011668 <HAL_DMA_IRQHandler+0x738>
 8011550:	4a7d      	ldr	r2, [pc, #500]	; (8011748 <HAL_DMA_IRQHandler+0x818>)
 8011552:	4293      	cmp	r3, r2
 8011554:	d100      	bne.n	8011558 <HAL_DMA_IRQHandler+0x628>
 8011556:	e098      	b.n	801168a <HAL_DMA_IRQHandler+0x75a>
 8011558:	4a7c      	ldr	r2, [pc, #496]	; (801174c <HAL_DMA_IRQHandler+0x81c>)
 801155a:	4293      	cmp	r3, r2
 801155c:	d100      	bne.n	8011560 <HAL_DMA_IRQHandler+0x630>
 801155e:	e096      	b.n	801168e <HAL_DMA_IRQHandler+0x75e>
 8011560:	4a7b      	ldr	r2, [pc, #492]	; (8011750 <HAL_DMA_IRQHandler+0x820>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d100      	bne.n	8011568 <HAL_DMA_IRQHandler+0x638>
 8011566:	e095      	b.n	8011694 <HAL_DMA_IRQHandler+0x764>
 8011568:	4a7a      	ldr	r2, [pc, #488]	; (8011754 <HAL_DMA_IRQHandler+0x824>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d100      	bne.n	8011570 <HAL_DMA_IRQHandler+0x640>
 801156e:	e094      	b.n	801169a <HAL_DMA_IRQHandler+0x76a>
 8011570:	4a79      	ldr	r2, [pc, #484]	; (8011758 <HAL_DMA_IRQHandler+0x828>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d100      	bne.n	8011578 <HAL_DMA_IRQHandler+0x648>
 8011576:	e093      	b.n	80116a0 <HAL_DMA_IRQHandler+0x770>
 8011578:	4a71      	ldr	r2, [pc, #452]	; (8011740 <HAL_DMA_IRQHandler+0x810>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d100      	bne.n	8011580 <HAL_DMA_IRQHandler+0x650>
 801157e:	e092      	b.n	80116a6 <HAL_DMA_IRQHandler+0x776>
 8011580:	4a76      	ldr	r2, [pc, #472]	; (801175c <HAL_DMA_IRQHandler+0x82c>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d100      	bne.n	8011588 <HAL_DMA_IRQHandler+0x658>
 8011586:	e091      	b.n	80116ac <HAL_DMA_IRQHandler+0x77c>
 8011588:	4a75      	ldr	r2, [pc, #468]	; (8011760 <HAL_DMA_IRQHandler+0x830>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d100      	bne.n	8011590 <HAL_DMA_IRQHandler+0x660>
 801158e:	e08f      	b.n	80116b0 <HAL_DMA_IRQHandler+0x780>
 8011590:	4a74      	ldr	r2, [pc, #464]	; (8011764 <HAL_DMA_IRQHandler+0x834>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d100      	bne.n	8011598 <HAL_DMA_IRQHandler+0x668>
 8011596:	e08d      	b.n	80116b4 <HAL_DMA_IRQHandler+0x784>
 8011598:	4a73      	ldr	r2, [pc, #460]	; (8011768 <HAL_DMA_IRQHandler+0x838>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d061      	beq.n	8011662 <HAL_DMA_IRQHandler+0x732>
 801159e:	2280      	movs	r2, #128	; 0x80
 80115a0:	0292      	lsls	r2, r2, #10
 80115a2:	e062      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80115a4:	2320      	movs	r3, #32
 80115a6:	e7b8      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
 80115a8:	2380      	movs	r3, #128	; 0x80
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	e7b5      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
 80115ae:	2380      	movs	r3, #128	; 0x80
 80115b0:	019b      	lsls	r3, r3, #6
 80115b2:	e7b2      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
 80115b4:	2380      	movs	r3, #128	; 0x80
 80115b6:	029b      	lsls	r3, r3, #10
 80115b8:	e7af      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
 80115ba:	2380      	movs	r3, #128	; 0x80
 80115bc:	039b      	lsls	r3, r3, #14
 80115be:	e7ac      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
 80115c0:	2380      	movs	r3, #128	; 0x80
 80115c2:	049b      	lsls	r3, r3, #18
 80115c4:	e7a9      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
 80115c6:	2302      	movs	r3, #2
 80115c8:	e7a7      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
 80115ca:	2320      	movs	r3, #32
 80115cc:	e7a5      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
 80115ce:	2380      	movs	r3, #128	; 0x80
 80115d0:	009b      	lsls	r3, r3, #2
 80115d2:	e7a2      	b.n	801151a <HAL_DMA_IRQHandler+0x5ea>
 80115d4:	4b65      	ldr	r3, [pc, #404]	; (801176c <HAL_DMA_IRQHandler+0x83c>)
 80115d6:	6819      	ldr	r1, [r3, #0]
 80115d8:	4b5a      	ldr	r3, [pc, #360]	; (8011744 <HAL_DMA_IRQHandler+0x814>)
 80115da:	429a      	cmp	r2, r3
 80115dc:	d023      	beq.n	8011626 <HAL_DMA_IRQHandler+0x6f6>
 80115de:	4b5a      	ldr	r3, [pc, #360]	; (8011748 <HAL_DMA_IRQHandler+0x818>)
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d026      	beq.n	8011632 <HAL_DMA_IRQHandler+0x702>
 80115e4:	4b59      	ldr	r3, [pc, #356]	; (801174c <HAL_DMA_IRQHandler+0x81c>)
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d025      	beq.n	8011636 <HAL_DMA_IRQHandler+0x706>
 80115ea:	4b59      	ldr	r3, [pc, #356]	; (8011750 <HAL_DMA_IRQHandler+0x820>)
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d025      	beq.n	801163c <HAL_DMA_IRQHandler+0x70c>
 80115f0:	4b58      	ldr	r3, [pc, #352]	; (8011754 <HAL_DMA_IRQHandler+0x824>)
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d025      	beq.n	8011642 <HAL_DMA_IRQHandler+0x712>
 80115f6:	4b58      	ldr	r3, [pc, #352]	; (8011758 <HAL_DMA_IRQHandler+0x828>)
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d025      	beq.n	8011648 <HAL_DMA_IRQHandler+0x718>
 80115fc:	4b50      	ldr	r3, [pc, #320]	; (8011740 <HAL_DMA_IRQHandler+0x810>)
 80115fe:	429a      	cmp	r2, r3
 8011600:	d025      	beq.n	801164e <HAL_DMA_IRQHandler+0x71e>
 8011602:	4b56      	ldr	r3, [pc, #344]	; (801175c <HAL_DMA_IRQHandler+0x82c>)
 8011604:	429a      	cmp	r2, r3
 8011606:	d025      	beq.n	8011654 <HAL_DMA_IRQHandler+0x724>
 8011608:	4b55      	ldr	r3, [pc, #340]	; (8011760 <HAL_DMA_IRQHandler+0x830>)
 801160a:	429a      	cmp	r2, r3
 801160c:	d024      	beq.n	8011658 <HAL_DMA_IRQHandler+0x728>
 801160e:	4b55      	ldr	r3, [pc, #340]	; (8011764 <HAL_DMA_IRQHandler+0x834>)
 8011610:	429a      	cmp	r2, r3
 8011612:	d023      	beq.n	801165c <HAL_DMA_IRQHandler+0x72c>
 8011614:	4b54      	ldr	r3, [pc, #336]	; (8011768 <HAL_DMA_IRQHandler+0x838>)
 8011616:	429a      	cmp	r2, r3
 8011618:	d002      	beq.n	8011620 <HAL_DMA_IRQHandler+0x6f0>
 801161a:	2380      	movs	r3, #128	; 0x80
 801161c:	029b      	lsls	r3, r3, #10
 801161e:	e003      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
 8011620:	2380      	movs	r3, #128	; 0x80
 8011622:	019b      	lsls	r3, r3, #6
 8011624:	e000      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
 8011626:	2302      	movs	r3, #2
 8011628:	400b      	ands	r3, r1
 801162a:	1e59      	subs	r1, r3, #1
 801162c:	418b      	sbcs	r3, r1
 801162e:	b2db      	uxtb	r3, r3
 8011630:	e777      	b.n	8011522 <HAL_DMA_IRQHandler+0x5f2>
 8011632:	2320      	movs	r3, #32
 8011634:	e7f8      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
 8011636:	2380      	movs	r3, #128	; 0x80
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	e7f5      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
 801163c:	2380      	movs	r3, #128	; 0x80
 801163e:	019b      	lsls	r3, r3, #6
 8011640:	e7f2      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
 8011642:	2380      	movs	r3, #128	; 0x80
 8011644:	029b      	lsls	r3, r3, #10
 8011646:	e7ef      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
 8011648:	2380      	movs	r3, #128	; 0x80
 801164a:	039b      	lsls	r3, r3, #14
 801164c:	e7ec      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
 801164e:	2380      	movs	r3, #128	; 0x80
 8011650:	049b      	lsls	r3, r3, #18
 8011652:	e7e9      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
 8011654:	2302      	movs	r3, #2
 8011656:	e7e7      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
 8011658:	2320      	movs	r3, #32
 801165a:	e7e5      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
 801165c:	2380      	movs	r3, #128	; 0x80
 801165e:	009b      	lsls	r3, r3, #2
 8011660:	e7e2      	b.n	8011628 <HAL_DMA_IRQHandler+0x6f8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011662:	2280      	movs	r2, #128	; 0x80
 8011664:	0192      	lsls	r2, r2, #6
 8011666:	e000      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
 8011668:	2202      	movs	r2, #2
 801166a:	4b41      	ldr	r3, [pc, #260]	; (8011770 <HAL_DMA_IRQHandler+0x840>)
 801166c:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 801166e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011670:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011672:	2321      	movs	r3, #33	; 0x21
 8011674:	2201      	movs	r2, #1
 8011676:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011678:	3b01      	subs	r3, #1
 801167a:	2200      	movs	r2, #0
 801167c:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801167e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011680:	2b00      	cmp	r3, #0
 8011682:	d001      	beq.n	8011688 <HAL_DMA_IRQHandler+0x758>
        hdma->XferCpltCallback(hdma);
 8011684:	0020      	movs	r0, r4
 8011686:	4798      	blx	r3
}  
 8011688:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801168a:	2220      	movs	r2, #32
 801168c:	e7ed      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
 801168e:	2280      	movs	r2, #128	; 0x80
 8011690:	0092      	lsls	r2, r2, #2
 8011692:	e7ea      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
 8011694:	2280      	movs	r2, #128	; 0x80
 8011696:	0192      	lsls	r2, r2, #6
 8011698:	e7e7      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
 801169a:	2280      	movs	r2, #128	; 0x80
 801169c:	0292      	lsls	r2, r2, #10
 801169e:	e7e4      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
 80116a0:	2280      	movs	r2, #128	; 0x80
 80116a2:	0392      	lsls	r2, r2, #14
 80116a4:	e7e1      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
 80116a6:	2280      	movs	r2, #128	; 0x80
 80116a8:	0492      	lsls	r2, r2, #18
 80116aa:	e7de      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
 80116ac:	2202      	movs	r2, #2
 80116ae:	e7dc      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
 80116b0:	2220      	movs	r2, #32
 80116b2:	e7da      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
 80116b4:	2280      	movs	r2, #128	; 0x80
 80116b6:	0092      	lsls	r2, r2, #2
 80116b8:	e7d7      	b.n	801166a <HAL_DMA_IRQHandler+0x73a>
 80116ba:	4a22      	ldr	r2, [pc, #136]	; (8011744 <HAL_DMA_IRQHandler+0x814>)
 80116bc:	4293      	cmp	r3, r2
 80116be:	d023      	beq.n	8011708 <HAL_DMA_IRQHandler+0x7d8>
 80116c0:	4a21      	ldr	r2, [pc, #132]	; (8011748 <HAL_DMA_IRQHandler+0x818>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d024      	beq.n	8011710 <HAL_DMA_IRQHandler+0x7e0>
 80116c6:	4a21      	ldr	r2, [pc, #132]	; (801174c <HAL_DMA_IRQHandler+0x81c>)
 80116c8:	4293      	cmp	r3, r2
 80116ca:	d023      	beq.n	8011714 <HAL_DMA_IRQHandler+0x7e4>
 80116cc:	4a20      	ldr	r2, [pc, #128]	; (8011750 <HAL_DMA_IRQHandler+0x820>)
 80116ce:	4293      	cmp	r3, r2
 80116d0:	d023      	beq.n	801171a <HAL_DMA_IRQHandler+0x7ea>
 80116d2:	4a20      	ldr	r2, [pc, #128]	; (8011754 <HAL_DMA_IRQHandler+0x824>)
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d023      	beq.n	8011720 <HAL_DMA_IRQHandler+0x7f0>
 80116d8:	4a1f      	ldr	r2, [pc, #124]	; (8011758 <HAL_DMA_IRQHandler+0x828>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d023      	beq.n	8011726 <HAL_DMA_IRQHandler+0x7f6>
 80116de:	4a18      	ldr	r2, [pc, #96]	; (8011740 <HAL_DMA_IRQHandler+0x810>)
 80116e0:	4293      	cmp	r3, r2
 80116e2:	d023      	beq.n	801172c <HAL_DMA_IRQHandler+0x7fc>
 80116e4:	4a1d      	ldr	r2, [pc, #116]	; (801175c <HAL_DMA_IRQHandler+0x82c>)
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d023      	beq.n	8011732 <HAL_DMA_IRQHandler+0x802>
 80116ea:	4a1d      	ldr	r2, [pc, #116]	; (8011760 <HAL_DMA_IRQHandler+0x830>)
 80116ec:	4293      	cmp	r3, r2
 80116ee:	d022      	beq.n	8011736 <HAL_DMA_IRQHandler+0x806>
 80116f0:	4a1c      	ldr	r2, [pc, #112]	; (8011764 <HAL_DMA_IRQHandler+0x834>)
 80116f2:	4293      	cmp	r3, r2
 80116f4:	d021      	beq.n	801173a <HAL_DMA_IRQHandler+0x80a>
 80116f6:	4a1c      	ldr	r2, [pc, #112]	; (8011768 <HAL_DMA_IRQHandler+0x838>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d002      	beq.n	8011702 <HAL_DMA_IRQHandler+0x7d2>
 80116fc:	2280      	movs	r2, #128	; 0x80
 80116fe:	0292      	lsls	r2, r2, #10
 8011700:	e003      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 8011702:	2280      	movs	r2, #128	; 0x80
 8011704:	0192      	lsls	r2, r2, #6
 8011706:	e000      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 8011708:	2202      	movs	r2, #2
 801170a:	4b18      	ldr	r3, [pc, #96]	; (801176c <HAL_DMA_IRQHandler+0x83c>)
 801170c:	605a      	str	r2, [r3, #4]
 801170e:	e7ae      	b.n	801166e <HAL_DMA_IRQHandler+0x73e>
 8011710:	2220      	movs	r2, #32
 8011712:	e7fa      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 8011714:	2280      	movs	r2, #128	; 0x80
 8011716:	0092      	lsls	r2, r2, #2
 8011718:	e7f7      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 801171a:	2280      	movs	r2, #128	; 0x80
 801171c:	0192      	lsls	r2, r2, #6
 801171e:	e7f4      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 8011720:	2280      	movs	r2, #128	; 0x80
 8011722:	0292      	lsls	r2, r2, #10
 8011724:	e7f1      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 8011726:	2280      	movs	r2, #128	; 0x80
 8011728:	0392      	lsls	r2, r2, #14
 801172a:	e7ee      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 801172c:	2280      	movs	r2, #128	; 0x80
 801172e:	0492      	lsls	r2, r2, #18
 8011730:	e7eb      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 8011732:	2202      	movs	r2, #2
 8011734:	e7e9      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 8011736:	2220      	movs	r2, #32
 8011738:	e7e7      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 801173a:	2280      	movs	r2, #128	; 0x80
 801173c:	0092      	lsls	r2, r2, #2
 801173e:	e7e4      	b.n	801170a <HAL_DMA_IRQHandler+0x7da>
 8011740:	40020080 	.word	0x40020080
 8011744:	40020008 	.word	0x40020008
 8011748:	4002001c 	.word	0x4002001c
 801174c:	40020030 	.word	0x40020030
 8011750:	40020044 	.word	0x40020044
 8011754:	40020058 	.word	0x40020058
 8011758:	4002006c 	.word	0x4002006c
 801175c:	40020408 	.word	0x40020408
 8011760:	4002041c 	.word	0x4002041c
 8011764:	40020430 	.word	0x40020430
 8011768:	40020444 	.word	0x40020444
 801176c:	40020000 	.word	0x40020000
 8011770:	40020400 	.word	0x40020400

08011774 <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8011774:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011776:	4b05      	ldr	r3, [pc, #20]	; (801178c <FLASH_Program_HalfWord+0x18>)
 8011778:	2200      	movs	r2, #0
 801177a:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801177c:	4a04      	ldr	r2, [pc, #16]	; (8011790 <FLASH_Program_HalfWord+0x1c>)
 801177e:	6913      	ldr	r3, [r2, #16]
 8011780:	2401      	movs	r4, #1
 8011782:	4323      	orrs	r3, r4
 8011784:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8011786:	8001      	strh	r1, [r0, #0]
}
 8011788:	bd10      	pop	{r4, pc}
 801178a:	46c0      	nop			; (mov r8, r8)
 801178c:	20006638 	.word	0x20006638
 8011790:	40022000 	.word	0x40022000

08011794 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011794:	4b0a      	ldr	r3, [pc, #40]	; (80117c0 <FLASH_SetErrorCode+0x2c>)
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	06db      	lsls	r3, r3, #27
 801179a:	d504      	bpl.n	80117a6 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801179c:	4a09      	ldr	r2, [pc, #36]	; (80117c4 <FLASH_SetErrorCode+0x30>)
 801179e:	69d3      	ldr	r3, [r2, #28]
 80117a0:	2102      	movs	r1, #2
 80117a2:	430b      	orrs	r3, r1
 80117a4:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80117a6:	4b06      	ldr	r3, [pc, #24]	; (80117c0 <FLASH_SetErrorCode+0x2c>)
 80117a8:	68db      	ldr	r3, [r3, #12]
 80117aa:	075b      	lsls	r3, r3, #29
 80117ac:	d504      	bpl.n	80117b8 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80117ae:	4a05      	ldr	r2, [pc, #20]	; (80117c4 <FLASH_SetErrorCode+0x30>)
 80117b0:	69d3      	ldr	r3, [r2, #28]
 80117b2:	2101      	movs	r1, #1
 80117b4:	430b      	orrs	r3, r1
 80117b6:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80117b8:	4b01      	ldr	r3, [pc, #4]	; (80117c0 <FLASH_SetErrorCode+0x2c>)
 80117ba:	2214      	movs	r2, #20
 80117bc:	60da      	str	r2, [r3, #12]
}  
 80117be:	4770      	bx	lr
 80117c0:	40022000 	.word	0x40022000
 80117c4:	20006638 	.word	0x20006638

080117c8 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80117c8:	4b06      	ldr	r3, [pc, #24]	; (80117e4 <HAL_FLASH_Unlock+0x1c>)
 80117ca:	691b      	ldr	r3, [r3, #16]
 80117cc:	061b      	lsls	r3, r3, #24
 80117ce:	d506      	bpl.n	80117de <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80117d0:	4b04      	ldr	r3, [pc, #16]	; (80117e4 <HAL_FLASH_Unlock+0x1c>)
 80117d2:	4a05      	ldr	r2, [pc, #20]	; (80117e8 <HAL_FLASH_Unlock+0x20>)
 80117d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80117d6:	4a05      	ldr	r2, [pc, #20]	; (80117ec <HAL_FLASH_Unlock+0x24>)
 80117d8:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80117da:	2000      	movs	r0, #0
}
 80117dc:	4770      	bx	lr
    return HAL_ERROR;
 80117de:	2001      	movs	r0, #1
 80117e0:	e7fc      	b.n	80117dc <HAL_FLASH_Unlock+0x14>
 80117e2:	46c0      	nop			; (mov r8, r8)
 80117e4:	40022000 	.word	0x40022000
 80117e8:	45670123 	.word	0x45670123
 80117ec:	cdef89ab 	.word	0xcdef89ab

080117f0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80117f0:	4a03      	ldr	r2, [pc, #12]	; (8011800 <HAL_FLASH_Lock+0x10>)
 80117f2:	6913      	ldr	r3, [r2, #16]
 80117f4:	2180      	movs	r1, #128	; 0x80
 80117f6:	430b      	orrs	r3, r1
 80117f8:	6113      	str	r3, [r2, #16]
}
 80117fa:	2000      	movs	r0, #0
 80117fc:	4770      	bx	lr
 80117fe:	46c0      	nop			; (mov r8, r8)
 8011800:	40022000 	.word	0x40022000

08011804 <FLASH_WaitForLastOperation>:
{
 8011804:	b570      	push	{r4, r5, r6, lr}
 8011806:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011808:	f7fe fe80 	bl	801050c <HAL_GetTick>
 801180c:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801180e:	4b12      	ldr	r3, [pc, #72]	; (8011858 <FLASH_WaitForLastOperation+0x54>)
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	07db      	lsls	r3, r3, #31
 8011814:	d50a      	bpl.n	801182c <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8011816:	1c63      	adds	r3, r4, #1
 8011818:	d0f9      	beq.n	801180e <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801181a:	2c00      	cmp	r4, #0
 801181c:	d004      	beq.n	8011828 <FLASH_WaitForLastOperation+0x24>
 801181e:	f7fe fe75 	bl	801050c <HAL_GetTick>
 8011822:	1b40      	subs	r0, r0, r5
 8011824:	42a0      	cmp	r0, r4
 8011826:	d9f2      	bls.n	801180e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8011828:	2003      	movs	r0, #3
 801182a:	e00f      	b.n	801184c <FLASH_WaitForLastOperation+0x48>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801182c:	4b0a      	ldr	r3, [pc, #40]	; (8011858 <FLASH_WaitForLastOperation+0x54>)
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	069b      	lsls	r3, r3, #26
 8011832:	d502      	bpl.n	801183a <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011834:	4b08      	ldr	r3, [pc, #32]	; (8011858 <FLASH_WaitForLastOperation+0x54>)
 8011836:	2220      	movs	r2, #32
 8011838:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801183a:	4b07      	ldr	r3, [pc, #28]	; (8011858 <FLASH_WaitForLastOperation+0x54>)
 801183c:	68db      	ldr	r3, [r3, #12]
 801183e:	06db      	lsls	r3, r3, #27
 8011840:	d405      	bmi.n	801184e <FLASH_WaitForLastOperation+0x4a>
 8011842:	4b05      	ldr	r3, [pc, #20]	; (8011858 <FLASH_WaitForLastOperation+0x54>)
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	075b      	lsls	r3, r3, #29
 8011848:	d401      	bmi.n	801184e <FLASH_WaitForLastOperation+0x4a>
  return HAL_OK;
 801184a:	2000      	movs	r0, #0
}
 801184c:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 801184e:	f7ff ffa1 	bl	8011794 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011852:	2001      	movs	r0, #1
 8011854:	e7fa      	b.n	801184c <FLASH_WaitForLastOperation+0x48>
 8011856:	46c0      	nop			; (mov r8, r8)
 8011858:	40022000 	.word	0x40022000

0801185c <HAL_FLASH_Program>:
{
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	46ce      	mov	lr, r9
 8011860:	4647      	mov	r7, r8
 8011862:	b580      	push	{r7, lr}
 8011864:	0005      	movs	r5, r0
 8011866:	000e      	movs	r6, r1
 8011868:	4690      	mov	r8, r2
 801186a:	001f      	movs	r7, r3
  __HAL_LOCK(&pFlash);
 801186c:	4b22      	ldr	r3, [pc, #136]	; (80118f8 <HAL_FLASH_Program+0x9c>)
 801186e:	7e1b      	ldrb	r3, [r3, #24]
 8011870:	2b01      	cmp	r3, #1
 8011872:	d03e      	beq.n	80118f2 <HAL_FLASH_Program+0x96>
 8011874:	4b20      	ldr	r3, [pc, #128]	; (80118f8 <HAL_FLASH_Program+0x9c>)
 8011876:	2201      	movs	r2, #1
 8011878:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801187a:	4820      	ldr	r0, [pc, #128]	; (80118fc <HAL_FLASH_Program+0xa0>)
 801187c:	f7ff ffc2 	bl	8011804 <FLASH_WaitForLastOperation>
 8011880:	1e04      	subs	r4, r0, #0
  if(status == HAL_OK)
 8011882:	d12f      	bne.n	80118e4 <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011884:	2d01      	cmp	r5, #1
 8011886:	d007      	beq.n	8011898 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011888:	2d02      	cmp	r5, #2
 801188a:	d002      	beq.n	8011892 <HAL_FLASH_Program+0x36>
      nbiterations = 4;
 801188c:	2304      	movs	r3, #4
 801188e:	4699      	mov	r9, r3
    for (index = 0; index < nbiterations; index++)
 8011890:	e01d      	b.n	80118ce <HAL_FLASH_Program+0x72>
      nbiterations = 2;
 8011892:	2302      	movs	r3, #2
 8011894:	4699      	mov	r9, r3
 8011896:	e01a      	b.n	80118ce <HAL_FLASH_Program+0x72>
      nbiterations = 1;
 8011898:	2301      	movs	r3, #1
 801189a:	4699      	mov	r9, r3
 801189c:	e017      	b.n	80118ce <HAL_FLASH_Program+0x72>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801189e:	2220      	movs	r2, #32
 80118a0:	1ad2      	subs	r2, r2, r3
 80118a2:	0039      	movs	r1, r7
 80118a4:	4091      	lsls	r1, r2
 80118a6:	000a      	movs	r2, r1
 80118a8:	4641      	mov	r1, r8
 80118aa:	40d9      	lsrs	r1, r3
 80118ac:	4311      	orrs	r1, r2
 80118ae:	b289      	uxth	r1, r1
 80118b0:	1980      	adds	r0, r0, r6
 80118b2:	f7ff ff5f 	bl	8011774 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80118b6:	4811      	ldr	r0, [pc, #68]	; (80118fc <HAL_FLASH_Program+0xa0>)
 80118b8:	f7ff ffa4 	bl	8011804 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80118bc:	4a10      	ldr	r2, [pc, #64]	; (8011900 <HAL_FLASH_Program+0xa4>)
 80118be:	6913      	ldr	r3, [r2, #16]
 80118c0:	2101      	movs	r1, #1
 80118c2:	438b      	bics	r3, r1
 80118c4:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 80118c6:	2800      	cmp	r0, #0
 80118c8:	d10c      	bne.n	80118e4 <HAL_FLASH_Program+0x88>
    for (index = 0; index < nbiterations; index++)
 80118ca:	3401      	adds	r4, #1
 80118cc:	b2e4      	uxtb	r4, r4
 80118ce:	454c      	cmp	r4, r9
 80118d0:	d208      	bcs.n	80118e4 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80118d2:	0060      	lsls	r0, r4, #1
 80118d4:	0123      	lsls	r3, r4, #4
 80118d6:	2220      	movs	r2, #32
 80118d8:	4252      	negs	r2, r2
 80118da:	189a      	adds	r2, r3, r2
 80118dc:	d4df      	bmi.n	801189e <HAL_FLASH_Program+0x42>
 80118de:	0039      	movs	r1, r7
 80118e0:	40d1      	lsrs	r1, r2
 80118e2:	e7e4      	b.n	80118ae <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 80118e4:	4b04      	ldr	r3, [pc, #16]	; (80118f8 <HAL_FLASH_Program+0x9c>)
 80118e6:	2200      	movs	r2, #0
 80118e8:	761a      	strb	r2, [r3, #24]
}
 80118ea:	bcc0      	pop	{r6, r7}
 80118ec:	46b9      	mov	r9, r7
 80118ee:	46b0      	mov	r8, r6
 80118f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80118f2:	2002      	movs	r0, #2
 80118f4:	e7f9      	b.n	80118ea <HAL_FLASH_Program+0x8e>
 80118f6:	46c0      	nop			; (mov r8, r8)
 80118f8:	20006638 	.word	0x20006638
 80118fc:	0000c350 	.word	0x0000c350
 8011900:	40022000 	.word	0x40022000

08011904 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011904:	4b06      	ldr	r3, [pc, #24]	; (8011920 <FLASH_MassErase+0x1c>)
 8011906:	2200      	movs	r2, #0
 8011908:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801190a:	4b06      	ldr	r3, [pc, #24]	; (8011924 <FLASH_MassErase+0x20>)
 801190c:	691a      	ldr	r2, [r3, #16]
 801190e:	2104      	movs	r1, #4
 8011910:	430a      	orrs	r2, r1
 8011912:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011914:	691a      	ldr	r2, [r3, #16]
 8011916:	313c      	adds	r1, #60	; 0x3c
 8011918:	430a      	orrs	r2, r1
 801191a:	611a      	str	r2, [r3, #16]
}
 801191c:	4770      	bx	lr
 801191e:	46c0      	nop			; (mov r8, r8)
 8011920:	20006638 	.word	0x20006638
 8011924:	40022000 	.word	0x40022000

08011928 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011928:	4b06      	ldr	r3, [pc, #24]	; (8011944 <FLASH_PageErase+0x1c>)
 801192a:	2200      	movs	r2, #0
 801192c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801192e:	4b06      	ldr	r3, [pc, #24]	; (8011948 <FLASH_PageErase+0x20>)
 8011930:	691a      	ldr	r2, [r3, #16]
 8011932:	2102      	movs	r1, #2
 8011934:	430a      	orrs	r2, r1
 8011936:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011938:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801193a:	691a      	ldr	r2, [r3, #16]
 801193c:	313e      	adds	r1, #62	; 0x3e
 801193e:	430a      	orrs	r2, r1
 8011940:	611a      	str	r2, [r3, #16]
}
 8011942:	4770      	bx	lr
 8011944:	20006638 	.word	0x20006638
 8011948:	40022000 	.word	0x40022000

0801194c <HAL_FLASHEx_Erase>:
{
 801194c:	b570      	push	{r4, r5, r6, lr}
 801194e:	0005      	movs	r5, r0
 8011950:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8011952:	4b24      	ldr	r3, [pc, #144]	; (80119e4 <HAL_FLASHEx_Erase+0x98>)
 8011954:	7e1b      	ldrb	r3, [r3, #24]
 8011956:	2b01      	cmp	r3, #1
 8011958:	d041      	beq.n	80119de <HAL_FLASHEx_Erase+0x92>
 801195a:	4b22      	ldr	r3, [pc, #136]	; (80119e4 <HAL_FLASHEx_Erase+0x98>)
 801195c:	2201      	movs	r2, #1
 801195e:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011960:	6803      	ldr	r3, [r0, #0]
 8011962:	2b01      	cmp	r3, #1
 8011964:	d022      	beq.n	80119ac <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011966:	4820      	ldr	r0, [pc, #128]	; (80119e8 <HAL_FLASHEx_Erase+0x9c>)
 8011968:	f7ff ff4c 	bl	8011804 <FLASH_WaitForLastOperation>
 801196c:	2800      	cmp	r0, #0
 801196e:	d131      	bne.n	80119d4 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFF;
 8011970:	2301      	movs	r3, #1
 8011972:	425b      	negs	r3, r3
 8011974:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8011976:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011978:	3001      	adds	r0, #1
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801197a:	68ab      	ldr	r3, [r5, #8]
 801197c:	02db      	lsls	r3, r3, #11
 801197e:	686a      	ldr	r2, [r5, #4]
 8011980:	4694      	mov	ip, r2
 8011982:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011984:	42a3      	cmp	r3, r4
 8011986:	d926      	bls.n	80119d6 <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8011988:	0020      	movs	r0, r4
 801198a:	f7ff ffcd 	bl	8011928 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801198e:	4816      	ldr	r0, [pc, #88]	; (80119e8 <HAL_FLASHEx_Erase+0x9c>)
 8011990:	f7ff ff38 	bl	8011804 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011994:	4a15      	ldr	r2, [pc, #84]	; (80119ec <HAL_FLASHEx_Erase+0xa0>)
 8011996:	6913      	ldr	r3, [r2, #16]
 8011998:	2102      	movs	r1, #2
 801199a:	438b      	bics	r3, r1
 801199c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 801199e:	2800      	cmp	r0, #0
 80119a0:	d116      	bne.n	80119d0 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 80119a2:	2380      	movs	r3, #128	; 0x80
 80119a4:	011b      	lsls	r3, r3, #4
 80119a6:	469c      	mov	ip, r3
 80119a8:	4464      	add	r4, ip
 80119aa:	e7e6      	b.n	801197a <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80119ac:	480e      	ldr	r0, [pc, #56]	; (80119e8 <HAL_FLASHEx_Erase+0x9c>)
 80119ae:	f7ff ff29 	bl	8011804 <FLASH_WaitForLastOperation>
 80119b2:	2800      	cmp	r0, #0
 80119b4:	d001      	beq.n	80119ba <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80119b6:	2001      	movs	r0, #1
 80119b8:	e00d      	b.n	80119d6 <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 80119ba:	f7ff ffa3 	bl	8011904 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80119be:	480a      	ldr	r0, [pc, #40]	; (80119e8 <HAL_FLASHEx_Erase+0x9c>)
 80119c0:	f7ff ff20 	bl	8011804 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80119c4:	4a09      	ldr	r2, [pc, #36]	; (80119ec <HAL_FLASHEx_Erase+0xa0>)
 80119c6:	6913      	ldr	r3, [r2, #16]
 80119c8:	2104      	movs	r1, #4
 80119ca:	438b      	bics	r3, r1
 80119cc:	6113      	str	r3, [r2, #16]
 80119ce:	e002      	b.n	80119d6 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 80119d0:	6034      	str	r4, [r6, #0]
            break;
 80119d2:	e000      	b.n	80119d6 <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80119d4:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80119d6:	4b03      	ldr	r3, [pc, #12]	; (80119e4 <HAL_FLASHEx_Erase+0x98>)
 80119d8:	2200      	movs	r2, #0
 80119da:	761a      	strb	r2, [r3, #24]
}
 80119dc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80119de:	2002      	movs	r0, #2
 80119e0:	e7fc      	b.n	80119dc <HAL_FLASHEx_Erase+0x90>
 80119e2:	46c0      	nop			; (mov r8, r8)
 80119e4:	20006638 	.word	0x20006638
 80119e8:	0000c350 	.word	0x0000c350
 80119ec:	40022000 	.word	0x40022000

080119f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80119f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119f2:	46c6      	mov	lr, r8
 80119f4:	b500      	push	{lr}
 80119f6:	b082      	sub	sp, #8
  uint32_t position = 0x00;
 80119f8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80119fa:	e033      	b.n	8011a64 <HAL_GPIO_Init+0x74>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80119fc:	2604      	movs	r6, #4
 80119fe:	e000      	b.n	8011a02 <HAL_GPIO_Init+0x12>
 8011a00:	2600      	movs	r6, #0
 8011a02:	40a6      	lsls	r6, r4
 8011a04:	0034      	movs	r4, r6
 8011a06:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011a08:	3202      	adds	r2, #2
 8011a0a:	0092      	lsls	r2, r2, #2
 8011a0c:	4e57      	ldr	r6, [pc, #348]	; (8011b6c <HAL_GPIO_Init+0x17c>)
 8011a0e:	5194      	str	r4, [r2, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011a10:	4a57      	ldr	r2, [pc, #348]	; (8011b70 <HAL_GPIO_Init+0x180>)
 8011a12:	6814      	ldr	r4, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011a14:	43ea      	mvns	r2, r5
 8011a16:	0026      	movs	r6, r4
 8011a18:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011a1a:	684f      	ldr	r7, [r1, #4]
 8011a1c:	03ff      	lsls	r7, r7, #15
 8011a1e:	d501      	bpl.n	8011a24 <HAL_GPIO_Init+0x34>
        {
          SET_BIT(temp, iocurrent); 
 8011a20:	432c      	orrs	r4, r5
 8011a22:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 8011a24:	4c52      	ldr	r4, [pc, #328]	; (8011b70 <HAL_GPIO_Init+0x180>)
 8011a26:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8011a28:	6864      	ldr	r4, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011a2a:	0026      	movs	r6, r4
 8011a2c:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011a2e:	684f      	ldr	r7, [r1, #4]
 8011a30:	03bf      	lsls	r7, r7, #14
 8011a32:	d501      	bpl.n	8011a38 <HAL_GPIO_Init+0x48>
        { 
          SET_BIT(temp, iocurrent); 
 8011a34:	432c      	orrs	r4, r5
 8011a36:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8011a38:	4c4d      	ldr	r4, [pc, #308]	; (8011b70 <HAL_GPIO_Init+0x180>)
 8011a3a:	6066      	str	r6, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011a3c:	68a4      	ldr	r4, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011a3e:	0026      	movs	r6, r4
 8011a40:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011a42:	684f      	ldr	r7, [r1, #4]
 8011a44:	02ff      	lsls	r7, r7, #11
 8011a46:	d501      	bpl.n	8011a4c <HAL_GPIO_Init+0x5c>
        {
          SET_BIT(temp, iocurrent); 
 8011a48:	432c      	orrs	r4, r5
 8011a4a:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8011a4c:	4c48      	ldr	r4, [pc, #288]	; (8011b70 <HAL_GPIO_Init+0x180>)
 8011a4e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8011a50:	68e4      	ldr	r4, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011a52:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011a54:	684e      	ldr	r6, [r1, #4]
 8011a56:	02b6      	lsls	r6, r6, #10
 8011a58:	d501      	bpl.n	8011a5e <HAL_GPIO_Init+0x6e>
        {
          SET_BIT(temp, iocurrent); 
 8011a5a:	002a      	movs	r2, r5
 8011a5c:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 8011a5e:	4c44      	ldr	r4, [pc, #272]	; (8011b70 <HAL_GPIO_Init+0x180>)
 8011a60:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8011a62:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011a64:	680c      	ldr	r4, [r1, #0]
 8011a66:	0022      	movs	r2, r4
 8011a68:	40da      	lsrs	r2, r3
 8011a6a:	d07a      	beq.n	8011b62 <HAL_GPIO_Init+0x172>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011a6c:	2201      	movs	r2, #1
 8011a6e:	409a      	lsls	r2, r3
 8011a70:	0025      	movs	r5, r4
 8011a72:	4015      	ands	r5, r2
    if(iocurrent)
 8011a74:	4214      	tst	r4, r2
 8011a76:	d0f4      	beq.n	8011a62 <HAL_GPIO_Init+0x72>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011a78:	684a      	ldr	r2, [r1, #4]
 8011a7a:	2a02      	cmp	r2, #2
 8011a7c:	d001      	beq.n	8011a82 <HAL_GPIO_Init+0x92>
 8011a7e:	2a12      	cmp	r2, #18
 8011a80:	d10e      	bne.n	8011aa0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3];
 8011a82:	08da      	lsrs	r2, r3, #3
 8011a84:	3208      	adds	r2, #8
 8011a86:	0092      	lsls	r2, r2, #2
 8011a88:	5816      	ldr	r6, [r2, r0]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011a8a:	2407      	movs	r4, #7
 8011a8c:	401c      	ands	r4, r3
 8011a8e:	00a4      	lsls	r4, r4, #2
 8011a90:	270f      	movs	r7, #15
 8011a92:	40a7      	lsls	r7, r4
 8011a94:	43be      	bics	r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011a96:	690f      	ldr	r7, [r1, #16]
 8011a98:	40a7      	lsls	r7, r4
 8011a9a:	003c      	movs	r4, r7
 8011a9c:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3] = temp;
 8011a9e:	5014      	str	r4, [r2, r0]
      temp = GPIOx->MODER;
 8011aa0:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011aa2:	005c      	lsls	r4, r3, #1
 8011aa4:	2203      	movs	r2, #3
 8011aa6:	0016      	movs	r6, r2
 8011aa8:	40a6      	lsls	r6, r4
 8011aaa:	46b4      	mov	ip, r6
 8011aac:	43f6      	mvns	r6, r6
 8011aae:	46b0      	mov	r8, r6
 8011ab0:	4666      	mov	r6, ip
 8011ab2:	43b7      	bics	r7, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011ab4:	684e      	ldr	r6, [r1, #4]
 8011ab6:	4032      	ands	r2, r6
 8011ab8:	40a2      	lsls	r2, r4
 8011aba:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8011abc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011abe:	684a      	ldr	r2, [r1, #4]
 8011ac0:	1e57      	subs	r7, r2, #1
 8011ac2:	2f01      	cmp	r7, #1
 8011ac4:	d903      	bls.n	8011ace <HAL_GPIO_Init+0xde>
 8011ac6:	2a11      	cmp	r2, #17
 8011ac8:	d001      	beq.n	8011ace <HAL_GPIO_Init+0xde>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011aca:	2a12      	cmp	r2, #18
 8011acc:	d111      	bne.n	8011af2 <HAL_GPIO_Init+0x102>
        temp = GPIOx->OSPEEDR; 
 8011ace:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011ad0:	4642      	mov	r2, r8
 8011ad2:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011ad4:	68ca      	ldr	r2, [r1, #12]
 8011ad6:	40a2      	lsls	r2, r4
 8011ad8:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 8011ada:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8011adc:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011ade:	2201      	movs	r2, #1
 8011ae0:	0016      	movs	r6, r2
 8011ae2:	409e      	lsls	r6, r3
 8011ae4:	43b7      	bics	r7, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011ae6:	684e      	ldr	r6, [r1, #4]
 8011ae8:	0936      	lsrs	r6, r6, #4
 8011aea:	4032      	ands	r2, r6
 8011aec:	409a      	lsls	r2, r3
 8011aee:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 8011af0:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8011af2:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011af4:	4646      	mov	r6, r8
 8011af6:	4032      	ands	r2, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011af8:	688e      	ldr	r6, [r1, #8]
 8011afa:	40a6      	lsls	r6, r4
 8011afc:	4316      	orrs	r6, r2
      GPIOx->PUPDR = temp;
 8011afe:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011b00:	684a      	ldr	r2, [r1, #4]
 8011b02:	00d2      	lsls	r2, r2, #3
 8011b04:	d5ad      	bpl.n	8011a62 <HAL_GPIO_Init+0x72>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011b06:	4c1b      	ldr	r4, [pc, #108]	; (8011b74 <HAL_GPIO_Init+0x184>)
 8011b08:	69a6      	ldr	r6, [r4, #24]
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	4316      	orrs	r6, r2
 8011b0e:	61a6      	str	r6, [r4, #24]
 8011b10:	69a4      	ldr	r4, [r4, #24]
 8011b12:	4022      	ands	r2, r4
 8011b14:	9201      	str	r2, [sp, #4]
 8011b16:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8011b18:	089a      	lsrs	r2, r3, #2
 8011b1a:	1c94      	adds	r4, r2, #2
 8011b1c:	00a4      	lsls	r4, r4, #2
 8011b1e:	4e13      	ldr	r6, [pc, #76]	; (8011b6c <HAL_GPIO_Init+0x17c>)
 8011b20:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011b22:	2603      	movs	r6, #3
 8011b24:	401e      	ands	r6, r3
 8011b26:	00b4      	lsls	r4, r6, #2
 8011b28:	260f      	movs	r6, #15
 8011b2a:	40a6      	lsls	r6, r4
 8011b2c:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011b2e:	2690      	movs	r6, #144	; 0x90
 8011b30:	05f6      	lsls	r6, r6, #23
 8011b32:	42b0      	cmp	r0, r6
 8011b34:	d100      	bne.n	8011b38 <HAL_GPIO_Init+0x148>
 8011b36:	e763      	b.n	8011a00 <HAL_GPIO_Init+0x10>
 8011b38:	4e0f      	ldr	r6, [pc, #60]	; (8011b78 <HAL_GPIO_Init+0x188>)
 8011b3a:	42b0      	cmp	r0, r6
 8011b3c:	d00b      	beq.n	8011b56 <HAL_GPIO_Init+0x166>
 8011b3e:	4e0f      	ldr	r6, [pc, #60]	; (8011b7c <HAL_GPIO_Init+0x18c>)
 8011b40:	42b0      	cmp	r0, r6
 8011b42:	d00a      	beq.n	8011b5a <HAL_GPIO_Init+0x16a>
 8011b44:	4e0e      	ldr	r6, [pc, #56]	; (8011b80 <HAL_GPIO_Init+0x190>)
 8011b46:	42b0      	cmp	r0, r6
 8011b48:	d009      	beq.n	8011b5e <HAL_GPIO_Init+0x16e>
 8011b4a:	4e0e      	ldr	r6, [pc, #56]	; (8011b84 <HAL_GPIO_Init+0x194>)
 8011b4c:	42b0      	cmp	r0, r6
 8011b4e:	d100      	bne.n	8011b52 <HAL_GPIO_Init+0x162>
 8011b50:	e754      	b.n	80119fc <HAL_GPIO_Init+0xc>
 8011b52:	2605      	movs	r6, #5
 8011b54:	e755      	b.n	8011a02 <HAL_GPIO_Init+0x12>
 8011b56:	2601      	movs	r6, #1
 8011b58:	e753      	b.n	8011a02 <HAL_GPIO_Init+0x12>
 8011b5a:	2602      	movs	r6, #2
 8011b5c:	e751      	b.n	8011a02 <HAL_GPIO_Init+0x12>
 8011b5e:	2603      	movs	r6, #3
 8011b60:	e74f      	b.n	8011a02 <HAL_GPIO_Init+0x12>
  } 
}
 8011b62:	b002      	add	sp, #8
 8011b64:	bc80      	pop	{r7}
 8011b66:	46b8      	mov	r8, r7
 8011b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b6a:	46c0      	nop			; (mov r8, r8)
 8011b6c:	40010000 	.word	0x40010000
 8011b70:	40010400 	.word	0x40010400
 8011b74:	40021000 	.word	0x40021000
 8011b78:	48000400 	.word	0x48000400
 8011b7c:	48000800 	.word	0x48000800
 8011b80:	48000c00 	.word	0x48000c00
 8011b84:	48001000 	.word	0x48001000

08011b88 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011b88:	6903      	ldr	r3, [r0, #16]
 8011b8a:	420b      	tst	r3, r1
 8011b8c:	d001      	beq.n	8011b92 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8011b8e:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8011b90:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8011b92:	2000      	movs	r0, #0
 8011b94:	e7fc      	b.n	8011b90 <HAL_GPIO_ReadPin+0x8>

08011b96 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011b96:	2a00      	cmp	r2, #0
 8011b98:	d001      	beq.n	8011b9e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011b9a:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011b9c:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011b9e:	6281      	str	r1, [r0, #40]	; 0x28
}
 8011ba0:	e7fc      	b.n	8011b9c <HAL_GPIO_WritePin+0x6>

08011ba2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011ba2:	6943      	ldr	r3, [r0, #20]
 8011ba4:	4059      	eors	r1, r3
 8011ba6:	6141      	str	r1, [r0, #20]
}
 8011ba8:	4770      	bx	lr
	...

08011bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011bac:	b510      	push	{r4, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8011bae:	4b05      	ldr	r3, [pc, #20]	; (8011bc4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8011bb0:	695b      	ldr	r3, [r3, #20]
 8011bb2:	4218      	tst	r0, r3
 8011bb4:	d100      	bne.n	8011bb8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8011bb6:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011bb8:	4b02      	ldr	r3, [pc, #8]	; (8011bc4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8011bba:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011bbc:	f7f9 fbb8 	bl	800b330 <HAL_GPIO_EXTI_Callback>
}
 8011bc0:	e7f9      	b.n	8011bb6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8011bc2:	46c0      	nop			; (mov r8, r8)
 8011bc4:	40010400 	.word	0x40010400

08011bc8 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8011bc8:	4a03      	ldr	r2, [pc, #12]	; (8011bd8 <HAL_PWR_EnableBkUpAccess+0x10>)
 8011bca:	6811      	ldr	r1, [r2, #0]
 8011bcc:	2380      	movs	r3, #128	; 0x80
 8011bce:	005b      	lsls	r3, r3, #1
 8011bd0:	430b      	orrs	r3, r1
 8011bd2:	6013      	str	r3, [r2, #0]
}
 8011bd4:	4770      	bx	lr
 8011bd6:	46c0      	nop			; (mov r8, r8)
 8011bd8:	40007000 	.word	0x40007000

08011bdc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011bdc:	b530      	push	{r4, r5, lr}
 8011bde:	b083      	sub	sp, #12
 8011be0:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011be2:	6803      	ldr	r3, [r0, #0]
 8011be4:	07db      	lsls	r3, r3, #31
 8011be6:	d534      	bpl.n	8011c52 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011be8:	4bc1      	ldr	r3, [pc, #772]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011bea:	685a      	ldr	r2, [r3, #4]
 8011bec:	230c      	movs	r3, #12
 8011bee:	4013      	ands	r3, r2
 8011bf0:	2b04      	cmp	r3, #4
 8011bf2:	d026      	beq.n	8011c42 <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011bf4:	4bbe      	ldr	r3, [pc, #760]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011bf6:	685a      	ldr	r2, [r3, #4]
 8011bf8:	230c      	movs	r3, #12
 8011bfa:	4013      	ands	r3, r2
 8011bfc:	2b08      	cmp	r3, #8
 8011bfe:	d108      	bne.n	8011c12 <HAL_RCC_OscConfig+0x36>
 8011c00:	4bbb      	ldr	r3, [pc, #748]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	22c0      	movs	r2, #192	; 0xc0
 8011c06:	0252      	lsls	r2, r2, #9
 8011c08:	4013      	ands	r3, r2
 8011c0a:	2280      	movs	r2, #128	; 0x80
 8011c0c:	0252      	lsls	r2, r2, #9
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d017      	beq.n	8011c42 <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011c12:	4bb7      	ldr	r3, [pc, #732]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011c14:	681a      	ldr	r2, [r3, #0]
 8011c16:	49b7      	ldr	r1, [pc, #732]	; (8011ef4 <HAL_RCC_OscConfig+0x318>)
 8011c18:	400a      	ands	r2, r1
 8011c1a:	601a      	str	r2, [r3, #0]
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	49b6      	ldr	r1, [pc, #728]	; (8011ef8 <HAL_RCC_OscConfig+0x31c>)
 8011c20:	400a      	ands	r2, r1
 8011c22:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c24:	f7fe fc72 	bl	801050c <HAL_GetTick>
 8011c28:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011c2a:	4bb1      	ldr	r3, [pc, #708]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	039b      	lsls	r3, r3, #14
 8011c30:	d536      	bpl.n	8011ca0 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011c32:	f7fe fc6b 	bl	801050c <HAL_GetTick>
 8011c36:	1b40      	subs	r0, r0, r5
 8011c38:	2864      	cmp	r0, #100	; 0x64
 8011c3a:	d9f6      	bls.n	8011c2a <HAL_RCC_OscConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8011c3c:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8011c3e:	b003      	add	sp, #12
 8011c40:	bd30      	pop	{r4, r5, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011c42:	4bab      	ldr	r3, [pc, #684]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	039b      	lsls	r3, r3, #14
 8011c48:	d503      	bpl.n	8011c52 <HAL_RCC_OscConfig+0x76>
 8011c4a:	6863      	ldr	r3, [r4, #4]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d100      	bne.n	8011c52 <HAL_RCC_OscConfig+0x76>
 8011c50:	e256      	b.n	8012100 <HAL_RCC_OscConfig+0x524>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011c52:	6823      	ldr	r3, [r4, #0]
 8011c54:	079b      	lsls	r3, r3, #30
 8011c56:	d400      	bmi.n	8011c5a <HAL_RCC_OscConfig+0x7e>
 8011c58:	e087      	b.n	8011d6a <HAL_RCC_OscConfig+0x18e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011c5a:	4ba5      	ldr	r3, [pc, #660]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	220c      	movs	r2, #12
 8011c60:	421a      	tst	r2, r3
 8011c62:	d072      	beq.n	8011d4a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011c64:	4ba2      	ldr	r3, [pc, #648]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011c66:	685a      	ldr	r2, [r3, #4]
 8011c68:	230c      	movs	r3, #12
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	2b08      	cmp	r3, #8
 8011c6e:	d063      	beq.n	8011d38 <HAL_RCC_OscConfig+0x15c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011c70:	68e3      	ldr	r3, [r4, #12]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d100      	bne.n	8011c78 <HAL_RCC_OscConfig+0x9c>
 8011c76:	e09a      	b.n	8011dae <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_ENABLE();
 8011c78:	4a9d      	ldr	r2, [pc, #628]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011c7a:	6813      	ldr	r3, [r2, #0]
 8011c7c:	2101      	movs	r1, #1
 8011c7e:	430b      	orrs	r3, r1
 8011c80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011c82:	f7fe fc43 	bl	801050c <HAL_GetTick>
 8011c86:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c88:	4b99      	ldr	r3, [pc, #612]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	079b      	lsls	r3, r3, #30
 8011c8e:	d500      	bpl.n	8011c92 <HAL_RCC_OscConfig+0xb6>
 8011c90:	e084      	b.n	8011d9c <HAL_RCC_OscConfig+0x1c0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011c92:	f7fe fc3b 	bl	801050c <HAL_GetTick>
 8011c96:	1b40      	subs	r0, r0, r5
 8011c98:	2864      	cmp	r0, #100	; 0x64
 8011c9a:	d9f5      	bls.n	8011c88 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
 8011c9c:	2003      	movs	r0, #3
 8011c9e:	e7ce      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011ca0:	6863      	ldr	r3, [r4, #4]
 8011ca2:	2b01      	cmp	r3, #1
 8011ca4:	d00b      	beq.n	8011cbe <HAL_RCC_OscConfig+0xe2>
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d120      	bne.n	8011cec <HAL_RCC_OscConfig+0x110>
 8011caa:	4b91      	ldr	r3, [pc, #580]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011cac:	681a      	ldr	r2, [r3, #0]
 8011cae:	4991      	ldr	r1, [pc, #580]	; (8011ef4 <HAL_RCC_OscConfig+0x318>)
 8011cb0:	400a      	ands	r2, r1
 8011cb2:	601a      	str	r2, [r3, #0]
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	4990      	ldr	r1, [pc, #576]	; (8011ef8 <HAL_RCC_OscConfig+0x31c>)
 8011cb8:	400a      	ands	r2, r1
 8011cba:	601a      	str	r2, [r3, #0]
 8011cbc:	e005      	b.n	8011cca <HAL_RCC_OscConfig+0xee>
 8011cbe:	4a8c      	ldr	r2, [pc, #560]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011cc0:	6811      	ldr	r1, [r2, #0]
 8011cc2:	2380      	movs	r3, #128	; 0x80
 8011cc4:	025b      	lsls	r3, r3, #9
 8011cc6:	430b      	orrs	r3, r1
 8011cc8:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011cca:	6863      	ldr	r3, [r4, #4]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d025      	beq.n	8011d1c <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
 8011cd0:	f7fe fc1c 	bl	801050c <HAL_GetTick>
 8011cd4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011cd6:	4b86      	ldr	r3, [pc, #536]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	039b      	lsls	r3, r3, #14
 8011cdc:	d4b9      	bmi.n	8011c52 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011cde:	f7fe fc15 	bl	801050c <HAL_GetTick>
 8011ce2:	1b40      	subs	r0, r0, r5
 8011ce4:	2864      	cmp	r0, #100	; 0x64
 8011ce6:	d9f6      	bls.n	8011cd6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8011ce8:	2003      	movs	r0, #3
 8011cea:	e7a8      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011cec:	2b05      	cmp	r3, #5
 8011cee:	d009      	beq.n	8011d04 <HAL_RCC_OscConfig+0x128>
 8011cf0:	4b7f      	ldr	r3, [pc, #508]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	497f      	ldr	r1, [pc, #508]	; (8011ef4 <HAL_RCC_OscConfig+0x318>)
 8011cf6:	400a      	ands	r2, r1
 8011cf8:	601a      	str	r2, [r3, #0]
 8011cfa:	681a      	ldr	r2, [r3, #0]
 8011cfc:	497e      	ldr	r1, [pc, #504]	; (8011ef8 <HAL_RCC_OscConfig+0x31c>)
 8011cfe:	400a      	ands	r2, r1
 8011d00:	601a      	str	r2, [r3, #0]
 8011d02:	e7e2      	b.n	8011cca <HAL_RCC_OscConfig+0xee>
 8011d04:	4b7a      	ldr	r3, [pc, #488]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011d06:	6819      	ldr	r1, [r3, #0]
 8011d08:	2280      	movs	r2, #128	; 0x80
 8011d0a:	02d2      	lsls	r2, r2, #11
 8011d0c:	430a      	orrs	r2, r1
 8011d0e:	601a      	str	r2, [r3, #0]
 8011d10:	6819      	ldr	r1, [r3, #0]
 8011d12:	2280      	movs	r2, #128	; 0x80
 8011d14:	0252      	lsls	r2, r2, #9
 8011d16:	430a      	orrs	r2, r1
 8011d18:	601a      	str	r2, [r3, #0]
 8011d1a:	e7d6      	b.n	8011cca <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8011d1c:	f7fe fbf6 	bl	801050c <HAL_GetTick>
 8011d20:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011d22:	4b73      	ldr	r3, [pc, #460]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	039b      	lsls	r3, r3, #14
 8011d28:	d593      	bpl.n	8011c52 <HAL_RCC_OscConfig+0x76>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011d2a:	f7fe fbef 	bl	801050c <HAL_GetTick>
 8011d2e:	1b40      	subs	r0, r0, r5
 8011d30:	2864      	cmp	r0, #100	; 0x64
 8011d32:	d9f6      	bls.n	8011d22 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8011d34:	2003      	movs	r0, #3
 8011d36:	e782      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011d38:	4b6d      	ldr	r3, [pc, #436]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	22c0      	movs	r2, #192	; 0xc0
 8011d3e:	0252      	lsls	r2, r2, #9
 8011d40:	4013      	ands	r3, r2
 8011d42:	2280      	movs	r2, #128	; 0x80
 8011d44:	0212      	lsls	r2, r2, #8
 8011d46:	4293      	cmp	r3, r2
 8011d48:	d192      	bne.n	8011c70 <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011d4a:	4b69      	ldr	r3, [pc, #420]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	079b      	lsls	r3, r3, #30
 8011d50:	d503      	bpl.n	8011d5a <HAL_RCC_OscConfig+0x17e>
 8011d52:	68e3      	ldr	r3, [r4, #12]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d000      	beq.n	8011d5a <HAL_RCC_OscConfig+0x17e>
 8011d58:	e1d4      	b.n	8012104 <HAL_RCC_OscConfig+0x528>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d5a:	4965      	ldr	r1, [pc, #404]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011d5c:	680b      	ldr	r3, [r1, #0]
 8011d5e:	22f8      	movs	r2, #248	; 0xf8
 8011d60:	4393      	bics	r3, r2
 8011d62:	6922      	ldr	r2, [r4, #16]
 8011d64:	00d2      	lsls	r2, r2, #3
 8011d66:	4313      	orrs	r3, r2
 8011d68:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011d6a:	6823      	ldr	r3, [r4, #0]
 8011d6c:	071b      	lsls	r3, r3, #28
 8011d6e:	d544      	bpl.n	8011dfa <HAL_RCC_OscConfig+0x21e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011d70:	6a23      	ldr	r3, [r4, #32]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d02e      	beq.n	8011dd4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_LSI_ENABLE();
 8011d76:	4a5e      	ldr	r2, [pc, #376]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011d78:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011d7a:	2101      	movs	r1, #1
 8011d7c:	430b      	orrs	r3, r1
 8011d7e:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011d80:	f7fe fbc4 	bl	801050c <HAL_GetTick>
 8011d84:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011d86:	4b5a      	ldr	r3, [pc, #360]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d8a:	079b      	lsls	r3, r3, #30
 8011d8c:	d435      	bmi.n	8011dfa <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011d8e:	f7fe fbbd 	bl	801050c <HAL_GetTick>
 8011d92:	1b40      	subs	r0, r0, r5
 8011d94:	2864      	cmp	r0, #100	; 0x64
 8011d96:	d9f6      	bls.n	8011d86 <HAL_RCC_OscConfig+0x1aa>
          return HAL_TIMEOUT;
 8011d98:	2003      	movs	r0, #3
 8011d9a:	e750      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011d9c:	4954      	ldr	r1, [pc, #336]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011d9e:	680b      	ldr	r3, [r1, #0]
 8011da0:	22f8      	movs	r2, #248	; 0xf8
 8011da2:	4393      	bics	r3, r2
 8011da4:	6922      	ldr	r2, [r4, #16]
 8011da6:	00d2      	lsls	r2, r2, #3
 8011da8:	4313      	orrs	r3, r2
 8011daa:	600b      	str	r3, [r1, #0]
 8011dac:	e7dd      	b.n	8011d6a <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_DISABLE();
 8011dae:	4a50      	ldr	r2, [pc, #320]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011db0:	6813      	ldr	r3, [r2, #0]
 8011db2:	2101      	movs	r1, #1
 8011db4:	438b      	bics	r3, r1
 8011db6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011db8:	f7fe fba8 	bl	801050c <HAL_GetTick>
 8011dbc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011dbe:	4b4c      	ldr	r3, [pc, #304]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	079b      	lsls	r3, r3, #30
 8011dc4:	d5d1      	bpl.n	8011d6a <HAL_RCC_OscConfig+0x18e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011dc6:	f7fe fba1 	bl	801050c <HAL_GetTick>
 8011dca:	1b40      	subs	r0, r0, r5
 8011dcc:	2864      	cmp	r0, #100	; 0x64
 8011dce:	d9f6      	bls.n	8011dbe <HAL_RCC_OscConfig+0x1e2>
            return HAL_TIMEOUT;
 8011dd0:	2003      	movs	r0, #3
 8011dd2:	e734      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSI_DISABLE();
 8011dd4:	4a46      	ldr	r2, [pc, #280]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011dd6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011dd8:	2101      	movs	r1, #1
 8011dda:	438b      	bics	r3, r1
 8011ddc:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011dde:	f7fe fb95 	bl	801050c <HAL_GetTick>
 8011de2:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011de4:	4b42      	ldr	r3, [pc, #264]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de8:	079b      	lsls	r3, r3, #30
 8011dea:	d506      	bpl.n	8011dfa <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011dec:	f7fe fb8e 	bl	801050c <HAL_GetTick>
 8011df0:	1b40      	subs	r0, r0, r5
 8011df2:	2864      	cmp	r0, #100	; 0x64
 8011df4:	d9f6      	bls.n	8011de4 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8011df6:	2003      	movs	r0, #3
 8011df8:	e721      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	075b      	lsls	r3, r3, #29
 8011dfe:	d440      	bmi.n	8011e82 <HAL_RCC_OscConfig+0x2a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011e00:	6823      	ldr	r3, [r4, #0]
 8011e02:	06db      	lsls	r3, r3, #27
 8011e04:	d512      	bpl.n	8011e2c <HAL_RCC_OscConfig+0x250>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8011e06:	6963      	ldr	r3, [r4, #20]
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	d100      	bne.n	8011e0e <HAL_RCC_OscConfig+0x232>
 8011e0c:	e0c7      	b.n	8011f9e <HAL_RCC_OscConfig+0x3c2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011e0e:	3305      	adds	r3, #5
 8011e10:	d000      	beq.n	8011e14 <HAL_RCC_OscConfig+0x238>
 8011e12:	e0e4      	b.n	8011fde <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_HSI14ADC_ENABLE();
 8011e14:	4a36      	ldr	r2, [pc, #216]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011e16:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011e18:	2104      	movs	r1, #4
 8011e1a:	438b      	bics	r3, r1
 8011e1c:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011e1e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011e20:	31f4      	adds	r1, #244	; 0xf4
 8011e22:	438b      	bics	r3, r1
 8011e24:	69a1      	ldr	r1, [r4, #24]
 8011e26:	00c9      	lsls	r1, r1, #3
 8011e28:	430b      	orrs	r3, r1
 8011e2a:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011e2c:	6823      	ldr	r3, [r4, #0]
 8011e2e:	069b      	lsls	r3, r3, #26
 8011e30:	d400      	bmi.n	8011e34 <HAL_RCC_OscConfig+0x258>
 8011e32:	e0fb      	b.n	801202c <HAL_RCC_OscConfig+0x450>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011e34:	4b2e      	ldr	r3, [pc, #184]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011e36:	685a      	ldr	r2, [r3, #4]
 8011e38:	230c      	movs	r3, #12
 8011e3a:	4013      	ands	r3, r2
 8011e3c:	2b0c      	cmp	r3, #12
 8011e3e:	d100      	bne.n	8011e42 <HAL_RCC_OscConfig+0x266>
 8011e40:	e0ed      	b.n	801201e <HAL_RCC_OscConfig+0x442>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011e42:	4b2b      	ldr	r3, [pc, #172]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011e44:	685a      	ldr	r2, [r3, #4]
 8011e46:	230c      	movs	r3, #12
 8011e48:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011e4a:	2b08      	cmp	r3, #8
 8011e4c:	d100      	bne.n	8011e50 <HAL_RCC_OscConfig+0x274>
 8011e4e:	e0de      	b.n	801200e <HAL_RCC_OscConfig+0x432>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011e50:	69e3      	ldr	r3, [r4, #28]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d100      	bne.n	8011e58 <HAL_RCC_OscConfig+0x27c>
 8011e56:	e107      	b.n	8012068 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_HSI48_ENABLE();
 8011e58:	4a25      	ldr	r2, [pc, #148]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011e5a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011e5c:	2380      	movs	r3, #128	; 0x80
 8011e5e:	025b      	lsls	r3, r3, #9
 8011e60:	430b      	orrs	r3, r1
 8011e62:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011e64:	f7fe fb52 	bl	801050c <HAL_GetTick>
 8011e68:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011e6a:	4b21      	ldr	r3, [pc, #132]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e6e:	03db      	lsls	r3, r3, #15
 8011e70:	d500      	bpl.n	8011e74 <HAL_RCC_OscConfig+0x298>
 8011e72:	e0db      	b.n	801202c <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011e74:	f7fe fb4a 	bl	801050c <HAL_GetTick>
 8011e78:	1b40      	subs	r0, r0, r5
 8011e7a:	2864      	cmp	r0, #100	; 0x64
 8011e7c:	d9f5      	bls.n	8011e6a <HAL_RCC_OscConfig+0x28e>
            return HAL_TIMEOUT;
 8011e7e:	2003      	movs	r0, #3
 8011e80:	e6dd      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011e82:	4a1b      	ldr	r2, [pc, #108]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011e84:	69d1      	ldr	r1, [r2, #28]
 8011e86:	2080      	movs	r0, #128	; 0x80
 8011e88:	0540      	lsls	r0, r0, #21
 8011e8a:	4301      	orrs	r1, r0
 8011e8c:	61d1      	str	r1, [r2, #28]
 8011e8e:	69d3      	ldr	r3, [r2, #28]
 8011e90:	4003      	ands	r3, r0
 8011e92:	9301      	str	r3, [sp, #4]
 8011e94:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011e96:	4a19      	ldr	r2, [pc, #100]	; (8011efc <HAL_RCC_OscConfig+0x320>)
 8011e98:	6811      	ldr	r1, [r2, #0]
 8011e9a:	2380      	movs	r3, #128	; 0x80
 8011e9c:	005b      	lsls	r3, r3, #1
 8011e9e:	430b      	orrs	r3, r1
 8011ea0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8011ea2:	f7fe fb33 	bl	801050c <HAL_GetTick>
 8011ea6:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011ea8:	4b14      	ldr	r3, [pc, #80]	; (8011efc <HAL_RCC_OscConfig+0x320>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	05db      	lsls	r3, r3, #23
 8011eae:	d406      	bmi.n	8011ebe <HAL_RCC_OscConfig+0x2e2>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011eb0:	f7fe fb2c 	bl	801050c <HAL_GetTick>
 8011eb4:	1b40      	subs	r0, r0, r5
 8011eb6:	2864      	cmp	r0, #100	; 0x64
 8011eb8:	d9f6      	bls.n	8011ea8 <HAL_RCC_OscConfig+0x2cc>
        return HAL_TIMEOUT;
 8011eba:	2003      	movs	r0, #3
 8011ebc:	e6bf      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011ebe:	4b0c      	ldr	r3, [pc, #48]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011ec0:	6a1a      	ldr	r2, [r3, #32]
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	438a      	bics	r2, r1
 8011ec6:	621a      	str	r2, [r3, #32]
 8011ec8:	6a1a      	ldr	r2, [r3, #32]
 8011eca:	3103      	adds	r1, #3
 8011ecc:	438a      	bics	r2, r1
 8011ece:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8011ed0:	f7fe fb1c 	bl	801050c <HAL_GetTick>
 8011ed4:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011ed6:	4b06      	ldr	r3, [pc, #24]	; (8011ef0 <HAL_RCC_OscConfig+0x314>)
 8011ed8:	6a1b      	ldr	r3, [r3, #32]
 8011eda:	079b      	lsls	r3, r3, #30
 8011edc:	d512      	bpl.n	8011f04 <HAL_RCC_OscConfig+0x328>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011ede:	f7fe fb15 	bl	801050c <HAL_GetTick>
 8011ee2:	1b40      	subs	r0, r0, r5
 8011ee4:	4b06      	ldr	r3, [pc, #24]	; (8011f00 <HAL_RCC_OscConfig+0x324>)
 8011ee6:	4298      	cmp	r0, r3
 8011ee8:	d9f5      	bls.n	8011ed6 <HAL_RCC_OscConfig+0x2fa>
        return HAL_TIMEOUT;
 8011eea:	2003      	movs	r0, #3
 8011eec:	e6a7      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
 8011eee:	46c0      	nop			; (mov r8, r8)
 8011ef0:	40021000 	.word	0x40021000
 8011ef4:	fffeffff 	.word	0xfffeffff
 8011ef8:	fffbffff 	.word	0xfffbffff
 8011efc:	40007000 	.word	0x40007000
 8011f00:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011f04:	68a3      	ldr	r3, [r4, #8]
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	d00b      	beq.n	8011f22 <HAL_RCC_OscConfig+0x346>
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d121      	bne.n	8011f52 <HAL_RCC_OscConfig+0x376>
 8011f0e:	4b81      	ldr	r3, [pc, #516]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011f10:	6a1a      	ldr	r2, [r3, #32]
 8011f12:	2101      	movs	r1, #1
 8011f14:	438a      	bics	r2, r1
 8011f16:	621a      	str	r2, [r3, #32]
 8011f18:	6a1a      	ldr	r2, [r3, #32]
 8011f1a:	3103      	adds	r1, #3
 8011f1c:	438a      	bics	r2, r1
 8011f1e:	621a      	str	r2, [r3, #32]
 8011f20:	e004      	b.n	8011f2c <HAL_RCC_OscConfig+0x350>
 8011f22:	4a7c      	ldr	r2, [pc, #496]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011f24:	6a13      	ldr	r3, [r2, #32]
 8011f26:	2101      	movs	r1, #1
 8011f28:	430b      	orrs	r3, r1
 8011f2a:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011f2c:	68a3      	ldr	r3, [r4, #8]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d025      	beq.n	8011f7e <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();
 8011f32:	f7fe faeb 	bl	801050c <HAL_GetTick>
 8011f36:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011f38:	4b76      	ldr	r3, [pc, #472]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011f3a:	6a1b      	ldr	r3, [r3, #32]
 8011f3c:	079b      	lsls	r3, r3, #30
 8011f3e:	d500      	bpl.n	8011f42 <HAL_RCC_OscConfig+0x366>
 8011f40:	e75e      	b.n	8011e00 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011f42:	f7fe fae3 	bl	801050c <HAL_GetTick>
 8011f46:	1b40      	subs	r0, r0, r5
 8011f48:	4b73      	ldr	r3, [pc, #460]	; (8012118 <HAL_RCC_OscConfig+0x53c>)
 8011f4a:	4298      	cmp	r0, r3
 8011f4c:	d9f4      	bls.n	8011f38 <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 8011f4e:	2003      	movs	r0, #3
 8011f50:	e675      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011f52:	2b05      	cmp	r3, #5
 8011f54:	d009      	beq.n	8011f6a <HAL_RCC_OscConfig+0x38e>
 8011f56:	4b6f      	ldr	r3, [pc, #444]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011f58:	6a1a      	ldr	r2, [r3, #32]
 8011f5a:	2101      	movs	r1, #1
 8011f5c:	438a      	bics	r2, r1
 8011f5e:	621a      	str	r2, [r3, #32]
 8011f60:	6a1a      	ldr	r2, [r3, #32]
 8011f62:	3103      	adds	r1, #3
 8011f64:	438a      	bics	r2, r1
 8011f66:	621a      	str	r2, [r3, #32]
 8011f68:	e7e0      	b.n	8011f2c <HAL_RCC_OscConfig+0x350>
 8011f6a:	4b6a      	ldr	r3, [pc, #424]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011f6c:	6a1a      	ldr	r2, [r3, #32]
 8011f6e:	2104      	movs	r1, #4
 8011f70:	430a      	orrs	r2, r1
 8011f72:	621a      	str	r2, [r3, #32]
 8011f74:	6a1a      	ldr	r2, [r3, #32]
 8011f76:	3903      	subs	r1, #3
 8011f78:	430a      	orrs	r2, r1
 8011f7a:	621a      	str	r2, [r3, #32]
 8011f7c:	e7d6      	b.n	8011f2c <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 8011f7e:	f7fe fac5 	bl	801050c <HAL_GetTick>
 8011f82:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011f84:	4b63      	ldr	r3, [pc, #396]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011f86:	6a1b      	ldr	r3, [r3, #32]
 8011f88:	079b      	lsls	r3, r3, #30
 8011f8a:	d400      	bmi.n	8011f8e <HAL_RCC_OscConfig+0x3b2>
 8011f8c:	e738      	b.n	8011e00 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011f8e:	f7fe fabd 	bl	801050c <HAL_GetTick>
 8011f92:	1b40      	subs	r0, r0, r5
 8011f94:	4b60      	ldr	r3, [pc, #384]	; (8012118 <HAL_RCC_OscConfig+0x53c>)
 8011f96:	4298      	cmp	r0, r3
 8011f98:	d9f4      	bls.n	8011f84 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8011f9a:	2003      	movs	r0, #3
 8011f9c:	e64f      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011f9e:	4b5d      	ldr	r3, [pc, #372]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011fa2:	2104      	movs	r1, #4
 8011fa4:	430a      	orrs	r2, r1
 8011fa6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011faa:	3903      	subs	r1, #3
 8011fac:	430a      	orrs	r2, r1
 8011fae:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011fb0:	f7fe faac 	bl	801050c <HAL_GetTick>
 8011fb4:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011fb6:	4b57      	ldr	r3, [pc, #348]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fba:	079b      	lsls	r3, r3, #30
 8011fbc:	d406      	bmi.n	8011fcc <HAL_RCC_OscConfig+0x3f0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011fbe:	f7fe faa5 	bl	801050c <HAL_GetTick>
 8011fc2:	1b40      	subs	r0, r0, r5
 8011fc4:	2864      	cmp	r0, #100	; 0x64
 8011fc6:	d9f6      	bls.n	8011fb6 <HAL_RCC_OscConfig+0x3da>
          return HAL_TIMEOUT;
 8011fc8:	2003      	movs	r0, #3
 8011fca:	e638      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011fcc:	4951      	ldr	r1, [pc, #324]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011fce:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011fd0:	22f8      	movs	r2, #248	; 0xf8
 8011fd2:	4393      	bics	r3, r2
 8011fd4:	69a2      	ldr	r2, [r4, #24]
 8011fd6:	00d2      	lsls	r2, r2, #3
 8011fd8:	4313      	orrs	r3, r2
 8011fda:	634b      	str	r3, [r1, #52]	; 0x34
 8011fdc:	e726      	b.n	8011e2c <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011fde:	4b4d      	ldr	r3, [pc, #308]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011fe2:	2104      	movs	r1, #4
 8011fe4:	430a      	orrs	r2, r1
 8011fe6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011fea:	3903      	subs	r1, #3
 8011fec:	438a      	bics	r2, r1
 8011fee:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011ff0:	f7fe fa8c 	bl	801050c <HAL_GetTick>
 8011ff4:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011ff6:	4b47      	ldr	r3, [pc, #284]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8011ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ffa:	079b      	lsls	r3, r3, #30
 8011ffc:	d400      	bmi.n	8012000 <HAL_RCC_OscConfig+0x424>
 8011ffe:	e715      	b.n	8011e2c <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012000:	f7fe fa84 	bl	801050c <HAL_GetTick>
 8012004:	1b40      	subs	r0, r0, r5
 8012006:	2864      	cmp	r0, #100	; 0x64
 8012008:	d9f5      	bls.n	8011ff6 <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 801200a:	2003      	movs	r0, #3
 801200c:	e617      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801200e:	4b41      	ldr	r3, [pc, #260]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8012010:	685b      	ldr	r3, [r3, #4]
 8012012:	22c0      	movs	r2, #192	; 0xc0
 8012014:	0252      	lsls	r2, r2, #9
 8012016:	4013      	ands	r3, r2
 8012018:	4293      	cmp	r3, r2
 801201a:	d000      	beq.n	801201e <HAL_RCC_OscConfig+0x442>
 801201c:	e718      	b.n	8011e50 <HAL_RCC_OscConfig+0x274>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801201e:	4b3d      	ldr	r3, [pc, #244]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8012020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012022:	03db      	lsls	r3, r3, #15
 8012024:	d502      	bpl.n	801202c <HAL_RCC_OscConfig+0x450>
 8012026:	69e3      	ldr	r3, [r4, #28]
 8012028:	2b01      	cmp	r3, #1
 801202a:	d16d      	bne.n	8012108 <HAL_RCC_OscConfig+0x52c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801202c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801202e:	2b00      	cmp	r3, #0
 8012030:	d06c      	beq.n	801210c <HAL_RCC_OscConfig+0x530>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012032:	4a38      	ldr	r2, [pc, #224]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8012034:	6851      	ldr	r1, [r2, #4]
 8012036:	220c      	movs	r2, #12
 8012038:	400a      	ands	r2, r1
 801203a:	2a08      	cmp	r2, #8
 801203c:	d068      	beq.n	8012110 <HAL_RCC_OscConfig+0x534>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801203e:	2b02      	cmp	r3, #2
 8012040:	d025      	beq.n	801208e <HAL_RCC_OscConfig+0x4b2>
        __HAL_RCC_PLL_DISABLE();
 8012042:	4a34      	ldr	r2, [pc, #208]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8012044:	6813      	ldr	r3, [r2, #0]
 8012046:	4935      	ldr	r1, [pc, #212]	; (801211c <HAL_RCC_OscConfig+0x540>)
 8012048:	400b      	ands	r3, r1
 801204a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801204c:	f7fe fa5e 	bl	801050c <HAL_GetTick>
 8012050:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012052:	4b30      	ldr	r3, [pc, #192]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	019b      	lsls	r3, r3, #6
 8012058:	d550      	bpl.n	80120fc <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801205a:	f7fe fa57 	bl	801050c <HAL_GetTick>
 801205e:	1b00      	subs	r0, r0, r4
 8012060:	2864      	cmp	r0, #100	; 0x64
 8012062:	d9f6      	bls.n	8012052 <HAL_RCC_OscConfig+0x476>
            return HAL_TIMEOUT;
 8012064:	2003      	movs	r0, #3
 8012066:	e5ea      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI48_DISABLE();
 8012068:	4a2a      	ldr	r2, [pc, #168]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 801206a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801206c:	492c      	ldr	r1, [pc, #176]	; (8012120 <HAL_RCC_OscConfig+0x544>)
 801206e:	400b      	ands	r3, r1
 8012070:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012072:	f7fe fa4b 	bl	801050c <HAL_GetTick>
 8012076:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012078:	4b26      	ldr	r3, [pc, #152]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 801207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801207c:	03db      	lsls	r3, r3, #15
 801207e:	d5d5      	bpl.n	801202c <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012080:	f7fe fa44 	bl	801050c <HAL_GetTick>
 8012084:	1b40      	subs	r0, r0, r5
 8012086:	2864      	cmp	r0, #100	; 0x64
 8012088:	d9f6      	bls.n	8012078 <HAL_RCC_OscConfig+0x49c>
            return HAL_TIMEOUT;
 801208a:	2003      	movs	r0, #3
 801208c:	e5d7      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_DISABLE();
 801208e:	4a21      	ldr	r2, [pc, #132]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 8012090:	6813      	ldr	r3, [r2, #0]
 8012092:	4922      	ldr	r1, [pc, #136]	; (801211c <HAL_RCC_OscConfig+0x540>)
 8012094:	400b      	ands	r3, r1
 8012096:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012098:	f7fe fa38 	bl	801050c <HAL_GetTick>
 801209c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801209e:	4b1d      	ldr	r3, [pc, #116]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	019b      	lsls	r3, r3, #6
 80120a4:	d506      	bpl.n	80120b4 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80120a6:	f7fe fa31 	bl	801050c <HAL_GetTick>
 80120aa:	1b40      	subs	r0, r0, r5
 80120ac:	2864      	cmp	r0, #100	; 0x64
 80120ae:	d9f6      	bls.n	801209e <HAL_RCC_OscConfig+0x4c2>
            return HAL_TIMEOUT;
 80120b0:	2003      	movs	r0, #3
 80120b2:	e5c4      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80120b4:	4b17      	ldr	r3, [pc, #92]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 80120b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120b8:	210f      	movs	r1, #15
 80120ba:	438a      	bics	r2, r1
 80120bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80120be:	430a      	orrs	r2, r1
 80120c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80120c2:	685a      	ldr	r2, [r3, #4]
 80120c4:	4917      	ldr	r1, [pc, #92]	; (8012124 <HAL_RCC_OscConfig+0x548>)
 80120c6:	400a      	ands	r2, r1
 80120c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80120ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80120cc:	4301      	orrs	r1, r0
 80120ce:	430a      	orrs	r2, r1
 80120d0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80120d2:	6819      	ldr	r1, [r3, #0]
 80120d4:	2280      	movs	r2, #128	; 0x80
 80120d6:	0452      	lsls	r2, r2, #17
 80120d8:	430a      	orrs	r2, r1
 80120da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80120dc:	f7fe fa16 	bl	801050c <HAL_GetTick>
 80120e0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80120e2:	4b0c      	ldr	r3, [pc, #48]	; (8012114 <HAL_RCC_OscConfig+0x538>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	019b      	lsls	r3, r3, #6
 80120e8:	d406      	bmi.n	80120f8 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80120ea:	f7fe fa0f 	bl	801050c <HAL_GetTick>
 80120ee:	1b00      	subs	r0, r0, r4
 80120f0:	2864      	cmp	r0, #100	; 0x64
 80120f2:	d9f6      	bls.n	80120e2 <HAL_RCC_OscConfig+0x506>
            return HAL_TIMEOUT;
 80120f4:	2003      	movs	r0, #3
 80120f6:	e5a2      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 80120f8:	2000      	movs	r0, #0
 80120fa:	e5a0      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
 80120fc:	2000      	movs	r0, #0
 80120fe:	e59e      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8012100:	2001      	movs	r0, #1
 8012102:	e59c      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8012104:	2001      	movs	r0, #1
 8012106:	e59a      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8012108:	2001      	movs	r0, #1
 801210a:	e598      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 801210c:	2000      	movs	r0, #0
 801210e:	e596      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
      return HAL_ERROR;
 8012110:	2001      	movs	r0, #1
 8012112:	e594      	b.n	8011c3e <HAL_RCC_OscConfig+0x62>
 8012114:	40021000 	.word	0x40021000
 8012118:	00001388 	.word	0x00001388
 801211c:	feffffff 	.word	0xfeffffff
 8012120:	fffeffff 	.word	0xfffeffff
 8012124:	ffc27fff 	.word	0xffc27fff

08012128 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012128:	b570      	push	{r4, r5, r6, lr}
 801212a:	0004      	movs	r4, r0
 801212c:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801212e:	4b8e      	ldr	r3, [pc, #568]	; (8012368 <HAL_RCC_ClockConfig+0x240>)
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	2301      	movs	r3, #1
 8012134:	4013      	ands	r3, r2
 8012136:	428b      	cmp	r3, r1
 8012138:	d300      	bcc.n	801213c <HAL_RCC_ClockConfig+0x14>
 801213a:	e081      	b.n	8012240 <HAL_RCC_ClockConfig+0x118>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801213c:	498a      	ldr	r1, [pc, #552]	; (8012368 <HAL_RCC_ClockConfig+0x240>)
 801213e:	680b      	ldr	r3, [r1, #0]
 8012140:	2201      	movs	r2, #1
 8012142:	4393      	bics	r3, r2
 8012144:	432b      	orrs	r3, r5
 8012146:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012148:	680b      	ldr	r3, [r1, #0]
 801214a:	401a      	ands	r2, r3
 801214c:	42aa      	cmp	r2, r5
 801214e:	d000      	beq.n	8012152 <HAL_RCC_ClockConfig+0x2a>
 8012150:	e101      	b.n	8012356 <HAL_RCC_ClockConfig+0x22e>
    {
      return HAL_ERROR;
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012152:	6803      	ldr	r3, [r0, #0]
 8012154:	079b      	lsls	r3, r3, #30
 8012156:	d506      	bpl.n	8012166 <HAL_RCC_ClockConfig+0x3e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012158:	4a84      	ldr	r2, [pc, #528]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 801215a:	6853      	ldr	r3, [r2, #4]
 801215c:	21f0      	movs	r1, #240	; 0xf0
 801215e:	438b      	bics	r3, r1
 8012160:	6881      	ldr	r1, [r0, #8]
 8012162:	430b      	orrs	r3, r1
 8012164:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012166:	6823      	ldr	r3, [r4, #0]
 8012168:	07db      	lsls	r3, r3, #31
 801216a:	d400      	bmi.n	801216e <HAL_RCC_ClockConfig+0x46>
 801216c:	e0e4      	b.n	8012338 <HAL_RCC_ClockConfig+0x210>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801216e:	6863      	ldr	r3, [r4, #4]
 8012170:	2b01      	cmp	r3, #1
 8012172:	d009      	beq.n	8012188 <HAL_RCC_ClockConfig+0x60>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012174:	2b02      	cmp	r3, #2
 8012176:	d02a      	beq.n	80121ce <HAL_RCC_ClockConfig+0xa6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012178:	2b03      	cmp	r3, #3
 801217a:	d02e      	beq.n	80121da <HAL_RCC_ClockConfig+0xb2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801217c:	4a7b      	ldr	r2, [pc, #492]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 801217e:	6812      	ldr	r2, [r2, #0]
 8012180:	0792      	lsls	r2, r2, #30
 8012182:	d406      	bmi.n	8012192 <HAL_RCC_ClockConfig+0x6a>
        {
          return HAL_ERROR;
 8012184:	2001      	movs	r0, #1
 8012186:	e0e5      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012188:	4a78      	ldr	r2, [pc, #480]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 801218a:	6812      	ldr	r2, [r2, #0]
 801218c:	0392      	lsls	r2, r2, #14
 801218e:	d400      	bmi.n	8012192 <HAL_RCC_ClockConfig+0x6a>
 8012190:	e0e3      	b.n	801235a <HAL_RCC_ClockConfig+0x232>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012192:	4976      	ldr	r1, [pc, #472]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 8012194:	684a      	ldr	r2, [r1, #4]
 8012196:	2003      	movs	r0, #3
 8012198:	4382      	bics	r2, r0
 801219a:	4313      	orrs	r3, r2
 801219c:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801219e:	f7fe f9b5 	bl	801050c <HAL_GetTick>
 80121a2:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80121a4:	6863      	ldr	r3, [r4, #4]
 80121a6:	2b01      	cmp	r3, #1
 80121a8:	d01d      	beq.n	80121e6 <HAL_RCC_ClockConfig+0xbe>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80121aa:	2b02      	cmp	r3, #2
 80121ac:	d02a      	beq.n	8012204 <HAL_RCC_ClockConfig+0xdc>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80121ae:	2b03      	cmp	r3, #3
 80121b0:	d037      	beq.n	8012222 <HAL_RCC_ClockConfig+0xfa>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80121b2:	4b6e      	ldr	r3, [pc, #440]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	220c      	movs	r2, #12
 80121b8:	421a      	tst	r2, r3
 80121ba:	d100      	bne.n	80121be <HAL_RCC_ClockConfig+0x96>
 80121bc:	e0bc      	b.n	8012338 <HAL_RCC_ClockConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80121be:	f7fe f9a5 	bl	801050c <HAL_GetTick>
 80121c2:	1b40      	subs	r0, r0, r5
 80121c4:	4b6a      	ldr	r3, [pc, #424]	; (8012370 <HAL_RCC_ClockConfig+0x248>)
 80121c6:	4298      	cmp	r0, r3
 80121c8:	d9f3      	bls.n	80121b2 <HAL_RCC_ClockConfig+0x8a>
          {
            return HAL_TIMEOUT;
 80121ca:	2003      	movs	r0, #3
 80121cc:	e0c2      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80121ce:	4a67      	ldr	r2, [pc, #412]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 80121d0:	6812      	ldr	r2, [r2, #0]
 80121d2:	0192      	lsls	r2, r2, #6
 80121d4:	d4dd      	bmi.n	8012192 <HAL_RCC_ClockConfig+0x6a>
          return HAL_ERROR;
 80121d6:	2001      	movs	r0, #1
 80121d8:	e0bc      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80121da:	4a64      	ldr	r2, [pc, #400]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 80121dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80121de:	03d2      	lsls	r2, r2, #15
 80121e0:	d4d7      	bmi.n	8012192 <HAL_RCC_ClockConfig+0x6a>
          return HAL_ERROR;
 80121e2:	2001      	movs	r0, #1
 80121e4:	e0b6      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80121e6:	4b61      	ldr	r3, [pc, #388]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 80121e8:	685a      	ldr	r2, [r3, #4]
 80121ea:	230c      	movs	r3, #12
 80121ec:	4013      	ands	r3, r2
 80121ee:	2b04      	cmp	r3, #4
 80121f0:	d100      	bne.n	80121f4 <HAL_RCC_ClockConfig+0xcc>
 80121f2:	e0a1      	b.n	8012338 <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80121f4:	f7fe f98a 	bl	801050c <HAL_GetTick>
 80121f8:	1b40      	subs	r0, r0, r5
 80121fa:	4a5d      	ldr	r2, [pc, #372]	; (8012370 <HAL_RCC_ClockConfig+0x248>)
 80121fc:	4290      	cmp	r0, r2
 80121fe:	d9f2      	bls.n	80121e6 <HAL_RCC_ClockConfig+0xbe>
            return HAL_TIMEOUT;
 8012200:	2003      	movs	r0, #3
 8012202:	e0a7      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012204:	4b59      	ldr	r3, [pc, #356]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 8012206:	685a      	ldr	r2, [r3, #4]
 8012208:	230c      	movs	r3, #12
 801220a:	4013      	ands	r3, r2
 801220c:	2b08      	cmp	r3, #8
 801220e:	d100      	bne.n	8012212 <HAL_RCC_ClockConfig+0xea>
 8012210:	e092      	b.n	8012338 <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012212:	f7fe f97b 	bl	801050c <HAL_GetTick>
 8012216:	1b40      	subs	r0, r0, r5
 8012218:	4b55      	ldr	r3, [pc, #340]	; (8012370 <HAL_RCC_ClockConfig+0x248>)
 801221a:	4298      	cmp	r0, r3
 801221c:	d9f2      	bls.n	8012204 <HAL_RCC_ClockConfig+0xdc>
            return HAL_TIMEOUT;
 801221e:	2003      	movs	r0, #3
 8012220:	e098      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012222:	4b52      	ldr	r3, [pc, #328]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 8012224:	685a      	ldr	r2, [r3, #4]
 8012226:	230c      	movs	r3, #12
 8012228:	4013      	ands	r3, r2
 801222a:	2b0c      	cmp	r3, #12
 801222c:	d100      	bne.n	8012230 <HAL_RCC_ClockConfig+0x108>
 801222e:	e083      	b.n	8012338 <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012230:	f7fe f96c 	bl	801050c <HAL_GetTick>
 8012234:	1b40      	subs	r0, r0, r5
 8012236:	4b4e      	ldr	r3, [pc, #312]	; (8012370 <HAL_RCC_ClockConfig+0x248>)
 8012238:	4298      	cmp	r0, r3
 801223a:	d9f2      	bls.n	8012222 <HAL_RCC_ClockConfig+0xfa>
            return HAL_TIMEOUT;
 801223c:	2003      	movs	r0, #3
 801223e:	e089      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012240:	6803      	ldr	r3, [r0, #0]
 8012242:	079b      	lsls	r3, r3, #30
 8012244:	d506      	bpl.n	8012254 <HAL_RCC_ClockConfig+0x12c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012246:	4a49      	ldr	r2, [pc, #292]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 8012248:	6853      	ldr	r3, [r2, #4]
 801224a:	21f0      	movs	r1, #240	; 0xf0
 801224c:	438b      	bics	r3, r1
 801224e:	6881      	ldr	r1, [r0, #8]
 8012250:	430b      	orrs	r3, r1
 8012252:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012254:	6823      	ldr	r3, [r4, #0]
 8012256:	07db      	lsls	r3, r3, #31
 8012258:	d564      	bpl.n	8012324 <HAL_RCC_ClockConfig+0x1fc>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801225a:	6863      	ldr	r3, [r4, #4]
 801225c:	2b01      	cmp	r3, #1
 801225e:	d009      	beq.n	8012274 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012260:	2b02      	cmp	r3, #2
 8012262:	d029      	beq.n	80122b8 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012264:	2b03      	cmp	r3, #3
 8012266:	d02d      	beq.n	80122c4 <HAL_RCC_ClockConfig+0x19c>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012268:	4a40      	ldr	r2, [pc, #256]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 801226a:	6812      	ldr	r2, [r2, #0]
 801226c:	0792      	lsls	r2, r2, #30
 801226e:	d406      	bmi.n	801227e <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_ERROR;
 8012270:	2001      	movs	r0, #1
 8012272:	e06f      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012274:	4a3d      	ldr	r2, [pc, #244]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 8012276:	6812      	ldr	r2, [r2, #0]
 8012278:	0392      	lsls	r2, r2, #14
 801227a:	d400      	bmi.n	801227e <HAL_RCC_ClockConfig+0x156>
 801227c:	e06f      	b.n	801235e <HAL_RCC_ClockConfig+0x236>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801227e:	493b      	ldr	r1, [pc, #236]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 8012280:	684a      	ldr	r2, [r1, #4]
 8012282:	2003      	movs	r0, #3
 8012284:	4382      	bics	r2, r0
 8012286:	4313      	orrs	r3, r2
 8012288:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801228a:	f7fe f93f 	bl	801050c <HAL_GetTick>
 801228e:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012290:	6863      	ldr	r3, [r4, #4]
 8012292:	2b01      	cmp	r3, #1
 8012294:	d01c      	beq.n	80122d0 <HAL_RCC_ClockConfig+0x1a8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012296:	2b02      	cmp	r3, #2
 8012298:	d028      	beq.n	80122ec <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801229a:	2b03      	cmp	r3, #3
 801229c:	d034      	beq.n	8012308 <HAL_RCC_ClockConfig+0x1e0>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801229e:	4b33      	ldr	r3, [pc, #204]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	220c      	movs	r2, #12
 80122a4:	421a      	tst	r2, r3
 80122a6:	d03d      	beq.n	8012324 <HAL_RCC_ClockConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122a8:	f7fe f930 	bl	801050c <HAL_GetTick>
 80122ac:	1b80      	subs	r0, r0, r6
 80122ae:	4b30      	ldr	r3, [pc, #192]	; (8012370 <HAL_RCC_ClockConfig+0x248>)
 80122b0:	4298      	cmp	r0, r3
 80122b2:	d9f4      	bls.n	801229e <HAL_RCC_ClockConfig+0x176>
          {
            return HAL_TIMEOUT;
 80122b4:	2003      	movs	r0, #3
 80122b6:	e04d      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80122b8:	4a2c      	ldr	r2, [pc, #176]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 80122ba:	6812      	ldr	r2, [r2, #0]
 80122bc:	0192      	lsls	r2, r2, #6
 80122be:	d4de      	bmi.n	801227e <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 80122c0:	2001      	movs	r0, #1
 80122c2:	e047      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80122c4:	4a29      	ldr	r2, [pc, #164]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 80122c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80122c8:	03d2      	lsls	r2, r2, #15
 80122ca:	d4d8      	bmi.n	801227e <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 80122cc:	2001      	movs	r0, #1
 80122ce:	e041      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80122d0:	4b26      	ldr	r3, [pc, #152]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 80122d2:	685a      	ldr	r2, [r3, #4]
 80122d4:	230c      	movs	r3, #12
 80122d6:	4013      	ands	r3, r2
 80122d8:	2b04      	cmp	r3, #4
 80122da:	d023      	beq.n	8012324 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122dc:	f7fe f916 	bl	801050c <HAL_GetTick>
 80122e0:	1b80      	subs	r0, r0, r6
 80122e2:	4a23      	ldr	r2, [pc, #140]	; (8012370 <HAL_RCC_ClockConfig+0x248>)
 80122e4:	4290      	cmp	r0, r2
 80122e6:	d9f3      	bls.n	80122d0 <HAL_RCC_ClockConfig+0x1a8>
            return HAL_TIMEOUT;
 80122e8:	2003      	movs	r0, #3
 80122ea:	e033      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80122ec:	4b1f      	ldr	r3, [pc, #124]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 80122ee:	685a      	ldr	r2, [r3, #4]
 80122f0:	230c      	movs	r3, #12
 80122f2:	4013      	ands	r3, r2
 80122f4:	2b08      	cmp	r3, #8
 80122f6:	d015      	beq.n	8012324 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122f8:	f7fe f908 	bl	801050c <HAL_GetTick>
 80122fc:	1b80      	subs	r0, r0, r6
 80122fe:	4b1c      	ldr	r3, [pc, #112]	; (8012370 <HAL_RCC_ClockConfig+0x248>)
 8012300:	4298      	cmp	r0, r3
 8012302:	d9f3      	bls.n	80122ec <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
 8012304:	2003      	movs	r0, #3
 8012306:	e025      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012308:	4b18      	ldr	r3, [pc, #96]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 801230a:	685a      	ldr	r2, [r3, #4]
 801230c:	230c      	movs	r3, #12
 801230e:	4013      	ands	r3, r2
 8012310:	2b0c      	cmp	r3, #12
 8012312:	d007      	beq.n	8012324 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012314:	f7fe f8fa 	bl	801050c <HAL_GetTick>
 8012318:	1b80      	subs	r0, r0, r6
 801231a:	4b15      	ldr	r3, [pc, #84]	; (8012370 <HAL_RCC_ClockConfig+0x248>)
 801231c:	4298      	cmp	r0, r3
 801231e:	d9f3      	bls.n	8012308 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
 8012320:	2003      	movs	r0, #3
 8012322:	e017      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012324:	4910      	ldr	r1, [pc, #64]	; (8012368 <HAL_RCC_ClockConfig+0x240>)
 8012326:	680b      	ldr	r3, [r1, #0]
 8012328:	2201      	movs	r2, #1
 801232a:	4393      	bics	r3, r2
 801232c:	432b      	orrs	r3, r5
 801232e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012330:	680b      	ldr	r3, [r1, #0]
 8012332:	401a      	ands	r2, r3
 8012334:	42aa      	cmp	r2, r5
 8012336:	d114      	bne.n	8012362 <HAL_RCC_ClockConfig+0x23a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012338:	6823      	ldr	r3, [r4, #0]
 801233a:	075b      	lsls	r3, r3, #29
 801233c:	d506      	bpl.n	801234c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801233e:	4a0b      	ldr	r2, [pc, #44]	; (801236c <HAL_RCC_ClockConfig+0x244>)
 8012340:	6853      	ldr	r3, [r2, #4]
 8012342:	490c      	ldr	r1, [pc, #48]	; (8012374 <HAL_RCC_ClockConfig+0x24c>)
 8012344:	400b      	ands	r3, r1
 8012346:	68e1      	ldr	r1, [r4, #12]
 8012348:	430b      	orrs	r3, r1
 801234a:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 801234c:	2000      	movs	r0, #0
 801234e:	f7fe f8b2 	bl	80104b6 <HAL_InitTick>
  
  return HAL_OK;
 8012352:	2000      	movs	r0, #0
}
 8012354:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8012356:	2001      	movs	r0, #1
 8012358:	e7fc      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
          return HAL_ERROR;
 801235a:	2001      	movs	r0, #1
 801235c:	e7fa      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
          return HAL_ERROR;
 801235e:	2001      	movs	r0, #1
 8012360:	e7f8      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
      return HAL_ERROR;
 8012362:	2001      	movs	r0, #1
 8012364:	e7f6      	b.n	8012354 <HAL_RCC_ClockConfig+0x22c>
 8012366:	46c0      	nop			; (mov r8, r8)
 8012368:	40022000 	.word	0x40022000
 801236c:	40021000 	.word	0x40021000
 8012370:	00001388 	.word	0x00001388
 8012374:	fffff8ff 	.word	0xfffff8ff

08012378 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012378:	b510      	push	{r4, lr}
 801237a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 801237c:	aa04      	add	r2, sp, #16
 801237e:	4b1e      	ldr	r3, [pc, #120]	; (80123f8 <HAL_RCC_GetSysClockFreq+0x80>)
 8012380:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012382:	c213      	stmia	r2!, {r0, r1, r4}
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012388:	466a      	mov	r2, sp
 801238a:	4b1c      	ldr	r3, [pc, #112]	; (80123fc <HAL_RCC_GetSysClockFreq+0x84>)
 801238c:	cb13      	ldmia	r3!, {r0, r1, r4}
 801238e:	c213      	stmia	r2!, {r0, r1, r4}
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012394:	4b1a      	ldr	r3, [pc, #104]	; (8012400 <HAL_RCC_GetSysClockFreq+0x88>)
 8012396:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012398:	230c      	movs	r3, #12
 801239a:	4013      	ands	r3, r2
 801239c:	2b08      	cmp	r3, #8
 801239e:	d004      	beq.n	80123aa <HAL_RCC_GetSysClockFreq+0x32>
 80123a0:	2b0c      	cmp	r3, #12
 80123a2:	d126      	bne.n	80123f2 <HAL_RCC_GetSysClockFreq+0x7a>
      break;
    }
#if defined(RCC_CR2_HSI48ON)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80123a4:	4817      	ldr	r0, [pc, #92]	; (8012404 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80123a6:	b008      	add	sp, #32
 80123a8:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80123aa:	0c91      	lsrs	r1, r2, #18
 80123ac:	230f      	movs	r3, #15
 80123ae:	4019      	ands	r1, r3
 80123b0:	a804      	add	r0, sp, #16
 80123b2:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80123b4:	4912      	ldr	r1, [pc, #72]	; (8012400 <HAL_RCC_GetSysClockFreq+0x88>)
 80123b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80123b8:	400b      	ands	r3, r1
 80123ba:	4669      	mov	r1, sp
 80123bc:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80123be:	23c0      	movs	r3, #192	; 0xc0
 80123c0:	025b      	lsls	r3, r3, #9
 80123c2:	401a      	ands	r2, r3
 80123c4:	2380      	movs	r3, #128	; 0x80
 80123c6:	025b      	lsls	r3, r3, #9
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d008      	beq.n	80123de <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80123cc:	23c0      	movs	r3, #192	; 0xc0
 80123ce:	025b      	lsls	r3, r3, #9
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d009      	beq.n	80123e8 <HAL_RCC_GetSysClockFreq+0x70>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80123d4:	480c      	ldr	r0, [pc, #48]	; (8012408 <HAL_RCC_GetSysClockFreq+0x90>)
 80123d6:	f7ed febb 	bl	8000150 <__udivsi3>
 80123da:	4360      	muls	r0, r4
 80123dc:	e7e3      	b.n	80123a6 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80123de:	480a      	ldr	r0, [pc, #40]	; (8012408 <HAL_RCC_GetSysClockFreq+0x90>)
 80123e0:	f7ed feb6 	bl	8000150 <__udivsi3>
 80123e4:	4360      	muls	r0, r4
 80123e6:	e7de      	b.n	80123a6 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80123e8:	4806      	ldr	r0, [pc, #24]	; (8012404 <HAL_RCC_GetSysClockFreq+0x8c>)
 80123ea:	f7ed feb1 	bl	8000150 <__udivsi3>
 80123ee:	4360      	muls	r0, r4
 80123f0:	e7d9      	b.n	80123a6 <HAL_RCC_GetSysClockFreq+0x2e>
  switch (tmpreg & RCC_CFGR_SWS)
 80123f2:	4805      	ldr	r0, [pc, #20]	; (8012408 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 80123f4:	e7d7      	b.n	80123a6 <HAL_RCC_GetSysClockFreq+0x2e>
 80123f6:	46c0      	nop			; (mov r8, r8)
 80123f8:	0801b6e0 	.word	0x0801b6e0
 80123fc:	0801b6f4 	.word	0x0801b6f4
 8012400:	40021000 	.word	0x40021000
 8012404:	02dc6c00 	.word	0x02dc6c00
 8012408:	007a1200 	.word	0x007a1200

0801240c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801240c:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801240e:	f7ff ffb3 	bl	8012378 <HAL_RCC_GetSysClockFreq>
 8012412:	4b05      	ldr	r3, [pc, #20]	; (8012428 <HAL_RCC_GetHCLKFreq+0x1c>)
 8012414:	685a      	ldr	r2, [r3, #4]
 8012416:	0912      	lsrs	r2, r2, #4
 8012418:	230f      	movs	r3, #15
 801241a:	4013      	ands	r3, r2
 801241c:	4a03      	ldr	r2, [pc, #12]	; (801242c <HAL_RCC_GetHCLKFreq+0x20>)
 801241e:	5cd3      	ldrb	r3, [r2, r3]
 8012420:	40d8      	lsrs	r0, r3
 8012422:	4b03      	ldr	r3, [pc, #12]	; (8012430 <HAL_RCC_GetHCLKFreq+0x24>)
 8012424:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012426:	bd10      	pop	{r4, pc}
 8012428:	40021000 	.word	0x40021000
 801242c:	0801b708 	.word	0x0801b708
 8012430:	200000c8 	.word	0x200000c8

08012434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012434:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012436:	f7ff ffe9 	bl	801240c <HAL_RCC_GetHCLKFreq>
 801243a:	4b04      	ldr	r3, [pc, #16]	; (801244c <HAL_RCC_GetPCLK1Freq+0x18>)
 801243c:	685a      	ldr	r2, [r3, #4]
 801243e:	0a12      	lsrs	r2, r2, #8
 8012440:	2307      	movs	r3, #7
 8012442:	4013      	ands	r3, r2
 8012444:	4a02      	ldr	r2, [pc, #8]	; (8012450 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012446:	5cd3      	ldrb	r3, [r2, r3]
 8012448:	40d8      	lsrs	r0, r3
}    
 801244a:	bd10      	pop	{r4, pc}
 801244c:	40021000 	.word	0x40021000
 8012450:	0801b708 	.word	0x0801b708

08012454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012454:	b530      	push	{r4, r5, lr}
 8012456:	b083      	sub	sp, #12
 8012458:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801245a:	6803      	ldr	r3, [r0, #0]
 801245c:	03db      	lsls	r3, r3, #15
 801245e:	d507      	bpl.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012460:	4b41      	ldr	r3, [pc, #260]	; (8012568 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012462:	6a1b      	ldr	r3, [r3, #32]
 8012464:	6842      	ldr	r2, [r0, #4]
 8012466:	4053      	eors	r3, r2
 8012468:	22c0      	movs	r2, #192	; 0xc0
 801246a:	0092      	lsls	r2, r2, #2
 801246c:	4213      	tst	r3, r2
 801246e:	d134      	bne.n	80124da <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012470:	6823      	ldr	r3, [r4, #0]
 8012472:	07db      	lsls	r3, r3, #31
 8012474:	d506      	bpl.n	8012484 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012476:	4a3c      	ldr	r2, [pc, #240]	; (8012568 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012478:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801247a:	2103      	movs	r1, #3
 801247c:	438b      	bics	r3, r1
 801247e:	68a1      	ldr	r1, [r4, #8]
 8012480:	430b      	orrs	r3, r1
 8012482:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012484:	6823      	ldr	r3, [r4, #0]
 8012486:	079b      	lsls	r3, r3, #30
 8012488:	d506      	bpl.n	8012498 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801248a:	4a37      	ldr	r2, [pc, #220]	; (8012568 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801248c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801248e:	4937      	ldr	r1, [pc, #220]	; (801256c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8012490:	400b      	ands	r3, r1
 8012492:	68e1      	ldr	r1, [r4, #12]
 8012494:	430b      	orrs	r3, r1
 8012496:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012498:	6823      	ldr	r3, [r4, #0]
 801249a:	035b      	lsls	r3, r3, #13
 801249c:	d506      	bpl.n	80124ac <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801249e:	4a32      	ldr	r2, [pc, #200]	; (8012568 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80124a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80124a2:	4933      	ldr	r1, [pc, #204]	; (8012570 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80124a4:	400b      	ands	r3, r1
 80124a6:	6921      	ldr	r1, [r4, #16]
 80124a8:	430b      	orrs	r3, r1
 80124aa:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80124ac:	6823      	ldr	r3, [r4, #0]
 80124ae:	069b      	lsls	r3, r3, #26
 80124b0:	d506      	bpl.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80124b2:	4a2d      	ldr	r2, [pc, #180]	; (8012568 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80124b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80124b6:	2110      	movs	r1, #16
 80124b8:	438b      	bics	r3, r1
 80124ba:	6961      	ldr	r1, [r4, #20]
 80124bc:	430b      	orrs	r3, r1
 80124be:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80124c0:	6823      	ldr	r3, [r4, #0]
 80124c2:	055b      	lsls	r3, r3, #21
 80124c4:	d54e      	bpl.n	8012564 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80124c6:	4a28      	ldr	r2, [pc, #160]	; (8012568 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80124c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80124ca:	2140      	movs	r1, #64	; 0x40
 80124cc:	438b      	bics	r3, r1
 80124ce:	69a1      	ldr	r1, [r4, #24]
 80124d0:	430b      	orrs	r3, r1
 80124d2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80124d4:	2000      	movs	r0, #0
}
 80124d6:	b003      	add	sp, #12
 80124d8:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80124da:	4a23      	ldr	r2, [pc, #140]	; (8012568 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80124dc:	69d1      	ldr	r1, [r2, #28]
 80124de:	2080      	movs	r0, #128	; 0x80
 80124e0:	0540      	lsls	r0, r0, #21
 80124e2:	4301      	orrs	r1, r0
 80124e4:	61d1      	str	r1, [r2, #28]
 80124e6:	69d3      	ldr	r3, [r2, #28]
 80124e8:	4003      	ands	r3, r0
 80124ea:	9301      	str	r3, [sp, #4]
 80124ec:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80124ee:	4a21      	ldr	r2, [pc, #132]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80124f0:	6811      	ldr	r1, [r2, #0]
 80124f2:	2380      	movs	r3, #128	; 0x80
 80124f4:	005b      	lsls	r3, r3, #1
 80124f6:	430b      	orrs	r3, r1
 80124f8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80124fa:	f7fe f807 	bl	801050c <HAL_GetTick>
 80124fe:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012500:	4b1c      	ldr	r3, [pc, #112]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	05db      	lsls	r3, r3, #23
 8012506:	d406      	bmi.n	8012516 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012508:	f7fe f800 	bl	801050c <HAL_GetTick>
 801250c:	1b40      	subs	r0, r0, r5
 801250e:	2864      	cmp	r0, #100	; 0x64
 8012510:	d9f6      	bls.n	8012500 <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 8012512:	2003      	movs	r0, #3
 8012514:	e7df      	b.n	80124d6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012516:	4b14      	ldr	r3, [pc, #80]	; (8012568 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012518:	6a18      	ldr	r0, [r3, #32]
 801251a:	4a17      	ldr	r2, [pc, #92]	; (8012578 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 801251c:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 801251e:	6a1d      	ldr	r5, [r3, #32]
 8012520:	2180      	movs	r1, #128	; 0x80
 8012522:	0249      	lsls	r1, r1, #9
 8012524:	4329      	orrs	r1, r5
 8012526:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012528:	6a19      	ldr	r1, [r3, #32]
 801252a:	4d14      	ldr	r5, [pc, #80]	; (801257c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 801252c:	4029      	ands	r1, r5
 801252e:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012530:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012532:	0783      	lsls	r3, r0, #30
 8012534:	d407      	bmi.n	8012546 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012536:	4a0c      	ldr	r2, [pc, #48]	; (8012568 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012538:	6a13      	ldr	r3, [r2, #32]
 801253a:	490f      	ldr	r1, [pc, #60]	; (8012578 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 801253c:	400b      	ands	r3, r1
 801253e:	6861      	ldr	r1, [r4, #4]
 8012540:	430b      	orrs	r3, r1
 8012542:	6213      	str	r3, [r2, #32]
 8012544:	e794      	b.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        tickstart = HAL_GetTick();
 8012546:	f7fd ffe1 	bl	801050c <HAL_GetTick>
 801254a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801254c:	4b06      	ldr	r3, [pc, #24]	; (8012568 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801254e:	6a1b      	ldr	r3, [r3, #32]
 8012550:	079b      	lsls	r3, r3, #30
 8012552:	d4f0      	bmi.n	8012536 <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012554:	f7fd ffda 	bl	801050c <HAL_GetTick>
 8012558:	1b40      	subs	r0, r0, r5
 801255a:	4b09      	ldr	r3, [pc, #36]	; (8012580 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801255c:	4298      	cmp	r0, r3
 801255e:	d9f5      	bls.n	801254c <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
 8012560:	2003      	movs	r0, #3
 8012562:	e7b8      	b.n	80124d6 <HAL_RCCEx_PeriphCLKConfig+0x82>
  return HAL_OK;
 8012564:	2000      	movs	r0, #0
 8012566:	e7b6      	b.n	80124d6 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8012568:	40021000 	.word	0x40021000
 801256c:	fffcffff 	.word	0xfffcffff
 8012570:	fff3ffff 	.word	0xfff3ffff
 8012574:	40007000 	.word	0x40007000
 8012578:	fffffcff 	.word	0xfffffcff
 801257c:	fffeffff 	.word	0xfffeffff
 8012580:	00001388 	.word	0x00001388

08012584 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012584:	4770      	bx	lr

08012586 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012586:	b570      	push	{r4, r5, r6, lr}
 8012588:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801258a:	6802      	ldr	r2, [r0, #0]
 801258c:	68d3      	ldr	r3, [r2, #12]
 801258e:	21a0      	movs	r1, #160	; 0xa0
 8012590:	438b      	bics	r3, r1
 8012592:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012594:	f7fd ffba 	bl	801050c <HAL_GetTick>
 8012598:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801259a:	6823      	ldr	r3, [r4, #0]
 801259c:	68db      	ldr	r3, [r3, #12]
 801259e:	069b      	lsls	r3, r3, #26
 80125a0:	d408      	bmi.n	80125b4 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80125a2:	f7fd ffb3 	bl	801050c <HAL_GetTick>
 80125a6:	1b40      	subs	r0, r0, r5
 80125a8:	23fa      	movs	r3, #250	; 0xfa
 80125aa:	009b      	lsls	r3, r3, #2
 80125ac:	4298      	cmp	r0, r3
 80125ae:	d9f4      	bls.n	801259a <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 80125b0:	2003      	movs	r0, #3
 80125b2:	e000      	b.n	80125b6 <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 80125b4:	2000      	movs	r0, #0
}
 80125b6:	bd70      	pop	{r4, r5, r6, pc}

080125b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80125b8:	b570      	push	{r4, r5, r6, lr}
 80125ba:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80125bc:	6803      	ldr	r3, [r0, #0]
 80125be:	68da      	ldr	r2, [r3, #12]
 80125c0:	0652      	lsls	r2, r2, #25
 80125c2:	d501      	bpl.n	80125c8 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80125c4:	2000      	movs	r0, #0
}
 80125c6:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80125c8:	2201      	movs	r2, #1
 80125ca:	4252      	negs	r2, r2
 80125cc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80125ce:	f7fd ff9d 	bl	801050c <HAL_GetTick>
 80125d2:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80125d4:	6823      	ldr	r3, [r4, #0]
 80125d6:	68db      	ldr	r3, [r3, #12]
 80125d8:	065b      	lsls	r3, r3, #25
 80125da:	d408      	bmi.n	80125ee <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80125dc:	f7fd ff96 	bl	801050c <HAL_GetTick>
 80125e0:	1b40      	subs	r0, r0, r5
 80125e2:	22fa      	movs	r2, #250	; 0xfa
 80125e4:	0092      	lsls	r2, r2, #2
 80125e6:	4290      	cmp	r0, r2
 80125e8:	d9f4      	bls.n	80125d4 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80125ea:	2003      	movs	r0, #3
 80125ec:	e7eb      	b.n	80125c6 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80125ee:	2000      	movs	r0, #0
 80125f0:	e7e9      	b.n	80125c6 <RTC_EnterInitMode+0xe>
	...

080125f4 <HAL_RTC_Init>:
{
 80125f4:	b570      	push	{r4, r5, r6, lr}
 80125f6:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80125f8:	d046      	beq.n	8012688 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80125fa:	7f43      	ldrb	r3, [r0, #29]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d013      	beq.n	8012628 <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012600:	2302      	movs	r3, #2
 8012602:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012604:	6823      	ldr	r3, [r4, #0]
 8012606:	22ca      	movs	r2, #202	; 0xca
 8012608:	625a      	str	r2, [r3, #36]	; 0x24
 801260a:	6823      	ldr	r3, [r4, #0]
 801260c:	3a77      	subs	r2, #119	; 0x77
 801260e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012610:	0020      	movs	r0, r4
 8012612:	f7ff ffd1 	bl	80125b8 <RTC_EnterInitMode>
 8012616:	2800      	cmp	r0, #0
 8012618:	d00a      	beq.n	8012630 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801261a:	6823      	ldr	r3, [r4, #0]
 801261c:	22ff      	movs	r2, #255	; 0xff
 801261e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012620:	2304      	movs	r3, #4
 8012622:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012624:	2001      	movs	r0, #1
}
 8012626:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012628:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 801262a:	f7ff ffab 	bl	8012584 <HAL_RTC_MspInit>
 801262e:	e7e7      	b.n	8012600 <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012630:	6822      	ldr	r2, [r4, #0]
 8012632:	6893      	ldr	r3, [r2, #8]
 8012634:	4915      	ldr	r1, [pc, #84]	; (801268c <HAL_RTC_Init+0x98>)
 8012636:	400b      	ands	r3, r1
 8012638:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801263a:	6821      	ldr	r1, [r4, #0]
 801263c:	688a      	ldr	r2, [r1, #8]
 801263e:	6863      	ldr	r3, [r4, #4]
 8012640:	6925      	ldr	r5, [r4, #16]
 8012642:	432b      	orrs	r3, r5
 8012644:	6965      	ldr	r5, [r4, #20]
 8012646:	432b      	orrs	r3, r5
 8012648:	4313      	orrs	r3, r2
 801264a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801264c:	6823      	ldr	r3, [r4, #0]
 801264e:	68e2      	ldr	r2, [r4, #12]
 8012650:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012652:	6821      	ldr	r1, [r4, #0]
 8012654:	690b      	ldr	r3, [r1, #16]
 8012656:	68a2      	ldr	r2, [r4, #8]
 8012658:	0412      	lsls	r2, r2, #16
 801265a:	4313      	orrs	r3, r2
 801265c:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801265e:	6822      	ldr	r2, [r4, #0]
 8012660:	68d3      	ldr	r3, [r2, #12]
 8012662:	2180      	movs	r1, #128	; 0x80
 8012664:	438b      	bics	r3, r1
 8012666:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012668:	6822      	ldr	r2, [r4, #0]
 801266a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801266c:	4908      	ldr	r1, [pc, #32]	; (8012690 <HAL_RTC_Init+0x9c>)
 801266e:	400b      	ands	r3, r1
 8012670:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012672:	6822      	ldr	r2, [r4, #0]
 8012674:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012676:	69a1      	ldr	r1, [r4, #24]
 8012678:	430b      	orrs	r3, r1
 801267a:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801267c:	6823      	ldr	r3, [r4, #0]
 801267e:	22ff      	movs	r2, #255	; 0xff
 8012680:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012682:	2301      	movs	r3, #1
 8012684:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8012686:	e7ce      	b.n	8012626 <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 8012688:	2001      	movs	r0, #1
 801268a:	e7cc      	b.n	8012626 <HAL_RTC_Init+0x32>
 801268c:	ff8fffbf 	.word	0xff8fffbf
 8012690:	fffbffff 	.word	0xfffbffff

08012694 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8012694:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8012696:	2809      	cmp	r0, #9
 8012698:	d903      	bls.n	80126a2 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 801269a:	3301      	adds	r3, #1
    Value -= 10;
 801269c:	380a      	subs	r0, #10
 801269e:	b2c0      	uxtb	r0, r0
 80126a0:	e7f9      	b.n	8012696 <RTC_ByteToBcd2+0x2>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80126a2:	011b      	lsls	r3, r3, #4
 80126a4:	b2db      	uxtb	r3, r3
 80126a6:	4318      	orrs	r0, r3
}
 80126a8:	4770      	bx	lr
	...

080126ac <HAL_RTC_SetTime>:
{
 80126ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ae:	0004      	movs	r4, r0
 80126b0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80126b2:	7f03      	ldrb	r3, [r0, #28]
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d100      	bne.n	80126ba <HAL_RTC_SetTime+0xe>
 80126b8:	e070      	b.n	801279c <HAL_RTC_SetTime+0xf0>
 80126ba:	2301      	movs	r3, #1
 80126bc:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80126be:	3301      	adds	r3, #1
 80126c0:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80126c2:	2a00      	cmp	r2, #0
 80126c4:	d142      	bne.n	801274c <HAL_RTC_SetTime+0xa0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80126c6:	6803      	ldr	r3, [r0, #0]
 80126c8:	689b      	ldr	r3, [r3, #8]
 80126ca:	065b      	lsls	r3, r3, #25
 80126cc:	d401      	bmi.n	80126d2 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 80126ce:	2300      	movs	r3, #0
 80126d0:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80126d2:	7830      	ldrb	r0, [r6, #0]
 80126d4:	f7ff ffde 	bl	8012694 <RTC_ByteToBcd2>
 80126d8:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80126da:	7870      	ldrb	r0, [r6, #1]
 80126dc:	f7ff ffda 	bl	8012694 <RTC_ByteToBcd2>
 80126e0:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80126e2:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80126e4:	78b0      	ldrb	r0, [r6, #2]
 80126e6:	f7ff ffd5 	bl	8012694 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80126ea:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80126ec:	7a30      	ldrb	r0, [r6, #8]
 80126ee:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80126f0:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80126f2:	6823      	ldr	r3, [r4, #0]
 80126f4:	22ca      	movs	r2, #202	; 0xca
 80126f6:	625a      	str	r2, [r3, #36]	; 0x24
 80126f8:	6823      	ldr	r3, [r4, #0]
 80126fa:	3a77      	subs	r2, #119	; 0x77
 80126fc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80126fe:	0020      	movs	r0, r4
 8012700:	f7ff ff5a 	bl	80125b8 <RTC_EnterInitMode>
 8012704:	1e07      	subs	r7, r0, #0
 8012706:	d132      	bne.n	801276e <HAL_RTC_SetTime+0xc2>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012708:	6823      	ldr	r3, [r4, #0]
 801270a:	4825      	ldr	r0, [pc, #148]	; (80127a0 <HAL_RTC_SetTime+0xf4>)
 801270c:	4005      	ands	r5, r0
 801270e:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012710:	6822      	ldr	r2, [r4, #0]
 8012712:	6893      	ldr	r3, [r2, #8]
 8012714:	4923      	ldr	r1, [pc, #140]	; (80127a4 <HAL_RTC_SetTime+0xf8>)
 8012716:	400b      	ands	r3, r1
 8012718:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801271a:	6821      	ldr	r1, [r4, #0]
 801271c:	688b      	ldr	r3, [r1, #8]
 801271e:	68f2      	ldr	r2, [r6, #12]
 8012720:	6930      	ldr	r0, [r6, #16]
 8012722:	4302      	orrs	r2, r0
 8012724:	4313      	orrs	r3, r2
 8012726:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012728:	6822      	ldr	r2, [r4, #0]
 801272a:	68d3      	ldr	r3, [r2, #12]
 801272c:	2180      	movs	r1, #128	; 0x80
 801272e:	438b      	bics	r3, r1
 8012730:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	689b      	ldr	r3, [r3, #8]
 8012736:	069b      	lsls	r3, r3, #26
 8012738:	d522      	bpl.n	8012780 <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801273a:	6823      	ldr	r3, [r4, #0]
 801273c:	22ff      	movs	r2, #255	; 0xff
 801273e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012740:	2301      	movs	r3, #1
 8012742:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012744:	2300      	movs	r3, #0
 8012746:	7723      	strb	r3, [r4, #28]
}
 8012748:	0038      	movs	r0, r7
 801274a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801274c:	6803      	ldr	r3, [r0, #0]
 801274e:	689b      	ldr	r3, [r3, #8]
 8012750:	065b      	lsls	r3, r3, #25
 8012752:	d401      	bmi.n	8012758 <HAL_RTC_SetTime+0xac>
      sTime->TimeFormat = 0x00;
 8012754:	2300      	movs	r3, #0
 8012756:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012758:	7835      	ldrb	r5, [r6, #0]
 801275a:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 801275c:	7870      	ldrb	r0, [r6, #1]
 801275e:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012760:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012762:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012764:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012766:	7a30      	ldrb	r0, [r6, #8]
 8012768:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801276a:	4305      	orrs	r5, r0
 801276c:	e7c1      	b.n	80126f2 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801276e:	6823      	ldr	r3, [r4, #0]
 8012770:	22ff      	movs	r2, #255	; 0xff
 8012772:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012774:	2304      	movs	r3, #4
 8012776:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012778:	2300      	movs	r3, #0
 801277a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801277c:	2701      	movs	r7, #1
 801277e:	e7e3      	b.n	8012748 <HAL_RTC_SetTime+0x9c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012780:	0020      	movs	r0, r4
 8012782:	f7ff ff00 	bl	8012586 <HAL_RTC_WaitForSynchro>
 8012786:	2800      	cmp	r0, #0
 8012788:	d0d7      	beq.n	801273a <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801278a:	6823      	ldr	r3, [r4, #0]
 801278c:	22ff      	movs	r2, #255	; 0xff
 801278e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012790:	2304      	movs	r3, #4
 8012792:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012794:	2300      	movs	r3, #0
 8012796:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012798:	2701      	movs	r7, #1
 801279a:	e7d5      	b.n	8012748 <HAL_RTC_SetTime+0x9c>
  __HAL_LOCK(hrtc);
 801279c:	2702      	movs	r7, #2
 801279e:	e7d3      	b.n	8012748 <HAL_RTC_SetTime+0x9c>
 80127a0:	007f7f7f 	.word	0x007f7f7f
 80127a4:	fffbffff 	.word	0xfffbffff

080127a8 <HAL_RTC_SetDate>:
{
 80127a8:	b570      	push	{r4, r5, r6, lr}
 80127aa:	0004      	movs	r4, r0
 80127ac:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 80127ae:	7f03      	ldrb	r3, [r0, #28]
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d061      	beq.n	8012878 <HAL_RTC_SetDate+0xd0>
 80127b4:	2301      	movs	r3, #1
 80127b6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80127b8:	3301      	adds	r3, #1
 80127ba:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80127bc:	2a00      	cmp	r2, #0
 80127be:	d106      	bne.n	80127ce <HAL_RTC_SetDate+0x26>
 80127c0:	784b      	ldrb	r3, [r1, #1]
 80127c2:	06d9      	lsls	r1, r3, #27
 80127c4:	d503      	bpl.n	80127ce <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80127c6:	2110      	movs	r1, #16
 80127c8:	438b      	bics	r3, r1
 80127ca:	330a      	adds	r3, #10
 80127cc:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 80127ce:	2a00      	cmp	r2, #0
 80127d0:	d130      	bne.n	8012834 <HAL_RTC_SetDate+0x8c>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80127d2:	78f0      	ldrb	r0, [r6, #3]
 80127d4:	f7ff ff5e 	bl	8012694 <RTC_ByteToBcd2>
 80127d8:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80127da:	7870      	ldrb	r0, [r6, #1]
 80127dc:	f7ff ff5a 	bl	8012694 <RTC_ByteToBcd2>
 80127e0:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80127e2:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80127e4:	78b0      	ldrb	r0, [r6, #2]
 80127e6:	f7ff ff55 	bl	8012694 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80127ea:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 80127ec:	7830      	ldrb	r0, [r6, #0]
 80127ee:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80127f0:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	22ca      	movs	r2, #202	; 0xca
 80127f6:	625a      	str	r2, [r3, #36]	; 0x24
 80127f8:	6823      	ldr	r3, [r4, #0]
 80127fa:	3a77      	subs	r2, #119	; 0x77
 80127fc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80127fe:	0020      	movs	r0, r4
 8012800:	f7ff feda 	bl	80125b8 <RTC_EnterInitMode>
 8012804:	1e06      	subs	r6, r0, #0
 8012806:	d120      	bne.n	801284a <HAL_RTC_SetDate+0xa2>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012808:	6823      	ldr	r3, [r4, #0]
 801280a:	481c      	ldr	r0, [pc, #112]	; (801287c <HAL_RTC_SetDate+0xd4>)
 801280c:	4005      	ands	r5, r0
 801280e:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012810:	6822      	ldr	r2, [r4, #0]
 8012812:	68d3      	ldr	r3, [r2, #12]
 8012814:	2180      	movs	r1, #128	; 0x80
 8012816:	438b      	bics	r3, r1
 8012818:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801281a:	6823      	ldr	r3, [r4, #0]
 801281c:	689b      	ldr	r3, [r3, #8]
 801281e:	069b      	lsls	r3, r3, #26
 8012820:	d51c      	bpl.n	801285c <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012822:	6823      	ldr	r3, [r4, #0]
 8012824:	22ff      	movs	r2, #255	; 0xff
 8012826:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012828:	2301      	movs	r3, #1
 801282a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 801282c:	2300      	movs	r3, #0
 801282e:	7723      	strb	r3, [r4, #28]
}
 8012830:	0030      	movs	r0, r6
 8012832:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8012834:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8012836:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012838:	78f5      	ldrb	r5, [r6, #3]
 801283a:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 801283c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801283e:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8012840:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012842:	7830      	ldrb	r0, [r6, #0]
 8012844:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012846:	4305      	orrs	r5, r0
 8012848:	e7d3      	b.n	80127f2 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801284a:	6823      	ldr	r3, [r4, #0]
 801284c:	22ff      	movs	r2, #255	; 0xff
 801284e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012850:	2304      	movs	r3, #4
 8012852:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012854:	2300      	movs	r3, #0
 8012856:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012858:	2601      	movs	r6, #1
 801285a:	e7e9      	b.n	8012830 <HAL_RTC_SetDate+0x88>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801285c:	0020      	movs	r0, r4
 801285e:	f7ff fe92 	bl	8012586 <HAL_RTC_WaitForSynchro>
 8012862:	2800      	cmp	r0, #0
 8012864:	d0dd      	beq.n	8012822 <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012866:	6823      	ldr	r3, [r4, #0]
 8012868:	22ff      	movs	r2, #255	; 0xff
 801286a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801286c:	2304      	movs	r3, #4
 801286e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012870:	2300      	movs	r3, #0
 8012872:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012874:	2601      	movs	r6, #1
 8012876:	e7db      	b.n	8012830 <HAL_RTC_SetDate+0x88>
 __HAL_LOCK(hrtc);
 8012878:	2602      	movs	r6, #2
 801287a:	e7d9      	b.n	8012830 <HAL_RTC_SetDate+0x88>
 801287c:	00ffff3f 	.word	0x00ffff3f

08012880 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012880:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012882:	0900      	lsrs	r0, r0, #4
 8012884:	0083      	lsls	r3, r0, #2
 8012886:	181b      	adds	r3, r3, r0
 8012888:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801288a:	200f      	movs	r0, #15
 801288c:	4010      	ands	r0, r2
 801288e:	18c0      	adds	r0, r0, r3
 8012890:	b2c0      	uxtb	r0, r0
}
 8012892:	4770      	bx	lr

08012894 <HAL_RTC_GetTime>:
{
 8012894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012896:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012898:	6803      	ldr	r3, [r0, #0]
 801289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801289c:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 801289e:	6803      	ldr	r3, [r0, #0]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	490f      	ldr	r1, [pc, #60]	; (80128e0 <HAL_RTC_GetTime+0x4c>)
 80128a4:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80128a6:	0c1d      	lsrs	r5, r3, #16
 80128a8:	203f      	movs	r0, #63	; 0x3f
 80128aa:	4028      	ands	r0, r5
 80128ac:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80128ae:	0a1e      	lsrs	r6, r3, #8
 80128b0:	277f      	movs	r7, #127	; 0x7f
 80128b2:	403e      	ands	r6, r7
 80128b4:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80128b6:	401f      	ands	r7, r3
 80128b8:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80128ba:	2140      	movs	r1, #64	; 0x40
 80128bc:	4029      	ands	r1, r5
 80128be:	7221      	strb	r1, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 80128c0:	2a00      	cmp	r2, #0
 80128c2:	d10a      	bne.n	80128da <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80128c4:	f7ff ffdc 	bl	8012880 <RTC_Bcd2ToByte>
 80128c8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80128ca:	0030      	movs	r0, r6
 80128cc:	f7ff ffd8 	bl	8012880 <RTC_Bcd2ToByte>
 80128d0:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80128d2:	0038      	movs	r0, r7
 80128d4:	f7ff ffd4 	bl	8012880 <RTC_Bcd2ToByte>
 80128d8:	70a0      	strb	r0, [r4, #2]
}
 80128da:	2000      	movs	r0, #0
 80128dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128de:	46c0      	nop			; (mov r8, r8)
 80128e0:	007f7f7f 	.word	0x007f7f7f

080128e4 <HAL_RTC_GetDate>:
{
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80128e8:	6803      	ldr	r3, [r0, #0]
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	490e      	ldr	r1, [pc, #56]	; (8012928 <HAL_RTC_GetDate+0x44>)
 80128ee:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80128f0:	0c18      	lsrs	r0, r3, #16
 80128f2:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80128f4:	0a19      	lsrs	r1, r3, #8
 80128f6:	261f      	movs	r6, #31
 80128f8:	400e      	ands	r6, r1
 80128fa:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80128fc:	253f      	movs	r5, #63	; 0x3f
 80128fe:	401d      	ands	r5, r3
 8012900:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012902:	0b5b      	lsrs	r3, r3, #13
 8012904:	2107      	movs	r1, #7
 8012906:	400b      	ands	r3, r1
 8012908:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 801290a:	2a00      	cmp	r2, #0
 801290c:	d10a      	bne.n	8012924 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801290e:	f7ff ffb7 	bl	8012880 <RTC_Bcd2ToByte>
 8012912:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012914:	0030      	movs	r0, r6
 8012916:	f7ff ffb3 	bl	8012880 <RTC_Bcd2ToByte>
 801291a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 801291c:	0028      	movs	r0, r5
 801291e:	f7ff ffaf 	bl	8012880 <RTC_Bcd2ToByte>
 8012922:	70a0      	strb	r0, [r4, #2]
}
 8012924:	2000      	movs	r0, #0
 8012926:	bd70      	pop	{r4, r5, r6, pc}
 8012928:	00ffff3f 	.word	0x00ffff3f

0801292c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801292c:	6803      	ldr	r3, [r0, #0]
 801292e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012930:	0089      	lsls	r1, r1, #2
 8012932:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012934:	600a      	str	r2, [r1, #0]
}
 8012936:	4770      	bx	lr

08012938 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012938:	6803      	ldr	r3, [r0, #0]
 801293a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801293c:	0089      	lsls	r1, r1, #2
 801293e:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012940:	6808      	ldr	r0, [r1, #0]
}
 8012942:	4770      	bx	lr

08012944 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012944:	4770      	bx	lr

08012946 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012946:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012948:	2239      	movs	r2, #57	; 0x39
 801294a:	2302      	movs	r3, #2
 801294c:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801294e:	6804      	ldr	r4, [r0, #0]
 8012950:	6823      	ldr	r3, [r4, #0]
 8012952:	2101      	movs	r1, #1
 8012954:	430b      	orrs	r3, r1
 8012956:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012958:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 801295a:	2000      	movs	r0, #0
 801295c:	bd10      	pop	{r4, pc}
	...

08012960 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012960:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012962:	4a1f      	ldr	r2, [pc, #124]	; (80129e0 <TIM_Base_SetConfig+0x80>)
 8012964:	4290      	cmp	r0, r2
 8012966:	d006      	beq.n	8012976 <TIM_Base_SetConfig+0x16>
 8012968:	2280      	movs	r2, #128	; 0x80
 801296a:	05d2      	lsls	r2, r2, #23
 801296c:	4290      	cmp	r0, r2
 801296e:	d002      	beq.n	8012976 <TIM_Base_SetConfig+0x16>
 8012970:	4a1c      	ldr	r2, [pc, #112]	; (80129e4 <TIM_Base_SetConfig+0x84>)
 8012972:	4290      	cmp	r0, r2
 8012974:	d103      	bne.n	801297e <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012976:	2270      	movs	r2, #112	; 0x70
 8012978:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801297a:	684a      	ldr	r2, [r1, #4]
 801297c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801297e:	4a18      	ldr	r2, [pc, #96]	; (80129e0 <TIM_Base_SetConfig+0x80>)
 8012980:	4290      	cmp	r0, r2
 8012982:	d012      	beq.n	80129aa <TIM_Base_SetConfig+0x4a>
 8012984:	2280      	movs	r2, #128	; 0x80
 8012986:	05d2      	lsls	r2, r2, #23
 8012988:	4290      	cmp	r0, r2
 801298a:	d00e      	beq.n	80129aa <TIM_Base_SetConfig+0x4a>
 801298c:	4a15      	ldr	r2, [pc, #84]	; (80129e4 <TIM_Base_SetConfig+0x84>)
 801298e:	4290      	cmp	r0, r2
 8012990:	d00b      	beq.n	80129aa <TIM_Base_SetConfig+0x4a>
 8012992:	4a15      	ldr	r2, [pc, #84]	; (80129e8 <TIM_Base_SetConfig+0x88>)
 8012994:	4290      	cmp	r0, r2
 8012996:	d008      	beq.n	80129aa <TIM_Base_SetConfig+0x4a>
 8012998:	4a14      	ldr	r2, [pc, #80]	; (80129ec <TIM_Base_SetConfig+0x8c>)
 801299a:	4290      	cmp	r0, r2
 801299c:	d005      	beq.n	80129aa <TIM_Base_SetConfig+0x4a>
 801299e:	4a14      	ldr	r2, [pc, #80]	; (80129f0 <TIM_Base_SetConfig+0x90>)
 80129a0:	4290      	cmp	r0, r2
 80129a2:	d002      	beq.n	80129aa <TIM_Base_SetConfig+0x4a>
 80129a4:	4a13      	ldr	r2, [pc, #76]	; (80129f4 <TIM_Base_SetConfig+0x94>)
 80129a6:	4290      	cmp	r0, r2
 80129a8:	d103      	bne.n	80129b2 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80129aa:	4a13      	ldr	r2, [pc, #76]	; (80129f8 <TIM_Base_SetConfig+0x98>)
 80129ac:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80129ae:	68ca      	ldr	r2, [r1, #12]
 80129b0:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80129b2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80129b4:	688b      	ldr	r3, [r1, #8]
 80129b6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80129b8:	680b      	ldr	r3, [r1, #0]
 80129ba:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80129bc:	4b08      	ldr	r3, [pc, #32]	; (80129e0 <TIM_Base_SetConfig+0x80>)
 80129be:	4298      	cmp	r0, r3
 80129c0:	d008      	beq.n	80129d4 <TIM_Base_SetConfig+0x74>
 80129c2:	4b0a      	ldr	r3, [pc, #40]	; (80129ec <TIM_Base_SetConfig+0x8c>)
 80129c4:	4298      	cmp	r0, r3
 80129c6:	d005      	beq.n	80129d4 <TIM_Base_SetConfig+0x74>
 80129c8:	4b09      	ldr	r3, [pc, #36]	; (80129f0 <TIM_Base_SetConfig+0x90>)
 80129ca:	4298      	cmp	r0, r3
 80129cc:	d002      	beq.n	80129d4 <TIM_Base_SetConfig+0x74>
 80129ce:	4b09      	ldr	r3, [pc, #36]	; (80129f4 <TIM_Base_SetConfig+0x94>)
 80129d0:	4298      	cmp	r0, r3
 80129d2:	d101      	bne.n	80129d8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80129d4:	690b      	ldr	r3, [r1, #16]
 80129d6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80129d8:	2301      	movs	r3, #1
 80129da:	6143      	str	r3, [r0, #20]
}
 80129dc:	4770      	bx	lr
 80129de:	46c0      	nop			; (mov r8, r8)
 80129e0:	40012c00 	.word	0x40012c00
 80129e4:	40000400 	.word	0x40000400
 80129e8:	40002000 	.word	0x40002000
 80129ec:	40014000 	.word	0x40014000
 80129f0:	40014400 	.word	0x40014400
 80129f4:	40014800 	.word	0x40014800
 80129f8:	fffffcff 	.word	0xfffffcff

080129fc <HAL_TIM_Base_Init>:
{
 80129fc:	b570      	push	{r4, r5, r6, lr}
 80129fe:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012a00:	d014      	beq.n	8012a2c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012a02:	2339      	movs	r3, #57	; 0x39
 8012a04:	5cc3      	ldrb	r3, [r0, r3]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d00a      	beq.n	8012a20 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8012a0a:	2539      	movs	r5, #57	; 0x39
 8012a0c:	2302      	movs	r3, #2
 8012a0e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012a10:	0021      	movs	r1, r4
 8012a12:	c901      	ldmia	r1!, {r0}
 8012a14:	f7ff ffa4 	bl	8012960 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012a18:	2301      	movs	r3, #1
 8012a1a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012a1c:	2000      	movs	r0, #0
}
 8012a1e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012a20:	3338      	adds	r3, #56	; 0x38
 8012a22:	2200      	movs	r2, #0
 8012a24:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8012a26:	f7ff ff8d 	bl	8012944 <HAL_TIM_Base_MspInit>
 8012a2a:	e7ee      	b.n	8012a0a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012a2c:	2001      	movs	r0, #1
 8012a2e:	e7f6      	b.n	8012a1e <HAL_TIM_Base_Init+0x22>

08012a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012a30:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012a32:	2338      	movs	r3, #56	; 0x38
 8012a34:	5cc3      	ldrb	r3, [r0, r3]
 8012a36:	2b01      	cmp	r3, #1
 8012a38:	d01e      	beq.n	8012a78 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012a3a:	2238      	movs	r2, #56	; 0x38
 8012a3c:	2501      	movs	r5, #1
 8012a3e:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012a40:	2439      	movs	r4, #57	; 0x39
 8012a42:	2302      	movs	r3, #2
 8012a44:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012a46:	6806      	ldr	r6, [r0, #0]
 8012a48:	6873      	ldr	r3, [r6, #4]
 8012a4a:	2770      	movs	r7, #112	; 0x70
 8012a4c:	43bb      	bics	r3, r7
 8012a4e:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012a50:	6806      	ldr	r6, [r0, #0]
 8012a52:	6873      	ldr	r3, [r6, #4]
 8012a54:	680f      	ldr	r7, [r1, #0]
 8012a56:	433b      	orrs	r3, r7
 8012a58:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012a5a:	6806      	ldr	r6, [r0, #0]
 8012a5c:	68b3      	ldr	r3, [r6, #8]
 8012a5e:	2780      	movs	r7, #128	; 0x80
 8012a60:	43bb      	bics	r3, r7
 8012a62:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012a64:	6806      	ldr	r6, [r0, #0]
 8012a66:	68b3      	ldr	r3, [r6, #8]
 8012a68:	6849      	ldr	r1, [r1, #4]
 8012a6a:	430b      	orrs	r3, r1
 8012a6c:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012a6e:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012a70:	2300      	movs	r3, #0
 8012a72:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012a74:	2000      	movs	r0, #0
}
 8012a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012a78:	2002      	movs	r0, #2
 8012a7a:	e7fc      	b.n	8012a76 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012a7c <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012a7c:	4770      	bx	lr

08012a7e <HAL_UART_DeInit>:
{
 8012a7e:	b570      	push	{r4, r5, r6, lr}
 8012a80:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012a82:	d016      	beq.n	8012ab2 <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8012a84:	2669      	movs	r6, #105	; 0x69
 8012a86:	2302      	movs	r3, #2
 8012a88:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8012a8a:	6802      	ldr	r2, [r0, #0]
 8012a8c:	6813      	ldr	r3, [r2, #0]
 8012a8e:	2101      	movs	r1, #1
 8012a90:	438b      	bics	r3, r1
 8012a92:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012a94:	6803      	ldr	r3, [r0, #0]
 8012a96:	2500      	movs	r5, #0
 8012a98:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012a9a:	6803      	ldr	r3, [r0, #0]
 8012a9c:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012a9e:	6803      	ldr	r3, [r0, #0]
 8012aa0:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012aa2:	f7ff ffeb 	bl	8012a7c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012aa6:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012aa8:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012aaa:	2368      	movs	r3, #104	; 0x68
 8012aac:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012aae:	2000      	movs	r0, #0
}
 8012ab0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8012ab2:	2001      	movs	r0, #1
 8012ab4:	e7fc      	b.n	8012ab0 <HAL_UART_DeInit+0x32>

08012ab6 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ab6:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012ab8:	2369      	movs	r3, #105	; 0x69
 8012aba:	5cc3      	ldrb	r3, [r0, r3]
 8012abc:	2b01      	cmp	r3, #1
 8012abe:	d003      	beq.n	8012ac8 <HAL_UART_Transmit_IT+0x12>
 8012ac0:	2369      	movs	r3, #105	; 0x69
 8012ac2:	5cc3      	ldrb	r3, [r0, r3]
 8012ac4:	2b22      	cmp	r3, #34	; 0x22
 8012ac6:	d12b      	bne.n	8012b20 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8012ac8:	2900      	cmp	r1, #0
 8012aca:	d02b      	beq.n	8012b24 <HAL_UART_Transmit_IT+0x6e>
 8012acc:	2a00      	cmp	r2, #0
 8012ace:	d02b      	beq.n	8012b28 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012ad0:	2368      	movs	r3, #104	; 0x68
 8012ad2:	5cc3      	ldrb	r3, [r0, r3]
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d029      	beq.n	8012b2c <HAL_UART_Transmit_IT+0x76>
 8012ad8:	2368      	movs	r3, #104	; 0x68
 8012ada:	2401      	movs	r4, #1
 8012adc:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 8012ade:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012ae0:	3b18      	subs	r3, #24
 8012ae2:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012ae4:	3302      	adds	r3, #2
 8012ae6:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012aec:	3369      	adds	r3, #105	; 0x69
 8012aee:	5cc3      	ldrb	r3, [r0, r3]
 8012af0:	2b22      	cmp	r3, #34	; 0x22
 8012af2:	d011      	beq.n	8012b18 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012af4:	2369      	movs	r3, #105	; 0x69
 8012af6:	2212      	movs	r2, #18
 8012af8:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012afa:	6802      	ldr	r2, [r0, #0]
 8012afc:	6893      	ldr	r3, [r2, #8]
 8012afe:	2101      	movs	r1, #1
 8012b00:	430b      	orrs	r3, r1
 8012b02:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012b04:	2368      	movs	r3, #104	; 0x68
 8012b06:	2200      	movs	r2, #0
 8012b08:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012b0a:	6802      	ldr	r2, [r0, #0]
 8012b0c:	6813      	ldr	r3, [r2, #0]
 8012b0e:	317f      	adds	r1, #127	; 0x7f
 8012b10:	430b      	orrs	r3, r1
 8012b12:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8012b14:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012b16:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012b18:	3347      	adds	r3, #71	; 0x47
 8012b1a:	2232      	movs	r2, #50	; 0x32
 8012b1c:	54c2      	strb	r2, [r0, r3]
 8012b1e:	e7ec      	b.n	8012afa <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 8012b20:	2002      	movs	r0, #2
 8012b22:	e7f8      	b.n	8012b16 <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 8012b24:	2001      	movs	r0, #1
 8012b26:	e7f6      	b.n	8012b16 <HAL_UART_Transmit_IT+0x60>
 8012b28:	2001      	movs	r0, #1
 8012b2a:	e7f4      	b.n	8012b16 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 8012b2c:	2002      	movs	r0, #2
 8012b2e:	e7f2      	b.n	8012b16 <HAL_UART_Transmit_IT+0x60>

08012b30 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012b30:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012b32:	2369      	movs	r3, #105	; 0x69
 8012b34:	5cc3      	ldrb	r3, [r0, r3]
 8012b36:	2b01      	cmp	r3, #1
 8012b38:	d003      	beq.n	8012b42 <HAL_UART_Receive_IT+0x12>
 8012b3a:	2369      	movs	r3, #105	; 0x69
 8012b3c:	5cc3      	ldrb	r3, [r0, r3]
 8012b3e:	2b12      	cmp	r3, #18
 8012b40:	d15d      	bne.n	8012bfe <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 8012b42:	2900      	cmp	r1, #0
 8012b44:	d05d      	beq.n	8012c02 <HAL_UART_Receive_IT+0xd2>
 8012b46:	2a00      	cmp	r2, #0
 8012b48:	d05d      	beq.n	8012c06 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012b4a:	2368      	movs	r3, #104	; 0x68
 8012b4c:	5cc3      	ldrb	r3, [r0, r3]
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d05b      	beq.n	8012c0a <HAL_UART_Receive_IT+0xda>
 8012b52:	2368      	movs	r3, #104	; 0x68
 8012b54:	2401      	movs	r4, #1
 8012b56:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8012b58:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8012b5a:	3b10      	subs	r3, #16
 8012b5c:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8012b5e:	3302      	adds	r3, #2
 8012b60:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012b62:	6883      	ldr	r3, [r0, #8]
 8012b64:	2280      	movs	r2, #128	; 0x80
 8012b66:	0152      	lsls	r2, r2, #5
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d008      	beq.n	8012b7e <HAL_UART_Receive_IT+0x4e>
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d115      	bne.n	8012b9c <HAL_UART_Receive_IT+0x6c>
 8012b70:	6903      	ldr	r3, [r0, #16]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d10e      	bne.n	8012b94 <HAL_UART_Receive_IT+0x64>
 8012b76:	335c      	adds	r3, #92	; 0x5c
 8012b78:	22ff      	movs	r2, #255	; 0xff
 8012b7a:	52c2      	strh	r2, [r0, r3]
 8012b7c:	e012      	b.n	8012ba4 <HAL_UART_Receive_IT+0x74>
 8012b7e:	6903      	ldr	r3, [r0, #16]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d103      	bne.n	8012b8c <HAL_UART_Receive_IT+0x5c>
 8012b84:	335c      	adds	r3, #92	; 0x5c
 8012b86:	4a22      	ldr	r2, [pc, #136]	; (8012c10 <HAL_UART_Receive_IT+0xe0>)
 8012b88:	52c2      	strh	r2, [r0, r3]
 8012b8a:	e00b      	b.n	8012ba4 <HAL_UART_Receive_IT+0x74>
 8012b8c:	235c      	movs	r3, #92	; 0x5c
 8012b8e:	22ff      	movs	r2, #255	; 0xff
 8012b90:	52c2      	strh	r2, [r0, r3]
 8012b92:	e007      	b.n	8012ba4 <HAL_UART_Receive_IT+0x74>
 8012b94:	235c      	movs	r3, #92	; 0x5c
 8012b96:	227f      	movs	r2, #127	; 0x7f
 8012b98:	52c2      	strh	r2, [r0, r3]
 8012b9a:	e003      	b.n	8012ba4 <HAL_UART_Receive_IT+0x74>
 8012b9c:	2280      	movs	r2, #128	; 0x80
 8012b9e:	0552      	lsls	r2, r2, #21
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d01d      	beq.n	8012be0 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012ba8:	3369      	adds	r3, #105	; 0x69
 8012baa:	5cc3      	ldrb	r3, [r0, r3]
 8012bac:	2b12      	cmp	r3, #18
 8012bae:	d022      	beq.n	8012bf6 <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012bb0:	2369      	movs	r3, #105	; 0x69
 8012bb2:	2222      	movs	r2, #34	; 0x22
 8012bb4:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012bb6:	6802      	ldr	r2, [r0, #0]
 8012bb8:	6811      	ldr	r1, [r2, #0]
 8012bba:	2380      	movs	r3, #128	; 0x80
 8012bbc:	005b      	lsls	r3, r3, #1
 8012bbe:	430b      	orrs	r3, r1
 8012bc0:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012bc2:	6802      	ldr	r2, [r0, #0]
 8012bc4:	6893      	ldr	r3, [r2, #8]
 8012bc6:	2101      	movs	r1, #1
 8012bc8:	430b      	orrs	r3, r1
 8012bca:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012bcc:	2368      	movs	r3, #104	; 0x68
 8012bce:	2200      	movs	r2, #0
 8012bd0:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012bd2:	6802      	ldr	r2, [r0, #0]
 8012bd4:	6813      	ldr	r3, [r2, #0]
 8012bd6:	311f      	adds	r1, #31
 8012bd8:	430b      	orrs	r3, r1
 8012bda:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8012bdc:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012bde:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8012be0:	6903      	ldr	r3, [r0, #16]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d103      	bne.n	8012bee <HAL_UART_Receive_IT+0xbe>
 8012be6:	335c      	adds	r3, #92	; 0x5c
 8012be8:	227f      	movs	r2, #127	; 0x7f
 8012bea:	52c2      	strh	r2, [r0, r3]
 8012bec:	e7da      	b.n	8012ba4 <HAL_UART_Receive_IT+0x74>
 8012bee:	235c      	movs	r3, #92	; 0x5c
 8012bf0:	223f      	movs	r2, #63	; 0x3f
 8012bf2:	52c2      	strh	r2, [r0, r3]
 8012bf4:	e7d6      	b.n	8012ba4 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012bf6:	3357      	adds	r3, #87	; 0x57
 8012bf8:	2232      	movs	r2, #50	; 0x32
 8012bfa:	54c2      	strb	r2, [r0, r3]
 8012bfc:	e7db      	b.n	8012bb6 <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 8012bfe:	2002      	movs	r0, #2
 8012c00:	e7ed      	b.n	8012bde <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 8012c02:	2001      	movs	r0, #1
 8012c04:	e7eb      	b.n	8012bde <HAL_UART_Receive_IT+0xae>
 8012c06:	2001      	movs	r0, #1
 8012c08:	e7e9      	b.n	8012bde <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 8012c0a:	2002      	movs	r0, #2
 8012c0c:	e7e7      	b.n	8012bde <HAL_UART_Receive_IT+0xae>
 8012c0e:	46c0      	nop			; (mov r8, r8)
 8012c10:	000001ff 	.word	0x000001ff

08012c14 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012c14:	b510      	push	{r4, lr}
 8012c16:	0004      	movs	r4, r0
 8012c18:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012c1a:	2269      	movs	r2, #105	; 0x69
 8012c1c:	5c82      	ldrb	r2, [r0, r2]
 8012c1e:	2a01      	cmp	r2, #1
 8012c20:	d003      	beq.n	8012c2a <HAL_UART_Transmit_DMA+0x16>
 8012c22:	2269      	movs	r2, #105	; 0x69
 8012c24:	5c82      	ldrb	r2, [r0, r2]
 8012c26:	2a22      	cmp	r2, #34	; 0x22
 8012c28:	d137      	bne.n	8012c9a <HAL_UART_Transmit_DMA+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8012c2a:	2900      	cmp	r1, #0
 8012c2c:	d037      	beq.n	8012c9e <HAL_UART_Transmit_DMA+0x8a>
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d037      	beq.n	8012ca2 <HAL_UART_Transmit_DMA+0x8e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012c32:	2268      	movs	r2, #104	; 0x68
 8012c34:	5ca2      	ldrb	r2, [r4, r2]
 8012c36:	2a01      	cmp	r2, #1
 8012c38:	d035      	beq.n	8012ca6 <HAL_UART_Transmit_DMA+0x92>
 8012c3a:	2268      	movs	r2, #104	; 0x68
 8012c3c:	2001      	movs	r0, #1
 8012c3e:	54a0      	strb	r0, [r4, r2]

    huart->pTxBuffPtr = pData;
 8012c40:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012c42:	3a18      	subs	r2, #24
 8012c44:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8012c46:	3202      	adds	r2, #2
 8012c48:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012c4e:	3269      	adds	r2, #105	; 0x69
 8012c50:	5ca2      	ldrb	r2, [r4, r2]
 8012c52:	2a22      	cmp	r2, #34	; 0x22
 8012c54:	d01d      	beq.n	8012c92 <HAL_UART_Transmit_DMA+0x7e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012c56:	2269      	movs	r2, #105	; 0x69
 8012c58:	2012      	movs	r0, #18
 8012c5a:	54a0      	strb	r0, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012c5c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012c5e:	4813      	ldr	r0, [pc, #76]	; (8012cac <HAL_UART_Transmit_DMA+0x98>)
 8012c60:	6290      	str	r0, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012c62:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012c64:	4812      	ldr	r0, [pc, #72]	; (8012cb0 <HAL_UART_Transmit_DMA+0x9c>)
 8012c66:	62d0      	str	r0, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012c68:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012c6a:	4812      	ldr	r0, [pc, #72]	; (8012cb4 <HAL_UART_Transmit_DMA+0xa0>)
 8012c6c:	6310      	str	r0, [r2, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012c6e:	6822      	ldr	r2, [r4, #0]
 8012c70:	3228      	adds	r2, #40	; 0x28
 8012c72:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012c74:	f7fe f90a 	bl	8010e8c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012c78:	6823      	ldr	r3, [r4, #0]
 8012c7a:	2240      	movs	r2, #64	; 0x40
 8012c7c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8012c7e:	6822      	ldr	r2, [r4, #0]
 8012c80:	6893      	ldr	r3, [r2, #8]
 8012c82:	2180      	movs	r1, #128	; 0x80
 8012c84:	430b      	orrs	r3, r1
 8012c86:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012c88:	2368      	movs	r3, #104	; 0x68
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8012c8e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012c90:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012c92:	3247      	adds	r2, #71	; 0x47
 8012c94:	3031      	adds	r0, #49	; 0x31
 8012c96:	54a0      	strb	r0, [r4, r2]
 8012c98:	e7e0      	b.n	8012c5c <HAL_UART_Transmit_DMA+0x48>
    return HAL_BUSY;
 8012c9a:	2002      	movs	r0, #2
 8012c9c:	e7f8      	b.n	8012c90 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8012c9e:	2001      	movs	r0, #1
 8012ca0:	e7f6      	b.n	8012c90 <HAL_UART_Transmit_DMA+0x7c>
 8012ca2:	2001      	movs	r0, #1
 8012ca4:	e7f4      	b.n	8012c90 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8012ca6:	2002      	movs	r0, #2
 8012ca8:	e7f2      	b.n	8012c90 <HAL_UART_Transmit_DMA+0x7c>
 8012caa:	46c0      	nop			; (mov r8, r8)
 8012cac:	08012d55 	.word	0x08012d55
 8012cb0:	08012d87 	.word	0x08012d87
 8012cb4:	08012dd7 	.word	0x08012dd7

08012cb8 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012cb8:	b510      	push	{r4, lr}
 8012cba:	0004      	movs	r4, r0
 8012cbc:	0008      	movs	r0, r1
 8012cbe:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012cc0:	2269      	movs	r2, #105	; 0x69
 8012cc2:	5ca2      	ldrb	r2, [r4, r2]
 8012cc4:	2a01      	cmp	r2, #1
 8012cc6:	d003      	beq.n	8012cd0 <HAL_UART_Receive_DMA+0x18>
 8012cc8:	2269      	movs	r2, #105	; 0x69
 8012cca:	5ca2      	ldrb	r2, [r4, r2]
 8012ccc:	2a12      	cmp	r2, #18
 8012cce:	d133      	bne.n	8012d38 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8012cd0:	2800      	cmp	r0, #0
 8012cd2:	d033      	beq.n	8012d3c <HAL_UART_Receive_DMA+0x84>
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d033      	beq.n	8012d40 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012cd8:	2268      	movs	r2, #104	; 0x68
 8012cda:	5ca2      	ldrb	r2, [r4, r2]
 8012cdc:	2a01      	cmp	r2, #1
 8012cde:	d031      	beq.n	8012d44 <HAL_UART_Receive_DMA+0x8c>
 8012ce0:	2268      	movs	r2, #104	; 0x68
 8012ce2:	2101      	movs	r1, #1
 8012ce4:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 8012ce6:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012ce8:	3a10      	subs	r2, #16
 8012cea:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cec:	2200      	movs	r2, #0
 8012cee:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012cf0:	3269      	adds	r2, #105	; 0x69
 8012cf2:	5ca2      	ldrb	r2, [r4, r2]
 8012cf4:	2a12      	cmp	r2, #18
 8012cf6:	d01b      	beq.n	8012d30 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012cf8:	2269      	movs	r2, #105	; 0x69
 8012cfa:	2122      	movs	r1, #34	; 0x22
 8012cfc:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d00:	4911      	ldr	r1, [pc, #68]	; (8012d48 <HAL_UART_Receive_DMA+0x90>)
 8012d02:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012d04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d06:	4911      	ldr	r1, [pc, #68]	; (8012d4c <HAL_UART_Receive_DMA+0x94>)
 8012d08:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d0c:	4910      	ldr	r1, [pc, #64]	; (8012d50 <HAL_UART_Receive_DMA+0x98>)
 8012d0e:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012d10:	6821      	ldr	r1, [r4, #0]
 8012d12:	3124      	adds	r1, #36	; 0x24
 8012d14:	0002      	movs	r2, r0
 8012d16:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012d18:	f7fe f8b8 	bl	8010e8c <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012d1c:	6822      	ldr	r2, [r4, #0]
 8012d1e:	6893      	ldr	r3, [r2, #8]
 8012d20:	2140      	movs	r1, #64	; 0x40
 8012d22:	430b      	orrs	r3, r1
 8012d24:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 8012d26:	2368      	movs	r3, #104	; 0x68
 8012d28:	2200      	movs	r2, #0
 8012d2a:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8012d2c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012d2e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012d30:	3257      	adds	r2, #87	; 0x57
 8012d32:	3131      	adds	r1, #49	; 0x31
 8012d34:	54a1      	strb	r1, [r4, r2]
 8012d36:	e7e2      	b.n	8012cfe <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 8012d38:	2002      	movs	r0, #2
 8012d3a:	e7f8      	b.n	8012d2e <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 8012d3c:	2001      	movs	r0, #1
 8012d3e:	e7f6      	b.n	8012d2e <HAL_UART_Receive_DMA+0x76>
 8012d40:	2001      	movs	r0, #1
 8012d42:	e7f4      	b.n	8012d2e <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 8012d44:	2002      	movs	r0, #2
 8012d46:	e7f2      	b.n	8012d2e <HAL_UART_Receive_DMA+0x76>
 8012d48:	08012d91 	.word	0x08012d91
 8012d4c:	08012dcd 	.word	0x08012dcd
 8012d50:	08012dd7 	.word	0x08012dd7

08012d54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012d54:	b510      	push	{r4, lr}
 8012d56:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012d58:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	069b      	lsls	r3, r3, #26
 8012d60:	d40d      	bmi.n	8012d7e <UART_DMATransmitCplt+0x2a>
  {  
    huart->TxXferCount = 0;
 8012d62:	2352      	movs	r3, #82	; 0x52
 8012d64:	2200      	movs	r2, #0
 8012d66:	52c2      	strh	r2, [r0, r3]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8012d68:	6802      	ldr	r2, [r0, #0]
 8012d6a:	6893      	ldr	r3, [r2, #8]
 8012d6c:	2180      	movs	r1, #128	; 0x80
 8012d6e:	438b      	bics	r3, r1
 8012d70:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012d72:	6802      	ldr	r2, [r0, #0]
 8012d74:	6813      	ldr	r3, [r2, #0]
 8012d76:	3940      	subs	r1, #64	; 0x40
 8012d78:	430b      	orrs	r3, r1
 8012d7a:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8012d7c:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012d7e:	f7fa fe09 	bl	800d994 <HAL_UART_TxCpltCallback>
}
 8012d82:	e7fb      	b.n	8012d7c <UART_DMATransmitCplt+0x28>

08012d84 <HAL_UART_TxHalfCpltCallback>:
}
 8012d84:	4770      	bx	lr

08012d86 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012d86:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8012d88:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_TxHalfCpltCallback(huart);
 8012d8a:	f7ff fffb 	bl	8012d84 <HAL_UART_TxHalfCpltCallback>
}
 8012d8e:	bd10      	pop	{r4, pc}

08012d90 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012d90:	b510      	push	{r4, lr}
 8012d92:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012d94:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	069b      	lsls	r3, r3, #26
 8012d9c:	d40e      	bmi.n	8012dbc <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 8012d9e:	235a      	movs	r3, #90	; 0x5a
 8012da0:	2200      	movs	r2, #0
 8012da2:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012da4:	6802      	ldr	r2, [r0, #0]
 8012da6:	6893      	ldr	r3, [r2, #8]
 8012da8:	2140      	movs	r1, #64	; 0x40
 8012daa:	438b      	bics	r3, r1
 8012dac:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012dae:	2369      	movs	r3, #105	; 0x69
 8012db0:	5cc3      	ldrb	r3, [r0, r3]
 8012db2:	2b32      	cmp	r3, #50	; 0x32
 8012db4:	d005      	beq.n	8012dc2 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012db6:	2369      	movs	r3, #105	; 0x69
 8012db8:	2201      	movs	r2, #1
 8012dba:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012dbc:	f7fa fe26 	bl	800da0c <HAL_UART_RxCpltCallback>
}
 8012dc0:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012dc2:	3337      	adds	r3, #55	; 0x37
 8012dc4:	2212      	movs	r2, #18
 8012dc6:	54c2      	strb	r2, [r0, r3]
 8012dc8:	e7f8      	b.n	8012dbc <UART_DMAReceiveCplt+0x2c>

08012dca <HAL_UART_RxHalfCpltCallback>:
}
 8012dca:	4770      	bx	lr

08012dcc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012dcc:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8012dce:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_RxHalfCpltCallback(huart);
 8012dd0:	f7ff fffb 	bl	8012dca <HAL_UART_RxHalfCpltCallback>
}
 8012dd4:	bd10      	pop	{r4, pc}

08012dd6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012dd6:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012dd8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	225a      	movs	r2, #90	; 0x5a
 8012dde:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012de0:	3a08      	subs	r2, #8
 8012de2:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012de4:	3369      	adds	r3, #105	; 0x69
 8012de6:	3a51      	subs	r2, #81	; 0x51
 8012de8:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012dea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012dec:	320f      	adds	r2, #15
 8012dee:	4313      	orrs	r3, r2
 8012df0:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012df2:	f7fa fde7 	bl	800d9c4 <HAL_UART_ErrorCallback>
}
 8012df6:	bd10      	pop	{r4, pc}

08012df8 <UART_SetConfig>:
{
 8012df8:	b570      	push	{r4, r5, r6, lr}
 8012dfa:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012dfc:	6883      	ldr	r3, [r0, #8]
 8012dfe:	6902      	ldr	r2, [r0, #16]
 8012e00:	4313      	orrs	r3, r2
 8012e02:	6942      	ldr	r2, [r0, #20]
 8012e04:	4313      	orrs	r3, r2
 8012e06:	69c2      	ldr	r2, [r0, #28]
 8012e08:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012e0a:	6801      	ldr	r1, [r0, #0]
 8012e0c:	680a      	ldr	r2, [r1, #0]
 8012e0e:	4886      	ldr	r0, [pc, #536]	; (8013028 <UART_SetConfig+0x230>)
 8012e10:	4002      	ands	r2, r0
 8012e12:	4313      	orrs	r3, r2
 8012e14:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012e16:	6822      	ldr	r2, [r4, #0]
 8012e18:	6853      	ldr	r3, [r2, #4]
 8012e1a:	4984      	ldr	r1, [pc, #528]	; (801302c <UART_SetConfig+0x234>)
 8012e1c:	400b      	ands	r3, r1
 8012e1e:	68e1      	ldr	r1, [r4, #12]
 8012e20:	430b      	orrs	r3, r1
 8012e22:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012e24:	69a2      	ldr	r2, [r4, #24]
 8012e26:	6a23      	ldr	r3, [r4, #32]
 8012e28:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012e2a:	6821      	ldr	r1, [r4, #0]
 8012e2c:	688b      	ldr	r3, [r1, #8]
 8012e2e:	4880      	ldr	r0, [pc, #512]	; (8013030 <UART_SetConfig+0x238>)
 8012e30:	4003      	ands	r3, r0
 8012e32:	4313      	orrs	r3, r2
 8012e34:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012e36:	6826      	ldr	r6, [r4, #0]
 8012e38:	4b7e      	ldr	r3, [pc, #504]	; (8013034 <UART_SetConfig+0x23c>)
 8012e3a:	429e      	cmp	r6, r3
 8012e3c:	d01a      	beq.n	8012e74 <UART_SetConfig+0x7c>
 8012e3e:	4b7e      	ldr	r3, [pc, #504]	; (8013038 <UART_SetConfig+0x240>)
 8012e40:	429e      	cmp	r6, r3
 8012e42:	d040      	beq.n	8012ec6 <UART_SetConfig+0xce>
 8012e44:	4b7d      	ldr	r3, [pc, #500]	; (801303c <UART_SetConfig+0x244>)
 8012e46:	429e      	cmp	r6, r3
 8012e48:	d055      	beq.n	8012ef6 <UART_SetConfig+0xfe>
 8012e4a:	4b7d      	ldr	r3, [pc, #500]	; (8013040 <UART_SetConfig+0x248>)
 8012e4c:	429e      	cmp	r6, r3
 8012e4e:	d100      	bne.n	8012e52 <UART_SetConfig+0x5a>
 8012e50:	e083      	b.n	8012f5a <UART_SetConfig+0x162>
 8012e52:	4b7c      	ldr	r3, [pc, #496]	; (8013044 <UART_SetConfig+0x24c>)
 8012e54:	429e      	cmp	r6, r3
 8012e56:	d100      	bne.n	8012e5a <UART_SetConfig+0x62>
 8012e58:	e081      	b.n	8012f5e <UART_SetConfig+0x166>
 8012e5a:	4b7b      	ldr	r3, [pc, #492]	; (8013048 <UART_SetConfig+0x250>)
 8012e5c:	429e      	cmp	r6, r3
 8012e5e:	d100      	bne.n	8012e62 <UART_SetConfig+0x6a>
 8012e60:	e07f      	b.n	8012f62 <UART_SetConfig+0x16a>
 8012e62:	4b7a      	ldr	r3, [pc, #488]	; (801304c <UART_SetConfig+0x254>)
 8012e64:	429e      	cmp	r6, r3
 8012e66:	d100      	bne.n	8012e6a <UART_SetConfig+0x72>
 8012e68:	e07d      	b.n	8012f66 <UART_SetConfig+0x16e>
 8012e6a:	4b79      	ldr	r3, [pc, #484]	; (8013050 <UART_SetConfig+0x258>)
 8012e6c:	429e      	cmp	r6, r3
 8012e6e:	d05a      	beq.n	8012f26 <UART_SetConfig+0x12e>
 8012e70:	2510      	movs	r5, #16
 8012e72:	e00b      	b.n	8012e8c <UART_SetConfig+0x94>
 8012e74:	4b77      	ldr	r3, [pc, #476]	; (8013054 <UART_SetConfig+0x25c>)
 8012e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e78:	2303      	movs	r3, #3
 8012e7a:	4013      	ands	r3, r2
 8012e7c:	2b02      	cmp	r3, #2
 8012e7e:	d054      	beq.n	8012f2a <UART_SetConfig+0x132>
 8012e80:	d81d      	bhi.n	8012ebe <UART_SetConfig+0xc6>
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d053      	beq.n	8012f2e <UART_SetConfig+0x136>
 8012e86:	2b01      	cmp	r3, #1
 8012e88:	d153      	bne.n	8012f32 <UART_SetConfig+0x13a>
 8012e8a:	2504      	movs	r5, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012e8c:	2380      	movs	r3, #128	; 0x80
 8012e8e:	021b      	lsls	r3, r3, #8
 8012e90:	69e2      	ldr	r2, [r4, #28]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d069      	beq.n	8012f6a <UART_SetConfig+0x172>
    switch (clocksource)
 8012e96:	2d04      	cmp	r5, #4
 8012e98:	d100      	bne.n	8012e9c <UART_SetConfig+0xa4>
 8012e9a:	e0b9      	b.n	8013010 <UART_SetConfig+0x218>
 8012e9c:	d900      	bls.n	8012ea0 <UART_SetConfig+0xa8>
 8012e9e:	e09f      	b.n	8012fe0 <UART_SetConfig+0x1e8>
 8012ea0:	2d00      	cmp	r5, #0
 8012ea2:	d100      	bne.n	8012ea6 <UART_SetConfig+0xae>
 8012ea4:	e0aa      	b.n	8012ffc <UART_SetConfig+0x204>
 8012ea6:	2d02      	cmp	r5, #2
 8012ea8:	d000      	beq.n	8012eac <UART_SetConfig+0xb4>
 8012eaa:	e097      	b.n	8012fdc <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012eac:	6861      	ldr	r1, [r4, #4]
 8012eae:	486a      	ldr	r0, [pc, #424]	; (8013058 <UART_SetConfig+0x260>)
 8012eb0:	f7ed f94e 	bl	8000150 <__udivsi3>
 8012eb4:	0400      	lsls	r0, r0, #16
 8012eb6:	0c00      	lsrs	r0, r0, #16
 8012eb8:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012eba:	2500      	movs	r5, #0
        break;
 8012ebc:	e07b      	b.n	8012fb6 <UART_SetConfig+0x1be>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012ebe:	2b03      	cmp	r3, #3
 8012ec0:	d139      	bne.n	8012f36 <UART_SetConfig+0x13e>
 8012ec2:	2502      	movs	r5, #2
 8012ec4:	e7e2      	b.n	8012e8c <UART_SetConfig+0x94>
 8012ec6:	4b63      	ldr	r3, [pc, #396]	; (8013054 <UART_SetConfig+0x25c>)
 8012ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eca:	22c0      	movs	r2, #192	; 0xc0
 8012ecc:	0292      	lsls	r2, r2, #10
 8012ece:	4013      	ands	r3, r2
 8012ed0:	2280      	movs	r2, #128	; 0x80
 8012ed2:	0292      	lsls	r2, r2, #10
 8012ed4:	4293      	cmp	r3, r2
 8012ed6:	d030      	beq.n	8012f3a <UART_SetConfig+0x142>
 8012ed8:	d807      	bhi.n	8012eea <UART_SetConfig+0xf2>
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d02f      	beq.n	8012f3e <UART_SetConfig+0x146>
 8012ede:	2280      	movs	r2, #128	; 0x80
 8012ee0:	0252      	lsls	r2, r2, #9
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	d12d      	bne.n	8012f42 <UART_SetConfig+0x14a>
 8012ee6:	2504      	movs	r5, #4
 8012ee8:	e7d0      	b.n	8012e8c <UART_SetConfig+0x94>
 8012eea:	22c0      	movs	r2, #192	; 0xc0
 8012eec:	0292      	lsls	r2, r2, #10
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d129      	bne.n	8012f46 <UART_SetConfig+0x14e>
 8012ef2:	2502      	movs	r5, #2
 8012ef4:	e7ca      	b.n	8012e8c <UART_SetConfig+0x94>
 8012ef6:	4b57      	ldr	r3, [pc, #348]	; (8013054 <UART_SetConfig+0x25c>)
 8012ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012efa:	22c0      	movs	r2, #192	; 0xc0
 8012efc:	0312      	lsls	r2, r2, #12
 8012efe:	4013      	ands	r3, r2
 8012f00:	2280      	movs	r2, #128	; 0x80
 8012f02:	0312      	lsls	r2, r2, #12
 8012f04:	4293      	cmp	r3, r2
 8012f06:	d020      	beq.n	8012f4a <UART_SetConfig+0x152>
 8012f08:	d807      	bhi.n	8012f1a <UART_SetConfig+0x122>
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d01f      	beq.n	8012f4e <UART_SetConfig+0x156>
 8012f0e:	2280      	movs	r2, #128	; 0x80
 8012f10:	02d2      	lsls	r2, r2, #11
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d11d      	bne.n	8012f52 <UART_SetConfig+0x15a>
 8012f16:	2504      	movs	r5, #4
 8012f18:	e7b8      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f1a:	22c0      	movs	r2, #192	; 0xc0
 8012f1c:	0312      	lsls	r2, r2, #12
 8012f1e:	4293      	cmp	r3, r2
 8012f20:	d119      	bne.n	8012f56 <UART_SetConfig+0x15e>
 8012f22:	2502      	movs	r5, #2
 8012f24:	e7b2      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f26:	2500      	movs	r5, #0
 8012f28:	e7b0      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f2a:	2508      	movs	r5, #8
 8012f2c:	e7ae      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f2e:	2500      	movs	r5, #0
 8012f30:	e7ac      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f32:	2510      	movs	r5, #16
 8012f34:	e7aa      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f36:	2510      	movs	r5, #16
 8012f38:	e7a8      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f3a:	2508      	movs	r5, #8
 8012f3c:	e7a6      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f3e:	2500      	movs	r5, #0
 8012f40:	e7a4      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f42:	2510      	movs	r5, #16
 8012f44:	e7a2      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f46:	2510      	movs	r5, #16
 8012f48:	e7a0      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f4a:	2508      	movs	r5, #8
 8012f4c:	e79e      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f4e:	2500      	movs	r5, #0
 8012f50:	e79c      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f52:	2510      	movs	r5, #16
 8012f54:	e79a      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f56:	2510      	movs	r5, #16
 8012f58:	e798      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f5a:	2500      	movs	r5, #0
 8012f5c:	e796      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f5e:	2500      	movs	r5, #0
 8012f60:	e794      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f62:	2500      	movs	r5, #0
 8012f64:	e792      	b.n	8012e8c <UART_SetConfig+0x94>
 8012f66:	2500      	movs	r5, #0
 8012f68:	e790      	b.n	8012e8c <UART_SetConfig+0x94>
    switch (clocksource)
 8012f6a:	2d04      	cmp	r5, #4
 8012f6c:	d02d      	beq.n	8012fca <UART_SetConfig+0x1d2>
 8012f6e:	d80d      	bhi.n	8012f8c <UART_SetConfig+0x194>
 8012f70:	2d00      	cmp	r5, #0
 8012f72:	d022      	beq.n	8012fba <UART_SetConfig+0x1c2>
 8012f74:	2d02      	cmp	r5, #2
 8012f76:	d106      	bne.n	8012f86 <UART_SetConfig+0x18e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012f78:	6861      	ldr	r1, [r4, #4]
 8012f7a:	4838      	ldr	r0, [pc, #224]	; (801305c <UART_SetConfig+0x264>)
 8012f7c:	f7ed f8e8 	bl	8000150 <__udivsi3>
 8012f80:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012f82:	2500      	movs	r5, #0
        break;
 8012f84:	e00e      	b.n	8012fa4 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8012f86:	2501      	movs	r5, #1
 8012f88:	2000      	movs	r0, #0
 8012f8a:	e00b      	b.n	8012fa4 <UART_SetConfig+0x1ac>
 8012f8c:	2d08      	cmp	r5, #8
 8012f8e:	d107      	bne.n	8012fa0 <UART_SetConfig+0x1a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012f90:	6861      	ldr	r1, [r4, #4]
 8012f92:	2080      	movs	r0, #128	; 0x80
 8012f94:	0240      	lsls	r0, r0, #9
 8012f96:	f7ed f8db 	bl	8000150 <__udivsi3>
 8012f9a:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012f9c:	2500      	movs	r5, #0
        break;
 8012f9e:	e001      	b.n	8012fa4 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8012fa0:	2501      	movs	r5, #1
 8012fa2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8012fa4:	230f      	movs	r3, #15
 8012fa6:	0002      	movs	r2, r0
 8012fa8:	439a      	bics	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8012faa:	1040      	asrs	r0, r0, #1
 8012fac:	3b08      	subs	r3, #8
 8012fae:	4018      	ands	r0, r3
 8012fb0:	4310      	orrs	r0, r2
    huart->Instance->BRR = brrtemp;
 8012fb2:	6823      	ldr	r3, [r4, #0]
 8012fb4:	60d8      	str	r0, [r3, #12]
}
 8012fb6:	0028      	movs	r0, r5
 8012fb8:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012fba:	f7ff fa3b 	bl	8012434 <HAL_RCC_GetPCLK1Freq>
 8012fbe:	0040      	lsls	r0, r0, #1
 8012fc0:	6861      	ldr	r1, [r4, #4]
 8012fc2:	f7ed f8c5 	bl	8000150 <__udivsi3>
 8012fc6:	b280      	uxth	r0, r0
        break;
 8012fc8:	e7ec      	b.n	8012fa4 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012fca:	f7ff f9d5 	bl	8012378 <HAL_RCC_GetSysClockFreq>
 8012fce:	0040      	lsls	r0, r0, #1
 8012fd0:	6861      	ldr	r1, [r4, #4]
 8012fd2:	f7ed f8bd 	bl	8000150 <__udivsi3>
 8012fd6:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012fd8:	2500      	movs	r5, #0
        break;
 8012fda:	e7e3      	b.n	8012fa4 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8012fdc:	2501      	movs	r5, #1
 8012fde:	e7ea      	b.n	8012fb6 <UART_SetConfig+0x1be>
 8012fe0:	2d08      	cmp	r5, #8
 8012fe2:	d109      	bne.n	8012ff8 <UART_SetConfig+0x200>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012fe4:	6861      	ldr	r1, [r4, #4]
 8012fe6:	2080      	movs	r0, #128	; 0x80
 8012fe8:	0200      	lsls	r0, r0, #8
 8012fea:	f7ed f8b1 	bl	8000150 <__udivsi3>
 8012fee:	0400      	lsls	r0, r0, #16
 8012ff0:	0c00      	lsrs	r0, r0, #16
 8012ff2:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ff4:	2500      	movs	r5, #0
        break;
 8012ff6:	e7de      	b.n	8012fb6 <UART_SetConfig+0x1be>
    switch (clocksource)
 8012ff8:	2501      	movs	r5, #1
 8012ffa:	e7dc      	b.n	8012fb6 <UART_SetConfig+0x1be>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012ffc:	f7ff fa1a 	bl	8012434 <HAL_RCC_GetPCLK1Freq>
 8013000:	6861      	ldr	r1, [r4, #4]
 8013002:	f7ed f8a5 	bl	8000150 <__udivsi3>
 8013006:	6823      	ldr	r3, [r4, #0]
 8013008:	0400      	lsls	r0, r0, #16
 801300a:	0c00      	lsrs	r0, r0, #16
 801300c:	60d8      	str	r0, [r3, #12]
        break;
 801300e:	e7d2      	b.n	8012fb6 <UART_SetConfig+0x1be>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013010:	f7ff f9b2 	bl	8012378 <HAL_RCC_GetSysClockFreq>
 8013014:	6861      	ldr	r1, [r4, #4]
 8013016:	f7ed f89b 	bl	8000150 <__udivsi3>
 801301a:	6823      	ldr	r3, [r4, #0]
 801301c:	0400      	lsls	r0, r0, #16
 801301e:	0c00      	lsrs	r0, r0, #16
 8013020:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013022:	2500      	movs	r5, #0
        break;
 8013024:	e7c7      	b.n	8012fb6 <UART_SetConfig+0x1be>
 8013026:	46c0      	nop			; (mov r8, r8)
 8013028:	efff69f3 	.word	0xefff69f3
 801302c:	ffffcfff 	.word	0xffffcfff
 8013030:	fffff4ff 	.word	0xfffff4ff
 8013034:	40013800 	.word	0x40013800
 8013038:	40004400 	.word	0x40004400
 801303c:	40004800 	.word	0x40004800
 8013040:	40004c00 	.word	0x40004c00
 8013044:	40005000 	.word	0x40005000
 8013048:	40011400 	.word	0x40011400
 801304c:	40011800 	.word	0x40011800
 8013050:	40011c00 	.word	0x40011c00
 8013054:	40021000 	.word	0x40021000
 8013058:	007a1200 	.word	0x007a1200
 801305c:	00f42400 	.word	0x00f42400

08013060 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013060:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013062:	07db      	lsls	r3, r3, #31
 8013064:	d506      	bpl.n	8013074 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013066:	6802      	ldr	r2, [r0, #0]
 8013068:	6853      	ldr	r3, [r2, #4]
 801306a:	492c      	ldr	r1, [pc, #176]	; (801311c <UART_AdvFeatureConfig+0xbc>)
 801306c:	400b      	ands	r3, r1
 801306e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013070:	430b      	orrs	r3, r1
 8013072:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013074:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013076:	079b      	lsls	r3, r3, #30
 8013078:	d506      	bpl.n	8013088 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801307a:	6802      	ldr	r2, [r0, #0]
 801307c:	6853      	ldr	r3, [r2, #4]
 801307e:	4928      	ldr	r1, [pc, #160]	; (8013120 <UART_AdvFeatureConfig+0xc0>)
 8013080:	400b      	ands	r3, r1
 8013082:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013084:	430b      	orrs	r3, r1
 8013086:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013088:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801308a:	075b      	lsls	r3, r3, #29
 801308c:	d506      	bpl.n	801309c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801308e:	6802      	ldr	r2, [r0, #0]
 8013090:	6853      	ldr	r3, [r2, #4]
 8013092:	4924      	ldr	r1, [pc, #144]	; (8013124 <UART_AdvFeatureConfig+0xc4>)
 8013094:	400b      	ands	r3, r1
 8013096:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013098:	430b      	orrs	r3, r1
 801309a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801309c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801309e:	071b      	lsls	r3, r3, #28
 80130a0:	d506      	bpl.n	80130b0 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80130a2:	6802      	ldr	r2, [r0, #0]
 80130a4:	6853      	ldr	r3, [r2, #4]
 80130a6:	4920      	ldr	r1, [pc, #128]	; (8013128 <UART_AdvFeatureConfig+0xc8>)
 80130a8:	400b      	ands	r3, r1
 80130aa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80130ac:	430b      	orrs	r3, r1
 80130ae:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80130b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80130b2:	06db      	lsls	r3, r3, #27
 80130b4:	d506      	bpl.n	80130c4 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80130b6:	6802      	ldr	r2, [r0, #0]
 80130b8:	6893      	ldr	r3, [r2, #8]
 80130ba:	491c      	ldr	r1, [pc, #112]	; (801312c <UART_AdvFeatureConfig+0xcc>)
 80130bc:	400b      	ands	r3, r1
 80130be:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80130c0:	430b      	orrs	r3, r1
 80130c2:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80130c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80130c6:	069b      	lsls	r3, r3, #26
 80130c8:	d506      	bpl.n	80130d8 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80130ca:	6802      	ldr	r2, [r0, #0]
 80130cc:	6893      	ldr	r3, [r2, #8]
 80130ce:	4918      	ldr	r1, [pc, #96]	; (8013130 <UART_AdvFeatureConfig+0xd0>)
 80130d0:	400b      	ands	r3, r1
 80130d2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80130d4:	430b      	orrs	r3, r1
 80130d6:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80130d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80130da:	065b      	lsls	r3, r3, #25
 80130dc:	d50b      	bpl.n	80130f6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80130de:	6802      	ldr	r2, [r0, #0]
 80130e0:	6853      	ldr	r3, [r2, #4]
 80130e2:	4914      	ldr	r1, [pc, #80]	; (8013134 <UART_AdvFeatureConfig+0xd4>)
 80130e4:	400b      	ands	r3, r1
 80130e6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80130e8:	430b      	orrs	r3, r1
 80130ea:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80130ec:	2380      	movs	r3, #128	; 0x80
 80130ee:	035b      	lsls	r3, r3, #13
 80130f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d00a      	beq.n	801310c <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80130f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80130f8:	061b      	lsls	r3, r3, #24
 80130fa:	d506      	bpl.n	801310a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80130fc:	6802      	ldr	r2, [r0, #0]
 80130fe:	6853      	ldr	r3, [r2, #4]
 8013100:	490d      	ldr	r1, [pc, #52]	; (8013138 <UART_AdvFeatureConfig+0xd8>)
 8013102:	400b      	ands	r3, r1
 8013104:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8013106:	430b      	orrs	r3, r1
 8013108:	6053      	str	r3, [r2, #4]
}
 801310a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801310c:	6802      	ldr	r2, [r0, #0]
 801310e:	6853      	ldr	r3, [r2, #4]
 8013110:	490a      	ldr	r1, [pc, #40]	; (801313c <UART_AdvFeatureConfig+0xdc>)
 8013112:	400b      	ands	r3, r1
 8013114:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8013116:	430b      	orrs	r3, r1
 8013118:	6053      	str	r3, [r2, #4]
 801311a:	e7ec      	b.n	80130f6 <UART_AdvFeatureConfig+0x96>
 801311c:	fffdffff 	.word	0xfffdffff
 8013120:	fffeffff 	.word	0xfffeffff
 8013124:	fffbffff 	.word	0xfffbffff
 8013128:	ffff7fff 	.word	0xffff7fff
 801312c:	ffffefff 	.word	0xffffefff
 8013130:	ffffdfff 	.word	0xffffdfff
 8013134:	ffefffff 	.word	0xffefffff
 8013138:	fff7ffff 	.word	0xfff7ffff
 801313c:	ff9fffff 	.word	0xff9fffff

08013140 <UART_WaitOnFlagUntilTimeout>:
{
 8013140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013142:	46c6      	mov	lr, r8
 8013144:	b500      	push	{lr}
 8013146:	0007      	movs	r7, r0
 8013148:	000c      	movs	r4, r1
 801314a:	0016      	movs	r6, r2
 801314c:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 801314e:	f7fd f9dd 	bl	801050c <HAL_GetTick>
 8013152:	4680      	mov	r8, r0
  if(Status == RESET)
 8013154:	2e00      	cmp	r6, #0
 8013156:	d029      	beq.n	80131ac <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	69da      	ldr	r2, [r3, #28]
 801315c:	4022      	ands	r2, r4
 801315e:	42a2      	cmp	r2, r4
 8013160:	d152      	bne.n	8013208 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8013162:	1c6b      	adds	r3, r5, #1
 8013164:	d0f8      	beq.n	8013158 <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013166:	2d00      	cmp	r5, #0
 8013168:	d005      	beq.n	8013176 <UART_WaitOnFlagUntilTimeout+0x36>
 801316a:	f7fd f9cf 	bl	801050c <HAL_GetTick>
 801316e:	4643      	mov	r3, r8
 8013170:	1ac0      	subs	r0, r0, r3
 8013172:	42a8      	cmp	r0, r5
 8013174:	d9f0      	bls.n	8013158 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013176:	683a      	ldr	r2, [r7, #0]
 8013178:	6813      	ldr	r3, [r2, #0]
 801317a:	2180      	movs	r1, #128	; 0x80
 801317c:	438b      	bics	r3, r1
 801317e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013180:	683a      	ldr	r2, [r7, #0]
 8013182:	6813      	ldr	r3, [r2, #0]
 8013184:	3960      	subs	r1, #96	; 0x60
 8013186:	438b      	bics	r3, r1
 8013188:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801318a:	683a      	ldr	r2, [r7, #0]
 801318c:	6813      	ldr	r3, [r2, #0]
 801318e:	491f      	ldr	r1, [pc, #124]	; (801320c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013190:	400b      	ands	r3, r1
 8013192:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013194:	6839      	ldr	r1, [r7, #0]
 8013196:	688b      	ldr	r3, [r1, #8]
 8013198:	2201      	movs	r2, #1
 801319a:	4393      	bics	r3, r2
 801319c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801319e:	2369      	movs	r3, #105	; 0x69
 80131a0:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 80131a2:	3b01      	subs	r3, #1
 80131a4:	2200      	movs	r2, #0
 80131a6:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80131a8:	2003      	movs	r0, #3
 80131aa:	e02a      	b.n	8013202 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	69d9      	ldr	r1, [r3, #28]
 80131b0:	4021      	ands	r1, r4
 80131b2:	42a1      	cmp	r1, r4
 80131b4:	d024      	beq.n	8013200 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 80131b6:	1c6b      	adds	r3, r5, #1
 80131b8:	d0f8      	beq.n	80131ac <UART_WaitOnFlagUntilTimeout+0x6c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80131ba:	2d00      	cmp	r5, #0
 80131bc:	d005      	beq.n	80131ca <UART_WaitOnFlagUntilTimeout+0x8a>
 80131be:	f7fd f9a5 	bl	801050c <HAL_GetTick>
 80131c2:	4643      	mov	r3, r8
 80131c4:	1ac0      	subs	r0, r0, r3
 80131c6:	42a8      	cmp	r0, r5
 80131c8:	d9f0      	bls.n	80131ac <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80131ca:	683a      	ldr	r2, [r7, #0]
 80131cc:	6813      	ldr	r3, [r2, #0]
 80131ce:	2180      	movs	r1, #128	; 0x80
 80131d0:	438b      	bics	r3, r1
 80131d2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80131d4:	683a      	ldr	r2, [r7, #0]
 80131d6:	6813      	ldr	r3, [r2, #0]
 80131d8:	3960      	subs	r1, #96	; 0x60
 80131da:	438b      	bics	r3, r1
 80131dc:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80131de:	683a      	ldr	r2, [r7, #0]
 80131e0:	6813      	ldr	r3, [r2, #0]
 80131e2:	490a      	ldr	r1, [pc, #40]	; (801320c <UART_WaitOnFlagUntilTimeout+0xcc>)
 80131e4:	400b      	ands	r3, r1
 80131e6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80131e8:	6839      	ldr	r1, [r7, #0]
 80131ea:	688b      	ldr	r3, [r1, #8]
 80131ec:	2201      	movs	r2, #1
 80131ee:	4393      	bics	r3, r2
 80131f0:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80131f2:	2369      	movs	r3, #105	; 0x69
 80131f4:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 80131f6:	3b01      	subs	r3, #1
 80131f8:	2200      	movs	r2, #0
 80131fa:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80131fc:	2003      	movs	r0, #3
 80131fe:	e000      	b.n	8013202 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8013200:	0030      	movs	r0, r6
}
 8013202:	bc80      	pop	{r7}
 8013204:	46b8      	mov	r8, r7
 8013206:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013208:	2000      	movs	r0, #0
 801320a:	e7fa      	b.n	8013202 <UART_WaitOnFlagUntilTimeout+0xc2>
 801320c:	fffffeff 	.word	0xfffffeff

08013210 <HAL_UART_Transmit>:
{
 8013210:	b570      	push	{r4, r5, r6, lr}
 8013212:	0004      	movs	r4, r0
 8013214:	000d      	movs	r5, r1
 8013216:	001e      	movs	r6, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013218:	2369      	movs	r3, #105	; 0x69
 801321a:	5cc3      	ldrb	r3, [r0, r3]
 801321c:	2b01      	cmp	r3, #1
 801321e:	d003      	beq.n	8013228 <HAL_UART_Transmit+0x18>
 8013220:	2369      	movs	r3, #105	; 0x69
 8013222:	5cc3      	ldrb	r3, [r0, r3]
 8013224:	2b22      	cmp	r3, #34	; 0x22
 8013226:	d154      	bne.n	80132d2 <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 8013228:	2d00      	cmp	r5, #0
 801322a:	d054      	beq.n	80132d6 <HAL_UART_Transmit+0xc6>
 801322c:	2a00      	cmp	r2, #0
 801322e:	d054      	beq.n	80132da <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8013230:	2368      	movs	r3, #104	; 0x68
 8013232:	5ce3      	ldrb	r3, [r4, r3]
 8013234:	2b01      	cmp	r3, #1
 8013236:	d052      	beq.n	80132de <HAL_UART_Transmit+0xce>
 8013238:	2368      	movs	r3, #104	; 0x68
 801323a:	2101      	movs	r1, #1
 801323c:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801323e:	2300      	movs	r3, #0
 8013240:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013242:	3369      	adds	r3, #105	; 0x69
 8013244:	5ce3      	ldrb	r3, [r4, r3]
 8013246:	2b22      	cmp	r3, #34	; 0x22
 8013248:	d007      	beq.n	801325a <HAL_UART_Transmit+0x4a>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801324a:	2369      	movs	r3, #105	; 0x69
 801324c:	2112      	movs	r1, #18
 801324e:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8013250:	2350      	movs	r3, #80	; 0x50
 8013252:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8013254:	3302      	adds	r3, #2
 8013256:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0)
 8013258:	e007      	b.n	801326a <HAL_UART_Transmit+0x5a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801325a:	3347      	adds	r3, #71	; 0x47
 801325c:	3131      	adds	r1, #49	; 0x31
 801325e:	54e1      	strb	r1, [r4, r3]
 8013260:	e7f6      	b.n	8013250 <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8013262:	782b      	ldrb	r3, [r5, #0]
 8013264:	6822      	ldr	r2, [r4, #0]
 8013266:	8513      	strh	r3, [r2, #40]	; 0x28
 8013268:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 801326a:	2252      	movs	r2, #82	; 0x52
 801326c:	5aa2      	ldrh	r2, [r4, r2]
 801326e:	2a00      	cmp	r2, #0
 8013270:	d019      	beq.n	80132a6 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013272:	3a01      	subs	r2, #1
 8013274:	2152      	movs	r1, #82	; 0x52
 8013276:	5262      	strh	r2, [r4, r1]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013278:	0033      	movs	r3, r6
 801327a:	2200      	movs	r2, #0
 801327c:	312e      	adds	r1, #46	; 0x2e
 801327e:	0020      	movs	r0, r4
 8013280:	f7ff ff5e 	bl	8013140 <UART_WaitOnFlagUntilTimeout>
 8013284:	2800      	cmp	r0, #0
 8013286:	d12c      	bne.n	80132e2 <HAL_UART_Transmit+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013288:	2380      	movs	r3, #128	; 0x80
 801328a:	015b      	lsls	r3, r3, #5
 801328c:	68a2      	ldr	r2, [r4, #8]
 801328e:	429a      	cmp	r2, r3
 8013290:	d1e7      	bne.n	8013262 <HAL_UART_Transmit+0x52>
 8013292:	6923      	ldr	r3, [r4, #16]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d1e4      	bne.n	8013262 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013298:	882b      	ldrh	r3, [r5, #0]
 801329a:	05db      	lsls	r3, r3, #23
 801329c:	0ddb      	lsrs	r3, r3, #23
 801329e:	6822      	ldr	r2, [r4, #0]
 80132a0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80132a2:	3502      	adds	r5, #2
 80132a4:	e7e1      	b.n	801326a <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80132a6:	0033      	movs	r3, r6
 80132a8:	2140      	movs	r1, #64	; 0x40
 80132aa:	0020      	movs	r0, r4
 80132ac:	f7ff ff48 	bl	8013140 <UART_WaitOnFlagUntilTimeout>
 80132b0:	2800      	cmp	r0, #0
 80132b2:	d118      	bne.n	80132e6 <HAL_UART_Transmit+0xd6>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80132b4:	2369      	movs	r3, #105	; 0x69
 80132b6:	5ce3      	ldrb	r3, [r4, r3]
 80132b8:	2b32      	cmp	r3, #50	; 0x32
 80132ba:	d006      	beq.n	80132ca <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 80132bc:	2369      	movs	r3, #105	; 0x69
 80132be:	2201      	movs	r2, #1
 80132c0:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80132c2:	2368      	movs	r3, #104	; 0x68
 80132c4:	2200      	movs	r2, #0
 80132c6:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80132c8:	e004      	b.n	80132d4 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80132ca:	3337      	adds	r3, #55	; 0x37
 80132cc:	2222      	movs	r2, #34	; 0x22
 80132ce:	54e2      	strb	r2, [r4, r3]
 80132d0:	e7f7      	b.n	80132c2 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 80132d2:	2002      	movs	r0, #2
}
 80132d4:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 80132d6:	2001      	movs	r0, #1
 80132d8:	e7fc      	b.n	80132d4 <HAL_UART_Transmit+0xc4>
 80132da:	2001      	movs	r0, #1
 80132dc:	e7fa      	b.n	80132d4 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80132de:	2002      	movs	r0, #2
 80132e0:	e7f8      	b.n	80132d4 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80132e2:	2003      	movs	r0, #3
 80132e4:	e7f6      	b.n	80132d4 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80132e6:	2003      	movs	r0, #3
 80132e8:	e7f4      	b.n	80132d4 <HAL_UART_Transmit+0xc4>
	...

080132ec <UART_CheckIdleState>:
{
 80132ec:	b510      	push	{r4, lr}
 80132ee:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132f0:	2300      	movs	r3, #0
 80132f2:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80132f4:	6803      	ldr	r3, [r0, #0]
 80132f6:	4a18      	ldr	r2, [pc, #96]	; (8013358 <UART_CheckIdleState+0x6c>)
 80132f8:	4293      	cmp	r3, r2
 80132fa:	d005      	beq.n	8013308 <UART_CheckIdleState+0x1c>
 80132fc:	4a17      	ldr	r2, [pc, #92]	; (801335c <UART_CheckIdleState+0x70>)
 80132fe:	4293      	cmp	r3, r2
 8013300:	d002      	beq.n	8013308 <UART_CheckIdleState+0x1c>
 8013302:	4a17      	ldr	r2, [pc, #92]	; (8013360 <UART_CheckIdleState+0x74>)
 8013304:	4293      	cmp	r3, r2
 8013306:	d106      	bne.n	8013316 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	071b      	lsls	r3, r3, #28
 801330c:	d40b      	bmi.n	8013326 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801330e:	6823      	ldr	r3, [r4, #0]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	075b      	lsls	r3, r3, #29
 8013314:	d413      	bmi.n	801333e <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8013316:	2369      	movs	r3, #105	; 0x69
 8013318:	2201      	movs	r2, #1
 801331a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 801331c:	3b01      	subs	r3, #1
 801331e:	2200      	movs	r2, #0
 8013320:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8013322:	2000      	movs	r0, #0
}
 8013324:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013326:	23fa      	movs	r3, #250	; 0xfa
 8013328:	2180      	movs	r1, #128	; 0x80
 801332a:	009b      	lsls	r3, r3, #2
 801332c:	2200      	movs	r2, #0
 801332e:	0389      	lsls	r1, r1, #14
 8013330:	0020      	movs	r0, r4
 8013332:	f7ff ff05 	bl	8013140 <UART_WaitOnFlagUntilTimeout>
 8013336:	2800      	cmp	r0, #0
 8013338:	d0e9      	beq.n	801330e <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 801333a:	2003      	movs	r0, #3
 801333c:	e7f2      	b.n	8013324 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801333e:	23fa      	movs	r3, #250	; 0xfa
 8013340:	2180      	movs	r1, #128	; 0x80
 8013342:	009b      	lsls	r3, r3, #2
 8013344:	2200      	movs	r2, #0
 8013346:	03c9      	lsls	r1, r1, #15
 8013348:	0020      	movs	r0, r4
 801334a:	f7ff fef9 	bl	8013140 <UART_WaitOnFlagUntilTimeout>
 801334e:	2800      	cmp	r0, #0
 8013350:	d0e1      	beq.n	8013316 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8013352:	2003      	movs	r0, #3
 8013354:	e7e6      	b.n	8013324 <UART_CheckIdleState+0x38>
 8013356:	46c0      	nop			; (mov r8, r8)
 8013358:	40013800 	.word	0x40013800
 801335c:	40004400 	.word	0x40004400
 8013360:	40004800 	.word	0x40004800

08013364 <HAL_UART_Init>:
{
 8013364:	b510      	push	{r4, lr}
 8013366:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013368:	d030      	beq.n	80133cc <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 801336a:	2369      	movs	r3, #105	; 0x69
 801336c:	5cc3      	ldrb	r3, [r0, r3]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d022      	beq.n	80133b8 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8013372:	2369      	movs	r3, #105	; 0x69
 8013374:	2202      	movs	r2, #2
 8013376:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013378:	6822      	ldr	r2, [r4, #0]
 801337a:	6813      	ldr	r3, [r2, #0]
 801337c:	2101      	movs	r1, #1
 801337e:	438b      	bics	r3, r1
 8013380:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013382:	0020      	movs	r0, r4
 8013384:	f7ff fd38 	bl	8012df8 <UART_SetConfig>
 8013388:	2801      	cmp	r0, #1
 801338a:	d014      	beq.n	80133b6 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801338c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801338e:	2b00      	cmp	r3, #0
 8013390:	d118      	bne.n	80133c4 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013392:	6822      	ldr	r2, [r4, #0]
 8013394:	6853      	ldr	r3, [r2, #4]
 8013396:	490e      	ldr	r1, [pc, #56]	; (80133d0 <HAL_UART_Init+0x6c>)
 8013398:	400b      	ands	r3, r1
 801339a:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801339c:	6822      	ldr	r2, [r4, #0]
 801339e:	6893      	ldr	r3, [r2, #8]
 80133a0:	212a      	movs	r1, #42	; 0x2a
 80133a2:	438b      	bics	r3, r1
 80133a4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80133a6:	6822      	ldr	r2, [r4, #0]
 80133a8:	6813      	ldr	r3, [r2, #0]
 80133aa:	3929      	subs	r1, #41	; 0x29
 80133ac:	430b      	orrs	r3, r1
 80133ae:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80133b0:	0020      	movs	r0, r4
 80133b2:	f7ff ff9b 	bl	80132ec <UART_CheckIdleState>
}
 80133b6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80133b8:	3368      	adds	r3, #104	; 0x68
 80133ba:	2200      	movs	r2, #0
 80133bc:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80133be:	f7fa fdb3 	bl	800df28 <HAL_UART_MspInit>
 80133c2:	e7d6      	b.n	8013372 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80133c4:	0020      	movs	r0, r4
 80133c6:	f7ff fe4b 	bl	8013060 <UART_AdvFeatureConfig>
 80133ca:	e7e2      	b.n	8013392 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80133cc:	2001      	movs	r0, #1
 80133ce:	e7f2      	b.n	80133b6 <HAL_UART_Init+0x52>
 80133d0:	ffffb7ff 	.word	0xffffb7ff

080133d4 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80133d4:	2369      	movs	r3, #105	; 0x69
 80133d6:	5cc3      	ldrb	r3, [r0, r3]
 80133d8:	2b12      	cmp	r3, #18
 80133da:	d003      	beq.n	80133e4 <UART_Transmit_IT+0x10>
 80133dc:	2369      	movs	r3, #105	; 0x69
 80133de:	5cc3      	ldrb	r3, [r0, r3]
 80133e0:	2b32      	cmp	r3, #50	; 0x32
 80133e2:	d12d      	bne.n	8013440 <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 80133e4:	2352      	movs	r3, #82	; 0x52
 80133e6:	5ac3      	ldrh	r3, [r0, r3]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d10b      	bne.n	8013404 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80133ec:	6802      	ldr	r2, [r0, #0]
 80133ee:	6813      	ldr	r3, [r2, #0]
 80133f0:	2180      	movs	r1, #128	; 0x80
 80133f2:	438b      	bics	r3, r1
 80133f4:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80133f6:	6802      	ldr	r2, [r0, #0]
 80133f8:	6813      	ldr	r3, [r2, #0]
 80133fa:	3940      	subs	r1, #64	; 0x40
 80133fc:	430b      	orrs	r3, r1
 80133fe:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 8013400:	2000      	movs	r0, #0
 8013402:	e00f      	b.n	8013424 <UART_Transmit_IT+0x50>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013404:	2380      	movs	r3, #128	; 0x80
 8013406:	015b      	lsls	r3, r3, #5
 8013408:	6882      	ldr	r2, [r0, #8]
 801340a:	429a      	cmp	r2, r3
 801340c:	d00b      	beq.n	8013426 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 801340e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013410:	1c5a      	adds	r2, r3, #1
 8013412:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013414:	781b      	ldrb	r3, [r3, #0]
 8013416:	6802      	ldr	r2, [r0, #0]
 8013418:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 801341a:	2252      	movs	r2, #82	; 0x52
 801341c:	5a83      	ldrh	r3, [r0, r2]
 801341e:	3b01      	subs	r3, #1
 8013420:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8013422:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013424:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013426:	6903      	ldr	r3, [r0, #16]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d1f0      	bne.n	801340e <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801342c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801342e:	881b      	ldrh	r3, [r3, #0]
 8013430:	05db      	lsls	r3, r3, #23
 8013432:	0ddb      	lsrs	r3, r3, #23
 8013434:	6802      	ldr	r2, [r0, #0]
 8013436:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8013438:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801343a:	3302      	adds	r3, #2
 801343c:	64c3      	str	r3, [r0, #76]	; 0x4c
 801343e:	e7ec      	b.n	801341a <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 8013440:	2002      	movs	r0, #2
 8013442:	e7ef      	b.n	8013424 <UART_Transmit_IT+0x50>

08013444 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013444:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013446:	6802      	ldr	r2, [r0, #0]
 8013448:	6813      	ldr	r3, [r2, #0]
 801344a:	2140      	movs	r1, #64	; 0x40
 801344c:	438b      	bics	r3, r1
 801344e:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013450:	2369      	movs	r3, #105	; 0x69
 8013452:	5cc3      	ldrb	r3, [r0, r3]
 8013454:	2b32      	cmp	r3, #50	; 0x32
 8013456:	d00a      	beq.n	801346e <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013458:	6801      	ldr	r1, [r0, #0]
 801345a:	688b      	ldr	r3, [r1, #8]
 801345c:	2201      	movs	r2, #1
 801345e:	4393      	bics	r3, r2
 8013460:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8013462:	2369      	movs	r3, #105	; 0x69
 8013464:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8013466:	f7fa fa95 	bl	800d994 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 801346a:	2000      	movs	r0, #0
 801346c:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 801346e:	3337      	adds	r3, #55	; 0x37
 8013470:	2222      	movs	r2, #34	; 0x22
 8013472:	54c2      	strb	r2, [r0, r3]
 8013474:	e7f7      	b.n	8013466 <UART_EndTransmit_IT+0x22>
	...

08013478 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013478:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 801347a:	235c      	movs	r3, #92	; 0x5c
 801347c:	5ac3      	ldrh	r3, [r0, r3]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801347e:	2269      	movs	r2, #105	; 0x69
 8013480:	5c82      	ldrb	r2, [r0, r2]
 8013482:	2a22      	cmp	r2, #34	; 0x22
 8013484:	d003      	beq.n	801348e <UART_Receive_IT+0x16>
 8013486:	2269      	movs	r2, #105	; 0x69
 8013488:	5c82      	ldrb	r2, [r0, r2]
 801348a:	2a32      	cmp	r2, #50	; 0x32
 801348c:	d13c      	bne.n	8013508 <UART_Receive_IT+0x90>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801348e:	2280      	movs	r2, #128	; 0x80
 8013490:	0152      	lsls	r2, r2, #5
 8013492:	6881      	ldr	r1, [r0, #8]
 8013494:	4291      	cmp	r1, r2
 8013496:	d027      	beq.n	80134e8 <UART_Receive_IT+0x70>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013498:	6802      	ldr	r2, [r0, #0]
 801349a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 801349c:	b2db      	uxtb	r3, r3
 801349e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80134a0:	1c4c      	adds	r4, r1, #1
 80134a2:	6544      	str	r4, [r0, #84]	; 0x54
 80134a4:	4013      	ands	r3, r2
 80134a6:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 80134a8:	225a      	movs	r2, #90	; 0x5a
 80134aa:	5a83      	ldrh	r3, [r0, r2]
 80134ac:	3b01      	subs	r3, #1
 80134ae:	b29b      	uxth	r3, r3
 80134b0:	5283      	strh	r3, [r0, r2]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d12a      	bne.n	801350c <UART_Receive_IT+0x94>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80134b6:	6802      	ldr	r2, [r0, #0]
 80134b8:	6813      	ldr	r3, [r2, #0]
 80134ba:	2120      	movs	r1, #32
 80134bc:	438b      	bics	r3, r1
 80134be:	6013      	str	r3, [r2, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80134c0:	2369      	movs	r3, #105	; 0x69
 80134c2:	5cc3      	ldrb	r3, [r0, r3]
 80134c4:	2b32      	cmp	r3, #50	; 0x32
 80134c6:	d01b      	beq.n	8013500 <UART_Receive_IT+0x88>
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80134c8:	6802      	ldr	r2, [r0, #0]
 80134ca:	6813      	ldr	r3, [r2, #0]
 80134cc:	4910      	ldr	r1, [pc, #64]	; (8013510 <UART_Receive_IT+0x98>)
 80134ce:	400b      	ands	r3, r1
 80134d0:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80134d2:	6801      	ldr	r1, [r0, #0]
 80134d4:	688b      	ldr	r3, [r1, #8]
 80134d6:	2201      	movs	r2, #1
 80134d8:	4393      	bics	r3, r2
 80134da:	608b      	str	r3, [r1, #8]

        huart->State = HAL_UART_STATE_READY;
 80134dc:	2369      	movs	r3, #105	; 0x69
 80134de:	54c2      	strb	r2, [r0, r3]
      }

      HAL_UART_RxCpltCallback(huart);
 80134e0:	f7fa fa94 	bl	800da0c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80134e4:	2000      	movs	r0, #0
 80134e6:	e012      	b.n	801350e <UART_Receive_IT+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80134e8:	6902      	ldr	r2, [r0, #16]
 80134ea:	2a00      	cmp	r2, #0
 80134ec:	d1d4      	bne.n	8013498 <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80134ee:	6802      	ldr	r2, [r0, #0]
 80134f0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80134f2:	4013      	ands	r3, r2
 80134f4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80134f6:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 80134f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80134fa:	3302      	adds	r3, #2
 80134fc:	6543      	str	r3, [r0, #84]	; 0x54
 80134fe:	e7d3      	b.n	80134a8 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013500:	3337      	adds	r3, #55	; 0x37
 8013502:	2212      	movs	r2, #18
 8013504:	54c2      	strb	r2, [r0, r3]
 8013506:	e7eb      	b.n	80134e0 <UART_Receive_IT+0x68>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013508:	2002      	movs	r0, #2
 801350a:	e000      	b.n	801350e <UART_Receive_IT+0x96>
    return HAL_OK;
 801350c:	2000      	movs	r0, #0
  }
}
 801350e:	bd10      	pop	{r4, pc}
 8013510:	fffffeff 	.word	0xfffffeff

08013514 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013514:	4770      	bx	lr

08013516 <HAL_UART_IRQHandler>:
{
 8013516:	b510      	push	{r4, lr}
 8013518:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801351a:	6803      	ldr	r3, [r0, #0]
 801351c:	69da      	ldr	r2, [r3, #28]
 801351e:	07d2      	lsls	r2, r2, #31
 8013520:	d509      	bpl.n	8013536 <HAL_UART_IRQHandler+0x20>
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	05d2      	lsls	r2, r2, #23
 8013526:	d506      	bpl.n	8013536 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8013528:	2201      	movs	r2, #1
 801352a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 801352c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801352e:	4313      	orrs	r3, r2
 8013530:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013532:	2369      	movs	r3, #105	; 0x69
 8013534:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013536:	6823      	ldr	r3, [r4, #0]
 8013538:	69da      	ldr	r2, [r3, #28]
 801353a:	0792      	lsls	r2, r2, #30
 801353c:	d50b      	bpl.n	8013556 <HAL_UART_IRQHandler+0x40>
 801353e:	689a      	ldr	r2, [r3, #8]
 8013540:	07d2      	lsls	r2, r2, #31
 8013542:	d508      	bpl.n	8013556 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013544:	2202      	movs	r2, #2
 8013546:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013548:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801354a:	3202      	adds	r2, #2
 801354c:	4313      	orrs	r3, r2
 801354e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013550:	2369      	movs	r3, #105	; 0x69
 8013552:	3a03      	subs	r2, #3
 8013554:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013556:	6823      	ldr	r3, [r4, #0]
 8013558:	69da      	ldr	r2, [r3, #28]
 801355a:	0752      	lsls	r2, r2, #29
 801355c:	d50b      	bpl.n	8013576 <HAL_UART_IRQHandler+0x60>
 801355e:	689a      	ldr	r2, [r3, #8]
 8013560:	07d2      	lsls	r2, r2, #31
 8013562:	d508      	bpl.n	8013576 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013564:	2204      	movs	r2, #4
 8013566:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013568:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801356a:	3a02      	subs	r2, #2
 801356c:	4313      	orrs	r3, r2
 801356e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013570:	2369      	movs	r3, #105	; 0x69
 8013572:	3a01      	subs	r2, #1
 8013574:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013576:	6823      	ldr	r3, [r4, #0]
 8013578:	69da      	ldr	r2, [r3, #28]
 801357a:	0712      	lsls	r2, r2, #28
 801357c:	d50a      	bpl.n	8013594 <HAL_UART_IRQHandler+0x7e>
 801357e:	689a      	ldr	r2, [r3, #8]
 8013580:	07d2      	lsls	r2, r2, #31
 8013582:	d507      	bpl.n	8013594 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013584:	2208      	movs	r2, #8
 8013586:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013588:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801358a:	4313      	orrs	r3, r2
 801358c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801358e:	2369      	movs	r3, #105	; 0x69
 8013590:	3a07      	subs	r2, #7
 8013592:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013594:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013596:	2b00      	cmp	r3, #0
 8013598:	d11c      	bne.n	80135d4 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 801359a:	6823      	ldr	r3, [r4, #0]
 801359c:	69da      	ldr	r2, [r3, #28]
 801359e:	02d2      	lsls	r2, r2, #11
 80135a0:	d502      	bpl.n	80135a8 <HAL_UART_IRQHandler+0x92>
 80135a2:	689a      	ldr	r2, [r3, #8]
 80135a4:	0252      	lsls	r2, r2, #9
 80135a6:	d419      	bmi.n	80135dc <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80135a8:	6823      	ldr	r3, [r4, #0]
 80135aa:	69da      	ldr	r2, [r3, #28]
 80135ac:	0692      	lsls	r2, r2, #26
 80135ae:	d502      	bpl.n	80135b6 <HAL_UART_IRQHandler+0xa0>
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	069b      	lsls	r3, r3, #26
 80135b4:	d41c      	bmi.n	80135f0 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80135b6:	6823      	ldr	r3, [r4, #0]
 80135b8:	69da      	ldr	r2, [r3, #28]
 80135ba:	0612      	lsls	r2, r2, #24
 80135bc:	d502      	bpl.n	80135c4 <HAL_UART_IRQHandler+0xae>
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	061b      	lsls	r3, r3, #24
 80135c2:	d41e      	bmi.n	8013602 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80135c4:	6823      	ldr	r3, [r4, #0]
 80135c6:	69da      	ldr	r2, [r3, #28]
 80135c8:	0652      	lsls	r2, r2, #25
 80135ca:	d502      	bpl.n	80135d2 <HAL_UART_IRQHandler+0xbc>
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	065b      	lsls	r3, r3, #25
 80135d0:	d41b      	bmi.n	801360a <HAL_UART_IRQHandler+0xf4>
}
 80135d2:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 80135d4:	0020      	movs	r0, r4
 80135d6:	f7fa f9f5 	bl	800d9c4 <HAL_UART_ErrorCallback>
 80135da:	e7de      	b.n	801359a <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80135dc:	2280      	movs	r2, #128	; 0x80
 80135de:	0352      	lsls	r2, r2, #13
 80135e0:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80135e2:	2369      	movs	r3, #105	; 0x69
 80135e4:	2201      	movs	r2, #1
 80135e6:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80135e8:	0020      	movs	r0, r4
 80135ea:	f7ff ff93 	bl	8013514 <HAL_UARTEx_WakeupCallback>
 80135ee:	e7db      	b.n	80135a8 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 80135f0:	0020      	movs	r0, r4
 80135f2:	f7ff ff41 	bl	8013478 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80135f6:	6822      	ldr	r2, [r4, #0]
 80135f8:	6993      	ldr	r3, [r2, #24]
 80135fa:	2108      	movs	r1, #8
 80135fc:	430b      	orrs	r3, r1
 80135fe:	6193      	str	r3, [r2, #24]
 8013600:	e7d9      	b.n	80135b6 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013602:	0020      	movs	r0, r4
 8013604:	f7ff fee6 	bl	80133d4 <UART_Transmit_IT>
 8013608:	e7dc      	b.n	80135c4 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 801360a:	0020      	movs	r0, r4
 801360c:	f7ff ff1a 	bl	8013444 <UART_EndTransmit_IT>
}
 8013610:	e7df      	b.n	80135d2 <HAL_UART_IRQHandler+0xbc>

08013612 <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 8013612:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013614:	f7fc ff62 	bl	80104dc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8013618:	f7f7 fca8 	bl	800af6c <SystemClock_Config>

  /* Initialize all user peripherals */

  /* Initialize BitzOS */
  BOS_Init();
 801361c:	f7f0 fb98 	bl	8003d50 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8013620:	f7f3 ff9c 	bl	800755c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8013624:	f7fa fee5 	bl	800e3f2 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  while (1)
 8013628:	e7fe      	b.n	8013628 <main+0x16>

0801362a <UserTask>:
/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void * argument)
{
  for(;;)
 801362a:	e7fe      	b.n	801362a <UserTask>

0801362c <atof>:
 801362c:	b510      	push	{r4, lr}
 801362e:	2100      	movs	r1, #0
 8013630:	f001 fe9a 	bl	8015368 <strtod>
 8013634:	bd10      	pop	{r4, pc}

08013636 <atoi>:
 8013636:	b510      	push	{r4, lr}
 8013638:	220a      	movs	r2, #10
 801363a:	2100      	movs	r1, #0
 801363c:	f001 ff98 	bl	8015570 <strtol>
 8013640:	bd10      	pop	{r4, pc}

08013642 <atol>:
 8013642:	b510      	push	{r4, lr}
 8013644:	220a      	movs	r2, #10
 8013646:	2100      	movs	r1, #0
 8013648:	f001 ff92 	bl	8015570 <strtol>
 801364c:	bd10      	pop	{r4, pc}
	...

08013650 <__libc_init_array>:
 8013650:	b570      	push	{r4, r5, r6, lr}
 8013652:	2600      	movs	r6, #0
 8013654:	4d0c      	ldr	r5, [pc, #48]	; (8013688 <__libc_init_array+0x38>)
 8013656:	4c0d      	ldr	r4, [pc, #52]	; (801368c <__libc_init_array+0x3c>)
 8013658:	1b64      	subs	r4, r4, r5
 801365a:	10a4      	asrs	r4, r4, #2
 801365c:	42a6      	cmp	r6, r4
 801365e:	d109      	bne.n	8013674 <__libc_init_array+0x24>
 8013660:	2600      	movs	r6, #0
 8013662:	f004 fe73 	bl	801834c <_init>
 8013666:	4d0a      	ldr	r5, [pc, #40]	; (8013690 <__libc_init_array+0x40>)
 8013668:	4c0a      	ldr	r4, [pc, #40]	; (8013694 <__libc_init_array+0x44>)
 801366a:	1b64      	subs	r4, r4, r5
 801366c:	10a4      	asrs	r4, r4, #2
 801366e:	42a6      	cmp	r6, r4
 8013670:	d105      	bne.n	801367e <__libc_init_array+0x2e>
 8013672:	bd70      	pop	{r4, r5, r6, pc}
 8013674:	00b3      	lsls	r3, r6, #2
 8013676:	58eb      	ldr	r3, [r5, r3]
 8013678:	4798      	blx	r3
 801367a:	3601      	adds	r6, #1
 801367c:	e7ee      	b.n	801365c <__libc_init_array+0xc>
 801367e:	00b3      	lsls	r3, r6, #2
 8013680:	58eb      	ldr	r3, [r5, r3]
 8013682:	4798      	blx	r3
 8013684:	3601      	adds	r6, #1
 8013686:	e7f2      	b.n	801366e <__libc_init_array+0x1e>
 8013688:	0801bc88 	.word	0x0801bc88
 801368c:	0801bc88 	.word	0x0801bc88
 8013690:	0801bc88 	.word	0x0801bc88
 8013694:	0801bc8c 	.word	0x0801bc8c

08013698 <malloc>:
 8013698:	b510      	push	{r4, lr}
 801369a:	4b03      	ldr	r3, [pc, #12]	; (80136a8 <malloc+0x10>)
 801369c:	0001      	movs	r1, r0
 801369e:	6818      	ldr	r0, [r3, #0]
 80136a0:	f000 f878 	bl	8013794 <_malloc_r>
 80136a4:	bd10      	pop	{r4, pc}
 80136a6:	46c0      	nop			; (mov r8, r8)
 80136a8:	200000e0 	.word	0x200000e0

080136ac <free>:
 80136ac:	b510      	push	{r4, lr}
 80136ae:	4b03      	ldr	r3, [pc, #12]	; (80136bc <free+0x10>)
 80136b0:	0001      	movs	r1, r0
 80136b2:	6818      	ldr	r0, [r3, #0]
 80136b4:	f000 f824 	bl	8013700 <_free_r>
 80136b8:	bd10      	pop	{r4, pc}
 80136ba:	46c0      	nop			; (mov r8, r8)
 80136bc:	200000e0 	.word	0x200000e0

080136c0 <memcmp>:
 80136c0:	b530      	push	{r4, r5, lr}
 80136c2:	2400      	movs	r4, #0
 80136c4:	3901      	subs	r1, #1
 80136c6:	42a2      	cmp	r2, r4
 80136c8:	d101      	bne.n	80136ce <memcmp+0xe>
 80136ca:	2000      	movs	r0, #0
 80136cc:	e005      	b.n	80136da <memcmp+0x1a>
 80136ce:	5d03      	ldrb	r3, [r0, r4]
 80136d0:	3401      	adds	r4, #1
 80136d2:	5d0d      	ldrb	r5, [r1, r4]
 80136d4:	42ab      	cmp	r3, r5
 80136d6:	d0f6      	beq.n	80136c6 <memcmp+0x6>
 80136d8:	1b58      	subs	r0, r3, r5
 80136da:	bd30      	pop	{r4, r5, pc}

080136dc <memcpy>:
 80136dc:	2300      	movs	r3, #0
 80136de:	b510      	push	{r4, lr}
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d100      	bne.n	80136e6 <memcpy+0xa>
 80136e4:	bd10      	pop	{r4, pc}
 80136e6:	5ccc      	ldrb	r4, [r1, r3]
 80136e8:	54c4      	strb	r4, [r0, r3]
 80136ea:	3301      	adds	r3, #1
 80136ec:	e7f8      	b.n	80136e0 <memcpy+0x4>

080136ee <memset>:
 80136ee:	0003      	movs	r3, r0
 80136f0:	1882      	adds	r2, r0, r2
 80136f2:	4293      	cmp	r3, r2
 80136f4:	d100      	bne.n	80136f8 <memset+0xa>
 80136f6:	4770      	bx	lr
 80136f8:	7019      	strb	r1, [r3, #0]
 80136fa:	3301      	adds	r3, #1
 80136fc:	e7f9      	b.n	80136f2 <memset+0x4>
	...

08013700 <_free_r>:
 8013700:	b570      	push	{r4, r5, r6, lr}
 8013702:	0005      	movs	r5, r0
 8013704:	2900      	cmp	r1, #0
 8013706:	d010      	beq.n	801372a <_free_r+0x2a>
 8013708:	1f0c      	subs	r4, r1, #4
 801370a:	6823      	ldr	r3, [r4, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	da00      	bge.n	8013712 <_free_r+0x12>
 8013710:	18e4      	adds	r4, r4, r3
 8013712:	0028      	movs	r0, r5
 8013714:	f003 f9aa 	bl	8016a6c <__malloc_lock>
 8013718:	4a1d      	ldr	r2, [pc, #116]	; (8013790 <_free_r+0x90>)
 801371a:	6813      	ldr	r3, [r2, #0]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d105      	bne.n	801372c <_free_r+0x2c>
 8013720:	6063      	str	r3, [r4, #4]
 8013722:	6014      	str	r4, [r2, #0]
 8013724:	0028      	movs	r0, r5
 8013726:	f003 f9a9 	bl	8016a7c <__malloc_unlock>
 801372a:	bd70      	pop	{r4, r5, r6, pc}
 801372c:	42a3      	cmp	r3, r4
 801372e:	d908      	bls.n	8013742 <_free_r+0x42>
 8013730:	6821      	ldr	r1, [r4, #0]
 8013732:	1860      	adds	r0, r4, r1
 8013734:	4283      	cmp	r3, r0
 8013736:	d1f3      	bne.n	8013720 <_free_r+0x20>
 8013738:	6818      	ldr	r0, [r3, #0]
 801373a:	685b      	ldr	r3, [r3, #4]
 801373c:	1841      	adds	r1, r0, r1
 801373e:	6021      	str	r1, [r4, #0]
 8013740:	e7ee      	b.n	8013720 <_free_r+0x20>
 8013742:	001a      	movs	r2, r3
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d001      	beq.n	801374e <_free_r+0x4e>
 801374a:	42a3      	cmp	r3, r4
 801374c:	d9f9      	bls.n	8013742 <_free_r+0x42>
 801374e:	6811      	ldr	r1, [r2, #0]
 8013750:	1850      	adds	r0, r2, r1
 8013752:	42a0      	cmp	r0, r4
 8013754:	d10b      	bne.n	801376e <_free_r+0x6e>
 8013756:	6820      	ldr	r0, [r4, #0]
 8013758:	1809      	adds	r1, r1, r0
 801375a:	1850      	adds	r0, r2, r1
 801375c:	6011      	str	r1, [r2, #0]
 801375e:	4283      	cmp	r3, r0
 8013760:	d1e0      	bne.n	8013724 <_free_r+0x24>
 8013762:	6818      	ldr	r0, [r3, #0]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	1841      	adds	r1, r0, r1
 8013768:	6011      	str	r1, [r2, #0]
 801376a:	6053      	str	r3, [r2, #4]
 801376c:	e7da      	b.n	8013724 <_free_r+0x24>
 801376e:	42a0      	cmp	r0, r4
 8013770:	d902      	bls.n	8013778 <_free_r+0x78>
 8013772:	230c      	movs	r3, #12
 8013774:	602b      	str	r3, [r5, #0]
 8013776:	e7d5      	b.n	8013724 <_free_r+0x24>
 8013778:	6821      	ldr	r1, [r4, #0]
 801377a:	1860      	adds	r0, r4, r1
 801377c:	4283      	cmp	r3, r0
 801377e:	d103      	bne.n	8013788 <_free_r+0x88>
 8013780:	6818      	ldr	r0, [r3, #0]
 8013782:	685b      	ldr	r3, [r3, #4]
 8013784:	1841      	adds	r1, r0, r1
 8013786:	6021      	str	r1, [r4, #0]
 8013788:	6063      	str	r3, [r4, #4]
 801378a:	6054      	str	r4, [r2, #4]
 801378c:	e7ca      	b.n	8013724 <_free_r+0x24>
 801378e:	46c0      	nop			; (mov r8, r8)
 8013790:	200060b0 	.word	0x200060b0

08013794 <_malloc_r>:
 8013794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013796:	2303      	movs	r3, #3
 8013798:	1ccd      	adds	r5, r1, #3
 801379a:	439d      	bics	r5, r3
 801379c:	3508      	adds	r5, #8
 801379e:	0006      	movs	r6, r0
 80137a0:	2d0c      	cmp	r5, #12
 80137a2:	d21f      	bcs.n	80137e4 <_malloc_r+0x50>
 80137a4:	250c      	movs	r5, #12
 80137a6:	42a9      	cmp	r1, r5
 80137a8:	d81e      	bhi.n	80137e8 <_malloc_r+0x54>
 80137aa:	0030      	movs	r0, r6
 80137ac:	f003 f95e 	bl	8016a6c <__malloc_lock>
 80137b0:	4925      	ldr	r1, [pc, #148]	; (8013848 <_malloc_r+0xb4>)
 80137b2:	680a      	ldr	r2, [r1, #0]
 80137b4:	0014      	movs	r4, r2
 80137b6:	2c00      	cmp	r4, #0
 80137b8:	d11a      	bne.n	80137f0 <_malloc_r+0x5c>
 80137ba:	4f24      	ldr	r7, [pc, #144]	; (801384c <_malloc_r+0xb8>)
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d104      	bne.n	80137cc <_malloc_r+0x38>
 80137c2:	0021      	movs	r1, r4
 80137c4:	0030      	movs	r0, r6
 80137c6:	f000 ff0d 	bl	80145e4 <_sbrk_r>
 80137ca:	6038      	str	r0, [r7, #0]
 80137cc:	0029      	movs	r1, r5
 80137ce:	0030      	movs	r0, r6
 80137d0:	f000 ff08 	bl	80145e4 <_sbrk_r>
 80137d4:	1c43      	adds	r3, r0, #1
 80137d6:	d12b      	bne.n	8013830 <_malloc_r+0x9c>
 80137d8:	230c      	movs	r3, #12
 80137da:	0030      	movs	r0, r6
 80137dc:	6033      	str	r3, [r6, #0]
 80137de:	f003 f94d 	bl	8016a7c <__malloc_unlock>
 80137e2:	e003      	b.n	80137ec <_malloc_r+0x58>
 80137e4:	2d00      	cmp	r5, #0
 80137e6:	dade      	bge.n	80137a6 <_malloc_r+0x12>
 80137e8:	230c      	movs	r3, #12
 80137ea:	6033      	str	r3, [r6, #0]
 80137ec:	2000      	movs	r0, #0
 80137ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137f0:	6823      	ldr	r3, [r4, #0]
 80137f2:	1b5b      	subs	r3, r3, r5
 80137f4:	d419      	bmi.n	801382a <_malloc_r+0x96>
 80137f6:	2b0b      	cmp	r3, #11
 80137f8:	d903      	bls.n	8013802 <_malloc_r+0x6e>
 80137fa:	6023      	str	r3, [r4, #0]
 80137fc:	18e4      	adds	r4, r4, r3
 80137fe:	6025      	str	r5, [r4, #0]
 8013800:	e003      	b.n	801380a <_malloc_r+0x76>
 8013802:	6863      	ldr	r3, [r4, #4]
 8013804:	42a2      	cmp	r2, r4
 8013806:	d10e      	bne.n	8013826 <_malloc_r+0x92>
 8013808:	600b      	str	r3, [r1, #0]
 801380a:	0030      	movs	r0, r6
 801380c:	f003 f936 	bl	8016a7c <__malloc_unlock>
 8013810:	0020      	movs	r0, r4
 8013812:	2207      	movs	r2, #7
 8013814:	300b      	adds	r0, #11
 8013816:	1d23      	adds	r3, r4, #4
 8013818:	4390      	bics	r0, r2
 801381a:	1ac2      	subs	r2, r0, r3
 801381c:	4298      	cmp	r0, r3
 801381e:	d0e6      	beq.n	80137ee <_malloc_r+0x5a>
 8013820:	1a1b      	subs	r3, r3, r0
 8013822:	50a3      	str	r3, [r4, r2]
 8013824:	e7e3      	b.n	80137ee <_malloc_r+0x5a>
 8013826:	6053      	str	r3, [r2, #4]
 8013828:	e7ef      	b.n	801380a <_malloc_r+0x76>
 801382a:	0022      	movs	r2, r4
 801382c:	6864      	ldr	r4, [r4, #4]
 801382e:	e7c2      	b.n	80137b6 <_malloc_r+0x22>
 8013830:	2303      	movs	r3, #3
 8013832:	1cc4      	adds	r4, r0, #3
 8013834:	439c      	bics	r4, r3
 8013836:	42a0      	cmp	r0, r4
 8013838:	d0e1      	beq.n	80137fe <_malloc_r+0x6a>
 801383a:	1a21      	subs	r1, r4, r0
 801383c:	0030      	movs	r0, r6
 801383e:	f000 fed1 	bl	80145e4 <_sbrk_r>
 8013842:	1c43      	adds	r3, r0, #1
 8013844:	d1db      	bne.n	80137fe <_malloc_r+0x6a>
 8013846:	e7c7      	b.n	80137d8 <_malloc_r+0x44>
 8013848:	200060b0 	.word	0x200060b0
 801384c:	200060b4 	.word	0x200060b4

08013850 <__cvt>:
 8013850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013852:	001e      	movs	r6, r3
 8013854:	2300      	movs	r3, #0
 8013856:	0014      	movs	r4, r2
 8013858:	b08b      	sub	sp, #44	; 0x2c
 801385a:	429e      	cmp	r6, r3
 801385c:	da04      	bge.n	8013868 <__cvt+0x18>
 801385e:	2180      	movs	r1, #128	; 0x80
 8013860:	0609      	lsls	r1, r1, #24
 8013862:	1873      	adds	r3, r6, r1
 8013864:	001e      	movs	r6, r3
 8013866:	232d      	movs	r3, #45	; 0x2d
 8013868:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801386a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801386c:	7013      	strb	r3, [r2, #0]
 801386e:	2320      	movs	r3, #32
 8013870:	2203      	movs	r2, #3
 8013872:	439f      	bics	r7, r3
 8013874:	2f46      	cmp	r7, #70	; 0x46
 8013876:	d007      	beq.n	8013888 <__cvt+0x38>
 8013878:	003b      	movs	r3, r7
 801387a:	3b45      	subs	r3, #69	; 0x45
 801387c:	4259      	negs	r1, r3
 801387e:	414b      	adcs	r3, r1
 8013880:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013882:	3a01      	subs	r2, #1
 8013884:	18cb      	adds	r3, r1, r3
 8013886:	9310      	str	r3, [sp, #64]	; 0x40
 8013888:	ab09      	add	r3, sp, #36	; 0x24
 801388a:	9304      	str	r3, [sp, #16]
 801388c:	ab08      	add	r3, sp, #32
 801388e:	9303      	str	r3, [sp, #12]
 8013890:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013892:	9200      	str	r2, [sp, #0]
 8013894:	9302      	str	r3, [sp, #8]
 8013896:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013898:	0022      	movs	r2, r4
 801389a:	9301      	str	r3, [sp, #4]
 801389c:	0033      	movs	r3, r6
 801389e:	f001 ff1d 	bl	80156dc <_dtoa_r>
 80138a2:	0005      	movs	r5, r0
 80138a4:	2f47      	cmp	r7, #71	; 0x47
 80138a6:	d102      	bne.n	80138ae <__cvt+0x5e>
 80138a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138aa:	07db      	lsls	r3, r3, #31
 80138ac:	d528      	bpl.n	8013900 <__cvt+0xb0>
 80138ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80138b0:	18eb      	adds	r3, r5, r3
 80138b2:	9307      	str	r3, [sp, #28]
 80138b4:	2f46      	cmp	r7, #70	; 0x46
 80138b6:	d114      	bne.n	80138e2 <__cvt+0x92>
 80138b8:	782b      	ldrb	r3, [r5, #0]
 80138ba:	2b30      	cmp	r3, #48	; 0x30
 80138bc:	d10c      	bne.n	80138d8 <__cvt+0x88>
 80138be:	2200      	movs	r2, #0
 80138c0:	2300      	movs	r3, #0
 80138c2:	0020      	movs	r0, r4
 80138c4:	0031      	movs	r1, r6
 80138c6:	f7ec fdc9 	bl	800045c <__aeabi_dcmpeq>
 80138ca:	2800      	cmp	r0, #0
 80138cc:	d104      	bne.n	80138d8 <__cvt+0x88>
 80138ce:	2301      	movs	r3, #1
 80138d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80138d2:	1a9b      	subs	r3, r3, r2
 80138d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80138d6:	6013      	str	r3, [r2, #0]
 80138d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80138da:	9a07      	ldr	r2, [sp, #28]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	18d3      	adds	r3, r2, r3
 80138e0:	9307      	str	r3, [sp, #28]
 80138e2:	2200      	movs	r2, #0
 80138e4:	2300      	movs	r3, #0
 80138e6:	0020      	movs	r0, r4
 80138e8:	0031      	movs	r1, r6
 80138ea:	f7ec fdb7 	bl	800045c <__aeabi_dcmpeq>
 80138ee:	2800      	cmp	r0, #0
 80138f0:	d001      	beq.n	80138f6 <__cvt+0xa6>
 80138f2:	9b07      	ldr	r3, [sp, #28]
 80138f4:	9309      	str	r3, [sp, #36]	; 0x24
 80138f6:	2230      	movs	r2, #48	; 0x30
 80138f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138fa:	9907      	ldr	r1, [sp, #28]
 80138fc:	428b      	cmp	r3, r1
 80138fe:	d306      	bcc.n	801390e <__cvt+0xbe>
 8013900:	0028      	movs	r0, r5
 8013902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013904:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013906:	1b5b      	subs	r3, r3, r5
 8013908:	6013      	str	r3, [r2, #0]
 801390a:	b00b      	add	sp, #44	; 0x2c
 801390c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801390e:	1c59      	adds	r1, r3, #1
 8013910:	9109      	str	r1, [sp, #36]	; 0x24
 8013912:	701a      	strb	r2, [r3, #0]
 8013914:	e7f0      	b.n	80138f8 <__cvt+0xa8>

08013916 <__exponent>:
 8013916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013918:	1c83      	adds	r3, r0, #2
 801391a:	b087      	sub	sp, #28
 801391c:	9303      	str	r3, [sp, #12]
 801391e:	0005      	movs	r5, r0
 8013920:	000c      	movs	r4, r1
 8013922:	232b      	movs	r3, #43	; 0x2b
 8013924:	7002      	strb	r2, [r0, #0]
 8013926:	2900      	cmp	r1, #0
 8013928:	da01      	bge.n	801392e <__exponent+0x18>
 801392a:	424c      	negs	r4, r1
 801392c:	3302      	adds	r3, #2
 801392e:	706b      	strb	r3, [r5, #1]
 8013930:	2c09      	cmp	r4, #9
 8013932:	dd31      	ble.n	8013998 <__exponent+0x82>
 8013934:	270a      	movs	r7, #10
 8013936:	ab04      	add	r3, sp, #16
 8013938:	1dde      	adds	r6, r3, #7
 801393a:	0020      	movs	r0, r4
 801393c:	0039      	movs	r1, r7
 801393e:	9601      	str	r6, [sp, #4]
 8013940:	f7ec fd76 	bl	8000430 <__aeabi_idivmod>
 8013944:	3e01      	subs	r6, #1
 8013946:	3130      	adds	r1, #48	; 0x30
 8013948:	0020      	movs	r0, r4
 801394a:	7031      	strb	r1, [r6, #0]
 801394c:	0039      	movs	r1, r7
 801394e:	9402      	str	r4, [sp, #8]
 8013950:	f7ec fc88 	bl	8000264 <__divsi3>
 8013954:	9b02      	ldr	r3, [sp, #8]
 8013956:	0004      	movs	r4, r0
 8013958:	2b63      	cmp	r3, #99	; 0x63
 801395a:	dcee      	bgt.n	801393a <__exponent+0x24>
 801395c:	9b01      	ldr	r3, [sp, #4]
 801395e:	3430      	adds	r4, #48	; 0x30
 8013960:	1e9a      	subs	r2, r3, #2
 8013962:	0013      	movs	r3, r2
 8013964:	9903      	ldr	r1, [sp, #12]
 8013966:	7014      	strb	r4, [r2, #0]
 8013968:	a804      	add	r0, sp, #16
 801396a:	3007      	adds	r0, #7
 801396c:	4298      	cmp	r0, r3
 801396e:	d80e      	bhi.n	801398e <__exponent+0x78>
 8013970:	ab04      	add	r3, sp, #16
 8013972:	3307      	adds	r3, #7
 8013974:	2000      	movs	r0, #0
 8013976:	429a      	cmp	r2, r3
 8013978:	d804      	bhi.n	8013984 <__exponent+0x6e>
 801397a:	ab04      	add	r3, sp, #16
 801397c:	3009      	adds	r0, #9
 801397e:	18c0      	adds	r0, r0, r3
 8013980:	9b01      	ldr	r3, [sp, #4]
 8013982:	1ac0      	subs	r0, r0, r3
 8013984:	9b03      	ldr	r3, [sp, #12]
 8013986:	1818      	adds	r0, r3, r0
 8013988:	1b40      	subs	r0, r0, r5
 801398a:	b007      	add	sp, #28
 801398c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801398e:	7818      	ldrb	r0, [r3, #0]
 8013990:	3301      	adds	r3, #1
 8013992:	7008      	strb	r0, [r1, #0]
 8013994:	3101      	adds	r1, #1
 8013996:	e7e7      	b.n	8013968 <__exponent+0x52>
 8013998:	2330      	movs	r3, #48	; 0x30
 801399a:	18e4      	adds	r4, r4, r3
 801399c:	70ab      	strb	r3, [r5, #2]
 801399e:	1d28      	adds	r0, r5, #4
 80139a0:	70ec      	strb	r4, [r5, #3]
 80139a2:	e7f1      	b.n	8013988 <__exponent+0x72>

080139a4 <_printf_float>:
 80139a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139a6:	b095      	sub	sp, #84	; 0x54
 80139a8:	000c      	movs	r4, r1
 80139aa:	9208      	str	r2, [sp, #32]
 80139ac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80139ae:	9309      	str	r3, [sp, #36]	; 0x24
 80139b0:	0007      	movs	r7, r0
 80139b2:	f003 f839 	bl	8016a28 <_localeconv_r>
 80139b6:	6803      	ldr	r3, [r0, #0]
 80139b8:	0018      	movs	r0, r3
 80139ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80139bc:	f7ec fbac 	bl	8000118 <strlen>
 80139c0:	2300      	movs	r3, #0
 80139c2:	9312      	str	r3, [sp, #72]	; 0x48
 80139c4:	7e23      	ldrb	r3, [r4, #24]
 80139c6:	2207      	movs	r2, #7
 80139c8:	001e      	movs	r6, r3
 80139ca:	6823      	ldr	r3, [r4, #0]
 80139cc:	900d      	str	r0, [sp, #52]	; 0x34
 80139ce:	930c      	str	r3, [sp, #48]	; 0x30
 80139d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80139d2:	682b      	ldr	r3, [r5, #0]
 80139d4:	05c9      	lsls	r1, r1, #23
 80139d6:	d547      	bpl.n	8013a68 <_printf_float+0xc4>
 80139d8:	189b      	adds	r3, r3, r2
 80139da:	4393      	bics	r3, r2
 80139dc:	001a      	movs	r2, r3
 80139de:	3208      	adds	r2, #8
 80139e0:	602a      	str	r2, [r5, #0]
 80139e2:	681a      	ldr	r2, [r3, #0]
 80139e4:	685b      	ldr	r3, [r3, #4]
 80139e6:	64a2      	str	r2, [r4, #72]	; 0x48
 80139e8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80139ea:	2201      	movs	r2, #1
 80139ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80139ee:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80139f0:	930a      	str	r3, [sp, #40]	; 0x28
 80139f2:	006b      	lsls	r3, r5, #1
 80139f4:	085b      	lsrs	r3, r3, #1
 80139f6:	930e      	str	r3, [sp, #56]	; 0x38
 80139f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80139fa:	4ba8      	ldr	r3, [pc, #672]	; (8013c9c <_printf_float+0x2f8>)
 80139fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80139fe:	4252      	negs	r2, r2
 8013a00:	f7ee fc9e 	bl	8002340 <__aeabi_dcmpun>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	d131      	bne.n	8013a6c <_printf_float+0xc8>
 8013a08:	2201      	movs	r2, #1
 8013a0a:	4ba4      	ldr	r3, [pc, #656]	; (8013c9c <_printf_float+0x2f8>)
 8013a0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a0e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013a10:	4252      	negs	r2, r2
 8013a12:	f7ec fd33 	bl	800047c <__aeabi_dcmple>
 8013a16:	2800      	cmp	r0, #0
 8013a18:	d128      	bne.n	8013a6c <_printf_float+0xc8>
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	0029      	movs	r1, r5
 8013a20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a22:	f7ec fd21 	bl	8000468 <__aeabi_dcmplt>
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d003      	beq.n	8013a32 <_printf_float+0x8e>
 8013a2a:	0023      	movs	r3, r4
 8013a2c:	222d      	movs	r2, #45	; 0x2d
 8013a2e:	3343      	adds	r3, #67	; 0x43
 8013a30:	701a      	strb	r2, [r3, #0]
 8013a32:	4d9b      	ldr	r5, [pc, #620]	; (8013ca0 <_printf_float+0x2fc>)
 8013a34:	2e47      	cmp	r6, #71	; 0x47
 8013a36:	d900      	bls.n	8013a3a <_printf_float+0x96>
 8013a38:	4d9a      	ldr	r5, [pc, #616]	; (8013ca4 <_printf_float+0x300>)
 8013a3a:	2303      	movs	r3, #3
 8013a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a3e:	6123      	str	r3, [r4, #16]
 8013a40:	3301      	adds	r3, #1
 8013a42:	439a      	bics	r2, r3
 8013a44:	2300      	movs	r3, #0
 8013a46:	6022      	str	r2, [r4, #0]
 8013a48:	930a      	str	r3, [sp, #40]	; 0x28
 8013a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a4c:	0021      	movs	r1, r4
 8013a4e:	9300      	str	r3, [sp, #0]
 8013a50:	0038      	movs	r0, r7
 8013a52:	9b08      	ldr	r3, [sp, #32]
 8013a54:	aa13      	add	r2, sp, #76	; 0x4c
 8013a56:	f000 f9f3 	bl	8013e40 <_printf_common>
 8013a5a:	1c43      	adds	r3, r0, #1
 8013a5c:	d000      	beq.n	8013a60 <_printf_float+0xbc>
 8013a5e:	e09e      	b.n	8013b9e <_printf_float+0x1fa>
 8013a60:	2001      	movs	r0, #1
 8013a62:	4240      	negs	r0, r0
 8013a64:	b015      	add	sp, #84	; 0x54
 8013a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a68:	3307      	adds	r3, #7
 8013a6a:	e7b6      	b.n	80139da <_printf_float+0x36>
 8013a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a6e:	002b      	movs	r3, r5
 8013a70:	0010      	movs	r0, r2
 8013a72:	0029      	movs	r1, r5
 8013a74:	f7ee fc64 	bl	8002340 <__aeabi_dcmpun>
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	d00a      	beq.n	8013a92 <_printf_float+0xee>
 8013a7c:	2d00      	cmp	r5, #0
 8013a7e:	da03      	bge.n	8013a88 <_printf_float+0xe4>
 8013a80:	0023      	movs	r3, r4
 8013a82:	222d      	movs	r2, #45	; 0x2d
 8013a84:	3343      	adds	r3, #67	; 0x43
 8013a86:	701a      	strb	r2, [r3, #0]
 8013a88:	4d87      	ldr	r5, [pc, #540]	; (8013ca8 <_printf_float+0x304>)
 8013a8a:	2e47      	cmp	r6, #71	; 0x47
 8013a8c:	d9d5      	bls.n	8013a3a <_printf_float+0x96>
 8013a8e:	4d87      	ldr	r5, [pc, #540]	; (8013cac <_printf_float+0x308>)
 8013a90:	e7d3      	b.n	8013a3a <_printf_float+0x96>
 8013a92:	2220      	movs	r2, #32
 8013a94:	0031      	movs	r1, r6
 8013a96:	6863      	ldr	r3, [r4, #4]
 8013a98:	4391      	bics	r1, r2
 8013a9a:	910e      	str	r1, [sp, #56]	; 0x38
 8013a9c:	1c5a      	adds	r2, r3, #1
 8013a9e:	d147      	bne.n	8013b30 <_printf_float+0x18c>
 8013aa0:	3307      	adds	r3, #7
 8013aa2:	6063      	str	r3, [r4, #4]
 8013aa4:	2380      	movs	r3, #128	; 0x80
 8013aa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013aa8:	00db      	lsls	r3, r3, #3
 8013aaa:	4313      	orrs	r3, r2
 8013aac:	2200      	movs	r2, #0
 8013aae:	9206      	str	r2, [sp, #24]
 8013ab0:	aa12      	add	r2, sp, #72	; 0x48
 8013ab2:	9205      	str	r2, [sp, #20]
 8013ab4:	aa11      	add	r2, sp, #68	; 0x44
 8013ab6:	9203      	str	r2, [sp, #12]
 8013ab8:	2223      	movs	r2, #35	; 0x23
 8013aba:	a908      	add	r1, sp, #32
 8013abc:	6023      	str	r3, [r4, #0]
 8013abe:	9301      	str	r3, [sp, #4]
 8013ac0:	6863      	ldr	r3, [r4, #4]
 8013ac2:	1852      	adds	r2, r2, r1
 8013ac4:	9202      	str	r2, [sp, #8]
 8013ac6:	9300      	str	r3, [sp, #0]
 8013ac8:	0038      	movs	r0, r7
 8013aca:	002b      	movs	r3, r5
 8013acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ace:	9604      	str	r6, [sp, #16]
 8013ad0:	f7ff febe 	bl	8013850 <__cvt>
 8013ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ad6:	0005      	movs	r5, r0
 8013ad8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013ada:	2b47      	cmp	r3, #71	; 0x47
 8013adc:	d108      	bne.n	8013af0 <_printf_float+0x14c>
 8013ade:	1ccb      	adds	r3, r1, #3
 8013ae0:	db02      	blt.n	8013ae8 <_printf_float+0x144>
 8013ae2:	6863      	ldr	r3, [r4, #4]
 8013ae4:	4299      	cmp	r1, r3
 8013ae6:	dd46      	ble.n	8013b76 <_printf_float+0x1d2>
 8013ae8:	0033      	movs	r3, r6
 8013aea:	3b02      	subs	r3, #2
 8013aec:	b2db      	uxtb	r3, r3
 8013aee:	001e      	movs	r6, r3
 8013af0:	2e65      	cmp	r6, #101	; 0x65
 8013af2:	d824      	bhi.n	8013b3e <_printf_float+0x19a>
 8013af4:	0020      	movs	r0, r4
 8013af6:	0032      	movs	r2, r6
 8013af8:	3901      	subs	r1, #1
 8013afa:	3050      	adds	r0, #80	; 0x50
 8013afc:	9111      	str	r1, [sp, #68]	; 0x44
 8013afe:	f7ff ff0a 	bl	8013916 <__exponent>
 8013b02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b04:	900a      	str	r0, [sp, #40]	; 0x28
 8013b06:	1813      	adds	r3, r2, r0
 8013b08:	6123      	str	r3, [r4, #16]
 8013b0a:	2a01      	cmp	r2, #1
 8013b0c:	dc02      	bgt.n	8013b14 <_printf_float+0x170>
 8013b0e:	6822      	ldr	r2, [r4, #0]
 8013b10:	07d2      	lsls	r2, r2, #31
 8013b12:	d501      	bpl.n	8013b18 <_printf_float+0x174>
 8013b14:	3301      	adds	r3, #1
 8013b16:	6123      	str	r3, [r4, #16]
 8013b18:	2323      	movs	r3, #35	; 0x23
 8013b1a:	aa08      	add	r2, sp, #32
 8013b1c:	189b      	adds	r3, r3, r2
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d100      	bne.n	8013b26 <_printf_float+0x182>
 8013b24:	e791      	b.n	8013a4a <_printf_float+0xa6>
 8013b26:	0023      	movs	r3, r4
 8013b28:	222d      	movs	r2, #45	; 0x2d
 8013b2a:	3343      	adds	r3, #67	; 0x43
 8013b2c:	701a      	strb	r2, [r3, #0]
 8013b2e:	e78c      	b.n	8013a4a <_printf_float+0xa6>
 8013b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b32:	2a47      	cmp	r2, #71	; 0x47
 8013b34:	d1b6      	bne.n	8013aa4 <_printf_float+0x100>
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d1b4      	bne.n	8013aa4 <_printf_float+0x100>
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	e7b1      	b.n	8013aa2 <_printf_float+0xfe>
 8013b3e:	2e66      	cmp	r6, #102	; 0x66
 8013b40:	d11b      	bne.n	8013b7a <_printf_float+0x1d6>
 8013b42:	6863      	ldr	r3, [r4, #4]
 8013b44:	2900      	cmp	r1, #0
 8013b46:	dd0d      	ble.n	8013b64 <_printf_float+0x1c0>
 8013b48:	6121      	str	r1, [r4, #16]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d102      	bne.n	8013b54 <_printf_float+0x1b0>
 8013b4e:	6822      	ldr	r2, [r4, #0]
 8013b50:	07d2      	lsls	r2, r2, #31
 8013b52:	d502      	bpl.n	8013b5a <_printf_float+0x1b6>
 8013b54:	3301      	adds	r3, #1
 8013b56:	1859      	adds	r1, r3, r1
 8013b58:	6121      	str	r1, [r4, #16]
 8013b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8013b5e:	2300      	movs	r3, #0
 8013b60:	930a      	str	r3, [sp, #40]	; 0x28
 8013b62:	e7d9      	b.n	8013b18 <_printf_float+0x174>
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d103      	bne.n	8013b70 <_printf_float+0x1cc>
 8013b68:	2201      	movs	r2, #1
 8013b6a:	6821      	ldr	r1, [r4, #0]
 8013b6c:	4211      	tst	r1, r2
 8013b6e:	d000      	beq.n	8013b72 <_printf_float+0x1ce>
 8013b70:	1c9a      	adds	r2, r3, #2
 8013b72:	6122      	str	r2, [r4, #16]
 8013b74:	e7f1      	b.n	8013b5a <_printf_float+0x1b6>
 8013b76:	2367      	movs	r3, #103	; 0x67
 8013b78:	001e      	movs	r6, r3
 8013b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b7e:	4293      	cmp	r3, r2
 8013b80:	db06      	blt.n	8013b90 <_printf_float+0x1ec>
 8013b82:	6822      	ldr	r2, [r4, #0]
 8013b84:	6123      	str	r3, [r4, #16]
 8013b86:	07d2      	lsls	r2, r2, #31
 8013b88:	d5e7      	bpl.n	8013b5a <_printf_float+0x1b6>
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	6123      	str	r3, [r4, #16]
 8013b8e:	e7e4      	b.n	8013b5a <_printf_float+0x1b6>
 8013b90:	2101      	movs	r1, #1
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	dc01      	bgt.n	8013b9a <_printf_float+0x1f6>
 8013b96:	1849      	adds	r1, r1, r1
 8013b98:	1ac9      	subs	r1, r1, r3
 8013b9a:	1852      	adds	r2, r2, r1
 8013b9c:	e7e9      	b.n	8013b72 <_printf_float+0x1ce>
 8013b9e:	6822      	ldr	r2, [r4, #0]
 8013ba0:	0553      	lsls	r3, r2, #21
 8013ba2:	d408      	bmi.n	8013bb6 <_printf_float+0x212>
 8013ba4:	6923      	ldr	r3, [r4, #16]
 8013ba6:	002a      	movs	r2, r5
 8013ba8:	0038      	movs	r0, r7
 8013baa:	9908      	ldr	r1, [sp, #32]
 8013bac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013bae:	47a8      	blx	r5
 8013bb0:	1c43      	adds	r3, r0, #1
 8013bb2:	d129      	bne.n	8013c08 <_printf_float+0x264>
 8013bb4:	e754      	b.n	8013a60 <_printf_float+0xbc>
 8013bb6:	2e65      	cmp	r6, #101	; 0x65
 8013bb8:	d800      	bhi.n	8013bbc <_printf_float+0x218>
 8013bba:	e0ec      	b.n	8013d96 <_printf_float+0x3f2>
 8013bbc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013bbe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	f7ec fc4a 	bl	800045c <__aeabi_dcmpeq>
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	d034      	beq.n	8013c36 <_printf_float+0x292>
 8013bcc:	2301      	movs	r3, #1
 8013bce:	0038      	movs	r0, r7
 8013bd0:	4a37      	ldr	r2, [pc, #220]	; (8013cb0 <_printf_float+0x30c>)
 8013bd2:	9908      	ldr	r1, [sp, #32]
 8013bd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013bd6:	47a8      	blx	r5
 8013bd8:	1c43      	adds	r3, r0, #1
 8013bda:	d100      	bne.n	8013bde <_printf_float+0x23a>
 8013bdc:	e740      	b.n	8013a60 <_printf_float+0xbc>
 8013bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013be2:	4293      	cmp	r3, r2
 8013be4:	db02      	blt.n	8013bec <_printf_float+0x248>
 8013be6:	6823      	ldr	r3, [r4, #0]
 8013be8:	07db      	lsls	r3, r3, #31
 8013bea:	d50d      	bpl.n	8013c08 <_printf_float+0x264>
 8013bec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013bee:	0038      	movs	r0, r7
 8013bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bf4:	9908      	ldr	r1, [sp, #32]
 8013bf6:	47a8      	blx	r5
 8013bf8:	2500      	movs	r5, #0
 8013bfa:	1c43      	adds	r3, r0, #1
 8013bfc:	d100      	bne.n	8013c00 <_printf_float+0x25c>
 8013bfe:	e72f      	b.n	8013a60 <_printf_float+0xbc>
 8013c00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c02:	3b01      	subs	r3, #1
 8013c04:	42ab      	cmp	r3, r5
 8013c06:	dc0a      	bgt.n	8013c1e <_printf_float+0x27a>
 8013c08:	6823      	ldr	r3, [r4, #0]
 8013c0a:	079b      	lsls	r3, r3, #30
 8013c0c:	d500      	bpl.n	8013c10 <_printf_float+0x26c>
 8013c0e:	e114      	b.n	8013e3a <_printf_float+0x496>
 8013c10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c12:	68e0      	ldr	r0, [r4, #12]
 8013c14:	4298      	cmp	r0, r3
 8013c16:	db00      	blt.n	8013c1a <_printf_float+0x276>
 8013c18:	e724      	b.n	8013a64 <_printf_float+0xc0>
 8013c1a:	0018      	movs	r0, r3
 8013c1c:	e722      	b.n	8013a64 <_printf_float+0xc0>
 8013c1e:	0022      	movs	r2, r4
 8013c20:	2301      	movs	r3, #1
 8013c22:	0038      	movs	r0, r7
 8013c24:	9908      	ldr	r1, [sp, #32]
 8013c26:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013c28:	321a      	adds	r2, #26
 8013c2a:	47b0      	blx	r6
 8013c2c:	1c43      	adds	r3, r0, #1
 8013c2e:	d100      	bne.n	8013c32 <_printf_float+0x28e>
 8013c30:	e716      	b.n	8013a60 <_printf_float+0xbc>
 8013c32:	3501      	adds	r5, #1
 8013c34:	e7e4      	b.n	8013c00 <_printf_float+0x25c>
 8013c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	dc3b      	bgt.n	8013cb4 <_printf_float+0x310>
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	0038      	movs	r0, r7
 8013c40:	4a1b      	ldr	r2, [pc, #108]	; (8013cb0 <_printf_float+0x30c>)
 8013c42:	9908      	ldr	r1, [sp, #32]
 8013c44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013c46:	47b0      	blx	r6
 8013c48:	1c43      	adds	r3, r0, #1
 8013c4a:	d100      	bne.n	8013c4e <_printf_float+0x2aa>
 8013c4c:	e708      	b.n	8013a60 <_printf_float+0xbc>
 8013c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013c52:	4313      	orrs	r3, r2
 8013c54:	d102      	bne.n	8013c5c <_printf_float+0x2b8>
 8013c56:	6823      	ldr	r3, [r4, #0]
 8013c58:	07db      	lsls	r3, r3, #31
 8013c5a:	d5d5      	bpl.n	8013c08 <_printf_float+0x264>
 8013c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c5e:	0038      	movs	r0, r7
 8013c60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c62:	9908      	ldr	r1, [sp, #32]
 8013c64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013c66:	47b0      	blx	r6
 8013c68:	1c43      	adds	r3, r0, #1
 8013c6a:	d100      	bne.n	8013c6e <_printf_float+0x2ca>
 8013c6c:	e6f8      	b.n	8013a60 <_printf_float+0xbc>
 8013c6e:	2300      	movs	r3, #0
 8013c70:	930a      	str	r3, [sp, #40]	; 0x28
 8013c72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c76:	425b      	negs	r3, r3
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	dc01      	bgt.n	8013c80 <_printf_float+0x2dc>
 8013c7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c7e:	e792      	b.n	8013ba6 <_printf_float+0x202>
 8013c80:	0022      	movs	r2, r4
 8013c82:	2301      	movs	r3, #1
 8013c84:	0038      	movs	r0, r7
 8013c86:	9908      	ldr	r1, [sp, #32]
 8013c88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013c8a:	321a      	adds	r2, #26
 8013c8c:	47b0      	blx	r6
 8013c8e:	1c43      	adds	r3, r0, #1
 8013c90:	d100      	bne.n	8013c94 <_printf_float+0x2f0>
 8013c92:	e6e5      	b.n	8013a60 <_printf_float+0xbc>
 8013c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c96:	3301      	adds	r3, #1
 8013c98:	e7ea      	b.n	8013c70 <_printf_float+0x2cc>
 8013c9a:	46c0      	nop			; (mov r8, r8)
 8013c9c:	7fefffff 	.word	0x7fefffff
 8013ca0:	0801b820 	.word	0x0801b820
 8013ca4:	0801b824 	.word	0x0801b824
 8013ca8:	0801b828 	.word	0x0801b828
 8013cac:	0801b82c 	.word	0x0801b82c
 8013cb0:	0801b830 	.word	0x0801b830
 8013cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013cb8:	920a      	str	r2, [sp, #40]	; 0x28
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	dd00      	ble.n	8013cc0 <_printf_float+0x31c>
 8013cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8013cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	dc3d      	bgt.n	8013d42 <_printf_float+0x39e>
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	930e      	str	r3, [sp, #56]	; 0x38
 8013cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ccc:	43db      	mvns	r3, r3
 8013cce:	17db      	asrs	r3, r3, #31
 8013cd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8013cd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013cd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8013cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cda:	4013      	ands	r3, r2
 8013cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013cde:	1ad3      	subs	r3, r2, r3
 8013ce0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	dc36      	bgt.n	8013d54 <_printf_float+0x3b0>
 8013ce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ce8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013cea:	4293      	cmp	r3, r2
 8013cec:	db40      	blt.n	8013d70 <_printf_float+0x3cc>
 8013cee:	6823      	ldr	r3, [r4, #0]
 8013cf0:	07db      	lsls	r3, r3, #31
 8013cf2:	d43d      	bmi.n	8013d70 <_printf_float+0x3cc>
 8013cf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cf8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013cfa:	1ad3      	subs	r3, r2, r3
 8013cfc:	1a52      	subs	r2, r2, r1
 8013cfe:	920a      	str	r2, [sp, #40]	; 0x28
 8013d00:	429a      	cmp	r2, r3
 8013d02:	dd00      	ble.n	8013d06 <_printf_float+0x362>
 8013d04:	930a      	str	r3, [sp, #40]	; 0x28
 8013d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	dc3a      	bgt.n	8013d82 <_printf_float+0x3de>
 8013d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d0e:	2500      	movs	r5, #0
 8013d10:	43db      	mvns	r3, r3
 8013d12:	17db      	asrs	r3, r3, #31
 8013d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d1c:	1a9b      	subs	r3, r3, r2
 8013d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d20:	400a      	ands	r2, r1
 8013d22:	1a9b      	subs	r3, r3, r2
 8013d24:	42ab      	cmp	r3, r5
 8013d26:	dc00      	bgt.n	8013d2a <_printf_float+0x386>
 8013d28:	e76e      	b.n	8013c08 <_printf_float+0x264>
 8013d2a:	0022      	movs	r2, r4
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	0038      	movs	r0, r7
 8013d30:	9908      	ldr	r1, [sp, #32]
 8013d32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013d34:	321a      	adds	r2, #26
 8013d36:	47b0      	blx	r6
 8013d38:	1c43      	adds	r3, r0, #1
 8013d3a:	d100      	bne.n	8013d3e <_printf_float+0x39a>
 8013d3c:	e690      	b.n	8013a60 <_printf_float+0xbc>
 8013d3e:	3501      	adds	r5, #1
 8013d40:	e7e9      	b.n	8013d16 <_printf_float+0x372>
 8013d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d44:	002a      	movs	r2, r5
 8013d46:	0038      	movs	r0, r7
 8013d48:	9908      	ldr	r1, [sp, #32]
 8013d4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013d4c:	47b0      	blx	r6
 8013d4e:	1c43      	adds	r3, r0, #1
 8013d50:	d1b9      	bne.n	8013cc6 <_printf_float+0x322>
 8013d52:	e685      	b.n	8013a60 <_printf_float+0xbc>
 8013d54:	0022      	movs	r2, r4
 8013d56:	2301      	movs	r3, #1
 8013d58:	0038      	movs	r0, r7
 8013d5a:	9908      	ldr	r1, [sp, #32]
 8013d5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013d5e:	321a      	adds	r2, #26
 8013d60:	47b0      	blx	r6
 8013d62:	1c43      	adds	r3, r0, #1
 8013d64:	d100      	bne.n	8013d68 <_printf_float+0x3c4>
 8013d66:	e67b      	b.n	8013a60 <_printf_float+0xbc>
 8013d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8013d6e:	e7b0      	b.n	8013cd2 <_printf_float+0x32e>
 8013d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d72:	0038      	movs	r0, r7
 8013d74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d76:	9908      	ldr	r1, [sp, #32]
 8013d78:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013d7a:	47b0      	blx	r6
 8013d7c:	1c43      	adds	r3, r0, #1
 8013d7e:	d1b9      	bne.n	8013cf4 <_printf_float+0x350>
 8013d80:	e66e      	b.n	8013a60 <_printf_float+0xbc>
 8013d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d84:	0038      	movs	r0, r7
 8013d86:	18ea      	adds	r2, r5, r3
 8013d88:	9908      	ldr	r1, [sp, #32]
 8013d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013d8e:	47a8      	blx	r5
 8013d90:	1c43      	adds	r3, r0, #1
 8013d92:	d1bb      	bne.n	8013d0c <_printf_float+0x368>
 8013d94:	e664      	b.n	8013a60 <_printf_float+0xbc>
 8013d96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d98:	2b01      	cmp	r3, #1
 8013d9a:	dc02      	bgt.n	8013da2 <_printf_float+0x3fe>
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	421a      	tst	r2, r3
 8013da0:	d038      	beq.n	8013e14 <_printf_float+0x470>
 8013da2:	2301      	movs	r3, #1
 8013da4:	002a      	movs	r2, r5
 8013da6:	0038      	movs	r0, r7
 8013da8:	9908      	ldr	r1, [sp, #32]
 8013daa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013dac:	47b0      	blx	r6
 8013dae:	1c43      	adds	r3, r0, #1
 8013db0:	d100      	bne.n	8013db4 <_printf_float+0x410>
 8013db2:	e655      	b.n	8013a60 <_printf_float+0xbc>
 8013db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013db6:	0038      	movs	r0, r7
 8013db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013dba:	9908      	ldr	r1, [sp, #32]
 8013dbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013dbe:	47b0      	blx	r6
 8013dc0:	1c43      	adds	r3, r0, #1
 8013dc2:	d100      	bne.n	8013dc6 <_printf_float+0x422>
 8013dc4:	e64c      	b.n	8013a60 <_printf_float+0xbc>
 8013dc6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013dc8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013dca:	2200      	movs	r2, #0
 8013dcc:	2300      	movs	r3, #0
 8013dce:	f7ec fb45 	bl	800045c <__aeabi_dcmpeq>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	d11c      	bne.n	8013e10 <_printf_float+0x46c>
 8013dd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013dd8:	1c6a      	adds	r2, r5, #1
 8013dda:	3b01      	subs	r3, #1
 8013ddc:	0038      	movs	r0, r7
 8013dde:	9908      	ldr	r1, [sp, #32]
 8013de0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013de2:	47a8      	blx	r5
 8013de4:	1c43      	adds	r3, r0, #1
 8013de6:	d10f      	bne.n	8013e08 <_printf_float+0x464>
 8013de8:	e63a      	b.n	8013a60 <_printf_float+0xbc>
 8013dea:	0022      	movs	r2, r4
 8013dec:	2301      	movs	r3, #1
 8013dee:	0038      	movs	r0, r7
 8013df0:	9908      	ldr	r1, [sp, #32]
 8013df2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013df4:	321a      	adds	r2, #26
 8013df6:	47b0      	blx	r6
 8013df8:	1c43      	adds	r3, r0, #1
 8013dfa:	d100      	bne.n	8013dfe <_printf_float+0x45a>
 8013dfc:	e630      	b.n	8013a60 <_printf_float+0xbc>
 8013dfe:	3501      	adds	r5, #1
 8013e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e02:	3b01      	subs	r3, #1
 8013e04:	42ab      	cmp	r3, r5
 8013e06:	dcf0      	bgt.n	8013dea <_printf_float+0x446>
 8013e08:	0022      	movs	r2, r4
 8013e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e0c:	3250      	adds	r2, #80	; 0x50
 8013e0e:	e6cb      	b.n	8013ba8 <_printf_float+0x204>
 8013e10:	2500      	movs	r5, #0
 8013e12:	e7f5      	b.n	8013e00 <_printf_float+0x45c>
 8013e14:	002a      	movs	r2, r5
 8013e16:	e7e1      	b.n	8013ddc <_printf_float+0x438>
 8013e18:	0022      	movs	r2, r4
 8013e1a:	2301      	movs	r3, #1
 8013e1c:	0038      	movs	r0, r7
 8013e1e:	9908      	ldr	r1, [sp, #32]
 8013e20:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013e22:	3219      	adds	r2, #25
 8013e24:	47b0      	blx	r6
 8013e26:	1c43      	adds	r3, r0, #1
 8013e28:	d100      	bne.n	8013e2c <_printf_float+0x488>
 8013e2a:	e619      	b.n	8013a60 <_printf_float+0xbc>
 8013e2c:	3501      	adds	r5, #1
 8013e2e:	68e3      	ldr	r3, [r4, #12]
 8013e30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013e32:	1a9b      	subs	r3, r3, r2
 8013e34:	42ab      	cmp	r3, r5
 8013e36:	dcef      	bgt.n	8013e18 <_printf_float+0x474>
 8013e38:	e6ea      	b.n	8013c10 <_printf_float+0x26c>
 8013e3a:	2500      	movs	r5, #0
 8013e3c:	e7f7      	b.n	8013e2e <_printf_float+0x48a>
 8013e3e:	46c0      	nop			; (mov r8, r8)

08013e40 <_printf_common>:
 8013e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e42:	0015      	movs	r5, r2
 8013e44:	9301      	str	r3, [sp, #4]
 8013e46:	688a      	ldr	r2, [r1, #8]
 8013e48:	690b      	ldr	r3, [r1, #16]
 8013e4a:	000c      	movs	r4, r1
 8013e4c:	9000      	str	r0, [sp, #0]
 8013e4e:	4293      	cmp	r3, r2
 8013e50:	da00      	bge.n	8013e54 <_printf_common+0x14>
 8013e52:	0013      	movs	r3, r2
 8013e54:	0022      	movs	r2, r4
 8013e56:	602b      	str	r3, [r5, #0]
 8013e58:	3243      	adds	r2, #67	; 0x43
 8013e5a:	7812      	ldrb	r2, [r2, #0]
 8013e5c:	2a00      	cmp	r2, #0
 8013e5e:	d001      	beq.n	8013e64 <_printf_common+0x24>
 8013e60:	3301      	adds	r3, #1
 8013e62:	602b      	str	r3, [r5, #0]
 8013e64:	6823      	ldr	r3, [r4, #0]
 8013e66:	069b      	lsls	r3, r3, #26
 8013e68:	d502      	bpl.n	8013e70 <_printf_common+0x30>
 8013e6a:	682b      	ldr	r3, [r5, #0]
 8013e6c:	3302      	adds	r3, #2
 8013e6e:	602b      	str	r3, [r5, #0]
 8013e70:	6822      	ldr	r2, [r4, #0]
 8013e72:	2306      	movs	r3, #6
 8013e74:	0017      	movs	r7, r2
 8013e76:	401f      	ands	r7, r3
 8013e78:	421a      	tst	r2, r3
 8013e7a:	d027      	beq.n	8013ecc <_printf_common+0x8c>
 8013e7c:	0023      	movs	r3, r4
 8013e7e:	3343      	adds	r3, #67	; 0x43
 8013e80:	781b      	ldrb	r3, [r3, #0]
 8013e82:	1e5a      	subs	r2, r3, #1
 8013e84:	4193      	sbcs	r3, r2
 8013e86:	6822      	ldr	r2, [r4, #0]
 8013e88:	0692      	lsls	r2, r2, #26
 8013e8a:	d430      	bmi.n	8013eee <_printf_common+0xae>
 8013e8c:	0022      	movs	r2, r4
 8013e8e:	9901      	ldr	r1, [sp, #4]
 8013e90:	9800      	ldr	r0, [sp, #0]
 8013e92:	9e08      	ldr	r6, [sp, #32]
 8013e94:	3243      	adds	r2, #67	; 0x43
 8013e96:	47b0      	blx	r6
 8013e98:	1c43      	adds	r3, r0, #1
 8013e9a:	d025      	beq.n	8013ee8 <_printf_common+0xa8>
 8013e9c:	2306      	movs	r3, #6
 8013e9e:	6820      	ldr	r0, [r4, #0]
 8013ea0:	682a      	ldr	r2, [r5, #0]
 8013ea2:	68e1      	ldr	r1, [r4, #12]
 8013ea4:	2500      	movs	r5, #0
 8013ea6:	4003      	ands	r3, r0
 8013ea8:	2b04      	cmp	r3, #4
 8013eaa:	d103      	bne.n	8013eb4 <_printf_common+0x74>
 8013eac:	1a8d      	subs	r5, r1, r2
 8013eae:	43eb      	mvns	r3, r5
 8013eb0:	17db      	asrs	r3, r3, #31
 8013eb2:	401d      	ands	r5, r3
 8013eb4:	68a3      	ldr	r3, [r4, #8]
 8013eb6:	6922      	ldr	r2, [r4, #16]
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	dd01      	ble.n	8013ec0 <_printf_common+0x80>
 8013ebc:	1a9b      	subs	r3, r3, r2
 8013ebe:	18ed      	adds	r5, r5, r3
 8013ec0:	2700      	movs	r7, #0
 8013ec2:	42bd      	cmp	r5, r7
 8013ec4:	d120      	bne.n	8013f08 <_printf_common+0xc8>
 8013ec6:	2000      	movs	r0, #0
 8013ec8:	e010      	b.n	8013eec <_printf_common+0xac>
 8013eca:	3701      	adds	r7, #1
 8013ecc:	68e3      	ldr	r3, [r4, #12]
 8013ece:	682a      	ldr	r2, [r5, #0]
 8013ed0:	1a9b      	subs	r3, r3, r2
 8013ed2:	42bb      	cmp	r3, r7
 8013ed4:	ddd2      	ble.n	8013e7c <_printf_common+0x3c>
 8013ed6:	0022      	movs	r2, r4
 8013ed8:	2301      	movs	r3, #1
 8013eda:	9901      	ldr	r1, [sp, #4]
 8013edc:	9800      	ldr	r0, [sp, #0]
 8013ede:	9e08      	ldr	r6, [sp, #32]
 8013ee0:	3219      	adds	r2, #25
 8013ee2:	47b0      	blx	r6
 8013ee4:	1c43      	adds	r3, r0, #1
 8013ee6:	d1f0      	bne.n	8013eca <_printf_common+0x8a>
 8013ee8:	2001      	movs	r0, #1
 8013eea:	4240      	negs	r0, r0
 8013eec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013eee:	2030      	movs	r0, #48	; 0x30
 8013ef0:	18e1      	adds	r1, r4, r3
 8013ef2:	3143      	adds	r1, #67	; 0x43
 8013ef4:	7008      	strb	r0, [r1, #0]
 8013ef6:	0021      	movs	r1, r4
 8013ef8:	1c5a      	adds	r2, r3, #1
 8013efa:	3145      	adds	r1, #69	; 0x45
 8013efc:	7809      	ldrb	r1, [r1, #0]
 8013efe:	18a2      	adds	r2, r4, r2
 8013f00:	3243      	adds	r2, #67	; 0x43
 8013f02:	3302      	adds	r3, #2
 8013f04:	7011      	strb	r1, [r2, #0]
 8013f06:	e7c1      	b.n	8013e8c <_printf_common+0x4c>
 8013f08:	0022      	movs	r2, r4
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	9901      	ldr	r1, [sp, #4]
 8013f0e:	9800      	ldr	r0, [sp, #0]
 8013f10:	9e08      	ldr	r6, [sp, #32]
 8013f12:	321a      	adds	r2, #26
 8013f14:	47b0      	blx	r6
 8013f16:	1c43      	adds	r3, r0, #1
 8013f18:	d0e6      	beq.n	8013ee8 <_printf_common+0xa8>
 8013f1a:	3701      	adds	r7, #1
 8013f1c:	e7d1      	b.n	8013ec2 <_printf_common+0x82>
	...

08013f20 <_printf_i>:
 8013f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f22:	b08b      	sub	sp, #44	; 0x2c
 8013f24:	9206      	str	r2, [sp, #24]
 8013f26:	000a      	movs	r2, r1
 8013f28:	3243      	adds	r2, #67	; 0x43
 8013f2a:	9307      	str	r3, [sp, #28]
 8013f2c:	9005      	str	r0, [sp, #20]
 8013f2e:	9204      	str	r2, [sp, #16]
 8013f30:	7e0a      	ldrb	r2, [r1, #24]
 8013f32:	000c      	movs	r4, r1
 8013f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f36:	2a78      	cmp	r2, #120	; 0x78
 8013f38:	d806      	bhi.n	8013f48 <_printf_i+0x28>
 8013f3a:	2a62      	cmp	r2, #98	; 0x62
 8013f3c:	d808      	bhi.n	8013f50 <_printf_i+0x30>
 8013f3e:	2a00      	cmp	r2, #0
 8013f40:	d100      	bne.n	8013f44 <_printf_i+0x24>
 8013f42:	e0c0      	b.n	80140c6 <_printf_i+0x1a6>
 8013f44:	2a58      	cmp	r2, #88	; 0x58
 8013f46:	d052      	beq.n	8013fee <_printf_i+0xce>
 8013f48:	0026      	movs	r6, r4
 8013f4a:	3642      	adds	r6, #66	; 0x42
 8013f4c:	7032      	strb	r2, [r6, #0]
 8013f4e:	e022      	b.n	8013f96 <_printf_i+0x76>
 8013f50:	0010      	movs	r0, r2
 8013f52:	3863      	subs	r0, #99	; 0x63
 8013f54:	2815      	cmp	r0, #21
 8013f56:	d8f7      	bhi.n	8013f48 <_printf_i+0x28>
 8013f58:	f7ec f8f0 	bl	800013c <__gnu_thumb1_case_shi>
 8013f5c:	001f0016 	.word	0x001f0016
 8013f60:	fff6fff6 	.word	0xfff6fff6
 8013f64:	fff6fff6 	.word	0xfff6fff6
 8013f68:	fff6001f 	.word	0xfff6001f
 8013f6c:	fff6fff6 	.word	0xfff6fff6
 8013f70:	00a8fff6 	.word	0x00a8fff6
 8013f74:	009a0036 	.word	0x009a0036
 8013f78:	fff6fff6 	.word	0xfff6fff6
 8013f7c:	fff600b9 	.word	0xfff600b9
 8013f80:	fff60036 	.word	0xfff60036
 8013f84:	009efff6 	.word	0x009efff6
 8013f88:	0026      	movs	r6, r4
 8013f8a:	681a      	ldr	r2, [r3, #0]
 8013f8c:	3642      	adds	r6, #66	; 0x42
 8013f8e:	1d11      	adds	r1, r2, #4
 8013f90:	6019      	str	r1, [r3, #0]
 8013f92:	6813      	ldr	r3, [r2, #0]
 8013f94:	7033      	strb	r3, [r6, #0]
 8013f96:	2301      	movs	r3, #1
 8013f98:	e0a7      	b.n	80140ea <_printf_i+0x1ca>
 8013f9a:	6808      	ldr	r0, [r1, #0]
 8013f9c:	6819      	ldr	r1, [r3, #0]
 8013f9e:	1d0a      	adds	r2, r1, #4
 8013fa0:	0605      	lsls	r5, r0, #24
 8013fa2:	d50b      	bpl.n	8013fbc <_printf_i+0x9c>
 8013fa4:	680d      	ldr	r5, [r1, #0]
 8013fa6:	601a      	str	r2, [r3, #0]
 8013fa8:	2d00      	cmp	r5, #0
 8013faa:	da03      	bge.n	8013fb4 <_printf_i+0x94>
 8013fac:	232d      	movs	r3, #45	; 0x2d
 8013fae:	9a04      	ldr	r2, [sp, #16]
 8013fb0:	426d      	negs	r5, r5
 8013fb2:	7013      	strb	r3, [r2, #0]
 8013fb4:	4b61      	ldr	r3, [pc, #388]	; (801413c <_printf_i+0x21c>)
 8013fb6:	270a      	movs	r7, #10
 8013fb8:	9303      	str	r3, [sp, #12]
 8013fba:	e032      	b.n	8014022 <_printf_i+0x102>
 8013fbc:	680d      	ldr	r5, [r1, #0]
 8013fbe:	601a      	str	r2, [r3, #0]
 8013fc0:	0641      	lsls	r1, r0, #25
 8013fc2:	d5f1      	bpl.n	8013fa8 <_printf_i+0x88>
 8013fc4:	b22d      	sxth	r5, r5
 8013fc6:	e7ef      	b.n	8013fa8 <_printf_i+0x88>
 8013fc8:	680d      	ldr	r5, [r1, #0]
 8013fca:	6819      	ldr	r1, [r3, #0]
 8013fcc:	1d08      	adds	r0, r1, #4
 8013fce:	6018      	str	r0, [r3, #0]
 8013fd0:	062e      	lsls	r6, r5, #24
 8013fd2:	d501      	bpl.n	8013fd8 <_printf_i+0xb8>
 8013fd4:	680d      	ldr	r5, [r1, #0]
 8013fd6:	e003      	b.n	8013fe0 <_printf_i+0xc0>
 8013fd8:	066d      	lsls	r5, r5, #25
 8013fda:	d5fb      	bpl.n	8013fd4 <_printf_i+0xb4>
 8013fdc:	680d      	ldr	r5, [r1, #0]
 8013fde:	b2ad      	uxth	r5, r5
 8013fe0:	4b56      	ldr	r3, [pc, #344]	; (801413c <_printf_i+0x21c>)
 8013fe2:	270a      	movs	r7, #10
 8013fe4:	9303      	str	r3, [sp, #12]
 8013fe6:	2a6f      	cmp	r2, #111	; 0x6f
 8013fe8:	d117      	bne.n	801401a <_printf_i+0xfa>
 8013fea:	2708      	movs	r7, #8
 8013fec:	e015      	b.n	801401a <_printf_i+0xfa>
 8013fee:	3145      	adds	r1, #69	; 0x45
 8013ff0:	700a      	strb	r2, [r1, #0]
 8013ff2:	4a52      	ldr	r2, [pc, #328]	; (801413c <_printf_i+0x21c>)
 8013ff4:	9203      	str	r2, [sp, #12]
 8013ff6:	681a      	ldr	r2, [r3, #0]
 8013ff8:	6821      	ldr	r1, [r4, #0]
 8013ffa:	ca20      	ldmia	r2!, {r5}
 8013ffc:	601a      	str	r2, [r3, #0]
 8013ffe:	0608      	lsls	r0, r1, #24
 8014000:	d550      	bpl.n	80140a4 <_printf_i+0x184>
 8014002:	07cb      	lsls	r3, r1, #31
 8014004:	d502      	bpl.n	801400c <_printf_i+0xec>
 8014006:	2320      	movs	r3, #32
 8014008:	4319      	orrs	r1, r3
 801400a:	6021      	str	r1, [r4, #0]
 801400c:	2710      	movs	r7, #16
 801400e:	2d00      	cmp	r5, #0
 8014010:	d103      	bne.n	801401a <_printf_i+0xfa>
 8014012:	2320      	movs	r3, #32
 8014014:	6822      	ldr	r2, [r4, #0]
 8014016:	439a      	bics	r2, r3
 8014018:	6022      	str	r2, [r4, #0]
 801401a:	0023      	movs	r3, r4
 801401c:	2200      	movs	r2, #0
 801401e:	3343      	adds	r3, #67	; 0x43
 8014020:	701a      	strb	r2, [r3, #0]
 8014022:	6863      	ldr	r3, [r4, #4]
 8014024:	60a3      	str	r3, [r4, #8]
 8014026:	2b00      	cmp	r3, #0
 8014028:	db03      	blt.n	8014032 <_printf_i+0x112>
 801402a:	2204      	movs	r2, #4
 801402c:	6821      	ldr	r1, [r4, #0]
 801402e:	4391      	bics	r1, r2
 8014030:	6021      	str	r1, [r4, #0]
 8014032:	2d00      	cmp	r5, #0
 8014034:	d102      	bne.n	801403c <_printf_i+0x11c>
 8014036:	9e04      	ldr	r6, [sp, #16]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d00c      	beq.n	8014056 <_printf_i+0x136>
 801403c:	9e04      	ldr	r6, [sp, #16]
 801403e:	0028      	movs	r0, r5
 8014040:	0039      	movs	r1, r7
 8014042:	f7ec f90b 	bl	800025c <__aeabi_uidivmod>
 8014046:	9b03      	ldr	r3, [sp, #12]
 8014048:	3e01      	subs	r6, #1
 801404a:	5c5b      	ldrb	r3, [r3, r1]
 801404c:	7033      	strb	r3, [r6, #0]
 801404e:	002b      	movs	r3, r5
 8014050:	0005      	movs	r5, r0
 8014052:	429f      	cmp	r7, r3
 8014054:	d9f3      	bls.n	801403e <_printf_i+0x11e>
 8014056:	2f08      	cmp	r7, #8
 8014058:	d109      	bne.n	801406e <_printf_i+0x14e>
 801405a:	6823      	ldr	r3, [r4, #0]
 801405c:	07db      	lsls	r3, r3, #31
 801405e:	d506      	bpl.n	801406e <_printf_i+0x14e>
 8014060:	6863      	ldr	r3, [r4, #4]
 8014062:	6922      	ldr	r2, [r4, #16]
 8014064:	4293      	cmp	r3, r2
 8014066:	dc02      	bgt.n	801406e <_printf_i+0x14e>
 8014068:	2330      	movs	r3, #48	; 0x30
 801406a:	3e01      	subs	r6, #1
 801406c:	7033      	strb	r3, [r6, #0]
 801406e:	9b04      	ldr	r3, [sp, #16]
 8014070:	1b9b      	subs	r3, r3, r6
 8014072:	6123      	str	r3, [r4, #16]
 8014074:	9b07      	ldr	r3, [sp, #28]
 8014076:	0021      	movs	r1, r4
 8014078:	9300      	str	r3, [sp, #0]
 801407a:	9805      	ldr	r0, [sp, #20]
 801407c:	9b06      	ldr	r3, [sp, #24]
 801407e:	aa09      	add	r2, sp, #36	; 0x24
 8014080:	f7ff fede 	bl	8013e40 <_printf_common>
 8014084:	1c43      	adds	r3, r0, #1
 8014086:	d135      	bne.n	80140f4 <_printf_i+0x1d4>
 8014088:	2001      	movs	r0, #1
 801408a:	4240      	negs	r0, r0
 801408c:	b00b      	add	sp, #44	; 0x2c
 801408e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014090:	2220      	movs	r2, #32
 8014092:	6809      	ldr	r1, [r1, #0]
 8014094:	430a      	orrs	r2, r1
 8014096:	6022      	str	r2, [r4, #0]
 8014098:	0022      	movs	r2, r4
 801409a:	2178      	movs	r1, #120	; 0x78
 801409c:	3245      	adds	r2, #69	; 0x45
 801409e:	7011      	strb	r1, [r2, #0]
 80140a0:	4a27      	ldr	r2, [pc, #156]	; (8014140 <_printf_i+0x220>)
 80140a2:	e7a7      	b.n	8013ff4 <_printf_i+0xd4>
 80140a4:	0648      	lsls	r0, r1, #25
 80140a6:	d5ac      	bpl.n	8014002 <_printf_i+0xe2>
 80140a8:	b2ad      	uxth	r5, r5
 80140aa:	e7aa      	b.n	8014002 <_printf_i+0xe2>
 80140ac:	681a      	ldr	r2, [r3, #0]
 80140ae:	680d      	ldr	r5, [r1, #0]
 80140b0:	1d10      	adds	r0, r2, #4
 80140b2:	6949      	ldr	r1, [r1, #20]
 80140b4:	6018      	str	r0, [r3, #0]
 80140b6:	6813      	ldr	r3, [r2, #0]
 80140b8:	062e      	lsls	r6, r5, #24
 80140ba:	d501      	bpl.n	80140c0 <_printf_i+0x1a0>
 80140bc:	6019      	str	r1, [r3, #0]
 80140be:	e002      	b.n	80140c6 <_printf_i+0x1a6>
 80140c0:	066d      	lsls	r5, r5, #25
 80140c2:	d5fb      	bpl.n	80140bc <_printf_i+0x19c>
 80140c4:	8019      	strh	r1, [r3, #0]
 80140c6:	2300      	movs	r3, #0
 80140c8:	9e04      	ldr	r6, [sp, #16]
 80140ca:	6123      	str	r3, [r4, #16]
 80140cc:	e7d2      	b.n	8014074 <_printf_i+0x154>
 80140ce:	681a      	ldr	r2, [r3, #0]
 80140d0:	1d11      	adds	r1, r2, #4
 80140d2:	6019      	str	r1, [r3, #0]
 80140d4:	6816      	ldr	r6, [r2, #0]
 80140d6:	2100      	movs	r1, #0
 80140d8:	0030      	movs	r0, r6
 80140da:	6862      	ldr	r2, [r4, #4]
 80140dc:	f002 fcba 	bl	8016a54 <memchr>
 80140e0:	2800      	cmp	r0, #0
 80140e2:	d001      	beq.n	80140e8 <_printf_i+0x1c8>
 80140e4:	1b80      	subs	r0, r0, r6
 80140e6:	6060      	str	r0, [r4, #4]
 80140e8:	6863      	ldr	r3, [r4, #4]
 80140ea:	6123      	str	r3, [r4, #16]
 80140ec:	2300      	movs	r3, #0
 80140ee:	9a04      	ldr	r2, [sp, #16]
 80140f0:	7013      	strb	r3, [r2, #0]
 80140f2:	e7bf      	b.n	8014074 <_printf_i+0x154>
 80140f4:	6923      	ldr	r3, [r4, #16]
 80140f6:	0032      	movs	r2, r6
 80140f8:	9906      	ldr	r1, [sp, #24]
 80140fa:	9805      	ldr	r0, [sp, #20]
 80140fc:	9d07      	ldr	r5, [sp, #28]
 80140fe:	47a8      	blx	r5
 8014100:	1c43      	adds	r3, r0, #1
 8014102:	d0c1      	beq.n	8014088 <_printf_i+0x168>
 8014104:	6823      	ldr	r3, [r4, #0]
 8014106:	079b      	lsls	r3, r3, #30
 8014108:	d415      	bmi.n	8014136 <_printf_i+0x216>
 801410a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801410c:	68e0      	ldr	r0, [r4, #12]
 801410e:	4298      	cmp	r0, r3
 8014110:	dabc      	bge.n	801408c <_printf_i+0x16c>
 8014112:	0018      	movs	r0, r3
 8014114:	e7ba      	b.n	801408c <_printf_i+0x16c>
 8014116:	0022      	movs	r2, r4
 8014118:	2301      	movs	r3, #1
 801411a:	9906      	ldr	r1, [sp, #24]
 801411c:	9805      	ldr	r0, [sp, #20]
 801411e:	9e07      	ldr	r6, [sp, #28]
 8014120:	3219      	adds	r2, #25
 8014122:	47b0      	blx	r6
 8014124:	1c43      	adds	r3, r0, #1
 8014126:	d0af      	beq.n	8014088 <_printf_i+0x168>
 8014128:	3501      	adds	r5, #1
 801412a:	68e3      	ldr	r3, [r4, #12]
 801412c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801412e:	1a9b      	subs	r3, r3, r2
 8014130:	42ab      	cmp	r3, r5
 8014132:	dcf0      	bgt.n	8014116 <_printf_i+0x1f6>
 8014134:	e7e9      	b.n	801410a <_printf_i+0x1ea>
 8014136:	2500      	movs	r5, #0
 8014138:	e7f7      	b.n	801412a <_printf_i+0x20a>
 801413a:	46c0      	nop			; (mov r8, r8)
 801413c:	0801b832 	.word	0x0801b832
 8014140:	0801b843 	.word	0x0801b843

08014144 <_scanf_float>:
 8014144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014146:	b08b      	sub	sp, #44	; 0x2c
 8014148:	0015      	movs	r5, r2
 801414a:	9001      	str	r0, [sp, #4]
 801414c:	22ae      	movs	r2, #174	; 0xae
 801414e:	2000      	movs	r0, #0
 8014150:	9306      	str	r3, [sp, #24]
 8014152:	688b      	ldr	r3, [r1, #8]
 8014154:	000e      	movs	r6, r1
 8014156:	1e59      	subs	r1, r3, #1
 8014158:	0052      	lsls	r2, r2, #1
 801415a:	9005      	str	r0, [sp, #20]
 801415c:	4291      	cmp	r1, r2
 801415e:	d905      	bls.n	801416c <_scanf_float+0x28>
 8014160:	3b5e      	subs	r3, #94	; 0x5e
 8014162:	3bff      	subs	r3, #255	; 0xff
 8014164:	9305      	str	r3, [sp, #20]
 8014166:	235e      	movs	r3, #94	; 0x5e
 8014168:	33ff      	adds	r3, #255	; 0xff
 801416a:	60b3      	str	r3, [r6, #8]
 801416c:	23f0      	movs	r3, #240	; 0xf0
 801416e:	6832      	ldr	r2, [r6, #0]
 8014170:	00db      	lsls	r3, r3, #3
 8014172:	4313      	orrs	r3, r2
 8014174:	6033      	str	r3, [r6, #0]
 8014176:	0033      	movs	r3, r6
 8014178:	2400      	movs	r4, #0
 801417a:	331c      	adds	r3, #28
 801417c:	001f      	movs	r7, r3
 801417e:	9303      	str	r3, [sp, #12]
 8014180:	9402      	str	r4, [sp, #8]
 8014182:	9408      	str	r4, [sp, #32]
 8014184:	9407      	str	r4, [sp, #28]
 8014186:	9400      	str	r4, [sp, #0]
 8014188:	9404      	str	r4, [sp, #16]
 801418a:	68b2      	ldr	r2, [r6, #8]
 801418c:	2a00      	cmp	r2, #0
 801418e:	d00a      	beq.n	80141a6 <_scanf_float+0x62>
 8014190:	682b      	ldr	r3, [r5, #0]
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	2b4e      	cmp	r3, #78	; 0x4e
 8014196:	d844      	bhi.n	8014222 <_scanf_float+0xde>
 8014198:	0018      	movs	r0, r3
 801419a:	2b40      	cmp	r3, #64	; 0x40
 801419c:	d82c      	bhi.n	80141f8 <_scanf_float+0xb4>
 801419e:	382b      	subs	r0, #43	; 0x2b
 80141a0:	b2c1      	uxtb	r1, r0
 80141a2:	290e      	cmp	r1, #14
 80141a4:	d92a      	bls.n	80141fc <_scanf_float+0xb8>
 80141a6:	9b00      	ldr	r3, [sp, #0]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d003      	beq.n	80141b4 <_scanf_float+0x70>
 80141ac:	6832      	ldr	r2, [r6, #0]
 80141ae:	4ba4      	ldr	r3, [pc, #656]	; (8014440 <_scanf_float+0x2fc>)
 80141b0:	4013      	ands	r3, r2
 80141b2:	6033      	str	r3, [r6, #0]
 80141b4:	9b02      	ldr	r3, [sp, #8]
 80141b6:	3b01      	subs	r3, #1
 80141b8:	2b01      	cmp	r3, #1
 80141ba:	d900      	bls.n	80141be <_scanf_float+0x7a>
 80141bc:	e0f9      	b.n	80143b2 <_scanf_float+0x26e>
 80141be:	24be      	movs	r4, #190	; 0xbe
 80141c0:	0064      	lsls	r4, r4, #1
 80141c2:	9b03      	ldr	r3, [sp, #12]
 80141c4:	429f      	cmp	r7, r3
 80141c6:	d900      	bls.n	80141ca <_scanf_float+0x86>
 80141c8:	e0e9      	b.n	801439e <_scanf_float+0x25a>
 80141ca:	2301      	movs	r3, #1
 80141cc:	9302      	str	r3, [sp, #8]
 80141ce:	e185      	b.n	80144dc <_scanf_float+0x398>
 80141d0:	0018      	movs	r0, r3
 80141d2:	3861      	subs	r0, #97	; 0x61
 80141d4:	280d      	cmp	r0, #13
 80141d6:	d8e6      	bhi.n	80141a6 <_scanf_float+0x62>
 80141d8:	f7eb ffb0 	bl	800013c <__gnu_thumb1_case_shi>
 80141dc:	ffe50083 	.word	0xffe50083
 80141e0:	ffe5ffe5 	.word	0xffe5ffe5
 80141e4:	00a200b6 	.word	0x00a200b6
 80141e8:	ffe5ffe5 	.word	0xffe5ffe5
 80141ec:	ffe50089 	.word	0xffe50089
 80141f0:	ffe5ffe5 	.word	0xffe5ffe5
 80141f4:	0065ffe5 	.word	0x0065ffe5
 80141f8:	3841      	subs	r0, #65	; 0x41
 80141fa:	e7eb      	b.n	80141d4 <_scanf_float+0x90>
 80141fc:	280e      	cmp	r0, #14
 80141fe:	d8d2      	bhi.n	80141a6 <_scanf_float+0x62>
 8014200:	f7eb ff9c 	bl	800013c <__gnu_thumb1_case_shi>
 8014204:	ffd1004b 	.word	0xffd1004b
 8014208:	0098004b 	.word	0x0098004b
 801420c:	0020ffd1 	.word	0x0020ffd1
 8014210:	00400040 	.word	0x00400040
 8014214:	00400040 	.word	0x00400040
 8014218:	00400040 	.word	0x00400040
 801421c:	00400040 	.word	0x00400040
 8014220:	0040      	.short	0x0040
 8014222:	2b6e      	cmp	r3, #110	; 0x6e
 8014224:	d809      	bhi.n	801423a <_scanf_float+0xf6>
 8014226:	2b60      	cmp	r3, #96	; 0x60
 8014228:	d8d2      	bhi.n	80141d0 <_scanf_float+0x8c>
 801422a:	2b54      	cmp	r3, #84	; 0x54
 801422c:	d07d      	beq.n	801432a <_scanf_float+0x1e6>
 801422e:	2b59      	cmp	r3, #89	; 0x59
 8014230:	d1b9      	bne.n	80141a6 <_scanf_float+0x62>
 8014232:	2c07      	cmp	r4, #7
 8014234:	d1b7      	bne.n	80141a6 <_scanf_float+0x62>
 8014236:	2408      	movs	r4, #8
 8014238:	e02c      	b.n	8014294 <_scanf_float+0x150>
 801423a:	2b74      	cmp	r3, #116	; 0x74
 801423c:	d075      	beq.n	801432a <_scanf_float+0x1e6>
 801423e:	2b79      	cmp	r3, #121	; 0x79
 8014240:	d0f7      	beq.n	8014232 <_scanf_float+0xee>
 8014242:	e7b0      	b.n	80141a6 <_scanf_float+0x62>
 8014244:	6831      	ldr	r1, [r6, #0]
 8014246:	05c8      	lsls	r0, r1, #23
 8014248:	d51c      	bpl.n	8014284 <_scanf_float+0x140>
 801424a:	2380      	movs	r3, #128	; 0x80
 801424c:	4399      	bics	r1, r3
 801424e:	9b00      	ldr	r3, [sp, #0]
 8014250:	6031      	str	r1, [r6, #0]
 8014252:	3301      	adds	r3, #1
 8014254:	9300      	str	r3, [sp, #0]
 8014256:	9b05      	ldr	r3, [sp, #20]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d003      	beq.n	8014264 <_scanf_float+0x120>
 801425c:	3b01      	subs	r3, #1
 801425e:	3201      	adds	r2, #1
 8014260:	9305      	str	r3, [sp, #20]
 8014262:	60b2      	str	r2, [r6, #8]
 8014264:	68b3      	ldr	r3, [r6, #8]
 8014266:	3b01      	subs	r3, #1
 8014268:	60b3      	str	r3, [r6, #8]
 801426a:	6933      	ldr	r3, [r6, #16]
 801426c:	3301      	adds	r3, #1
 801426e:	6133      	str	r3, [r6, #16]
 8014270:	686b      	ldr	r3, [r5, #4]
 8014272:	3b01      	subs	r3, #1
 8014274:	606b      	str	r3, [r5, #4]
 8014276:	2b00      	cmp	r3, #0
 8014278:	dc00      	bgt.n	801427c <_scanf_float+0x138>
 801427a:	e086      	b.n	801438a <_scanf_float+0x246>
 801427c:	682b      	ldr	r3, [r5, #0]
 801427e:	3301      	adds	r3, #1
 8014280:	602b      	str	r3, [r5, #0]
 8014282:	e782      	b.n	801418a <_scanf_float+0x46>
 8014284:	9a02      	ldr	r2, [sp, #8]
 8014286:	1912      	adds	r2, r2, r4
 8014288:	2a00      	cmp	r2, #0
 801428a:	d18c      	bne.n	80141a6 <_scanf_float+0x62>
 801428c:	4a6d      	ldr	r2, [pc, #436]	; (8014444 <_scanf_float+0x300>)
 801428e:	6831      	ldr	r1, [r6, #0]
 8014290:	400a      	ands	r2, r1
 8014292:	6032      	str	r2, [r6, #0]
 8014294:	703b      	strb	r3, [r7, #0]
 8014296:	3701      	adds	r7, #1
 8014298:	e7e4      	b.n	8014264 <_scanf_float+0x120>
 801429a:	2180      	movs	r1, #128	; 0x80
 801429c:	6832      	ldr	r2, [r6, #0]
 801429e:	420a      	tst	r2, r1
 80142a0:	d081      	beq.n	80141a6 <_scanf_float+0x62>
 80142a2:	438a      	bics	r2, r1
 80142a4:	e7f5      	b.n	8014292 <_scanf_float+0x14e>
 80142a6:	9a02      	ldr	r2, [sp, #8]
 80142a8:	2a00      	cmp	r2, #0
 80142aa:	d10f      	bne.n	80142cc <_scanf_float+0x188>
 80142ac:	9a00      	ldr	r2, [sp, #0]
 80142ae:	2a00      	cmp	r2, #0
 80142b0:	d10f      	bne.n	80142d2 <_scanf_float+0x18e>
 80142b2:	6832      	ldr	r2, [r6, #0]
 80142b4:	21e0      	movs	r1, #224	; 0xe0
 80142b6:	0010      	movs	r0, r2
 80142b8:	00c9      	lsls	r1, r1, #3
 80142ba:	4008      	ands	r0, r1
 80142bc:	4288      	cmp	r0, r1
 80142be:	d108      	bne.n	80142d2 <_scanf_float+0x18e>
 80142c0:	4961      	ldr	r1, [pc, #388]	; (8014448 <_scanf_float+0x304>)
 80142c2:	400a      	ands	r2, r1
 80142c4:	6032      	str	r2, [r6, #0]
 80142c6:	2201      	movs	r2, #1
 80142c8:	9202      	str	r2, [sp, #8]
 80142ca:	e7e3      	b.n	8014294 <_scanf_float+0x150>
 80142cc:	9a02      	ldr	r2, [sp, #8]
 80142ce:	2a02      	cmp	r2, #2
 80142d0:	d059      	beq.n	8014386 <_scanf_float+0x242>
 80142d2:	2c01      	cmp	r4, #1
 80142d4:	d002      	beq.n	80142dc <_scanf_float+0x198>
 80142d6:	2c04      	cmp	r4, #4
 80142d8:	d000      	beq.n	80142dc <_scanf_float+0x198>
 80142da:	e764      	b.n	80141a6 <_scanf_float+0x62>
 80142dc:	3401      	adds	r4, #1
 80142de:	b2e4      	uxtb	r4, r4
 80142e0:	e7d8      	b.n	8014294 <_scanf_float+0x150>
 80142e2:	9a02      	ldr	r2, [sp, #8]
 80142e4:	2a01      	cmp	r2, #1
 80142e6:	d000      	beq.n	80142ea <_scanf_float+0x1a6>
 80142e8:	e75d      	b.n	80141a6 <_scanf_float+0x62>
 80142ea:	2202      	movs	r2, #2
 80142ec:	e7ec      	b.n	80142c8 <_scanf_float+0x184>
 80142ee:	2c00      	cmp	r4, #0
 80142f0:	d110      	bne.n	8014314 <_scanf_float+0x1d0>
 80142f2:	9a00      	ldr	r2, [sp, #0]
 80142f4:	2a00      	cmp	r2, #0
 80142f6:	d000      	beq.n	80142fa <_scanf_float+0x1b6>
 80142f8:	e758      	b.n	80141ac <_scanf_float+0x68>
 80142fa:	6832      	ldr	r2, [r6, #0]
 80142fc:	21e0      	movs	r1, #224	; 0xe0
 80142fe:	0010      	movs	r0, r2
 8014300:	00c9      	lsls	r1, r1, #3
 8014302:	4008      	ands	r0, r1
 8014304:	4288      	cmp	r0, r1
 8014306:	d000      	beq.n	801430a <_scanf_float+0x1c6>
 8014308:	e754      	b.n	80141b4 <_scanf_float+0x70>
 801430a:	494f      	ldr	r1, [pc, #316]	; (8014448 <_scanf_float+0x304>)
 801430c:	3401      	adds	r4, #1
 801430e:	400a      	ands	r2, r1
 8014310:	6032      	str	r2, [r6, #0]
 8014312:	e7bf      	b.n	8014294 <_scanf_float+0x150>
 8014314:	21fd      	movs	r1, #253	; 0xfd
 8014316:	1ee2      	subs	r2, r4, #3
 8014318:	420a      	tst	r2, r1
 801431a:	d000      	beq.n	801431e <_scanf_float+0x1da>
 801431c:	e743      	b.n	80141a6 <_scanf_float+0x62>
 801431e:	e7dd      	b.n	80142dc <_scanf_float+0x198>
 8014320:	2c02      	cmp	r4, #2
 8014322:	d000      	beq.n	8014326 <_scanf_float+0x1e2>
 8014324:	e73f      	b.n	80141a6 <_scanf_float+0x62>
 8014326:	2403      	movs	r4, #3
 8014328:	e7b4      	b.n	8014294 <_scanf_float+0x150>
 801432a:	2c06      	cmp	r4, #6
 801432c:	d000      	beq.n	8014330 <_scanf_float+0x1ec>
 801432e:	e73a      	b.n	80141a6 <_scanf_float+0x62>
 8014330:	2407      	movs	r4, #7
 8014332:	e7af      	b.n	8014294 <_scanf_float+0x150>
 8014334:	6832      	ldr	r2, [r6, #0]
 8014336:	0591      	lsls	r1, r2, #22
 8014338:	d400      	bmi.n	801433c <_scanf_float+0x1f8>
 801433a:	e734      	b.n	80141a6 <_scanf_float+0x62>
 801433c:	4943      	ldr	r1, [pc, #268]	; (801444c <_scanf_float+0x308>)
 801433e:	400a      	ands	r2, r1
 8014340:	6032      	str	r2, [r6, #0]
 8014342:	9a00      	ldr	r2, [sp, #0]
 8014344:	9204      	str	r2, [sp, #16]
 8014346:	e7a5      	b.n	8014294 <_scanf_float+0x150>
 8014348:	21a0      	movs	r1, #160	; 0xa0
 801434a:	2080      	movs	r0, #128	; 0x80
 801434c:	6832      	ldr	r2, [r6, #0]
 801434e:	00c9      	lsls	r1, r1, #3
 8014350:	4011      	ands	r1, r2
 8014352:	00c0      	lsls	r0, r0, #3
 8014354:	4281      	cmp	r1, r0
 8014356:	d006      	beq.n	8014366 <_scanf_float+0x222>
 8014358:	4202      	tst	r2, r0
 801435a:	d100      	bne.n	801435e <_scanf_float+0x21a>
 801435c:	e723      	b.n	80141a6 <_scanf_float+0x62>
 801435e:	9900      	ldr	r1, [sp, #0]
 8014360:	2900      	cmp	r1, #0
 8014362:	d100      	bne.n	8014366 <_scanf_float+0x222>
 8014364:	e726      	b.n	80141b4 <_scanf_float+0x70>
 8014366:	0591      	lsls	r1, r2, #22
 8014368:	d404      	bmi.n	8014374 <_scanf_float+0x230>
 801436a:	9900      	ldr	r1, [sp, #0]
 801436c:	9804      	ldr	r0, [sp, #16]
 801436e:	9708      	str	r7, [sp, #32]
 8014370:	1a09      	subs	r1, r1, r0
 8014372:	9107      	str	r1, [sp, #28]
 8014374:	4934      	ldr	r1, [pc, #208]	; (8014448 <_scanf_float+0x304>)
 8014376:	400a      	ands	r2, r1
 8014378:	21c0      	movs	r1, #192	; 0xc0
 801437a:	0049      	lsls	r1, r1, #1
 801437c:	430a      	orrs	r2, r1
 801437e:	6032      	str	r2, [r6, #0]
 8014380:	2200      	movs	r2, #0
 8014382:	9200      	str	r2, [sp, #0]
 8014384:	e786      	b.n	8014294 <_scanf_float+0x150>
 8014386:	2203      	movs	r2, #3
 8014388:	e79e      	b.n	80142c8 <_scanf_float+0x184>
 801438a:	23c0      	movs	r3, #192	; 0xc0
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	0029      	movs	r1, r5
 8014390:	58f3      	ldr	r3, [r6, r3]
 8014392:	9801      	ldr	r0, [sp, #4]
 8014394:	4798      	blx	r3
 8014396:	2800      	cmp	r0, #0
 8014398:	d100      	bne.n	801439c <_scanf_float+0x258>
 801439a:	e6f6      	b.n	801418a <_scanf_float+0x46>
 801439c:	e703      	b.n	80141a6 <_scanf_float+0x62>
 801439e:	3f01      	subs	r7, #1
 80143a0:	5933      	ldr	r3, [r6, r4]
 80143a2:	002a      	movs	r2, r5
 80143a4:	7839      	ldrb	r1, [r7, #0]
 80143a6:	9801      	ldr	r0, [sp, #4]
 80143a8:	4798      	blx	r3
 80143aa:	6933      	ldr	r3, [r6, #16]
 80143ac:	3b01      	subs	r3, #1
 80143ae:	6133      	str	r3, [r6, #16]
 80143b0:	e707      	b.n	80141c2 <_scanf_float+0x7e>
 80143b2:	1e63      	subs	r3, r4, #1
 80143b4:	2b06      	cmp	r3, #6
 80143b6:	d80e      	bhi.n	80143d6 <_scanf_float+0x292>
 80143b8:	9702      	str	r7, [sp, #8]
 80143ba:	2c02      	cmp	r4, #2
 80143bc:	d920      	bls.n	8014400 <_scanf_float+0x2bc>
 80143be:	1be3      	subs	r3, r4, r7
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	9305      	str	r3, [sp, #20]
 80143c4:	9b02      	ldr	r3, [sp, #8]
 80143c6:	9a05      	ldr	r2, [sp, #20]
 80143c8:	189b      	adds	r3, r3, r2
 80143ca:	b2db      	uxtb	r3, r3
 80143cc:	2b03      	cmp	r3, #3
 80143ce:	d827      	bhi.n	8014420 <_scanf_float+0x2dc>
 80143d0:	3c03      	subs	r4, #3
 80143d2:	b2e4      	uxtb	r4, r4
 80143d4:	1b3f      	subs	r7, r7, r4
 80143d6:	6833      	ldr	r3, [r6, #0]
 80143d8:	05da      	lsls	r2, r3, #23
 80143da:	d554      	bpl.n	8014486 <_scanf_float+0x342>
 80143dc:	055b      	lsls	r3, r3, #21
 80143de:	d537      	bpl.n	8014450 <_scanf_float+0x30c>
 80143e0:	24be      	movs	r4, #190	; 0xbe
 80143e2:	0064      	lsls	r4, r4, #1
 80143e4:	9b03      	ldr	r3, [sp, #12]
 80143e6:	429f      	cmp	r7, r3
 80143e8:	d800      	bhi.n	80143ec <_scanf_float+0x2a8>
 80143ea:	e6ee      	b.n	80141ca <_scanf_float+0x86>
 80143ec:	3f01      	subs	r7, #1
 80143ee:	5933      	ldr	r3, [r6, r4]
 80143f0:	002a      	movs	r2, r5
 80143f2:	7839      	ldrb	r1, [r7, #0]
 80143f4:	9801      	ldr	r0, [sp, #4]
 80143f6:	4798      	blx	r3
 80143f8:	6933      	ldr	r3, [r6, #16]
 80143fa:	3b01      	subs	r3, #1
 80143fc:	6133      	str	r3, [r6, #16]
 80143fe:	e7f1      	b.n	80143e4 <_scanf_float+0x2a0>
 8014400:	24be      	movs	r4, #190	; 0xbe
 8014402:	0064      	lsls	r4, r4, #1
 8014404:	9b03      	ldr	r3, [sp, #12]
 8014406:	429f      	cmp	r7, r3
 8014408:	d800      	bhi.n	801440c <_scanf_float+0x2c8>
 801440a:	e6de      	b.n	80141ca <_scanf_float+0x86>
 801440c:	3f01      	subs	r7, #1
 801440e:	5933      	ldr	r3, [r6, r4]
 8014410:	002a      	movs	r2, r5
 8014412:	7839      	ldrb	r1, [r7, #0]
 8014414:	9801      	ldr	r0, [sp, #4]
 8014416:	4798      	blx	r3
 8014418:	6933      	ldr	r3, [r6, #16]
 801441a:	3b01      	subs	r3, #1
 801441c:	6133      	str	r3, [r6, #16]
 801441e:	e7f1      	b.n	8014404 <_scanf_float+0x2c0>
 8014420:	9b02      	ldr	r3, [sp, #8]
 8014422:	002a      	movs	r2, r5
 8014424:	3b01      	subs	r3, #1
 8014426:	7819      	ldrb	r1, [r3, #0]
 8014428:	9302      	str	r3, [sp, #8]
 801442a:	23be      	movs	r3, #190	; 0xbe
 801442c:	005b      	lsls	r3, r3, #1
 801442e:	58f3      	ldr	r3, [r6, r3]
 8014430:	9801      	ldr	r0, [sp, #4]
 8014432:	9309      	str	r3, [sp, #36]	; 0x24
 8014434:	4798      	blx	r3
 8014436:	6933      	ldr	r3, [r6, #16]
 8014438:	3b01      	subs	r3, #1
 801443a:	6133      	str	r3, [r6, #16]
 801443c:	e7c2      	b.n	80143c4 <_scanf_float+0x280>
 801443e:	46c0      	nop			; (mov r8, r8)
 8014440:	fffffeff 	.word	0xfffffeff
 8014444:	fffffe7f 	.word	0xfffffe7f
 8014448:	fffff87f 	.word	0xfffff87f
 801444c:	fffffd7f 	.word	0xfffffd7f
 8014450:	6933      	ldr	r3, [r6, #16]
 8014452:	1e7c      	subs	r4, r7, #1
 8014454:	7821      	ldrb	r1, [r4, #0]
 8014456:	3b01      	subs	r3, #1
 8014458:	6133      	str	r3, [r6, #16]
 801445a:	2965      	cmp	r1, #101	; 0x65
 801445c:	d00c      	beq.n	8014478 <_scanf_float+0x334>
 801445e:	2945      	cmp	r1, #69	; 0x45
 8014460:	d00a      	beq.n	8014478 <_scanf_float+0x334>
 8014462:	23be      	movs	r3, #190	; 0xbe
 8014464:	005b      	lsls	r3, r3, #1
 8014466:	58f3      	ldr	r3, [r6, r3]
 8014468:	002a      	movs	r2, r5
 801446a:	9801      	ldr	r0, [sp, #4]
 801446c:	4798      	blx	r3
 801446e:	6933      	ldr	r3, [r6, #16]
 8014470:	1ebc      	subs	r4, r7, #2
 8014472:	3b01      	subs	r3, #1
 8014474:	7821      	ldrb	r1, [r4, #0]
 8014476:	6133      	str	r3, [r6, #16]
 8014478:	23be      	movs	r3, #190	; 0xbe
 801447a:	005b      	lsls	r3, r3, #1
 801447c:	002a      	movs	r2, r5
 801447e:	58f3      	ldr	r3, [r6, r3]
 8014480:	9801      	ldr	r0, [sp, #4]
 8014482:	4798      	blx	r3
 8014484:	0027      	movs	r7, r4
 8014486:	6832      	ldr	r2, [r6, #0]
 8014488:	2310      	movs	r3, #16
 801448a:	0011      	movs	r1, r2
 801448c:	4019      	ands	r1, r3
 801448e:	9102      	str	r1, [sp, #8]
 8014490:	421a      	tst	r2, r3
 8014492:	d158      	bne.n	8014546 <_scanf_float+0x402>
 8014494:	23c0      	movs	r3, #192	; 0xc0
 8014496:	7039      	strb	r1, [r7, #0]
 8014498:	6832      	ldr	r2, [r6, #0]
 801449a:	00db      	lsls	r3, r3, #3
 801449c:	4013      	ands	r3, r2
 801449e:	2280      	movs	r2, #128	; 0x80
 80144a0:	00d2      	lsls	r2, r2, #3
 80144a2:	4293      	cmp	r3, r2
 80144a4:	d11d      	bne.n	80144e2 <_scanf_float+0x39e>
 80144a6:	9b04      	ldr	r3, [sp, #16]
 80144a8:	9a00      	ldr	r2, [sp, #0]
 80144aa:	9900      	ldr	r1, [sp, #0]
 80144ac:	1a9a      	subs	r2, r3, r2
 80144ae:	428b      	cmp	r3, r1
 80144b0:	d124      	bne.n	80144fc <_scanf_float+0x3b8>
 80144b2:	2200      	movs	r2, #0
 80144b4:	9903      	ldr	r1, [sp, #12]
 80144b6:	9801      	ldr	r0, [sp, #4]
 80144b8:	f000 ff4e 	bl	8015358 <_strtod_r>
 80144bc:	9b06      	ldr	r3, [sp, #24]
 80144be:	000d      	movs	r5, r1
 80144c0:	6831      	ldr	r1, [r6, #0]
 80144c2:	0004      	movs	r4, r0
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	078a      	lsls	r2, r1, #30
 80144c8:	d525      	bpl.n	8014516 <_scanf_float+0x3d2>
 80144ca:	1d1a      	adds	r2, r3, #4
 80144cc:	9906      	ldr	r1, [sp, #24]
 80144ce:	600a      	str	r2, [r1, #0]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	601c      	str	r4, [r3, #0]
 80144d4:	605d      	str	r5, [r3, #4]
 80144d6:	68f3      	ldr	r3, [r6, #12]
 80144d8:	3301      	adds	r3, #1
 80144da:	60f3      	str	r3, [r6, #12]
 80144dc:	9802      	ldr	r0, [sp, #8]
 80144de:	b00b      	add	sp, #44	; 0x2c
 80144e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144e2:	9b07      	ldr	r3, [sp, #28]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d0e4      	beq.n	80144b2 <_scanf_float+0x36e>
 80144e8:	9b08      	ldr	r3, [sp, #32]
 80144ea:	9a02      	ldr	r2, [sp, #8]
 80144ec:	1c59      	adds	r1, r3, #1
 80144ee:	9801      	ldr	r0, [sp, #4]
 80144f0:	230a      	movs	r3, #10
 80144f2:	f001 f839 	bl	8015568 <_strtol_r>
 80144f6:	9b07      	ldr	r3, [sp, #28]
 80144f8:	9f08      	ldr	r7, [sp, #32]
 80144fa:	1ac2      	subs	r2, r0, r3
 80144fc:	0033      	movs	r3, r6
 80144fe:	3370      	adds	r3, #112	; 0x70
 8014500:	33ff      	adds	r3, #255	; 0xff
 8014502:	429f      	cmp	r7, r3
 8014504:	d302      	bcc.n	801450c <_scanf_float+0x3c8>
 8014506:	0037      	movs	r7, r6
 8014508:	376f      	adds	r7, #111	; 0x6f
 801450a:	37ff      	adds	r7, #255	; 0xff
 801450c:	0038      	movs	r0, r7
 801450e:	490f      	ldr	r1, [pc, #60]	; (801454c <_scanf_float+0x408>)
 8014510:	f000 f87e 	bl	8014610 <siprintf>
 8014514:	e7cd      	b.n	80144b2 <_scanf_float+0x36e>
 8014516:	1d1a      	adds	r2, r3, #4
 8014518:	0749      	lsls	r1, r1, #29
 801451a:	d4d7      	bmi.n	80144cc <_scanf_float+0x388>
 801451c:	9906      	ldr	r1, [sp, #24]
 801451e:	0020      	movs	r0, r4
 8014520:	600a      	str	r2, [r1, #0]
 8014522:	681f      	ldr	r7, [r3, #0]
 8014524:	0022      	movs	r2, r4
 8014526:	002b      	movs	r3, r5
 8014528:	0029      	movs	r1, r5
 801452a:	f7ed ff09 	bl	8002340 <__aeabi_dcmpun>
 801452e:	2800      	cmp	r0, #0
 8014530:	d004      	beq.n	801453c <_scanf_float+0x3f8>
 8014532:	4807      	ldr	r0, [pc, #28]	; (8014550 <_scanf_float+0x40c>)
 8014534:	f000 f868 	bl	8014608 <nanf>
 8014538:	6038      	str	r0, [r7, #0]
 801453a:	e7cc      	b.n	80144d6 <_scanf_float+0x392>
 801453c:	0020      	movs	r0, r4
 801453e:	0029      	movs	r1, r5
 8014540:	f7ed fff0 	bl	8002524 <__aeabi_d2f>
 8014544:	e7f8      	b.n	8014538 <_scanf_float+0x3f4>
 8014546:	2300      	movs	r3, #0
 8014548:	e640      	b.n	80141cc <_scanf_float+0x88>
 801454a:	46c0      	nop			; (mov r8, r8)
 801454c:	0801b854 	.word	0x0801b854
 8014550:	0801b9bc 	.word	0x0801b9bc

08014554 <rand>:
 8014554:	4b16      	ldr	r3, [pc, #88]	; (80145b0 <rand+0x5c>)
 8014556:	b510      	push	{r4, lr}
 8014558:	681c      	ldr	r4, [r3, #0]
 801455a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801455c:	2b00      	cmp	r3, #0
 801455e:	d116      	bne.n	801458e <rand+0x3a>
 8014560:	2018      	movs	r0, #24
 8014562:	f7ff f899 	bl	8013698 <malloc>
 8014566:	1e02      	subs	r2, r0, #0
 8014568:	63a0      	str	r0, [r4, #56]	; 0x38
 801456a:	d104      	bne.n	8014576 <rand+0x22>
 801456c:	214e      	movs	r1, #78	; 0x4e
 801456e:	4b11      	ldr	r3, [pc, #68]	; (80145b4 <rand+0x60>)
 8014570:	4811      	ldr	r0, [pc, #68]	; (80145b8 <rand+0x64>)
 8014572:	f001 f809 	bl	8015588 <__assert_func>
 8014576:	4b11      	ldr	r3, [pc, #68]	; (80145bc <rand+0x68>)
 8014578:	2100      	movs	r1, #0
 801457a:	6003      	str	r3, [r0, #0]
 801457c:	4b10      	ldr	r3, [pc, #64]	; (80145c0 <rand+0x6c>)
 801457e:	6043      	str	r3, [r0, #4]
 8014580:	4b10      	ldr	r3, [pc, #64]	; (80145c4 <rand+0x70>)
 8014582:	6083      	str	r3, [r0, #8]
 8014584:	230b      	movs	r3, #11
 8014586:	8183      	strh	r3, [r0, #12]
 8014588:	2001      	movs	r0, #1
 801458a:	6110      	str	r0, [r2, #16]
 801458c:	6151      	str	r1, [r2, #20]
 801458e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014590:	4a0d      	ldr	r2, [pc, #52]	; (80145c8 <rand+0x74>)
 8014592:	6920      	ldr	r0, [r4, #16]
 8014594:	6961      	ldr	r1, [r4, #20]
 8014596:	4b0d      	ldr	r3, [pc, #52]	; (80145cc <rand+0x78>)
 8014598:	f7eb ffd2 	bl	8000540 <__aeabi_lmul>
 801459c:	2201      	movs	r2, #1
 801459e:	2300      	movs	r3, #0
 80145a0:	1880      	adds	r0, r0, r2
 80145a2:	4159      	adcs	r1, r3
 80145a4:	6120      	str	r0, [r4, #16]
 80145a6:	6161      	str	r1, [r4, #20]
 80145a8:	0048      	lsls	r0, r1, #1
 80145aa:	0840      	lsrs	r0, r0, #1
 80145ac:	bd10      	pop	{r4, pc}
 80145ae:	46c0      	nop			; (mov r8, r8)
 80145b0:	200000e0 	.word	0x200000e0
 80145b4:	0801b859 	.word	0x0801b859
 80145b8:	0801b870 	.word	0x0801b870
 80145bc:	abcd330e 	.word	0xabcd330e
 80145c0:	e66d1234 	.word	0xe66d1234
 80145c4:	0005deec 	.word	0x0005deec
 80145c8:	4c957f2d 	.word	0x4c957f2d
 80145cc:	5851f42d 	.word	0x5851f42d

080145d0 <realloc>:
 80145d0:	b510      	push	{r4, lr}
 80145d2:	4b03      	ldr	r3, [pc, #12]	; (80145e0 <realloc+0x10>)
 80145d4:	000a      	movs	r2, r1
 80145d6:	0001      	movs	r1, r0
 80145d8:	6818      	ldr	r0, [r3, #0]
 80145da:	f002 ff2f 	bl	801743c <_realloc_r>
 80145de:	bd10      	pop	{r4, pc}
 80145e0:	200000e0 	.word	0x200000e0

080145e4 <_sbrk_r>:
 80145e4:	2300      	movs	r3, #0
 80145e6:	b570      	push	{r4, r5, r6, lr}
 80145e8:	4d06      	ldr	r5, [pc, #24]	; (8014604 <_sbrk_r+0x20>)
 80145ea:	0004      	movs	r4, r0
 80145ec:	0008      	movs	r0, r1
 80145ee:	602b      	str	r3, [r5, #0]
 80145f0:	f003 fe92 	bl	8018318 <_sbrk>
 80145f4:	1c43      	adds	r3, r0, #1
 80145f6:	d103      	bne.n	8014600 <_sbrk_r+0x1c>
 80145f8:	682b      	ldr	r3, [r5, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d000      	beq.n	8014600 <_sbrk_r+0x1c>
 80145fe:	6023      	str	r3, [r4, #0]
 8014600:	bd70      	pop	{r4, r5, r6, pc}
 8014602:	46c0      	nop			; (mov r8, r8)
 8014604:	20006658 	.word	0x20006658

08014608 <nanf>:
 8014608:	4800      	ldr	r0, [pc, #0]	; (801460c <nanf+0x4>)
 801460a:	4770      	bx	lr
 801460c:	7fc00000 	.word	0x7fc00000

08014610 <siprintf>:
 8014610:	b40e      	push	{r1, r2, r3}
 8014612:	b500      	push	{lr}
 8014614:	490b      	ldr	r1, [pc, #44]	; (8014644 <siprintf+0x34>)
 8014616:	b09c      	sub	sp, #112	; 0x70
 8014618:	ab1d      	add	r3, sp, #116	; 0x74
 801461a:	9002      	str	r0, [sp, #8]
 801461c:	9006      	str	r0, [sp, #24]
 801461e:	9107      	str	r1, [sp, #28]
 8014620:	9104      	str	r1, [sp, #16]
 8014622:	4809      	ldr	r0, [pc, #36]	; (8014648 <siprintf+0x38>)
 8014624:	4909      	ldr	r1, [pc, #36]	; (801464c <siprintf+0x3c>)
 8014626:	cb04      	ldmia	r3!, {r2}
 8014628:	9105      	str	r1, [sp, #20]
 801462a:	6800      	ldr	r0, [r0, #0]
 801462c:	a902      	add	r1, sp, #8
 801462e:	9301      	str	r3, [sp, #4]
 8014630:	f002 ff8c 	bl	801754c <_svfiprintf_r>
 8014634:	2300      	movs	r3, #0
 8014636:	9a02      	ldr	r2, [sp, #8]
 8014638:	7013      	strb	r3, [r2, #0]
 801463a:	b01c      	add	sp, #112	; 0x70
 801463c:	bc08      	pop	{r3}
 801463e:	b003      	add	sp, #12
 8014640:	4718      	bx	r3
 8014642:	46c0      	nop			; (mov r8, r8)
 8014644:	7fffffff 	.word	0x7fffffff
 8014648:	200000e0 	.word	0x200000e0
 801464c:	ffff0208 	.word	0xffff0208

08014650 <strcat>:
 8014650:	0002      	movs	r2, r0
 8014652:	b510      	push	{r4, lr}
 8014654:	7813      	ldrb	r3, [r2, #0]
 8014656:	0014      	movs	r4, r2
 8014658:	3201      	adds	r2, #1
 801465a:	2b00      	cmp	r3, #0
 801465c:	d1fa      	bne.n	8014654 <strcat+0x4>
 801465e:	5cca      	ldrb	r2, [r1, r3]
 8014660:	54e2      	strb	r2, [r4, r3]
 8014662:	3301      	adds	r3, #1
 8014664:	2a00      	cmp	r2, #0
 8014666:	d1fa      	bne.n	801465e <strcat+0xe>
 8014668:	bd10      	pop	{r4, pc}

0801466a <strchr>:
 801466a:	b2c9      	uxtb	r1, r1
 801466c:	7803      	ldrb	r3, [r0, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d004      	beq.n	801467c <strchr+0x12>
 8014672:	428b      	cmp	r3, r1
 8014674:	d100      	bne.n	8014678 <strchr+0xe>
 8014676:	4770      	bx	lr
 8014678:	3001      	adds	r0, #1
 801467a:	e7f7      	b.n	801466c <strchr+0x2>
 801467c:	424b      	negs	r3, r1
 801467e:	4159      	adcs	r1, r3
 8014680:	4249      	negs	r1, r1
 8014682:	4008      	ands	r0, r1
 8014684:	e7f7      	b.n	8014676 <strchr+0xc>

08014686 <strcpy>:
 8014686:	0003      	movs	r3, r0
 8014688:	780a      	ldrb	r2, [r1, #0]
 801468a:	3101      	adds	r1, #1
 801468c:	701a      	strb	r2, [r3, #0]
 801468e:	3301      	adds	r3, #1
 8014690:	2a00      	cmp	r2, #0
 8014692:	d1f9      	bne.n	8014688 <strcpy+0x2>
 8014694:	4770      	bx	lr

08014696 <strncmp>:
 8014696:	b530      	push	{r4, r5, lr}
 8014698:	0005      	movs	r5, r0
 801469a:	1e10      	subs	r0, r2, #0
 801469c:	d00b      	beq.n	80146b6 <strncmp+0x20>
 801469e:	2400      	movs	r4, #0
 80146a0:	3a01      	subs	r2, #1
 80146a2:	5d2b      	ldrb	r3, [r5, r4]
 80146a4:	5d08      	ldrb	r0, [r1, r4]
 80146a6:	4283      	cmp	r3, r0
 80146a8:	d104      	bne.n	80146b4 <strncmp+0x1e>
 80146aa:	4294      	cmp	r4, r2
 80146ac:	d002      	beq.n	80146b4 <strncmp+0x1e>
 80146ae:	3401      	adds	r4, #1
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d1f6      	bne.n	80146a2 <strncmp+0xc>
 80146b4:	1a18      	subs	r0, r3, r0
 80146b6:	bd30      	pop	{r4, r5, pc}

080146b8 <strncpy>:
 80146b8:	0003      	movs	r3, r0
 80146ba:	b530      	push	{r4, r5, lr}
 80146bc:	001d      	movs	r5, r3
 80146be:	2a00      	cmp	r2, #0
 80146c0:	d006      	beq.n	80146d0 <strncpy+0x18>
 80146c2:	780c      	ldrb	r4, [r1, #0]
 80146c4:	3a01      	subs	r2, #1
 80146c6:	3301      	adds	r3, #1
 80146c8:	702c      	strb	r4, [r5, #0]
 80146ca:	3101      	adds	r1, #1
 80146cc:	2c00      	cmp	r4, #0
 80146ce:	d1f5      	bne.n	80146bc <strncpy+0x4>
 80146d0:	2100      	movs	r1, #0
 80146d2:	189a      	adds	r2, r3, r2
 80146d4:	4293      	cmp	r3, r2
 80146d6:	d100      	bne.n	80146da <strncpy+0x22>
 80146d8:	bd30      	pop	{r4, r5, pc}
 80146da:	7019      	strb	r1, [r3, #0]
 80146dc:	3301      	adds	r3, #1
 80146de:	e7f9      	b.n	80146d4 <strncpy+0x1c>

080146e0 <sulp>:
 80146e0:	b570      	push	{r4, r5, r6, lr}
 80146e2:	0016      	movs	r6, r2
 80146e4:	000d      	movs	r5, r1
 80146e6:	f002 fd57 	bl	8017198 <__ulp>
 80146ea:	2e00      	cmp	r6, #0
 80146ec:	d00d      	beq.n	801470a <sulp+0x2a>
 80146ee:	236b      	movs	r3, #107	; 0x6b
 80146f0:	006a      	lsls	r2, r5, #1
 80146f2:	0d52      	lsrs	r2, r2, #21
 80146f4:	1a9b      	subs	r3, r3, r2
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	dd07      	ble.n	801470a <sulp+0x2a>
 80146fa:	2400      	movs	r4, #0
 80146fc:	4a03      	ldr	r2, [pc, #12]	; (801470c <sulp+0x2c>)
 80146fe:	051b      	lsls	r3, r3, #20
 8014700:	189d      	adds	r5, r3, r2
 8014702:	002b      	movs	r3, r5
 8014704:	0022      	movs	r2, r4
 8014706:	f7ed f81d 	bl	8001744 <__aeabi_dmul>
 801470a:	bd70      	pop	{r4, r5, r6, pc}
 801470c:	3ff00000 	.word	0x3ff00000

08014710 <_strtod_l>:
 8014710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014712:	001d      	movs	r5, r3
 8014714:	2300      	movs	r3, #0
 8014716:	b0a7      	sub	sp, #156	; 0x9c
 8014718:	9322      	str	r3, [sp, #136]	; 0x88
 801471a:	4bae      	ldr	r3, [pc, #696]	; (80149d4 <_strtod_l+0x2c4>)
 801471c:	9005      	str	r0, [sp, #20]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	9108      	str	r1, [sp, #32]
 8014722:	0018      	movs	r0, r3
 8014724:	9307      	str	r3, [sp, #28]
 8014726:	921d      	str	r2, [sp, #116]	; 0x74
 8014728:	f7eb fcf6 	bl	8000118 <strlen>
 801472c:	2600      	movs	r6, #0
 801472e:	0004      	movs	r4, r0
 8014730:	2700      	movs	r7, #0
 8014732:	9b08      	ldr	r3, [sp, #32]
 8014734:	9321      	str	r3, [sp, #132]	; 0x84
 8014736:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014738:	7813      	ldrb	r3, [r2, #0]
 801473a:	2b2b      	cmp	r3, #43	; 0x2b
 801473c:	d058      	beq.n	80147f0 <_strtod_l+0xe0>
 801473e:	d844      	bhi.n	80147ca <_strtod_l+0xba>
 8014740:	2b0d      	cmp	r3, #13
 8014742:	d83d      	bhi.n	80147c0 <_strtod_l+0xb0>
 8014744:	2b08      	cmp	r3, #8
 8014746:	d83d      	bhi.n	80147c4 <_strtod_l+0xb4>
 8014748:	2b00      	cmp	r3, #0
 801474a:	d047      	beq.n	80147dc <_strtod_l+0xcc>
 801474c:	2300      	movs	r3, #0
 801474e:	9310      	str	r3, [sp, #64]	; 0x40
 8014750:	2200      	movs	r2, #0
 8014752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014754:	920a      	str	r2, [sp, #40]	; 0x28
 8014756:	9306      	str	r3, [sp, #24]
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	2b30      	cmp	r3, #48	; 0x30
 801475c:	d000      	beq.n	8014760 <_strtod_l+0x50>
 801475e:	e083      	b.n	8014868 <_strtod_l+0x158>
 8014760:	9b06      	ldr	r3, [sp, #24]
 8014762:	3220      	adds	r2, #32
 8014764:	785b      	ldrb	r3, [r3, #1]
 8014766:	4393      	bics	r3, r2
 8014768:	2b58      	cmp	r3, #88	; 0x58
 801476a:	d000      	beq.n	801476e <_strtod_l+0x5e>
 801476c:	e072      	b.n	8014854 <_strtod_l+0x144>
 801476e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014770:	9502      	str	r5, [sp, #8]
 8014772:	9301      	str	r3, [sp, #4]
 8014774:	ab22      	add	r3, sp, #136	; 0x88
 8014776:	9300      	str	r3, [sp, #0]
 8014778:	4a97      	ldr	r2, [pc, #604]	; (80149d8 <_strtod_l+0x2c8>)
 801477a:	ab23      	add	r3, sp, #140	; 0x8c
 801477c:	9805      	ldr	r0, [sp, #20]
 801477e:	a921      	add	r1, sp, #132	; 0x84
 8014780:	f001 fe4a 	bl	8016418 <__gethex>
 8014784:	2307      	movs	r3, #7
 8014786:	0005      	movs	r5, r0
 8014788:	0004      	movs	r4, r0
 801478a:	401d      	ands	r5, r3
 801478c:	4218      	tst	r0, r3
 801478e:	d006      	beq.n	801479e <_strtod_l+0x8e>
 8014790:	2d06      	cmp	r5, #6
 8014792:	d12f      	bne.n	80147f4 <_strtod_l+0xe4>
 8014794:	9b06      	ldr	r3, [sp, #24]
 8014796:	3301      	adds	r3, #1
 8014798:	9321      	str	r3, [sp, #132]	; 0x84
 801479a:	2300      	movs	r3, #0
 801479c:	9310      	str	r3, [sp, #64]	; 0x40
 801479e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d002      	beq.n	80147aa <_strtod_l+0x9a>
 80147a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80147a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80147a8:	601a      	str	r2, [r3, #0]
 80147aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d01c      	beq.n	80147ea <_strtod_l+0xda>
 80147b0:	2380      	movs	r3, #128	; 0x80
 80147b2:	0032      	movs	r2, r6
 80147b4:	061b      	lsls	r3, r3, #24
 80147b6:	18fb      	adds	r3, r7, r3
 80147b8:	0010      	movs	r0, r2
 80147ba:	0019      	movs	r1, r3
 80147bc:	b027      	add	sp, #156	; 0x9c
 80147be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147c0:	2b20      	cmp	r3, #32
 80147c2:	d1c3      	bne.n	801474c <_strtod_l+0x3c>
 80147c4:	3201      	adds	r2, #1
 80147c6:	9221      	str	r2, [sp, #132]	; 0x84
 80147c8:	e7b5      	b.n	8014736 <_strtod_l+0x26>
 80147ca:	2b2d      	cmp	r3, #45	; 0x2d
 80147cc:	d1be      	bne.n	801474c <_strtod_l+0x3c>
 80147ce:	3b2c      	subs	r3, #44	; 0x2c
 80147d0:	9310      	str	r3, [sp, #64]	; 0x40
 80147d2:	1c53      	adds	r3, r2, #1
 80147d4:	9321      	str	r3, [sp, #132]	; 0x84
 80147d6:	7853      	ldrb	r3, [r2, #1]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d1b9      	bne.n	8014750 <_strtod_l+0x40>
 80147dc:	9b08      	ldr	r3, [sp, #32]
 80147de:	9321      	str	r3, [sp, #132]	; 0x84
 80147e0:	2300      	movs	r3, #0
 80147e2:	9310      	str	r3, [sp, #64]	; 0x40
 80147e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d1dc      	bne.n	80147a4 <_strtod_l+0x94>
 80147ea:	0032      	movs	r2, r6
 80147ec:	003b      	movs	r3, r7
 80147ee:	e7e3      	b.n	80147b8 <_strtod_l+0xa8>
 80147f0:	2300      	movs	r3, #0
 80147f2:	e7ed      	b.n	80147d0 <_strtod_l+0xc0>
 80147f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80147f6:	2a00      	cmp	r2, #0
 80147f8:	d007      	beq.n	801480a <_strtod_l+0xfa>
 80147fa:	2135      	movs	r1, #53	; 0x35
 80147fc:	a824      	add	r0, sp, #144	; 0x90
 80147fe:	f002 fdca 	bl	8017396 <__copybits>
 8014802:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014804:	9805      	ldr	r0, [sp, #20]
 8014806:	f002 f985 	bl	8016b14 <_Bfree>
 801480a:	1e68      	subs	r0, r5, #1
 801480c:	2805      	cmp	r0, #5
 801480e:	d806      	bhi.n	801481e <_strtod_l+0x10e>
 8014810:	f7eb fc8a 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014814:	1c190b0e 	.word	0x1c190b0e
 8014818:	030e      	.short	0x030e
 801481a:	2700      	movs	r7, #0
 801481c:	003e      	movs	r6, r7
 801481e:	0723      	lsls	r3, r4, #28
 8014820:	d5bd      	bpl.n	801479e <_strtod_l+0x8e>
 8014822:	2380      	movs	r3, #128	; 0x80
 8014824:	061b      	lsls	r3, r3, #24
 8014826:	431f      	orrs	r7, r3
 8014828:	e7b9      	b.n	801479e <_strtod_l+0x8e>
 801482a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801482c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801482e:	e7f6      	b.n	801481e <_strtod_l+0x10e>
 8014830:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014832:	4a6a      	ldr	r2, [pc, #424]	; (80149dc <_strtod_l+0x2cc>)
 8014834:	496a      	ldr	r1, [pc, #424]	; (80149e0 <_strtod_l+0x2d0>)
 8014836:	401a      	ands	r2, r3
 8014838:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801483a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801483c:	185b      	adds	r3, r3, r1
 801483e:	051b      	lsls	r3, r3, #20
 8014840:	431a      	orrs	r2, r3
 8014842:	0017      	movs	r7, r2
 8014844:	e7eb      	b.n	801481e <_strtod_l+0x10e>
 8014846:	2600      	movs	r6, #0
 8014848:	4f66      	ldr	r7, [pc, #408]	; (80149e4 <_strtod_l+0x2d4>)
 801484a:	e7e8      	b.n	801481e <_strtod_l+0x10e>
 801484c:	2601      	movs	r6, #1
 801484e:	4f66      	ldr	r7, [pc, #408]	; (80149e8 <_strtod_l+0x2d8>)
 8014850:	4276      	negs	r6, r6
 8014852:	e7e4      	b.n	801481e <_strtod_l+0x10e>
 8014854:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014856:	1c5a      	adds	r2, r3, #1
 8014858:	9221      	str	r2, [sp, #132]	; 0x84
 801485a:	785b      	ldrb	r3, [r3, #1]
 801485c:	2b30      	cmp	r3, #48	; 0x30
 801485e:	d0f9      	beq.n	8014854 <_strtod_l+0x144>
 8014860:	2b00      	cmp	r3, #0
 8014862:	d09c      	beq.n	801479e <_strtod_l+0x8e>
 8014864:	2301      	movs	r3, #1
 8014866:	930a      	str	r3, [sp, #40]	; 0x28
 8014868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801486a:	220a      	movs	r2, #10
 801486c:	9311      	str	r3, [sp, #68]	; 0x44
 801486e:	2300      	movs	r3, #0
 8014870:	930e      	str	r3, [sp, #56]	; 0x38
 8014872:	930b      	str	r3, [sp, #44]	; 0x2c
 8014874:	9309      	str	r3, [sp, #36]	; 0x24
 8014876:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014878:	7805      	ldrb	r5, [r0, #0]
 801487a:	002b      	movs	r3, r5
 801487c:	3b30      	subs	r3, #48	; 0x30
 801487e:	b2d9      	uxtb	r1, r3
 8014880:	2909      	cmp	r1, #9
 8014882:	d927      	bls.n	80148d4 <_strtod_l+0x1c4>
 8014884:	0022      	movs	r2, r4
 8014886:	9907      	ldr	r1, [sp, #28]
 8014888:	f7ff ff05 	bl	8014696 <strncmp>
 801488c:	2800      	cmp	r0, #0
 801488e:	d033      	beq.n	80148f8 <_strtod_l+0x1e8>
 8014890:	2000      	movs	r0, #0
 8014892:	002b      	movs	r3, r5
 8014894:	4684      	mov	ip, r0
 8014896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014898:	900c      	str	r0, [sp, #48]	; 0x30
 801489a:	9206      	str	r2, [sp, #24]
 801489c:	2220      	movs	r2, #32
 801489e:	0019      	movs	r1, r3
 80148a0:	4391      	bics	r1, r2
 80148a2:	000a      	movs	r2, r1
 80148a4:	2100      	movs	r1, #0
 80148a6:	9107      	str	r1, [sp, #28]
 80148a8:	2a45      	cmp	r2, #69	; 0x45
 80148aa:	d000      	beq.n	80148ae <_strtod_l+0x19e>
 80148ac:	e0c5      	b.n	8014a3a <_strtod_l+0x32a>
 80148ae:	9b06      	ldr	r3, [sp, #24]
 80148b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148b2:	4303      	orrs	r3, r0
 80148b4:	4313      	orrs	r3, r2
 80148b6:	428b      	cmp	r3, r1
 80148b8:	d090      	beq.n	80147dc <_strtod_l+0xcc>
 80148ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148bc:	9308      	str	r3, [sp, #32]
 80148be:	3301      	adds	r3, #1
 80148c0:	9321      	str	r3, [sp, #132]	; 0x84
 80148c2:	9b08      	ldr	r3, [sp, #32]
 80148c4:	785b      	ldrb	r3, [r3, #1]
 80148c6:	2b2b      	cmp	r3, #43	; 0x2b
 80148c8:	d075      	beq.n	80149b6 <_strtod_l+0x2a6>
 80148ca:	000c      	movs	r4, r1
 80148cc:	2b2d      	cmp	r3, #45	; 0x2d
 80148ce:	d178      	bne.n	80149c2 <_strtod_l+0x2b2>
 80148d0:	2401      	movs	r4, #1
 80148d2:	e071      	b.n	80149b8 <_strtod_l+0x2a8>
 80148d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80148d6:	2908      	cmp	r1, #8
 80148d8:	dc09      	bgt.n	80148ee <_strtod_l+0x1de>
 80148da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148dc:	4351      	muls	r1, r2
 80148de:	185b      	adds	r3, r3, r1
 80148e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80148e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148e4:	3001      	adds	r0, #1
 80148e6:	3301      	adds	r3, #1
 80148e8:	9309      	str	r3, [sp, #36]	; 0x24
 80148ea:	9021      	str	r0, [sp, #132]	; 0x84
 80148ec:	e7c3      	b.n	8014876 <_strtod_l+0x166>
 80148ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80148f0:	4351      	muls	r1, r2
 80148f2:	185b      	adds	r3, r3, r1
 80148f4:	930e      	str	r3, [sp, #56]	; 0x38
 80148f6:	e7f4      	b.n	80148e2 <_strtod_l+0x1d2>
 80148f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148fc:	191c      	adds	r4, r3, r4
 80148fe:	9421      	str	r4, [sp, #132]	; 0x84
 8014900:	7823      	ldrb	r3, [r4, #0]
 8014902:	2a00      	cmp	r2, #0
 8014904:	d039      	beq.n	801497a <_strtod_l+0x26a>
 8014906:	900c      	str	r0, [sp, #48]	; 0x30
 8014908:	9206      	str	r2, [sp, #24]
 801490a:	001a      	movs	r2, r3
 801490c:	3a30      	subs	r2, #48	; 0x30
 801490e:	2a09      	cmp	r2, #9
 8014910:	d912      	bls.n	8014938 <_strtod_l+0x228>
 8014912:	2201      	movs	r2, #1
 8014914:	4694      	mov	ip, r2
 8014916:	e7c1      	b.n	801489c <_strtod_l+0x18c>
 8014918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801491a:	3001      	adds	r0, #1
 801491c:	1c5a      	adds	r2, r3, #1
 801491e:	9221      	str	r2, [sp, #132]	; 0x84
 8014920:	785b      	ldrb	r3, [r3, #1]
 8014922:	2b30      	cmp	r3, #48	; 0x30
 8014924:	d0f8      	beq.n	8014918 <_strtod_l+0x208>
 8014926:	001a      	movs	r2, r3
 8014928:	3a31      	subs	r2, #49	; 0x31
 801492a:	2a08      	cmp	r2, #8
 801492c:	d83e      	bhi.n	80149ac <_strtod_l+0x29c>
 801492e:	900c      	str	r0, [sp, #48]	; 0x30
 8014930:	2000      	movs	r0, #0
 8014932:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014934:	9006      	str	r0, [sp, #24]
 8014936:	9211      	str	r2, [sp, #68]	; 0x44
 8014938:	001a      	movs	r2, r3
 801493a:	9906      	ldr	r1, [sp, #24]
 801493c:	1c44      	adds	r4, r0, #1
 801493e:	3a30      	subs	r2, #48	; 0x30
 8014940:	2b30      	cmp	r3, #48	; 0x30
 8014942:	d013      	beq.n	801496c <_strtod_l+0x25c>
 8014944:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014946:	191b      	adds	r3, r3, r4
 8014948:	930c      	str	r3, [sp, #48]	; 0x30
 801494a:	1844      	adds	r4, r0, r1
 801494c:	000b      	movs	r3, r1
 801494e:	210a      	movs	r1, #10
 8014950:	429c      	cmp	r4, r3
 8014952:	d114      	bne.n	801497e <_strtod_l+0x26e>
 8014954:	9b06      	ldr	r3, [sp, #24]
 8014956:	1c59      	adds	r1, r3, #1
 8014958:	1809      	adds	r1, r1, r0
 801495a:	1818      	adds	r0, r3, r0
 801495c:	2808      	cmp	r0, #8
 801495e:	dc1c      	bgt.n	801499a <_strtod_l+0x28a>
 8014960:	230a      	movs	r3, #10
 8014962:	2400      	movs	r4, #0
 8014964:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014966:	4343      	muls	r3, r0
 8014968:	18d3      	adds	r3, r2, r3
 801496a:	930b      	str	r3, [sp, #44]	; 0x2c
 801496c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801496e:	0020      	movs	r0, r4
 8014970:	1c5a      	adds	r2, r3, #1
 8014972:	9221      	str	r2, [sp, #132]	; 0x84
 8014974:	785b      	ldrb	r3, [r3, #1]
 8014976:	9106      	str	r1, [sp, #24]
 8014978:	e7c7      	b.n	801490a <_strtod_l+0x1fa>
 801497a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801497c:	e7d1      	b.n	8014922 <_strtod_l+0x212>
 801497e:	2b08      	cmp	r3, #8
 8014980:	dc04      	bgt.n	801498c <_strtod_l+0x27c>
 8014982:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014984:	434d      	muls	r5, r1
 8014986:	950b      	str	r5, [sp, #44]	; 0x2c
 8014988:	3301      	adds	r3, #1
 801498a:	e7e1      	b.n	8014950 <_strtod_l+0x240>
 801498c:	1c5d      	adds	r5, r3, #1
 801498e:	2d10      	cmp	r5, #16
 8014990:	dcfa      	bgt.n	8014988 <_strtod_l+0x278>
 8014992:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014994:	434d      	muls	r5, r1
 8014996:	950e      	str	r5, [sp, #56]	; 0x38
 8014998:	e7f6      	b.n	8014988 <_strtod_l+0x278>
 801499a:	2400      	movs	r4, #0
 801499c:	2910      	cmp	r1, #16
 801499e:	dce5      	bgt.n	801496c <_strtod_l+0x25c>
 80149a0:	230a      	movs	r3, #10
 80149a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80149a4:	4343      	muls	r3, r0
 80149a6:	18d3      	adds	r3, r2, r3
 80149a8:	930e      	str	r3, [sp, #56]	; 0x38
 80149aa:	e7df      	b.n	801496c <_strtod_l+0x25c>
 80149ac:	2200      	movs	r2, #0
 80149ae:	920c      	str	r2, [sp, #48]	; 0x30
 80149b0:	9206      	str	r2, [sp, #24]
 80149b2:	3201      	adds	r2, #1
 80149b4:	e7ae      	b.n	8014914 <_strtod_l+0x204>
 80149b6:	2400      	movs	r4, #0
 80149b8:	9b08      	ldr	r3, [sp, #32]
 80149ba:	3302      	adds	r3, #2
 80149bc:	9321      	str	r3, [sp, #132]	; 0x84
 80149be:	9b08      	ldr	r3, [sp, #32]
 80149c0:	789b      	ldrb	r3, [r3, #2]
 80149c2:	001a      	movs	r2, r3
 80149c4:	3a30      	subs	r2, #48	; 0x30
 80149c6:	2a09      	cmp	r2, #9
 80149c8:	d914      	bls.n	80149f4 <_strtod_l+0x2e4>
 80149ca:	9a08      	ldr	r2, [sp, #32]
 80149cc:	9221      	str	r2, [sp, #132]	; 0x84
 80149ce:	2200      	movs	r2, #0
 80149d0:	e032      	b.n	8014a38 <_strtod_l+0x328>
 80149d2:	46c0      	nop			; (mov r8, r8)
 80149d4:	0801baa4 	.word	0x0801baa4
 80149d8:	0801b8d0 	.word	0x0801b8d0
 80149dc:	ffefffff 	.word	0xffefffff
 80149e0:	00000433 	.word	0x00000433
 80149e4:	7ff00000 	.word	0x7ff00000
 80149e8:	7fffffff 	.word	0x7fffffff
 80149ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149ee:	1c5a      	adds	r2, r3, #1
 80149f0:	9221      	str	r2, [sp, #132]	; 0x84
 80149f2:	785b      	ldrb	r3, [r3, #1]
 80149f4:	2b30      	cmp	r3, #48	; 0x30
 80149f6:	d0f9      	beq.n	80149ec <_strtod_l+0x2dc>
 80149f8:	2200      	movs	r2, #0
 80149fa:	9207      	str	r2, [sp, #28]
 80149fc:	001a      	movs	r2, r3
 80149fe:	3a31      	subs	r2, #49	; 0x31
 8014a00:	2a08      	cmp	r2, #8
 8014a02:	d81a      	bhi.n	8014a3a <_strtod_l+0x32a>
 8014a04:	3b30      	subs	r3, #48	; 0x30
 8014a06:	001a      	movs	r2, r3
 8014a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a0a:	9307      	str	r3, [sp, #28]
 8014a0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a0e:	1c59      	adds	r1, r3, #1
 8014a10:	9121      	str	r1, [sp, #132]	; 0x84
 8014a12:	785b      	ldrb	r3, [r3, #1]
 8014a14:	001d      	movs	r5, r3
 8014a16:	3d30      	subs	r5, #48	; 0x30
 8014a18:	2d09      	cmp	r5, #9
 8014a1a:	d939      	bls.n	8014a90 <_strtod_l+0x380>
 8014a1c:	9d07      	ldr	r5, [sp, #28]
 8014a1e:	1b49      	subs	r1, r1, r5
 8014a20:	4daf      	ldr	r5, [pc, #700]	; (8014ce0 <_strtod_l+0x5d0>)
 8014a22:	9507      	str	r5, [sp, #28]
 8014a24:	2908      	cmp	r1, #8
 8014a26:	dc03      	bgt.n	8014a30 <_strtod_l+0x320>
 8014a28:	9207      	str	r2, [sp, #28]
 8014a2a:	42aa      	cmp	r2, r5
 8014a2c:	dd00      	ble.n	8014a30 <_strtod_l+0x320>
 8014a2e:	9507      	str	r5, [sp, #28]
 8014a30:	2c00      	cmp	r4, #0
 8014a32:	d002      	beq.n	8014a3a <_strtod_l+0x32a>
 8014a34:	9a07      	ldr	r2, [sp, #28]
 8014a36:	4252      	negs	r2, r2
 8014a38:	9207      	str	r2, [sp, #28]
 8014a3a:	9a06      	ldr	r2, [sp, #24]
 8014a3c:	2a00      	cmp	r2, #0
 8014a3e:	d14b      	bne.n	8014ad8 <_strtod_l+0x3c8>
 8014a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a42:	4310      	orrs	r0, r2
 8014a44:	d000      	beq.n	8014a48 <_strtod_l+0x338>
 8014a46:	e6aa      	b.n	801479e <_strtod_l+0x8e>
 8014a48:	4662      	mov	r2, ip
 8014a4a:	2a00      	cmp	r2, #0
 8014a4c:	d000      	beq.n	8014a50 <_strtod_l+0x340>
 8014a4e:	e6c5      	b.n	80147dc <_strtod_l+0xcc>
 8014a50:	2b69      	cmp	r3, #105	; 0x69
 8014a52:	d025      	beq.n	8014aa0 <_strtod_l+0x390>
 8014a54:	dc21      	bgt.n	8014a9a <_strtod_l+0x38a>
 8014a56:	2b49      	cmp	r3, #73	; 0x49
 8014a58:	d022      	beq.n	8014aa0 <_strtod_l+0x390>
 8014a5a:	2b4e      	cmp	r3, #78	; 0x4e
 8014a5c:	d000      	beq.n	8014a60 <_strtod_l+0x350>
 8014a5e:	e6bd      	b.n	80147dc <_strtod_l+0xcc>
 8014a60:	49a0      	ldr	r1, [pc, #640]	; (8014ce4 <_strtod_l+0x5d4>)
 8014a62:	a821      	add	r0, sp, #132	; 0x84
 8014a64:	f001 ff26 	bl	80168b4 <__match>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d100      	bne.n	8014a6e <_strtod_l+0x35e>
 8014a6c:	e6b6      	b.n	80147dc <_strtod_l+0xcc>
 8014a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a70:	781b      	ldrb	r3, [r3, #0]
 8014a72:	2b28      	cmp	r3, #40	; 0x28
 8014a74:	d12a      	bne.n	8014acc <_strtod_l+0x3bc>
 8014a76:	499c      	ldr	r1, [pc, #624]	; (8014ce8 <_strtod_l+0x5d8>)
 8014a78:	aa24      	add	r2, sp, #144	; 0x90
 8014a7a:	a821      	add	r0, sp, #132	; 0x84
 8014a7c:	f001 ff2e 	bl	80168dc <__hexnan>
 8014a80:	2805      	cmp	r0, #5
 8014a82:	d123      	bne.n	8014acc <_strtod_l+0x3bc>
 8014a84:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014a86:	4a99      	ldr	r2, [pc, #612]	; (8014cec <_strtod_l+0x5dc>)
 8014a88:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014a8a:	431a      	orrs	r2, r3
 8014a8c:	0017      	movs	r7, r2
 8014a8e:	e686      	b.n	801479e <_strtod_l+0x8e>
 8014a90:	210a      	movs	r1, #10
 8014a92:	434a      	muls	r2, r1
 8014a94:	18d2      	adds	r2, r2, r3
 8014a96:	3a30      	subs	r2, #48	; 0x30
 8014a98:	e7b8      	b.n	8014a0c <_strtod_l+0x2fc>
 8014a9a:	2b6e      	cmp	r3, #110	; 0x6e
 8014a9c:	d0e0      	beq.n	8014a60 <_strtod_l+0x350>
 8014a9e:	e69d      	b.n	80147dc <_strtod_l+0xcc>
 8014aa0:	4993      	ldr	r1, [pc, #588]	; (8014cf0 <_strtod_l+0x5e0>)
 8014aa2:	a821      	add	r0, sp, #132	; 0x84
 8014aa4:	f001 ff06 	bl	80168b4 <__match>
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	d100      	bne.n	8014aae <_strtod_l+0x39e>
 8014aac:	e696      	b.n	80147dc <_strtod_l+0xcc>
 8014aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ab0:	4990      	ldr	r1, [pc, #576]	; (8014cf4 <_strtod_l+0x5e4>)
 8014ab2:	3b01      	subs	r3, #1
 8014ab4:	a821      	add	r0, sp, #132	; 0x84
 8014ab6:	9321      	str	r3, [sp, #132]	; 0x84
 8014ab8:	f001 fefc 	bl	80168b4 <__match>
 8014abc:	2800      	cmp	r0, #0
 8014abe:	d102      	bne.n	8014ac6 <_strtod_l+0x3b6>
 8014ac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ac2:	3301      	adds	r3, #1
 8014ac4:	9321      	str	r3, [sp, #132]	; 0x84
 8014ac6:	2600      	movs	r6, #0
 8014ac8:	4f88      	ldr	r7, [pc, #544]	; (8014cec <_strtod_l+0x5dc>)
 8014aca:	e668      	b.n	801479e <_strtod_l+0x8e>
 8014acc:	488a      	ldr	r0, [pc, #552]	; (8014cf8 <_strtod_l+0x5e8>)
 8014ace:	f002 ff9f 	bl	8017a10 <nan>
 8014ad2:	0006      	movs	r6, r0
 8014ad4:	000f      	movs	r7, r1
 8014ad6:	e662      	b.n	801479e <_strtod_l+0x8e>
 8014ad8:	9b07      	ldr	r3, [sp, #28]
 8014ada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014adc:	1a9b      	subs	r3, r3, r2
 8014ade:	930a      	str	r3, [sp, #40]	; 0x28
 8014ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d101      	bne.n	8014aea <_strtod_l+0x3da>
 8014ae6:	9b06      	ldr	r3, [sp, #24]
 8014ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8014aea:	9c06      	ldr	r4, [sp, #24]
 8014aec:	2c10      	cmp	r4, #16
 8014aee:	dd00      	ble.n	8014af2 <_strtod_l+0x3e2>
 8014af0:	2410      	movs	r4, #16
 8014af2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014af4:	f7ed fca8 	bl	8002448 <__aeabi_ui2d>
 8014af8:	9b06      	ldr	r3, [sp, #24]
 8014afa:	0006      	movs	r6, r0
 8014afc:	000f      	movs	r7, r1
 8014afe:	2b09      	cmp	r3, #9
 8014b00:	dd15      	ble.n	8014b2e <_strtod_l+0x41e>
 8014b02:	0022      	movs	r2, r4
 8014b04:	4b7d      	ldr	r3, [pc, #500]	; (8014cfc <_strtod_l+0x5ec>)
 8014b06:	3a09      	subs	r2, #9
 8014b08:	00d2      	lsls	r2, r2, #3
 8014b0a:	189b      	adds	r3, r3, r2
 8014b0c:	681a      	ldr	r2, [r3, #0]
 8014b0e:	685b      	ldr	r3, [r3, #4]
 8014b10:	f7ec fe18 	bl	8001744 <__aeabi_dmul>
 8014b14:	0006      	movs	r6, r0
 8014b16:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014b18:	000f      	movs	r7, r1
 8014b1a:	f7ed fc95 	bl	8002448 <__aeabi_ui2d>
 8014b1e:	0002      	movs	r2, r0
 8014b20:	000b      	movs	r3, r1
 8014b22:	0030      	movs	r0, r6
 8014b24:	0039      	movs	r1, r7
 8014b26:	f7eb fe9d 	bl	8000864 <__aeabi_dadd>
 8014b2a:	0006      	movs	r6, r0
 8014b2c:	000f      	movs	r7, r1
 8014b2e:	9b06      	ldr	r3, [sp, #24]
 8014b30:	2b0f      	cmp	r3, #15
 8014b32:	dc39      	bgt.n	8014ba8 <_strtod_l+0x498>
 8014b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d100      	bne.n	8014b3c <_strtod_l+0x42c>
 8014b3a:	e630      	b.n	801479e <_strtod_l+0x8e>
 8014b3c:	dd24      	ble.n	8014b88 <_strtod_l+0x478>
 8014b3e:	2b16      	cmp	r3, #22
 8014b40:	dc09      	bgt.n	8014b56 <_strtod_l+0x446>
 8014b42:	00dd      	lsls	r5, r3, #3
 8014b44:	0032      	movs	r2, r6
 8014b46:	003b      	movs	r3, r7
 8014b48:	4c6c      	ldr	r4, [pc, #432]	; (8014cfc <_strtod_l+0x5ec>)
 8014b4a:	1964      	adds	r4, r4, r5
 8014b4c:	6820      	ldr	r0, [r4, #0]
 8014b4e:	6861      	ldr	r1, [r4, #4]
 8014b50:	f7ec fdf8 	bl	8001744 <__aeabi_dmul>
 8014b54:	e7bd      	b.n	8014ad2 <_strtod_l+0x3c2>
 8014b56:	2325      	movs	r3, #37	; 0x25
 8014b58:	9a06      	ldr	r2, [sp, #24]
 8014b5a:	1a9b      	subs	r3, r3, r2
 8014b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	db22      	blt.n	8014ba8 <_strtod_l+0x498>
 8014b62:	240f      	movs	r4, #15
 8014b64:	9b06      	ldr	r3, [sp, #24]
 8014b66:	4d65      	ldr	r5, [pc, #404]	; (8014cfc <_strtod_l+0x5ec>)
 8014b68:	1ae4      	subs	r4, r4, r3
 8014b6a:	00e1      	lsls	r1, r4, #3
 8014b6c:	1869      	adds	r1, r5, r1
 8014b6e:	0032      	movs	r2, r6
 8014b70:	6808      	ldr	r0, [r1, #0]
 8014b72:	6849      	ldr	r1, [r1, #4]
 8014b74:	003b      	movs	r3, r7
 8014b76:	f7ec fde5 	bl	8001744 <__aeabi_dmul>
 8014b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b7c:	1b1c      	subs	r4, r3, r4
 8014b7e:	00e4      	lsls	r4, r4, #3
 8014b80:	192c      	adds	r4, r5, r4
 8014b82:	6822      	ldr	r2, [r4, #0]
 8014b84:	6863      	ldr	r3, [r4, #4]
 8014b86:	e7e3      	b.n	8014b50 <_strtod_l+0x440>
 8014b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b8a:	3316      	adds	r3, #22
 8014b8c:	db0c      	blt.n	8014ba8 <_strtod_l+0x498>
 8014b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b90:	9a07      	ldr	r2, [sp, #28]
 8014b92:	0030      	movs	r0, r6
 8014b94:	1a9a      	subs	r2, r3, r2
 8014b96:	4b59      	ldr	r3, [pc, #356]	; (8014cfc <_strtod_l+0x5ec>)
 8014b98:	00d2      	lsls	r2, r2, #3
 8014b9a:	189b      	adds	r3, r3, r2
 8014b9c:	0039      	movs	r1, r7
 8014b9e:	681a      	ldr	r2, [r3, #0]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	f7ec f9c9 	bl	8000f38 <__aeabi_ddiv>
 8014ba6:	e794      	b.n	8014ad2 <_strtod_l+0x3c2>
 8014ba8:	9b06      	ldr	r3, [sp, #24]
 8014baa:	1b1c      	subs	r4, r3, r4
 8014bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bae:	18e4      	adds	r4, r4, r3
 8014bb0:	2c00      	cmp	r4, #0
 8014bb2:	dd70      	ble.n	8014c96 <_strtod_l+0x586>
 8014bb4:	230f      	movs	r3, #15
 8014bb6:	0021      	movs	r1, r4
 8014bb8:	4019      	ands	r1, r3
 8014bba:	421c      	tst	r4, r3
 8014bbc:	d00a      	beq.n	8014bd4 <_strtod_l+0x4c4>
 8014bbe:	00cb      	lsls	r3, r1, #3
 8014bc0:	494e      	ldr	r1, [pc, #312]	; (8014cfc <_strtod_l+0x5ec>)
 8014bc2:	0032      	movs	r2, r6
 8014bc4:	18c9      	adds	r1, r1, r3
 8014bc6:	6808      	ldr	r0, [r1, #0]
 8014bc8:	6849      	ldr	r1, [r1, #4]
 8014bca:	003b      	movs	r3, r7
 8014bcc:	f7ec fdba 	bl	8001744 <__aeabi_dmul>
 8014bd0:	0006      	movs	r6, r0
 8014bd2:	000f      	movs	r7, r1
 8014bd4:	230f      	movs	r3, #15
 8014bd6:	439c      	bics	r4, r3
 8014bd8:	d048      	beq.n	8014c6c <_strtod_l+0x55c>
 8014bda:	3326      	adds	r3, #38	; 0x26
 8014bdc:	33ff      	adds	r3, #255	; 0xff
 8014bde:	429c      	cmp	r4, r3
 8014be0:	dd22      	ble.n	8014c28 <_strtod_l+0x518>
 8014be2:	2300      	movs	r3, #0
 8014be4:	9306      	str	r3, [sp, #24]
 8014be6:	9307      	str	r3, [sp, #28]
 8014be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bea:	9309      	str	r3, [sp, #36]	; 0x24
 8014bec:	2322      	movs	r3, #34	; 0x22
 8014bee:	2600      	movs	r6, #0
 8014bf0:	9a05      	ldr	r2, [sp, #20]
 8014bf2:	4f3e      	ldr	r7, [pc, #248]	; (8014cec <_strtod_l+0x5dc>)
 8014bf4:	6013      	str	r3, [r2, #0]
 8014bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bf8:	42b3      	cmp	r3, r6
 8014bfa:	d100      	bne.n	8014bfe <_strtod_l+0x4ee>
 8014bfc:	e5cf      	b.n	801479e <_strtod_l+0x8e>
 8014bfe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014c00:	9805      	ldr	r0, [sp, #20]
 8014c02:	f001 ff87 	bl	8016b14 <_Bfree>
 8014c06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c08:	9805      	ldr	r0, [sp, #20]
 8014c0a:	f001 ff83 	bl	8016b14 <_Bfree>
 8014c0e:	9907      	ldr	r1, [sp, #28]
 8014c10:	9805      	ldr	r0, [sp, #20]
 8014c12:	f001 ff7f 	bl	8016b14 <_Bfree>
 8014c16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c18:	9805      	ldr	r0, [sp, #20]
 8014c1a:	f001 ff7b 	bl	8016b14 <_Bfree>
 8014c1e:	9906      	ldr	r1, [sp, #24]
 8014c20:	9805      	ldr	r0, [sp, #20]
 8014c22:	f001 ff77 	bl	8016b14 <_Bfree>
 8014c26:	e5ba      	b.n	801479e <_strtod_l+0x8e>
 8014c28:	2300      	movs	r3, #0
 8014c2a:	0030      	movs	r0, r6
 8014c2c:	0039      	movs	r1, r7
 8014c2e:	001d      	movs	r5, r3
 8014c30:	1124      	asrs	r4, r4, #4
 8014c32:	2c01      	cmp	r4, #1
 8014c34:	dc1d      	bgt.n	8014c72 <_strtod_l+0x562>
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d001      	beq.n	8014c3e <_strtod_l+0x52e>
 8014c3a:	0006      	movs	r6, r0
 8014c3c:	000f      	movs	r7, r1
 8014c3e:	4b30      	ldr	r3, [pc, #192]	; (8014d00 <_strtod_l+0x5f0>)
 8014c40:	00ed      	lsls	r5, r5, #3
 8014c42:	18ff      	adds	r7, r7, r3
 8014c44:	4b2f      	ldr	r3, [pc, #188]	; (8014d04 <_strtod_l+0x5f4>)
 8014c46:	0032      	movs	r2, r6
 8014c48:	195d      	adds	r5, r3, r5
 8014c4a:	6828      	ldr	r0, [r5, #0]
 8014c4c:	6869      	ldr	r1, [r5, #4]
 8014c4e:	003b      	movs	r3, r7
 8014c50:	f7ec fd78 	bl	8001744 <__aeabi_dmul>
 8014c54:	4b25      	ldr	r3, [pc, #148]	; (8014cec <_strtod_l+0x5dc>)
 8014c56:	4a2c      	ldr	r2, [pc, #176]	; (8014d08 <_strtod_l+0x5f8>)
 8014c58:	0006      	movs	r6, r0
 8014c5a:	400b      	ands	r3, r1
 8014c5c:	4293      	cmp	r3, r2
 8014c5e:	d8c0      	bhi.n	8014be2 <_strtod_l+0x4d2>
 8014c60:	4a2a      	ldr	r2, [pc, #168]	; (8014d0c <_strtod_l+0x5fc>)
 8014c62:	4293      	cmp	r3, r2
 8014c64:	d913      	bls.n	8014c8e <_strtod_l+0x57e>
 8014c66:	2601      	movs	r6, #1
 8014c68:	4f29      	ldr	r7, [pc, #164]	; (8014d10 <_strtod_l+0x600>)
 8014c6a:	4276      	negs	r6, r6
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	9308      	str	r3, [sp, #32]
 8014c70:	e087      	b.n	8014d82 <_strtod_l+0x672>
 8014c72:	2201      	movs	r2, #1
 8014c74:	4214      	tst	r4, r2
 8014c76:	d007      	beq.n	8014c88 <_strtod_l+0x578>
 8014c78:	4a22      	ldr	r2, [pc, #136]	; (8014d04 <_strtod_l+0x5f4>)
 8014c7a:	00eb      	lsls	r3, r5, #3
 8014c7c:	189b      	adds	r3, r3, r2
 8014c7e:	681a      	ldr	r2, [r3, #0]
 8014c80:	685b      	ldr	r3, [r3, #4]
 8014c82:	f7ec fd5f 	bl	8001744 <__aeabi_dmul>
 8014c86:	2301      	movs	r3, #1
 8014c88:	3501      	adds	r5, #1
 8014c8a:	1064      	asrs	r4, r4, #1
 8014c8c:	e7d1      	b.n	8014c32 <_strtod_l+0x522>
 8014c8e:	23d4      	movs	r3, #212	; 0xd4
 8014c90:	049b      	lsls	r3, r3, #18
 8014c92:	18cf      	adds	r7, r1, r3
 8014c94:	e7ea      	b.n	8014c6c <_strtod_l+0x55c>
 8014c96:	2c00      	cmp	r4, #0
 8014c98:	d0e8      	beq.n	8014c6c <_strtod_l+0x55c>
 8014c9a:	4264      	negs	r4, r4
 8014c9c:	220f      	movs	r2, #15
 8014c9e:	0023      	movs	r3, r4
 8014ca0:	4013      	ands	r3, r2
 8014ca2:	4214      	tst	r4, r2
 8014ca4:	d00a      	beq.n	8014cbc <_strtod_l+0x5ac>
 8014ca6:	00da      	lsls	r2, r3, #3
 8014ca8:	4b14      	ldr	r3, [pc, #80]	; (8014cfc <_strtod_l+0x5ec>)
 8014caa:	0030      	movs	r0, r6
 8014cac:	189b      	adds	r3, r3, r2
 8014cae:	0039      	movs	r1, r7
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	685b      	ldr	r3, [r3, #4]
 8014cb4:	f7ec f940 	bl	8000f38 <__aeabi_ddiv>
 8014cb8:	0006      	movs	r6, r0
 8014cba:	000f      	movs	r7, r1
 8014cbc:	1124      	asrs	r4, r4, #4
 8014cbe:	d0d5      	beq.n	8014c6c <_strtod_l+0x55c>
 8014cc0:	2c1f      	cmp	r4, #31
 8014cc2:	dd27      	ble.n	8014d14 <_strtod_l+0x604>
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	9306      	str	r3, [sp, #24]
 8014cc8:	9307      	str	r3, [sp, #28]
 8014cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8014cce:	2322      	movs	r3, #34	; 0x22
 8014cd0:	9a05      	ldr	r2, [sp, #20]
 8014cd2:	2600      	movs	r6, #0
 8014cd4:	6013      	str	r3, [r2, #0]
 8014cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cd8:	2700      	movs	r7, #0
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d18f      	bne.n	8014bfe <_strtod_l+0x4ee>
 8014cde:	e55e      	b.n	801479e <_strtod_l+0x8e>
 8014ce0:	00004e1f 	.word	0x00004e1f
 8014ce4:	0801b82d 	.word	0x0801b82d
 8014ce8:	0801b8e4 	.word	0x0801b8e4
 8014cec:	7ff00000 	.word	0x7ff00000
 8014cf0:	0801b825 	.word	0x0801b825
 8014cf4:	0801b9c0 	.word	0x0801b9c0
 8014cf8:	0801b9bc 	.word	0x0801b9bc
 8014cfc:	0801bb40 	.word	0x0801bb40
 8014d00:	fcb00000 	.word	0xfcb00000
 8014d04:	0801bb18 	.word	0x0801bb18
 8014d08:	7ca00000 	.word	0x7ca00000
 8014d0c:	7c900000 	.word	0x7c900000
 8014d10:	7fefffff 	.word	0x7fefffff
 8014d14:	2310      	movs	r3, #16
 8014d16:	0022      	movs	r2, r4
 8014d18:	401a      	ands	r2, r3
 8014d1a:	9208      	str	r2, [sp, #32]
 8014d1c:	421c      	tst	r4, r3
 8014d1e:	d001      	beq.n	8014d24 <_strtod_l+0x614>
 8014d20:	335a      	adds	r3, #90	; 0x5a
 8014d22:	9308      	str	r3, [sp, #32]
 8014d24:	0030      	movs	r0, r6
 8014d26:	0039      	movs	r1, r7
 8014d28:	2300      	movs	r3, #0
 8014d2a:	4dca      	ldr	r5, [pc, #808]	; (8015054 <_strtod_l+0x944>)
 8014d2c:	2201      	movs	r2, #1
 8014d2e:	4214      	tst	r4, r2
 8014d30:	d004      	beq.n	8014d3c <_strtod_l+0x62c>
 8014d32:	682a      	ldr	r2, [r5, #0]
 8014d34:	686b      	ldr	r3, [r5, #4]
 8014d36:	f7ec fd05 	bl	8001744 <__aeabi_dmul>
 8014d3a:	2301      	movs	r3, #1
 8014d3c:	1064      	asrs	r4, r4, #1
 8014d3e:	3508      	adds	r5, #8
 8014d40:	2c00      	cmp	r4, #0
 8014d42:	d1f3      	bne.n	8014d2c <_strtod_l+0x61c>
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d001      	beq.n	8014d4c <_strtod_l+0x63c>
 8014d48:	0006      	movs	r6, r0
 8014d4a:	000f      	movs	r7, r1
 8014d4c:	9b08      	ldr	r3, [sp, #32]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d00f      	beq.n	8014d72 <_strtod_l+0x662>
 8014d52:	236b      	movs	r3, #107	; 0x6b
 8014d54:	0079      	lsls	r1, r7, #1
 8014d56:	0d49      	lsrs	r1, r1, #21
 8014d58:	003a      	movs	r2, r7
 8014d5a:	1a5b      	subs	r3, r3, r1
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	dd08      	ble.n	8014d72 <_strtod_l+0x662>
 8014d60:	2b1f      	cmp	r3, #31
 8014d62:	dc00      	bgt.n	8014d66 <_strtod_l+0x656>
 8014d64:	e126      	b.n	8014fb4 <_strtod_l+0x8a4>
 8014d66:	2600      	movs	r6, #0
 8014d68:	2b34      	cmp	r3, #52	; 0x34
 8014d6a:	dc00      	bgt.n	8014d6e <_strtod_l+0x65e>
 8014d6c:	e11b      	b.n	8014fa6 <_strtod_l+0x896>
 8014d6e:	27dc      	movs	r7, #220	; 0xdc
 8014d70:	04bf      	lsls	r7, r7, #18
 8014d72:	2200      	movs	r2, #0
 8014d74:	2300      	movs	r3, #0
 8014d76:	0030      	movs	r0, r6
 8014d78:	0039      	movs	r1, r7
 8014d7a:	f7eb fb6f 	bl	800045c <__aeabi_dcmpeq>
 8014d7e:	2800      	cmp	r0, #0
 8014d80:	d1a0      	bne.n	8014cc4 <_strtod_l+0x5b4>
 8014d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d86:	9300      	str	r3, [sp, #0]
 8014d88:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014d8a:	9b06      	ldr	r3, [sp, #24]
 8014d8c:	9805      	ldr	r0, [sp, #20]
 8014d8e:	f001 ff29 	bl	8016be4 <__s2b>
 8014d92:	900b      	str	r0, [sp, #44]	; 0x2c
 8014d94:	2800      	cmp	r0, #0
 8014d96:	d100      	bne.n	8014d9a <_strtod_l+0x68a>
 8014d98:	e723      	b.n	8014be2 <_strtod_l+0x4d2>
 8014d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d9c:	9907      	ldr	r1, [sp, #28]
 8014d9e:	17da      	asrs	r2, r3, #31
 8014da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014da2:	1a5b      	subs	r3, r3, r1
 8014da4:	401a      	ands	r2, r3
 8014da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014da8:	9215      	str	r2, [sp, #84]	; 0x54
 8014daa:	43db      	mvns	r3, r3
 8014dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014dae:	17db      	asrs	r3, r3, #31
 8014db0:	401a      	ands	r2, r3
 8014db2:	2300      	movs	r3, #0
 8014db4:	921c      	str	r2, [sp, #112]	; 0x70
 8014db6:	9306      	str	r3, [sp, #24]
 8014db8:	9307      	str	r3, [sp, #28]
 8014dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dbc:	9805      	ldr	r0, [sp, #20]
 8014dbe:	6859      	ldr	r1, [r3, #4]
 8014dc0:	f001 fe64 	bl	8016a8c <_Balloc>
 8014dc4:	9009      	str	r0, [sp, #36]	; 0x24
 8014dc6:	2800      	cmp	r0, #0
 8014dc8:	d100      	bne.n	8014dcc <_strtod_l+0x6bc>
 8014dca:	e70f      	b.n	8014bec <_strtod_l+0x4dc>
 8014dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dd0:	691b      	ldr	r3, [r3, #16]
 8014dd2:	310c      	adds	r1, #12
 8014dd4:	1c9a      	adds	r2, r3, #2
 8014dd6:	0092      	lsls	r2, r2, #2
 8014dd8:	300c      	adds	r0, #12
 8014dda:	930c      	str	r3, [sp, #48]	; 0x30
 8014ddc:	f7fe fc7e 	bl	80136dc <memcpy>
 8014de0:	ab24      	add	r3, sp, #144	; 0x90
 8014de2:	9301      	str	r3, [sp, #4]
 8014de4:	ab23      	add	r3, sp, #140	; 0x8c
 8014de6:	9300      	str	r3, [sp, #0]
 8014de8:	0032      	movs	r2, r6
 8014dea:	003b      	movs	r3, r7
 8014dec:	9805      	ldr	r0, [sp, #20]
 8014dee:	960e      	str	r6, [sp, #56]	; 0x38
 8014df0:	970f      	str	r7, [sp, #60]	; 0x3c
 8014df2:	f002 fa45 	bl	8017280 <__d2b>
 8014df6:	9022      	str	r0, [sp, #136]	; 0x88
 8014df8:	2800      	cmp	r0, #0
 8014dfa:	d100      	bne.n	8014dfe <_strtod_l+0x6ee>
 8014dfc:	e6f6      	b.n	8014bec <_strtod_l+0x4dc>
 8014dfe:	2101      	movs	r1, #1
 8014e00:	9805      	ldr	r0, [sp, #20]
 8014e02:	f001 ff83 	bl	8016d0c <__i2b>
 8014e06:	9007      	str	r0, [sp, #28]
 8014e08:	2800      	cmp	r0, #0
 8014e0a:	d100      	bne.n	8014e0e <_strtod_l+0x6fe>
 8014e0c:	e6ee      	b.n	8014bec <_strtod_l+0x4dc>
 8014e0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	da00      	bge.n	8014e16 <_strtod_l+0x706>
 8014e14:	e0d3      	b.n	8014fbe <_strtod_l+0x8ae>
 8014e16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014e18:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014e1a:	189d      	adds	r5, r3, r2
 8014e1c:	9908      	ldr	r1, [sp, #32]
 8014e1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014e20:	1a5b      	subs	r3, r3, r1
 8014e22:	2136      	movs	r1, #54	; 0x36
 8014e24:	189b      	adds	r3, r3, r2
 8014e26:	1a8a      	subs	r2, r1, r2
 8014e28:	498b      	ldr	r1, [pc, #556]	; (8015058 <_strtod_l+0x948>)
 8014e2a:	3b01      	subs	r3, #1
 8014e2c:	2001      	movs	r0, #1
 8014e2e:	428b      	cmp	r3, r1
 8014e30:	db00      	blt.n	8014e34 <_strtod_l+0x724>
 8014e32:	e0cf      	b.n	8014fd4 <_strtod_l+0x8c4>
 8014e34:	1ac9      	subs	r1, r1, r3
 8014e36:	1a52      	subs	r2, r2, r1
 8014e38:	291f      	cmp	r1, #31
 8014e3a:	dd00      	ble.n	8014e3e <_strtod_l+0x72e>
 8014e3c:	e0c3      	b.n	8014fc6 <_strtod_l+0x8b6>
 8014e3e:	4088      	lsls	r0, r1
 8014e40:	2300      	movs	r3, #0
 8014e42:	9014      	str	r0, [sp, #80]	; 0x50
 8014e44:	9312      	str	r3, [sp, #72]	; 0x48
 8014e46:	18ab      	adds	r3, r5, r2
 8014e48:	930c      	str	r3, [sp, #48]	; 0x30
 8014e4a:	18a4      	adds	r4, r4, r2
 8014e4c:	9b08      	ldr	r3, [sp, #32]
 8014e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e50:	191c      	adds	r4, r3, r4
 8014e52:	002b      	movs	r3, r5
 8014e54:	4295      	cmp	r5, r2
 8014e56:	dd00      	ble.n	8014e5a <_strtod_l+0x74a>
 8014e58:	0013      	movs	r3, r2
 8014e5a:	42a3      	cmp	r3, r4
 8014e5c:	dd00      	ble.n	8014e60 <_strtod_l+0x750>
 8014e5e:	0023      	movs	r3, r4
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	dd04      	ble.n	8014e6e <_strtod_l+0x75e>
 8014e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e66:	1ae4      	subs	r4, r4, r3
 8014e68:	1ad2      	subs	r2, r2, r3
 8014e6a:	920c      	str	r2, [sp, #48]	; 0x30
 8014e6c:	1aed      	subs	r5, r5, r3
 8014e6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	dd17      	ble.n	8014ea4 <_strtod_l+0x794>
 8014e74:	001a      	movs	r2, r3
 8014e76:	9907      	ldr	r1, [sp, #28]
 8014e78:	9805      	ldr	r0, [sp, #20]
 8014e7a:	f002 f80d 	bl	8016e98 <__pow5mult>
 8014e7e:	9007      	str	r0, [sp, #28]
 8014e80:	2800      	cmp	r0, #0
 8014e82:	d100      	bne.n	8014e86 <_strtod_l+0x776>
 8014e84:	e6b2      	b.n	8014bec <_strtod_l+0x4dc>
 8014e86:	0001      	movs	r1, r0
 8014e88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014e8a:	9805      	ldr	r0, [sp, #20]
 8014e8c:	f001 ff54 	bl	8016d38 <__multiply>
 8014e90:	9011      	str	r0, [sp, #68]	; 0x44
 8014e92:	2800      	cmp	r0, #0
 8014e94:	d100      	bne.n	8014e98 <_strtod_l+0x788>
 8014e96:	e6a9      	b.n	8014bec <_strtod_l+0x4dc>
 8014e98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014e9a:	9805      	ldr	r0, [sp, #20]
 8014e9c:	f001 fe3a 	bl	8016b14 <_Bfree>
 8014ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ea2:	9322      	str	r3, [sp, #136]	; 0x88
 8014ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	dd00      	ble.n	8014eac <_strtod_l+0x79c>
 8014eaa:	e096      	b.n	8014fda <_strtod_l+0x8ca>
 8014eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	dd08      	ble.n	8014ec4 <_strtod_l+0x7b4>
 8014eb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014eb6:	9805      	ldr	r0, [sp, #20]
 8014eb8:	f001 ffee 	bl	8016e98 <__pow5mult>
 8014ebc:	9009      	str	r0, [sp, #36]	; 0x24
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d100      	bne.n	8014ec4 <_strtod_l+0x7b4>
 8014ec2:	e693      	b.n	8014bec <_strtod_l+0x4dc>
 8014ec4:	2c00      	cmp	r4, #0
 8014ec6:	dd08      	ble.n	8014eda <_strtod_l+0x7ca>
 8014ec8:	0022      	movs	r2, r4
 8014eca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ecc:	9805      	ldr	r0, [sp, #20]
 8014ece:	f002 f83f 	bl	8016f50 <__lshift>
 8014ed2:	9009      	str	r0, [sp, #36]	; 0x24
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	d100      	bne.n	8014eda <_strtod_l+0x7ca>
 8014ed8:	e688      	b.n	8014bec <_strtod_l+0x4dc>
 8014eda:	2d00      	cmp	r5, #0
 8014edc:	dd08      	ble.n	8014ef0 <_strtod_l+0x7e0>
 8014ede:	002a      	movs	r2, r5
 8014ee0:	9907      	ldr	r1, [sp, #28]
 8014ee2:	9805      	ldr	r0, [sp, #20]
 8014ee4:	f002 f834 	bl	8016f50 <__lshift>
 8014ee8:	9007      	str	r0, [sp, #28]
 8014eea:	2800      	cmp	r0, #0
 8014eec:	d100      	bne.n	8014ef0 <_strtod_l+0x7e0>
 8014eee:	e67d      	b.n	8014bec <_strtod_l+0x4dc>
 8014ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ef2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014ef4:	9805      	ldr	r0, [sp, #20]
 8014ef6:	f002 f8b7 	bl	8017068 <__mdiff>
 8014efa:	9006      	str	r0, [sp, #24]
 8014efc:	2800      	cmp	r0, #0
 8014efe:	d100      	bne.n	8014f02 <_strtod_l+0x7f2>
 8014f00:	e674      	b.n	8014bec <_strtod_l+0x4dc>
 8014f02:	2200      	movs	r2, #0
 8014f04:	68c3      	ldr	r3, [r0, #12]
 8014f06:	9907      	ldr	r1, [sp, #28]
 8014f08:	60c2      	str	r2, [r0, #12]
 8014f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8014f0c:	f002 f890 	bl	8017030 <__mcmp>
 8014f10:	2800      	cmp	r0, #0
 8014f12:	da6c      	bge.n	8014fee <_strtod_l+0x8de>
 8014f14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f16:	4333      	orrs	r3, r6
 8014f18:	d000      	beq.n	8014f1c <_strtod_l+0x80c>
 8014f1a:	e097      	b.n	801504c <_strtod_l+0x93c>
 8014f1c:	033b      	lsls	r3, r7, #12
 8014f1e:	d000      	beq.n	8014f22 <_strtod_l+0x812>
 8014f20:	e094      	b.n	801504c <_strtod_l+0x93c>
 8014f22:	22d6      	movs	r2, #214	; 0xd6
 8014f24:	4b4d      	ldr	r3, [pc, #308]	; (801505c <_strtod_l+0x94c>)
 8014f26:	04d2      	lsls	r2, r2, #19
 8014f28:	403b      	ands	r3, r7
 8014f2a:	4293      	cmp	r3, r2
 8014f2c:	d800      	bhi.n	8014f30 <_strtod_l+0x820>
 8014f2e:	e08d      	b.n	801504c <_strtod_l+0x93c>
 8014f30:	9b06      	ldr	r3, [sp, #24]
 8014f32:	695b      	ldr	r3, [r3, #20]
 8014f34:	930a      	str	r3, [sp, #40]	; 0x28
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d105      	bne.n	8014f46 <_strtod_l+0x836>
 8014f3a:	9b06      	ldr	r3, [sp, #24]
 8014f3c:	691b      	ldr	r3, [r3, #16]
 8014f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8014f40:	2b01      	cmp	r3, #1
 8014f42:	dc00      	bgt.n	8014f46 <_strtod_l+0x836>
 8014f44:	e082      	b.n	801504c <_strtod_l+0x93c>
 8014f46:	9906      	ldr	r1, [sp, #24]
 8014f48:	2201      	movs	r2, #1
 8014f4a:	9805      	ldr	r0, [sp, #20]
 8014f4c:	f002 f800 	bl	8016f50 <__lshift>
 8014f50:	9907      	ldr	r1, [sp, #28]
 8014f52:	9006      	str	r0, [sp, #24]
 8014f54:	f002 f86c 	bl	8017030 <__mcmp>
 8014f58:	2800      	cmp	r0, #0
 8014f5a:	dd77      	ble.n	801504c <_strtod_l+0x93c>
 8014f5c:	9908      	ldr	r1, [sp, #32]
 8014f5e:	003b      	movs	r3, r7
 8014f60:	4a3e      	ldr	r2, [pc, #248]	; (801505c <_strtod_l+0x94c>)
 8014f62:	2900      	cmp	r1, #0
 8014f64:	d100      	bne.n	8014f68 <_strtod_l+0x858>
 8014f66:	e09e      	b.n	80150a6 <_strtod_l+0x996>
 8014f68:	0011      	movs	r1, r2
 8014f6a:	20d6      	movs	r0, #214	; 0xd6
 8014f6c:	4039      	ands	r1, r7
 8014f6e:	04c0      	lsls	r0, r0, #19
 8014f70:	4281      	cmp	r1, r0
 8014f72:	dd00      	ble.n	8014f76 <_strtod_l+0x866>
 8014f74:	e097      	b.n	80150a6 <_strtod_l+0x996>
 8014f76:	23dc      	movs	r3, #220	; 0xdc
 8014f78:	049b      	lsls	r3, r3, #18
 8014f7a:	4299      	cmp	r1, r3
 8014f7c:	dc00      	bgt.n	8014f80 <_strtod_l+0x870>
 8014f7e:	e6a6      	b.n	8014cce <_strtod_l+0x5be>
 8014f80:	4b37      	ldr	r3, [pc, #220]	; (8015060 <_strtod_l+0x950>)
 8014f82:	0030      	movs	r0, r6
 8014f84:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f86:	2300      	movs	r3, #0
 8014f88:	931a      	str	r3, [sp, #104]	; 0x68
 8014f8a:	0039      	movs	r1, r7
 8014f8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014f8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f90:	f7ec fbd8 	bl	8001744 <__aeabi_dmul>
 8014f94:	0006      	movs	r6, r0
 8014f96:	000f      	movs	r7, r1
 8014f98:	4308      	orrs	r0, r1
 8014f9a:	d000      	beq.n	8014f9e <_strtod_l+0x88e>
 8014f9c:	e62f      	b.n	8014bfe <_strtod_l+0x4ee>
 8014f9e:	2322      	movs	r3, #34	; 0x22
 8014fa0:	9a05      	ldr	r2, [sp, #20]
 8014fa2:	6013      	str	r3, [r2, #0]
 8014fa4:	e62b      	b.n	8014bfe <_strtod_l+0x4ee>
 8014fa6:	2101      	movs	r1, #1
 8014fa8:	3b20      	subs	r3, #32
 8014faa:	4249      	negs	r1, r1
 8014fac:	4099      	lsls	r1, r3
 8014fae:	400a      	ands	r2, r1
 8014fb0:	0017      	movs	r7, r2
 8014fb2:	e6de      	b.n	8014d72 <_strtod_l+0x662>
 8014fb4:	2201      	movs	r2, #1
 8014fb6:	4252      	negs	r2, r2
 8014fb8:	409a      	lsls	r2, r3
 8014fba:	4016      	ands	r6, r2
 8014fbc:	e6d9      	b.n	8014d72 <_strtod_l+0x662>
 8014fbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014fc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014fc2:	1ad4      	subs	r4, r2, r3
 8014fc4:	e72a      	b.n	8014e1c <_strtod_l+0x70c>
 8014fc6:	4927      	ldr	r1, [pc, #156]	; (8015064 <_strtod_l+0x954>)
 8014fc8:	1acb      	subs	r3, r1, r3
 8014fca:	0001      	movs	r1, r0
 8014fcc:	4099      	lsls	r1, r3
 8014fce:	9112      	str	r1, [sp, #72]	; 0x48
 8014fd0:	9014      	str	r0, [sp, #80]	; 0x50
 8014fd2:	e738      	b.n	8014e46 <_strtod_l+0x736>
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	9312      	str	r3, [sp, #72]	; 0x48
 8014fd8:	e7fa      	b.n	8014fd0 <_strtod_l+0x8c0>
 8014fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014fdc:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014fde:	9805      	ldr	r0, [sp, #20]
 8014fe0:	f001 ffb6 	bl	8016f50 <__lshift>
 8014fe4:	9022      	str	r0, [sp, #136]	; 0x88
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d000      	beq.n	8014fec <_strtod_l+0x8dc>
 8014fea:	e75f      	b.n	8014eac <_strtod_l+0x79c>
 8014fec:	e5fe      	b.n	8014bec <_strtod_l+0x4dc>
 8014fee:	970c      	str	r7, [sp, #48]	; 0x30
 8014ff0:	2800      	cmp	r0, #0
 8014ff2:	d176      	bne.n	80150e2 <_strtod_l+0x9d2>
 8014ff4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014ff6:	033b      	lsls	r3, r7, #12
 8014ff8:	0b1b      	lsrs	r3, r3, #12
 8014ffa:	2a00      	cmp	r2, #0
 8014ffc:	d038      	beq.n	8015070 <_strtod_l+0x960>
 8014ffe:	4a1a      	ldr	r2, [pc, #104]	; (8015068 <_strtod_l+0x958>)
 8015000:	4293      	cmp	r3, r2
 8015002:	d138      	bne.n	8015076 <_strtod_l+0x966>
 8015004:	2201      	movs	r2, #1
 8015006:	9b08      	ldr	r3, [sp, #32]
 8015008:	4252      	negs	r2, r2
 801500a:	0031      	movs	r1, r6
 801500c:	0010      	movs	r0, r2
 801500e:	2b00      	cmp	r3, #0
 8015010:	d00b      	beq.n	801502a <_strtod_l+0x91a>
 8015012:	24d4      	movs	r4, #212	; 0xd4
 8015014:	4b11      	ldr	r3, [pc, #68]	; (801505c <_strtod_l+0x94c>)
 8015016:	0010      	movs	r0, r2
 8015018:	403b      	ands	r3, r7
 801501a:	04e4      	lsls	r4, r4, #19
 801501c:	42a3      	cmp	r3, r4
 801501e:	d804      	bhi.n	801502a <_strtod_l+0x91a>
 8015020:	306c      	adds	r0, #108	; 0x6c
 8015022:	0d1b      	lsrs	r3, r3, #20
 8015024:	1ac3      	subs	r3, r0, r3
 8015026:	409a      	lsls	r2, r3
 8015028:	0010      	movs	r0, r2
 801502a:	4281      	cmp	r1, r0
 801502c:	d123      	bne.n	8015076 <_strtod_l+0x966>
 801502e:	4b0f      	ldr	r3, [pc, #60]	; (801506c <_strtod_l+0x95c>)
 8015030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015032:	429a      	cmp	r2, r3
 8015034:	d102      	bne.n	801503c <_strtod_l+0x92c>
 8015036:	1c4b      	adds	r3, r1, #1
 8015038:	d100      	bne.n	801503c <_strtod_l+0x92c>
 801503a:	e5d7      	b.n	8014bec <_strtod_l+0x4dc>
 801503c:	4b07      	ldr	r3, [pc, #28]	; (801505c <_strtod_l+0x94c>)
 801503e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015040:	2600      	movs	r6, #0
 8015042:	401a      	ands	r2, r3
 8015044:	0013      	movs	r3, r2
 8015046:	2280      	movs	r2, #128	; 0x80
 8015048:	0352      	lsls	r2, r2, #13
 801504a:	189f      	adds	r7, r3, r2
 801504c:	9b08      	ldr	r3, [sp, #32]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d196      	bne.n	8014f80 <_strtod_l+0x870>
 8015052:	e5d4      	b.n	8014bfe <_strtod_l+0x4ee>
 8015054:	0801b8f8 	.word	0x0801b8f8
 8015058:	fffffc02 	.word	0xfffffc02
 801505c:	7ff00000 	.word	0x7ff00000
 8015060:	39500000 	.word	0x39500000
 8015064:	fffffbe2 	.word	0xfffffbe2
 8015068:	000fffff 	.word	0x000fffff
 801506c:	7fefffff 	.word	0x7fefffff
 8015070:	4333      	orrs	r3, r6
 8015072:	d100      	bne.n	8015076 <_strtod_l+0x966>
 8015074:	e772      	b.n	8014f5c <_strtod_l+0x84c>
 8015076:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015078:	2b00      	cmp	r3, #0
 801507a:	d01d      	beq.n	80150b8 <_strtod_l+0x9a8>
 801507c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801507e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015080:	4213      	tst	r3, r2
 8015082:	d0e3      	beq.n	801504c <_strtod_l+0x93c>
 8015084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015086:	0030      	movs	r0, r6
 8015088:	0039      	movs	r1, r7
 801508a:	9a08      	ldr	r2, [sp, #32]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d017      	beq.n	80150c0 <_strtod_l+0x9b0>
 8015090:	f7ff fb26 	bl	80146e0 <sulp>
 8015094:	0002      	movs	r2, r0
 8015096:	000b      	movs	r3, r1
 8015098:	980e      	ldr	r0, [sp, #56]	; 0x38
 801509a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801509c:	f7eb fbe2 	bl	8000864 <__aeabi_dadd>
 80150a0:	0006      	movs	r6, r0
 80150a2:	000f      	movs	r7, r1
 80150a4:	e7d2      	b.n	801504c <_strtod_l+0x93c>
 80150a6:	2601      	movs	r6, #1
 80150a8:	4013      	ands	r3, r2
 80150aa:	4a9b      	ldr	r2, [pc, #620]	; (8015318 <_strtod_l+0xc08>)
 80150ac:	4276      	negs	r6, r6
 80150ae:	189b      	adds	r3, r3, r2
 80150b0:	4a9a      	ldr	r2, [pc, #616]	; (801531c <_strtod_l+0xc0c>)
 80150b2:	431a      	orrs	r2, r3
 80150b4:	0017      	movs	r7, r2
 80150b6:	e7c9      	b.n	801504c <_strtod_l+0x93c>
 80150b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80150ba:	4233      	tst	r3, r6
 80150bc:	d0c6      	beq.n	801504c <_strtod_l+0x93c>
 80150be:	e7e1      	b.n	8015084 <_strtod_l+0x974>
 80150c0:	f7ff fb0e 	bl	80146e0 <sulp>
 80150c4:	0002      	movs	r2, r0
 80150c6:	000b      	movs	r3, r1
 80150c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80150ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80150cc:	f7ec fda6 	bl	8001c1c <__aeabi_dsub>
 80150d0:	2200      	movs	r2, #0
 80150d2:	2300      	movs	r3, #0
 80150d4:	0006      	movs	r6, r0
 80150d6:	000f      	movs	r7, r1
 80150d8:	f7eb f9c0 	bl	800045c <__aeabi_dcmpeq>
 80150dc:	2800      	cmp	r0, #0
 80150de:	d0b5      	beq.n	801504c <_strtod_l+0x93c>
 80150e0:	e5f5      	b.n	8014cce <_strtod_l+0x5be>
 80150e2:	9907      	ldr	r1, [sp, #28]
 80150e4:	9806      	ldr	r0, [sp, #24]
 80150e6:	f002 f92f 	bl	8017348 <__ratio>
 80150ea:	2380      	movs	r3, #128	; 0x80
 80150ec:	2200      	movs	r2, #0
 80150ee:	05db      	lsls	r3, r3, #23
 80150f0:	0004      	movs	r4, r0
 80150f2:	000d      	movs	r5, r1
 80150f4:	f7eb f9c2 	bl	800047c <__aeabi_dcmple>
 80150f8:	2800      	cmp	r0, #0
 80150fa:	d079      	beq.n	80151f0 <_strtod_l+0xae0>
 80150fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d04b      	beq.n	801519a <_strtod_l+0xa8a>
 8015102:	2300      	movs	r3, #0
 8015104:	4c86      	ldr	r4, [pc, #536]	; (8015320 <_strtod_l+0xc10>)
 8015106:	2500      	movs	r5, #0
 8015108:	9312      	str	r3, [sp, #72]	; 0x48
 801510a:	9413      	str	r4, [sp, #76]	; 0x4c
 801510c:	4c84      	ldr	r4, [pc, #528]	; (8015320 <_strtod_l+0xc10>)
 801510e:	4a85      	ldr	r2, [pc, #532]	; (8015324 <_strtod_l+0xc14>)
 8015110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015112:	4013      	ands	r3, r2
 8015114:	9314      	str	r3, [sp, #80]	; 0x50
 8015116:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015118:	4b83      	ldr	r3, [pc, #524]	; (8015328 <_strtod_l+0xc18>)
 801511a:	429a      	cmp	r2, r3
 801511c:	d000      	beq.n	8015120 <_strtod_l+0xa10>
 801511e:	e0b0      	b.n	8015282 <_strtod_l+0xb72>
 8015120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015124:	921a      	str	r2, [sp, #104]	; 0x68
 8015126:	931b      	str	r3, [sp, #108]	; 0x6c
 8015128:	4a80      	ldr	r2, [pc, #512]	; (801532c <_strtod_l+0xc1c>)
 801512a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801512c:	4694      	mov	ip, r2
 801512e:	4463      	add	r3, ip
 8015130:	001f      	movs	r7, r3
 8015132:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015134:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015136:	0030      	movs	r0, r6
 8015138:	0039      	movs	r1, r7
 801513a:	920c      	str	r2, [sp, #48]	; 0x30
 801513c:	930d      	str	r3, [sp, #52]	; 0x34
 801513e:	f002 f82b 	bl	8017198 <__ulp>
 8015142:	0002      	movs	r2, r0
 8015144:	000b      	movs	r3, r1
 8015146:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015148:	990d      	ldr	r1, [sp, #52]	; 0x34
 801514a:	f7ec fafb 	bl	8001744 <__aeabi_dmul>
 801514e:	0032      	movs	r2, r6
 8015150:	003b      	movs	r3, r7
 8015152:	f7eb fb87 	bl	8000864 <__aeabi_dadd>
 8015156:	4a73      	ldr	r2, [pc, #460]	; (8015324 <_strtod_l+0xc14>)
 8015158:	4b75      	ldr	r3, [pc, #468]	; (8015330 <_strtod_l+0xc20>)
 801515a:	0006      	movs	r6, r0
 801515c:	400a      	ands	r2, r1
 801515e:	429a      	cmp	r2, r3
 8015160:	d95e      	bls.n	8015220 <_strtod_l+0xb10>
 8015162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015164:	4a73      	ldr	r2, [pc, #460]	; (8015334 <_strtod_l+0xc24>)
 8015166:	4293      	cmp	r3, r2
 8015168:	d103      	bne.n	8015172 <_strtod_l+0xa62>
 801516a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801516c:	3301      	adds	r3, #1
 801516e:	d100      	bne.n	8015172 <_strtod_l+0xa62>
 8015170:	e53c      	b.n	8014bec <_strtod_l+0x4dc>
 8015172:	2601      	movs	r6, #1
 8015174:	4f6f      	ldr	r7, [pc, #444]	; (8015334 <_strtod_l+0xc24>)
 8015176:	4276      	negs	r6, r6
 8015178:	9922      	ldr	r1, [sp, #136]	; 0x88
 801517a:	9805      	ldr	r0, [sp, #20]
 801517c:	f001 fcca 	bl	8016b14 <_Bfree>
 8015180:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015182:	9805      	ldr	r0, [sp, #20]
 8015184:	f001 fcc6 	bl	8016b14 <_Bfree>
 8015188:	9907      	ldr	r1, [sp, #28]
 801518a:	9805      	ldr	r0, [sp, #20]
 801518c:	f001 fcc2 	bl	8016b14 <_Bfree>
 8015190:	9906      	ldr	r1, [sp, #24]
 8015192:	9805      	ldr	r0, [sp, #20]
 8015194:	f001 fcbe 	bl	8016b14 <_Bfree>
 8015198:	e60f      	b.n	8014dba <_strtod_l+0x6aa>
 801519a:	2e00      	cmp	r6, #0
 801519c:	d11c      	bne.n	80151d8 <_strtod_l+0xac8>
 801519e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151a0:	031b      	lsls	r3, r3, #12
 80151a2:	d11f      	bne.n	80151e4 <_strtod_l+0xad4>
 80151a4:	2200      	movs	r2, #0
 80151a6:	0020      	movs	r0, r4
 80151a8:	0029      	movs	r1, r5
 80151aa:	4b5d      	ldr	r3, [pc, #372]	; (8015320 <_strtod_l+0xc10>)
 80151ac:	f7eb f95c 	bl	8000468 <__aeabi_dcmplt>
 80151b0:	2800      	cmp	r0, #0
 80151b2:	d11a      	bne.n	80151ea <_strtod_l+0xada>
 80151b4:	0020      	movs	r0, r4
 80151b6:	0029      	movs	r1, r5
 80151b8:	2200      	movs	r2, #0
 80151ba:	4b5f      	ldr	r3, [pc, #380]	; (8015338 <_strtod_l+0xc28>)
 80151bc:	f7ec fac2 	bl	8001744 <__aeabi_dmul>
 80151c0:	0005      	movs	r5, r0
 80151c2:	000c      	movs	r4, r1
 80151c4:	2380      	movs	r3, #128	; 0x80
 80151c6:	061b      	lsls	r3, r3, #24
 80151c8:	18e3      	adds	r3, r4, r3
 80151ca:	951e      	str	r5, [sp, #120]	; 0x78
 80151cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80151ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80151d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80151d2:	9212      	str	r2, [sp, #72]	; 0x48
 80151d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80151d6:	e79a      	b.n	801510e <_strtod_l+0x9fe>
 80151d8:	2e01      	cmp	r6, #1
 80151da:	d103      	bne.n	80151e4 <_strtod_l+0xad4>
 80151dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d100      	bne.n	80151e4 <_strtod_l+0xad4>
 80151e2:	e574      	b.n	8014cce <_strtod_l+0x5be>
 80151e4:	2300      	movs	r3, #0
 80151e6:	4c55      	ldr	r4, [pc, #340]	; (801533c <_strtod_l+0xc2c>)
 80151e8:	e78d      	b.n	8015106 <_strtod_l+0x9f6>
 80151ea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80151ec:	4c52      	ldr	r4, [pc, #328]	; (8015338 <_strtod_l+0xc28>)
 80151ee:	e7e9      	b.n	80151c4 <_strtod_l+0xab4>
 80151f0:	2200      	movs	r2, #0
 80151f2:	0020      	movs	r0, r4
 80151f4:	0029      	movs	r1, r5
 80151f6:	4b50      	ldr	r3, [pc, #320]	; (8015338 <_strtod_l+0xc28>)
 80151f8:	f7ec faa4 	bl	8001744 <__aeabi_dmul>
 80151fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80151fe:	0005      	movs	r5, r0
 8015200:	000b      	movs	r3, r1
 8015202:	000c      	movs	r4, r1
 8015204:	2a00      	cmp	r2, #0
 8015206:	d107      	bne.n	8015218 <_strtod_l+0xb08>
 8015208:	2280      	movs	r2, #128	; 0x80
 801520a:	0612      	lsls	r2, r2, #24
 801520c:	188b      	adds	r3, r1, r2
 801520e:	9016      	str	r0, [sp, #88]	; 0x58
 8015210:	9317      	str	r3, [sp, #92]	; 0x5c
 8015212:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015216:	e7dc      	b.n	80151d2 <_strtod_l+0xac2>
 8015218:	0002      	movs	r2, r0
 801521a:	9216      	str	r2, [sp, #88]	; 0x58
 801521c:	9317      	str	r3, [sp, #92]	; 0x5c
 801521e:	e7f8      	b.n	8015212 <_strtod_l+0xb02>
 8015220:	23d4      	movs	r3, #212	; 0xd4
 8015222:	049b      	lsls	r3, r3, #18
 8015224:	18cf      	adds	r7, r1, r3
 8015226:	9b08      	ldr	r3, [sp, #32]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d1a5      	bne.n	8015178 <_strtod_l+0xa68>
 801522c:	4b3d      	ldr	r3, [pc, #244]	; (8015324 <_strtod_l+0xc14>)
 801522e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015230:	403b      	ands	r3, r7
 8015232:	429a      	cmp	r2, r3
 8015234:	d1a0      	bne.n	8015178 <_strtod_l+0xa68>
 8015236:	0028      	movs	r0, r5
 8015238:	0021      	movs	r1, r4
 801523a:	f7eb f9c7 	bl	80005cc <__aeabi_d2lz>
 801523e:	f7eb fa01 	bl	8000644 <__aeabi_l2d>
 8015242:	0002      	movs	r2, r0
 8015244:	000b      	movs	r3, r1
 8015246:	0028      	movs	r0, r5
 8015248:	0021      	movs	r1, r4
 801524a:	f7ec fce7 	bl	8001c1c <__aeabi_dsub>
 801524e:	033b      	lsls	r3, r7, #12
 8015250:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015252:	0b1b      	lsrs	r3, r3, #12
 8015254:	4333      	orrs	r3, r6
 8015256:	4313      	orrs	r3, r2
 8015258:	0004      	movs	r4, r0
 801525a:	000d      	movs	r5, r1
 801525c:	4a38      	ldr	r2, [pc, #224]	; (8015340 <_strtod_l+0xc30>)
 801525e:	2b00      	cmp	r3, #0
 8015260:	d055      	beq.n	801530e <_strtod_l+0xbfe>
 8015262:	4b38      	ldr	r3, [pc, #224]	; (8015344 <_strtod_l+0xc34>)
 8015264:	f7eb f900 	bl	8000468 <__aeabi_dcmplt>
 8015268:	2800      	cmp	r0, #0
 801526a:	d000      	beq.n	801526e <_strtod_l+0xb5e>
 801526c:	e4c7      	b.n	8014bfe <_strtod_l+0x4ee>
 801526e:	0020      	movs	r0, r4
 8015270:	0029      	movs	r1, r5
 8015272:	4a35      	ldr	r2, [pc, #212]	; (8015348 <_strtod_l+0xc38>)
 8015274:	4b30      	ldr	r3, [pc, #192]	; (8015338 <_strtod_l+0xc28>)
 8015276:	f7eb f90b 	bl	8000490 <__aeabi_dcmpgt>
 801527a:	2800      	cmp	r0, #0
 801527c:	d100      	bne.n	8015280 <_strtod_l+0xb70>
 801527e:	e77b      	b.n	8015178 <_strtod_l+0xa68>
 8015280:	e4bd      	b.n	8014bfe <_strtod_l+0x4ee>
 8015282:	9b08      	ldr	r3, [sp, #32]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d02b      	beq.n	80152e0 <_strtod_l+0xbd0>
 8015288:	23d4      	movs	r3, #212	; 0xd4
 801528a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801528c:	04db      	lsls	r3, r3, #19
 801528e:	429a      	cmp	r2, r3
 8015290:	d826      	bhi.n	80152e0 <_strtod_l+0xbd0>
 8015292:	0028      	movs	r0, r5
 8015294:	0021      	movs	r1, r4
 8015296:	4a2d      	ldr	r2, [pc, #180]	; (801534c <_strtod_l+0xc3c>)
 8015298:	4b2d      	ldr	r3, [pc, #180]	; (8015350 <_strtod_l+0xc40>)
 801529a:	f7eb f8ef 	bl	800047c <__aeabi_dcmple>
 801529e:	2800      	cmp	r0, #0
 80152a0:	d017      	beq.n	80152d2 <_strtod_l+0xbc2>
 80152a2:	0028      	movs	r0, r5
 80152a4:	0021      	movs	r1, r4
 80152a6:	f7eb f973 	bl	8000590 <__aeabi_d2uiz>
 80152aa:	2800      	cmp	r0, #0
 80152ac:	d100      	bne.n	80152b0 <_strtod_l+0xba0>
 80152ae:	3001      	adds	r0, #1
 80152b0:	f7ed f8ca 	bl	8002448 <__aeabi_ui2d>
 80152b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80152b6:	0005      	movs	r5, r0
 80152b8:	000b      	movs	r3, r1
 80152ba:	000c      	movs	r4, r1
 80152bc:	2a00      	cmp	r2, #0
 80152be:	d122      	bne.n	8015306 <_strtod_l+0xbf6>
 80152c0:	2280      	movs	r2, #128	; 0x80
 80152c2:	0612      	lsls	r2, r2, #24
 80152c4:	188b      	adds	r3, r1, r2
 80152c6:	9018      	str	r0, [sp, #96]	; 0x60
 80152c8:	9319      	str	r3, [sp, #100]	; 0x64
 80152ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80152cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80152ce:	9212      	str	r2, [sp, #72]	; 0x48
 80152d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80152d2:	22d6      	movs	r2, #214	; 0xd6
 80152d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152d6:	04d2      	lsls	r2, r2, #19
 80152d8:	189b      	adds	r3, r3, r2
 80152da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152dc:	1a9b      	subs	r3, r3, r2
 80152de:	9313      	str	r3, [sp, #76]	; 0x4c
 80152e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80152e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80152e4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80152e6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80152e8:	f001 ff56 	bl	8017198 <__ulp>
 80152ec:	0002      	movs	r2, r0
 80152ee:	000b      	movs	r3, r1
 80152f0:	0030      	movs	r0, r6
 80152f2:	0039      	movs	r1, r7
 80152f4:	f7ec fa26 	bl	8001744 <__aeabi_dmul>
 80152f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152fc:	f7eb fab2 	bl	8000864 <__aeabi_dadd>
 8015300:	0006      	movs	r6, r0
 8015302:	000f      	movs	r7, r1
 8015304:	e78f      	b.n	8015226 <_strtod_l+0xb16>
 8015306:	0002      	movs	r2, r0
 8015308:	9218      	str	r2, [sp, #96]	; 0x60
 801530a:	9319      	str	r3, [sp, #100]	; 0x64
 801530c:	e7dd      	b.n	80152ca <_strtod_l+0xbba>
 801530e:	4b11      	ldr	r3, [pc, #68]	; (8015354 <_strtod_l+0xc44>)
 8015310:	f7eb f8aa 	bl	8000468 <__aeabi_dcmplt>
 8015314:	e7b1      	b.n	801527a <_strtod_l+0xb6a>
 8015316:	46c0      	nop			; (mov r8, r8)
 8015318:	fff00000 	.word	0xfff00000
 801531c:	000fffff 	.word	0x000fffff
 8015320:	3ff00000 	.word	0x3ff00000
 8015324:	7ff00000 	.word	0x7ff00000
 8015328:	7fe00000 	.word	0x7fe00000
 801532c:	fcb00000 	.word	0xfcb00000
 8015330:	7c9fffff 	.word	0x7c9fffff
 8015334:	7fefffff 	.word	0x7fefffff
 8015338:	3fe00000 	.word	0x3fe00000
 801533c:	bff00000 	.word	0xbff00000
 8015340:	94a03595 	.word	0x94a03595
 8015344:	3fdfffff 	.word	0x3fdfffff
 8015348:	35afe535 	.word	0x35afe535
 801534c:	ffc00000 	.word	0xffc00000
 8015350:	41dfffff 	.word	0x41dfffff
 8015354:	3fcfffff 	.word	0x3fcfffff

08015358 <_strtod_r>:
 8015358:	b510      	push	{r4, lr}
 801535a:	4b02      	ldr	r3, [pc, #8]	; (8015364 <_strtod_r+0xc>)
 801535c:	f7ff f9d8 	bl	8014710 <_strtod_l>
 8015360:	bd10      	pop	{r4, pc}
 8015362:	46c0      	nop			; (mov r8, r8)
 8015364:	20000148 	.word	0x20000148

08015368 <strtod>:
 8015368:	b510      	push	{r4, lr}
 801536a:	000a      	movs	r2, r1
 801536c:	0001      	movs	r1, r0
 801536e:	4803      	ldr	r0, [pc, #12]	; (801537c <strtod+0x14>)
 8015370:	4b03      	ldr	r3, [pc, #12]	; (8015380 <strtod+0x18>)
 8015372:	6800      	ldr	r0, [r0, #0]
 8015374:	f7ff f9cc 	bl	8014710 <_strtod_l>
 8015378:	bd10      	pop	{r4, pc}
 801537a:	46c0      	nop			; (mov r8, r8)
 801537c:	200000e0 	.word	0x200000e0
 8015380:	20000148 	.word	0x20000148

08015384 <strtok>:
 8015384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015386:	4b16      	ldr	r3, [pc, #88]	; (80153e0 <strtok+0x5c>)
 8015388:	0005      	movs	r5, r0
 801538a:	681f      	ldr	r7, [r3, #0]
 801538c:	000e      	movs	r6, r1
 801538e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8015390:	2c00      	cmp	r4, #0
 8015392:	d11d      	bne.n	80153d0 <strtok+0x4c>
 8015394:	2050      	movs	r0, #80	; 0x50
 8015396:	f7fe f97f 	bl	8013698 <malloc>
 801539a:	1e02      	subs	r2, r0, #0
 801539c:	65b8      	str	r0, [r7, #88]	; 0x58
 801539e:	d104      	bne.n	80153aa <strtok+0x26>
 80153a0:	2157      	movs	r1, #87	; 0x57
 80153a2:	4b10      	ldr	r3, [pc, #64]	; (80153e4 <strtok+0x60>)
 80153a4:	4810      	ldr	r0, [pc, #64]	; (80153e8 <strtok+0x64>)
 80153a6:	f000 f8ef 	bl	8015588 <__assert_func>
 80153aa:	6004      	str	r4, [r0, #0]
 80153ac:	6044      	str	r4, [r0, #4]
 80153ae:	6084      	str	r4, [r0, #8]
 80153b0:	60c4      	str	r4, [r0, #12]
 80153b2:	6104      	str	r4, [r0, #16]
 80153b4:	6144      	str	r4, [r0, #20]
 80153b6:	6184      	str	r4, [r0, #24]
 80153b8:	6284      	str	r4, [r0, #40]	; 0x28
 80153ba:	62c4      	str	r4, [r0, #44]	; 0x2c
 80153bc:	6304      	str	r4, [r0, #48]	; 0x30
 80153be:	6344      	str	r4, [r0, #52]	; 0x34
 80153c0:	6384      	str	r4, [r0, #56]	; 0x38
 80153c2:	63c4      	str	r4, [r0, #60]	; 0x3c
 80153c4:	6404      	str	r4, [r0, #64]	; 0x40
 80153c6:	6444      	str	r4, [r0, #68]	; 0x44
 80153c8:	6484      	str	r4, [r0, #72]	; 0x48
 80153ca:	64c4      	str	r4, [r0, #76]	; 0x4c
 80153cc:	7704      	strb	r4, [r0, #28]
 80153ce:	6244      	str	r4, [r0, #36]	; 0x24
 80153d0:	0031      	movs	r1, r6
 80153d2:	0028      	movs	r0, r5
 80153d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80153d6:	2301      	movs	r3, #1
 80153d8:	f000 f808 	bl	80153ec <__strtok_r>
 80153dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153de:	46c0      	nop			; (mov r8, r8)
 80153e0:	200000e0 	.word	0x200000e0
 80153e4:	0801b859 	.word	0x0801b859
 80153e8:	0801b920 	.word	0x0801b920

080153ec <__strtok_r>:
 80153ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153ee:	2800      	cmp	r0, #0
 80153f0:	d102      	bne.n	80153f8 <__strtok_r+0xc>
 80153f2:	6810      	ldr	r0, [r2, #0]
 80153f4:	2800      	cmp	r0, #0
 80153f6:	d013      	beq.n	8015420 <__strtok_r+0x34>
 80153f8:	0004      	movs	r4, r0
 80153fa:	0020      	movs	r0, r4
 80153fc:	000e      	movs	r6, r1
 80153fe:	7805      	ldrb	r5, [r0, #0]
 8015400:	3401      	adds	r4, #1
 8015402:	7837      	ldrb	r7, [r6, #0]
 8015404:	2f00      	cmp	r7, #0
 8015406:	d104      	bne.n	8015412 <__strtok_r+0x26>
 8015408:	2d00      	cmp	r5, #0
 801540a:	d10f      	bne.n	801542c <__strtok_r+0x40>
 801540c:	0028      	movs	r0, r5
 801540e:	6015      	str	r5, [r2, #0]
 8015410:	e006      	b.n	8015420 <__strtok_r+0x34>
 8015412:	3601      	adds	r6, #1
 8015414:	42bd      	cmp	r5, r7
 8015416:	d1f4      	bne.n	8015402 <__strtok_r+0x16>
 8015418:	2b00      	cmp	r3, #0
 801541a:	d1ee      	bne.n	80153fa <__strtok_r+0xe>
 801541c:	6014      	str	r4, [r2, #0]
 801541e:	7003      	strb	r3, [r0, #0]
 8015420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015422:	002f      	movs	r7, r5
 8015424:	e00f      	b.n	8015446 <__strtok_r+0x5a>
 8015426:	3301      	adds	r3, #1
 8015428:	2e00      	cmp	r6, #0
 801542a:	d104      	bne.n	8015436 <__strtok_r+0x4a>
 801542c:	0023      	movs	r3, r4
 801542e:	3401      	adds	r4, #1
 8015430:	781d      	ldrb	r5, [r3, #0]
 8015432:	0027      	movs	r7, r4
 8015434:	000b      	movs	r3, r1
 8015436:	781e      	ldrb	r6, [r3, #0]
 8015438:	42b5      	cmp	r5, r6
 801543a:	d1f4      	bne.n	8015426 <__strtok_r+0x3a>
 801543c:	2d00      	cmp	r5, #0
 801543e:	d0f0      	beq.n	8015422 <__strtok_r+0x36>
 8015440:	2300      	movs	r3, #0
 8015442:	3c01      	subs	r4, #1
 8015444:	7023      	strb	r3, [r4, #0]
 8015446:	6017      	str	r7, [r2, #0]
 8015448:	e7ea      	b.n	8015420 <__strtok_r+0x34>
	...

0801544c <_strtol_l.isra.0>:
 801544c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801544e:	b087      	sub	sp, #28
 8015450:	001e      	movs	r6, r3
 8015452:	9005      	str	r0, [sp, #20]
 8015454:	9101      	str	r1, [sp, #4]
 8015456:	9202      	str	r2, [sp, #8]
 8015458:	2b01      	cmp	r3, #1
 801545a:	d045      	beq.n	80154e8 <_strtol_l.isra.0+0x9c>
 801545c:	0008      	movs	r0, r1
 801545e:	2b24      	cmp	r3, #36	; 0x24
 8015460:	d842      	bhi.n	80154e8 <_strtol_l.isra.0+0x9c>
 8015462:	4b3f      	ldr	r3, [pc, #252]	; (8015560 <_strtol_l.isra.0+0x114>)
 8015464:	2208      	movs	r2, #8
 8015466:	469c      	mov	ip, r3
 8015468:	0003      	movs	r3, r0
 801546a:	4661      	mov	r1, ip
 801546c:	781c      	ldrb	r4, [r3, #0]
 801546e:	1c45      	adds	r5, r0, #1
 8015470:	5d09      	ldrb	r1, [r1, r4]
 8015472:	0028      	movs	r0, r5
 8015474:	000f      	movs	r7, r1
 8015476:	4017      	ands	r7, r2
 8015478:	4211      	tst	r1, r2
 801547a:	d1f5      	bne.n	8015468 <_strtol_l.isra.0+0x1c>
 801547c:	2c2d      	cmp	r4, #45	; 0x2d
 801547e:	d13a      	bne.n	80154f6 <_strtol_l.isra.0+0xaa>
 8015480:	2701      	movs	r7, #1
 8015482:	782c      	ldrb	r4, [r5, #0]
 8015484:	1c9d      	adds	r5, r3, #2
 8015486:	2e00      	cmp	r6, #0
 8015488:	d065      	beq.n	8015556 <_strtol_l.isra.0+0x10a>
 801548a:	2e10      	cmp	r6, #16
 801548c:	d109      	bne.n	80154a2 <_strtol_l.isra.0+0x56>
 801548e:	2c30      	cmp	r4, #48	; 0x30
 8015490:	d107      	bne.n	80154a2 <_strtol_l.isra.0+0x56>
 8015492:	2220      	movs	r2, #32
 8015494:	782b      	ldrb	r3, [r5, #0]
 8015496:	4393      	bics	r3, r2
 8015498:	2b58      	cmp	r3, #88	; 0x58
 801549a:	d157      	bne.n	801554c <_strtol_l.isra.0+0x100>
 801549c:	2610      	movs	r6, #16
 801549e:	786c      	ldrb	r4, [r5, #1]
 80154a0:	3502      	adds	r5, #2
 80154a2:	4b30      	ldr	r3, [pc, #192]	; (8015564 <_strtol_l.isra.0+0x118>)
 80154a4:	0031      	movs	r1, r6
 80154a6:	18fb      	adds	r3, r7, r3
 80154a8:	0018      	movs	r0, r3
 80154aa:	9303      	str	r3, [sp, #12]
 80154ac:	f7ea fed6 	bl	800025c <__aeabi_uidivmod>
 80154b0:	2300      	movs	r3, #0
 80154b2:	2201      	movs	r2, #1
 80154b4:	4684      	mov	ip, r0
 80154b6:	0018      	movs	r0, r3
 80154b8:	9104      	str	r1, [sp, #16]
 80154ba:	4252      	negs	r2, r2
 80154bc:	0021      	movs	r1, r4
 80154be:	3930      	subs	r1, #48	; 0x30
 80154c0:	2909      	cmp	r1, #9
 80154c2:	d81d      	bhi.n	8015500 <_strtol_l.isra.0+0xb4>
 80154c4:	000c      	movs	r4, r1
 80154c6:	42a6      	cmp	r6, r4
 80154c8:	dd28      	ble.n	801551c <_strtol_l.isra.0+0xd0>
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	db24      	blt.n	8015518 <_strtol_l.isra.0+0xcc>
 80154ce:	0013      	movs	r3, r2
 80154d0:	4584      	cmp	ip, r0
 80154d2:	d306      	bcc.n	80154e2 <_strtol_l.isra.0+0x96>
 80154d4:	d102      	bne.n	80154dc <_strtol_l.isra.0+0x90>
 80154d6:	9904      	ldr	r1, [sp, #16]
 80154d8:	42a1      	cmp	r1, r4
 80154da:	db02      	blt.n	80154e2 <_strtol_l.isra.0+0x96>
 80154dc:	2301      	movs	r3, #1
 80154de:	4370      	muls	r0, r6
 80154e0:	1820      	adds	r0, r4, r0
 80154e2:	782c      	ldrb	r4, [r5, #0]
 80154e4:	3501      	adds	r5, #1
 80154e6:	e7e9      	b.n	80154bc <_strtol_l.isra.0+0x70>
 80154e8:	f000 ff16 	bl	8016318 <__errno>
 80154ec:	2316      	movs	r3, #22
 80154ee:	6003      	str	r3, [r0, #0]
 80154f0:	2000      	movs	r0, #0
 80154f2:	b007      	add	sp, #28
 80154f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154f6:	2c2b      	cmp	r4, #43	; 0x2b
 80154f8:	d1c5      	bne.n	8015486 <_strtol_l.isra.0+0x3a>
 80154fa:	782c      	ldrb	r4, [r5, #0]
 80154fc:	1c9d      	adds	r5, r3, #2
 80154fe:	e7c2      	b.n	8015486 <_strtol_l.isra.0+0x3a>
 8015500:	0021      	movs	r1, r4
 8015502:	3941      	subs	r1, #65	; 0x41
 8015504:	2919      	cmp	r1, #25
 8015506:	d801      	bhi.n	801550c <_strtol_l.isra.0+0xc0>
 8015508:	3c37      	subs	r4, #55	; 0x37
 801550a:	e7dc      	b.n	80154c6 <_strtol_l.isra.0+0x7a>
 801550c:	0021      	movs	r1, r4
 801550e:	3961      	subs	r1, #97	; 0x61
 8015510:	2919      	cmp	r1, #25
 8015512:	d803      	bhi.n	801551c <_strtol_l.isra.0+0xd0>
 8015514:	3c57      	subs	r4, #87	; 0x57
 8015516:	e7d6      	b.n	80154c6 <_strtol_l.isra.0+0x7a>
 8015518:	0013      	movs	r3, r2
 801551a:	e7e2      	b.n	80154e2 <_strtol_l.isra.0+0x96>
 801551c:	2b00      	cmp	r3, #0
 801551e:	da09      	bge.n	8015534 <_strtol_l.isra.0+0xe8>
 8015520:	2322      	movs	r3, #34	; 0x22
 8015522:	9a05      	ldr	r2, [sp, #20]
 8015524:	9803      	ldr	r0, [sp, #12]
 8015526:	6013      	str	r3, [r2, #0]
 8015528:	9b02      	ldr	r3, [sp, #8]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d0e1      	beq.n	80154f2 <_strtol_l.isra.0+0xa6>
 801552e:	1e6b      	subs	r3, r5, #1
 8015530:	9301      	str	r3, [sp, #4]
 8015532:	e007      	b.n	8015544 <_strtol_l.isra.0+0xf8>
 8015534:	2f00      	cmp	r7, #0
 8015536:	d000      	beq.n	801553a <_strtol_l.isra.0+0xee>
 8015538:	4240      	negs	r0, r0
 801553a:	9a02      	ldr	r2, [sp, #8]
 801553c:	2a00      	cmp	r2, #0
 801553e:	d0d8      	beq.n	80154f2 <_strtol_l.isra.0+0xa6>
 8015540:	2b00      	cmp	r3, #0
 8015542:	d1f4      	bne.n	801552e <_strtol_l.isra.0+0xe2>
 8015544:	9b02      	ldr	r3, [sp, #8]
 8015546:	9a01      	ldr	r2, [sp, #4]
 8015548:	601a      	str	r2, [r3, #0]
 801554a:	e7d2      	b.n	80154f2 <_strtol_l.isra.0+0xa6>
 801554c:	2430      	movs	r4, #48	; 0x30
 801554e:	2e00      	cmp	r6, #0
 8015550:	d1a7      	bne.n	80154a2 <_strtol_l.isra.0+0x56>
 8015552:	3608      	adds	r6, #8
 8015554:	e7a5      	b.n	80154a2 <_strtol_l.isra.0+0x56>
 8015556:	2c30      	cmp	r4, #48	; 0x30
 8015558:	d09b      	beq.n	8015492 <_strtol_l.isra.0+0x46>
 801555a:	260a      	movs	r6, #10
 801555c:	e7a1      	b.n	80154a2 <_strtol_l.isra.0+0x56>
 801555e:	46c0      	nop			; (mov r8, r8)
 8015560:	0801b719 	.word	0x0801b719
 8015564:	7fffffff 	.word	0x7fffffff

08015568 <_strtol_r>:
 8015568:	b510      	push	{r4, lr}
 801556a:	f7ff ff6f 	bl	801544c <_strtol_l.isra.0>
 801556e:	bd10      	pop	{r4, pc}

08015570 <strtol>:
 8015570:	b510      	push	{r4, lr}
 8015572:	0013      	movs	r3, r2
 8015574:	000a      	movs	r2, r1
 8015576:	0001      	movs	r1, r0
 8015578:	4802      	ldr	r0, [pc, #8]	; (8015584 <strtol+0x14>)
 801557a:	6800      	ldr	r0, [r0, #0]
 801557c:	f7ff ff66 	bl	801544c <_strtol_l.isra.0>
 8015580:	bd10      	pop	{r4, pc}
 8015582:	46c0      	nop			; (mov r8, r8)
 8015584:	200000e0 	.word	0x200000e0

08015588 <__assert_func>:
 8015588:	b530      	push	{r4, r5, lr}
 801558a:	0014      	movs	r4, r2
 801558c:	001a      	movs	r2, r3
 801558e:	4b09      	ldr	r3, [pc, #36]	; (80155b4 <__assert_func+0x2c>)
 8015590:	0005      	movs	r5, r0
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	b085      	sub	sp, #20
 8015596:	68d8      	ldr	r0, [r3, #12]
 8015598:	4b07      	ldr	r3, [pc, #28]	; (80155b8 <__assert_func+0x30>)
 801559a:	2c00      	cmp	r4, #0
 801559c:	d101      	bne.n	80155a2 <__assert_func+0x1a>
 801559e:	4b07      	ldr	r3, [pc, #28]	; (80155bc <__assert_func+0x34>)
 80155a0:	001c      	movs	r4, r3
 80155a2:	9301      	str	r3, [sp, #4]
 80155a4:	9100      	str	r1, [sp, #0]
 80155a6:	002b      	movs	r3, r5
 80155a8:	4905      	ldr	r1, [pc, #20]	; (80155c0 <__assert_func+0x38>)
 80155aa:	9402      	str	r4, [sp, #8]
 80155ac:	f000 feba 	bl	8016324 <fiprintf>
 80155b0:	f002 fb10 	bl	8017bd4 <abort>
 80155b4:	200000e0 	.word	0x200000e0
 80155b8:	0801b981 	.word	0x0801b981
 80155bc:	0801b9bc 	.word	0x0801b9bc
 80155c0:	0801b98e 	.word	0x0801b98e

080155c4 <quorem>:
 80155c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155c6:	0006      	movs	r6, r0
 80155c8:	690d      	ldr	r5, [r1, #16]
 80155ca:	6933      	ldr	r3, [r6, #16]
 80155cc:	b087      	sub	sp, #28
 80155ce:	2000      	movs	r0, #0
 80155d0:	9102      	str	r1, [sp, #8]
 80155d2:	42ab      	cmp	r3, r5
 80155d4:	db6b      	blt.n	80156ae <quorem+0xea>
 80155d6:	000b      	movs	r3, r1
 80155d8:	3d01      	subs	r5, #1
 80155da:	00ac      	lsls	r4, r5, #2
 80155dc:	3314      	adds	r3, #20
 80155de:	9305      	str	r3, [sp, #20]
 80155e0:	191b      	adds	r3, r3, r4
 80155e2:	9303      	str	r3, [sp, #12]
 80155e4:	0033      	movs	r3, r6
 80155e6:	3314      	adds	r3, #20
 80155e8:	9301      	str	r3, [sp, #4]
 80155ea:	191c      	adds	r4, r3, r4
 80155ec:	9b03      	ldr	r3, [sp, #12]
 80155ee:	6827      	ldr	r7, [r4, #0]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	0038      	movs	r0, r7
 80155f4:	9300      	str	r3, [sp, #0]
 80155f6:	3301      	adds	r3, #1
 80155f8:	0019      	movs	r1, r3
 80155fa:	9304      	str	r3, [sp, #16]
 80155fc:	f7ea fda8 	bl	8000150 <__udivsi3>
 8015600:	9b04      	ldr	r3, [sp, #16]
 8015602:	9000      	str	r0, [sp, #0]
 8015604:	429f      	cmp	r7, r3
 8015606:	d329      	bcc.n	801565c <quorem+0x98>
 8015608:	2300      	movs	r3, #0
 801560a:	469c      	mov	ip, r3
 801560c:	9801      	ldr	r0, [sp, #4]
 801560e:	9f05      	ldr	r7, [sp, #20]
 8015610:	9304      	str	r3, [sp, #16]
 8015612:	cf08      	ldmia	r7!, {r3}
 8015614:	9a00      	ldr	r2, [sp, #0]
 8015616:	b299      	uxth	r1, r3
 8015618:	4351      	muls	r1, r2
 801561a:	0c1b      	lsrs	r3, r3, #16
 801561c:	4353      	muls	r3, r2
 801561e:	4461      	add	r1, ip
 8015620:	0c0a      	lsrs	r2, r1, #16
 8015622:	189b      	adds	r3, r3, r2
 8015624:	0c1a      	lsrs	r2, r3, #16
 8015626:	9305      	str	r3, [sp, #20]
 8015628:	6803      	ldr	r3, [r0, #0]
 801562a:	4694      	mov	ip, r2
 801562c:	b29a      	uxth	r2, r3
 801562e:	9b04      	ldr	r3, [sp, #16]
 8015630:	b289      	uxth	r1, r1
 8015632:	18d2      	adds	r2, r2, r3
 8015634:	6803      	ldr	r3, [r0, #0]
 8015636:	1a52      	subs	r2, r2, r1
 8015638:	0c19      	lsrs	r1, r3, #16
 801563a:	466b      	mov	r3, sp
 801563c:	8a9b      	ldrh	r3, [r3, #20]
 801563e:	1acb      	subs	r3, r1, r3
 8015640:	1411      	asrs	r1, r2, #16
 8015642:	185b      	adds	r3, r3, r1
 8015644:	1419      	asrs	r1, r3, #16
 8015646:	b292      	uxth	r2, r2
 8015648:	041b      	lsls	r3, r3, #16
 801564a:	431a      	orrs	r2, r3
 801564c:	9b03      	ldr	r3, [sp, #12]
 801564e:	9104      	str	r1, [sp, #16]
 8015650:	c004      	stmia	r0!, {r2}
 8015652:	42bb      	cmp	r3, r7
 8015654:	d2dd      	bcs.n	8015612 <quorem+0x4e>
 8015656:	6823      	ldr	r3, [r4, #0]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d02e      	beq.n	80156ba <quorem+0xf6>
 801565c:	0030      	movs	r0, r6
 801565e:	9902      	ldr	r1, [sp, #8]
 8015660:	f001 fce6 	bl	8017030 <__mcmp>
 8015664:	2800      	cmp	r0, #0
 8015666:	db21      	blt.n	80156ac <quorem+0xe8>
 8015668:	0030      	movs	r0, r6
 801566a:	2400      	movs	r4, #0
 801566c:	9b00      	ldr	r3, [sp, #0]
 801566e:	9902      	ldr	r1, [sp, #8]
 8015670:	3301      	adds	r3, #1
 8015672:	9300      	str	r3, [sp, #0]
 8015674:	3014      	adds	r0, #20
 8015676:	3114      	adds	r1, #20
 8015678:	6802      	ldr	r2, [r0, #0]
 801567a:	c908      	ldmia	r1!, {r3}
 801567c:	b292      	uxth	r2, r2
 801567e:	1914      	adds	r4, r2, r4
 8015680:	b29a      	uxth	r2, r3
 8015682:	1aa2      	subs	r2, r4, r2
 8015684:	6804      	ldr	r4, [r0, #0]
 8015686:	0c1b      	lsrs	r3, r3, #16
 8015688:	0c24      	lsrs	r4, r4, #16
 801568a:	1ae3      	subs	r3, r4, r3
 801568c:	1414      	asrs	r4, r2, #16
 801568e:	191b      	adds	r3, r3, r4
 8015690:	141c      	asrs	r4, r3, #16
 8015692:	b292      	uxth	r2, r2
 8015694:	041b      	lsls	r3, r3, #16
 8015696:	4313      	orrs	r3, r2
 8015698:	c008      	stmia	r0!, {r3}
 801569a:	9b03      	ldr	r3, [sp, #12]
 801569c:	428b      	cmp	r3, r1
 801569e:	d2eb      	bcs.n	8015678 <quorem+0xb4>
 80156a0:	9a01      	ldr	r2, [sp, #4]
 80156a2:	00ab      	lsls	r3, r5, #2
 80156a4:	18d3      	adds	r3, r2, r3
 80156a6:	681a      	ldr	r2, [r3, #0]
 80156a8:	2a00      	cmp	r2, #0
 80156aa:	d010      	beq.n	80156ce <quorem+0x10a>
 80156ac:	9800      	ldr	r0, [sp, #0]
 80156ae:	b007      	add	sp, #28
 80156b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156b2:	6823      	ldr	r3, [r4, #0]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d104      	bne.n	80156c2 <quorem+0xfe>
 80156b8:	3d01      	subs	r5, #1
 80156ba:	9b01      	ldr	r3, [sp, #4]
 80156bc:	3c04      	subs	r4, #4
 80156be:	42a3      	cmp	r3, r4
 80156c0:	d3f7      	bcc.n	80156b2 <quorem+0xee>
 80156c2:	6135      	str	r5, [r6, #16]
 80156c4:	e7ca      	b.n	801565c <quorem+0x98>
 80156c6:	681a      	ldr	r2, [r3, #0]
 80156c8:	2a00      	cmp	r2, #0
 80156ca:	d104      	bne.n	80156d6 <quorem+0x112>
 80156cc:	3d01      	subs	r5, #1
 80156ce:	9a01      	ldr	r2, [sp, #4]
 80156d0:	3b04      	subs	r3, #4
 80156d2:	429a      	cmp	r2, r3
 80156d4:	d3f7      	bcc.n	80156c6 <quorem+0x102>
 80156d6:	6135      	str	r5, [r6, #16]
 80156d8:	e7e8      	b.n	80156ac <quorem+0xe8>
	...

080156dc <_dtoa_r>:
 80156dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156de:	b09d      	sub	sp, #116	; 0x74
 80156e0:	9202      	str	r2, [sp, #8]
 80156e2:	9303      	str	r3, [sp, #12]
 80156e4:	9b02      	ldr	r3, [sp, #8]
 80156e6:	9c03      	ldr	r4, [sp, #12]
 80156e8:	930a      	str	r3, [sp, #40]	; 0x28
 80156ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80156ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80156ee:	0007      	movs	r7, r0
 80156f0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80156f2:	2c00      	cmp	r4, #0
 80156f4:	d10e      	bne.n	8015714 <_dtoa_r+0x38>
 80156f6:	2010      	movs	r0, #16
 80156f8:	f7fd ffce 	bl	8013698 <malloc>
 80156fc:	1e02      	subs	r2, r0, #0
 80156fe:	6278      	str	r0, [r7, #36]	; 0x24
 8015700:	d104      	bne.n	801570c <_dtoa_r+0x30>
 8015702:	21ea      	movs	r1, #234	; 0xea
 8015704:	4bc0      	ldr	r3, [pc, #768]	; (8015a08 <_dtoa_r+0x32c>)
 8015706:	48c1      	ldr	r0, [pc, #772]	; (8015a0c <_dtoa_r+0x330>)
 8015708:	f7ff ff3e 	bl	8015588 <__assert_func>
 801570c:	6044      	str	r4, [r0, #4]
 801570e:	6084      	str	r4, [r0, #8]
 8015710:	6004      	str	r4, [r0, #0]
 8015712:	60c4      	str	r4, [r0, #12]
 8015714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015716:	6819      	ldr	r1, [r3, #0]
 8015718:	2900      	cmp	r1, #0
 801571a:	d00a      	beq.n	8015732 <_dtoa_r+0x56>
 801571c:	685a      	ldr	r2, [r3, #4]
 801571e:	2301      	movs	r3, #1
 8015720:	4093      	lsls	r3, r2
 8015722:	604a      	str	r2, [r1, #4]
 8015724:	608b      	str	r3, [r1, #8]
 8015726:	0038      	movs	r0, r7
 8015728:	f001 f9f4 	bl	8016b14 <_Bfree>
 801572c:	2200      	movs	r2, #0
 801572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015730:	601a      	str	r2, [r3, #0]
 8015732:	9b03      	ldr	r3, [sp, #12]
 8015734:	2b00      	cmp	r3, #0
 8015736:	da21      	bge.n	801577c <_dtoa_r+0xa0>
 8015738:	2301      	movs	r3, #1
 801573a:	602b      	str	r3, [r5, #0]
 801573c:	9b03      	ldr	r3, [sp, #12]
 801573e:	005b      	lsls	r3, r3, #1
 8015740:	085b      	lsrs	r3, r3, #1
 8015742:	930b      	str	r3, [sp, #44]	; 0x2c
 8015744:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015746:	4bb2      	ldr	r3, [pc, #712]	; (8015a10 <_dtoa_r+0x334>)
 8015748:	002a      	movs	r2, r5
 801574a:	9318      	str	r3, [sp, #96]	; 0x60
 801574c:	401a      	ands	r2, r3
 801574e:	429a      	cmp	r2, r3
 8015750:	d117      	bne.n	8015782 <_dtoa_r+0xa6>
 8015752:	4bb0      	ldr	r3, [pc, #704]	; (8015a14 <_dtoa_r+0x338>)
 8015754:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015756:	0328      	lsls	r0, r5, #12
 8015758:	6013      	str	r3, [r2, #0]
 801575a:	9b02      	ldr	r3, [sp, #8]
 801575c:	0b00      	lsrs	r0, r0, #12
 801575e:	4318      	orrs	r0, r3
 8015760:	d101      	bne.n	8015766 <_dtoa_r+0x8a>
 8015762:	f000 fdc3 	bl	80162ec <_dtoa_r+0xc10>
 8015766:	48ac      	ldr	r0, [pc, #688]	; (8015a18 <_dtoa_r+0x33c>)
 8015768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801576a:	9005      	str	r0, [sp, #20]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d002      	beq.n	8015776 <_dtoa_r+0x9a>
 8015770:	4baa      	ldr	r3, [pc, #680]	; (8015a1c <_dtoa_r+0x340>)
 8015772:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015774:	6013      	str	r3, [r2, #0]
 8015776:	9805      	ldr	r0, [sp, #20]
 8015778:	b01d      	add	sp, #116	; 0x74
 801577a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801577c:	2300      	movs	r3, #0
 801577e:	602b      	str	r3, [r5, #0]
 8015780:	e7e0      	b.n	8015744 <_dtoa_r+0x68>
 8015782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015784:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015786:	9312      	str	r3, [sp, #72]	; 0x48
 8015788:	9413      	str	r4, [sp, #76]	; 0x4c
 801578a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801578c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801578e:	2200      	movs	r2, #0
 8015790:	2300      	movs	r3, #0
 8015792:	f7ea fe63 	bl	800045c <__aeabi_dcmpeq>
 8015796:	1e04      	subs	r4, r0, #0
 8015798:	d00b      	beq.n	80157b2 <_dtoa_r+0xd6>
 801579a:	2301      	movs	r3, #1
 801579c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801579e:	6013      	str	r3, [r2, #0]
 80157a0:	4b9f      	ldr	r3, [pc, #636]	; (8015a20 <_dtoa_r+0x344>)
 80157a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80157a4:	9305      	str	r3, [sp, #20]
 80157a6:	2a00      	cmp	r2, #0
 80157a8:	d0e5      	beq.n	8015776 <_dtoa_r+0x9a>
 80157aa:	4a9e      	ldr	r2, [pc, #632]	; (8015a24 <_dtoa_r+0x348>)
 80157ac:	9926      	ldr	r1, [sp, #152]	; 0x98
 80157ae:	600a      	str	r2, [r1, #0]
 80157b0:	e7e1      	b.n	8015776 <_dtoa_r+0x9a>
 80157b2:	ab1a      	add	r3, sp, #104	; 0x68
 80157b4:	9301      	str	r3, [sp, #4]
 80157b6:	ab1b      	add	r3, sp, #108	; 0x6c
 80157b8:	9300      	str	r3, [sp, #0]
 80157ba:	0038      	movs	r0, r7
 80157bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80157be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157c0:	f001 fd5e 	bl	8017280 <__d2b>
 80157c4:	006e      	lsls	r6, r5, #1
 80157c6:	9004      	str	r0, [sp, #16]
 80157c8:	0d76      	lsrs	r6, r6, #21
 80157ca:	d100      	bne.n	80157ce <_dtoa_r+0xf2>
 80157cc:	e07c      	b.n	80158c8 <_dtoa_r+0x1ec>
 80157ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 80157d0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80157d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157d4:	4a94      	ldr	r2, [pc, #592]	; (8015a28 <_dtoa_r+0x34c>)
 80157d6:	031b      	lsls	r3, r3, #12
 80157d8:	0b1b      	lsrs	r3, r3, #12
 80157da:	431a      	orrs	r2, r3
 80157dc:	0011      	movs	r1, r2
 80157de:	4b93      	ldr	r3, [pc, #588]	; (8015a2c <_dtoa_r+0x350>)
 80157e0:	9416      	str	r4, [sp, #88]	; 0x58
 80157e2:	18f6      	adds	r6, r6, r3
 80157e4:	2200      	movs	r2, #0
 80157e6:	4b92      	ldr	r3, [pc, #584]	; (8015a30 <_dtoa_r+0x354>)
 80157e8:	f7ec fa18 	bl	8001c1c <__aeabi_dsub>
 80157ec:	4a91      	ldr	r2, [pc, #580]	; (8015a34 <_dtoa_r+0x358>)
 80157ee:	4b92      	ldr	r3, [pc, #584]	; (8015a38 <_dtoa_r+0x35c>)
 80157f0:	f7eb ffa8 	bl	8001744 <__aeabi_dmul>
 80157f4:	4a91      	ldr	r2, [pc, #580]	; (8015a3c <_dtoa_r+0x360>)
 80157f6:	4b92      	ldr	r3, [pc, #584]	; (8015a40 <_dtoa_r+0x364>)
 80157f8:	f7eb f834 	bl	8000864 <__aeabi_dadd>
 80157fc:	0004      	movs	r4, r0
 80157fe:	0030      	movs	r0, r6
 8015800:	000d      	movs	r5, r1
 8015802:	f7ec fdf1 	bl	80023e8 <__aeabi_i2d>
 8015806:	4a8f      	ldr	r2, [pc, #572]	; (8015a44 <_dtoa_r+0x368>)
 8015808:	4b8f      	ldr	r3, [pc, #572]	; (8015a48 <_dtoa_r+0x36c>)
 801580a:	f7eb ff9b 	bl	8001744 <__aeabi_dmul>
 801580e:	0002      	movs	r2, r0
 8015810:	000b      	movs	r3, r1
 8015812:	0020      	movs	r0, r4
 8015814:	0029      	movs	r1, r5
 8015816:	f7eb f825 	bl	8000864 <__aeabi_dadd>
 801581a:	0004      	movs	r4, r0
 801581c:	000d      	movs	r5, r1
 801581e:	f7ec fdad 	bl	800237c <__aeabi_d2iz>
 8015822:	2200      	movs	r2, #0
 8015824:	9002      	str	r0, [sp, #8]
 8015826:	2300      	movs	r3, #0
 8015828:	0020      	movs	r0, r4
 801582a:	0029      	movs	r1, r5
 801582c:	f7ea fe1c 	bl	8000468 <__aeabi_dcmplt>
 8015830:	2800      	cmp	r0, #0
 8015832:	d00b      	beq.n	801584c <_dtoa_r+0x170>
 8015834:	9802      	ldr	r0, [sp, #8]
 8015836:	f7ec fdd7 	bl	80023e8 <__aeabi_i2d>
 801583a:	002b      	movs	r3, r5
 801583c:	0022      	movs	r2, r4
 801583e:	f7ea fe0d 	bl	800045c <__aeabi_dcmpeq>
 8015842:	4243      	negs	r3, r0
 8015844:	4158      	adcs	r0, r3
 8015846:	9b02      	ldr	r3, [sp, #8]
 8015848:	1a1b      	subs	r3, r3, r0
 801584a:	9302      	str	r3, [sp, #8]
 801584c:	2301      	movs	r3, #1
 801584e:	9315      	str	r3, [sp, #84]	; 0x54
 8015850:	9b02      	ldr	r3, [sp, #8]
 8015852:	2b16      	cmp	r3, #22
 8015854:	d80f      	bhi.n	8015876 <_dtoa_r+0x19a>
 8015856:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015858:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801585a:	00da      	lsls	r2, r3, #3
 801585c:	4b7b      	ldr	r3, [pc, #492]	; (8015a4c <_dtoa_r+0x370>)
 801585e:	189b      	adds	r3, r3, r2
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	685b      	ldr	r3, [r3, #4]
 8015864:	f7ea fe00 	bl	8000468 <__aeabi_dcmplt>
 8015868:	2800      	cmp	r0, #0
 801586a:	d049      	beq.n	8015900 <_dtoa_r+0x224>
 801586c:	9b02      	ldr	r3, [sp, #8]
 801586e:	3b01      	subs	r3, #1
 8015870:	9302      	str	r3, [sp, #8]
 8015872:	2300      	movs	r3, #0
 8015874:	9315      	str	r3, [sp, #84]	; 0x54
 8015876:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015878:	1b9e      	subs	r6, r3, r6
 801587a:	2300      	movs	r3, #0
 801587c:	9308      	str	r3, [sp, #32]
 801587e:	0033      	movs	r3, r6
 8015880:	3b01      	subs	r3, #1
 8015882:	930d      	str	r3, [sp, #52]	; 0x34
 8015884:	d504      	bpl.n	8015890 <_dtoa_r+0x1b4>
 8015886:	2301      	movs	r3, #1
 8015888:	1b9b      	subs	r3, r3, r6
 801588a:	9308      	str	r3, [sp, #32]
 801588c:	2300      	movs	r3, #0
 801588e:	930d      	str	r3, [sp, #52]	; 0x34
 8015890:	9b02      	ldr	r3, [sp, #8]
 8015892:	2b00      	cmp	r3, #0
 8015894:	db36      	blt.n	8015904 <_dtoa_r+0x228>
 8015896:	9a02      	ldr	r2, [sp, #8]
 8015898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801589a:	4694      	mov	ip, r2
 801589c:	4463      	add	r3, ip
 801589e:	930d      	str	r3, [sp, #52]	; 0x34
 80158a0:	2300      	movs	r3, #0
 80158a2:	9214      	str	r2, [sp, #80]	; 0x50
 80158a4:	930e      	str	r3, [sp, #56]	; 0x38
 80158a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80158a8:	2401      	movs	r4, #1
 80158aa:	2b09      	cmp	r3, #9
 80158ac:	d862      	bhi.n	8015974 <_dtoa_r+0x298>
 80158ae:	2b05      	cmp	r3, #5
 80158b0:	dd02      	ble.n	80158b8 <_dtoa_r+0x1dc>
 80158b2:	2400      	movs	r4, #0
 80158b4:	3b04      	subs	r3, #4
 80158b6:	9322      	str	r3, [sp, #136]	; 0x88
 80158b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80158ba:	1e98      	subs	r0, r3, #2
 80158bc:	2803      	cmp	r0, #3
 80158be:	d862      	bhi.n	8015986 <_dtoa_r+0x2aa>
 80158c0:	f7ea fc32 	bl	8000128 <__gnu_thumb1_case_uqi>
 80158c4:	56343629 	.word	0x56343629
 80158c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80158ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80158cc:	189e      	adds	r6, r3, r2
 80158ce:	4b60      	ldr	r3, [pc, #384]	; (8015a50 <_dtoa_r+0x374>)
 80158d0:	18f2      	adds	r2, r6, r3
 80158d2:	2a20      	cmp	r2, #32
 80158d4:	dd0f      	ble.n	80158f6 <_dtoa_r+0x21a>
 80158d6:	2340      	movs	r3, #64	; 0x40
 80158d8:	1a9b      	subs	r3, r3, r2
 80158da:	409d      	lsls	r5, r3
 80158dc:	4b5d      	ldr	r3, [pc, #372]	; (8015a54 <_dtoa_r+0x378>)
 80158de:	9802      	ldr	r0, [sp, #8]
 80158e0:	18f3      	adds	r3, r6, r3
 80158e2:	40d8      	lsrs	r0, r3
 80158e4:	4328      	orrs	r0, r5
 80158e6:	f7ec fdaf 	bl	8002448 <__aeabi_ui2d>
 80158ea:	2301      	movs	r3, #1
 80158ec:	4c5a      	ldr	r4, [pc, #360]	; (8015a58 <_dtoa_r+0x37c>)
 80158ee:	3e01      	subs	r6, #1
 80158f0:	1909      	adds	r1, r1, r4
 80158f2:	9316      	str	r3, [sp, #88]	; 0x58
 80158f4:	e776      	b.n	80157e4 <_dtoa_r+0x108>
 80158f6:	2320      	movs	r3, #32
 80158f8:	9802      	ldr	r0, [sp, #8]
 80158fa:	1a9b      	subs	r3, r3, r2
 80158fc:	4098      	lsls	r0, r3
 80158fe:	e7f2      	b.n	80158e6 <_dtoa_r+0x20a>
 8015900:	9015      	str	r0, [sp, #84]	; 0x54
 8015902:	e7b8      	b.n	8015876 <_dtoa_r+0x19a>
 8015904:	9b08      	ldr	r3, [sp, #32]
 8015906:	9a02      	ldr	r2, [sp, #8]
 8015908:	1a9b      	subs	r3, r3, r2
 801590a:	9308      	str	r3, [sp, #32]
 801590c:	4253      	negs	r3, r2
 801590e:	930e      	str	r3, [sp, #56]	; 0x38
 8015910:	2300      	movs	r3, #0
 8015912:	9314      	str	r3, [sp, #80]	; 0x50
 8015914:	e7c7      	b.n	80158a6 <_dtoa_r+0x1ca>
 8015916:	2300      	movs	r3, #0
 8015918:	930f      	str	r3, [sp, #60]	; 0x3c
 801591a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801591c:	2b00      	cmp	r3, #0
 801591e:	dc36      	bgt.n	801598e <_dtoa_r+0x2b2>
 8015920:	2301      	movs	r3, #1
 8015922:	001a      	movs	r2, r3
 8015924:	930c      	str	r3, [sp, #48]	; 0x30
 8015926:	9306      	str	r3, [sp, #24]
 8015928:	9223      	str	r2, [sp, #140]	; 0x8c
 801592a:	e00d      	b.n	8015948 <_dtoa_r+0x26c>
 801592c:	2301      	movs	r3, #1
 801592e:	e7f3      	b.n	8015918 <_dtoa_r+0x23c>
 8015930:	2300      	movs	r3, #0
 8015932:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015934:	930f      	str	r3, [sp, #60]	; 0x3c
 8015936:	4694      	mov	ip, r2
 8015938:	9b02      	ldr	r3, [sp, #8]
 801593a:	4463      	add	r3, ip
 801593c:	930c      	str	r3, [sp, #48]	; 0x30
 801593e:	3301      	adds	r3, #1
 8015940:	9306      	str	r3, [sp, #24]
 8015942:	2b00      	cmp	r3, #0
 8015944:	dc00      	bgt.n	8015948 <_dtoa_r+0x26c>
 8015946:	2301      	movs	r3, #1
 8015948:	2200      	movs	r2, #0
 801594a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801594c:	6042      	str	r2, [r0, #4]
 801594e:	3204      	adds	r2, #4
 8015950:	0015      	movs	r5, r2
 8015952:	3514      	adds	r5, #20
 8015954:	6841      	ldr	r1, [r0, #4]
 8015956:	429d      	cmp	r5, r3
 8015958:	d91d      	bls.n	8015996 <_dtoa_r+0x2ba>
 801595a:	0038      	movs	r0, r7
 801595c:	f001 f896 	bl	8016a8c <_Balloc>
 8015960:	9005      	str	r0, [sp, #20]
 8015962:	2800      	cmp	r0, #0
 8015964:	d11b      	bne.n	801599e <_dtoa_r+0x2c2>
 8015966:	21d5      	movs	r1, #213	; 0xd5
 8015968:	0002      	movs	r2, r0
 801596a:	4b3c      	ldr	r3, [pc, #240]	; (8015a5c <_dtoa_r+0x380>)
 801596c:	0049      	lsls	r1, r1, #1
 801596e:	e6ca      	b.n	8015706 <_dtoa_r+0x2a>
 8015970:	2301      	movs	r3, #1
 8015972:	e7de      	b.n	8015932 <_dtoa_r+0x256>
 8015974:	2300      	movs	r3, #0
 8015976:	940f      	str	r4, [sp, #60]	; 0x3c
 8015978:	9322      	str	r3, [sp, #136]	; 0x88
 801597a:	3b01      	subs	r3, #1
 801597c:	930c      	str	r3, [sp, #48]	; 0x30
 801597e:	9306      	str	r3, [sp, #24]
 8015980:	2200      	movs	r2, #0
 8015982:	3313      	adds	r3, #19
 8015984:	e7d0      	b.n	8015928 <_dtoa_r+0x24c>
 8015986:	2301      	movs	r3, #1
 8015988:	930f      	str	r3, [sp, #60]	; 0x3c
 801598a:	3b02      	subs	r3, #2
 801598c:	e7f6      	b.n	801597c <_dtoa_r+0x2a0>
 801598e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015990:	930c      	str	r3, [sp, #48]	; 0x30
 8015992:	9306      	str	r3, [sp, #24]
 8015994:	e7d8      	b.n	8015948 <_dtoa_r+0x26c>
 8015996:	3101      	adds	r1, #1
 8015998:	6041      	str	r1, [r0, #4]
 801599a:	0052      	lsls	r2, r2, #1
 801599c:	e7d8      	b.n	8015950 <_dtoa_r+0x274>
 801599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a0:	9a05      	ldr	r2, [sp, #20]
 80159a2:	601a      	str	r2, [r3, #0]
 80159a4:	9b06      	ldr	r3, [sp, #24]
 80159a6:	2b0e      	cmp	r3, #14
 80159a8:	d900      	bls.n	80159ac <_dtoa_r+0x2d0>
 80159aa:	e0eb      	b.n	8015b84 <_dtoa_r+0x4a8>
 80159ac:	2c00      	cmp	r4, #0
 80159ae:	d100      	bne.n	80159b2 <_dtoa_r+0x2d6>
 80159b0:	e0e8      	b.n	8015b84 <_dtoa_r+0x4a8>
 80159b2:	9b02      	ldr	r3, [sp, #8]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	dd68      	ble.n	8015a8a <_dtoa_r+0x3ae>
 80159b8:	001a      	movs	r2, r3
 80159ba:	210f      	movs	r1, #15
 80159bc:	4b23      	ldr	r3, [pc, #140]	; (8015a4c <_dtoa_r+0x370>)
 80159be:	400a      	ands	r2, r1
 80159c0:	00d2      	lsls	r2, r2, #3
 80159c2:	189b      	adds	r3, r3, r2
 80159c4:	681d      	ldr	r5, [r3, #0]
 80159c6:	685e      	ldr	r6, [r3, #4]
 80159c8:	9b02      	ldr	r3, [sp, #8]
 80159ca:	111c      	asrs	r4, r3, #4
 80159cc:	2302      	movs	r3, #2
 80159ce:	9310      	str	r3, [sp, #64]	; 0x40
 80159d0:	9b02      	ldr	r3, [sp, #8]
 80159d2:	05db      	lsls	r3, r3, #23
 80159d4:	d50b      	bpl.n	80159ee <_dtoa_r+0x312>
 80159d6:	4b22      	ldr	r3, [pc, #136]	; (8015a60 <_dtoa_r+0x384>)
 80159d8:	400c      	ands	r4, r1
 80159da:	6a1a      	ldr	r2, [r3, #32]
 80159dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80159e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80159e2:	f7eb faa9 	bl	8000f38 <__aeabi_ddiv>
 80159e6:	2303      	movs	r3, #3
 80159e8:	900a      	str	r0, [sp, #40]	; 0x28
 80159ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80159ec:	9310      	str	r3, [sp, #64]	; 0x40
 80159ee:	4b1c      	ldr	r3, [pc, #112]	; (8015a60 <_dtoa_r+0x384>)
 80159f0:	9307      	str	r3, [sp, #28]
 80159f2:	2c00      	cmp	r4, #0
 80159f4:	d136      	bne.n	8015a64 <_dtoa_r+0x388>
 80159f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80159fa:	002a      	movs	r2, r5
 80159fc:	0033      	movs	r3, r6
 80159fe:	f7eb fa9b 	bl	8000f38 <__aeabi_ddiv>
 8015a02:	900a      	str	r0, [sp, #40]	; 0x28
 8015a04:	910b      	str	r1, [sp, #44]	; 0x2c
 8015a06:	e05c      	b.n	8015ac2 <_dtoa_r+0x3e6>
 8015a08:	0801b859 	.word	0x0801b859
 8015a0c:	0801b9ca 	.word	0x0801b9ca
 8015a10:	7ff00000 	.word	0x7ff00000
 8015a14:	0000270f 	.word	0x0000270f
 8015a18:	0801b9c6 	.word	0x0801b9c6
 8015a1c:	0801b9c9 	.word	0x0801b9c9
 8015a20:	0801b830 	.word	0x0801b830
 8015a24:	0801b831 	.word	0x0801b831
 8015a28:	3ff00000 	.word	0x3ff00000
 8015a2c:	fffffc01 	.word	0xfffffc01
 8015a30:	3ff80000 	.word	0x3ff80000
 8015a34:	636f4361 	.word	0x636f4361
 8015a38:	3fd287a7 	.word	0x3fd287a7
 8015a3c:	8b60c8b3 	.word	0x8b60c8b3
 8015a40:	3fc68a28 	.word	0x3fc68a28
 8015a44:	509f79fb 	.word	0x509f79fb
 8015a48:	3fd34413 	.word	0x3fd34413
 8015a4c:	0801bb40 	.word	0x0801bb40
 8015a50:	00000432 	.word	0x00000432
 8015a54:	00000412 	.word	0x00000412
 8015a58:	fe100000 	.word	0xfe100000
 8015a5c:	0801ba29 	.word	0x0801ba29
 8015a60:	0801bb18 	.word	0x0801bb18
 8015a64:	2301      	movs	r3, #1
 8015a66:	421c      	tst	r4, r3
 8015a68:	d00b      	beq.n	8015a82 <_dtoa_r+0x3a6>
 8015a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a6c:	0028      	movs	r0, r5
 8015a6e:	3301      	adds	r3, #1
 8015a70:	9310      	str	r3, [sp, #64]	; 0x40
 8015a72:	9b07      	ldr	r3, [sp, #28]
 8015a74:	0031      	movs	r1, r6
 8015a76:	681a      	ldr	r2, [r3, #0]
 8015a78:	685b      	ldr	r3, [r3, #4]
 8015a7a:	f7eb fe63 	bl	8001744 <__aeabi_dmul>
 8015a7e:	0005      	movs	r5, r0
 8015a80:	000e      	movs	r6, r1
 8015a82:	9b07      	ldr	r3, [sp, #28]
 8015a84:	1064      	asrs	r4, r4, #1
 8015a86:	3308      	adds	r3, #8
 8015a88:	e7b2      	b.n	80159f0 <_dtoa_r+0x314>
 8015a8a:	2302      	movs	r3, #2
 8015a8c:	9310      	str	r3, [sp, #64]	; 0x40
 8015a8e:	9b02      	ldr	r3, [sp, #8]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d016      	beq.n	8015ac2 <_dtoa_r+0x3e6>
 8015a94:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015a96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015a98:	425c      	negs	r4, r3
 8015a9a:	230f      	movs	r3, #15
 8015a9c:	4ab5      	ldr	r2, [pc, #724]	; (8015d74 <_dtoa_r+0x698>)
 8015a9e:	4023      	ands	r3, r4
 8015aa0:	00db      	lsls	r3, r3, #3
 8015aa2:	18d3      	adds	r3, r2, r3
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	685b      	ldr	r3, [r3, #4]
 8015aa8:	f7eb fe4c 	bl	8001744 <__aeabi_dmul>
 8015aac:	2601      	movs	r6, #1
 8015aae:	2300      	movs	r3, #0
 8015ab0:	900a      	str	r0, [sp, #40]	; 0x28
 8015ab2:	910b      	str	r1, [sp, #44]	; 0x2c
 8015ab4:	4db0      	ldr	r5, [pc, #704]	; (8015d78 <_dtoa_r+0x69c>)
 8015ab6:	1124      	asrs	r4, r4, #4
 8015ab8:	2c00      	cmp	r4, #0
 8015aba:	d000      	beq.n	8015abe <_dtoa_r+0x3e2>
 8015abc:	e094      	b.n	8015be8 <_dtoa_r+0x50c>
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d19f      	bne.n	8015a02 <_dtoa_r+0x326>
 8015ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d100      	bne.n	8015aca <_dtoa_r+0x3ee>
 8015ac8:	e09b      	b.n	8015c02 <_dtoa_r+0x526>
 8015aca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015acc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015ace:	2200      	movs	r2, #0
 8015ad0:	0020      	movs	r0, r4
 8015ad2:	0029      	movs	r1, r5
 8015ad4:	4ba9      	ldr	r3, [pc, #676]	; (8015d7c <_dtoa_r+0x6a0>)
 8015ad6:	f7ea fcc7 	bl	8000468 <__aeabi_dcmplt>
 8015ada:	2800      	cmp	r0, #0
 8015adc:	d100      	bne.n	8015ae0 <_dtoa_r+0x404>
 8015ade:	e090      	b.n	8015c02 <_dtoa_r+0x526>
 8015ae0:	9b06      	ldr	r3, [sp, #24]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d100      	bne.n	8015ae8 <_dtoa_r+0x40c>
 8015ae6:	e08c      	b.n	8015c02 <_dtoa_r+0x526>
 8015ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	dd46      	ble.n	8015b7c <_dtoa_r+0x4a0>
 8015aee:	9b02      	ldr	r3, [sp, #8]
 8015af0:	2200      	movs	r2, #0
 8015af2:	0020      	movs	r0, r4
 8015af4:	0029      	movs	r1, r5
 8015af6:	1e5e      	subs	r6, r3, #1
 8015af8:	4ba1      	ldr	r3, [pc, #644]	; (8015d80 <_dtoa_r+0x6a4>)
 8015afa:	f7eb fe23 	bl	8001744 <__aeabi_dmul>
 8015afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b00:	900a      	str	r0, [sp, #40]	; 0x28
 8015b02:	910b      	str	r1, [sp, #44]	; 0x2c
 8015b04:	3301      	adds	r3, #1
 8015b06:	9310      	str	r3, [sp, #64]	; 0x40
 8015b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015b0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015b0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015b10:	9307      	str	r3, [sp, #28]
 8015b12:	f7ec fc69 	bl	80023e8 <__aeabi_i2d>
 8015b16:	0022      	movs	r2, r4
 8015b18:	002b      	movs	r3, r5
 8015b1a:	f7eb fe13 	bl	8001744 <__aeabi_dmul>
 8015b1e:	2200      	movs	r2, #0
 8015b20:	4b98      	ldr	r3, [pc, #608]	; (8015d84 <_dtoa_r+0x6a8>)
 8015b22:	f7ea fe9f 	bl	8000864 <__aeabi_dadd>
 8015b26:	9010      	str	r0, [sp, #64]	; 0x40
 8015b28:	9111      	str	r1, [sp, #68]	; 0x44
 8015b2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b2e:	920a      	str	r2, [sp, #40]	; 0x28
 8015b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b32:	4a95      	ldr	r2, [pc, #596]	; (8015d88 <_dtoa_r+0x6ac>)
 8015b34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b36:	4694      	mov	ip, r2
 8015b38:	4463      	add	r3, ip
 8015b3a:	9317      	str	r3, [sp, #92]	; 0x5c
 8015b3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b3e:	9b07      	ldr	r3, [sp, #28]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d161      	bne.n	8015c08 <_dtoa_r+0x52c>
 8015b44:	2200      	movs	r2, #0
 8015b46:	0020      	movs	r0, r4
 8015b48:	0029      	movs	r1, r5
 8015b4a:	4b90      	ldr	r3, [pc, #576]	; (8015d8c <_dtoa_r+0x6b0>)
 8015b4c:	f7ec f866 	bl	8001c1c <__aeabi_dsub>
 8015b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015b54:	0004      	movs	r4, r0
 8015b56:	000d      	movs	r5, r1
 8015b58:	f7ea fc9a 	bl	8000490 <__aeabi_dcmpgt>
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	d000      	beq.n	8015b62 <_dtoa_r+0x486>
 8015b60:	e2b5      	b.n	80160ce <_dtoa_r+0x9f2>
 8015b62:	488b      	ldr	r0, [pc, #556]	; (8015d90 <_dtoa_r+0x6b4>)
 8015b64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015b66:	4684      	mov	ip, r0
 8015b68:	4461      	add	r1, ip
 8015b6a:	000b      	movs	r3, r1
 8015b6c:	0020      	movs	r0, r4
 8015b6e:	0029      	movs	r1, r5
 8015b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b72:	f7ea fc79 	bl	8000468 <__aeabi_dcmplt>
 8015b76:	2800      	cmp	r0, #0
 8015b78:	d000      	beq.n	8015b7c <_dtoa_r+0x4a0>
 8015b7a:	e2a5      	b.n	80160c8 <_dtoa_r+0x9ec>
 8015b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015b80:	930a      	str	r3, [sp, #40]	; 0x28
 8015b82:	940b      	str	r4, [sp, #44]	; 0x2c
 8015b84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	da00      	bge.n	8015b8c <_dtoa_r+0x4b0>
 8015b8a:	e171      	b.n	8015e70 <_dtoa_r+0x794>
 8015b8c:	9a02      	ldr	r2, [sp, #8]
 8015b8e:	2a0e      	cmp	r2, #14
 8015b90:	dd00      	ble.n	8015b94 <_dtoa_r+0x4b8>
 8015b92:	e16d      	b.n	8015e70 <_dtoa_r+0x794>
 8015b94:	4b77      	ldr	r3, [pc, #476]	; (8015d74 <_dtoa_r+0x698>)
 8015b96:	00d2      	lsls	r2, r2, #3
 8015b98:	189b      	adds	r3, r3, r2
 8015b9a:	685c      	ldr	r4, [r3, #4]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	9308      	str	r3, [sp, #32]
 8015ba0:	9409      	str	r4, [sp, #36]	; 0x24
 8015ba2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	db00      	blt.n	8015baa <_dtoa_r+0x4ce>
 8015ba8:	e0f6      	b.n	8015d98 <_dtoa_r+0x6bc>
 8015baa:	9b06      	ldr	r3, [sp, #24]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	dd00      	ble.n	8015bb2 <_dtoa_r+0x4d6>
 8015bb0:	e0f2      	b.n	8015d98 <_dtoa_r+0x6bc>
 8015bb2:	d000      	beq.n	8015bb6 <_dtoa_r+0x4da>
 8015bb4:	e288      	b.n	80160c8 <_dtoa_r+0x9ec>
 8015bb6:	9808      	ldr	r0, [sp, #32]
 8015bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015bba:	2200      	movs	r2, #0
 8015bbc:	4b73      	ldr	r3, [pc, #460]	; (8015d8c <_dtoa_r+0x6b0>)
 8015bbe:	f7eb fdc1 	bl	8001744 <__aeabi_dmul>
 8015bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bc6:	f7ea fc6d 	bl	80004a4 <__aeabi_dcmpge>
 8015bca:	9e06      	ldr	r6, [sp, #24]
 8015bcc:	0035      	movs	r5, r6
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d000      	beq.n	8015bd4 <_dtoa_r+0x4f8>
 8015bd2:	e25f      	b.n	8016094 <_dtoa_r+0x9b8>
 8015bd4:	9b05      	ldr	r3, [sp, #20]
 8015bd6:	9a05      	ldr	r2, [sp, #20]
 8015bd8:	3301      	adds	r3, #1
 8015bda:	9307      	str	r3, [sp, #28]
 8015bdc:	2331      	movs	r3, #49	; 0x31
 8015bde:	7013      	strb	r3, [r2, #0]
 8015be0:	9b02      	ldr	r3, [sp, #8]
 8015be2:	3301      	adds	r3, #1
 8015be4:	9302      	str	r3, [sp, #8]
 8015be6:	e25a      	b.n	801609e <_dtoa_r+0x9c2>
 8015be8:	4234      	tst	r4, r6
 8015bea:	d007      	beq.n	8015bfc <_dtoa_r+0x520>
 8015bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bee:	3301      	adds	r3, #1
 8015bf0:	9310      	str	r3, [sp, #64]	; 0x40
 8015bf2:	682a      	ldr	r2, [r5, #0]
 8015bf4:	686b      	ldr	r3, [r5, #4]
 8015bf6:	f7eb fda5 	bl	8001744 <__aeabi_dmul>
 8015bfa:	0033      	movs	r3, r6
 8015bfc:	1064      	asrs	r4, r4, #1
 8015bfe:	3508      	adds	r5, #8
 8015c00:	e75a      	b.n	8015ab8 <_dtoa_r+0x3dc>
 8015c02:	9e02      	ldr	r6, [sp, #8]
 8015c04:	9b06      	ldr	r3, [sp, #24]
 8015c06:	e780      	b.n	8015b0a <_dtoa_r+0x42e>
 8015c08:	9b07      	ldr	r3, [sp, #28]
 8015c0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c0c:	1e5a      	subs	r2, r3, #1
 8015c0e:	4b59      	ldr	r3, [pc, #356]	; (8015d74 <_dtoa_r+0x698>)
 8015c10:	00d2      	lsls	r2, r2, #3
 8015c12:	189b      	adds	r3, r3, r2
 8015c14:	681a      	ldr	r2, [r3, #0]
 8015c16:	685b      	ldr	r3, [r3, #4]
 8015c18:	2900      	cmp	r1, #0
 8015c1a:	d051      	beq.n	8015cc0 <_dtoa_r+0x5e4>
 8015c1c:	2000      	movs	r0, #0
 8015c1e:	495d      	ldr	r1, [pc, #372]	; (8015d94 <_dtoa_r+0x6b8>)
 8015c20:	f7eb f98a 	bl	8000f38 <__aeabi_ddiv>
 8015c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c28:	f7eb fff8 	bl	8001c1c <__aeabi_dsub>
 8015c2c:	9a05      	ldr	r2, [sp, #20]
 8015c2e:	9b05      	ldr	r3, [sp, #20]
 8015c30:	4694      	mov	ip, r2
 8015c32:	9310      	str	r3, [sp, #64]	; 0x40
 8015c34:	9b07      	ldr	r3, [sp, #28]
 8015c36:	900a      	str	r0, [sp, #40]	; 0x28
 8015c38:	910b      	str	r1, [sp, #44]	; 0x2c
 8015c3a:	4463      	add	r3, ip
 8015c3c:	9319      	str	r3, [sp, #100]	; 0x64
 8015c3e:	0029      	movs	r1, r5
 8015c40:	0020      	movs	r0, r4
 8015c42:	f7ec fb9b 	bl	800237c <__aeabi_d2iz>
 8015c46:	9017      	str	r0, [sp, #92]	; 0x5c
 8015c48:	f7ec fbce 	bl	80023e8 <__aeabi_i2d>
 8015c4c:	0002      	movs	r2, r0
 8015c4e:	000b      	movs	r3, r1
 8015c50:	0020      	movs	r0, r4
 8015c52:	0029      	movs	r1, r5
 8015c54:	f7eb ffe2 	bl	8001c1c <__aeabi_dsub>
 8015c58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c5c:	3301      	adds	r3, #1
 8015c5e:	9307      	str	r3, [sp, #28]
 8015c60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c62:	0004      	movs	r4, r0
 8015c64:	3330      	adds	r3, #48	; 0x30
 8015c66:	7013      	strb	r3, [r2, #0]
 8015c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c6c:	000d      	movs	r5, r1
 8015c6e:	f7ea fbfb 	bl	8000468 <__aeabi_dcmplt>
 8015c72:	2800      	cmp	r0, #0
 8015c74:	d175      	bne.n	8015d62 <_dtoa_r+0x686>
 8015c76:	0022      	movs	r2, r4
 8015c78:	002b      	movs	r3, r5
 8015c7a:	2000      	movs	r0, #0
 8015c7c:	493f      	ldr	r1, [pc, #252]	; (8015d7c <_dtoa_r+0x6a0>)
 8015c7e:	f7eb ffcd 	bl	8001c1c <__aeabi_dsub>
 8015c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c86:	f7ea fbef 	bl	8000468 <__aeabi_dcmplt>
 8015c8a:	2800      	cmp	r0, #0
 8015c8c:	d000      	beq.n	8015c90 <_dtoa_r+0x5b4>
 8015c8e:	e0d1      	b.n	8015e34 <_dtoa_r+0x758>
 8015c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c92:	9a07      	ldr	r2, [sp, #28]
 8015c94:	4293      	cmp	r3, r2
 8015c96:	d100      	bne.n	8015c9a <_dtoa_r+0x5be>
 8015c98:	e770      	b.n	8015b7c <_dtoa_r+0x4a0>
 8015c9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	4b37      	ldr	r3, [pc, #220]	; (8015d80 <_dtoa_r+0x6a4>)
 8015ca2:	f7eb fd4f 	bl	8001744 <__aeabi_dmul>
 8015ca6:	4b36      	ldr	r3, [pc, #216]	; (8015d80 <_dtoa_r+0x6a4>)
 8015ca8:	900a      	str	r0, [sp, #40]	; 0x28
 8015caa:	910b      	str	r1, [sp, #44]	; 0x2c
 8015cac:	2200      	movs	r2, #0
 8015cae:	0020      	movs	r0, r4
 8015cb0:	0029      	movs	r1, r5
 8015cb2:	f7eb fd47 	bl	8001744 <__aeabi_dmul>
 8015cb6:	9b07      	ldr	r3, [sp, #28]
 8015cb8:	0004      	movs	r4, r0
 8015cba:	000d      	movs	r5, r1
 8015cbc:	9310      	str	r3, [sp, #64]	; 0x40
 8015cbe:	e7be      	b.n	8015c3e <_dtoa_r+0x562>
 8015cc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015cc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015cc4:	f7eb fd3e 	bl	8001744 <__aeabi_dmul>
 8015cc8:	9a05      	ldr	r2, [sp, #20]
 8015cca:	9b05      	ldr	r3, [sp, #20]
 8015ccc:	4694      	mov	ip, r2
 8015cce:	930a      	str	r3, [sp, #40]	; 0x28
 8015cd0:	9b07      	ldr	r3, [sp, #28]
 8015cd2:	9010      	str	r0, [sp, #64]	; 0x40
 8015cd4:	9111      	str	r1, [sp, #68]	; 0x44
 8015cd6:	4463      	add	r3, ip
 8015cd8:	9319      	str	r3, [sp, #100]	; 0x64
 8015cda:	0029      	movs	r1, r5
 8015cdc:	0020      	movs	r0, r4
 8015cde:	f7ec fb4d 	bl	800237c <__aeabi_d2iz>
 8015ce2:	9017      	str	r0, [sp, #92]	; 0x5c
 8015ce4:	f7ec fb80 	bl	80023e8 <__aeabi_i2d>
 8015ce8:	0002      	movs	r2, r0
 8015cea:	000b      	movs	r3, r1
 8015cec:	0020      	movs	r0, r4
 8015cee:	0029      	movs	r1, r5
 8015cf0:	f7eb ff94 	bl	8001c1c <__aeabi_dsub>
 8015cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cf8:	3330      	adds	r3, #48	; 0x30
 8015cfa:	7013      	strb	r3, [r2, #0]
 8015cfc:	0013      	movs	r3, r2
 8015cfe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015d00:	3301      	adds	r3, #1
 8015d02:	0004      	movs	r4, r0
 8015d04:	000d      	movs	r5, r1
 8015d06:	930a      	str	r3, [sp, #40]	; 0x28
 8015d08:	4293      	cmp	r3, r2
 8015d0a:	d12c      	bne.n	8015d66 <_dtoa_r+0x68a>
 8015d0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015d0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015d10:	9a05      	ldr	r2, [sp, #20]
 8015d12:	9b07      	ldr	r3, [sp, #28]
 8015d14:	4694      	mov	ip, r2
 8015d16:	4463      	add	r3, ip
 8015d18:	2200      	movs	r2, #0
 8015d1a:	9307      	str	r3, [sp, #28]
 8015d1c:	4b1d      	ldr	r3, [pc, #116]	; (8015d94 <_dtoa_r+0x6b8>)
 8015d1e:	f7ea fda1 	bl	8000864 <__aeabi_dadd>
 8015d22:	0002      	movs	r2, r0
 8015d24:	000b      	movs	r3, r1
 8015d26:	0020      	movs	r0, r4
 8015d28:	0029      	movs	r1, r5
 8015d2a:	f7ea fbb1 	bl	8000490 <__aeabi_dcmpgt>
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	d000      	beq.n	8015d34 <_dtoa_r+0x658>
 8015d32:	e07f      	b.n	8015e34 <_dtoa_r+0x758>
 8015d34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015d36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d38:	2000      	movs	r0, #0
 8015d3a:	4916      	ldr	r1, [pc, #88]	; (8015d94 <_dtoa_r+0x6b8>)
 8015d3c:	f7eb ff6e 	bl	8001c1c <__aeabi_dsub>
 8015d40:	0002      	movs	r2, r0
 8015d42:	000b      	movs	r3, r1
 8015d44:	0020      	movs	r0, r4
 8015d46:	0029      	movs	r1, r5
 8015d48:	f7ea fb8e 	bl	8000468 <__aeabi_dcmplt>
 8015d4c:	2800      	cmp	r0, #0
 8015d4e:	d100      	bne.n	8015d52 <_dtoa_r+0x676>
 8015d50:	e714      	b.n	8015b7c <_dtoa_r+0x4a0>
 8015d52:	9b07      	ldr	r3, [sp, #28]
 8015d54:	001a      	movs	r2, r3
 8015d56:	3a01      	subs	r2, #1
 8015d58:	9207      	str	r2, [sp, #28]
 8015d5a:	7812      	ldrb	r2, [r2, #0]
 8015d5c:	2a30      	cmp	r2, #48	; 0x30
 8015d5e:	d0f8      	beq.n	8015d52 <_dtoa_r+0x676>
 8015d60:	9307      	str	r3, [sp, #28]
 8015d62:	9602      	str	r6, [sp, #8]
 8015d64:	e054      	b.n	8015e10 <_dtoa_r+0x734>
 8015d66:	2200      	movs	r2, #0
 8015d68:	4b05      	ldr	r3, [pc, #20]	; (8015d80 <_dtoa_r+0x6a4>)
 8015d6a:	f7eb fceb 	bl	8001744 <__aeabi_dmul>
 8015d6e:	0004      	movs	r4, r0
 8015d70:	000d      	movs	r5, r1
 8015d72:	e7b2      	b.n	8015cda <_dtoa_r+0x5fe>
 8015d74:	0801bb40 	.word	0x0801bb40
 8015d78:	0801bb18 	.word	0x0801bb18
 8015d7c:	3ff00000 	.word	0x3ff00000
 8015d80:	40240000 	.word	0x40240000
 8015d84:	401c0000 	.word	0x401c0000
 8015d88:	fcc00000 	.word	0xfcc00000
 8015d8c:	40140000 	.word	0x40140000
 8015d90:	7cc00000 	.word	0x7cc00000
 8015d94:	3fe00000 	.word	0x3fe00000
 8015d98:	9b06      	ldr	r3, [sp, #24]
 8015d9a:	9e05      	ldr	r6, [sp, #20]
 8015d9c:	3b01      	subs	r3, #1
 8015d9e:	199b      	adds	r3, r3, r6
 8015da0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015da2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015da4:	930a      	str	r3, [sp, #40]	; 0x28
 8015da6:	9a08      	ldr	r2, [sp, #32]
 8015da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015daa:	0020      	movs	r0, r4
 8015dac:	0029      	movs	r1, r5
 8015dae:	f7eb f8c3 	bl	8000f38 <__aeabi_ddiv>
 8015db2:	f7ec fae3 	bl	800237c <__aeabi_d2iz>
 8015db6:	9006      	str	r0, [sp, #24]
 8015db8:	f7ec fb16 	bl	80023e8 <__aeabi_i2d>
 8015dbc:	9a08      	ldr	r2, [sp, #32]
 8015dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dc0:	f7eb fcc0 	bl	8001744 <__aeabi_dmul>
 8015dc4:	0002      	movs	r2, r0
 8015dc6:	000b      	movs	r3, r1
 8015dc8:	0020      	movs	r0, r4
 8015dca:	0029      	movs	r1, r5
 8015dcc:	f7eb ff26 	bl	8001c1c <__aeabi_dsub>
 8015dd0:	0033      	movs	r3, r6
 8015dd2:	9a06      	ldr	r2, [sp, #24]
 8015dd4:	3601      	adds	r6, #1
 8015dd6:	3230      	adds	r2, #48	; 0x30
 8015dd8:	701a      	strb	r2, [r3, #0]
 8015dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ddc:	9607      	str	r6, [sp, #28]
 8015dde:	429a      	cmp	r2, r3
 8015de0:	d139      	bne.n	8015e56 <_dtoa_r+0x77a>
 8015de2:	0002      	movs	r2, r0
 8015de4:	000b      	movs	r3, r1
 8015de6:	f7ea fd3d 	bl	8000864 <__aeabi_dadd>
 8015dea:	9a08      	ldr	r2, [sp, #32]
 8015dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dee:	0004      	movs	r4, r0
 8015df0:	000d      	movs	r5, r1
 8015df2:	f7ea fb4d 	bl	8000490 <__aeabi_dcmpgt>
 8015df6:	2800      	cmp	r0, #0
 8015df8:	d11b      	bne.n	8015e32 <_dtoa_r+0x756>
 8015dfa:	9a08      	ldr	r2, [sp, #32]
 8015dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dfe:	0020      	movs	r0, r4
 8015e00:	0029      	movs	r1, r5
 8015e02:	f7ea fb2b 	bl	800045c <__aeabi_dcmpeq>
 8015e06:	2800      	cmp	r0, #0
 8015e08:	d002      	beq.n	8015e10 <_dtoa_r+0x734>
 8015e0a:	9b06      	ldr	r3, [sp, #24]
 8015e0c:	07db      	lsls	r3, r3, #31
 8015e0e:	d410      	bmi.n	8015e32 <_dtoa_r+0x756>
 8015e10:	0038      	movs	r0, r7
 8015e12:	9904      	ldr	r1, [sp, #16]
 8015e14:	f000 fe7e 	bl	8016b14 <_Bfree>
 8015e18:	2300      	movs	r3, #0
 8015e1a:	9a07      	ldr	r2, [sp, #28]
 8015e1c:	9802      	ldr	r0, [sp, #8]
 8015e1e:	7013      	strb	r3, [r2, #0]
 8015e20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015e22:	3001      	adds	r0, #1
 8015e24:	6018      	str	r0, [r3, #0]
 8015e26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d100      	bne.n	8015e2e <_dtoa_r+0x752>
 8015e2c:	e4a3      	b.n	8015776 <_dtoa_r+0x9a>
 8015e2e:	601a      	str	r2, [r3, #0]
 8015e30:	e4a1      	b.n	8015776 <_dtoa_r+0x9a>
 8015e32:	9e02      	ldr	r6, [sp, #8]
 8015e34:	9b07      	ldr	r3, [sp, #28]
 8015e36:	9307      	str	r3, [sp, #28]
 8015e38:	3b01      	subs	r3, #1
 8015e3a:	781a      	ldrb	r2, [r3, #0]
 8015e3c:	2a39      	cmp	r2, #57	; 0x39
 8015e3e:	d106      	bne.n	8015e4e <_dtoa_r+0x772>
 8015e40:	9a05      	ldr	r2, [sp, #20]
 8015e42:	429a      	cmp	r2, r3
 8015e44:	d1f7      	bne.n	8015e36 <_dtoa_r+0x75a>
 8015e46:	2230      	movs	r2, #48	; 0x30
 8015e48:	9905      	ldr	r1, [sp, #20]
 8015e4a:	3601      	adds	r6, #1
 8015e4c:	700a      	strb	r2, [r1, #0]
 8015e4e:	781a      	ldrb	r2, [r3, #0]
 8015e50:	3201      	adds	r2, #1
 8015e52:	701a      	strb	r2, [r3, #0]
 8015e54:	e785      	b.n	8015d62 <_dtoa_r+0x686>
 8015e56:	2200      	movs	r2, #0
 8015e58:	4bad      	ldr	r3, [pc, #692]	; (8016110 <_dtoa_r+0xa34>)
 8015e5a:	f7eb fc73 	bl	8001744 <__aeabi_dmul>
 8015e5e:	2200      	movs	r2, #0
 8015e60:	2300      	movs	r3, #0
 8015e62:	0004      	movs	r4, r0
 8015e64:	000d      	movs	r5, r1
 8015e66:	f7ea faf9 	bl	800045c <__aeabi_dcmpeq>
 8015e6a:	2800      	cmp	r0, #0
 8015e6c:	d09b      	beq.n	8015da6 <_dtoa_r+0x6ca>
 8015e6e:	e7cf      	b.n	8015e10 <_dtoa_r+0x734>
 8015e70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e72:	2a00      	cmp	r2, #0
 8015e74:	d100      	bne.n	8015e78 <_dtoa_r+0x79c>
 8015e76:	e082      	b.n	8015f7e <_dtoa_r+0x8a2>
 8015e78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015e7a:	2a01      	cmp	r2, #1
 8015e7c:	dc66      	bgt.n	8015f4c <_dtoa_r+0x870>
 8015e7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e80:	2a00      	cmp	r2, #0
 8015e82:	d05f      	beq.n	8015f44 <_dtoa_r+0x868>
 8015e84:	4aa3      	ldr	r2, [pc, #652]	; (8016114 <_dtoa_r+0xa38>)
 8015e86:	189b      	adds	r3, r3, r2
 8015e88:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015e8a:	9c08      	ldr	r4, [sp, #32]
 8015e8c:	9a08      	ldr	r2, [sp, #32]
 8015e8e:	2101      	movs	r1, #1
 8015e90:	18d2      	adds	r2, r2, r3
 8015e92:	9208      	str	r2, [sp, #32]
 8015e94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e96:	0038      	movs	r0, r7
 8015e98:	18d3      	adds	r3, r2, r3
 8015e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8015e9c:	f000 ff36 	bl	8016d0c <__i2b>
 8015ea0:	0005      	movs	r5, r0
 8015ea2:	2c00      	cmp	r4, #0
 8015ea4:	dd0e      	ble.n	8015ec4 <_dtoa_r+0x7e8>
 8015ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	dd0b      	ble.n	8015ec4 <_dtoa_r+0x7e8>
 8015eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015eae:	0023      	movs	r3, r4
 8015eb0:	4294      	cmp	r4, r2
 8015eb2:	dd00      	ble.n	8015eb6 <_dtoa_r+0x7da>
 8015eb4:	0013      	movs	r3, r2
 8015eb6:	9a08      	ldr	r2, [sp, #32]
 8015eb8:	1ae4      	subs	r4, r4, r3
 8015eba:	1ad2      	subs	r2, r2, r3
 8015ebc:	9208      	str	r2, [sp, #32]
 8015ebe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ec0:	1ad3      	subs	r3, r2, r3
 8015ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8015ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d01f      	beq.n	8015f0a <_dtoa_r+0x82e>
 8015eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d05a      	beq.n	8015f86 <_dtoa_r+0x8aa>
 8015ed0:	2e00      	cmp	r6, #0
 8015ed2:	dd11      	ble.n	8015ef8 <_dtoa_r+0x81c>
 8015ed4:	0029      	movs	r1, r5
 8015ed6:	0032      	movs	r2, r6
 8015ed8:	0038      	movs	r0, r7
 8015eda:	f000 ffdd 	bl	8016e98 <__pow5mult>
 8015ede:	9a04      	ldr	r2, [sp, #16]
 8015ee0:	0001      	movs	r1, r0
 8015ee2:	0005      	movs	r5, r0
 8015ee4:	0038      	movs	r0, r7
 8015ee6:	f000 ff27 	bl	8016d38 <__multiply>
 8015eea:	9904      	ldr	r1, [sp, #16]
 8015eec:	9007      	str	r0, [sp, #28]
 8015eee:	0038      	movs	r0, r7
 8015ef0:	f000 fe10 	bl	8016b14 <_Bfree>
 8015ef4:	9b07      	ldr	r3, [sp, #28]
 8015ef6:	9304      	str	r3, [sp, #16]
 8015ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015efa:	1b9a      	subs	r2, r3, r6
 8015efc:	42b3      	cmp	r3, r6
 8015efe:	d004      	beq.n	8015f0a <_dtoa_r+0x82e>
 8015f00:	0038      	movs	r0, r7
 8015f02:	9904      	ldr	r1, [sp, #16]
 8015f04:	f000 ffc8 	bl	8016e98 <__pow5mult>
 8015f08:	9004      	str	r0, [sp, #16]
 8015f0a:	2101      	movs	r1, #1
 8015f0c:	0038      	movs	r0, r7
 8015f0e:	f000 fefd 	bl	8016d0c <__i2b>
 8015f12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f14:	0006      	movs	r6, r0
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	dd37      	ble.n	8015f8a <_dtoa_r+0x8ae>
 8015f1a:	001a      	movs	r2, r3
 8015f1c:	0001      	movs	r1, r0
 8015f1e:	0038      	movs	r0, r7
 8015f20:	f000 ffba 	bl	8016e98 <__pow5mult>
 8015f24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f26:	0006      	movs	r6, r0
 8015f28:	2b01      	cmp	r3, #1
 8015f2a:	dd33      	ble.n	8015f94 <_dtoa_r+0x8b8>
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	9307      	str	r3, [sp, #28]
 8015f30:	6933      	ldr	r3, [r6, #16]
 8015f32:	3303      	adds	r3, #3
 8015f34:	009b      	lsls	r3, r3, #2
 8015f36:	18f3      	adds	r3, r6, r3
 8015f38:	6858      	ldr	r0, [r3, #4]
 8015f3a:	f000 fe9f 	bl	8016c7c <__hi0bits>
 8015f3e:	2320      	movs	r3, #32
 8015f40:	1a18      	subs	r0, r3, r0
 8015f42:	e03f      	b.n	8015fc4 <_dtoa_r+0x8e8>
 8015f44:	2336      	movs	r3, #54	; 0x36
 8015f46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015f48:	1a9b      	subs	r3, r3, r2
 8015f4a:	e79d      	b.n	8015e88 <_dtoa_r+0x7ac>
 8015f4c:	9b06      	ldr	r3, [sp, #24]
 8015f4e:	1e5e      	subs	r6, r3, #1
 8015f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f52:	42b3      	cmp	r3, r6
 8015f54:	db08      	blt.n	8015f68 <_dtoa_r+0x88c>
 8015f56:	1b9e      	subs	r6, r3, r6
 8015f58:	9b06      	ldr	r3, [sp, #24]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	da0c      	bge.n	8015f78 <_dtoa_r+0x89c>
 8015f5e:	9b08      	ldr	r3, [sp, #32]
 8015f60:	9a06      	ldr	r2, [sp, #24]
 8015f62:	1a9c      	subs	r4, r3, r2
 8015f64:	2300      	movs	r3, #0
 8015f66:	e791      	b.n	8015e8c <_dtoa_r+0x7b0>
 8015f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015f6c:	1af3      	subs	r3, r6, r3
 8015f6e:	18d3      	adds	r3, r2, r3
 8015f70:	960e      	str	r6, [sp, #56]	; 0x38
 8015f72:	9314      	str	r3, [sp, #80]	; 0x50
 8015f74:	2600      	movs	r6, #0
 8015f76:	e7ef      	b.n	8015f58 <_dtoa_r+0x87c>
 8015f78:	9c08      	ldr	r4, [sp, #32]
 8015f7a:	9b06      	ldr	r3, [sp, #24]
 8015f7c:	e786      	b.n	8015e8c <_dtoa_r+0x7b0>
 8015f7e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015f80:	9c08      	ldr	r4, [sp, #32]
 8015f82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015f84:	e78d      	b.n	8015ea2 <_dtoa_r+0x7c6>
 8015f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f88:	e7ba      	b.n	8015f00 <_dtoa_r+0x824>
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	9307      	str	r3, [sp, #28]
 8015f8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	dc13      	bgt.n	8015fbc <_dtoa_r+0x8e0>
 8015f94:	2300      	movs	r3, #0
 8015f96:	9307      	str	r3, [sp, #28]
 8015f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d10e      	bne.n	8015fbc <_dtoa_r+0x8e0>
 8015f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fa0:	031b      	lsls	r3, r3, #12
 8015fa2:	d10b      	bne.n	8015fbc <_dtoa_r+0x8e0>
 8015fa4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015fa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fa8:	4213      	tst	r3, r2
 8015faa:	d007      	beq.n	8015fbc <_dtoa_r+0x8e0>
 8015fac:	9b08      	ldr	r3, [sp, #32]
 8015fae:	3301      	adds	r3, #1
 8015fb0:	9308      	str	r3, [sp, #32]
 8015fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fb4:	3301      	adds	r3, #1
 8015fb6:	930d      	str	r3, [sp, #52]	; 0x34
 8015fb8:	2301      	movs	r3, #1
 8015fba:	9307      	str	r3, [sp, #28]
 8015fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fbe:	2001      	movs	r0, #1
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d1b5      	bne.n	8015f30 <_dtoa_r+0x854>
 8015fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fc6:	221f      	movs	r2, #31
 8015fc8:	1818      	adds	r0, r3, r0
 8015fca:	0003      	movs	r3, r0
 8015fcc:	4013      	ands	r3, r2
 8015fce:	4210      	tst	r0, r2
 8015fd0:	d046      	beq.n	8016060 <_dtoa_r+0x984>
 8015fd2:	3201      	adds	r2, #1
 8015fd4:	1ad2      	subs	r2, r2, r3
 8015fd6:	2a04      	cmp	r2, #4
 8015fd8:	dd3f      	ble.n	801605a <_dtoa_r+0x97e>
 8015fda:	221c      	movs	r2, #28
 8015fdc:	1ad3      	subs	r3, r2, r3
 8015fde:	9a08      	ldr	r2, [sp, #32]
 8015fe0:	18e4      	adds	r4, r4, r3
 8015fe2:	18d2      	adds	r2, r2, r3
 8015fe4:	9208      	str	r2, [sp, #32]
 8015fe6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015fe8:	18d3      	adds	r3, r2, r3
 8015fea:	930d      	str	r3, [sp, #52]	; 0x34
 8015fec:	9b08      	ldr	r3, [sp, #32]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	dd05      	ble.n	8015ffe <_dtoa_r+0x922>
 8015ff2:	001a      	movs	r2, r3
 8015ff4:	0038      	movs	r0, r7
 8015ff6:	9904      	ldr	r1, [sp, #16]
 8015ff8:	f000 ffaa 	bl	8016f50 <__lshift>
 8015ffc:	9004      	str	r0, [sp, #16]
 8015ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016000:	2b00      	cmp	r3, #0
 8016002:	dd05      	ble.n	8016010 <_dtoa_r+0x934>
 8016004:	0031      	movs	r1, r6
 8016006:	001a      	movs	r2, r3
 8016008:	0038      	movs	r0, r7
 801600a:	f000 ffa1 	bl	8016f50 <__lshift>
 801600e:	0006      	movs	r6, r0
 8016010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016012:	2b00      	cmp	r3, #0
 8016014:	d026      	beq.n	8016064 <_dtoa_r+0x988>
 8016016:	0031      	movs	r1, r6
 8016018:	9804      	ldr	r0, [sp, #16]
 801601a:	f001 f809 	bl	8017030 <__mcmp>
 801601e:	2800      	cmp	r0, #0
 8016020:	da20      	bge.n	8016064 <_dtoa_r+0x988>
 8016022:	9b02      	ldr	r3, [sp, #8]
 8016024:	220a      	movs	r2, #10
 8016026:	3b01      	subs	r3, #1
 8016028:	9302      	str	r3, [sp, #8]
 801602a:	0038      	movs	r0, r7
 801602c:	2300      	movs	r3, #0
 801602e:	9904      	ldr	r1, [sp, #16]
 8016030:	f000 fd94 	bl	8016b5c <__multadd>
 8016034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016036:	9004      	str	r0, [sp, #16]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d100      	bne.n	801603e <_dtoa_r+0x962>
 801603c:	e160      	b.n	8016300 <_dtoa_r+0xc24>
 801603e:	2300      	movs	r3, #0
 8016040:	0029      	movs	r1, r5
 8016042:	220a      	movs	r2, #10
 8016044:	0038      	movs	r0, r7
 8016046:	f000 fd89 	bl	8016b5c <__multadd>
 801604a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801604c:	0005      	movs	r5, r0
 801604e:	2b00      	cmp	r3, #0
 8016050:	dc47      	bgt.n	80160e2 <_dtoa_r+0xa06>
 8016052:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016054:	2b02      	cmp	r3, #2
 8016056:	dc0d      	bgt.n	8016074 <_dtoa_r+0x998>
 8016058:	e043      	b.n	80160e2 <_dtoa_r+0xa06>
 801605a:	2a04      	cmp	r2, #4
 801605c:	d0c6      	beq.n	8015fec <_dtoa_r+0x910>
 801605e:	0013      	movs	r3, r2
 8016060:	331c      	adds	r3, #28
 8016062:	e7bc      	b.n	8015fde <_dtoa_r+0x902>
 8016064:	9b06      	ldr	r3, [sp, #24]
 8016066:	2b00      	cmp	r3, #0
 8016068:	dc35      	bgt.n	80160d6 <_dtoa_r+0x9fa>
 801606a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801606c:	2b02      	cmp	r3, #2
 801606e:	dd32      	ble.n	80160d6 <_dtoa_r+0x9fa>
 8016070:	9b06      	ldr	r3, [sp, #24]
 8016072:	930c      	str	r3, [sp, #48]	; 0x30
 8016074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016076:	2b00      	cmp	r3, #0
 8016078:	d10c      	bne.n	8016094 <_dtoa_r+0x9b8>
 801607a:	0031      	movs	r1, r6
 801607c:	2205      	movs	r2, #5
 801607e:	0038      	movs	r0, r7
 8016080:	f000 fd6c 	bl	8016b5c <__multadd>
 8016084:	0006      	movs	r6, r0
 8016086:	0001      	movs	r1, r0
 8016088:	9804      	ldr	r0, [sp, #16]
 801608a:	f000 ffd1 	bl	8017030 <__mcmp>
 801608e:	2800      	cmp	r0, #0
 8016090:	dd00      	ble.n	8016094 <_dtoa_r+0x9b8>
 8016092:	e59f      	b.n	8015bd4 <_dtoa_r+0x4f8>
 8016094:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016096:	43db      	mvns	r3, r3
 8016098:	9302      	str	r3, [sp, #8]
 801609a:	9b05      	ldr	r3, [sp, #20]
 801609c:	9307      	str	r3, [sp, #28]
 801609e:	2400      	movs	r4, #0
 80160a0:	0031      	movs	r1, r6
 80160a2:	0038      	movs	r0, r7
 80160a4:	f000 fd36 	bl	8016b14 <_Bfree>
 80160a8:	2d00      	cmp	r5, #0
 80160aa:	d100      	bne.n	80160ae <_dtoa_r+0x9d2>
 80160ac:	e6b0      	b.n	8015e10 <_dtoa_r+0x734>
 80160ae:	2c00      	cmp	r4, #0
 80160b0:	d005      	beq.n	80160be <_dtoa_r+0x9e2>
 80160b2:	42ac      	cmp	r4, r5
 80160b4:	d003      	beq.n	80160be <_dtoa_r+0x9e2>
 80160b6:	0021      	movs	r1, r4
 80160b8:	0038      	movs	r0, r7
 80160ba:	f000 fd2b 	bl	8016b14 <_Bfree>
 80160be:	0029      	movs	r1, r5
 80160c0:	0038      	movs	r0, r7
 80160c2:	f000 fd27 	bl	8016b14 <_Bfree>
 80160c6:	e6a3      	b.n	8015e10 <_dtoa_r+0x734>
 80160c8:	2600      	movs	r6, #0
 80160ca:	0035      	movs	r5, r6
 80160cc:	e7e2      	b.n	8016094 <_dtoa_r+0x9b8>
 80160ce:	9602      	str	r6, [sp, #8]
 80160d0:	9e07      	ldr	r6, [sp, #28]
 80160d2:	0035      	movs	r5, r6
 80160d4:	e57e      	b.n	8015bd4 <_dtoa_r+0x4f8>
 80160d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d100      	bne.n	80160de <_dtoa_r+0xa02>
 80160dc:	e0c8      	b.n	8016270 <_dtoa_r+0xb94>
 80160de:	9b06      	ldr	r3, [sp, #24]
 80160e0:	930c      	str	r3, [sp, #48]	; 0x30
 80160e2:	2c00      	cmp	r4, #0
 80160e4:	dd05      	ble.n	80160f2 <_dtoa_r+0xa16>
 80160e6:	0029      	movs	r1, r5
 80160e8:	0022      	movs	r2, r4
 80160ea:	0038      	movs	r0, r7
 80160ec:	f000 ff30 	bl	8016f50 <__lshift>
 80160f0:	0005      	movs	r5, r0
 80160f2:	9b07      	ldr	r3, [sp, #28]
 80160f4:	0028      	movs	r0, r5
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d01f      	beq.n	801613a <_dtoa_r+0xa5e>
 80160fa:	0038      	movs	r0, r7
 80160fc:	6869      	ldr	r1, [r5, #4]
 80160fe:	f000 fcc5 	bl	8016a8c <_Balloc>
 8016102:	1e04      	subs	r4, r0, #0
 8016104:	d10c      	bne.n	8016120 <_dtoa_r+0xa44>
 8016106:	0002      	movs	r2, r0
 8016108:	4b03      	ldr	r3, [pc, #12]	; (8016118 <_dtoa_r+0xa3c>)
 801610a:	4904      	ldr	r1, [pc, #16]	; (801611c <_dtoa_r+0xa40>)
 801610c:	f7ff fafb 	bl	8015706 <_dtoa_r+0x2a>
 8016110:	40240000 	.word	0x40240000
 8016114:	00000433 	.word	0x00000433
 8016118:	0801ba29 	.word	0x0801ba29
 801611c:	000002ea 	.word	0x000002ea
 8016120:	0029      	movs	r1, r5
 8016122:	692b      	ldr	r3, [r5, #16]
 8016124:	310c      	adds	r1, #12
 8016126:	1c9a      	adds	r2, r3, #2
 8016128:	0092      	lsls	r2, r2, #2
 801612a:	300c      	adds	r0, #12
 801612c:	f7fd fad6 	bl	80136dc <memcpy>
 8016130:	2201      	movs	r2, #1
 8016132:	0021      	movs	r1, r4
 8016134:	0038      	movs	r0, r7
 8016136:	f000 ff0b 	bl	8016f50 <__lshift>
 801613a:	002c      	movs	r4, r5
 801613c:	0005      	movs	r5, r0
 801613e:	9b05      	ldr	r3, [sp, #20]
 8016140:	9308      	str	r3, [sp, #32]
 8016142:	0031      	movs	r1, r6
 8016144:	9804      	ldr	r0, [sp, #16]
 8016146:	f7ff fa3d 	bl	80155c4 <quorem>
 801614a:	0003      	movs	r3, r0
 801614c:	0021      	movs	r1, r4
 801614e:	3330      	adds	r3, #48	; 0x30
 8016150:	900e      	str	r0, [sp, #56]	; 0x38
 8016152:	9804      	ldr	r0, [sp, #16]
 8016154:	9306      	str	r3, [sp, #24]
 8016156:	f000 ff6b 	bl	8017030 <__mcmp>
 801615a:	002a      	movs	r2, r5
 801615c:	900f      	str	r0, [sp, #60]	; 0x3c
 801615e:	0031      	movs	r1, r6
 8016160:	0038      	movs	r0, r7
 8016162:	f000 ff81 	bl	8017068 <__mdiff>
 8016166:	68c3      	ldr	r3, [r0, #12]
 8016168:	9007      	str	r0, [sp, #28]
 801616a:	9310      	str	r3, [sp, #64]	; 0x40
 801616c:	2301      	movs	r3, #1
 801616e:	930d      	str	r3, [sp, #52]	; 0x34
 8016170:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016172:	2b00      	cmp	r3, #0
 8016174:	d104      	bne.n	8016180 <_dtoa_r+0xaa4>
 8016176:	0001      	movs	r1, r0
 8016178:	9804      	ldr	r0, [sp, #16]
 801617a:	f000 ff59 	bl	8017030 <__mcmp>
 801617e:	900d      	str	r0, [sp, #52]	; 0x34
 8016180:	0038      	movs	r0, r7
 8016182:	9907      	ldr	r1, [sp, #28]
 8016184:	f000 fcc6 	bl	8016b14 <_Bfree>
 8016188:	2301      	movs	r3, #1
 801618a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801618c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801618e:	4018      	ands	r0, r3
 8016190:	9b08      	ldr	r3, [sp, #32]
 8016192:	3301      	adds	r3, #1
 8016194:	9307      	str	r3, [sp, #28]
 8016196:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016198:	4313      	orrs	r3, r2
 801619a:	4303      	orrs	r3, r0
 801619c:	d10c      	bne.n	80161b8 <_dtoa_r+0xadc>
 801619e:	9b06      	ldr	r3, [sp, #24]
 80161a0:	2b39      	cmp	r3, #57	; 0x39
 80161a2:	d025      	beq.n	80161f0 <_dtoa_r+0xb14>
 80161a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	dd02      	ble.n	80161b0 <_dtoa_r+0xad4>
 80161aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161ac:	3331      	adds	r3, #49	; 0x31
 80161ae:	9306      	str	r3, [sp, #24]
 80161b0:	9b08      	ldr	r3, [sp, #32]
 80161b2:	9a06      	ldr	r2, [sp, #24]
 80161b4:	701a      	strb	r2, [r3, #0]
 80161b6:	e773      	b.n	80160a0 <_dtoa_r+0x9c4>
 80161b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	db03      	blt.n	80161c6 <_dtoa_r+0xaea>
 80161be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80161c0:	4313      	orrs	r3, r2
 80161c2:	4303      	orrs	r3, r0
 80161c4:	d11f      	bne.n	8016206 <_dtoa_r+0xb2a>
 80161c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	ddf1      	ble.n	80161b0 <_dtoa_r+0xad4>
 80161cc:	9904      	ldr	r1, [sp, #16]
 80161ce:	2201      	movs	r2, #1
 80161d0:	0038      	movs	r0, r7
 80161d2:	f000 febd 	bl	8016f50 <__lshift>
 80161d6:	0031      	movs	r1, r6
 80161d8:	9004      	str	r0, [sp, #16]
 80161da:	f000 ff29 	bl	8017030 <__mcmp>
 80161de:	2800      	cmp	r0, #0
 80161e0:	dc03      	bgt.n	80161ea <_dtoa_r+0xb0e>
 80161e2:	d1e5      	bne.n	80161b0 <_dtoa_r+0xad4>
 80161e4:	9b06      	ldr	r3, [sp, #24]
 80161e6:	07db      	lsls	r3, r3, #31
 80161e8:	d5e2      	bpl.n	80161b0 <_dtoa_r+0xad4>
 80161ea:	9b06      	ldr	r3, [sp, #24]
 80161ec:	2b39      	cmp	r3, #57	; 0x39
 80161ee:	d1dc      	bne.n	80161aa <_dtoa_r+0xace>
 80161f0:	2339      	movs	r3, #57	; 0x39
 80161f2:	9a08      	ldr	r2, [sp, #32]
 80161f4:	7013      	strb	r3, [r2, #0]
 80161f6:	9b07      	ldr	r3, [sp, #28]
 80161f8:	9307      	str	r3, [sp, #28]
 80161fa:	3b01      	subs	r3, #1
 80161fc:	781a      	ldrb	r2, [r3, #0]
 80161fe:	2a39      	cmp	r2, #57	; 0x39
 8016200:	d06c      	beq.n	80162dc <_dtoa_r+0xc00>
 8016202:	3201      	adds	r2, #1
 8016204:	e7d6      	b.n	80161b4 <_dtoa_r+0xad8>
 8016206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016208:	2b00      	cmp	r3, #0
 801620a:	dd07      	ble.n	801621c <_dtoa_r+0xb40>
 801620c:	9b06      	ldr	r3, [sp, #24]
 801620e:	2b39      	cmp	r3, #57	; 0x39
 8016210:	d0ee      	beq.n	80161f0 <_dtoa_r+0xb14>
 8016212:	9b06      	ldr	r3, [sp, #24]
 8016214:	9a08      	ldr	r2, [sp, #32]
 8016216:	3301      	adds	r3, #1
 8016218:	7013      	strb	r3, [r2, #0]
 801621a:	e741      	b.n	80160a0 <_dtoa_r+0x9c4>
 801621c:	9b08      	ldr	r3, [sp, #32]
 801621e:	9a06      	ldr	r2, [sp, #24]
 8016220:	701a      	strb	r2, [r3, #0]
 8016222:	2301      	movs	r3, #1
 8016224:	9a05      	ldr	r2, [sp, #20]
 8016226:	1a9b      	subs	r3, r3, r2
 8016228:	9a08      	ldr	r2, [sp, #32]
 801622a:	189b      	adds	r3, r3, r2
 801622c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801622e:	429a      	cmp	r2, r3
 8016230:	d03e      	beq.n	80162b0 <_dtoa_r+0xbd4>
 8016232:	2300      	movs	r3, #0
 8016234:	220a      	movs	r2, #10
 8016236:	9904      	ldr	r1, [sp, #16]
 8016238:	0038      	movs	r0, r7
 801623a:	f000 fc8f 	bl	8016b5c <__multadd>
 801623e:	2300      	movs	r3, #0
 8016240:	9004      	str	r0, [sp, #16]
 8016242:	220a      	movs	r2, #10
 8016244:	0021      	movs	r1, r4
 8016246:	0038      	movs	r0, r7
 8016248:	42ac      	cmp	r4, r5
 801624a:	d106      	bne.n	801625a <_dtoa_r+0xb7e>
 801624c:	f000 fc86 	bl	8016b5c <__multadd>
 8016250:	0004      	movs	r4, r0
 8016252:	0005      	movs	r5, r0
 8016254:	9b07      	ldr	r3, [sp, #28]
 8016256:	9308      	str	r3, [sp, #32]
 8016258:	e773      	b.n	8016142 <_dtoa_r+0xa66>
 801625a:	f000 fc7f 	bl	8016b5c <__multadd>
 801625e:	0029      	movs	r1, r5
 8016260:	0004      	movs	r4, r0
 8016262:	2300      	movs	r3, #0
 8016264:	220a      	movs	r2, #10
 8016266:	0038      	movs	r0, r7
 8016268:	f000 fc78 	bl	8016b5c <__multadd>
 801626c:	0005      	movs	r5, r0
 801626e:	e7f1      	b.n	8016254 <_dtoa_r+0xb78>
 8016270:	9b06      	ldr	r3, [sp, #24]
 8016272:	930c      	str	r3, [sp, #48]	; 0x30
 8016274:	2400      	movs	r4, #0
 8016276:	0031      	movs	r1, r6
 8016278:	9804      	ldr	r0, [sp, #16]
 801627a:	f7ff f9a3 	bl	80155c4 <quorem>
 801627e:	9b05      	ldr	r3, [sp, #20]
 8016280:	3030      	adds	r0, #48	; 0x30
 8016282:	5518      	strb	r0, [r3, r4]
 8016284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016286:	3401      	adds	r4, #1
 8016288:	9006      	str	r0, [sp, #24]
 801628a:	42a3      	cmp	r3, r4
 801628c:	dd07      	ble.n	801629e <_dtoa_r+0xbc2>
 801628e:	2300      	movs	r3, #0
 8016290:	220a      	movs	r2, #10
 8016292:	0038      	movs	r0, r7
 8016294:	9904      	ldr	r1, [sp, #16]
 8016296:	f000 fc61 	bl	8016b5c <__multadd>
 801629a:	9004      	str	r0, [sp, #16]
 801629c:	e7eb      	b.n	8016276 <_dtoa_r+0xb9a>
 801629e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162a0:	2001      	movs	r0, #1
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	dd00      	ble.n	80162a8 <_dtoa_r+0xbcc>
 80162a6:	0018      	movs	r0, r3
 80162a8:	2400      	movs	r4, #0
 80162aa:	9b05      	ldr	r3, [sp, #20]
 80162ac:	181b      	adds	r3, r3, r0
 80162ae:	9307      	str	r3, [sp, #28]
 80162b0:	9904      	ldr	r1, [sp, #16]
 80162b2:	2201      	movs	r2, #1
 80162b4:	0038      	movs	r0, r7
 80162b6:	f000 fe4b 	bl	8016f50 <__lshift>
 80162ba:	0031      	movs	r1, r6
 80162bc:	9004      	str	r0, [sp, #16]
 80162be:	f000 feb7 	bl	8017030 <__mcmp>
 80162c2:	2800      	cmp	r0, #0
 80162c4:	dc97      	bgt.n	80161f6 <_dtoa_r+0xb1a>
 80162c6:	d102      	bne.n	80162ce <_dtoa_r+0xbf2>
 80162c8:	9b06      	ldr	r3, [sp, #24]
 80162ca:	07db      	lsls	r3, r3, #31
 80162cc:	d493      	bmi.n	80161f6 <_dtoa_r+0xb1a>
 80162ce:	9b07      	ldr	r3, [sp, #28]
 80162d0:	9307      	str	r3, [sp, #28]
 80162d2:	3b01      	subs	r3, #1
 80162d4:	781a      	ldrb	r2, [r3, #0]
 80162d6:	2a30      	cmp	r2, #48	; 0x30
 80162d8:	d0fa      	beq.n	80162d0 <_dtoa_r+0xbf4>
 80162da:	e6e1      	b.n	80160a0 <_dtoa_r+0x9c4>
 80162dc:	9a05      	ldr	r2, [sp, #20]
 80162de:	429a      	cmp	r2, r3
 80162e0:	d18a      	bne.n	80161f8 <_dtoa_r+0xb1c>
 80162e2:	9b02      	ldr	r3, [sp, #8]
 80162e4:	3301      	adds	r3, #1
 80162e6:	9302      	str	r3, [sp, #8]
 80162e8:	2331      	movs	r3, #49	; 0x31
 80162ea:	e795      	b.n	8016218 <_dtoa_r+0xb3c>
 80162ec:	4b08      	ldr	r3, [pc, #32]	; (8016310 <_dtoa_r+0xc34>)
 80162ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80162f0:	9305      	str	r3, [sp, #20]
 80162f2:	4b08      	ldr	r3, [pc, #32]	; (8016314 <_dtoa_r+0xc38>)
 80162f4:	2a00      	cmp	r2, #0
 80162f6:	d001      	beq.n	80162fc <_dtoa_r+0xc20>
 80162f8:	f7ff fa3b 	bl	8015772 <_dtoa_r+0x96>
 80162fc:	f7ff fa3b 	bl	8015776 <_dtoa_r+0x9a>
 8016300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016302:	2b00      	cmp	r3, #0
 8016304:	dcb6      	bgt.n	8016274 <_dtoa_r+0xb98>
 8016306:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016308:	2b02      	cmp	r3, #2
 801630a:	dd00      	ble.n	801630e <_dtoa_r+0xc32>
 801630c:	e6b2      	b.n	8016074 <_dtoa_r+0x998>
 801630e:	e7b1      	b.n	8016274 <_dtoa_r+0xb98>
 8016310:	0801b9bd 	.word	0x0801b9bd
 8016314:	0801b9c5 	.word	0x0801b9c5

08016318 <__errno>:
 8016318:	4b01      	ldr	r3, [pc, #4]	; (8016320 <__errno+0x8>)
 801631a:	6818      	ldr	r0, [r3, #0]
 801631c:	4770      	bx	lr
 801631e:	46c0      	nop			; (mov r8, r8)
 8016320:	200000e0 	.word	0x200000e0

08016324 <fiprintf>:
 8016324:	b40e      	push	{r1, r2, r3}
 8016326:	b503      	push	{r0, r1, lr}
 8016328:	0001      	movs	r1, r0
 801632a:	ab03      	add	r3, sp, #12
 801632c:	4804      	ldr	r0, [pc, #16]	; (8016340 <fiprintf+0x1c>)
 801632e:	cb04      	ldmia	r3!, {r2}
 8016330:	6800      	ldr	r0, [r0, #0]
 8016332:	9301      	str	r3, [sp, #4]
 8016334:	f001 fa32 	bl	801779c <_vfiprintf_r>
 8016338:	b002      	add	sp, #8
 801633a:	bc08      	pop	{r3}
 801633c:	b003      	add	sp, #12
 801633e:	4718      	bx	r3
 8016340:	200000e0 	.word	0x200000e0

08016344 <rshift>:
 8016344:	0002      	movs	r2, r0
 8016346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016348:	6907      	ldr	r7, [r0, #16]
 801634a:	3214      	adds	r2, #20
 801634c:	0013      	movs	r3, r2
 801634e:	b085      	sub	sp, #20
 8016350:	114e      	asrs	r6, r1, #5
 8016352:	42b7      	cmp	r7, r6
 8016354:	dd31      	ble.n	80163ba <rshift+0x76>
 8016356:	00b3      	lsls	r3, r6, #2
 8016358:	18d3      	adds	r3, r2, r3
 801635a:	251f      	movs	r5, #31
 801635c:	9301      	str	r3, [sp, #4]
 801635e:	000b      	movs	r3, r1
 8016360:	00bc      	lsls	r4, r7, #2
 8016362:	402b      	ands	r3, r5
 8016364:	1914      	adds	r4, r2, r4
 8016366:	9302      	str	r3, [sp, #8]
 8016368:	4229      	tst	r1, r5
 801636a:	d10c      	bne.n	8016386 <rshift+0x42>
 801636c:	0015      	movs	r5, r2
 801636e:	9901      	ldr	r1, [sp, #4]
 8016370:	428c      	cmp	r4, r1
 8016372:	d838      	bhi.n	80163e6 <rshift+0xa2>
 8016374:	9901      	ldr	r1, [sp, #4]
 8016376:	2300      	movs	r3, #0
 8016378:	3903      	subs	r1, #3
 801637a:	428c      	cmp	r4, r1
 801637c:	d301      	bcc.n	8016382 <rshift+0x3e>
 801637e:	1bbb      	subs	r3, r7, r6
 8016380:	009b      	lsls	r3, r3, #2
 8016382:	18d3      	adds	r3, r2, r3
 8016384:	e019      	b.n	80163ba <rshift+0x76>
 8016386:	2120      	movs	r1, #32
 8016388:	9b02      	ldr	r3, [sp, #8]
 801638a:	9d01      	ldr	r5, [sp, #4]
 801638c:	1acb      	subs	r3, r1, r3
 801638e:	9303      	str	r3, [sp, #12]
 8016390:	cd02      	ldmia	r5!, {r1}
 8016392:	9b02      	ldr	r3, [sp, #8]
 8016394:	4694      	mov	ip, r2
 8016396:	40d9      	lsrs	r1, r3
 8016398:	9100      	str	r1, [sp, #0]
 801639a:	42ac      	cmp	r4, r5
 801639c:	d816      	bhi.n	80163cc <rshift+0x88>
 801639e:	9d01      	ldr	r5, [sp, #4]
 80163a0:	2300      	movs	r3, #0
 80163a2:	3501      	adds	r5, #1
 80163a4:	42ac      	cmp	r4, r5
 80163a6:	d302      	bcc.n	80163ae <rshift+0x6a>
 80163a8:	1bbb      	subs	r3, r7, r6
 80163aa:	009b      	lsls	r3, r3, #2
 80163ac:	3b04      	subs	r3, #4
 80163ae:	9900      	ldr	r1, [sp, #0]
 80163b0:	18d3      	adds	r3, r2, r3
 80163b2:	6019      	str	r1, [r3, #0]
 80163b4:	2900      	cmp	r1, #0
 80163b6:	d000      	beq.n	80163ba <rshift+0x76>
 80163b8:	3304      	adds	r3, #4
 80163ba:	1a99      	subs	r1, r3, r2
 80163bc:	1089      	asrs	r1, r1, #2
 80163be:	6101      	str	r1, [r0, #16]
 80163c0:	4293      	cmp	r3, r2
 80163c2:	d101      	bne.n	80163c8 <rshift+0x84>
 80163c4:	2300      	movs	r3, #0
 80163c6:	6143      	str	r3, [r0, #20]
 80163c8:	b005      	add	sp, #20
 80163ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163cc:	682b      	ldr	r3, [r5, #0]
 80163ce:	9903      	ldr	r1, [sp, #12]
 80163d0:	408b      	lsls	r3, r1
 80163d2:	9900      	ldr	r1, [sp, #0]
 80163d4:	4319      	orrs	r1, r3
 80163d6:	4663      	mov	r3, ip
 80163d8:	c302      	stmia	r3!, {r1}
 80163da:	469c      	mov	ip, r3
 80163dc:	cd02      	ldmia	r5!, {r1}
 80163de:	9b02      	ldr	r3, [sp, #8]
 80163e0:	40d9      	lsrs	r1, r3
 80163e2:	9100      	str	r1, [sp, #0]
 80163e4:	e7d9      	b.n	801639a <rshift+0x56>
 80163e6:	c908      	ldmia	r1!, {r3}
 80163e8:	c508      	stmia	r5!, {r3}
 80163ea:	e7c1      	b.n	8016370 <rshift+0x2c>

080163ec <__hexdig_fun>:
 80163ec:	0002      	movs	r2, r0
 80163ee:	3a30      	subs	r2, #48	; 0x30
 80163f0:	0003      	movs	r3, r0
 80163f2:	2a09      	cmp	r2, #9
 80163f4:	d802      	bhi.n	80163fc <__hexdig_fun+0x10>
 80163f6:	3b20      	subs	r3, #32
 80163f8:	b2d8      	uxtb	r0, r3
 80163fa:	4770      	bx	lr
 80163fc:	0002      	movs	r2, r0
 80163fe:	3a61      	subs	r2, #97	; 0x61
 8016400:	2a05      	cmp	r2, #5
 8016402:	d801      	bhi.n	8016408 <__hexdig_fun+0x1c>
 8016404:	3b47      	subs	r3, #71	; 0x47
 8016406:	e7f7      	b.n	80163f8 <__hexdig_fun+0xc>
 8016408:	001a      	movs	r2, r3
 801640a:	3a41      	subs	r2, #65	; 0x41
 801640c:	2000      	movs	r0, #0
 801640e:	2a05      	cmp	r2, #5
 8016410:	d8f3      	bhi.n	80163fa <__hexdig_fun+0xe>
 8016412:	3b27      	subs	r3, #39	; 0x27
 8016414:	e7f0      	b.n	80163f8 <__hexdig_fun+0xc>
	...

08016418 <__gethex>:
 8016418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801641a:	b08d      	sub	sp, #52	; 0x34
 801641c:	930a      	str	r3, [sp, #40]	; 0x28
 801641e:	4bbd      	ldr	r3, [pc, #756]	; (8016714 <__gethex+0x2fc>)
 8016420:	9005      	str	r0, [sp, #20]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	9109      	str	r1, [sp, #36]	; 0x24
 8016426:	0018      	movs	r0, r3
 8016428:	9202      	str	r2, [sp, #8]
 801642a:	9307      	str	r3, [sp, #28]
 801642c:	f7e9 fe74 	bl	8000118 <strlen>
 8016430:	2202      	movs	r2, #2
 8016432:	9b07      	ldr	r3, [sp, #28]
 8016434:	4252      	negs	r2, r2
 8016436:	181b      	adds	r3, r3, r0
 8016438:	3b01      	subs	r3, #1
 801643a:	781b      	ldrb	r3, [r3, #0]
 801643c:	9003      	str	r0, [sp, #12]
 801643e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016442:	6819      	ldr	r1, [r3, #0]
 8016444:	1c8b      	adds	r3, r1, #2
 8016446:	1a52      	subs	r2, r2, r1
 8016448:	18d1      	adds	r1, r2, r3
 801644a:	9301      	str	r3, [sp, #4]
 801644c:	9108      	str	r1, [sp, #32]
 801644e:	9901      	ldr	r1, [sp, #4]
 8016450:	3301      	adds	r3, #1
 8016452:	7808      	ldrb	r0, [r1, #0]
 8016454:	2830      	cmp	r0, #48	; 0x30
 8016456:	d0f7      	beq.n	8016448 <__gethex+0x30>
 8016458:	f7ff ffc8 	bl	80163ec <__hexdig_fun>
 801645c:	1e04      	subs	r4, r0, #0
 801645e:	d13e      	bne.n	80164de <__gethex+0xc6>
 8016460:	9a03      	ldr	r2, [sp, #12]
 8016462:	9907      	ldr	r1, [sp, #28]
 8016464:	9801      	ldr	r0, [sp, #4]
 8016466:	f7fe f916 	bl	8014696 <strncmp>
 801646a:	1e07      	subs	r7, r0, #0
 801646c:	d000      	beq.n	8016470 <__gethex+0x58>
 801646e:	e06f      	b.n	8016550 <__gethex+0x138>
 8016470:	9b01      	ldr	r3, [sp, #4]
 8016472:	9a03      	ldr	r2, [sp, #12]
 8016474:	5c98      	ldrb	r0, [r3, r2]
 8016476:	189d      	adds	r5, r3, r2
 8016478:	f7ff ffb8 	bl	80163ec <__hexdig_fun>
 801647c:	2301      	movs	r3, #1
 801647e:	9304      	str	r3, [sp, #16]
 8016480:	2800      	cmp	r0, #0
 8016482:	d034      	beq.n	80164ee <__gethex+0xd6>
 8016484:	9501      	str	r5, [sp, #4]
 8016486:	9b01      	ldr	r3, [sp, #4]
 8016488:	7818      	ldrb	r0, [r3, #0]
 801648a:	2830      	cmp	r0, #48	; 0x30
 801648c:	d009      	beq.n	80164a2 <__gethex+0x8a>
 801648e:	f7ff ffad 	bl	80163ec <__hexdig_fun>
 8016492:	4243      	negs	r3, r0
 8016494:	4143      	adcs	r3, r0
 8016496:	9304      	str	r3, [sp, #16]
 8016498:	2301      	movs	r3, #1
 801649a:	002c      	movs	r4, r5
 801649c:	9308      	str	r3, [sp, #32]
 801649e:	9d01      	ldr	r5, [sp, #4]
 80164a0:	e004      	b.n	80164ac <__gethex+0x94>
 80164a2:	9b01      	ldr	r3, [sp, #4]
 80164a4:	3301      	adds	r3, #1
 80164a6:	9301      	str	r3, [sp, #4]
 80164a8:	e7ed      	b.n	8016486 <__gethex+0x6e>
 80164aa:	3501      	adds	r5, #1
 80164ac:	7828      	ldrb	r0, [r5, #0]
 80164ae:	f7ff ff9d 	bl	80163ec <__hexdig_fun>
 80164b2:	1e07      	subs	r7, r0, #0
 80164b4:	d1f9      	bne.n	80164aa <__gethex+0x92>
 80164b6:	0028      	movs	r0, r5
 80164b8:	9a03      	ldr	r2, [sp, #12]
 80164ba:	9907      	ldr	r1, [sp, #28]
 80164bc:	f7fe f8eb 	bl	8014696 <strncmp>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d112      	bne.n	80164ea <__gethex+0xd2>
 80164c4:	2c00      	cmp	r4, #0
 80164c6:	d107      	bne.n	80164d8 <__gethex+0xc0>
 80164c8:	9b03      	ldr	r3, [sp, #12]
 80164ca:	18ed      	adds	r5, r5, r3
 80164cc:	002c      	movs	r4, r5
 80164ce:	7828      	ldrb	r0, [r5, #0]
 80164d0:	f7ff ff8c 	bl	80163ec <__hexdig_fun>
 80164d4:	2800      	cmp	r0, #0
 80164d6:	d106      	bne.n	80164e6 <__gethex+0xce>
 80164d8:	1b67      	subs	r7, r4, r5
 80164da:	00bf      	lsls	r7, r7, #2
 80164dc:	e007      	b.n	80164ee <__gethex+0xd6>
 80164de:	2300      	movs	r3, #0
 80164e0:	001c      	movs	r4, r3
 80164e2:	9304      	str	r3, [sp, #16]
 80164e4:	e7db      	b.n	801649e <__gethex+0x86>
 80164e6:	3501      	adds	r5, #1
 80164e8:	e7f1      	b.n	80164ce <__gethex+0xb6>
 80164ea:	2c00      	cmp	r4, #0
 80164ec:	d1f4      	bne.n	80164d8 <__gethex+0xc0>
 80164ee:	2220      	movs	r2, #32
 80164f0:	782b      	ldrb	r3, [r5, #0]
 80164f2:	002e      	movs	r6, r5
 80164f4:	4393      	bics	r3, r2
 80164f6:	2b50      	cmp	r3, #80	; 0x50
 80164f8:	d11d      	bne.n	8016536 <__gethex+0x11e>
 80164fa:	786b      	ldrb	r3, [r5, #1]
 80164fc:	2b2b      	cmp	r3, #43	; 0x2b
 80164fe:	d02c      	beq.n	801655a <__gethex+0x142>
 8016500:	2b2d      	cmp	r3, #45	; 0x2d
 8016502:	d02e      	beq.n	8016562 <__gethex+0x14a>
 8016504:	2300      	movs	r3, #0
 8016506:	1c6e      	adds	r6, r5, #1
 8016508:	9306      	str	r3, [sp, #24]
 801650a:	7830      	ldrb	r0, [r6, #0]
 801650c:	f7ff ff6e 	bl	80163ec <__hexdig_fun>
 8016510:	1e43      	subs	r3, r0, #1
 8016512:	b2db      	uxtb	r3, r3
 8016514:	2b18      	cmp	r3, #24
 8016516:	d82b      	bhi.n	8016570 <__gethex+0x158>
 8016518:	3810      	subs	r0, #16
 801651a:	0004      	movs	r4, r0
 801651c:	7870      	ldrb	r0, [r6, #1]
 801651e:	f7ff ff65 	bl	80163ec <__hexdig_fun>
 8016522:	1e43      	subs	r3, r0, #1
 8016524:	b2db      	uxtb	r3, r3
 8016526:	3601      	adds	r6, #1
 8016528:	2b18      	cmp	r3, #24
 801652a:	d91c      	bls.n	8016566 <__gethex+0x14e>
 801652c:	9b06      	ldr	r3, [sp, #24]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d000      	beq.n	8016534 <__gethex+0x11c>
 8016532:	4264      	negs	r4, r4
 8016534:	193f      	adds	r7, r7, r4
 8016536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016538:	601e      	str	r6, [r3, #0]
 801653a:	9b04      	ldr	r3, [sp, #16]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d019      	beq.n	8016574 <__gethex+0x15c>
 8016540:	2600      	movs	r6, #0
 8016542:	9b08      	ldr	r3, [sp, #32]
 8016544:	42b3      	cmp	r3, r6
 8016546:	d100      	bne.n	801654a <__gethex+0x132>
 8016548:	3606      	adds	r6, #6
 801654a:	0030      	movs	r0, r6
 801654c:	b00d      	add	sp, #52	; 0x34
 801654e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016550:	2301      	movs	r3, #1
 8016552:	0027      	movs	r7, r4
 8016554:	9d01      	ldr	r5, [sp, #4]
 8016556:	9304      	str	r3, [sp, #16]
 8016558:	e7c9      	b.n	80164ee <__gethex+0xd6>
 801655a:	2300      	movs	r3, #0
 801655c:	9306      	str	r3, [sp, #24]
 801655e:	1cae      	adds	r6, r5, #2
 8016560:	e7d3      	b.n	801650a <__gethex+0xf2>
 8016562:	2301      	movs	r3, #1
 8016564:	e7fa      	b.n	801655c <__gethex+0x144>
 8016566:	230a      	movs	r3, #10
 8016568:	435c      	muls	r4, r3
 801656a:	1824      	adds	r4, r4, r0
 801656c:	3c10      	subs	r4, #16
 801656e:	e7d5      	b.n	801651c <__gethex+0x104>
 8016570:	002e      	movs	r6, r5
 8016572:	e7e0      	b.n	8016536 <__gethex+0x11e>
 8016574:	9b01      	ldr	r3, [sp, #4]
 8016576:	9904      	ldr	r1, [sp, #16]
 8016578:	1aeb      	subs	r3, r5, r3
 801657a:	3b01      	subs	r3, #1
 801657c:	2b07      	cmp	r3, #7
 801657e:	dc0a      	bgt.n	8016596 <__gethex+0x17e>
 8016580:	9805      	ldr	r0, [sp, #20]
 8016582:	f000 fa83 	bl	8016a8c <_Balloc>
 8016586:	1e04      	subs	r4, r0, #0
 8016588:	d108      	bne.n	801659c <__gethex+0x184>
 801658a:	0002      	movs	r2, r0
 801658c:	21de      	movs	r1, #222	; 0xde
 801658e:	4b62      	ldr	r3, [pc, #392]	; (8016718 <__gethex+0x300>)
 8016590:	4862      	ldr	r0, [pc, #392]	; (801671c <__gethex+0x304>)
 8016592:	f7fe fff9 	bl	8015588 <__assert_func>
 8016596:	3101      	adds	r1, #1
 8016598:	105b      	asrs	r3, r3, #1
 801659a:	e7ef      	b.n	801657c <__gethex+0x164>
 801659c:	0003      	movs	r3, r0
 801659e:	3314      	adds	r3, #20
 80165a0:	9304      	str	r3, [sp, #16]
 80165a2:	9309      	str	r3, [sp, #36]	; 0x24
 80165a4:	2300      	movs	r3, #0
 80165a6:	001e      	movs	r6, r3
 80165a8:	9306      	str	r3, [sp, #24]
 80165aa:	9b01      	ldr	r3, [sp, #4]
 80165ac:	42ab      	cmp	r3, r5
 80165ae:	d340      	bcc.n	8016632 <__gethex+0x21a>
 80165b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80165b2:	9b04      	ldr	r3, [sp, #16]
 80165b4:	c540      	stmia	r5!, {r6}
 80165b6:	1aed      	subs	r5, r5, r3
 80165b8:	10ad      	asrs	r5, r5, #2
 80165ba:	0030      	movs	r0, r6
 80165bc:	6125      	str	r5, [r4, #16]
 80165be:	f000 fb5d 	bl	8016c7c <__hi0bits>
 80165c2:	9b02      	ldr	r3, [sp, #8]
 80165c4:	016d      	lsls	r5, r5, #5
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	1a2e      	subs	r6, r5, r0
 80165ca:	9301      	str	r3, [sp, #4]
 80165cc:	429e      	cmp	r6, r3
 80165ce:	dd5a      	ble.n	8016686 <__gethex+0x26e>
 80165d0:	1af6      	subs	r6, r6, r3
 80165d2:	0031      	movs	r1, r6
 80165d4:	0020      	movs	r0, r4
 80165d6:	f000 ff00 	bl	80173da <__any_on>
 80165da:	1e05      	subs	r5, r0, #0
 80165dc:	d016      	beq.n	801660c <__gethex+0x1f4>
 80165de:	2501      	movs	r5, #1
 80165e0:	211f      	movs	r1, #31
 80165e2:	0028      	movs	r0, r5
 80165e4:	1e73      	subs	r3, r6, #1
 80165e6:	4019      	ands	r1, r3
 80165e8:	4088      	lsls	r0, r1
 80165ea:	0001      	movs	r1, r0
 80165ec:	115a      	asrs	r2, r3, #5
 80165ee:	9804      	ldr	r0, [sp, #16]
 80165f0:	0092      	lsls	r2, r2, #2
 80165f2:	5812      	ldr	r2, [r2, r0]
 80165f4:	420a      	tst	r2, r1
 80165f6:	d009      	beq.n	801660c <__gethex+0x1f4>
 80165f8:	42ab      	cmp	r3, r5
 80165fa:	dd06      	ble.n	801660a <__gethex+0x1f2>
 80165fc:	0020      	movs	r0, r4
 80165fe:	1eb1      	subs	r1, r6, #2
 8016600:	f000 feeb 	bl	80173da <__any_on>
 8016604:	3502      	adds	r5, #2
 8016606:	2800      	cmp	r0, #0
 8016608:	d100      	bne.n	801660c <__gethex+0x1f4>
 801660a:	2502      	movs	r5, #2
 801660c:	0031      	movs	r1, r6
 801660e:	0020      	movs	r0, r4
 8016610:	f7ff fe98 	bl	8016344 <rshift>
 8016614:	19bf      	adds	r7, r7, r6
 8016616:	9b02      	ldr	r3, [sp, #8]
 8016618:	689b      	ldr	r3, [r3, #8]
 801661a:	9303      	str	r3, [sp, #12]
 801661c:	42bb      	cmp	r3, r7
 801661e:	da42      	bge.n	80166a6 <__gethex+0x28e>
 8016620:	0021      	movs	r1, r4
 8016622:	9805      	ldr	r0, [sp, #20]
 8016624:	f000 fa76 	bl	8016b14 <_Bfree>
 8016628:	2300      	movs	r3, #0
 801662a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801662c:	26a3      	movs	r6, #163	; 0xa3
 801662e:	6013      	str	r3, [r2, #0]
 8016630:	e78b      	b.n	801654a <__gethex+0x132>
 8016632:	1e6b      	subs	r3, r5, #1
 8016634:	9308      	str	r3, [sp, #32]
 8016636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	4293      	cmp	r3, r2
 801663c:	d014      	beq.n	8016668 <__gethex+0x250>
 801663e:	9b06      	ldr	r3, [sp, #24]
 8016640:	2b20      	cmp	r3, #32
 8016642:	d104      	bne.n	801664e <__gethex+0x236>
 8016644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016646:	c340      	stmia	r3!, {r6}
 8016648:	2600      	movs	r6, #0
 801664a:	9309      	str	r3, [sp, #36]	; 0x24
 801664c:	9606      	str	r6, [sp, #24]
 801664e:	9b08      	ldr	r3, [sp, #32]
 8016650:	7818      	ldrb	r0, [r3, #0]
 8016652:	f7ff fecb 	bl	80163ec <__hexdig_fun>
 8016656:	230f      	movs	r3, #15
 8016658:	4018      	ands	r0, r3
 801665a:	9b06      	ldr	r3, [sp, #24]
 801665c:	9d08      	ldr	r5, [sp, #32]
 801665e:	4098      	lsls	r0, r3
 8016660:	3304      	adds	r3, #4
 8016662:	4306      	orrs	r6, r0
 8016664:	9306      	str	r3, [sp, #24]
 8016666:	e7a0      	b.n	80165aa <__gethex+0x192>
 8016668:	2301      	movs	r3, #1
 801666a:	9a03      	ldr	r2, [sp, #12]
 801666c:	1a9d      	subs	r5, r3, r2
 801666e:	9b08      	ldr	r3, [sp, #32]
 8016670:	195d      	adds	r5, r3, r5
 8016672:	9b01      	ldr	r3, [sp, #4]
 8016674:	429d      	cmp	r5, r3
 8016676:	d3e2      	bcc.n	801663e <__gethex+0x226>
 8016678:	0028      	movs	r0, r5
 801667a:	9907      	ldr	r1, [sp, #28]
 801667c:	f7fe f80b 	bl	8014696 <strncmp>
 8016680:	2800      	cmp	r0, #0
 8016682:	d1dc      	bne.n	801663e <__gethex+0x226>
 8016684:	e791      	b.n	80165aa <__gethex+0x192>
 8016686:	9b01      	ldr	r3, [sp, #4]
 8016688:	2500      	movs	r5, #0
 801668a:	429e      	cmp	r6, r3
 801668c:	dac3      	bge.n	8016616 <__gethex+0x1fe>
 801668e:	1b9e      	subs	r6, r3, r6
 8016690:	0021      	movs	r1, r4
 8016692:	0032      	movs	r2, r6
 8016694:	9805      	ldr	r0, [sp, #20]
 8016696:	f000 fc5b 	bl	8016f50 <__lshift>
 801669a:	0003      	movs	r3, r0
 801669c:	3314      	adds	r3, #20
 801669e:	0004      	movs	r4, r0
 80166a0:	1bbf      	subs	r7, r7, r6
 80166a2:	9304      	str	r3, [sp, #16]
 80166a4:	e7b7      	b.n	8016616 <__gethex+0x1fe>
 80166a6:	9b02      	ldr	r3, [sp, #8]
 80166a8:	685e      	ldr	r6, [r3, #4]
 80166aa:	42be      	cmp	r6, r7
 80166ac:	dd71      	ble.n	8016792 <__gethex+0x37a>
 80166ae:	9b01      	ldr	r3, [sp, #4]
 80166b0:	1bf6      	subs	r6, r6, r7
 80166b2:	42b3      	cmp	r3, r6
 80166b4:	dc38      	bgt.n	8016728 <__gethex+0x310>
 80166b6:	9b02      	ldr	r3, [sp, #8]
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	2b02      	cmp	r3, #2
 80166bc:	d026      	beq.n	801670c <__gethex+0x2f4>
 80166be:	2b03      	cmp	r3, #3
 80166c0:	d02e      	beq.n	8016720 <__gethex+0x308>
 80166c2:	2b01      	cmp	r3, #1
 80166c4:	d119      	bne.n	80166fa <__gethex+0x2e2>
 80166c6:	9b01      	ldr	r3, [sp, #4]
 80166c8:	42b3      	cmp	r3, r6
 80166ca:	d116      	bne.n	80166fa <__gethex+0x2e2>
 80166cc:	2b01      	cmp	r3, #1
 80166ce:	d10d      	bne.n	80166ec <__gethex+0x2d4>
 80166d0:	9b02      	ldr	r3, [sp, #8]
 80166d2:	2662      	movs	r6, #98	; 0x62
 80166d4:	685b      	ldr	r3, [r3, #4]
 80166d6:	9301      	str	r3, [sp, #4]
 80166d8:	9a01      	ldr	r2, [sp, #4]
 80166da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166dc:	601a      	str	r2, [r3, #0]
 80166de:	2301      	movs	r3, #1
 80166e0:	9a04      	ldr	r2, [sp, #16]
 80166e2:	6123      	str	r3, [r4, #16]
 80166e4:	6013      	str	r3, [r2, #0]
 80166e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80166e8:	601c      	str	r4, [r3, #0]
 80166ea:	e72e      	b.n	801654a <__gethex+0x132>
 80166ec:	9901      	ldr	r1, [sp, #4]
 80166ee:	0020      	movs	r0, r4
 80166f0:	3901      	subs	r1, #1
 80166f2:	f000 fe72 	bl	80173da <__any_on>
 80166f6:	2800      	cmp	r0, #0
 80166f8:	d1ea      	bne.n	80166d0 <__gethex+0x2b8>
 80166fa:	0021      	movs	r1, r4
 80166fc:	9805      	ldr	r0, [sp, #20]
 80166fe:	f000 fa09 	bl	8016b14 <_Bfree>
 8016702:	2300      	movs	r3, #0
 8016704:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016706:	2650      	movs	r6, #80	; 0x50
 8016708:	6013      	str	r3, [r2, #0]
 801670a:	e71e      	b.n	801654a <__gethex+0x132>
 801670c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801670e:	2b00      	cmp	r3, #0
 8016710:	d1f3      	bne.n	80166fa <__gethex+0x2e2>
 8016712:	e7dd      	b.n	80166d0 <__gethex+0x2b8>
 8016714:	0801baa4 	.word	0x0801baa4
 8016718:	0801ba29 	.word	0x0801ba29
 801671c:	0801ba3a 	.word	0x0801ba3a
 8016720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016722:	2b00      	cmp	r3, #0
 8016724:	d1d4      	bne.n	80166d0 <__gethex+0x2b8>
 8016726:	e7e8      	b.n	80166fa <__gethex+0x2e2>
 8016728:	1e77      	subs	r7, r6, #1
 801672a:	2d00      	cmp	r5, #0
 801672c:	d12f      	bne.n	801678e <__gethex+0x376>
 801672e:	2f00      	cmp	r7, #0
 8016730:	d004      	beq.n	801673c <__gethex+0x324>
 8016732:	0039      	movs	r1, r7
 8016734:	0020      	movs	r0, r4
 8016736:	f000 fe50 	bl	80173da <__any_on>
 801673a:	0005      	movs	r5, r0
 801673c:	231f      	movs	r3, #31
 801673e:	117a      	asrs	r2, r7, #5
 8016740:	401f      	ands	r7, r3
 8016742:	3b1e      	subs	r3, #30
 8016744:	40bb      	lsls	r3, r7
 8016746:	9904      	ldr	r1, [sp, #16]
 8016748:	0092      	lsls	r2, r2, #2
 801674a:	5852      	ldr	r2, [r2, r1]
 801674c:	421a      	tst	r2, r3
 801674e:	d001      	beq.n	8016754 <__gethex+0x33c>
 8016750:	2302      	movs	r3, #2
 8016752:	431d      	orrs	r5, r3
 8016754:	9b01      	ldr	r3, [sp, #4]
 8016756:	0031      	movs	r1, r6
 8016758:	1b9b      	subs	r3, r3, r6
 801675a:	2602      	movs	r6, #2
 801675c:	0020      	movs	r0, r4
 801675e:	9301      	str	r3, [sp, #4]
 8016760:	f7ff fdf0 	bl	8016344 <rshift>
 8016764:	9b02      	ldr	r3, [sp, #8]
 8016766:	685f      	ldr	r7, [r3, #4]
 8016768:	2d00      	cmp	r5, #0
 801676a:	d041      	beq.n	80167f0 <__gethex+0x3d8>
 801676c:	9b02      	ldr	r3, [sp, #8]
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	2b02      	cmp	r3, #2
 8016772:	d010      	beq.n	8016796 <__gethex+0x37e>
 8016774:	2b03      	cmp	r3, #3
 8016776:	d012      	beq.n	801679e <__gethex+0x386>
 8016778:	2b01      	cmp	r3, #1
 801677a:	d106      	bne.n	801678a <__gethex+0x372>
 801677c:	07aa      	lsls	r2, r5, #30
 801677e:	d504      	bpl.n	801678a <__gethex+0x372>
 8016780:	9a04      	ldr	r2, [sp, #16]
 8016782:	6810      	ldr	r0, [r2, #0]
 8016784:	4305      	orrs	r5, r0
 8016786:	421d      	tst	r5, r3
 8016788:	d10c      	bne.n	80167a4 <__gethex+0x38c>
 801678a:	2310      	movs	r3, #16
 801678c:	e02f      	b.n	80167ee <__gethex+0x3d6>
 801678e:	2501      	movs	r5, #1
 8016790:	e7d4      	b.n	801673c <__gethex+0x324>
 8016792:	2601      	movs	r6, #1
 8016794:	e7e8      	b.n	8016768 <__gethex+0x350>
 8016796:	2301      	movs	r3, #1
 8016798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801679a:	1a9b      	subs	r3, r3, r2
 801679c:	9313      	str	r3, [sp, #76]	; 0x4c
 801679e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d0f2      	beq.n	801678a <__gethex+0x372>
 80167a4:	6923      	ldr	r3, [r4, #16]
 80167a6:	2000      	movs	r0, #0
 80167a8:	9303      	str	r3, [sp, #12]
 80167aa:	009b      	lsls	r3, r3, #2
 80167ac:	9304      	str	r3, [sp, #16]
 80167ae:	0023      	movs	r3, r4
 80167b0:	9a04      	ldr	r2, [sp, #16]
 80167b2:	3314      	adds	r3, #20
 80167b4:	1899      	adds	r1, r3, r2
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	1c55      	adds	r5, r2, #1
 80167ba:	d01e      	beq.n	80167fa <__gethex+0x3e2>
 80167bc:	3201      	adds	r2, #1
 80167be:	601a      	str	r2, [r3, #0]
 80167c0:	0023      	movs	r3, r4
 80167c2:	3314      	adds	r3, #20
 80167c4:	2e02      	cmp	r6, #2
 80167c6:	d140      	bne.n	801684a <__gethex+0x432>
 80167c8:	9a02      	ldr	r2, [sp, #8]
 80167ca:	9901      	ldr	r1, [sp, #4]
 80167cc:	6812      	ldr	r2, [r2, #0]
 80167ce:	3a01      	subs	r2, #1
 80167d0:	428a      	cmp	r2, r1
 80167d2:	d10b      	bne.n	80167ec <__gethex+0x3d4>
 80167d4:	114a      	asrs	r2, r1, #5
 80167d6:	211f      	movs	r1, #31
 80167d8:	9801      	ldr	r0, [sp, #4]
 80167da:	0092      	lsls	r2, r2, #2
 80167dc:	4001      	ands	r1, r0
 80167de:	2001      	movs	r0, #1
 80167e0:	0005      	movs	r5, r0
 80167e2:	408d      	lsls	r5, r1
 80167e4:	58d3      	ldr	r3, [r2, r3]
 80167e6:	422b      	tst	r3, r5
 80167e8:	d000      	beq.n	80167ec <__gethex+0x3d4>
 80167ea:	2601      	movs	r6, #1
 80167ec:	2320      	movs	r3, #32
 80167ee:	431e      	orrs	r6, r3
 80167f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80167f2:	601c      	str	r4, [r3, #0]
 80167f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167f6:	601f      	str	r7, [r3, #0]
 80167f8:	e6a7      	b.n	801654a <__gethex+0x132>
 80167fa:	c301      	stmia	r3!, {r0}
 80167fc:	4299      	cmp	r1, r3
 80167fe:	d8da      	bhi.n	80167b6 <__gethex+0x39e>
 8016800:	9b03      	ldr	r3, [sp, #12]
 8016802:	68a2      	ldr	r2, [r4, #8]
 8016804:	4293      	cmp	r3, r2
 8016806:	db17      	blt.n	8016838 <__gethex+0x420>
 8016808:	6863      	ldr	r3, [r4, #4]
 801680a:	9805      	ldr	r0, [sp, #20]
 801680c:	1c59      	adds	r1, r3, #1
 801680e:	f000 f93d 	bl	8016a8c <_Balloc>
 8016812:	1e05      	subs	r5, r0, #0
 8016814:	d103      	bne.n	801681e <__gethex+0x406>
 8016816:	0002      	movs	r2, r0
 8016818:	2184      	movs	r1, #132	; 0x84
 801681a:	4b1c      	ldr	r3, [pc, #112]	; (801688c <__gethex+0x474>)
 801681c:	e6b8      	b.n	8016590 <__gethex+0x178>
 801681e:	0021      	movs	r1, r4
 8016820:	6923      	ldr	r3, [r4, #16]
 8016822:	310c      	adds	r1, #12
 8016824:	1c9a      	adds	r2, r3, #2
 8016826:	0092      	lsls	r2, r2, #2
 8016828:	300c      	adds	r0, #12
 801682a:	f7fc ff57 	bl	80136dc <memcpy>
 801682e:	0021      	movs	r1, r4
 8016830:	9805      	ldr	r0, [sp, #20]
 8016832:	f000 f96f 	bl	8016b14 <_Bfree>
 8016836:	002c      	movs	r4, r5
 8016838:	6923      	ldr	r3, [r4, #16]
 801683a:	1c5a      	adds	r2, r3, #1
 801683c:	6122      	str	r2, [r4, #16]
 801683e:	2201      	movs	r2, #1
 8016840:	3304      	adds	r3, #4
 8016842:	009b      	lsls	r3, r3, #2
 8016844:	18e3      	adds	r3, r4, r3
 8016846:	605a      	str	r2, [r3, #4]
 8016848:	e7ba      	b.n	80167c0 <__gethex+0x3a8>
 801684a:	6922      	ldr	r2, [r4, #16]
 801684c:	9903      	ldr	r1, [sp, #12]
 801684e:	428a      	cmp	r2, r1
 8016850:	dd09      	ble.n	8016866 <__gethex+0x44e>
 8016852:	2101      	movs	r1, #1
 8016854:	0020      	movs	r0, r4
 8016856:	f7ff fd75 	bl	8016344 <rshift>
 801685a:	9b02      	ldr	r3, [sp, #8]
 801685c:	3701      	adds	r7, #1
 801685e:	689b      	ldr	r3, [r3, #8]
 8016860:	42bb      	cmp	r3, r7
 8016862:	dac2      	bge.n	80167ea <__gethex+0x3d2>
 8016864:	e6dc      	b.n	8016620 <__gethex+0x208>
 8016866:	221f      	movs	r2, #31
 8016868:	9d01      	ldr	r5, [sp, #4]
 801686a:	9901      	ldr	r1, [sp, #4]
 801686c:	2601      	movs	r6, #1
 801686e:	4015      	ands	r5, r2
 8016870:	4211      	tst	r1, r2
 8016872:	d0bb      	beq.n	80167ec <__gethex+0x3d4>
 8016874:	9a04      	ldr	r2, [sp, #16]
 8016876:	189b      	adds	r3, r3, r2
 8016878:	3b04      	subs	r3, #4
 801687a:	6818      	ldr	r0, [r3, #0]
 801687c:	f000 f9fe 	bl	8016c7c <__hi0bits>
 8016880:	2320      	movs	r3, #32
 8016882:	1b5d      	subs	r5, r3, r5
 8016884:	42a8      	cmp	r0, r5
 8016886:	dbe4      	blt.n	8016852 <__gethex+0x43a>
 8016888:	e7b0      	b.n	80167ec <__gethex+0x3d4>
 801688a:	46c0      	nop			; (mov r8, r8)
 801688c:	0801ba29 	.word	0x0801ba29

08016890 <L_shift>:
 8016890:	2308      	movs	r3, #8
 8016892:	b570      	push	{r4, r5, r6, lr}
 8016894:	2520      	movs	r5, #32
 8016896:	1a9a      	subs	r2, r3, r2
 8016898:	0092      	lsls	r2, r2, #2
 801689a:	1aad      	subs	r5, r5, r2
 801689c:	6843      	ldr	r3, [r0, #4]
 801689e:	6806      	ldr	r6, [r0, #0]
 80168a0:	001c      	movs	r4, r3
 80168a2:	40ac      	lsls	r4, r5
 80168a4:	40d3      	lsrs	r3, r2
 80168a6:	4334      	orrs	r4, r6
 80168a8:	6004      	str	r4, [r0, #0]
 80168aa:	6043      	str	r3, [r0, #4]
 80168ac:	3004      	adds	r0, #4
 80168ae:	4288      	cmp	r0, r1
 80168b0:	d3f4      	bcc.n	801689c <L_shift+0xc>
 80168b2:	bd70      	pop	{r4, r5, r6, pc}

080168b4 <__match>:
 80168b4:	b530      	push	{r4, r5, lr}
 80168b6:	6803      	ldr	r3, [r0, #0]
 80168b8:	780c      	ldrb	r4, [r1, #0]
 80168ba:	3301      	adds	r3, #1
 80168bc:	2c00      	cmp	r4, #0
 80168be:	d102      	bne.n	80168c6 <__match+0x12>
 80168c0:	6003      	str	r3, [r0, #0]
 80168c2:	2001      	movs	r0, #1
 80168c4:	bd30      	pop	{r4, r5, pc}
 80168c6:	781a      	ldrb	r2, [r3, #0]
 80168c8:	0015      	movs	r5, r2
 80168ca:	3d41      	subs	r5, #65	; 0x41
 80168cc:	2d19      	cmp	r5, #25
 80168ce:	d800      	bhi.n	80168d2 <__match+0x1e>
 80168d0:	3220      	adds	r2, #32
 80168d2:	3101      	adds	r1, #1
 80168d4:	42a2      	cmp	r2, r4
 80168d6:	d0ef      	beq.n	80168b8 <__match+0x4>
 80168d8:	2000      	movs	r0, #0
 80168da:	e7f3      	b.n	80168c4 <__match+0x10>

080168dc <__hexnan>:
 80168dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168de:	680b      	ldr	r3, [r1, #0]
 80168e0:	b08b      	sub	sp, #44	; 0x2c
 80168e2:	115c      	asrs	r4, r3, #5
 80168e4:	00a4      	lsls	r4, r4, #2
 80168e6:	9201      	str	r2, [sp, #4]
 80168e8:	1912      	adds	r2, r2, r4
 80168ea:	0019      	movs	r1, r3
 80168ec:	9202      	str	r2, [sp, #8]
 80168ee:	221f      	movs	r2, #31
 80168f0:	4011      	ands	r1, r2
 80168f2:	9008      	str	r0, [sp, #32]
 80168f4:	9106      	str	r1, [sp, #24]
 80168f6:	4213      	tst	r3, r2
 80168f8:	d002      	beq.n	8016900 <__hexnan+0x24>
 80168fa:	9b02      	ldr	r3, [sp, #8]
 80168fc:	3304      	adds	r3, #4
 80168fe:	9302      	str	r3, [sp, #8]
 8016900:	9b02      	ldr	r3, [sp, #8]
 8016902:	2500      	movs	r5, #0
 8016904:	1f1e      	subs	r6, r3, #4
 8016906:	0037      	movs	r7, r6
 8016908:	0034      	movs	r4, r6
 801690a:	9b08      	ldr	r3, [sp, #32]
 801690c:	6035      	str	r5, [r6, #0]
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	9507      	str	r5, [sp, #28]
 8016912:	9305      	str	r3, [sp, #20]
 8016914:	9503      	str	r5, [sp, #12]
 8016916:	9b05      	ldr	r3, [sp, #20]
 8016918:	3301      	adds	r3, #1
 801691a:	9309      	str	r3, [sp, #36]	; 0x24
 801691c:	9b05      	ldr	r3, [sp, #20]
 801691e:	785b      	ldrb	r3, [r3, #1]
 8016920:	9304      	str	r3, [sp, #16]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d028      	beq.n	8016978 <__hexnan+0x9c>
 8016926:	9804      	ldr	r0, [sp, #16]
 8016928:	f7ff fd60 	bl	80163ec <__hexdig_fun>
 801692c:	2800      	cmp	r0, #0
 801692e:	d154      	bne.n	80169da <__hexnan+0xfe>
 8016930:	9b04      	ldr	r3, [sp, #16]
 8016932:	2b20      	cmp	r3, #32
 8016934:	d819      	bhi.n	801696a <__hexnan+0x8e>
 8016936:	9b03      	ldr	r3, [sp, #12]
 8016938:	9a07      	ldr	r2, [sp, #28]
 801693a:	4293      	cmp	r3, r2
 801693c:	dd12      	ble.n	8016964 <__hexnan+0x88>
 801693e:	42bc      	cmp	r4, r7
 8016940:	d206      	bcs.n	8016950 <__hexnan+0x74>
 8016942:	2d07      	cmp	r5, #7
 8016944:	dc04      	bgt.n	8016950 <__hexnan+0x74>
 8016946:	002a      	movs	r2, r5
 8016948:	0039      	movs	r1, r7
 801694a:	0020      	movs	r0, r4
 801694c:	f7ff ffa0 	bl	8016890 <L_shift>
 8016950:	9b01      	ldr	r3, [sp, #4]
 8016952:	2508      	movs	r5, #8
 8016954:	429c      	cmp	r4, r3
 8016956:	d905      	bls.n	8016964 <__hexnan+0x88>
 8016958:	1f27      	subs	r7, r4, #4
 801695a:	2500      	movs	r5, #0
 801695c:	003c      	movs	r4, r7
 801695e:	9b03      	ldr	r3, [sp, #12]
 8016960:	603d      	str	r5, [r7, #0]
 8016962:	9307      	str	r3, [sp, #28]
 8016964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016966:	9305      	str	r3, [sp, #20]
 8016968:	e7d5      	b.n	8016916 <__hexnan+0x3a>
 801696a:	9b04      	ldr	r3, [sp, #16]
 801696c:	2b29      	cmp	r3, #41	; 0x29
 801696e:	d158      	bne.n	8016a22 <__hexnan+0x146>
 8016970:	9b05      	ldr	r3, [sp, #20]
 8016972:	9a08      	ldr	r2, [sp, #32]
 8016974:	3302      	adds	r3, #2
 8016976:	6013      	str	r3, [r2, #0]
 8016978:	9b03      	ldr	r3, [sp, #12]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d051      	beq.n	8016a22 <__hexnan+0x146>
 801697e:	42bc      	cmp	r4, r7
 8016980:	d206      	bcs.n	8016990 <__hexnan+0xb4>
 8016982:	2d07      	cmp	r5, #7
 8016984:	dc04      	bgt.n	8016990 <__hexnan+0xb4>
 8016986:	002a      	movs	r2, r5
 8016988:	0039      	movs	r1, r7
 801698a:	0020      	movs	r0, r4
 801698c:	f7ff ff80 	bl	8016890 <L_shift>
 8016990:	9b01      	ldr	r3, [sp, #4]
 8016992:	429c      	cmp	r4, r3
 8016994:	d935      	bls.n	8016a02 <__hexnan+0x126>
 8016996:	001a      	movs	r2, r3
 8016998:	0023      	movs	r3, r4
 801699a:	cb02      	ldmia	r3!, {r1}
 801699c:	c202      	stmia	r2!, {r1}
 801699e:	429e      	cmp	r6, r3
 80169a0:	d2fb      	bcs.n	801699a <__hexnan+0xbe>
 80169a2:	9b02      	ldr	r3, [sp, #8]
 80169a4:	1c61      	adds	r1, r4, #1
 80169a6:	1eda      	subs	r2, r3, #3
 80169a8:	2304      	movs	r3, #4
 80169aa:	4291      	cmp	r1, r2
 80169ac:	d805      	bhi.n	80169ba <__hexnan+0xde>
 80169ae:	9b02      	ldr	r3, [sp, #8]
 80169b0:	3b04      	subs	r3, #4
 80169b2:	1b1c      	subs	r4, r3, r4
 80169b4:	08a4      	lsrs	r4, r4, #2
 80169b6:	3401      	adds	r4, #1
 80169b8:	00a3      	lsls	r3, r4, #2
 80169ba:	9a01      	ldr	r2, [sp, #4]
 80169bc:	18d4      	adds	r4, r2, r3
 80169be:	2300      	movs	r3, #0
 80169c0:	c408      	stmia	r4!, {r3}
 80169c2:	42a6      	cmp	r6, r4
 80169c4:	d2fc      	bcs.n	80169c0 <__hexnan+0xe4>
 80169c6:	6833      	ldr	r3, [r6, #0]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d104      	bne.n	80169d6 <__hexnan+0xfa>
 80169cc:	9b01      	ldr	r3, [sp, #4]
 80169ce:	429e      	cmp	r6, r3
 80169d0:	d125      	bne.n	8016a1e <__hexnan+0x142>
 80169d2:	2301      	movs	r3, #1
 80169d4:	6033      	str	r3, [r6, #0]
 80169d6:	2005      	movs	r0, #5
 80169d8:	e024      	b.n	8016a24 <__hexnan+0x148>
 80169da:	9b03      	ldr	r3, [sp, #12]
 80169dc:	3501      	adds	r5, #1
 80169de:	3301      	adds	r3, #1
 80169e0:	9303      	str	r3, [sp, #12]
 80169e2:	2d08      	cmp	r5, #8
 80169e4:	dd06      	ble.n	80169f4 <__hexnan+0x118>
 80169e6:	9b01      	ldr	r3, [sp, #4]
 80169e8:	429c      	cmp	r4, r3
 80169ea:	d9bb      	bls.n	8016964 <__hexnan+0x88>
 80169ec:	2300      	movs	r3, #0
 80169ee:	2501      	movs	r5, #1
 80169f0:	3c04      	subs	r4, #4
 80169f2:	6023      	str	r3, [r4, #0]
 80169f4:	220f      	movs	r2, #15
 80169f6:	6823      	ldr	r3, [r4, #0]
 80169f8:	4010      	ands	r0, r2
 80169fa:	011b      	lsls	r3, r3, #4
 80169fc:	4318      	orrs	r0, r3
 80169fe:	6020      	str	r0, [r4, #0]
 8016a00:	e7b0      	b.n	8016964 <__hexnan+0x88>
 8016a02:	9b06      	ldr	r3, [sp, #24]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d0de      	beq.n	80169c6 <__hexnan+0xea>
 8016a08:	2220      	movs	r2, #32
 8016a0a:	1ad2      	subs	r2, r2, r3
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	425b      	negs	r3, r3
 8016a10:	40d3      	lsrs	r3, r2
 8016a12:	9c02      	ldr	r4, [sp, #8]
 8016a14:	3c04      	subs	r4, #4
 8016a16:	6822      	ldr	r2, [r4, #0]
 8016a18:	4013      	ands	r3, r2
 8016a1a:	6023      	str	r3, [r4, #0]
 8016a1c:	e7d3      	b.n	80169c6 <__hexnan+0xea>
 8016a1e:	3e04      	subs	r6, #4
 8016a20:	e7d1      	b.n	80169c6 <__hexnan+0xea>
 8016a22:	2004      	movs	r0, #4
 8016a24:	b00b      	add	sp, #44	; 0x2c
 8016a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016a28 <_localeconv_r>:
 8016a28:	4800      	ldr	r0, [pc, #0]	; (8016a2c <_localeconv_r+0x4>)
 8016a2a:	4770      	bx	lr
 8016a2c:	20000238 	.word	0x20000238

08016a30 <__ascii_mbtowc>:
 8016a30:	b082      	sub	sp, #8
 8016a32:	2900      	cmp	r1, #0
 8016a34:	d100      	bne.n	8016a38 <__ascii_mbtowc+0x8>
 8016a36:	a901      	add	r1, sp, #4
 8016a38:	1e10      	subs	r0, r2, #0
 8016a3a:	d006      	beq.n	8016a4a <__ascii_mbtowc+0x1a>
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d006      	beq.n	8016a4e <__ascii_mbtowc+0x1e>
 8016a40:	7813      	ldrb	r3, [r2, #0]
 8016a42:	600b      	str	r3, [r1, #0]
 8016a44:	7810      	ldrb	r0, [r2, #0]
 8016a46:	1e43      	subs	r3, r0, #1
 8016a48:	4198      	sbcs	r0, r3
 8016a4a:	b002      	add	sp, #8
 8016a4c:	4770      	bx	lr
 8016a4e:	2002      	movs	r0, #2
 8016a50:	4240      	negs	r0, r0
 8016a52:	e7fa      	b.n	8016a4a <__ascii_mbtowc+0x1a>

08016a54 <memchr>:
 8016a54:	b2c9      	uxtb	r1, r1
 8016a56:	1882      	adds	r2, r0, r2
 8016a58:	4290      	cmp	r0, r2
 8016a5a:	d101      	bne.n	8016a60 <memchr+0xc>
 8016a5c:	2000      	movs	r0, #0
 8016a5e:	4770      	bx	lr
 8016a60:	7803      	ldrb	r3, [r0, #0]
 8016a62:	428b      	cmp	r3, r1
 8016a64:	d0fb      	beq.n	8016a5e <memchr+0xa>
 8016a66:	3001      	adds	r0, #1
 8016a68:	e7f6      	b.n	8016a58 <memchr+0x4>
	...

08016a6c <__malloc_lock>:
 8016a6c:	b510      	push	{r4, lr}
 8016a6e:	4802      	ldr	r0, [pc, #8]	; (8016a78 <__malloc_lock+0xc>)
 8016a70:	f001 fa87 	bl	8017f82 <__retarget_lock_acquire_recursive>
 8016a74:	bd10      	pop	{r4, pc}
 8016a76:	46c0      	nop			; (mov r8, r8)
 8016a78:	20006660 	.word	0x20006660

08016a7c <__malloc_unlock>:
 8016a7c:	b510      	push	{r4, lr}
 8016a7e:	4802      	ldr	r0, [pc, #8]	; (8016a88 <__malloc_unlock+0xc>)
 8016a80:	f001 fa80 	bl	8017f84 <__retarget_lock_release_recursive>
 8016a84:	bd10      	pop	{r4, pc}
 8016a86:	46c0      	nop			; (mov r8, r8)
 8016a88:	20006660 	.word	0x20006660

08016a8c <_Balloc>:
 8016a8c:	b570      	push	{r4, r5, r6, lr}
 8016a8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016a90:	0006      	movs	r6, r0
 8016a92:	000c      	movs	r4, r1
 8016a94:	2d00      	cmp	r5, #0
 8016a96:	d10e      	bne.n	8016ab6 <_Balloc+0x2a>
 8016a98:	2010      	movs	r0, #16
 8016a9a:	f7fc fdfd 	bl	8013698 <malloc>
 8016a9e:	1e02      	subs	r2, r0, #0
 8016aa0:	6270      	str	r0, [r6, #36]	; 0x24
 8016aa2:	d104      	bne.n	8016aae <_Balloc+0x22>
 8016aa4:	2166      	movs	r1, #102	; 0x66
 8016aa6:	4b19      	ldr	r3, [pc, #100]	; (8016b0c <_Balloc+0x80>)
 8016aa8:	4819      	ldr	r0, [pc, #100]	; (8016b10 <_Balloc+0x84>)
 8016aaa:	f7fe fd6d 	bl	8015588 <__assert_func>
 8016aae:	6045      	str	r5, [r0, #4]
 8016ab0:	6085      	str	r5, [r0, #8]
 8016ab2:	6005      	str	r5, [r0, #0]
 8016ab4:	60c5      	str	r5, [r0, #12]
 8016ab6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8016ab8:	68eb      	ldr	r3, [r5, #12]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d013      	beq.n	8016ae6 <_Balloc+0x5a>
 8016abe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016ac0:	00a2      	lsls	r2, r4, #2
 8016ac2:	68db      	ldr	r3, [r3, #12]
 8016ac4:	189b      	adds	r3, r3, r2
 8016ac6:	6818      	ldr	r0, [r3, #0]
 8016ac8:	2800      	cmp	r0, #0
 8016aca:	d118      	bne.n	8016afe <_Balloc+0x72>
 8016acc:	2101      	movs	r1, #1
 8016ace:	000d      	movs	r5, r1
 8016ad0:	40a5      	lsls	r5, r4
 8016ad2:	1d6a      	adds	r2, r5, #5
 8016ad4:	0030      	movs	r0, r6
 8016ad6:	0092      	lsls	r2, r2, #2
 8016ad8:	f000 fca2 	bl	8017420 <_calloc_r>
 8016adc:	2800      	cmp	r0, #0
 8016ade:	d00c      	beq.n	8016afa <_Balloc+0x6e>
 8016ae0:	6044      	str	r4, [r0, #4]
 8016ae2:	6085      	str	r5, [r0, #8]
 8016ae4:	e00d      	b.n	8016b02 <_Balloc+0x76>
 8016ae6:	2221      	movs	r2, #33	; 0x21
 8016ae8:	2104      	movs	r1, #4
 8016aea:	0030      	movs	r0, r6
 8016aec:	f000 fc98 	bl	8017420 <_calloc_r>
 8016af0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016af2:	60e8      	str	r0, [r5, #12]
 8016af4:	68db      	ldr	r3, [r3, #12]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d1e1      	bne.n	8016abe <_Balloc+0x32>
 8016afa:	2000      	movs	r0, #0
 8016afc:	bd70      	pop	{r4, r5, r6, pc}
 8016afe:	6802      	ldr	r2, [r0, #0]
 8016b00:	601a      	str	r2, [r3, #0]
 8016b02:	2300      	movs	r3, #0
 8016b04:	6103      	str	r3, [r0, #16]
 8016b06:	60c3      	str	r3, [r0, #12]
 8016b08:	e7f8      	b.n	8016afc <_Balloc+0x70>
 8016b0a:	46c0      	nop			; (mov r8, r8)
 8016b0c:	0801b859 	.word	0x0801b859
 8016b10:	0801bab8 	.word	0x0801bab8

08016b14 <_Bfree>:
 8016b14:	b570      	push	{r4, r5, r6, lr}
 8016b16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016b18:	0005      	movs	r5, r0
 8016b1a:	000c      	movs	r4, r1
 8016b1c:	2e00      	cmp	r6, #0
 8016b1e:	d10e      	bne.n	8016b3e <_Bfree+0x2a>
 8016b20:	2010      	movs	r0, #16
 8016b22:	f7fc fdb9 	bl	8013698 <malloc>
 8016b26:	1e02      	subs	r2, r0, #0
 8016b28:	6268      	str	r0, [r5, #36]	; 0x24
 8016b2a:	d104      	bne.n	8016b36 <_Bfree+0x22>
 8016b2c:	218a      	movs	r1, #138	; 0x8a
 8016b2e:	4b09      	ldr	r3, [pc, #36]	; (8016b54 <_Bfree+0x40>)
 8016b30:	4809      	ldr	r0, [pc, #36]	; (8016b58 <_Bfree+0x44>)
 8016b32:	f7fe fd29 	bl	8015588 <__assert_func>
 8016b36:	6046      	str	r6, [r0, #4]
 8016b38:	6086      	str	r6, [r0, #8]
 8016b3a:	6006      	str	r6, [r0, #0]
 8016b3c:	60c6      	str	r6, [r0, #12]
 8016b3e:	2c00      	cmp	r4, #0
 8016b40:	d007      	beq.n	8016b52 <_Bfree+0x3e>
 8016b42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016b44:	6862      	ldr	r2, [r4, #4]
 8016b46:	68db      	ldr	r3, [r3, #12]
 8016b48:	0092      	lsls	r2, r2, #2
 8016b4a:	189b      	adds	r3, r3, r2
 8016b4c:	681a      	ldr	r2, [r3, #0]
 8016b4e:	6022      	str	r2, [r4, #0]
 8016b50:	601c      	str	r4, [r3, #0]
 8016b52:	bd70      	pop	{r4, r5, r6, pc}
 8016b54:	0801b859 	.word	0x0801b859
 8016b58:	0801bab8 	.word	0x0801bab8

08016b5c <__multadd>:
 8016b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b5e:	000e      	movs	r6, r1
 8016b60:	9001      	str	r0, [sp, #4]
 8016b62:	000c      	movs	r4, r1
 8016b64:	001d      	movs	r5, r3
 8016b66:	2000      	movs	r0, #0
 8016b68:	690f      	ldr	r7, [r1, #16]
 8016b6a:	3614      	adds	r6, #20
 8016b6c:	6833      	ldr	r3, [r6, #0]
 8016b6e:	3001      	adds	r0, #1
 8016b70:	b299      	uxth	r1, r3
 8016b72:	4351      	muls	r1, r2
 8016b74:	0c1b      	lsrs	r3, r3, #16
 8016b76:	4353      	muls	r3, r2
 8016b78:	1949      	adds	r1, r1, r5
 8016b7a:	0c0d      	lsrs	r5, r1, #16
 8016b7c:	195b      	adds	r3, r3, r5
 8016b7e:	0c1d      	lsrs	r5, r3, #16
 8016b80:	b289      	uxth	r1, r1
 8016b82:	041b      	lsls	r3, r3, #16
 8016b84:	185b      	adds	r3, r3, r1
 8016b86:	c608      	stmia	r6!, {r3}
 8016b88:	4287      	cmp	r7, r0
 8016b8a:	dcef      	bgt.n	8016b6c <__multadd+0x10>
 8016b8c:	2d00      	cmp	r5, #0
 8016b8e:	d022      	beq.n	8016bd6 <__multadd+0x7a>
 8016b90:	68a3      	ldr	r3, [r4, #8]
 8016b92:	42bb      	cmp	r3, r7
 8016b94:	dc19      	bgt.n	8016bca <__multadd+0x6e>
 8016b96:	6863      	ldr	r3, [r4, #4]
 8016b98:	9801      	ldr	r0, [sp, #4]
 8016b9a:	1c59      	adds	r1, r3, #1
 8016b9c:	f7ff ff76 	bl	8016a8c <_Balloc>
 8016ba0:	1e06      	subs	r6, r0, #0
 8016ba2:	d105      	bne.n	8016bb0 <__multadd+0x54>
 8016ba4:	0002      	movs	r2, r0
 8016ba6:	21b5      	movs	r1, #181	; 0xb5
 8016ba8:	4b0c      	ldr	r3, [pc, #48]	; (8016bdc <__multadd+0x80>)
 8016baa:	480d      	ldr	r0, [pc, #52]	; (8016be0 <__multadd+0x84>)
 8016bac:	f7fe fcec 	bl	8015588 <__assert_func>
 8016bb0:	0021      	movs	r1, r4
 8016bb2:	6923      	ldr	r3, [r4, #16]
 8016bb4:	310c      	adds	r1, #12
 8016bb6:	1c9a      	adds	r2, r3, #2
 8016bb8:	0092      	lsls	r2, r2, #2
 8016bba:	300c      	adds	r0, #12
 8016bbc:	f7fc fd8e 	bl	80136dc <memcpy>
 8016bc0:	0021      	movs	r1, r4
 8016bc2:	9801      	ldr	r0, [sp, #4]
 8016bc4:	f7ff ffa6 	bl	8016b14 <_Bfree>
 8016bc8:	0034      	movs	r4, r6
 8016bca:	1d3b      	adds	r3, r7, #4
 8016bcc:	009b      	lsls	r3, r3, #2
 8016bce:	18e3      	adds	r3, r4, r3
 8016bd0:	605d      	str	r5, [r3, #4]
 8016bd2:	1c7b      	adds	r3, r7, #1
 8016bd4:	6123      	str	r3, [r4, #16]
 8016bd6:	0020      	movs	r0, r4
 8016bd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016bda:	46c0      	nop			; (mov r8, r8)
 8016bdc:	0801ba29 	.word	0x0801ba29
 8016be0:	0801bab8 	.word	0x0801bab8

08016be4 <__s2b>:
 8016be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016be6:	0006      	movs	r6, r0
 8016be8:	0018      	movs	r0, r3
 8016bea:	000c      	movs	r4, r1
 8016bec:	3008      	adds	r0, #8
 8016bee:	2109      	movs	r1, #9
 8016bf0:	9301      	str	r3, [sp, #4]
 8016bf2:	0015      	movs	r5, r2
 8016bf4:	f7e9 fb36 	bl	8000264 <__divsi3>
 8016bf8:	2301      	movs	r3, #1
 8016bfa:	2100      	movs	r1, #0
 8016bfc:	4283      	cmp	r3, r0
 8016bfe:	db0a      	blt.n	8016c16 <__s2b+0x32>
 8016c00:	0030      	movs	r0, r6
 8016c02:	f7ff ff43 	bl	8016a8c <_Balloc>
 8016c06:	1e01      	subs	r1, r0, #0
 8016c08:	d108      	bne.n	8016c1c <__s2b+0x38>
 8016c0a:	0002      	movs	r2, r0
 8016c0c:	4b19      	ldr	r3, [pc, #100]	; (8016c74 <__s2b+0x90>)
 8016c0e:	481a      	ldr	r0, [pc, #104]	; (8016c78 <__s2b+0x94>)
 8016c10:	31ce      	adds	r1, #206	; 0xce
 8016c12:	f7fe fcb9 	bl	8015588 <__assert_func>
 8016c16:	005b      	lsls	r3, r3, #1
 8016c18:	3101      	adds	r1, #1
 8016c1a:	e7ef      	b.n	8016bfc <__s2b+0x18>
 8016c1c:	9b08      	ldr	r3, [sp, #32]
 8016c1e:	6143      	str	r3, [r0, #20]
 8016c20:	2301      	movs	r3, #1
 8016c22:	6103      	str	r3, [r0, #16]
 8016c24:	2d09      	cmp	r5, #9
 8016c26:	dd18      	ble.n	8016c5a <__s2b+0x76>
 8016c28:	0023      	movs	r3, r4
 8016c2a:	3309      	adds	r3, #9
 8016c2c:	001f      	movs	r7, r3
 8016c2e:	9300      	str	r3, [sp, #0]
 8016c30:	1964      	adds	r4, r4, r5
 8016c32:	783b      	ldrb	r3, [r7, #0]
 8016c34:	220a      	movs	r2, #10
 8016c36:	0030      	movs	r0, r6
 8016c38:	3b30      	subs	r3, #48	; 0x30
 8016c3a:	f7ff ff8f 	bl	8016b5c <__multadd>
 8016c3e:	3701      	adds	r7, #1
 8016c40:	0001      	movs	r1, r0
 8016c42:	42a7      	cmp	r7, r4
 8016c44:	d1f5      	bne.n	8016c32 <__s2b+0x4e>
 8016c46:	002c      	movs	r4, r5
 8016c48:	9b00      	ldr	r3, [sp, #0]
 8016c4a:	3c08      	subs	r4, #8
 8016c4c:	191c      	adds	r4, r3, r4
 8016c4e:	002f      	movs	r7, r5
 8016c50:	9b01      	ldr	r3, [sp, #4]
 8016c52:	429f      	cmp	r7, r3
 8016c54:	db04      	blt.n	8016c60 <__s2b+0x7c>
 8016c56:	0008      	movs	r0, r1
 8016c58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016c5a:	2509      	movs	r5, #9
 8016c5c:	340a      	adds	r4, #10
 8016c5e:	e7f6      	b.n	8016c4e <__s2b+0x6a>
 8016c60:	1b63      	subs	r3, r4, r5
 8016c62:	5ddb      	ldrb	r3, [r3, r7]
 8016c64:	220a      	movs	r2, #10
 8016c66:	0030      	movs	r0, r6
 8016c68:	3b30      	subs	r3, #48	; 0x30
 8016c6a:	f7ff ff77 	bl	8016b5c <__multadd>
 8016c6e:	3701      	adds	r7, #1
 8016c70:	0001      	movs	r1, r0
 8016c72:	e7ed      	b.n	8016c50 <__s2b+0x6c>
 8016c74:	0801ba29 	.word	0x0801ba29
 8016c78:	0801bab8 	.word	0x0801bab8

08016c7c <__hi0bits>:
 8016c7c:	0003      	movs	r3, r0
 8016c7e:	0c02      	lsrs	r2, r0, #16
 8016c80:	2000      	movs	r0, #0
 8016c82:	4282      	cmp	r2, r0
 8016c84:	d101      	bne.n	8016c8a <__hi0bits+0xe>
 8016c86:	041b      	lsls	r3, r3, #16
 8016c88:	3010      	adds	r0, #16
 8016c8a:	0e1a      	lsrs	r2, r3, #24
 8016c8c:	d101      	bne.n	8016c92 <__hi0bits+0x16>
 8016c8e:	3008      	adds	r0, #8
 8016c90:	021b      	lsls	r3, r3, #8
 8016c92:	0f1a      	lsrs	r2, r3, #28
 8016c94:	d101      	bne.n	8016c9a <__hi0bits+0x1e>
 8016c96:	3004      	adds	r0, #4
 8016c98:	011b      	lsls	r3, r3, #4
 8016c9a:	0f9a      	lsrs	r2, r3, #30
 8016c9c:	d101      	bne.n	8016ca2 <__hi0bits+0x26>
 8016c9e:	3002      	adds	r0, #2
 8016ca0:	009b      	lsls	r3, r3, #2
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	db03      	blt.n	8016cae <__hi0bits+0x32>
 8016ca6:	3001      	adds	r0, #1
 8016ca8:	005b      	lsls	r3, r3, #1
 8016caa:	d400      	bmi.n	8016cae <__hi0bits+0x32>
 8016cac:	2020      	movs	r0, #32
 8016cae:	4770      	bx	lr

08016cb0 <__lo0bits>:
 8016cb0:	6803      	ldr	r3, [r0, #0]
 8016cb2:	0002      	movs	r2, r0
 8016cb4:	2107      	movs	r1, #7
 8016cb6:	0018      	movs	r0, r3
 8016cb8:	4008      	ands	r0, r1
 8016cba:	420b      	tst	r3, r1
 8016cbc:	d00d      	beq.n	8016cda <__lo0bits+0x2a>
 8016cbe:	3906      	subs	r1, #6
 8016cc0:	2000      	movs	r0, #0
 8016cc2:	420b      	tst	r3, r1
 8016cc4:	d105      	bne.n	8016cd2 <__lo0bits+0x22>
 8016cc6:	3002      	adds	r0, #2
 8016cc8:	4203      	tst	r3, r0
 8016cca:	d003      	beq.n	8016cd4 <__lo0bits+0x24>
 8016ccc:	40cb      	lsrs	r3, r1
 8016cce:	0008      	movs	r0, r1
 8016cd0:	6013      	str	r3, [r2, #0]
 8016cd2:	4770      	bx	lr
 8016cd4:	089b      	lsrs	r3, r3, #2
 8016cd6:	6013      	str	r3, [r2, #0]
 8016cd8:	e7fb      	b.n	8016cd2 <__lo0bits+0x22>
 8016cda:	b299      	uxth	r1, r3
 8016cdc:	2900      	cmp	r1, #0
 8016cde:	d101      	bne.n	8016ce4 <__lo0bits+0x34>
 8016ce0:	2010      	movs	r0, #16
 8016ce2:	0c1b      	lsrs	r3, r3, #16
 8016ce4:	b2d9      	uxtb	r1, r3
 8016ce6:	2900      	cmp	r1, #0
 8016ce8:	d101      	bne.n	8016cee <__lo0bits+0x3e>
 8016cea:	3008      	adds	r0, #8
 8016cec:	0a1b      	lsrs	r3, r3, #8
 8016cee:	0719      	lsls	r1, r3, #28
 8016cf0:	d101      	bne.n	8016cf6 <__lo0bits+0x46>
 8016cf2:	3004      	adds	r0, #4
 8016cf4:	091b      	lsrs	r3, r3, #4
 8016cf6:	0799      	lsls	r1, r3, #30
 8016cf8:	d101      	bne.n	8016cfe <__lo0bits+0x4e>
 8016cfa:	3002      	adds	r0, #2
 8016cfc:	089b      	lsrs	r3, r3, #2
 8016cfe:	07d9      	lsls	r1, r3, #31
 8016d00:	d4e9      	bmi.n	8016cd6 <__lo0bits+0x26>
 8016d02:	3001      	adds	r0, #1
 8016d04:	085b      	lsrs	r3, r3, #1
 8016d06:	d1e6      	bne.n	8016cd6 <__lo0bits+0x26>
 8016d08:	2020      	movs	r0, #32
 8016d0a:	e7e2      	b.n	8016cd2 <__lo0bits+0x22>

08016d0c <__i2b>:
 8016d0c:	b510      	push	{r4, lr}
 8016d0e:	000c      	movs	r4, r1
 8016d10:	2101      	movs	r1, #1
 8016d12:	f7ff febb 	bl	8016a8c <_Balloc>
 8016d16:	2800      	cmp	r0, #0
 8016d18:	d106      	bne.n	8016d28 <__i2b+0x1c>
 8016d1a:	21a0      	movs	r1, #160	; 0xa0
 8016d1c:	0002      	movs	r2, r0
 8016d1e:	4b04      	ldr	r3, [pc, #16]	; (8016d30 <__i2b+0x24>)
 8016d20:	4804      	ldr	r0, [pc, #16]	; (8016d34 <__i2b+0x28>)
 8016d22:	0049      	lsls	r1, r1, #1
 8016d24:	f7fe fc30 	bl	8015588 <__assert_func>
 8016d28:	2301      	movs	r3, #1
 8016d2a:	6144      	str	r4, [r0, #20]
 8016d2c:	6103      	str	r3, [r0, #16]
 8016d2e:	bd10      	pop	{r4, pc}
 8016d30:	0801ba29 	.word	0x0801ba29
 8016d34:	0801bab8 	.word	0x0801bab8

08016d38 <__multiply>:
 8016d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d3a:	690b      	ldr	r3, [r1, #16]
 8016d3c:	0014      	movs	r4, r2
 8016d3e:	6912      	ldr	r2, [r2, #16]
 8016d40:	000d      	movs	r5, r1
 8016d42:	b089      	sub	sp, #36	; 0x24
 8016d44:	4293      	cmp	r3, r2
 8016d46:	da01      	bge.n	8016d4c <__multiply+0x14>
 8016d48:	0025      	movs	r5, r4
 8016d4a:	000c      	movs	r4, r1
 8016d4c:	692f      	ldr	r7, [r5, #16]
 8016d4e:	6926      	ldr	r6, [r4, #16]
 8016d50:	6869      	ldr	r1, [r5, #4]
 8016d52:	19bb      	adds	r3, r7, r6
 8016d54:	9302      	str	r3, [sp, #8]
 8016d56:	68ab      	ldr	r3, [r5, #8]
 8016d58:	19ba      	adds	r2, r7, r6
 8016d5a:	4293      	cmp	r3, r2
 8016d5c:	da00      	bge.n	8016d60 <__multiply+0x28>
 8016d5e:	3101      	adds	r1, #1
 8016d60:	f7ff fe94 	bl	8016a8c <_Balloc>
 8016d64:	9001      	str	r0, [sp, #4]
 8016d66:	2800      	cmp	r0, #0
 8016d68:	d106      	bne.n	8016d78 <__multiply+0x40>
 8016d6a:	215e      	movs	r1, #94	; 0x5e
 8016d6c:	0002      	movs	r2, r0
 8016d6e:	4b48      	ldr	r3, [pc, #288]	; (8016e90 <__multiply+0x158>)
 8016d70:	4848      	ldr	r0, [pc, #288]	; (8016e94 <__multiply+0x15c>)
 8016d72:	31ff      	adds	r1, #255	; 0xff
 8016d74:	f7fe fc08 	bl	8015588 <__assert_func>
 8016d78:	9b01      	ldr	r3, [sp, #4]
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	3314      	adds	r3, #20
 8016d7e:	469c      	mov	ip, r3
 8016d80:	19bb      	adds	r3, r7, r6
 8016d82:	009b      	lsls	r3, r3, #2
 8016d84:	4463      	add	r3, ip
 8016d86:	9303      	str	r3, [sp, #12]
 8016d88:	4663      	mov	r3, ip
 8016d8a:	9903      	ldr	r1, [sp, #12]
 8016d8c:	428b      	cmp	r3, r1
 8016d8e:	d32c      	bcc.n	8016dea <__multiply+0xb2>
 8016d90:	002b      	movs	r3, r5
 8016d92:	0022      	movs	r2, r4
 8016d94:	3314      	adds	r3, #20
 8016d96:	00bf      	lsls	r7, r7, #2
 8016d98:	3214      	adds	r2, #20
 8016d9a:	9306      	str	r3, [sp, #24]
 8016d9c:	00b6      	lsls	r6, r6, #2
 8016d9e:	19db      	adds	r3, r3, r7
 8016da0:	9304      	str	r3, [sp, #16]
 8016da2:	1993      	adds	r3, r2, r6
 8016da4:	9307      	str	r3, [sp, #28]
 8016da6:	2304      	movs	r3, #4
 8016da8:	9305      	str	r3, [sp, #20]
 8016daa:	002b      	movs	r3, r5
 8016dac:	9904      	ldr	r1, [sp, #16]
 8016dae:	3315      	adds	r3, #21
 8016db0:	9200      	str	r2, [sp, #0]
 8016db2:	4299      	cmp	r1, r3
 8016db4:	d305      	bcc.n	8016dc2 <__multiply+0x8a>
 8016db6:	1b4b      	subs	r3, r1, r5
 8016db8:	3b15      	subs	r3, #21
 8016dba:	089b      	lsrs	r3, r3, #2
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	009b      	lsls	r3, r3, #2
 8016dc0:	9305      	str	r3, [sp, #20]
 8016dc2:	9b07      	ldr	r3, [sp, #28]
 8016dc4:	9a00      	ldr	r2, [sp, #0]
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	d311      	bcc.n	8016dee <__multiply+0xb6>
 8016dca:	9b02      	ldr	r3, [sp, #8]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	dd06      	ble.n	8016dde <__multiply+0xa6>
 8016dd0:	9b03      	ldr	r3, [sp, #12]
 8016dd2:	3b04      	subs	r3, #4
 8016dd4:	9303      	str	r3, [sp, #12]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	9300      	str	r3, [sp, #0]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d054      	beq.n	8016e88 <__multiply+0x150>
 8016dde:	9b01      	ldr	r3, [sp, #4]
 8016de0:	9a02      	ldr	r2, [sp, #8]
 8016de2:	0018      	movs	r0, r3
 8016de4:	611a      	str	r2, [r3, #16]
 8016de6:	b009      	add	sp, #36	; 0x24
 8016de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dea:	c304      	stmia	r3!, {r2}
 8016dec:	e7cd      	b.n	8016d8a <__multiply+0x52>
 8016dee:	9b00      	ldr	r3, [sp, #0]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	b298      	uxth	r0, r3
 8016df4:	2800      	cmp	r0, #0
 8016df6:	d01c      	beq.n	8016e32 <__multiply+0xfa>
 8016df8:	4667      	mov	r7, ip
 8016dfa:	2400      	movs	r4, #0
 8016dfc:	9e06      	ldr	r6, [sp, #24]
 8016dfe:	ce02      	ldmia	r6!, {r1}
 8016e00:	683a      	ldr	r2, [r7, #0]
 8016e02:	b28b      	uxth	r3, r1
 8016e04:	4343      	muls	r3, r0
 8016e06:	0c09      	lsrs	r1, r1, #16
 8016e08:	4341      	muls	r1, r0
 8016e0a:	b292      	uxth	r2, r2
 8016e0c:	189b      	adds	r3, r3, r2
 8016e0e:	191b      	adds	r3, r3, r4
 8016e10:	000c      	movs	r4, r1
 8016e12:	683a      	ldr	r2, [r7, #0]
 8016e14:	0c11      	lsrs	r1, r2, #16
 8016e16:	1861      	adds	r1, r4, r1
 8016e18:	0c1c      	lsrs	r4, r3, #16
 8016e1a:	1909      	adds	r1, r1, r4
 8016e1c:	0c0c      	lsrs	r4, r1, #16
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	0409      	lsls	r1, r1, #16
 8016e22:	430b      	orrs	r3, r1
 8016e24:	c708      	stmia	r7!, {r3}
 8016e26:	9b04      	ldr	r3, [sp, #16]
 8016e28:	42b3      	cmp	r3, r6
 8016e2a:	d8e8      	bhi.n	8016dfe <__multiply+0xc6>
 8016e2c:	4663      	mov	r3, ip
 8016e2e:	9a05      	ldr	r2, [sp, #20]
 8016e30:	509c      	str	r4, [r3, r2]
 8016e32:	9b00      	ldr	r3, [sp, #0]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	0c1e      	lsrs	r6, r3, #16
 8016e38:	d020      	beq.n	8016e7c <__multiply+0x144>
 8016e3a:	4663      	mov	r3, ip
 8016e3c:	002c      	movs	r4, r5
 8016e3e:	4660      	mov	r0, ip
 8016e40:	2700      	movs	r7, #0
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	3414      	adds	r4, #20
 8016e46:	6822      	ldr	r2, [r4, #0]
 8016e48:	b29b      	uxth	r3, r3
 8016e4a:	b291      	uxth	r1, r2
 8016e4c:	4371      	muls	r1, r6
 8016e4e:	6802      	ldr	r2, [r0, #0]
 8016e50:	0c12      	lsrs	r2, r2, #16
 8016e52:	1889      	adds	r1, r1, r2
 8016e54:	19cf      	adds	r7, r1, r7
 8016e56:	0439      	lsls	r1, r7, #16
 8016e58:	430b      	orrs	r3, r1
 8016e5a:	6003      	str	r3, [r0, #0]
 8016e5c:	cc02      	ldmia	r4!, {r1}
 8016e5e:	6843      	ldr	r3, [r0, #4]
 8016e60:	0c09      	lsrs	r1, r1, #16
 8016e62:	4371      	muls	r1, r6
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	0c3f      	lsrs	r7, r7, #16
 8016e68:	18cb      	adds	r3, r1, r3
 8016e6a:	9a04      	ldr	r2, [sp, #16]
 8016e6c:	19db      	adds	r3, r3, r7
 8016e6e:	0c1f      	lsrs	r7, r3, #16
 8016e70:	3004      	adds	r0, #4
 8016e72:	42a2      	cmp	r2, r4
 8016e74:	d8e7      	bhi.n	8016e46 <__multiply+0x10e>
 8016e76:	4662      	mov	r2, ip
 8016e78:	9905      	ldr	r1, [sp, #20]
 8016e7a:	5053      	str	r3, [r2, r1]
 8016e7c:	9b00      	ldr	r3, [sp, #0]
 8016e7e:	3304      	adds	r3, #4
 8016e80:	9300      	str	r3, [sp, #0]
 8016e82:	2304      	movs	r3, #4
 8016e84:	449c      	add	ip, r3
 8016e86:	e79c      	b.n	8016dc2 <__multiply+0x8a>
 8016e88:	9b02      	ldr	r3, [sp, #8]
 8016e8a:	3b01      	subs	r3, #1
 8016e8c:	9302      	str	r3, [sp, #8]
 8016e8e:	e79c      	b.n	8016dca <__multiply+0x92>
 8016e90:	0801ba29 	.word	0x0801ba29
 8016e94:	0801bab8 	.word	0x0801bab8

08016e98 <__pow5mult>:
 8016e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e9a:	2303      	movs	r3, #3
 8016e9c:	0015      	movs	r5, r2
 8016e9e:	0007      	movs	r7, r0
 8016ea0:	000e      	movs	r6, r1
 8016ea2:	401a      	ands	r2, r3
 8016ea4:	421d      	tst	r5, r3
 8016ea6:	d008      	beq.n	8016eba <__pow5mult+0x22>
 8016ea8:	4925      	ldr	r1, [pc, #148]	; (8016f40 <__pow5mult+0xa8>)
 8016eaa:	3a01      	subs	r2, #1
 8016eac:	0092      	lsls	r2, r2, #2
 8016eae:	5852      	ldr	r2, [r2, r1]
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	0031      	movs	r1, r6
 8016eb4:	f7ff fe52 	bl	8016b5c <__multadd>
 8016eb8:	0006      	movs	r6, r0
 8016eba:	10ad      	asrs	r5, r5, #2
 8016ebc:	d03d      	beq.n	8016f3a <__pow5mult+0xa2>
 8016ebe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8016ec0:	2c00      	cmp	r4, #0
 8016ec2:	d10f      	bne.n	8016ee4 <__pow5mult+0x4c>
 8016ec4:	2010      	movs	r0, #16
 8016ec6:	f7fc fbe7 	bl	8013698 <malloc>
 8016eca:	1e02      	subs	r2, r0, #0
 8016ecc:	6278      	str	r0, [r7, #36]	; 0x24
 8016ece:	d105      	bne.n	8016edc <__pow5mult+0x44>
 8016ed0:	21d7      	movs	r1, #215	; 0xd7
 8016ed2:	4b1c      	ldr	r3, [pc, #112]	; (8016f44 <__pow5mult+0xac>)
 8016ed4:	481c      	ldr	r0, [pc, #112]	; (8016f48 <__pow5mult+0xb0>)
 8016ed6:	0049      	lsls	r1, r1, #1
 8016ed8:	f7fe fb56 	bl	8015588 <__assert_func>
 8016edc:	6044      	str	r4, [r0, #4]
 8016ede:	6084      	str	r4, [r0, #8]
 8016ee0:	6004      	str	r4, [r0, #0]
 8016ee2:	60c4      	str	r4, [r0, #12]
 8016ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee6:	689c      	ldr	r4, [r3, #8]
 8016ee8:	9301      	str	r3, [sp, #4]
 8016eea:	2c00      	cmp	r4, #0
 8016eec:	d108      	bne.n	8016f00 <__pow5mult+0x68>
 8016eee:	0038      	movs	r0, r7
 8016ef0:	4916      	ldr	r1, [pc, #88]	; (8016f4c <__pow5mult+0xb4>)
 8016ef2:	f7ff ff0b 	bl	8016d0c <__i2b>
 8016ef6:	9b01      	ldr	r3, [sp, #4]
 8016ef8:	0004      	movs	r4, r0
 8016efa:	6098      	str	r0, [r3, #8]
 8016efc:	2300      	movs	r3, #0
 8016efe:	6003      	str	r3, [r0, #0]
 8016f00:	2301      	movs	r3, #1
 8016f02:	421d      	tst	r5, r3
 8016f04:	d00a      	beq.n	8016f1c <__pow5mult+0x84>
 8016f06:	0031      	movs	r1, r6
 8016f08:	0022      	movs	r2, r4
 8016f0a:	0038      	movs	r0, r7
 8016f0c:	f7ff ff14 	bl	8016d38 <__multiply>
 8016f10:	0031      	movs	r1, r6
 8016f12:	9001      	str	r0, [sp, #4]
 8016f14:	0038      	movs	r0, r7
 8016f16:	f7ff fdfd 	bl	8016b14 <_Bfree>
 8016f1a:	9e01      	ldr	r6, [sp, #4]
 8016f1c:	106d      	asrs	r5, r5, #1
 8016f1e:	d00c      	beq.n	8016f3a <__pow5mult+0xa2>
 8016f20:	6820      	ldr	r0, [r4, #0]
 8016f22:	2800      	cmp	r0, #0
 8016f24:	d107      	bne.n	8016f36 <__pow5mult+0x9e>
 8016f26:	0022      	movs	r2, r4
 8016f28:	0021      	movs	r1, r4
 8016f2a:	0038      	movs	r0, r7
 8016f2c:	f7ff ff04 	bl	8016d38 <__multiply>
 8016f30:	2300      	movs	r3, #0
 8016f32:	6020      	str	r0, [r4, #0]
 8016f34:	6003      	str	r3, [r0, #0]
 8016f36:	0004      	movs	r4, r0
 8016f38:	e7e2      	b.n	8016f00 <__pow5mult+0x68>
 8016f3a:	0030      	movs	r0, r6
 8016f3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016f3e:	46c0      	nop			; (mov r8, r8)
 8016f40:	0801bc08 	.word	0x0801bc08
 8016f44:	0801b859 	.word	0x0801b859
 8016f48:	0801bab8 	.word	0x0801bab8
 8016f4c:	00000271 	.word	0x00000271

08016f50 <__lshift>:
 8016f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f52:	000c      	movs	r4, r1
 8016f54:	0017      	movs	r7, r2
 8016f56:	6923      	ldr	r3, [r4, #16]
 8016f58:	1155      	asrs	r5, r2, #5
 8016f5a:	b087      	sub	sp, #28
 8016f5c:	18eb      	adds	r3, r5, r3
 8016f5e:	9302      	str	r3, [sp, #8]
 8016f60:	3301      	adds	r3, #1
 8016f62:	9301      	str	r3, [sp, #4]
 8016f64:	6849      	ldr	r1, [r1, #4]
 8016f66:	68a3      	ldr	r3, [r4, #8]
 8016f68:	9004      	str	r0, [sp, #16]
 8016f6a:	9a01      	ldr	r2, [sp, #4]
 8016f6c:	4293      	cmp	r3, r2
 8016f6e:	db11      	blt.n	8016f94 <__lshift+0x44>
 8016f70:	9804      	ldr	r0, [sp, #16]
 8016f72:	f7ff fd8b 	bl	8016a8c <_Balloc>
 8016f76:	0002      	movs	r2, r0
 8016f78:	2300      	movs	r3, #0
 8016f7a:	3214      	adds	r2, #20
 8016f7c:	0006      	movs	r6, r0
 8016f7e:	0011      	movs	r1, r2
 8016f80:	9203      	str	r2, [sp, #12]
 8016f82:	4298      	cmp	r0, r3
 8016f84:	d10d      	bne.n	8016fa2 <__lshift+0x52>
 8016f86:	21da      	movs	r1, #218	; 0xda
 8016f88:	0002      	movs	r2, r0
 8016f8a:	4b27      	ldr	r3, [pc, #156]	; (8017028 <__lshift+0xd8>)
 8016f8c:	4827      	ldr	r0, [pc, #156]	; (801702c <__lshift+0xdc>)
 8016f8e:	31ff      	adds	r1, #255	; 0xff
 8016f90:	f7fe fafa 	bl	8015588 <__assert_func>
 8016f94:	3101      	adds	r1, #1
 8016f96:	005b      	lsls	r3, r3, #1
 8016f98:	e7e7      	b.n	8016f6a <__lshift+0x1a>
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	0098      	lsls	r0, r3, #2
 8016f9e:	500a      	str	r2, [r1, r0]
 8016fa0:	3301      	adds	r3, #1
 8016fa2:	42ab      	cmp	r3, r5
 8016fa4:	dbf9      	blt.n	8016f9a <__lshift+0x4a>
 8016fa6:	43eb      	mvns	r3, r5
 8016fa8:	17db      	asrs	r3, r3, #31
 8016faa:	401d      	ands	r5, r3
 8016fac:	9b03      	ldr	r3, [sp, #12]
 8016fae:	00ad      	lsls	r5, r5, #2
 8016fb0:	211f      	movs	r1, #31
 8016fb2:	0038      	movs	r0, r7
 8016fb4:	195d      	adds	r5, r3, r5
 8016fb6:	0023      	movs	r3, r4
 8016fb8:	6922      	ldr	r2, [r4, #16]
 8016fba:	3314      	adds	r3, #20
 8016fbc:	0092      	lsls	r2, r2, #2
 8016fbe:	4008      	ands	r0, r1
 8016fc0:	4684      	mov	ip, r0
 8016fc2:	189a      	adds	r2, r3, r2
 8016fc4:	420f      	tst	r7, r1
 8016fc6:	d02a      	beq.n	801701e <__lshift+0xce>
 8016fc8:	3101      	adds	r1, #1
 8016fca:	1a09      	subs	r1, r1, r0
 8016fcc:	9105      	str	r1, [sp, #20]
 8016fce:	2100      	movs	r1, #0
 8016fd0:	9503      	str	r5, [sp, #12]
 8016fd2:	4667      	mov	r7, ip
 8016fd4:	6818      	ldr	r0, [r3, #0]
 8016fd6:	40b8      	lsls	r0, r7
 8016fd8:	4301      	orrs	r1, r0
 8016fda:	9803      	ldr	r0, [sp, #12]
 8016fdc:	c002      	stmia	r0!, {r1}
 8016fde:	cb02      	ldmia	r3!, {r1}
 8016fe0:	9003      	str	r0, [sp, #12]
 8016fe2:	9805      	ldr	r0, [sp, #20]
 8016fe4:	40c1      	lsrs	r1, r0
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d8f3      	bhi.n	8016fd2 <__lshift+0x82>
 8016fea:	0020      	movs	r0, r4
 8016fec:	3015      	adds	r0, #21
 8016fee:	2304      	movs	r3, #4
 8016ff0:	4282      	cmp	r2, r0
 8016ff2:	d304      	bcc.n	8016ffe <__lshift+0xae>
 8016ff4:	1b13      	subs	r3, r2, r4
 8016ff6:	3b15      	subs	r3, #21
 8016ff8:	089b      	lsrs	r3, r3, #2
 8016ffa:	3301      	adds	r3, #1
 8016ffc:	009b      	lsls	r3, r3, #2
 8016ffe:	50e9      	str	r1, [r5, r3]
 8017000:	2900      	cmp	r1, #0
 8017002:	d002      	beq.n	801700a <__lshift+0xba>
 8017004:	9b02      	ldr	r3, [sp, #8]
 8017006:	3302      	adds	r3, #2
 8017008:	9301      	str	r3, [sp, #4]
 801700a:	9b01      	ldr	r3, [sp, #4]
 801700c:	9804      	ldr	r0, [sp, #16]
 801700e:	3b01      	subs	r3, #1
 8017010:	0021      	movs	r1, r4
 8017012:	6133      	str	r3, [r6, #16]
 8017014:	f7ff fd7e 	bl	8016b14 <_Bfree>
 8017018:	0030      	movs	r0, r6
 801701a:	b007      	add	sp, #28
 801701c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801701e:	cb02      	ldmia	r3!, {r1}
 8017020:	c502      	stmia	r5!, {r1}
 8017022:	429a      	cmp	r2, r3
 8017024:	d8fb      	bhi.n	801701e <__lshift+0xce>
 8017026:	e7f0      	b.n	801700a <__lshift+0xba>
 8017028:	0801ba29 	.word	0x0801ba29
 801702c:	0801bab8 	.word	0x0801bab8

08017030 <__mcmp>:
 8017030:	6902      	ldr	r2, [r0, #16]
 8017032:	690b      	ldr	r3, [r1, #16]
 8017034:	b530      	push	{r4, r5, lr}
 8017036:	0004      	movs	r4, r0
 8017038:	1ad0      	subs	r0, r2, r3
 801703a:	429a      	cmp	r2, r3
 801703c:	d10d      	bne.n	801705a <__mcmp+0x2a>
 801703e:	009b      	lsls	r3, r3, #2
 8017040:	3414      	adds	r4, #20
 8017042:	3114      	adds	r1, #20
 8017044:	18e2      	adds	r2, r4, r3
 8017046:	18c9      	adds	r1, r1, r3
 8017048:	3a04      	subs	r2, #4
 801704a:	3904      	subs	r1, #4
 801704c:	6815      	ldr	r5, [r2, #0]
 801704e:	680b      	ldr	r3, [r1, #0]
 8017050:	429d      	cmp	r5, r3
 8017052:	d003      	beq.n	801705c <__mcmp+0x2c>
 8017054:	2001      	movs	r0, #1
 8017056:	429d      	cmp	r5, r3
 8017058:	d303      	bcc.n	8017062 <__mcmp+0x32>
 801705a:	bd30      	pop	{r4, r5, pc}
 801705c:	4294      	cmp	r4, r2
 801705e:	d3f3      	bcc.n	8017048 <__mcmp+0x18>
 8017060:	e7fb      	b.n	801705a <__mcmp+0x2a>
 8017062:	4240      	negs	r0, r0
 8017064:	e7f9      	b.n	801705a <__mcmp+0x2a>
	...

08017068 <__mdiff>:
 8017068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801706a:	000e      	movs	r6, r1
 801706c:	0007      	movs	r7, r0
 801706e:	0011      	movs	r1, r2
 8017070:	0030      	movs	r0, r6
 8017072:	b087      	sub	sp, #28
 8017074:	0014      	movs	r4, r2
 8017076:	f7ff ffdb 	bl	8017030 <__mcmp>
 801707a:	1e05      	subs	r5, r0, #0
 801707c:	d110      	bne.n	80170a0 <__mdiff+0x38>
 801707e:	0001      	movs	r1, r0
 8017080:	0038      	movs	r0, r7
 8017082:	f7ff fd03 	bl	8016a8c <_Balloc>
 8017086:	1e02      	subs	r2, r0, #0
 8017088:	d104      	bne.n	8017094 <__mdiff+0x2c>
 801708a:	4b40      	ldr	r3, [pc, #256]	; (801718c <__mdiff+0x124>)
 801708c:	4940      	ldr	r1, [pc, #256]	; (8017190 <__mdiff+0x128>)
 801708e:	4841      	ldr	r0, [pc, #260]	; (8017194 <__mdiff+0x12c>)
 8017090:	f7fe fa7a 	bl	8015588 <__assert_func>
 8017094:	2301      	movs	r3, #1
 8017096:	6145      	str	r5, [r0, #20]
 8017098:	6103      	str	r3, [r0, #16]
 801709a:	0010      	movs	r0, r2
 801709c:	b007      	add	sp, #28
 801709e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170a0:	2301      	movs	r3, #1
 80170a2:	9301      	str	r3, [sp, #4]
 80170a4:	2800      	cmp	r0, #0
 80170a6:	db04      	blt.n	80170b2 <__mdiff+0x4a>
 80170a8:	0023      	movs	r3, r4
 80170aa:	0034      	movs	r4, r6
 80170ac:	001e      	movs	r6, r3
 80170ae:	2300      	movs	r3, #0
 80170b0:	9301      	str	r3, [sp, #4]
 80170b2:	0038      	movs	r0, r7
 80170b4:	6861      	ldr	r1, [r4, #4]
 80170b6:	f7ff fce9 	bl	8016a8c <_Balloc>
 80170ba:	1e02      	subs	r2, r0, #0
 80170bc:	d103      	bne.n	80170c6 <__mdiff+0x5e>
 80170be:	2190      	movs	r1, #144	; 0x90
 80170c0:	4b32      	ldr	r3, [pc, #200]	; (801718c <__mdiff+0x124>)
 80170c2:	0089      	lsls	r1, r1, #2
 80170c4:	e7e3      	b.n	801708e <__mdiff+0x26>
 80170c6:	9b01      	ldr	r3, [sp, #4]
 80170c8:	2700      	movs	r7, #0
 80170ca:	60c3      	str	r3, [r0, #12]
 80170cc:	6920      	ldr	r0, [r4, #16]
 80170ce:	3414      	adds	r4, #20
 80170d0:	9401      	str	r4, [sp, #4]
 80170d2:	9b01      	ldr	r3, [sp, #4]
 80170d4:	0084      	lsls	r4, r0, #2
 80170d6:	191b      	adds	r3, r3, r4
 80170d8:	0034      	movs	r4, r6
 80170da:	9302      	str	r3, [sp, #8]
 80170dc:	6933      	ldr	r3, [r6, #16]
 80170de:	3414      	adds	r4, #20
 80170e0:	0099      	lsls	r1, r3, #2
 80170e2:	1863      	adds	r3, r4, r1
 80170e4:	9303      	str	r3, [sp, #12]
 80170e6:	0013      	movs	r3, r2
 80170e8:	3314      	adds	r3, #20
 80170ea:	469c      	mov	ip, r3
 80170ec:	9305      	str	r3, [sp, #20]
 80170ee:	9b01      	ldr	r3, [sp, #4]
 80170f0:	9304      	str	r3, [sp, #16]
 80170f2:	9b04      	ldr	r3, [sp, #16]
 80170f4:	cc02      	ldmia	r4!, {r1}
 80170f6:	cb20      	ldmia	r3!, {r5}
 80170f8:	9304      	str	r3, [sp, #16]
 80170fa:	b2ab      	uxth	r3, r5
 80170fc:	19df      	adds	r7, r3, r7
 80170fe:	b28b      	uxth	r3, r1
 8017100:	1afb      	subs	r3, r7, r3
 8017102:	0c2d      	lsrs	r5, r5, #16
 8017104:	0c09      	lsrs	r1, r1, #16
 8017106:	1a69      	subs	r1, r5, r1
 8017108:	141d      	asrs	r5, r3, #16
 801710a:	1949      	adds	r1, r1, r5
 801710c:	140f      	asrs	r7, r1, #16
 801710e:	b29b      	uxth	r3, r3
 8017110:	0409      	lsls	r1, r1, #16
 8017112:	430b      	orrs	r3, r1
 8017114:	4661      	mov	r1, ip
 8017116:	c108      	stmia	r1!, {r3}
 8017118:	9b03      	ldr	r3, [sp, #12]
 801711a:	468c      	mov	ip, r1
 801711c:	42a3      	cmp	r3, r4
 801711e:	d8e8      	bhi.n	80170f2 <__mdiff+0x8a>
 8017120:	0031      	movs	r1, r6
 8017122:	9c03      	ldr	r4, [sp, #12]
 8017124:	3115      	adds	r1, #21
 8017126:	2304      	movs	r3, #4
 8017128:	428c      	cmp	r4, r1
 801712a:	d304      	bcc.n	8017136 <__mdiff+0xce>
 801712c:	1ba3      	subs	r3, r4, r6
 801712e:	3b15      	subs	r3, #21
 8017130:	089b      	lsrs	r3, r3, #2
 8017132:	3301      	adds	r3, #1
 8017134:	009b      	lsls	r3, r3, #2
 8017136:	9901      	ldr	r1, [sp, #4]
 8017138:	18cc      	adds	r4, r1, r3
 801713a:	9905      	ldr	r1, [sp, #20]
 801713c:	0026      	movs	r6, r4
 801713e:	18cb      	adds	r3, r1, r3
 8017140:	469c      	mov	ip, r3
 8017142:	9902      	ldr	r1, [sp, #8]
 8017144:	428e      	cmp	r6, r1
 8017146:	d310      	bcc.n	801716a <__mdiff+0x102>
 8017148:	9e02      	ldr	r6, [sp, #8]
 801714a:	1ee5      	subs	r5, r4, #3
 801714c:	2100      	movs	r1, #0
 801714e:	42ae      	cmp	r6, r5
 8017150:	d304      	bcc.n	801715c <__mdiff+0xf4>
 8017152:	0031      	movs	r1, r6
 8017154:	3103      	adds	r1, #3
 8017156:	1b09      	subs	r1, r1, r4
 8017158:	0889      	lsrs	r1, r1, #2
 801715a:	0089      	lsls	r1, r1, #2
 801715c:	185b      	adds	r3, r3, r1
 801715e:	3b04      	subs	r3, #4
 8017160:	6819      	ldr	r1, [r3, #0]
 8017162:	2900      	cmp	r1, #0
 8017164:	d00f      	beq.n	8017186 <__mdiff+0x11e>
 8017166:	6110      	str	r0, [r2, #16]
 8017168:	e797      	b.n	801709a <__mdiff+0x32>
 801716a:	ce02      	ldmia	r6!, {r1}
 801716c:	b28d      	uxth	r5, r1
 801716e:	19ed      	adds	r5, r5, r7
 8017170:	0c0f      	lsrs	r7, r1, #16
 8017172:	1429      	asrs	r1, r5, #16
 8017174:	1879      	adds	r1, r7, r1
 8017176:	140f      	asrs	r7, r1, #16
 8017178:	b2ad      	uxth	r5, r5
 801717a:	0409      	lsls	r1, r1, #16
 801717c:	430d      	orrs	r5, r1
 801717e:	4661      	mov	r1, ip
 8017180:	c120      	stmia	r1!, {r5}
 8017182:	468c      	mov	ip, r1
 8017184:	e7dd      	b.n	8017142 <__mdiff+0xda>
 8017186:	3801      	subs	r0, #1
 8017188:	e7e9      	b.n	801715e <__mdiff+0xf6>
 801718a:	46c0      	nop			; (mov r8, r8)
 801718c:	0801ba29 	.word	0x0801ba29
 8017190:	00000232 	.word	0x00000232
 8017194:	0801bab8 	.word	0x0801bab8

08017198 <__ulp>:
 8017198:	4b0f      	ldr	r3, [pc, #60]	; (80171d8 <__ulp+0x40>)
 801719a:	4019      	ands	r1, r3
 801719c:	4b0f      	ldr	r3, [pc, #60]	; (80171dc <__ulp+0x44>)
 801719e:	18c9      	adds	r1, r1, r3
 80171a0:	2900      	cmp	r1, #0
 80171a2:	dd04      	ble.n	80171ae <__ulp+0x16>
 80171a4:	2200      	movs	r2, #0
 80171a6:	000b      	movs	r3, r1
 80171a8:	0010      	movs	r0, r2
 80171aa:	0019      	movs	r1, r3
 80171ac:	4770      	bx	lr
 80171ae:	4249      	negs	r1, r1
 80171b0:	2200      	movs	r2, #0
 80171b2:	2300      	movs	r3, #0
 80171b4:	1509      	asrs	r1, r1, #20
 80171b6:	2913      	cmp	r1, #19
 80171b8:	dc04      	bgt.n	80171c4 <__ulp+0x2c>
 80171ba:	2080      	movs	r0, #128	; 0x80
 80171bc:	0300      	lsls	r0, r0, #12
 80171be:	4108      	asrs	r0, r1
 80171c0:	0003      	movs	r3, r0
 80171c2:	e7f1      	b.n	80171a8 <__ulp+0x10>
 80171c4:	3914      	subs	r1, #20
 80171c6:	2001      	movs	r0, #1
 80171c8:	291e      	cmp	r1, #30
 80171ca:	dc02      	bgt.n	80171d2 <__ulp+0x3a>
 80171cc:	2080      	movs	r0, #128	; 0x80
 80171ce:	0600      	lsls	r0, r0, #24
 80171d0:	40c8      	lsrs	r0, r1
 80171d2:	0002      	movs	r2, r0
 80171d4:	e7e8      	b.n	80171a8 <__ulp+0x10>
 80171d6:	46c0      	nop			; (mov r8, r8)
 80171d8:	7ff00000 	.word	0x7ff00000
 80171dc:	fcc00000 	.word	0xfcc00000

080171e0 <__b2d>:
 80171e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80171e2:	0006      	movs	r6, r0
 80171e4:	6903      	ldr	r3, [r0, #16]
 80171e6:	3614      	adds	r6, #20
 80171e8:	009b      	lsls	r3, r3, #2
 80171ea:	18f3      	adds	r3, r6, r3
 80171ec:	1f1d      	subs	r5, r3, #4
 80171ee:	682c      	ldr	r4, [r5, #0]
 80171f0:	000f      	movs	r7, r1
 80171f2:	0020      	movs	r0, r4
 80171f4:	9301      	str	r3, [sp, #4]
 80171f6:	f7ff fd41 	bl	8016c7c <__hi0bits>
 80171fa:	2320      	movs	r3, #32
 80171fc:	1a1b      	subs	r3, r3, r0
 80171fe:	491f      	ldr	r1, [pc, #124]	; (801727c <__b2d+0x9c>)
 8017200:	603b      	str	r3, [r7, #0]
 8017202:	280a      	cmp	r0, #10
 8017204:	dc16      	bgt.n	8017234 <__b2d+0x54>
 8017206:	230b      	movs	r3, #11
 8017208:	0027      	movs	r7, r4
 801720a:	1a1b      	subs	r3, r3, r0
 801720c:	40df      	lsrs	r7, r3
 801720e:	4339      	orrs	r1, r7
 8017210:	469c      	mov	ip, r3
 8017212:	000b      	movs	r3, r1
 8017214:	2100      	movs	r1, #0
 8017216:	42ae      	cmp	r6, r5
 8017218:	d202      	bcs.n	8017220 <__b2d+0x40>
 801721a:	9901      	ldr	r1, [sp, #4]
 801721c:	3908      	subs	r1, #8
 801721e:	6809      	ldr	r1, [r1, #0]
 8017220:	3015      	adds	r0, #21
 8017222:	4084      	lsls	r4, r0
 8017224:	4660      	mov	r0, ip
 8017226:	40c1      	lsrs	r1, r0
 8017228:	430c      	orrs	r4, r1
 801722a:	0022      	movs	r2, r4
 801722c:	0010      	movs	r0, r2
 801722e:	0019      	movs	r1, r3
 8017230:	b003      	add	sp, #12
 8017232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017234:	2700      	movs	r7, #0
 8017236:	42ae      	cmp	r6, r5
 8017238:	d202      	bcs.n	8017240 <__b2d+0x60>
 801723a:	9d01      	ldr	r5, [sp, #4]
 801723c:	3d08      	subs	r5, #8
 801723e:	682f      	ldr	r7, [r5, #0]
 8017240:	230b      	movs	r3, #11
 8017242:	425b      	negs	r3, r3
 8017244:	469c      	mov	ip, r3
 8017246:	4484      	add	ip, r0
 8017248:	280b      	cmp	r0, #11
 801724a:	d013      	beq.n	8017274 <__b2d+0x94>
 801724c:	4663      	mov	r3, ip
 801724e:	2020      	movs	r0, #32
 8017250:	409c      	lsls	r4, r3
 8017252:	1ac0      	subs	r0, r0, r3
 8017254:	003b      	movs	r3, r7
 8017256:	40c3      	lsrs	r3, r0
 8017258:	431c      	orrs	r4, r3
 801725a:	4321      	orrs	r1, r4
 801725c:	000b      	movs	r3, r1
 801725e:	2100      	movs	r1, #0
 8017260:	42b5      	cmp	r5, r6
 8017262:	d901      	bls.n	8017268 <__b2d+0x88>
 8017264:	3d04      	subs	r5, #4
 8017266:	6829      	ldr	r1, [r5, #0]
 8017268:	4664      	mov	r4, ip
 801726a:	40c1      	lsrs	r1, r0
 801726c:	40a7      	lsls	r7, r4
 801726e:	430f      	orrs	r7, r1
 8017270:	003a      	movs	r2, r7
 8017272:	e7db      	b.n	801722c <__b2d+0x4c>
 8017274:	4321      	orrs	r1, r4
 8017276:	000b      	movs	r3, r1
 8017278:	e7fa      	b.n	8017270 <__b2d+0x90>
 801727a:	46c0      	nop			; (mov r8, r8)
 801727c:	3ff00000 	.word	0x3ff00000

08017280 <__d2b>:
 8017280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017282:	2101      	movs	r1, #1
 8017284:	0014      	movs	r4, r2
 8017286:	001e      	movs	r6, r3
 8017288:	9f08      	ldr	r7, [sp, #32]
 801728a:	f7ff fbff 	bl	8016a8c <_Balloc>
 801728e:	1e05      	subs	r5, r0, #0
 8017290:	d105      	bne.n	801729e <__d2b+0x1e>
 8017292:	0002      	movs	r2, r0
 8017294:	4b26      	ldr	r3, [pc, #152]	; (8017330 <__d2b+0xb0>)
 8017296:	4927      	ldr	r1, [pc, #156]	; (8017334 <__d2b+0xb4>)
 8017298:	4827      	ldr	r0, [pc, #156]	; (8017338 <__d2b+0xb8>)
 801729a:	f7fe f975 	bl	8015588 <__assert_func>
 801729e:	0333      	lsls	r3, r6, #12
 80172a0:	0076      	lsls	r6, r6, #1
 80172a2:	0b1b      	lsrs	r3, r3, #12
 80172a4:	0d76      	lsrs	r6, r6, #21
 80172a6:	d124      	bne.n	80172f2 <__d2b+0x72>
 80172a8:	9301      	str	r3, [sp, #4]
 80172aa:	2c00      	cmp	r4, #0
 80172ac:	d027      	beq.n	80172fe <__d2b+0x7e>
 80172ae:	4668      	mov	r0, sp
 80172b0:	9400      	str	r4, [sp, #0]
 80172b2:	f7ff fcfd 	bl	8016cb0 <__lo0bits>
 80172b6:	9c00      	ldr	r4, [sp, #0]
 80172b8:	2800      	cmp	r0, #0
 80172ba:	d01e      	beq.n	80172fa <__d2b+0x7a>
 80172bc:	9b01      	ldr	r3, [sp, #4]
 80172be:	2120      	movs	r1, #32
 80172c0:	001a      	movs	r2, r3
 80172c2:	1a09      	subs	r1, r1, r0
 80172c4:	408a      	lsls	r2, r1
 80172c6:	40c3      	lsrs	r3, r0
 80172c8:	4322      	orrs	r2, r4
 80172ca:	616a      	str	r2, [r5, #20]
 80172cc:	9301      	str	r3, [sp, #4]
 80172ce:	9c01      	ldr	r4, [sp, #4]
 80172d0:	61ac      	str	r4, [r5, #24]
 80172d2:	1e63      	subs	r3, r4, #1
 80172d4:	419c      	sbcs	r4, r3
 80172d6:	3401      	adds	r4, #1
 80172d8:	612c      	str	r4, [r5, #16]
 80172da:	2e00      	cmp	r6, #0
 80172dc:	d018      	beq.n	8017310 <__d2b+0x90>
 80172de:	4b17      	ldr	r3, [pc, #92]	; (801733c <__d2b+0xbc>)
 80172e0:	18f6      	adds	r6, r6, r3
 80172e2:	2335      	movs	r3, #53	; 0x35
 80172e4:	1836      	adds	r6, r6, r0
 80172e6:	1a18      	subs	r0, r3, r0
 80172e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172ea:	603e      	str	r6, [r7, #0]
 80172ec:	6018      	str	r0, [r3, #0]
 80172ee:	0028      	movs	r0, r5
 80172f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80172f2:	2280      	movs	r2, #128	; 0x80
 80172f4:	0352      	lsls	r2, r2, #13
 80172f6:	4313      	orrs	r3, r2
 80172f8:	e7d6      	b.n	80172a8 <__d2b+0x28>
 80172fa:	616c      	str	r4, [r5, #20]
 80172fc:	e7e7      	b.n	80172ce <__d2b+0x4e>
 80172fe:	a801      	add	r0, sp, #4
 8017300:	f7ff fcd6 	bl	8016cb0 <__lo0bits>
 8017304:	2401      	movs	r4, #1
 8017306:	9b01      	ldr	r3, [sp, #4]
 8017308:	612c      	str	r4, [r5, #16]
 801730a:	616b      	str	r3, [r5, #20]
 801730c:	3020      	adds	r0, #32
 801730e:	e7e4      	b.n	80172da <__d2b+0x5a>
 8017310:	4b0b      	ldr	r3, [pc, #44]	; (8017340 <__d2b+0xc0>)
 8017312:	18c0      	adds	r0, r0, r3
 8017314:	4b0b      	ldr	r3, [pc, #44]	; (8017344 <__d2b+0xc4>)
 8017316:	6038      	str	r0, [r7, #0]
 8017318:	18e3      	adds	r3, r4, r3
 801731a:	009b      	lsls	r3, r3, #2
 801731c:	18eb      	adds	r3, r5, r3
 801731e:	6958      	ldr	r0, [r3, #20]
 8017320:	f7ff fcac 	bl	8016c7c <__hi0bits>
 8017324:	0164      	lsls	r4, r4, #5
 8017326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017328:	1a24      	subs	r4, r4, r0
 801732a:	601c      	str	r4, [r3, #0]
 801732c:	e7df      	b.n	80172ee <__d2b+0x6e>
 801732e:	46c0      	nop			; (mov r8, r8)
 8017330:	0801ba29 	.word	0x0801ba29
 8017334:	0000030a 	.word	0x0000030a
 8017338:	0801bab8 	.word	0x0801bab8
 801733c:	fffffbcd 	.word	0xfffffbcd
 8017340:	fffffbce 	.word	0xfffffbce
 8017344:	3fffffff 	.word	0x3fffffff

08017348 <__ratio>:
 8017348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801734a:	b085      	sub	sp, #20
 801734c:	000d      	movs	r5, r1
 801734e:	a902      	add	r1, sp, #8
 8017350:	0004      	movs	r4, r0
 8017352:	f7ff ff45 	bl	80171e0 <__b2d>
 8017356:	9000      	str	r0, [sp, #0]
 8017358:	9101      	str	r1, [sp, #4]
 801735a:	9e00      	ldr	r6, [sp, #0]
 801735c:	9f01      	ldr	r7, [sp, #4]
 801735e:	0028      	movs	r0, r5
 8017360:	a903      	add	r1, sp, #12
 8017362:	f7ff ff3d 	bl	80171e0 <__b2d>
 8017366:	6924      	ldr	r4, [r4, #16]
 8017368:	692d      	ldr	r5, [r5, #16]
 801736a:	0002      	movs	r2, r0
 801736c:	1b65      	subs	r5, r4, r5
 801736e:	016c      	lsls	r4, r5, #5
 8017370:	46a4      	mov	ip, r4
 8017372:	9d03      	ldr	r5, [sp, #12]
 8017374:	9c02      	ldr	r4, [sp, #8]
 8017376:	000b      	movs	r3, r1
 8017378:	1b64      	subs	r4, r4, r5
 801737a:	4464      	add	r4, ip
 801737c:	0525      	lsls	r5, r4, #20
 801737e:	2c00      	cmp	r4, #0
 8017380:	dd07      	ble.n	8017392 <__ratio+0x4a>
 8017382:	9901      	ldr	r1, [sp, #4]
 8017384:	186f      	adds	r7, r5, r1
 8017386:	0030      	movs	r0, r6
 8017388:	0039      	movs	r1, r7
 801738a:	f7e9 fdd5 	bl	8000f38 <__aeabi_ddiv>
 801738e:	b005      	add	sp, #20
 8017390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017392:	1b4b      	subs	r3, r1, r5
 8017394:	e7f7      	b.n	8017386 <__ratio+0x3e>

08017396 <__copybits>:
 8017396:	b570      	push	{r4, r5, r6, lr}
 8017398:	0015      	movs	r5, r2
 801739a:	6913      	ldr	r3, [r2, #16]
 801739c:	3514      	adds	r5, #20
 801739e:	009c      	lsls	r4, r3, #2
 80173a0:	0006      	movs	r6, r0
 80173a2:	002b      	movs	r3, r5
 80173a4:	3901      	subs	r1, #1
 80173a6:	1149      	asrs	r1, r1, #5
 80173a8:	3101      	adds	r1, #1
 80173aa:	0089      	lsls	r1, r1, #2
 80173ac:	1841      	adds	r1, r0, r1
 80173ae:	192c      	adds	r4, r5, r4
 80173b0:	429c      	cmp	r4, r3
 80173b2:	d80d      	bhi.n	80173d0 <__copybits+0x3a>
 80173b4:	0015      	movs	r5, r2
 80173b6:	3511      	adds	r5, #17
 80173b8:	2300      	movs	r3, #0
 80173ba:	42a5      	cmp	r5, r4
 80173bc:	d803      	bhi.n	80173c6 <__copybits+0x30>
 80173be:	1aa3      	subs	r3, r4, r2
 80173c0:	3b11      	subs	r3, #17
 80173c2:	089b      	lsrs	r3, r3, #2
 80173c4:	009b      	lsls	r3, r3, #2
 80173c6:	18c0      	adds	r0, r0, r3
 80173c8:	2300      	movs	r3, #0
 80173ca:	4281      	cmp	r1, r0
 80173cc:	d803      	bhi.n	80173d6 <__copybits+0x40>
 80173ce:	bd70      	pop	{r4, r5, r6, pc}
 80173d0:	cb20      	ldmia	r3!, {r5}
 80173d2:	c620      	stmia	r6!, {r5}
 80173d4:	e7ec      	b.n	80173b0 <__copybits+0x1a>
 80173d6:	c008      	stmia	r0!, {r3}
 80173d8:	e7f7      	b.n	80173ca <__copybits+0x34>

080173da <__any_on>:
 80173da:	0002      	movs	r2, r0
 80173dc:	6900      	ldr	r0, [r0, #16]
 80173de:	b510      	push	{r4, lr}
 80173e0:	3214      	adds	r2, #20
 80173e2:	114b      	asrs	r3, r1, #5
 80173e4:	4298      	cmp	r0, r3
 80173e6:	db13      	blt.n	8017410 <__any_on+0x36>
 80173e8:	dd0c      	ble.n	8017404 <__any_on+0x2a>
 80173ea:	241f      	movs	r4, #31
 80173ec:	0008      	movs	r0, r1
 80173ee:	4020      	ands	r0, r4
 80173f0:	4221      	tst	r1, r4
 80173f2:	d007      	beq.n	8017404 <__any_on+0x2a>
 80173f4:	0099      	lsls	r1, r3, #2
 80173f6:	588c      	ldr	r4, [r1, r2]
 80173f8:	0021      	movs	r1, r4
 80173fa:	40c1      	lsrs	r1, r0
 80173fc:	4081      	lsls	r1, r0
 80173fe:	2001      	movs	r0, #1
 8017400:	428c      	cmp	r4, r1
 8017402:	d104      	bne.n	801740e <__any_on+0x34>
 8017404:	009b      	lsls	r3, r3, #2
 8017406:	18d3      	adds	r3, r2, r3
 8017408:	4293      	cmp	r3, r2
 801740a:	d803      	bhi.n	8017414 <__any_on+0x3a>
 801740c:	2000      	movs	r0, #0
 801740e:	bd10      	pop	{r4, pc}
 8017410:	0003      	movs	r3, r0
 8017412:	e7f7      	b.n	8017404 <__any_on+0x2a>
 8017414:	3b04      	subs	r3, #4
 8017416:	6819      	ldr	r1, [r3, #0]
 8017418:	2900      	cmp	r1, #0
 801741a:	d0f5      	beq.n	8017408 <__any_on+0x2e>
 801741c:	2001      	movs	r0, #1
 801741e:	e7f6      	b.n	801740e <__any_on+0x34>

08017420 <_calloc_r>:
 8017420:	434a      	muls	r2, r1
 8017422:	b570      	push	{r4, r5, r6, lr}
 8017424:	0011      	movs	r1, r2
 8017426:	0015      	movs	r5, r2
 8017428:	f7fc f9b4 	bl	8013794 <_malloc_r>
 801742c:	1e04      	subs	r4, r0, #0
 801742e:	d003      	beq.n	8017438 <_calloc_r+0x18>
 8017430:	002a      	movs	r2, r5
 8017432:	2100      	movs	r1, #0
 8017434:	f7fc f95b 	bl	80136ee <memset>
 8017438:	0020      	movs	r0, r4
 801743a:	bd70      	pop	{r4, r5, r6, pc}

0801743c <_realloc_r>:
 801743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801743e:	0007      	movs	r7, r0
 8017440:	000d      	movs	r5, r1
 8017442:	0016      	movs	r6, r2
 8017444:	2900      	cmp	r1, #0
 8017446:	d105      	bne.n	8017454 <_realloc_r+0x18>
 8017448:	0011      	movs	r1, r2
 801744a:	f7fc f9a3 	bl	8013794 <_malloc_r>
 801744e:	0004      	movs	r4, r0
 8017450:	0020      	movs	r0, r4
 8017452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017454:	2a00      	cmp	r2, #0
 8017456:	d103      	bne.n	8017460 <_realloc_r+0x24>
 8017458:	f7fc f952 	bl	8013700 <_free_r>
 801745c:	0034      	movs	r4, r6
 801745e:	e7f7      	b.n	8017450 <_realloc_r+0x14>
 8017460:	f000 fe11 	bl	8018086 <_malloc_usable_size_r>
 8017464:	002c      	movs	r4, r5
 8017466:	42b0      	cmp	r0, r6
 8017468:	d2f2      	bcs.n	8017450 <_realloc_r+0x14>
 801746a:	0031      	movs	r1, r6
 801746c:	0038      	movs	r0, r7
 801746e:	f7fc f991 	bl	8013794 <_malloc_r>
 8017472:	1e04      	subs	r4, r0, #0
 8017474:	d0ec      	beq.n	8017450 <_realloc_r+0x14>
 8017476:	0029      	movs	r1, r5
 8017478:	0032      	movs	r2, r6
 801747a:	f7fc f92f 	bl	80136dc <memcpy>
 801747e:	0029      	movs	r1, r5
 8017480:	0038      	movs	r0, r7
 8017482:	f7fc f93d 	bl	8013700 <_free_r>
 8017486:	e7e3      	b.n	8017450 <_realloc_r+0x14>

08017488 <__ssputs_r>:
 8017488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801748a:	688e      	ldr	r6, [r1, #8]
 801748c:	b085      	sub	sp, #20
 801748e:	0007      	movs	r7, r0
 8017490:	000c      	movs	r4, r1
 8017492:	9203      	str	r2, [sp, #12]
 8017494:	9301      	str	r3, [sp, #4]
 8017496:	429e      	cmp	r6, r3
 8017498:	d83c      	bhi.n	8017514 <__ssputs_r+0x8c>
 801749a:	2390      	movs	r3, #144	; 0x90
 801749c:	898a      	ldrh	r2, [r1, #12]
 801749e:	00db      	lsls	r3, r3, #3
 80174a0:	421a      	tst	r2, r3
 80174a2:	d034      	beq.n	801750e <__ssputs_r+0x86>
 80174a4:	2503      	movs	r5, #3
 80174a6:	6909      	ldr	r1, [r1, #16]
 80174a8:	6823      	ldr	r3, [r4, #0]
 80174aa:	1a5b      	subs	r3, r3, r1
 80174ac:	9302      	str	r3, [sp, #8]
 80174ae:	6963      	ldr	r3, [r4, #20]
 80174b0:	9802      	ldr	r0, [sp, #8]
 80174b2:	435d      	muls	r5, r3
 80174b4:	0feb      	lsrs	r3, r5, #31
 80174b6:	195d      	adds	r5, r3, r5
 80174b8:	9b01      	ldr	r3, [sp, #4]
 80174ba:	106d      	asrs	r5, r5, #1
 80174bc:	3301      	adds	r3, #1
 80174be:	181b      	adds	r3, r3, r0
 80174c0:	42ab      	cmp	r3, r5
 80174c2:	d900      	bls.n	80174c6 <__ssputs_r+0x3e>
 80174c4:	001d      	movs	r5, r3
 80174c6:	0553      	lsls	r3, r2, #21
 80174c8:	d532      	bpl.n	8017530 <__ssputs_r+0xa8>
 80174ca:	0029      	movs	r1, r5
 80174cc:	0038      	movs	r0, r7
 80174ce:	f7fc f961 	bl	8013794 <_malloc_r>
 80174d2:	1e06      	subs	r6, r0, #0
 80174d4:	d109      	bne.n	80174ea <__ssputs_r+0x62>
 80174d6:	230c      	movs	r3, #12
 80174d8:	603b      	str	r3, [r7, #0]
 80174da:	2340      	movs	r3, #64	; 0x40
 80174dc:	2001      	movs	r0, #1
 80174de:	89a2      	ldrh	r2, [r4, #12]
 80174e0:	4240      	negs	r0, r0
 80174e2:	4313      	orrs	r3, r2
 80174e4:	81a3      	strh	r3, [r4, #12]
 80174e6:	b005      	add	sp, #20
 80174e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174ea:	9a02      	ldr	r2, [sp, #8]
 80174ec:	6921      	ldr	r1, [r4, #16]
 80174ee:	f7fc f8f5 	bl	80136dc <memcpy>
 80174f2:	89a3      	ldrh	r3, [r4, #12]
 80174f4:	4a14      	ldr	r2, [pc, #80]	; (8017548 <__ssputs_r+0xc0>)
 80174f6:	401a      	ands	r2, r3
 80174f8:	2380      	movs	r3, #128	; 0x80
 80174fa:	4313      	orrs	r3, r2
 80174fc:	81a3      	strh	r3, [r4, #12]
 80174fe:	9b02      	ldr	r3, [sp, #8]
 8017500:	6126      	str	r6, [r4, #16]
 8017502:	18f6      	adds	r6, r6, r3
 8017504:	6026      	str	r6, [r4, #0]
 8017506:	6165      	str	r5, [r4, #20]
 8017508:	9e01      	ldr	r6, [sp, #4]
 801750a:	1aed      	subs	r5, r5, r3
 801750c:	60a5      	str	r5, [r4, #8]
 801750e:	9b01      	ldr	r3, [sp, #4]
 8017510:	429e      	cmp	r6, r3
 8017512:	d900      	bls.n	8017516 <__ssputs_r+0x8e>
 8017514:	9e01      	ldr	r6, [sp, #4]
 8017516:	0032      	movs	r2, r6
 8017518:	9903      	ldr	r1, [sp, #12]
 801751a:	6820      	ldr	r0, [r4, #0]
 801751c:	f000 fda0 	bl	8018060 <memmove>
 8017520:	68a3      	ldr	r3, [r4, #8]
 8017522:	2000      	movs	r0, #0
 8017524:	1b9b      	subs	r3, r3, r6
 8017526:	60a3      	str	r3, [r4, #8]
 8017528:	6823      	ldr	r3, [r4, #0]
 801752a:	199e      	adds	r6, r3, r6
 801752c:	6026      	str	r6, [r4, #0]
 801752e:	e7da      	b.n	80174e6 <__ssputs_r+0x5e>
 8017530:	002a      	movs	r2, r5
 8017532:	0038      	movs	r0, r7
 8017534:	f7ff ff82 	bl	801743c <_realloc_r>
 8017538:	1e06      	subs	r6, r0, #0
 801753a:	d1e0      	bne.n	80174fe <__ssputs_r+0x76>
 801753c:	0038      	movs	r0, r7
 801753e:	6921      	ldr	r1, [r4, #16]
 8017540:	f7fc f8de 	bl	8013700 <_free_r>
 8017544:	e7c7      	b.n	80174d6 <__ssputs_r+0x4e>
 8017546:	46c0      	nop			; (mov r8, r8)
 8017548:	fffffb7f 	.word	0xfffffb7f

0801754c <_svfiprintf_r>:
 801754c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801754e:	b0a1      	sub	sp, #132	; 0x84
 8017550:	9003      	str	r0, [sp, #12]
 8017552:	001d      	movs	r5, r3
 8017554:	898b      	ldrh	r3, [r1, #12]
 8017556:	000f      	movs	r7, r1
 8017558:	0016      	movs	r6, r2
 801755a:	061b      	lsls	r3, r3, #24
 801755c:	d511      	bpl.n	8017582 <_svfiprintf_r+0x36>
 801755e:	690b      	ldr	r3, [r1, #16]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d10e      	bne.n	8017582 <_svfiprintf_r+0x36>
 8017564:	2140      	movs	r1, #64	; 0x40
 8017566:	f7fc f915 	bl	8013794 <_malloc_r>
 801756a:	6038      	str	r0, [r7, #0]
 801756c:	6138      	str	r0, [r7, #16]
 801756e:	2800      	cmp	r0, #0
 8017570:	d105      	bne.n	801757e <_svfiprintf_r+0x32>
 8017572:	230c      	movs	r3, #12
 8017574:	9a03      	ldr	r2, [sp, #12]
 8017576:	3801      	subs	r0, #1
 8017578:	6013      	str	r3, [r2, #0]
 801757a:	b021      	add	sp, #132	; 0x84
 801757c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801757e:	2340      	movs	r3, #64	; 0x40
 8017580:	617b      	str	r3, [r7, #20]
 8017582:	2300      	movs	r3, #0
 8017584:	ac08      	add	r4, sp, #32
 8017586:	6163      	str	r3, [r4, #20]
 8017588:	3320      	adds	r3, #32
 801758a:	7663      	strb	r3, [r4, #25]
 801758c:	3310      	adds	r3, #16
 801758e:	76a3      	strb	r3, [r4, #26]
 8017590:	9507      	str	r5, [sp, #28]
 8017592:	0035      	movs	r5, r6
 8017594:	782b      	ldrb	r3, [r5, #0]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d001      	beq.n	801759e <_svfiprintf_r+0x52>
 801759a:	2b25      	cmp	r3, #37	; 0x25
 801759c:	d147      	bne.n	801762e <_svfiprintf_r+0xe2>
 801759e:	1bab      	subs	r3, r5, r6
 80175a0:	9305      	str	r3, [sp, #20]
 80175a2:	42b5      	cmp	r5, r6
 80175a4:	d00c      	beq.n	80175c0 <_svfiprintf_r+0x74>
 80175a6:	0032      	movs	r2, r6
 80175a8:	0039      	movs	r1, r7
 80175aa:	9803      	ldr	r0, [sp, #12]
 80175ac:	f7ff ff6c 	bl	8017488 <__ssputs_r>
 80175b0:	1c43      	adds	r3, r0, #1
 80175b2:	d100      	bne.n	80175b6 <_svfiprintf_r+0x6a>
 80175b4:	e0ae      	b.n	8017714 <_svfiprintf_r+0x1c8>
 80175b6:	6962      	ldr	r2, [r4, #20]
 80175b8:	9b05      	ldr	r3, [sp, #20]
 80175ba:	4694      	mov	ip, r2
 80175bc:	4463      	add	r3, ip
 80175be:	6163      	str	r3, [r4, #20]
 80175c0:	782b      	ldrb	r3, [r5, #0]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d100      	bne.n	80175c8 <_svfiprintf_r+0x7c>
 80175c6:	e0a5      	b.n	8017714 <_svfiprintf_r+0x1c8>
 80175c8:	2201      	movs	r2, #1
 80175ca:	2300      	movs	r3, #0
 80175cc:	4252      	negs	r2, r2
 80175ce:	6062      	str	r2, [r4, #4]
 80175d0:	a904      	add	r1, sp, #16
 80175d2:	3254      	adds	r2, #84	; 0x54
 80175d4:	1852      	adds	r2, r2, r1
 80175d6:	1c6e      	adds	r6, r5, #1
 80175d8:	6023      	str	r3, [r4, #0]
 80175da:	60e3      	str	r3, [r4, #12]
 80175dc:	60a3      	str	r3, [r4, #8]
 80175de:	7013      	strb	r3, [r2, #0]
 80175e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80175e2:	2205      	movs	r2, #5
 80175e4:	7831      	ldrb	r1, [r6, #0]
 80175e6:	4854      	ldr	r0, [pc, #336]	; (8017738 <_svfiprintf_r+0x1ec>)
 80175e8:	f7ff fa34 	bl	8016a54 <memchr>
 80175ec:	1c75      	adds	r5, r6, #1
 80175ee:	2800      	cmp	r0, #0
 80175f0:	d11f      	bne.n	8017632 <_svfiprintf_r+0xe6>
 80175f2:	6822      	ldr	r2, [r4, #0]
 80175f4:	06d3      	lsls	r3, r2, #27
 80175f6:	d504      	bpl.n	8017602 <_svfiprintf_r+0xb6>
 80175f8:	2353      	movs	r3, #83	; 0x53
 80175fa:	a904      	add	r1, sp, #16
 80175fc:	185b      	adds	r3, r3, r1
 80175fe:	2120      	movs	r1, #32
 8017600:	7019      	strb	r1, [r3, #0]
 8017602:	0713      	lsls	r3, r2, #28
 8017604:	d504      	bpl.n	8017610 <_svfiprintf_r+0xc4>
 8017606:	2353      	movs	r3, #83	; 0x53
 8017608:	a904      	add	r1, sp, #16
 801760a:	185b      	adds	r3, r3, r1
 801760c:	212b      	movs	r1, #43	; 0x2b
 801760e:	7019      	strb	r1, [r3, #0]
 8017610:	7833      	ldrb	r3, [r6, #0]
 8017612:	2b2a      	cmp	r3, #42	; 0x2a
 8017614:	d016      	beq.n	8017644 <_svfiprintf_r+0xf8>
 8017616:	0035      	movs	r5, r6
 8017618:	2100      	movs	r1, #0
 801761a:	200a      	movs	r0, #10
 801761c:	68e3      	ldr	r3, [r4, #12]
 801761e:	782a      	ldrb	r2, [r5, #0]
 8017620:	1c6e      	adds	r6, r5, #1
 8017622:	3a30      	subs	r2, #48	; 0x30
 8017624:	2a09      	cmp	r2, #9
 8017626:	d94e      	bls.n	80176c6 <_svfiprintf_r+0x17a>
 8017628:	2900      	cmp	r1, #0
 801762a:	d111      	bne.n	8017650 <_svfiprintf_r+0x104>
 801762c:	e017      	b.n	801765e <_svfiprintf_r+0x112>
 801762e:	3501      	adds	r5, #1
 8017630:	e7b0      	b.n	8017594 <_svfiprintf_r+0x48>
 8017632:	4b41      	ldr	r3, [pc, #260]	; (8017738 <_svfiprintf_r+0x1ec>)
 8017634:	6822      	ldr	r2, [r4, #0]
 8017636:	1ac0      	subs	r0, r0, r3
 8017638:	2301      	movs	r3, #1
 801763a:	4083      	lsls	r3, r0
 801763c:	4313      	orrs	r3, r2
 801763e:	002e      	movs	r6, r5
 8017640:	6023      	str	r3, [r4, #0]
 8017642:	e7ce      	b.n	80175e2 <_svfiprintf_r+0x96>
 8017644:	9b07      	ldr	r3, [sp, #28]
 8017646:	1d19      	adds	r1, r3, #4
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	9107      	str	r1, [sp, #28]
 801764c:	2b00      	cmp	r3, #0
 801764e:	db01      	blt.n	8017654 <_svfiprintf_r+0x108>
 8017650:	930b      	str	r3, [sp, #44]	; 0x2c
 8017652:	e004      	b.n	801765e <_svfiprintf_r+0x112>
 8017654:	425b      	negs	r3, r3
 8017656:	60e3      	str	r3, [r4, #12]
 8017658:	2302      	movs	r3, #2
 801765a:	4313      	orrs	r3, r2
 801765c:	6023      	str	r3, [r4, #0]
 801765e:	782b      	ldrb	r3, [r5, #0]
 8017660:	2b2e      	cmp	r3, #46	; 0x2e
 8017662:	d10a      	bne.n	801767a <_svfiprintf_r+0x12e>
 8017664:	786b      	ldrb	r3, [r5, #1]
 8017666:	2b2a      	cmp	r3, #42	; 0x2a
 8017668:	d135      	bne.n	80176d6 <_svfiprintf_r+0x18a>
 801766a:	9b07      	ldr	r3, [sp, #28]
 801766c:	3502      	adds	r5, #2
 801766e:	1d1a      	adds	r2, r3, #4
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	9207      	str	r2, [sp, #28]
 8017674:	2b00      	cmp	r3, #0
 8017676:	db2b      	blt.n	80176d0 <_svfiprintf_r+0x184>
 8017678:	9309      	str	r3, [sp, #36]	; 0x24
 801767a:	4e30      	ldr	r6, [pc, #192]	; (801773c <_svfiprintf_r+0x1f0>)
 801767c:	2203      	movs	r2, #3
 801767e:	0030      	movs	r0, r6
 8017680:	7829      	ldrb	r1, [r5, #0]
 8017682:	f7ff f9e7 	bl	8016a54 <memchr>
 8017686:	2800      	cmp	r0, #0
 8017688:	d006      	beq.n	8017698 <_svfiprintf_r+0x14c>
 801768a:	2340      	movs	r3, #64	; 0x40
 801768c:	1b80      	subs	r0, r0, r6
 801768e:	4083      	lsls	r3, r0
 8017690:	6822      	ldr	r2, [r4, #0]
 8017692:	3501      	adds	r5, #1
 8017694:	4313      	orrs	r3, r2
 8017696:	6023      	str	r3, [r4, #0]
 8017698:	7829      	ldrb	r1, [r5, #0]
 801769a:	2206      	movs	r2, #6
 801769c:	4828      	ldr	r0, [pc, #160]	; (8017740 <_svfiprintf_r+0x1f4>)
 801769e:	1c6e      	adds	r6, r5, #1
 80176a0:	7621      	strb	r1, [r4, #24]
 80176a2:	f7ff f9d7 	bl	8016a54 <memchr>
 80176a6:	2800      	cmp	r0, #0
 80176a8:	d03c      	beq.n	8017724 <_svfiprintf_r+0x1d8>
 80176aa:	4b26      	ldr	r3, [pc, #152]	; (8017744 <_svfiprintf_r+0x1f8>)
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d125      	bne.n	80176fc <_svfiprintf_r+0x1b0>
 80176b0:	2207      	movs	r2, #7
 80176b2:	9b07      	ldr	r3, [sp, #28]
 80176b4:	3307      	adds	r3, #7
 80176b6:	4393      	bics	r3, r2
 80176b8:	3308      	adds	r3, #8
 80176ba:	9307      	str	r3, [sp, #28]
 80176bc:	6963      	ldr	r3, [r4, #20]
 80176be:	9a04      	ldr	r2, [sp, #16]
 80176c0:	189b      	adds	r3, r3, r2
 80176c2:	6163      	str	r3, [r4, #20]
 80176c4:	e765      	b.n	8017592 <_svfiprintf_r+0x46>
 80176c6:	4343      	muls	r3, r0
 80176c8:	0035      	movs	r5, r6
 80176ca:	2101      	movs	r1, #1
 80176cc:	189b      	adds	r3, r3, r2
 80176ce:	e7a6      	b.n	801761e <_svfiprintf_r+0xd2>
 80176d0:	2301      	movs	r3, #1
 80176d2:	425b      	negs	r3, r3
 80176d4:	e7d0      	b.n	8017678 <_svfiprintf_r+0x12c>
 80176d6:	2300      	movs	r3, #0
 80176d8:	200a      	movs	r0, #10
 80176da:	001a      	movs	r2, r3
 80176dc:	3501      	adds	r5, #1
 80176de:	6063      	str	r3, [r4, #4]
 80176e0:	7829      	ldrb	r1, [r5, #0]
 80176e2:	1c6e      	adds	r6, r5, #1
 80176e4:	3930      	subs	r1, #48	; 0x30
 80176e6:	2909      	cmp	r1, #9
 80176e8:	d903      	bls.n	80176f2 <_svfiprintf_r+0x1a6>
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d0c5      	beq.n	801767a <_svfiprintf_r+0x12e>
 80176ee:	9209      	str	r2, [sp, #36]	; 0x24
 80176f0:	e7c3      	b.n	801767a <_svfiprintf_r+0x12e>
 80176f2:	4342      	muls	r2, r0
 80176f4:	0035      	movs	r5, r6
 80176f6:	2301      	movs	r3, #1
 80176f8:	1852      	adds	r2, r2, r1
 80176fa:	e7f1      	b.n	80176e0 <_svfiprintf_r+0x194>
 80176fc:	ab07      	add	r3, sp, #28
 80176fe:	9300      	str	r3, [sp, #0]
 8017700:	003a      	movs	r2, r7
 8017702:	0021      	movs	r1, r4
 8017704:	4b10      	ldr	r3, [pc, #64]	; (8017748 <_svfiprintf_r+0x1fc>)
 8017706:	9803      	ldr	r0, [sp, #12]
 8017708:	f7fc f94c 	bl	80139a4 <_printf_float>
 801770c:	9004      	str	r0, [sp, #16]
 801770e:	9b04      	ldr	r3, [sp, #16]
 8017710:	3301      	adds	r3, #1
 8017712:	d1d3      	bne.n	80176bc <_svfiprintf_r+0x170>
 8017714:	89bb      	ldrh	r3, [r7, #12]
 8017716:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017718:	065b      	lsls	r3, r3, #25
 801771a:	d400      	bmi.n	801771e <_svfiprintf_r+0x1d2>
 801771c:	e72d      	b.n	801757a <_svfiprintf_r+0x2e>
 801771e:	2001      	movs	r0, #1
 8017720:	4240      	negs	r0, r0
 8017722:	e72a      	b.n	801757a <_svfiprintf_r+0x2e>
 8017724:	ab07      	add	r3, sp, #28
 8017726:	9300      	str	r3, [sp, #0]
 8017728:	003a      	movs	r2, r7
 801772a:	0021      	movs	r1, r4
 801772c:	4b06      	ldr	r3, [pc, #24]	; (8017748 <_svfiprintf_r+0x1fc>)
 801772e:	9803      	ldr	r0, [sp, #12]
 8017730:	f7fc fbf6 	bl	8013f20 <_printf_i>
 8017734:	e7ea      	b.n	801770c <_svfiprintf_r+0x1c0>
 8017736:	46c0      	nop			; (mov r8, r8)
 8017738:	0801bc14 	.word	0x0801bc14
 801773c:	0801bc1a 	.word	0x0801bc1a
 8017740:	0801bc1e 	.word	0x0801bc1e
 8017744:	080139a5 	.word	0x080139a5
 8017748:	08017489 	.word	0x08017489

0801774c <__sfputc_r>:
 801774c:	6893      	ldr	r3, [r2, #8]
 801774e:	b510      	push	{r4, lr}
 8017750:	3b01      	subs	r3, #1
 8017752:	6093      	str	r3, [r2, #8]
 8017754:	2b00      	cmp	r3, #0
 8017756:	da04      	bge.n	8017762 <__sfputc_r+0x16>
 8017758:	6994      	ldr	r4, [r2, #24]
 801775a:	42a3      	cmp	r3, r4
 801775c:	db07      	blt.n	801776e <__sfputc_r+0x22>
 801775e:	290a      	cmp	r1, #10
 8017760:	d005      	beq.n	801776e <__sfputc_r+0x22>
 8017762:	6813      	ldr	r3, [r2, #0]
 8017764:	1c58      	adds	r0, r3, #1
 8017766:	6010      	str	r0, [r2, #0]
 8017768:	7019      	strb	r1, [r3, #0]
 801776a:	0008      	movs	r0, r1
 801776c:	bd10      	pop	{r4, pc}
 801776e:	f000 f955 	bl	8017a1c <__swbuf_r>
 8017772:	0001      	movs	r1, r0
 8017774:	e7f9      	b.n	801776a <__sfputc_r+0x1e>

08017776 <__sfputs_r>:
 8017776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017778:	0006      	movs	r6, r0
 801777a:	000f      	movs	r7, r1
 801777c:	0014      	movs	r4, r2
 801777e:	18d5      	adds	r5, r2, r3
 8017780:	42ac      	cmp	r4, r5
 8017782:	d101      	bne.n	8017788 <__sfputs_r+0x12>
 8017784:	2000      	movs	r0, #0
 8017786:	e007      	b.n	8017798 <__sfputs_r+0x22>
 8017788:	7821      	ldrb	r1, [r4, #0]
 801778a:	003a      	movs	r2, r7
 801778c:	0030      	movs	r0, r6
 801778e:	f7ff ffdd 	bl	801774c <__sfputc_r>
 8017792:	3401      	adds	r4, #1
 8017794:	1c43      	adds	r3, r0, #1
 8017796:	d1f3      	bne.n	8017780 <__sfputs_r+0xa>
 8017798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801779c <_vfiprintf_r>:
 801779c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801779e:	b0a1      	sub	sp, #132	; 0x84
 80177a0:	0006      	movs	r6, r0
 80177a2:	000c      	movs	r4, r1
 80177a4:	001f      	movs	r7, r3
 80177a6:	9203      	str	r2, [sp, #12]
 80177a8:	2800      	cmp	r0, #0
 80177aa:	d004      	beq.n	80177b6 <_vfiprintf_r+0x1a>
 80177ac:	6983      	ldr	r3, [r0, #24]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d101      	bne.n	80177b6 <_vfiprintf_r+0x1a>
 80177b2:	f000 fb45 	bl	8017e40 <__sinit>
 80177b6:	4b8e      	ldr	r3, [pc, #568]	; (80179f0 <_vfiprintf_r+0x254>)
 80177b8:	429c      	cmp	r4, r3
 80177ba:	d11c      	bne.n	80177f6 <_vfiprintf_r+0x5a>
 80177bc:	6874      	ldr	r4, [r6, #4]
 80177be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80177c0:	07db      	lsls	r3, r3, #31
 80177c2:	d405      	bmi.n	80177d0 <_vfiprintf_r+0x34>
 80177c4:	89a3      	ldrh	r3, [r4, #12]
 80177c6:	059b      	lsls	r3, r3, #22
 80177c8:	d402      	bmi.n	80177d0 <_vfiprintf_r+0x34>
 80177ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177cc:	f000 fbd9 	bl	8017f82 <__retarget_lock_acquire_recursive>
 80177d0:	89a3      	ldrh	r3, [r4, #12]
 80177d2:	071b      	lsls	r3, r3, #28
 80177d4:	d502      	bpl.n	80177dc <_vfiprintf_r+0x40>
 80177d6:	6923      	ldr	r3, [r4, #16]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d11d      	bne.n	8017818 <_vfiprintf_r+0x7c>
 80177dc:	0021      	movs	r1, r4
 80177de:	0030      	movs	r0, r6
 80177e0:	f000 f980 	bl	8017ae4 <__swsetup_r>
 80177e4:	2800      	cmp	r0, #0
 80177e6:	d017      	beq.n	8017818 <_vfiprintf_r+0x7c>
 80177e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80177ea:	07db      	lsls	r3, r3, #31
 80177ec:	d50d      	bpl.n	801780a <_vfiprintf_r+0x6e>
 80177ee:	2001      	movs	r0, #1
 80177f0:	4240      	negs	r0, r0
 80177f2:	b021      	add	sp, #132	; 0x84
 80177f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177f6:	4b7f      	ldr	r3, [pc, #508]	; (80179f4 <_vfiprintf_r+0x258>)
 80177f8:	429c      	cmp	r4, r3
 80177fa:	d101      	bne.n	8017800 <_vfiprintf_r+0x64>
 80177fc:	68b4      	ldr	r4, [r6, #8]
 80177fe:	e7de      	b.n	80177be <_vfiprintf_r+0x22>
 8017800:	4b7d      	ldr	r3, [pc, #500]	; (80179f8 <_vfiprintf_r+0x25c>)
 8017802:	429c      	cmp	r4, r3
 8017804:	d1db      	bne.n	80177be <_vfiprintf_r+0x22>
 8017806:	68f4      	ldr	r4, [r6, #12]
 8017808:	e7d9      	b.n	80177be <_vfiprintf_r+0x22>
 801780a:	89a3      	ldrh	r3, [r4, #12]
 801780c:	059b      	lsls	r3, r3, #22
 801780e:	d4ee      	bmi.n	80177ee <_vfiprintf_r+0x52>
 8017810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017812:	f000 fbb7 	bl	8017f84 <__retarget_lock_release_recursive>
 8017816:	e7ea      	b.n	80177ee <_vfiprintf_r+0x52>
 8017818:	2300      	movs	r3, #0
 801781a:	ad08      	add	r5, sp, #32
 801781c:	616b      	str	r3, [r5, #20]
 801781e:	3320      	adds	r3, #32
 8017820:	766b      	strb	r3, [r5, #25]
 8017822:	3310      	adds	r3, #16
 8017824:	76ab      	strb	r3, [r5, #26]
 8017826:	9707      	str	r7, [sp, #28]
 8017828:	9f03      	ldr	r7, [sp, #12]
 801782a:	783b      	ldrb	r3, [r7, #0]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d001      	beq.n	8017834 <_vfiprintf_r+0x98>
 8017830:	2b25      	cmp	r3, #37	; 0x25
 8017832:	d14e      	bne.n	80178d2 <_vfiprintf_r+0x136>
 8017834:	9b03      	ldr	r3, [sp, #12]
 8017836:	1afb      	subs	r3, r7, r3
 8017838:	9305      	str	r3, [sp, #20]
 801783a:	9b03      	ldr	r3, [sp, #12]
 801783c:	429f      	cmp	r7, r3
 801783e:	d00d      	beq.n	801785c <_vfiprintf_r+0xc0>
 8017840:	9b05      	ldr	r3, [sp, #20]
 8017842:	0021      	movs	r1, r4
 8017844:	0030      	movs	r0, r6
 8017846:	9a03      	ldr	r2, [sp, #12]
 8017848:	f7ff ff95 	bl	8017776 <__sfputs_r>
 801784c:	1c43      	adds	r3, r0, #1
 801784e:	d100      	bne.n	8017852 <_vfiprintf_r+0xb6>
 8017850:	e0b5      	b.n	80179be <_vfiprintf_r+0x222>
 8017852:	696a      	ldr	r2, [r5, #20]
 8017854:	9b05      	ldr	r3, [sp, #20]
 8017856:	4694      	mov	ip, r2
 8017858:	4463      	add	r3, ip
 801785a:	616b      	str	r3, [r5, #20]
 801785c:	783b      	ldrb	r3, [r7, #0]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d100      	bne.n	8017864 <_vfiprintf_r+0xc8>
 8017862:	e0ac      	b.n	80179be <_vfiprintf_r+0x222>
 8017864:	2201      	movs	r2, #1
 8017866:	1c7b      	adds	r3, r7, #1
 8017868:	9303      	str	r3, [sp, #12]
 801786a:	2300      	movs	r3, #0
 801786c:	4252      	negs	r2, r2
 801786e:	606a      	str	r2, [r5, #4]
 8017870:	a904      	add	r1, sp, #16
 8017872:	3254      	adds	r2, #84	; 0x54
 8017874:	1852      	adds	r2, r2, r1
 8017876:	602b      	str	r3, [r5, #0]
 8017878:	60eb      	str	r3, [r5, #12]
 801787a:	60ab      	str	r3, [r5, #8]
 801787c:	7013      	strb	r3, [r2, #0]
 801787e:	65ab      	str	r3, [r5, #88]	; 0x58
 8017880:	9b03      	ldr	r3, [sp, #12]
 8017882:	2205      	movs	r2, #5
 8017884:	7819      	ldrb	r1, [r3, #0]
 8017886:	485d      	ldr	r0, [pc, #372]	; (80179fc <_vfiprintf_r+0x260>)
 8017888:	f7ff f8e4 	bl	8016a54 <memchr>
 801788c:	9b03      	ldr	r3, [sp, #12]
 801788e:	1c5f      	adds	r7, r3, #1
 8017890:	2800      	cmp	r0, #0
 8017892:	d120      	bne.n	80178d6 <_vfiprintf_r+0x13a>
 8017894:	682a      	ldr	r2, [r5, #0]
 8017896:	06d3      	lsls	r3, r2, #27
 8017898:	d504      	bpl.n	80178a4 <_vfiprintf_r+0x108>
 801789a:	2353      	movs	r3, #83	; 0x53
 801789c:	a904      	add	r1, sp, #16
 801789e:	185b      	adds	r3, r3, r1
 80178a0:	2120      	movs	r1, #32
 80178a2:	7019      	strb	r1, [r3, #0]
 80178a4:	0713      	lsls	r3, r2, #28
 80178a6:	d504      	bpl.n	80178b2 <_vfiprintf_r+0x116>
 80178a8:	2353      	movs	r3, #83	; 0x53
 80178aa:	a904      	add	r1, sp, #16
 80178ac:	185b      	adds	r3, r3, r1
 80178ae:	212b      	movs	r1, #43	; 0x2b
 80178b0:	7019      	strb	r1, [r3, #0]
 80178b2:	9b03      	ldr	r3, [sp, #12]
 80178b4:	781b      	ldrb	r3, [r3, #0]
 80178b6:	2b2a      	cmp	r3, #42	; 0x2a
 80178b8:	d016      	beq.n	80178e8 <_vfiprintf_r+0x14c>
 80178ba:	2100      	movs	r1, #0
 80178bc:	68eb      	ldr	r3, [r5, #12]
 80178be:	9f03      	ldr	r7, [sp, #12]
 80178c0:	783a      	ldrb	r2, [r7, #0]
 80178c2:	1c78      	adds	r0, r7, #1
 80178c4:	3a30      	subs	r2, #48	; 0x30
 80178c6:	4684      	mov	ip, r0
 80178c8:	2a09      	cmp	r2, #9
 80178ca:	d94f      	bls.n	801796c <_vfiprintf_r+0x1d0>
 80178cc:	2900      	cmp	r1, #0
 80178ce:	d111      	bne.n	80178f4 <_vfiprintf_r+0x158>
 80178d0:	e017      	b.n	8017902 <_vfiprintf_r+0x166>
 80178d2:	3701      	adds	r7, #1
 80178d4:	e7a9      	b.n	801782a <_vfiprintf_r+0x8e>
 80178d6:	4b49      	ldr	r3, [pc, #292]	; (80179fc <_vfiprintf_r+0x260>)
 80178d8:	682a      	ldr	r2, [r5, #0]
 80178da:	1ac0      	subs	r0, r0, r3
 80178dc:	2301      	movs	r3, #1
 80178de:	4083      	lsls	r3, r0
 80178e0:	4313      	orrs	r3, r2
 80178e2:	602b      	str	r3, [r5, #0]
 80178e4:	9703      	str	r7, [sp, #12]
 80178e6:	e7cb      	b.n	8017880 <_vfiprintf_r+0xe4>
 80178e8:	9b07      	ldr	r3, [sp, #28]
 80178ea:	1d19      	adds	r1, r3, #4
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	9107      	str	r1, [sp, #28]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	db01      	blt.n	80178f8 <_vfiprintf_r+0x15c>
 80178f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80178f6:	e004      	b.n	8017902 <_vfiprintf_r+0x166>
 80178f8:	425b      	negs	r3, r3
 80178fa:	60eb      	str	r3, [r5, #12]
 80178fc:	2302      	movs	r3, #2
 80178fe:	4313      	orrs	r3, r2
 8017900:	602b      	str	r3, [r5, #0]
 8017902:	783b      	ldrb	r3, [r7, #0]
 8017904:	2b2e      	cmp	r3, #46	; 0x2e
 8017906:	d10a      	bne.n	801791e <_vfiprintf_r+0x182>
 8017908:	787b      	ldrb	r3, [r7, #1]
 801790a:	2b2a      	cmp	r3, #42	; 0x2a
 801790c:	d137      	bne.n	801797e <_vfiprintf_r+0x1e2>
 801790e:	9b07      	ldr	r3, [sp, #28]
 8017910:	3702      	adds	r7, #2
 8017912:	1d1a      	adds	r2, r3, #4
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	9207      	str	r2, [sp, #28]
 8017918:	2b00      	cmp	r3, #0
 801791a:	db2d      	blt.n	8017978 <_vfiprintf_r+0x1dc>
 801791c:	9309      	str	r3, [sp, #36]	; 0x24
 801791e:	2203      	movs	r2, #3
 8017920:	7839      	ldrb	r1, [r7, #0]
 8017922:	4837      	ldr	r0, [pc, #220]	; (8017a00 <_vfiprintf_r+0x264>)
 8017924:	f7ff f896 	bl	8016a54 <memchr>
 8017928:	2800      	cmp	r0, #0
 801792a:	d007      	beq.n	801793c <_vfiprintf_r+0x1a0>
 801792c:	4b34      	ldr	r3, [pc, #208]	; (8017a00 <_vfiprintf_r+0x264>)
 801792e:	682a      	ldr	r2, [r5, #0]
 8017930:	1ac0      	subs	r0, r0, r3
 8017932:	2340      	movs	r3, #64	; 0x40
 8017934:	4083      	lsls	r3, r0
 8017936:	4313      	orrs	r3, r2
 8017938:	3701      	adds	r7, #1
 801793a:	602b      	str	r3, [r5, #0]
 801793c:	7839      	ldrb	r1, [r7, #0]
 801793e:	1c7b      	adds	r3, r7, #1
 8017940:	2206      	movs	r2, #6
 8017942:	4830      	ldr	r0, [pc, #192]	; (8017a04 <_vfiprintf_r+0x268>)
 8017944:	9303      	str	r3, [sp, #12]
 8017946:	7629      	strb	r1, [r5, #24]
 8017948:	f7ff f884 	bl	8016a54 <memchr>
 801794c:	2800      	cmp	r0, #0
 801794e:	d045      	beq.n	80179dc <_vfiprintf_r+0x240>
 8017950:	4b2d      	ldr	r3, [pc, #180]	; (8017a08 <_vfiprintf_r+0x26c>)
 8017952:	2b00      	cmp	r3, #0
 8017954:	d127      	bne.n	80179a6 <_vfiprintf_r+0x20a>
 8017956:	2207      	movs	r2, #7
 8017958:	9b07      	ldr	r3, [sp, #28]
 801795a:	3307      	adds	r3, #7
 801795c:	4393      	bics	r3, r2
 801795e:	3308      	adds	r3, #8
 8017960:	9307      	str	r3, [sp, #28]
 8017962:	696b      	ldr	r3, [r5, #20]
 8017964:	9a04      	ldr	r2, [sp, #16]
 8017966:	189b      	adds	r3, r3, r2
 8017968:	616b      	str	r3, [r5, #20]
 801796a:	e75d      	b.n	8017828 <_vfiprintf_r+0x8c>
 801796c:	210a      	movs	r1, #10
 801796e:	434b      	muls	r3, r1
 8017970:	4667      	mov	r7, ip
 8017972:	189b      	adds	r3, r3, r2
 8017974:	3909      	subs	r1, #9
 8017976:	e7a3      	b.n	80178c0 <_vfiprintf_r+0x124>
 8017978:	2301      	movs	r3, #1
 801797a:	425b      	negs	r3, r3
 801797c:	e7ce      	b.n	801791c <_vfiprintf_r+0x180>
 801797e:	2300      	movs	r3, #0
 8017980:	001a      	movs	r2, r3
 8017982:	3701      	adds	r7, #1
 8017984:	606b      	str	r3, [r5, #4]
 8017986:	7839      	ldrb	r1, [r7, #0]
 8017988:	1c78      	adds	r0, r7, #1
 801798a:	3930      	subs	r1, #48	; 0x30
 801798c:	4684      	mov	ip, r0
 801798e:	2909      	cmp	r1, #9
 8017990:	d903      	bls.n	801799a <_vfiprintf_r+0x1fe>
 8017992:	2b00      	cmp	r3, #0
 8017994:	d0c3      	beq.n	801791e <_vfiprintf_r+0x182>
 8017996:	9209      	str	r2, [sp, #36]	; 0x24
 8017998:	e7c1      	b.n	801791e <_vfiprintf_r+0x182>
 801799a:	230a      	movs	r3, #10
 801799c:	435a      	muls	r2, r3
 801799e:	4667      	mov	r7, ip
 80179a0:	1852      	adds	r2, r2, r1
 80179a2:	3b09      	subs	r3, #9
 80179a4:	e7ef      	b.n	8017986 <_vfiprintf_r+0x1ea>
 80179a6:	ab07      	add	r3, sp, #28
 80179a8:	9300      	str	r3, [sp, #0]
 80179aa:	0022      	movs	r2, r4
 80179ac:	0029      	movs	r1, r5
 80179ae:	0030      	movs	r0, r6
 80179b0:	4b16      	ldr	r3, [pc, #88]	; (8017a0c <_vfiprintf_r+0x270>)
 80179b2:	f7fb fff7 	bl	80139a4 <_printf_float>
 80179b6:	9004      	str	r0, [sp, #16]
 80179b8:	9b04      	ldr	r3, [sp, #16]
 80179ba:	3301      	adds	r3, #1
 80179bc:	d1d1      	bne.n	8017962 <_vfiprintf_r+0x1c6>
 80179be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80179c0:	07db      	lsls	r3, r3, #31
 80179c2:	d405      	bmi.n	80179d0 <_vfiprintf_r+0x234>
 80179c4:	89a3      	ldrh	r3, [r4, #12]
 80179c6:	059b      	lsls	r3, r3, #22
 80179c8:	d402      	bmi.n	80179d0 <_vfiprintf_r+0x234>
 80179ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80179cc:	f000 fada 	bl	8017f84 <__retarget_lock_release_recursive>
 80179d0:	89a3      	ldrh	r3, [r4, #12]
 80179d2:	065b      	lsls	r3, r3, #25
 80179d4:	d500      	bpl.n	80179d8 <_vfiprintf_r+0x23c>
 80179d6:	e70a      	b.n	80177ee <_vfiprintf_r+0x52>
 80179d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80179da:	e70a      	b.n	80177f2 <_vfiprintf_r+0x56>
 80179dc:	ab07      	add	r3, sp, #28
 80179de:	9300      	str	r3, [sp, #0]
 80179e0:	0022      	movs	r2, r4
 80179e2:	0029      	movs	r1, r5
 80179e4:	0030      	movs	r0, r6
 80179e6:	4b09      	ldr	r3, [pc, #36]	; (8017a0c <_vfiprintf_r+0x270>)
 80179e8:	f7fc fa9a 	bl	8013f20 <_printf_i>
 80179ec:	e7e3      	b.n	80179b6 <_vfiprintf_r+0x21a>
 80179ee:	46c0      	nop			; (mov r8, r8)
 80179f0:	0801bc48 	.word	0x0801bc48
 80179f4:	0801bc68 	.word	0x0801bc68
 80179f8:	0801bc28 	.word	0x0801bc28
 80179fc:	0801bc14 	.word	0x0801bc14
 8017a00:	0801bc1a 	.word	0x0801bc1a
 8017a04:	0801bc1e 	.word	0x0801bc1e
 8017a08:	080139a5 	.word	0x080139a5
 8017a0c:	08017777 	.word	0x08017777

08017a10 <nan>:
 8017a10:	2000      	movs	r0, #0
 8017a12:	4901      	ldr	r1, [pc, #4]	; (8017a18 <nan+0x8>)
 8017a14:	4770      	bx	lr
 8017a16:	46c0      	nop			; (mov r8, r8)
 8017a18:	7ff80000 	.word	0x7ff80000

08017a1c <__swbuf_r>:
 8017a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a1e:	0005      	movs	r5, r0
 8017a20:	000e      	movs	r6, r1
 8017a22:	0014      	movs	r4, r2
 8017a24:	2800      	cmp	r0, #0
 8017a26:	d004      	beq.n	8017a32 <__swbuf_r+0x16>
 8017a28:	6983      	ldr	r3, [r0, #24]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d101      	bne.n	8017a32 <__swbuf_r+0x16>
 8017a2e:	f000 fa07 	bl	8017e40 <__sinit>
 8017a32:	4b22      	ldr	r3, [pc, #136]	; (8017abc <__swbuf_r+0xa0>)
 8017a34:	429c      	cmp	r4, r3
 8017a36:	d12e      	bne.n	8017a96 <__swbuf_r+0x7a>
 8017a38:	686c      	ldr	r4, [r5, #4]
 8017a3a:	69a3      	ldr	r3, [r4, #24]
 8017a3c:	60a3      	str	r3, [r4, #8]
 8017a3e:	89a3      	ldrh	r3, [r4, #12]
 8017a40:	071b      	lsls	r3, r3, #28
 8017a42:	d532      	bpl.n	8017aaa <__swbuf_r+0x8e>
 8017a44:	6923      	ldr	r3, [r4, #16]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d02f      	beq.n	8017aaa <__swbuf_r+0x8e>
 8017a4a:	6823      	ldr	r3, [r4, #0]
 8017a4c:	6922      	ldr	r2, [r4, #16]
 8017a4e:	b2f7      	uxtb	r7, r6
 8017a50:	1a98      	subs	r0, r3, r2
 8017a52:	6963      	ldr	r3, [r4, #20]
 8017a54:	b2f6      	uxtb	r6, r6
 8017a56:	4283      	cmp	r3, r0
 8017a58:	dc05      	bgt.n	8017a66 <__swbuf_r+0x4a>
 8017a5a:	0021      	movs	r1, r4
 8017a5c:	0028      	movs	r0, r5
 8017a5e:	f000 f94d 	bl	8017cfc <_fflush_r>
 8017a62:	2800      	cmp	r0, #0
 8017a64:	d127      	bne.n	8017ab6 <__swbuf_r+0x9a>
 8017a66:	68a3      	ldr	r3, [r4, #8]
 8017a68:	3001      	adds	r0, #1
 8017a6a:	3b01      	subs	r3, #1
 8017a6c:	60a3      	str	r3, [r4, #8]
 8017a6e:	6823      	ldr	r3, [r4, #0]
 8017a70:	1c5a      	adds	r2, r3, #1
 8017a72:	6022      	str	r2, [r4, #0]
 8017a74:	701f      	strb	r7, [r3, #0]
 8017a76:	6963      	ldr	r3, [r4, #20]
 8017a78:	4283      	cmp	r3, r0
 8017a7a:	d004      	beq.n	8017a86 <__swbuf_r+0x6a>
 8017a7c:	89a3      	ldrh	r3, [r4, #12]
 8017a7e:	07db      	lsls	r3, r3, #31
 8017a80:	d507      	bpl.n	8017a92 <__swbuf_r+0x76>
 8017a82:	2e0a      	cmp	r6, #10
 8017a84:	d105      	bne.n	8017a92 <__swbuf_r+0x76>
 8017a86:	0021      	movs	r1, r4
 8017a88:	0028      	movs	r0, r5
 8017a8a:	f000 f937 	bl	8017cfc <_fflush_r>
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	d111      	bne.n	8017ab6 <__swbuf_r+0x9a>
 8017a92:	0030      	movs	r0, r6
 8017a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a96:	4b0a      	ldr	r3, [pc, #40]	; (8017ac0 <__swbuf_r+0xa4>)
 8017a98:	429c      	cmp	r4, r3
 8017a9a:	d101      	bne.n	8017aa0 <__swbuf_r+0x84>
 8017a9c:	68ac      	ldr	r4, [r5, #8]
 8017a9e:	e7cc      	b.n	8017a3a <__swbuf_r+0x1e>
 8017aa0:	4b08      	ldr	r3, [pc, #32]	; (8017ac4 <__swbuf_r+0xa8>)
 8017aa2:	429c      	cmp	r4, r3
 8017aa4:	d1c9      	bne.n	8017a3a <__swbuf_r+0x1e>
 8017aa6:	68ec      	ldr	r4, [r5, #12]
 8017aa8:	e7c7      	b.n	8017a3a <__swbuf_r+0x1e>
 8017aaa:	0021      	movs	r1, r4
 8017aac:	0028      	movs	r0, r5
 8017aae:	f000 f819 	bl	8017ae4 <__swsetup_r>
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	d0c9      	beq.n	8017a4a <__swbuf_r+0x2e>
 8017ab6:	2601      	movs	r6, #1
 8017ab8:	4276      	negs	r6, r6
 8017aba:	e7ea      	b.n	8017a92 <__swbuf_r+0x76>
 8017abc:	0801bc48 	.word	0x0801bc48
 8017ac0:	0801bc68 	.word	0x0801bc68
 8017ac4:	0801bc28 	.word	0x0801bc28

08017ac8 <__ascii_wctomb>:
 8017ac8:	0003      	movs	r3, r0
 8017aca:	1e08      	subs	r0, r1, #0
 8017acc:	d005      	beq.n	8017ada <__ascii_wctomb+0x12>
 8017ace:	2aff      	cmp	r2, #255	; 0xff
 8017ad0:	d904      	bls.n	8017adc <__ascii_wctomb+0x14>
 8017ad2:	228a      	movs	r2, #138	; 0x8a
 8017ad4:	2001      	movs	r0, #1
 8017ad6:	601a      	str	r2, [r3, #0]
 8017ad8:	4240      	negs	r0, r0
 8017ada:	4770      	bx	lr
 8017adc:	2001      	movs	r0, #1
 8017ade:	700a      	strb	r2, [r1, #0]
 8017ae0:	e7fb      	b.n	8017ada <__ascii_wctomb+0x12>
	...

08017ae4 <__swsetup_r>:
 8017ae4:	4b37      	ldr	r3, [pc, #220]	; (8017bc4 <__swsetup_r+0xe0>)
 8017ae6:	b570      	push	{r4, r5, r6, lr}
 8017ae8:	681d      	ldr	r5, [r3, #0]
 8017aea:	0006      	movs	r6, r0
 8017aec:	000c      	movs	r4, r1
 8017aee:	2d00      	cmp	r5, #0
 8017af0:	d005      	beq.n	8017afe <__swsetup_r+0x1a>
 8017af2:	69ab      	ldr	r3, [r5, #24]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d102      	bne.n	8017afe <__swsetup_r+0x1a>
 8017af8:	0028      	movs	r0, r5
 8017afa:	f000 f9a1 	bl	8017e40 <__sinit>
 8017afe:	4b32      	ldr	r3, [pc, #200]	; (8017bc8 <__swsetup_r+0xe4>)
 8017b00:	429c      	cmp	r4, r3
 8017b02:	d10f      	bne.n	8017b24 <__swsetup_r+0x40>
 8017b04:	686c      	ldr	r4, [r5, #4]
 8017b06:	230c      	movs	r3, #12
 8017b08:	5ee2      	ldrsh	r2, [r4, r3]
 8017b0a:	b293      	uxth	r3, r2
 8017b0c:	0711      	lsls	r1, r2, #28
 8017b0e:	d42d      	bmi.n	8017b6c <__swsetup_r+0x88>
 8017b10:	06d9      	lsls	r1, r3, #27
 8017b12:	d411      	bmi.n	8017b38 <__swsetup_r+0x54>
 8017b14:	2309      	movs	r3, #9
 8017b16:	2001      	movs	r0, #1
 8017b18:	6033      	str	r3, [r6, #0]
 8017b1a:	3337      	adds	r3, #55	; 0x37
 8017b1c:	4313      	orrs	r3, r2
 8017b1e:	81a3      	strh	r3, [r4, #12]
 8017b20:	4240      	negs	r0, r0
 8017b22:	bd70      	pop	{r4, r5, r6, pc}
 8017b24:	4b29      	ldr	r3, [pc, #164]	; (8017bcc <__swsetup_r+0xe8>)
 8017b26:	429c      	cmp	r4, r3
 8017b28:	d101      	bne.n	8017b2e <__swsetup_r+0x4a>
 8017b2a:	68ac      	ldr	r4, [r5, #8]
 8017b2c:	e7eb      	b.n	8017b06 <__swsetup_r+0x22>
 8017b2e:	4b28      	ldr	r3, [pc, #160]	; (8017bd0 <__swsetup_r+0xec>)
 8017b30:	429c      	cmp	r4, r3
 8017b32:	d1e8      	bne.n	8017b06 <__swsetup_r+0x22>
 8017b34:	68ec      	ldr	r4, [r5, #12]
 8017b36:	e7e6      	b.n	8017b06 <__swsetup_r+0x22>
 8017b38:	075b      	lsls	r3, r3, #29
 8017b3a:	d513      	bpl.n	8017b64 <__swsetup_r+0x80>
 8017b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b3e:	2900      	cmp	r1, #0
 8017b40:	d008      	beq.n	8017b54 <__swsetup_r+0x70>
 8017b42:	0023      	movs	r3, r4
 8017b44:	3344      	adds	r3, #68	; 0x44
 8017b46:	4299      	cmp	r1, r3
 8017b48:	d002      	beq.n	8017b50 <__swsetup_r+0x6c>
 8017b4a:	0030      	movs	r0, r6
 8017b4c:	f7fb fdd8 	bl	8013700 <_free_r>
 8017b50:	2300      	movs	r3, #0
 8017b52:	6363      	str	r3, [r4, #52]	; 0x34
 8017b54:	2224      	movs	r2, #36	; 0x24
 8017b56:	89a3      	ldrh	r3, [r4, #12]
 8017b58:	4393      	bics	r3, r2
 8017b5a:	81a3      	strh	r3, [r4, #12]
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	6063      	str	r3, [r4, #4]
 8017b60:	6923      	ldr	r3, [r4, #16]
 8017b62:	6023      	str	r3, [r4, #0]
 8017b64:	2308      	movs	r3, #8
 8017b66:	89a2      	ldrh	r2, [r4, #12]
 8017b68:	4313      	orrs	r3, r2
 8017b6a:	81a3      	strh	r3, [r4, #12]
 8017b6c:	6923      	ldr	r3, [r4, #16]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d10b      	bne.n	8017b8a <__swsetup_r+0xa6>
 8017b72:	21a0      	movs	r1, #160	; 0xa0
 8017b74:	2280      	movs	r2, #128	; 0x80
 8017b76:	89a3      	ldrh	r3, [r4, #12]
 8017b78:	0089      	lsls	r1, r1, #2
 8017b7a:	0092      	lsls	r2, r2, #2
 8017b7c:	400b      	ands	r3, r1
 8017b7e:	4293      	cmp	r3, r2
 8017b80:	d003      	beq.n	8017b8a <__swsetup_r+0xa6>
 8017b82:	0021      	movs	r1, r4
 8017b84:	0030      	movs	r0, r6
 8017b86:	f000 fa27 	bl	8017fd8 <__smakebuf_r>
 8017b8a:	220c      	movs	r2, #12
 8017b8c:	5ea3      	ldrsh	r3, [r4, r2]
 8017b8e:	2001      	movs	r0, #1
 8017b90:	001a      	movs	r2, r3
 8017b92:	b299      	uxth	r1, r3
 8017b94:	4002      	ands	r2, r0
 8017b96:	4203      	tst	r3, r0
 8017b98:	d00f      	beq.n	8017bba <__swsetup_r+0xd6>
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	60a2      	str	r2, [r4, #8]
 8017b9e:	6962      	ldr	r2, [r4, #20]
 8017ba0:	4252      	negs	r2, r2
 8017ba2:	61a2      	str	r2, [r4, #24]
 8017ba4:	2000      	movs	r0, #0
 8017ba6:	6922      	ldr	r2, [r4, #16]
 8017ba8:	4282      	cmp	r2, r0
 8017baa:	d1ba      	bne.n	8017b22 <__swsetup_r+0x3e>
 8017bac:	060a      	lsls	r2, r1, #24
 8017bae:	d5b8      	bpl.n	8017b22 <__swsetup_r+0x3e>
 8017bb0:	2240      	movs	r2, #64	; 0x40
 8017bb2:	4313      	orrs	r3, r2
 8017bb4:	81a3      	strh	r3, [r4, #12]
 8017bb6:	3801      	subs	r0, #1
 8017bb8:	e7b3      	b.n	8017b22 <__swsetup_r+0x3e>
 8017bba:	0788      	lsls	r0, r1, #30
 8017bbc:	d400      	bmi.n	8017bc0 <__swsetup_r+0xdc>
 8017bbe:	6962      	ldr	r2, [r4, #20]
 8017bc0:	60a2      	str	r2, [r4, #8]
 8017bc2:	e7ef      	b.n	8017ba4 <__swsetup_r+0xc0>
 8017bc4:	200000e0 	.word	0x200000e0
 8017bc8:	0801bc48 	.word	0x0801bc48
 8017bcc:	0801bc68 	.word	0x0801bc68
 8017bd0:	0801bc28 	.word	0x0801bc28

08017bd4 <abort>:
 8017bd4:	2006      	movs	r0, #6
 8017bd6:	b510      	push	{r4, lr}
 8017bd8:	f000 fa88 	bl	80180ec <raise>
 8017bdc:	2001      	movs	r0, #1
 8017bde:	f000 fbb3 	bl	8018348 <_exit>
	...

08017be4 <__sflush_r>:
 8017be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017be6:	898b      	ldrh	r3, [r1, #12]
 8017be8:	0005      	movs	r5, r0
 8017bea:	000c      	movs	r4, r1
 8017bec:	071a      	lsls	r2, r3, #28
 8017bee:	d45f      	bmi.n	8017cb0 <__sflush_r+0xcc>
 8017bf0:	684a      	ldr	r2, [r1, #4]
 8017bf2:	2a00      	cmp	r2, #0
 8017bf4:	dc04      	bgt.n	8017c00 <__sflush_r+0x1c>
 8017bf6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8017bf8:	2a00      	cmp	r2, #0
 8017bfa:	dc01      	bgt.n	8017c00 <__sflush_r+0x1c>
 8017bfc:	2000      	movs	r0, #0
 8017bfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017c00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017c02:	2f00      	cmp	r7, #0
 8017c04:	d0fa      	beq.n	8017bfc <__sflush_r+0x18>
 8017c06:	2200      	movs	r2, #0
 8017c08:	2180      	movs	r1, #128	; 0x80
 8017c0a:	682e      	ldr	r6, [r5, #0]
 8017c0c:	602a      	str	r2, [r5, #0]
 8017c0e:	001a      	movs	r2, r3
 8017c10:	0149      	lsls	r1, r1, #5
 8017c12:	400a      	ands	r2, r1
 8017c14:	420b      	tst	r3, r1
 8017c16:	d034      	beq.n	8017c82 <__sflush_r+0x9e>
 8017c18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017c1a:	89a3      	ldrh	r3, [r4, #12]
 8017c1c:	075b      	lsls	r3, r3, #29
 8017c1e:	d506      	bpl.n	8017c2e <__sflush_r+0x4a>
 8017c20:	6863      	ldr	r3, [r4, #4]
 8017c22:	1ac0      	subs	r0, r0, r3
 8017c24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d001      	beq.n	8017c2e <__sflush_r+0x4a>
 8017c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017c2c:	1ac0      	subs	r0, r0, r3
 8017c2e:	0002      	movs	r2, r0
 8017c30:	6a21      	ldr	r1, [r4, #32]
 8017c32:	2300      	movs	r3, #0
 8017c34:	0028      	movs	r0, r5
 8017c36:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017c38:	47b8      	blx	r7
 8017c3a:	89a1      	ldrh	r1, [r4, #12]
 8017c3c:	1c43      	adds	r3, r0, #1
 8017c3e:	d106      	bne.n	8017c4e <__sflush_r+0x6a>
 8017c40:	682b      	ldr	r3, [r5, #0]
 8017c42:	2b1d      	cmp	r3, #29
 8017c44:	d831      	bhi.n	8017caa <__sflush_r+0xc6>
 8017c46:	4a2c      	ldr	r2, [pc, #176]	; (8017cf8 <__sflush_r+0x114>)
 8017c48:	40da      	lsrs	r2, r3
 8017c4a:	07d3      	lsls	r3, r2, #31
 8017c4c:	d52d      	bpl.n	8017caa <__sflush_r+0xc6>
 8017c4e:	2300      	movs	r3, #0
 8017c50:	6063      	str	r3, [r4, #4]
 8017c52:	6923      	ldr	r3, [r4, #16]
 8017c54:	6023      	str	r3, [r4, #0]
 8017c56:	04cb      	lsls	r3, r1, #19
 8017c58:	d505      	bpl.n	8017c66 <__sflush_r+0x82>
 8017c5a:	1c43      	adds	r3, r0, #1
 8017c5c:	d102      	bne.n	8017c64 <__sflush_r+0x80>
 8017c5e:	682b      	ldr	r3, [r5, #0]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d100      	bne.n	8017c66 <__sflush_r+0x82>
 8017c64:	6560      	str	r0, [r4, #84]	; 0x54
 8017c66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c68:	602e      	str	r6, [r5, #0]
 8017c6a:	2900      	cmp	r1, #0
 8017c6c:	d0c6      	beq.n	8017bfc <__sflush_r+0x18>
 8017c6e:	0023      	movs	r3, r4
 8017c70:	3344      	adds	r3, #68	; 0x44
 8017c72:	4299      	cmp	r1, r3
 8017c74:	d002      	beq.n	8017c7c <__sflush_r+0x98>
 8017c76:	0028      	movs	r0, r5
 8017c78:	f7fb fd42 	bl	8013700 <_free_r>
 8017c7c:	2000      	movs	r0, #0
 8017c7e:	6360      	str	r0, [r4, #52]	; 0x34
 8017c80:	e7bd      	b.n	8017bfe <__sflush_r+0x1a>
 8017c82:	2301      	movs	r3, #1
 8017c84:	0028      	movs	r0, r5
 8017c86:	6a21      	ldr	r1, [r4, #32]
 8017c88:	47b8      	blx	r7
 8017c8a:	1c43      	adds	r3, r0, #1
 8017c8c:	d1c5      	bne.n	8017c1a <__sflush_r+0x36>
 8017c8e:	682b      	ldr	r3, [r5, #0]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d0c2      	beq.n	8017c1a <__sflush_r+0x36>
 8017c94:	2b1d      	cmp	r3, #29
 8017c96:	d001      	beq.n	8017c9c <__sflush_r+0xb8>
 8017c98:	2b16      	cmp	r3, #22
 8017c9a:	d101      	bne.n	8017ca0 <__sflush_r+0xbc>
 8017c9c:	602e      	str	r6, [r5, #0]
 8017c9e:	e7ad      	b.n	8017bfc <__sflush_r+0x18>
 8017ca0:	2340      	movs	r3, #64	; 0x40
 8017ca2:	89a2      	ldrh	r2, [r4, #12]
 8017ca4:	4313      	orrs	r3, r2
 8017ca6:	81a3      	strh	r3, [r4, #12]
 8017ca8:	e7a9      	b.n	8017bfe <__sflush_r+0x1a>
 8017caa:	2340      	movs	r3, #64	; 0x40
 8017cac:	430b      	orrs	r3, r1
 8017cae:	e7fa      	b.n	8017ca6 <__sflush_r+0xc2>
 8017cb0:	690f      	ldr	r7, [r1, #16]
 8017cb2:	2f00      	cmp	r7, #0
 8017cb4:	d0a2      	beq.n	8017bfc <__sflush_r+0x18>
 8017cb6:	680a      	ldr	r2, [r1, #0]
 8017cb8:	600f      	str	r7, [r1, #0]
 8017cba:	1bd2      	subs	r2, r2, r7
 8017cbc:	9201      	str	r2, [sp, #4]
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	079b      	lsls	r3, r3, #30
 8017cc2:	d100      	bne.n	8017cc6 <__sflush_r+0xe2>
 8017cc4:	694a      	ldr	r2, [r1, #20]
 8017cc6:	60a2      	str	r2, [r4, #8]
 8017cc8:	9b01      	ldr	r3, [sp, #4]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	dc00      	bgt.n	8017cd0 <__sflush_r+0xec>
 8017cce:	e795      	b.n	8017bfc <__sflush_r+0x18>
 8017cd0:	003a      	movs	r2, r7
 8017cd2:	0028      	movs	r0, r5
 8017cd4:	9b01      	ldr	r3, [sp, #4]
 8017cd6:	6a21      	ldr	r1, [r4, #32]
 8017cd8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017cda:	47b0      	blx	r6
 8017cdc:	2800      	cmp	r0, #0
 8017cde:	dc06      	bgt.n	8017cee <__sflush_r+0x10a>
 8017ce0:	2340      	movs	r3, #64	; 0x40
 8017ce2:	2001      	movs	r0, #1
 8017ce4:	89a2      	ldrh	r2, [r4, #12]
 8017ce6:	4240      	negs	r0, r0
 8017ce8:	4313      	orrs	r3, r2
 8017cea:	81a3      	strh	r3, [r4, #12]
 8017cec:	e787      	b.n	8017bfe <__sflush_r+0x1a>
 8017cee:	9b01      	ldr	r3, [sp, #4]
 8017cf0:	183f      	adds	r7, r7, r0
 8017cf2:	1a1b      	subs	r3, r3, r0
 8017cf4:	9301      	str	r3, [sp, #4]
 8017cf6:	e7e7      	b.n	8017cc8 <__sflush_r+0xe4>
 8017cf8:	20400001 	.word	0x20400001

08017cfc <_fflush_r>:
 8017cfc:	690b      	ldr	r3, [r1, #16]
 8017cfe:	b570      	push	{r4, r5, r6, lr}
 8017d00:	0005      	movs	r5, r0
 8017d02:	000c      	movs	r4, r1
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d102      	bne.n	8017d0e <_fflush_r+0x12>
 8017d08:	2500      	movs	r5, #0
 8017d0a:	0028      	movs	r0, r5
 8017d0c:	bd70      	pop	{r4, r5, r6, pc}
 8017d0e:	2800      	cmp	r0, #0
 8017d10:	d004      	beq.n	8017d1c <_fflush_r+0x20>
 8017d12:	6983      	ldr	r3, [r0, #24]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d101      	bne.n	8017d1c <_fflush_r+0x20>
 8017d18:	f000 f892 	bl	8017e40 <__sinit>
 8017d1c:	4b14      	ldr	r3, [pc, #80]	; (8017d70 <_fflush_r+0x74>)
 8017d1e:	429c      	cmp	r4, r3
 8017d20:	d11b      	bne.n	8017d5a <_fflush_r+0x5e>
 8017d22:	686c      	ldr	r4, [r5, #4]
 8017d24:	220c      	movs	r2, #12
 8017d26:	5ea3      	ldrsh	r3, [r4, r2]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d0ed      	beq.n	8017d08 <_fflush_r+0xc>
 8017d2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017d2e:	07d2      	lsls	r2, r2, #31
 8017d30:	d404      	bmi.n	8017d3c <_fflush_r+0x40>
 8017d32:	059b      	lsls	r3, r3, #22
 8017d34:	d402      	bmi.n	8017d3c <_fflush_r+0x40>
 8017d36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017d38:	f000 f923 	bl	8017f82 <__retarget_lock_acquire_recursive>
 8017d3c:	0028      	movs	r0, r5
 8017d3e:	0021      	movs	r1, r4
 8017d40:	f7ff ff50 	bl	8017be4 <__sflush_r>
 8017d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017d46:	0005      	movs	r5, r0
 8017d48:	07db      	lsls	r3, r3, #31
 8017d4a:	d4de      	bmi.n	8017d0a <_fflush_r+0xe>
 8017d4c:	89a3      	ldrh	r3, [r4, #12]
 8017d4e:	059b      	lsls	r3, r3, #22
 8017d50:	d4db      	bmi.n	8017d0a <_fflush_r+0xe>
 8017d52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017d54:	f000 f916 	bl	8017f84 <__retarget_lock_release_recursive>
 8017d58:	e7d7      	b.n	8017d0a <_fflush_r+0xe>
 8017d5a:	4b06      	ldr	r3, [pc, #24]	; (8017d74 <_fflush_r+0x78>)
 8017d5c:	429c      	cmp	r4, r3
 8017d5e:	d101      	bne.n	8017d64 <_fflush_r+0x68>
 8017d60:	68ac      	ldr	r4, [r5, #8]
 8017d62:	e7df      	b.n	8017d24 <_fflush_r+0x28>
 8017d64:	4b04      	ldr	r3, [pc, #16]	; (8017d78 <_fflush_r+0x7c>)
 8017d66:	429c      	cmp	r4, r3
 8017d68:	d1dc      	bne.n	8017d24 <_fflush_r+0x28>
 8017d6a:	68ec      	ldr	r4, [r5, #12]
 8017d6c:	e7da      	b.n	8017d24 <_fflush_r+0x28>
 8017d6e:	46c0      	nop			; (mov r8, r8)
 8017d70:	0801bc48 	.word	0x0801bc48
 8017d74:	0801bc68 	.word	0x0801bc68
 8017d78:	0801bc28 	.word	0x0801bc28

08017d7c <std>:
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	b510      	push	{r4, lr}
 8017d80:	0004      	movs	r4, r0
 8017d82:	6003      	str	r3, [r0, #0]
 8017d84:	6043      	str	r3, [r0, #4]
 8017d86:	6083      	str	r3, [r0, #8]
 8017d88:	8181      	strh	r1, [r0, #12]
 8017d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8017d8c:	0019      	movs	r1, r3
 8017d8e:	81c2      	strh	r2, [r0, #14]
 8017d90:	6103      	str	r3, [r0, #16]
 8017d92:	6143      	str	r3, [r0, #20]
 8017d94:	6183      	str	r3, [r0, #24]
 8017d96:	2208      	movs	r2, #8
 8017d98:	305c      	adds	r0, #92	; 0x5c
 8017d9a:	f7fb fca8 	bl	80136ee <memset>
 8017d9e:	4b05      	ldr	r3, [pc, #20]	; (8017db4 <std+0x38>)
 8017da0:	6263      	str	r3, [r4, #36]	; 0x24
 8017da2:	4b05      	ldr	r3, [pc, #20]	; (8017db8 <std+0x3c>)
 8017da4:	6224      	str	r4, [r4, #32]
 8017da6:	62a3      	str	r3, [r4, #40]	; 0x28
 8017da8:	4b04      	ldr	r3, [pc, #16]	; (8017dbc <std+0x40>)
 8017daa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017dac:	4b04      	ldr	r3, [pc, #16]	; (8017dc0 <std+0x44>)
 8017dae:	6323      	str	r3, [r4, #48]	; 0x30
 8017db0:	bd10      	pop	{r4, pc}
 8017db2:	46c0      	nop			; (mov r8, r8)
 8017db4:	0801812d 	.word	0x0801812d
 8017db8:	08018155 	.word	0x08018155
 8017dbc:	0801818d 	.word	0x0801818d
 8017dc0:	080181b9 	.word	0x080181b9

08017dc4 <_cleanup_r>:
 8017dc4:	b510      	push	{r4, lr}
 8017dc6:	4902      	ldr	r1, [pc, #8]	; (8017dd0 <_cleanup_r+0xc>)
 8017dc8:	f000 f8ba 	bl	8017f40 <_fwalk_reent>
 8017dcc:	bd10      	pop	{r4, pc}
 8017dce:	46c0      	nop			; (mov r8, r8)
 8017dd0:	08017cfd 	.word	0x08017cfd

08017dd4 <__sfmoreglue>:
 8017dd4:	b570      	push	{r4, r5, r6, lr}
 8017dd6:	2568      	movs	r5, #104	; 0x68
 8017dd8:	1e4a      	subs	r2, r1, #1
 8017dda:	4355      	muls	r5, r2
 8017ddc:	000e      	movs	r6, r1
 8017dde:	0029      	movs	r1, r5
 8017de0:	3174      	adds	r1, #116	; 0x74
 8017de2:	f7fb fcd7 	bl	8013794 <_malloc_r>
 8017de6:	1e04      	subs	r4, r0, #0
 8017de8:	d008      	beq.n	8017dfc <__sfmoreglue+0x28>
 8017dea:	2100      	movs	r1, #0
 8017dec:	002a      	movs	r2, r5
 8017dee:	6001      	str	r1, [r0, #0]
 8017df0:	6046      	str	r6, [r0, #4]
 8017df2:	300c      	adds	r0, #12
 8017df4:	60a0      	str	r0, [r4, #8]
 8017df6:	3268      	adds	r2, #104	; 0x68
 8017df8:	f7fb fc79 	bl	80136ee <memset>
 8017dfc:	0020      	movs	r0, r4
 8017dfe:	bd70      	pop	{r4, r5, r6, pc}

08017e00 <__sfp_lock_acquire>:
 8017e00:	b510      	push	{r4, lr}
 8017e02:	4802      	ldr	r0, [pc, #8]	; (8017e0c <__sfp_lock_acquire+0xc>)
 8017e04:	f000 f8bd 	bl	8017f82 <__retarget_lock_acquire_recursive>
 8017e08:	bd10      	pop	{r4, pc}
 8017e0a:	46c0      	nop			; (mov r8, r8)
 8017e0c:	20006664 	.word	0x20006664

08017e10 <__sfp_lock_release>:
 8017e10:	b510      	push	{r4, lr}
 8017e12:	4802      	ldr	r0, [pc, #8]	; (8017e1c <__sfp_lock_release+0xc>)
 8017e14:	f000 f8b6 	bl	8017f84 <__retarget_lock_release_recursive>
 8017e18:	bd10      	pop	{r4, pc}
 8017e1a:	46c0      	nop			; (mov r8, r8)
 8017e1c:	20006664 	.word	0x20006664

08017e20 <__sinit_lock_acquire>:
 8017e20:	b510      	push	{r4, lr}
 8017e22:	4802      	ldr	r0, [pc, #8]	; (8017e2c <__sinit_lock_acquire+0xc>)
 8017e24:	f000 f8ad 	bl	8017f82 <__retarget_lock_acquire_recursive>
 8017e28:	bd10      	pop	{r4, pc}
 8017e2a:	46c0      	nop			; (mov r8, r8)
 8017e2c:	2000665f 	.word	0x2000665f

08017e30 <__sinit_lock_release>:
 8017e30:	b510      	push	{r4, lr}
 8017e32:	4802      	ldr	r0, [pc, #8]	; (8017e3c <__sinit_lock_release+0xc>)
 8017e34:	f000 f8a6 	bl	8017f84 <__retarget_lock_release_recursive>
 8017e38:	bd10      	pop	{r4, pc}
 8017e3a:	46c0      	nop			; (mov r8, r8)
 8017e3c:	2000665f 	.word	0x2000665f

08017e40 <__sinit>:
 8017e40:	b513      	push	{r0, r1, r4, lr}
 8017e42:	0004      	movs	r4, r0
 8017e44:	f7ff ffec 	bl	8017e20 <__sinit_lock_acquire>
 8017e48:	69a3      	ldr	r3, [r4, #24]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d002      	beq.n	8017e54 <__sinit+0x14>
 8017e4e:	f7ff ffef 	bl	8017e30 <__sinit_lock_release>
 8017e52:	bd13      	pop	{r0, r1, r4, pc}
 8017e54:	64a3      	str	r3, [r4, #72]	; 0x48
 8017e56:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017e58:	6523      	str	r3, [r4, #80]	; 0x50
 8017e5a:	4b13      	ldr	r3, [pc, #76]	; (8017ea8 <__sinit+0x68>)
 8017e5c:	4a13      	ldr	r2, [pc, #76]	; (8017eac <__sinit+0x6c>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	62a2      	str	r2, [r4, #40]	; 0x28
 8017e62:	9301      	str	r3, [sp, #4]
 8017e64:	42a3      	cmp	r3, r4
 8017e66:	d101      	bne.n	8017e6c <__sinit+0x2c>
 8017e68:	2301      	movs	r3, #1
 8017e6a:	61a3      	str	r3, [r4, #24]
 8017e6c:	0020      	movs	r0, r4
 8017e6e:	f000 f81f 	bl	8017eb0 <__sfp>
 8017e72:	6060      	str	r0, [r4, #4]
 8017e74:	0020      	movs	r0, r4
 8017e76:	f000 f81b 	bl	8017eb0 <__sfp>
 8017e7a:	60a0      	str	r0, [r4, #8]
 8017e7c:	0020      	movs	r0, r4
 8017e7e:	f000 f817 	bl	8017eb0 <__sfp>
 8017e82:	2200      	movs	r2, #0
 8017e84:	2104      	movs	r1, #4
 8017e86:	60e0      	str	r0, [r4, #12]
 8017e88:	6860      	ldr	r0, [r4, #4]
 8017e8a:	f7ff ff77 	bl	8017d7c <std>
 8017e8e:	2201      	movs	r2, #1
 8017e90:	2109      	movs	r1, #9
 8017e92:	68a0      	ldr	r0, [r4, #8]
 8017e94:	f7ff ff72 	bl	8017d7c <std>
 8017e98:	2202      	movs	r2, #2
 8017e9a:	2112      	movs	r1, #18
 8017e9c:	68e0      	ldr	r0, [r4, #12]
 8017e9e:	f7ff ff6d 	bl	8017d7c <std>
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	61a3      	str	r3, [r4, #24]
 8017ea6:	e7d2      	b.n	8017e4e <__sinit+0xe>
 8017ea8:	0801b81c 	.word	0x0801b81c
 8017eac:	08017dc5 	.word	0x08017dc5

08017eb0 <__sfp>:
 8017eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eb2:	0007      	movs	r7, r0
 8017eb4:	f7ff ffa4 	bl	8017e00 <__sfp_lock_acquire>
 8017eb8:	4b1f      	ldr	r3, [pc, #124]	; (8017f38 <__sfp+0x88>)
 8017eba:	681e      	ldr	r6, [r3, #0]
 8017ebc:	69b3      	ldr	r3, [r6, #24]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d102      	bne.n	8017ec8 <__sfp+0x18>
 8017ec2:	0030      	movs	r0, r6
 8017ec4:	f7ff ffbc 	bl	8017e40 <__sinit>
 8017ec8:	3648      	adds	r6, #72	; 0x48
 8017eca:	68b4      	ldr	r4, [r6, #8]
 8017ecc:	6873      	ldr	r3, [r6, #4]
 8017ece:	3b01      	subs	r3, #1
 8017ed0:	d504      	bpl.n	8017edc <__sfp+0x2c>
 8017ed2:	6833      	ldr	r3, [r6, #0]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d022      	beq.n	8017f1e <__sfp+0x6e>
 8017ed8:	6836      	ldr	r6, [r6, #0]
 8017eda:	e7f6      	b.n	8017eca <__sfp+0x1a>
 8017edc:	220c      	movs	r2, #12
 8017ede:	5ea5      	ldrsh	r5, [r4, r2]
 8017ee0:	2d00      	cmp	r5, #0
 8017ee2:	d11a      	bne.n	8017f1a <__sfp+0x6a>
 8017ee4:	0020      	movs	r0, r4
 8017ee6:	4b15      	ldr	r3, [pc, #84]	; (8017f3c <__sfp+0x8c>)
 8017ee8:	3058      	adds	r0, #88	; 0x58
 8017eea:	60e3      	str	r3, [r4, #12]
 8017eec:	6665      	str	r5, [r4, #100]	; 0x64
 8017eee:	f000 f847 	bl	8017f80 <__retarget_lock_init_recursive>
 8017ef2:	f7ff ff8d 	bl	8017e10 <__sfp_lock_release>
 8017ef6:	0020      	movs	r0, r4
 8017ef8:	2208      	movs	r2, #8
 8017efa:	0029      	movs	r1, r5
 8017efc:	6025      	str	r5, [r4, #0]
 8017efe:	60a5      	str	r5, [r4, #8]
 8017f00:	6065      	str	r5, [r4, #4]
 8017f02:	6125      	str	r5, [r4, #16]
 8017f04:	6165      	str	r5, [r4, #20]
 8017f06:	61a5      	str	r5, [r4, #24]
 8017f08:	305c      	adds	r0, #92	; 0x5c
 8017f0a:	f7fb fbf0 	bl	80136ee <memset>
 8017f0e:	6365      	str	r5, [r4, #52]	; 0x34
 8017f10:	63a5      	str	r5, [r4, #56]	; 0x38
 8017f12:	64a5      	str	r5, [r4, #72]	; 0x48
 8017f14:	64e5      	str	r5, [r4, #76]	; 0x4c
 8017f16:	0020      	movs	r0, r4
 8017f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f1a:	3468      	adds	r4, #104	; 0x68
 8017f1c:	e7d7      	b.n	8017ece <__sfp+0x1e>
 8017f1e:	2104      	movs	r1, #4
 8017f20:	0038      	movs	r0, r7
 8017f22:	f7ff ff57 	bl	8017dd4 <__sfmoreglue>
 8017f26:	1e04      	subs	r4, r0, #0
 8017f28:	6030      	str	r0, [r6, #0]
 8017f2a:	d1d5      	bne.n	8017ed8 <__sfp+0x28>
 8017f2c:	f7ff ff70 	bl	8017e10 <__sfp_lock_release>
 8017f30:	230c      	movs	r3, #12
 8017f32:	603b      	str	r3, [r7, #0]
 8017f34:	e7ef      	b.n	8017f16 <__sfp+0x66>
 8017f36:	46c0      	nop			; (mov r8, r8)
 8017f38:	0801b81c 	.word	0x0801b81c
 8017f3c:	ffff0001 	.word	0xffff0001

08017f40 <_fwalk_reent>:
 8017f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f42:	0004      	movs	r4, r0
 8017f44:	0006      	movs	r6, r0
 8017f46:	2700      	movs	r7, #0
 8017f48:	9101      	str	r1, [sp, #4]
 8017f4a:	3448      	adds	r4, #72	; 0x48
 8017f4c:	6863      	ldr	r3, [r4, #4]
 8017f4e:	68a5      	ldr	r5, [r4, #8]
 8017f50:	9300      	str	r3, [sp, #0]
 8017f52:	9b00      	ldr	r3, [sp, #0]
 8017f54:	3b01      	subs	r3, #1
 8017f56:	9300      	str	r3, [sp, #0]
 8017f58:	d504      	bpl.n	8017f64 <_fwalk_reent+0x24>
 8017f5a:	6824      	ldr	r4, [r4, #0]
 8017f5c:	2c00      	cmp	r4, #0
 8017f5e:	d1f5      	bne.n	8017f4c <_fwalk_reent+0xc>
 8017f60:	0038      	movs	r0, r7
 8017f62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017f64:	89ab      	ldrh	r3, [r5, #12]
 8017f66:	2b01      	cmp	r3, #1
 8017f68:	d908      	bls.n	8017f7c <_fwalk_reent+0x3c>
 8017f6a:	220e      	movs	r2, #14
 8017f6c:	5eab      	ldrsh	r3, [r5, r2]
 8017f6e:	3301      	adds	r3, #1
 8017f70:	d004      	beq.n	8017f7c <_fwalk_reent+0x3c>
 8017f72:	0029      	movs	r1, r5
 8017f74:	0030      	movs	r0, r6
 8017f76:	9b01      	ldr	r3, [sp, #4]
 8017f78:	4798      	blx	r3
 8017f7a:	4307      	orrs	r7, r0
 8017f7c:	3568      	adds	r5, #104	; 0x68
 8017f7e:	e7e8      	b.n	8017f52 <_fwalk_reent+0x12>

08017f80 <__retarget_lock_init_recursive>:
 8017f80:	4770      	bx	lr

08017f82 <__retarget_lock_acquire_recursive>:
 8017f82:	4770      	bx	lr

08017f84 <__retarget_lock_release_recursive>:
 8017f84:	4770      	bx	lr
	...

08017f88 <__swhatbuf_r>:
 8017f88:	b570      	push	{r4, r5, r6, lr}
 8017f8a:	000e      	movs	r6, r1
 8017f8c:	001d      	movs	r5, r3
 8017f8e:	230e      	movs	r3, #14
 8017f90:	5ec9      	ldrsh	r1, [r1, r3]
 8017f92:	0014      	movs	r4, r2
 8017f94:	b096      	sub	sp, #88	; 0x58
 8017f96:	2900      	cmp	r1, #0
 8017f98:	da07      	bge.n	8017faa <__swhatbuf_r+0x22>
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	602b      	str	r3, [r5, #0]
 8017f9e:	89b3      	ldrh	r3, [r6, #12]
 8017fa0:	061b      	lsls	r3, r3, #24
 8017fa2:	d411      	bmi.n	8017fc8 <__swhatbuf_r+0x40>
 8017fa4:	2380      	movs	r3, #128	; 0x80
 8017fa6:	00db      	lsls	r3, r3, #3
 8017fa8:	e00f      	b.n	8017fca <__swhatbuf_r+0x42>
 8017faa:	466a      	mov	r2, sp
 8017fac:	f000 f930 	bl	8018210 <_fstat_r>
 8017fb0:	2800      	cmp	r0, #0
 8017fb2:	dbf2      	blt.n	8017f9a <__swhatbuf_r+0x12>
 8017fb4:	23f0      	movs	r3, #240	; 0xf0
 8017fb6:	9901      	ldr	r1, [sp, #4]
 8017fb8:	021b      	lsls	r3, r3, #8
 8017fba:	4019      	ands	r1, r3
 8017fbc:	4b05      	ldr	r3, [pc, #20]	; (8017fd4 <__swhatbuf_r+0x4c>)
 8017fbe:	18c9      	adds	r1, r1, r3
 8017fc0:	424b      	negs	r3, r1
 8017fc2:	4159      	adcs	r1, r3
 8017fc4:	6029      	str	r1, [r5, #0]
 8017fc6:	e7ed      	b.n	8017fa4 <__swhatbuf_r+0x1c>
 8017fc8:	2340      	movs	r3, #64	; 0x40
 8017fca:	2000      	movs	r0, #0
 8017fcc:	6023      	str	r3, [r4, #0]
 8017fce:	b016      	add	sp, #88	; 0x58
 8017fd0:	bd70      	pop	{r4, r5, r6, pc}
 8017fd2:	46c0      	nop			; (mov r8, r8)
 8017fd4:	ffffe000 	.word	0xffffe000

08017fd8 <__smakebuf_r>:
 8017fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017fda:	2602      	movs	r6, #2
 8017fdc:	898b      	ldrh	r3, [r1, #12]
 8017fde:	0005      	movs	r5, r0
 8017fe0:	000c      	movs	r4, r1
 8017fe2:	4233      	tst	r3, r6
 8017fe4:	d006      	beq.n	8017ff4 <__smakebuf_r+0x1c>
 8017fe6:	0023      	movs	r3, r4
 8017fe8:	3347      	adds	r3, #71	; 0x47
 8017fea:	6023      	str	r3, [r4, #0]
 8017fec:	6123      	str	r3, [r4, #16]
 8017fee:	2301      	movs	r3, #1
 8017ff0:	6163      	str	r3, [r4, #20]
 8017ff2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017ff4:	466a      	mov	r2, sp
 8017ff6:	ab01      	add	r3, sp, #4
 8017ff8:	f7ff ffc6 	bl	8017f88 <__swhatbuf_r>
 8017ffc:	9900      	ldr	r1, [sp, #0]
 8017ffe:	0007      	movs	r7, r0
 8018000:	0028      	movs	r0, r5
 8018002:	f7fb fbc7 	bl	8013794 <_malloc_r>
 8018006:	2800      	cmp	r0, #0
 8018008:	d108      	bne.n	801801c <__smakebuf_r+0x44>
 801800a:	220c      	movs	r2, #12
 801800c:	5ea3      	ldrsh	r3, [r4, r2]
 801800e:	059a      	lsls	r2, r3, #22
 8018010:	d4ef      	bmi.n	8017ff2 <__smakebuf_r+0x1a>
 8018012:	2203      	movs	r2, #3
 8018014:	4393      	bics	r3, r2
 8018016:	431e      	orrs	r6, r3
 8018018:	81a6      	strh	r6, [r4, #12]
 801801a:	e7e4      	b.n	8017fe6 <__smakebuf_r+0xe>
 801801c:	4b0f      	ldr	r3, [pc, #60]	; (801805c <__smakebuf_r+0x84>)
 801801e:	62ab      	str	r3, [r5, #40]	; 0x28
 8018020:	2380      	movs	r3, #128	; 0x80
 8018022:	89a2      	ldrh	r2, [r4, #12]
 8018024:	6020      	str	r0, [r4, #0]
 8018026:	4313      	orrs	r3, r2
 8018028:	81a3      	strh	r3, [r4, #12]
 801802a:	9b00      	ldr	r3, [sp, #0]
 801802c:	6120      	str	r0, [r4, #16]
 801802e:	6163      	str	r3, [r4, #20]
 8018030:	9b01      	ldr	r3, [sp, #4]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d00d      	beq.n	8018052 <__smakebuf_r+0x7a>
 8018036:	0028      	movs	r0, r5
 8018038:	230e      	movs	r3, #14
 801803a:	5ee1      	ldrsh	r1, [r4, r3]
 801803c:	f000 f8fa 	bl	8018234 <_isatty_r>
 8018040:	2800      	cmp	r0, #0
 8018042:	d006      	beq.n	8018052 <__smakebuf_r+0x7a>
 8018044:	2203      	movs	r2, #3
 8018046:	89a3      	ldrh	r3, [r4, #12]
 8018048:	4393      	bics	r3, r2
 801804a:	001a      	movs	r2, r3
 801804c:	2301      	movs	r3, #1
 801804e:	4313      	orrs	r3, r2
 8018050:	81a3      	strh	r3, [r4, #12]
 8018052:	89a0      	ldrh	r0, [r4, #12]
 8018054:	4307      	orrs	r7, r0
 8018056:	81a7      	strh	r7, [r4, #12]
 8018058:	e7cb      	b.n	8017ff2 <__smakebuf_r+0x1a>
 801805a:	46c0      	nop			; (mov r8, r8)
 801805c:	08017dc5 	.word	0x08017dc5

08018060 <memmove>:
 8018060:	b510      	push	{r4, lr}
 8018062:	4288      	cmp	r0, r1
 8018064:	d902      	bls.n	801806c <memmove+0xc>
 8018066:	188b      	adds	r3, r1, r2
 8018068:	4298      	cmp	r0, r3
 801806a:	d303      	bcc.n	8018074 <memmove+0x14>
 801806c:	2300      	movs	r3, #0
 801806e:	e007      	b.n	8018080 <memmove+0x20>
 8018070:	5c8b      	ldrb	r3, [r1, r2]
 8018072:	5483      	strb	r3, [r0, r2]
 8018074:	3a01      	subs	r2, #1
 8018076:	d2fb      	bcs.n	8018070 <memmove+0x10>
 8018078:	bd10      	pop	{r4, pc}
 801807a:	5ccc      	ldrb	r4, [r1, r3]
 801807c:	54c4      	strb	r4, [r0, r3]
 801807e:	3301      	adds	r3, #1
 8018080:	429a      	cmp	r2, r3
 8018082:	d1fa      	bne.n	801807a <memmove+0x1a>
 8018084:	e7f8      	b.n	8018078 <memmove+0x18>

08018086 <_malloc_usable_size_r>:
 8018086:	1f0b      	subs	r3, r1, #4
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	1f18      	subs	r0, r3, #4
 801808c:	2b00      	cmp	r3, #0
 801808e:	da01      	bge.n	8018094 <_malloc_usable_size_r+0xe>
 8018090:	580b      	ldr	r3, [r1, r0]
 8018092:	18c0      	adds	r0, r0, r3
 8018094:	4770      	bx	lr

08018096 <_raise_r>:
 8018096:	b570      	push	{r4, r5, r6, lr}
 8018098:	0004      	movs	r4, r0
 801809a:	000d      	movs	r5, r1
 801809c:	291f      	cmp	r1, #31
 801809e:	d904      	bls.n	80180aa <_raise_r+0x14>
 80180a0:	2316      	movs	r3, #22
 80180a2:	6003      	str	r3, [r0, #0]
 80180a4:	2001      	movs	r0, #1
 80180a6:	4240      	negs	r0, r0
 80180a8:	bd70      	pop	{r4, r5, r6, pc}
 80180aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d004      	beq.n	80180ba <_raise_r+0x24>
 80180b0:	008a      	lsls	r2, r1, #2
 80180b2:	189b      	adds	r3, r3, r2
 80180b4:	681a      	ldr	r2, [r3, #0]
 80180b6:	2a00      	cmp	r2, #0
 80180b8:	d108      	bne.n	80180cc <_raise_r+0x36>
 80180ba:	0020      	movs	r0, r4
 80180bc:	f000 f832 	bl	8018124 <_getpid_r>
 80180c0:	002a      	movs	r2, r5
 80180c2:	0001      	movs	r1, r0
 80180c4:	0020      	movs	r0, r4
 80180c6:	f000 f81b 	bl	8018100 <_kill_r>
 80180ca:	e7ed      	b.n	80180a8 <_raise_r+0x12>
 80180cc:	2000      	movs	r0, #0
 80180ce:	2a01      	cmp	r2, #1
 80180d0:	d0ea      	beq.n	80180a8 <_raise_r+0x12>
 80180d2:	1c51      	adds	r1, r2, #1
 80180d4:	d103      	bne.n	80180de <_raise_r+0x48>
 80180d6:	2316      	movs	r3, #22
 80180d8:	3001      	adds	r0, #1
 80180da:	6023      	str	r3, [r4, #0]
 80180dc:	e7e4      	b.n	80180a8 <_raise_r+0x12>
 80180de:	2400      	movs	r4, #0
 80180e0:	0028      	movs	r0, r5
 80180e2:	601c      	str	r4, [r3, #0]
 80180e4:	4790      	blx	r2
 80180e6:	0020      	movs	r0, r4
 80180e8:	e7de      	b.n	80180a8 <_raise_r+0x12>
	...

080180ec <raise>:
 80180ec:	b510      	push	{r4, lr}
 80180ee:	4b03      	ldr	r3, [pc, #12]	; (80180fc <raise+0x10>)
 80180f0:	0001      	movs	r1, r0
 80180f2:	6818      	ldr	r0, [r3, #0]
 80180f4:	f7ff ffcf 	bl	8018096 <_raise_r>
 80180f8:	bd10      	pop	{r4, pc}
 80180fa:	46c0      	nop			; (mov r8, r8)
 80180fc:	200000e0 	.word	0x200000e0

08018100 <_kill_r>:
 8018100:	2300      	movs	r3, #0
 8018102:	b570      	push	{r4, r5, r6, lr}
 8018104:	4d06      	ldr	r5, [pc, #24]	; (8018120 <_kill_r+0x20>)
 8018106:	0004      	movs	r4, r0
 8018108:	0008      	movs	r0, r1
 801810a:	0011      	movs	r1, r2
 801810c:	602b      	str	r3, [r5, #0]
 801810e:	f000 f8eb 	bl	80182e8 <_kill>
 8018112:	1c43      	adds	r3, r0, #1
 8018114:	d103      	bne.n	801811e <_kill_r+0x1e>
 8018116:	682b      	ldr	r3, [r5, #0]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d000      	beq.n	801811e <_kill_r+0x1e>
 801811c:	6023      	str	r3, [r4, #0]
 801811e:	bd70      	pop	{r4, r5, r6, pc}
 8018120:	20006658 	.word	0x20006658

08018124 <_getpid_r>:
 8018124:	b510      	push	{r4, lr}
 8018126:	f000 f8cf 	bl	80182c8 <_getpid>
 801812a:	bd10      	pop	{r4, pc}

0801812c <__sread>:
 801812c:	b570      	push	{r4, r5, r6, lr}
 801812e:	000c      	movs	r4, r1
 8018130:	250e      	movs	r5, #14
 8018132:	5f49      	ldrsh	r1, [r1, r5]
 8018134:	f000 f8a4 	bl	8018280 <_read_r>
 8018138:	2800      	cmp	r0, #0
 801813a:	db03      	blt.n	8018144 <__sread+0x18>
 801813c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801813e:	181b      	adds	r3, r3, r0
 8018140:	6563      	str	r3, [r4, #84]	; 0x54
 8018142:	bd70      	pop	{r4, r5, r6, pc}
 8018144:	89a3      	ldrh	r3, [r4, #12]
 8018146:	4a02      	ldr	r2, [pc, #8]	; (8018150 <__sread+0x24>)
 8018148:	4013      	ands	r3, r2
 801814a:	81a3      	strh	r3, [r4, #12]
 801814c:	e7f9      	b.n	8018142 <__sread+0x16>
 801814e:	46c0      	nop			; (mov r8, r8)
 8018150:	ffffefff 	.word	0xffffefff

08018154 <__swrite>:
 8018154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018156:	001f      	movs	r7, r3
 8018158:	898b      	ldrh	r3, [r1, #12]
 801815a:	0005      	movs	r5, r0
 801815c:	000c      	movs	r4, r1
 801815e:	0016      	movs	r6, r2
 8018160:	05db      	lsls	r3, r3, #23
 8018162:	d505      	bpl.n	8018170 <__swrite+0x1c>
 8018164:	230e      	movs	r3, #14
 8018166:	5ec9      	ldrsh	r1, [r1, r3]
 8018168:	2200      	movs	r2, #0
 801816a:	2302      	movs	r3, #2
 801816c:	f000 f874 	bl	8018258 <_lseek_r>
 8018170:	89a3      	ldrh	r3, [r4, #12]
 8018172:	4a05      	ldr	r2, [pc, #20]	; (8018188 <__swrite+0x34>)
 8018174:	0028      	movs	r0, r5
 8018176:	4013      	ands	r3, r2
 8018178:	81a3      	strh	r3, [r4, #12]
 801817a:	0032      	movs	r2, r6
 801817c:	230e      	movs	r3, #14
 801817e:	5ee1      	ldrsh	r1, [r4, r3]
 8018180:	003b      	movs	r3, r7
 8018182:	f000 f81f 	bl	80181c4 <_write_r>
 8018186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018188:	ffffefff 	.word	0xffffefff

0801818c <__sseek>:
 801818c:	b570      	push	{r4, r5, r6, lr}
 801818e:	000c      	movs	r4, r1
 8018190:	250e      	movs	r5, #14
 8018192:	5f49      	ldrsh	r1, [r1, r5]
 8018194:	f000 f860 	bl	8018258 <_lseek_r>
 8018198:	89a3      	ldrh	r3, [r4, #12]
 801819a:	1c42      	adds	r2, r0, #1
 801819c:	d103      	bne.n	80181a6 <__sseek+0x1a>
 801819e:	4a05      	ldr	r2, [pc, #20]	; (80181b4 <__sseek+0x28>)
 80181a0:	4013      	ands	r3, r2
 80181a2:	81a3      	strh	r3, [r4, #12]
 80181a4:	bd70      	pop	{r4, r5, r6, pc}
 80181a6:	2280      	movs	r2, #128	; 0x80
 80181a8:	0152      	lsls	r2, r2, #5
 80181aa:	4313      	orrs	r3, r2
 80181ac:	81a3      	strh	r3, [r4, #12]
 80181ae:	6560      	str	r0, [r4, #84]	; 0x54
 80181b0:	e7f8      	b.n	80181a4 <__sseek+0x18>
 80181b2:	46c0      	nop			; (mov r8, r8)
 80181b4:	ffffefff 	.word	0xffffefff

080181b8 <__sclose>:
 80181b8:	b510      	push	{r4, lr}
 80181ba:	230e      	movs	r3, #14
 80181bc:	5ec9      	ldrsh	r1, [r1, r3]
 80181be:	f000 f815 	bl	80181ec <_close_r>
 80181c2:	bd10      	pop	{r4, pc}

080181c4 <_write_r>:
 80181c4:	b570      	push	{r4, r5, r6, lr}
 80181c6:	0004      	movs	r4, r0
 80181c8:	0008      	movs	r0, r1
 80181ca:	0011      	movs	r1, r2
 80181cc:	001a      	movs	r2, r3
 80181ce:	2300      	movs	r3, #0
 80181d0:	4d05      	ldr	r5, [pc, #20]	; (80181e8 <_write_r+0x24>)
 80181d2:	602b      	str	r3, [r5, #0]
 80181d4:	f000 f8b0 	bl	8018338 <_write>
 80181d8:	1c43      	adds	r3, r0, #1
 80181da:	d103      	bne.n	80181e4 <_write_r+0x20>
 80181dc:	682b      	ldr	r3, [r5, #0]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d000      	beq.n	80181e4 <_write_r+0x20>
 80181e2:	6023      	str	r3, [r4, #0]
 80181e4:	bd70      	pop	{r4, r5, r6, pc}
 80181e6:	46c0      	nop			; (mov r8, r8)
 80181e8:	20006658 	.word	0x20006658

080181ec <_close_r>:
 80181ec:	2300      	movs	r3, #0
 80181ee:	b570      	push	{r4, r5, r6, lr}
 80181f0:	4d06      	ldr	r5, [pc, #24]	; (801820c <_close_r+0x20>)
 80181f2:	0004      	movs	r4, r0
 80181f4:	0008      	movs	r0, r1
 80181f6:	602b      	str	r3, [r5, #0]
 80181f8:	f000 f856 	bl	80182a8 <_close>
 80181fc:	1c43      	adds	r3, r0, #1
 80181fe:	d103      	bne.n	8018208 <_close_r+0x1c>
 8018200:	682b      	ldr	r3, [r5, #0]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d000      	beq.n	8018208 <_close_r+0x1c>
 8018206:	6023      	str	r3, [r4, #0]
 8018208:	bd70      	pop	{r4, r5, r6, pc}
 801820a:	46c0      	nop			; (mov r8, r8)
 801820c:	20006658 	.word	0x20006658

08018210 <_fstat_r>:
 8018210:	2300      	movs	r3, #0
 8018212:	b570      	push	{r4, r5, r6, lr}
 8018214:	4d06      	ldr	r5, [pc, #24]	; (8018230 <_fstat_r+0x20>)
 8018216:	0004      	movs	r4, r0
 8018218:	0008      	movs	r0, r1
 801821a:	0011      	movs	r1, r2
 801821c:	602b      	str	r3, [r5, #0]
 801821e:	f000 f84b 	bl	80182b8 <_fstat>
 8018222:	1c43      	adds	r3, r0, #1
 8018224:	d103      	bne.n	801822e <_fstat_r+0x1e>
 8018226:	682b      	ldr	r3, [r5, #0]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d000      	beq.n	801822e <_fstat_r+0x1e>
 801822c:	6023      	str	r3, [r4, #0]
 801822e:	bd70      	pop	{r4, r5, r6, pc}
 8018230:	20006658 	.word	0x20006658

08018234 <_isatty_r>:
 8018234:	2300      	movs	r3, #0
 8018236:	b570      	push	{r4, r5, r6, lr}
 8018238:	4d06      	ldr	r5, [pc, #24]	; (8018254 <_isatty_r+0x20>)
 801823a:	0004      	movs	r4, r0
 801823c:	0008      	movs	r0, r1
 801823e:	602b      	str	r3, [r5, #0]
 8018240:	f000 f84a 	bl	80182d8 <_isatty>
 8018244:	1c43      	adds	r3, r0, #1
 8018246:	d103      	bne.n	8018250 <_isatty_r+0x1c>
 8018248:	682b      	ldr	r3, [r5, #0]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d000      	beq.n	8018250 <_isatty_r+0x1c>
 801824e:	6023      	str	r3, [r4, #0]
 8018250:	bd70      	pop	{r4, r5, r6, pc}
 8018252:	46c0      	nop			; (mov r8, r8)
 8018254:	20006658 	.word	0x20006658

08018258 <_lseek_r>:
 8018258:	b570      	push	{r4, r5, r6, lr}
 801825a:	0004      	movs	r4, r0
 801825c:	0008      	movs	r0, r1
 801825e:	0011      	movs	r1, r2
 8018260:	001a      	movs	r2, r3
 8018262:	2300      	movs	r3, #0
 8018264:	4d05      	ldr	r5, [pc, #20]	; (801827c <_lseek_r+0x24>)
 8018266:	602b      	str	r3, [r5, #0]
 8018268:	f000 f846 	bl	80182f8 <_lseek>
 801826c:	1c43      	adds	r3, r0, #1
 801826e:	d103      	bne.n	8018278 <_lseek_r+0x20>
 8018270:	682b      	ldr	r3, [r5, #0]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d000      	beq.n	8018278 <_lseek_r+0x20>
 8018276:	6023      	str	r3, [r4, #0]
 8018278:	bd70      	pop	{r4, r5, r6, pc}
 801827a:	46c0      	nop			; (mov r8, r8)
 801827c:	20006658 	.word	0x20006658

08018280 <_read_r>:
 8018280:	b570      	push	{r4, r5, r6, lr}
 8018282:	0004      	movs	r4, r0
 8018284:	0008      	movs	r0, r1
 8018286:	0011      	movs	r1, r2
 8018288:	001a      	movs	r2, r3
 801828a:	2300      	movs	r3, #0
 801828c:	4d05      	ldr	r5, [pc, #20]	; (80182a4 <_read_r+0x24>)
 801828e:	602b      	str	r3, [r5, #0]
 8018290:	f000 f83a 	bl	8018308 <_read>
 8018294:	1c43      	adds	r3, r0, #1
 8018296:	d103      	bne.n	80182a0 <_read_r+0x20>
 8018298:	682b      	ldr	r3, [r5, #0]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d000      	beq.n	80182a0 <_read_r+0x20>
 801829e:	6023      	str	r3, [r4, #0]
 80182a0:	bd70      	pop	{r4, r5, r6, pc}
 80182a2:	46c0      	nop			; (mov r8, r8)
 80182a4:	20006658 	.word	0x20006658

080182a8 <_close>:
 80182a8:	2258      	movs	r2, #88	; 0x58
 80182aa:	2001      	movs	r0, #1
 80182ac:	4b01      	ldr	r3, [pc, #4]	; (80182b4 <_close+0xc>)
 80182ae:	4240      	negs	r0, r0
 80182b0:	601a      	str	r2, [r3, #0]
 80182b2:	4770      	bx	lr
 80182b4:	20006658 	.word	0x20006658

080182b8 <_fstat>:
 80182b8:	2258      	movs	r2, #88	; 0x58
 80182ba:	2001      	movs	r0, #1
 80182bc:	4b01      	ldr	r3, [pc, #4]	; (80182c4 <_fstat+0xc>)
 80182be:	4240      	negs	r0, r0
 80182c0:	601a      	str	r2, [r3, #0]
 80182c2:	4770      	bx	lr
 80182c4:	20006658 	.word	0x20006658

080182c8 <_getpid>:
 80182c8:	2258      	movs	r2, #88	; 0x58
 80182ca:	2001      	movs	r0, #1
 80182cc:	4b01      	ldr	r3, [pc, #4]	; (80182d4 <_getpid+0xc>)
 80182ce:	4240      	negs	r0, r0
 80182d0:	601a      	str	r2, [r3, #0]
 80182d2:	4770      	bx	lr
 80182d4:	20006658 	.word	0x20006658

080182d8 <_isatty>:
 80182d8:	2258      	movs	r2, #88	; 0x58
 80182da:	4b02      	ldr	r3, [pc, #8]	; (80182e4 <_isatty+0xc>)
 80182dc:	2000      	movs	r0, #0
 80182de:	601a      	str	r2, [r3, #0]
 80182e0:	4770      	bx	lr
 80182e2:	46c0      	nop			; (mov r8, r8)
 80182e4:	20006658 	.word	0x20006658

080182e8 <_kill>:
 80182e8:	2258      	movs	r2, #88	; 0x58
 80182ea:	2001      	movs	r0, #1
 80182ec:	4b01      	ldr	r3, [pc, #4]	; (80182f4 <_kill+0xc>)
 80182ee:	4240      	negs	r0, r0
 80182f0:	601a      	str	r2, [r3, #0]
 80182f2:	4770      	bx	lr
 80182f4:	20006658 	.word	0x20006658

080182f8 <_lseek>:
 80182f8:	2258      	movs	r2, #88	; 0x58
 80182fa:	2001      	movs	r0, #1
 80182fc:	4b01      	ldr	r3, [pc, #4]	; (8018304 <_lseek+0xc>)
 80182fe:	4240      	negs	r0, r0
 8018300:	601a      	str	r2, [r3, #0]
 8018302:	4770      	bx	lr
 8018304:	20006658 	.word	0x20006658

08018308 <_read>:
 8018308:	2258      	movs	r2, #88	; 0x58
 801830a:	2001      	movs	r0, #1
 801830c:	4b01      	ldr	r3, [pc, #4]	; (8018314 <_read+0xc>)
 801830e:	4240      	negs	r0, r0
 8018310:	601a      	str	r2, [r3, #0]
 8018312:	4770      	bx	lr
 8018314:	20006658 	.word	0x20006658

08018318 <_sbrk>:
 8018318:	4a05      	ldr	r2, [pc, #20]	; (8018330 <_sbrk+0x18>)
 801831a:	0003      	movs	r3, r0
 801831c:	6811      	ldr	r1, [r2, #0]
 801831e:	2900      	cmp	r1, #0
 8018320:	d101      	bne.n	8018326 <_sbrk+0xe>
 8018322:	4904      	ldr	r1, [pc, #16]	; (8018334 <_sbrk+0x1c>)
 8018324:	6011      	str	r1, [r2, #0]
 8018326:	6810      	ldr	r0, [r2, #0]
 8018328:	18c3      	adds	r3, r0, r3
 801832a:	6013      	str	r3, [r2, #0]
 801832c:	4770      	bx	lr
 801832e:	46c0      	nop			; (mov r8, r8)
 8018330:	200060b8 	.word	0x200060b8
 8018334:	20006668 	.word	0x20006668

08018338 <_write>:
 8018338:	2258      	movs	r2, #88	; 0x58
 801833a:	2001      	movs	r0, #1
 801833c:	4b01      	ldr	r3, [pc, #4]	; (8018344 <_write+0xc>)
 801833e:	4240      	negs	r0, r0
 8018340:	601a      	str	r2, [r3, #0]
 8018342:	4770      	bx	lr
 8018344:	20006658 	.word	0x20006658

08018348 <_exit>:
 8018348:	e7fe      	b.n	8018348 <_exit>
	...

0801834c <_init>:
 801834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801834e:	46c0      	nop			; (mov r8, r8)
 8018350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018352:	bc08      	pop	{r3}
 8018354:	469e      	mov	lr, r3
 8018356:	4770      	bx	lr

08018358 <_fini>:
 8018358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801835a:	46c0      	nop			; (mov r8, r8)
 801835c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801835e:	bc08      	pop	{r3}
 8018360:	469e      	mov	lr, r3
 8018362:	4770      	bx	lr
